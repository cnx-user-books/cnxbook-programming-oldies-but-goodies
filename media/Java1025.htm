<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
The border Property</h2></center>

<center>
<h2>
Part 6, The BorderFactory Class</h2></center>
<b><i>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1025
<p>September 25, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This lesson is Part 6 in a miniseries of several parts designed to illustrate
the <b><i>border</i></b> property and the use of that property to construct
fancy borders on Swing components.
<p>It is strongly recommended that you study the previous parts beginning
with <a href="Java1020.htm">The border Property, Part 1, EtchedBorder</a>
before embarking on this lesson.
<p>I also recommended that in addition to studying this set of lessons,
you also study my earlier lessons on Swing, which are available at <a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan</a>.&nbsp;
A consolidated index to those earlier lessons is available at my personal
web <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">site</a>.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures and listings while you are reading about
them.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">The BorderFactory class</font></b>
<p><font color="#000000">This lesson illustrates the use of class methods
of the <b>BorderFactory</b> class to create nested compound borders.</font>
<p><b><font color="#FF0000">Highlight and shadows</font></b>
<p><font color="#000000">The lesson also illustrates the ability to specify
shadow and highlight colors for 3D borders, and shows how the human eye
can be tricked by specifying those colors inappropriately.</font>
<p><b><font color="#FF0000">Conditioning</font></b>
<p><font color="#000000">In particular, it is suggested that (for persons
conditioned to the normal Windows scheme of displaying 3D components),
simply reversing the highlight and shadow colors can cause a LOWERED component
to look like a RAISED component.</font>
<p><b><font color="#FF0000">Disclaimer</font></b>
<p><font color="#000000">However, since the display of 3D components on
a 2D screen is an optical illusion anyway, this reversal might not have
the same effect on all viewers.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
The name of the sample program that I will discuss to illustrate the use
of the <b>BorderFactory</b> class is <b>Swing19</b>.
<p><b><font color="#FF0000">A screen shot</font></b>
<p>A screen shot of the GUI that is produced when the program is started
is shown in Figure 1..
<center>
<p><img SRC="Java1025A.gif" height=201 width=330>
<p><b><font size=-1>Figure 1A screen shot of Swing19.</font></b></center>

<p><b><font color="#FF0000">Comparison with earlier program</font></b>
<p><font color="#000000">For comparison purposes, the screen shot in Figure
2 shows a similar GUI that was produced in an earlier lesson by the program
named <b>Swing14</b>.</font>
<p><font color="#000000">The important thing to pay attention to, and to
compare with the screen shot in Figure 1, is the color of the highlight
and shadow on the edges of the components.</font>
<center>
<p><img SRC="Java1025b.gif" height=201 width=330>
<p><b><font size=-1>Figure 2&nbsp; A screen shot of Swing14.</font></b></center>

<p><b><font color="#FF0000">Two JLabel objects</font></b>
<p><font color="#000000">Both programs create and display two different
<b>JLabel</b>
objects, applying a different border style to each of them.</font>
<p><b><font color="#FF0000">Differences between the two programs</font></b>
<p><font color="#000000">The primary differences between the two screen
shots are:</font>
<ul>
<li>
<font color="#000000">In <b>Swing14</b>, the <i>default</i> colors for
highlight and shadow were applied to both components.&nbsp; In <b>Swing19</b>,
I specified the highlight and shadow colors as yellow and black.</font></li>

<li>
<font color="#000000">For the top component in <b>Swing19</b>, I (inappropriately)
used a bright color (yellow) for the shadow and a dark color (black) for
the highlight.&nbsp; This caused the component to appear to protrude out
of the screen instead of being depressed into the screen, even though the
LOWERED version of a
<b>BevelBorder</b> was used.</font></li>

<li>
<font color="#000000">The borders on the components in <b>Swing19</b> were
produced using the <b>BorderFactory </b>class instead of the <b>new</b>
operator, but this shouldn't produce any noticeable difference between
the two screen shots.</font></li>
</ul>
<b><font color="#FF0000">A side trip into optical illusions</font></b>
<p>One day several years ago, I was printing some screen shots of Java
GUIs produced on my Windows 95 system.&nbsp; I was watching the paper emerge
from the printer, and from my vantage point, I was viewing the paper upside
down.
<p><b><font color="#FF0000">Buttons were depressed</font></b>
<p>I noticed that all of the buttons appeared to be depressed into the
paper rather than protruding from the paper.
<p>Suddenly, it dawned on me that I had become conditioned to a specific
stimulus just like the famous scientist's dog that salivated each time
the bell rang.&nbsp; (I have forgotten the name of the famous scientist
but I still remember the dog.&nbsp; So much for fame.)
<p><b><font color="#FF0000">Conditioned by Microsoft Windows</font></b>
<p>I had become conditioned to respond appropriately to Windows 3D component
representations with highlights and shadows based on a light source coming
from the upper left corner of the screen.
<p><b><font color="#FF0000">What does the light source do?</font></b>
<p>A light source at this location would cause the top and the left side
of a protruding object to be brighter than the face of the object.&nbsp;
It would also cause the bottom and right side of the object to be less
bright than the face of the object.
<p><b><font color="#FF0000">An optical illusion</font></b>
<p>This is an optical illusion that causes a 2D representation to look
like a 3D object.
<p>When viewed right side up (after proper conditioning), if the left and
top are brighter, the illusion is that the component is protruding from
the surface.&nbsp; However, when viewed upside down, the illusion is that
the component is depressed into the surface.
<p>It usually isn't easy to view the screen upside down, but it is easy
to view a hard-copy screen shot upside down.
<p><b><font color="#FF0000">Another way to destroy the illusion</font></b>
<p>Another way to destroy the illusion is to switch the brightness of the
colors used for highlight and shadow, as illustrated in the previous screen
shot of the top component for the program named <b>Swing19</b>.
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will discuss the program named <b>Swing19</b> in fragments.&nbsp; A complete
listing of the program is shown in Listing 4 near the end of the lesson.
<p><b><font color="#FF0000">Will skip material discussed earlier</font></b>
<p><b>Swing19</b> is very similar to the program named <b>Swing14</b> that
I discussed in detail in an earlier lesson.&nbsp; Therefore, I will skip
those parts of the program that were discussed in the previous lesson.
<p><b><font color="#FF0000">The top Swing component</font></b>
<p>Listing 1 shows the code fragment that prepares the border for the top
Swing component in the screen shot for
<b>Swing19</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt">
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp; <b>CompoundBorder</b>
theBorder =&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp; <b>BorderFactory.createCompoundBorder</b>(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; <b><font color="#FF0000">BorderFactory.createBevelBorder(</font></b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; <b><font color="#FF0000">BevelBorder.LOWERED,</font></b></font></font>
<br><b><font face="Courier New,Courier"><font color="#FF0000"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color.black,Color.yellow),</font></font></font></b>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createCompoundBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createMatteBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
19,19,19,19,Color.blue),</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createEmptyBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5)));</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 1</font></font></b></td>
</tr>
</table>

<p><font color="#000000">This statement creates an object of the <b>CompoundBorder</b>
class, which will be used later as the border for a <b>JLabel</b> object.&nbsp;
(The portion of the statement that is highlighted in red will be discussed
later.)</font>
<p><b><font color="#FF0000">A CompoundBorder object</font></b>
<p><font color="#000000">The programs in earlier lessons created borders
using statements incorporating the <b>new</b> operator, such as the following:</font>
<p><b><font color="#000000"><font size=-1>new CompoundBorder( new BevelBorder(...</font></font></b>
<p><b><font color="#FF0000">Swing19 uses factory methods</font></b>
<p><font color="#000000">However, <b>Swing19</b> doesn't use the <b>new</b>
operator to instantiate <b>Border</b> objects.&nbsp; Instead, it invokes
factory methods with names like <b>createCompoundBorder()</b> to instantiate
and return references to <b>Border</b> objects.&nbsp; These factory methods
are class methods of the <b>BorderFactory</b> class.</font>
<p><b><font color="#FF0000">What does Sun have to say?</font></b>
<p><font color="#000000">Here is what Sun has to say about the <b>BorderFactory</b>
class.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Arial Narrow"><font size=-1>Factory
class for vending standard Border objects. Wherever possible, this factory
will hand out references to shared Border instances.&nbsp;</font></font></td>
</tr>
</table>

<p><b><font color="#FF0000">What does Flanagan have to say?</font></b>
<p>Here is what David Flanagan has to say about the <b>BorderFactory</b>
class in his excellent book, <u>Java Foundation Classes in a Nutshell</u>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Arial Narrow"><font size=-1>The
static methods of this class return various types of <b>Border</b> objects.&nbsp;
These methods may return previously created shared objects, making their
use more memory-efficient than creating unshared <b>Border</b> objects
with the <b>new</b> operator.&nbsp;</font></font></td>
</tr>
</table>

<p><b><font color="#FF0000">The bottom line on BorderFactory</font></b>
<p>So, the bottom line seems to be that you can create your <b>Border</b>
objects in either of two ways
<ul>
<li>
Using the <b>new</b> operator with the constructor for a specific <b>Border</b>
class.</li>

<li>
Using the factory method of the <b>BorderFactory</b> class for the type
of border that you need.</li>
</ul>
The use of the factory methods of the
<b>BorderFactory</b> class may produce
more memory-efficient programs.
<p><b><font color="#FF0000">Highlights and shadows</font></b>
<p>One of the constructors for the <b>BevelBorder</b> class is as follows.&nbsp;
Here, we are interested mainly in the parameters.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Arial Narrow"><font size=-1>public
BevelBorder(int bevelType,</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color highlight,</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color shadow)</font></font>
<p><font face="Arial Narrow"><font size=-1>Creates a bevel border with
the specified type, highlight and shadow colors.</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; Parameters:</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
bevelType - the type of bevel for the border</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
highlight - the <b>color</b> to use for the bevel <b>highlight</b></font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
shadow - the <b>color</b> to use for the bevel <b>shadow</b></font></font></td>
</tr>
</table>

<p>(This constructor is mirrored in the factory method for an object of
the <b>BevelBorder</b> class.)
<p><b><font color="#FF0000">Parameters specify highlight and shadow colors</font></b>
<p>As you can see, the second parameter is the highlight color and the
third parameter is the shadow color.&nbsp; Normally, we would expect the
highlight to be brighter than the shadow.
<p><b><font color="#FF0000">What happens if you switch them?</font></b>
<p>A portion of the previous code fragment is repeated in Listing 2.&nbsp;
(This is the portion that is highlighted in red in Listing 1.)
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>&nbsp;

<b><font color="#FF0000">BorderFactory.createBevelBorder(</font></b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; <b><font color="#FF0000">BevelBorder.LOWERED,</font></b></font></font>
<br><b><font face="Courier New,Courier"><font color="#FF0000"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color.black,Color.yellow),</font></font></font></b>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 2</font></font></b></td>
</tr>
</table>

<p>As you can see, this fragment requests a LOWERED <b>BevelBorder</b>
object with a black highlight and a yellow shadow (the shadow was purposely
made brighter than the highlight).
<p><b><font color="#FF0000">Optical illusion is reversed</font></b>
<p>The result is to reverse the optical illusion, causing the component
to appear to be RAISED instead of LOWERED (see the top component in Figure
1, which shows a screen shot for <b>Swing19</b>).
<p>(As mentioned earlier, since this is an optical illusion anyway, it
may not appear the same to all observers.)
<p><b><font color="#FF0000">The bottom component</font></b>
<p>Listing 3 shows the code fragment that prepares the border for the bottom
component in the screen shot for <b>Swing19 </b>(see Figure 1).
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;
theBorder =&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createCompoundBorder(</font></font>
<br><b><font face="Courier New,Courier"><font color="#FF0000"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createBevelBorder(</font></font></font></b>
<br><b><font face="Courier New,Courier"><font color="#FF0000"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BevelBorder.RAISED,</font></font></font></b>
<br><b><font face="Courier New,Courier"><font color="#FF0000"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color.yellow,Color.black),</font></font></font></b>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createCompoundBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createMatteBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
19,19,19,19,Color.blue),</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createEmptyBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5)));</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 3</font></font></b></td>
</tr>
</table>

<p><font color="#000000">In this case, I caused the highlight (yellow)
to be brighter than the shadow (black) so that the resulting component
appeared to be RAISED as specified.</font>
<p><b><font color="#FF0000">Top and bottom components look alike</font></b>
<p><font color="#000000">Going back to the screen shot, the top component
with reversed highlight and shadow looks just like the bottom component
with proper highlight and shadow.&nbsp; The moral to the story is, be careful
when you specify highlight and shadow colors.</font>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
The factory methods of the <b>BorderFactory</b> class can be used to produce
<b>Border</b>
objects that are shared, and therefore can be more memory-efficient than
their counterparts instantiated using the <b>new</b> operator.
<p>You can specify the highlight and shadow colors for various <b>Border</b>
objects.&nbsp; However, you need to be careful when you do.&nbsp; Otherwise,
you may spoil the 3D optical illusion for many observers.
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
That completes our miniseries on the <b>border</b> property.&nbsp; In the
next lesson, I will begin a discussion of the <b>alignment</b> property.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is shown in Listing 4.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*File
Swing19</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 3/30/00</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000, R.G.Baldwin</font></font>
<p><font face="Courier New,Courier"><font size=-2>Illustrates the use of
the BorderFactory</font></font>
<br><font face="Courier New,Courier"><font size=-2>class for nesting of
CompoundBorder&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>objects.&nbsp; This
program creates and&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>displays two different
border styles.&nbsp;</font></font>
<p><font face="Courier New,Courier"><font size=-2>Borders created using
BorderFactory are</font></font>
<br><font face="Courier New,Courier"><font size=-2>shared among objects.&nbsp;
That is the advantage</font></font>
<br><font face="Courier New,Courier"><font size=-2>of using the factory
method.</font></font>
<p><font face="Courier New,Courier"><font size=-2>Also illustrates specifying
the highlight</font></font>
<br><font face="Courier New,Courier"><font size=-2>and shadow colors for
a BevelBorder and,&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>just for fun, shows
that simply reversing</font></font>
<br><font face="Courier New,Courier"><font size=-2>the two (making the
shadow light and the</font></font>
<br><font face="Courier New,Courier"><font size=-2>highlight dark) reverses
the optical</font></font>
<br><font face="Courier New,Courier"><font size=-2>illusion and causes
a LOWERED 3-D component</font></font>
<br><font face="Courier New,Courier"><font size=-2>to appear to be RAISED.&nbsp;
This illustrates</font></font>
<br><font face="Courier New,Courier"><font size=-2>how we have become conditioned
to having</font></font>
<br><font face="Courier New,Courier"><font size=-2>the light source at
the upper left.&nbsp; The</font></font>
<br><font face="Courier New,Courier"><font size=-2>reversal of the two
colors would be correct</font></font>
<br><font face="Courier New,Courier"><font size=-2>for a LOWERED 3-D component
if the light&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>source were at the bottom
right.</font></font>
<p><font face="Courier New,Courier"><font size=-2>Tested using JDK 1.2.2
under WinNT 4.0 WkStn</font></font>
<br><font face="Courier New,Courier"><font size=-2>**********************************/</font></font>
<p><font face="Courier New,Courier"><font size=-2>import java.awt.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import java.awt.event.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.swing.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.swing.border.*;</font></font>
<p><font face="Courier New,Courier"><font size=-2>class Swing19 extends
JFrame{</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; //---------------------------------------//&nbsp;</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public static
void main(String args[]) {</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new Swing19();</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end main()</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; //---------------------------------------//</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; //The purpose
of this method is to create</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; // and return
an opaque pink JLabel with</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; // a border.&nbsp;
The text content of the&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; // lable is provided
as the first</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; // parameter.&nbsp;
The border type is provided</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; // as the second
parameter.&nbsp; When the</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; // label is displayed,
the left and top</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; // insets are
displayed following the&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; // text content
of the label.</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; JLabel makeLabel(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String content,Border borderType){</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; JLabel
label = new JLabel();</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; label.setBorder(borderType);</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; label.setOpaque(true);</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; label.setBackground(Color.pink);</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; label.setText(content
+ ","&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; +label.getInsets().left
+ ","</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; +label.getInsets().top);</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; return
label;</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; }//end makeLabel()</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; //---------------------------------------//</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; Swing19(){//constructor</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; getContentPane().setLayout(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FlowLayout());</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; CompoundBorder
theBorder =&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createCompoundBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createBevelBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BevelBorder.LOWERED,Color.black,</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color.yellow),</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createCompoundBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createMatteBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
19,19,19,19,Color.blue),</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createEmptyBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5)));</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; getContentPane().add(makeLabel(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Nested CompoundBorder",theBorder));</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; theBorder
=&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createCompoundBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createBevelBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BevelBorder.RAISED,Color.yellow,</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color.black),</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createCompoundBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createMatteBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
19,19,19,19,Color.blue),</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BorderFactory.createEmptyBorder(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5)));</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; getContentPane().add(makeLabel(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Nested CompoundBorder",theBorder));</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; setTitle("Copyright
2000, R.G.Baldwin");</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; setSize(329,200);</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; setVisible(true);</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; //.....................................//</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; //Anonymous
inner terminator class</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; this.addWindowListener(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new WindowAdapter(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
public void windowClosing(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
WindowEvent e){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.exit(0);</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}//end windowClosing()</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}//end WindowAdapter</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; );//end
addWindowListener</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; //.....................................//</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; }//end constructor</font></font>
<p><font face="Courier New,Courier"><font size=-2>}//end class Swing19</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 4</font></font></b></td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
