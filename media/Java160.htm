<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, Graphics - Getting Started<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 160, Revised 02/03/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This lesson is the first in a series of several lessons which will concentrate
primarily on the use of the <b>Graphics</b> class to render shapes, fonts,
and images on the screen.

<p>Before getting into the technical details, we will look at some relatively
simple but interesting programs that illustrate the rendering of shapes
and fonts. We will defer the rendering of images to a subsequent lesson.
This lesson will explain the sample program in a general sense. Subsequent
lessons will fill in the technical details of the <b>Graphics</b> class.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
This program illustrates the use of the <b>Canvas </b>class and several
of the methods of the <b>Graphics </b>class.

<p>The program uses simple drawing techniques to create two fake buttons
that appear (on some systems at least) to be green 3D button objects.

<p>Note that these 3D buttons are not constructed using the <b>Button </b>class
or the <b>draw3DRect()</b> method of the Graphics class. Rather, they are
rendered using a simple <b>drawRect()</b> method of the <b>Graphics</b>
class (which draws a 2D rectangle). The 3D effect results from a visual
artifact of the drawing process.

<p>When the program starts, two green fake buttons with captions of <i>"Small"</i>
and <i>"Large"</i> are displayed in a <b>Frame </b>object along with a
real <b>Button </b>that has a caption of <i>"Button".</i>

<p>The green buttons initially appears to protrude slightly from the surface
of the <b>Frame</b> object in a manner similar to the real <b>Button</b>
object.

<p>When you point to a green button and press the left mouse button, the
green button appears to be depressed into the surface of the <b>Frame</b>
object in a manner similar to a real <b>Button</b> object.

<p>When you release the mouse button, the green button appears to pop back
out and protrude from the surface of the <b>Frame</b> object.

<p>Since this is an optical illusion, some observers may not experience
the illusion in which case they will simply see green rectangles with text
and lines on them.

<p>The 3D effect is an artifact of the manner in which the rectangle is
drawn onto an underlying <b>Canvas </b>object.

<p>The fake buttons are instances of a class that subclasses the <b>Canvas</b>
class. The program subclasses <b>Canvas </b>to override the <b>paint()</b>
method in order to set the size and color of a <b>Canvas </b>object, to
draw a rectangle which is partially on and partially off of the <b>Canvas
</b>object, and to draw a caption on the <b>Canvas</b> object. The fact
that the rectangle is only partially on the <b>Canvas</b> object causes
the <b>Canvas </b>object to appear to protrude out of the screen, or to
be depressed into the screen which produces the 3D effect.

<p>The rectangle is offset either up and to the left relative to the <b>Canvas</b>
object or down and to the right. In either case, two lines on the border
of the rectangle are lost because they hang off the edge of the <b>Canvas</b>
object. The remaining two lines appear to be shadows and this causes the
3D effect. When the two visible lines are on the right and bottom of the
<b>Canvas</b> object, the button appears to protrude out of the screen.
When the two visible lines are on the left and top of the <b>Canvas</b>
object, the button appears to be depressed into the screen.

<p>When you click on one of the green buttons, some text is displayed on
the standard output device to confirm that the click occurred. Some text
is also displayed when you click on the real <b>Button</b> object.

<p>It may be significant to note that the fake green buttons are much more
responsive than the real <b>Button </b>when running under Win95 on a machine
with a 133MHz Pentium. This can be demonstrated by clicking repeatedly
on one or the other as fast as you can click. The real <b>Button </b>appears
to miss some of the clicks while the fake green buttons appear to respond
properly to every click. At least the fake green buttons respond to a much
higher percentage of clicks than the real <b>Button</b>.

<p>These results were produced using JDK 1.1.3, running under Windows 95.

<p>Two improved versions of this program are presented at the end of this
lesson. The first improved version uses lines instead of rectangles to
achieve the shadow effect. Double lines are used to enhance the shadow
effect.

<p>In addition, the caption on the button is caused to move slightly when
the button is pushed. This also enhances the 3D effect by giving the illusion
of motion to the button.

<p>The second improved version draws highlights in addition to shadows
on the button. In these two cases, a lighter or darker shade of the background
color of the button (instead of black) is used to produce the effect. This
produces a much more convincing illusion of a 3D button than the previous
two versions of the program.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
The first interesting code fragment is the constructor for the class that
extends <b>Canvas</b> and overrides <b>paint() </b>along with the set of
instance variables that define the state of the object.

<p>The instance variable named <b>pushed</b> is used in the overridden
<b>paint()</b> method to determine how to render the fake button. This
instance variable is initialized to <i>false </i>and later modified by
a mouse listener object. When <b>pushed</b> is <i>false</i>, the fake button
appears to protrude out of the screen, and when it is <i>true</i>, the
fake button appears to be depressed into the screen.

<p>The constructor simply accepts parameters for the <b>width </b>and <b>height
</b>of the fake button along with a <b>caption </b>to display on the button
and saves those parameters in a set of instance variables.
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>FakeButtonClass </b>extends Canvas{
&nbsp; boolean pushed = false;//indicates button pushed or not
&nbsp; int width; //button width in pixels
&nbsp; int height;//button height in pixels
&nbsp; String caption;//caption for button
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public <b>FakeButtonClass</b>(//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int width,int height,String caption){
&nbsp;&nbsp;&nbsp; this.width = width;
&nbsp;&nbsp;&nbsp; this.height = height;
&nbsp;&nbsp;&nbsp; this.caption = caption;
&nbsp;&nbsp;&nbsp; this.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; this.setSize(this.width,this.height);
&nbsp; }//end constructor

&nbsp; //...
}//end class FakeButtonClass</pre></td></tr></table>
We will discuss the overridden <b>paint()</b> method in two steps. The
first discussion centers on the rendering of the 3D button. The second
discussion centers on the rendering of the <b>caption</b> in the object.

<p>As you can see in the follow code fragment, the code for rendering the
3D button is very simple. A determination is made as to which edges of
the rectangle should hang off the <b>Canvas</b> object using the value
of the <b>pushed</b> instance variable. Then the <b>drawRect()</b> method
is used to draw a rectangle on the <b>Canvas </b>object with the same dimensions
as the <b>Canvas</b> object. The first two parameters of the <b>drawRect()</b>
method specify the coordinates of the upper left-hand corner of the rectangle
in its container (the <b>Canvas</b> object).

<p>For the "depressed" case, the rectangle is offset down and to the right
by one pixel causing the right and bottom border lines of the rectangle
to be lost.

<p>For the "protruding" case, the rectangle is offset up and to the left
by one pixel causing the left and top border lines of the rectangle to
be lost.
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>FakeButtonClass </b>extends Canvas{
&nbsp; //...

&nbsp; public void <b>paint</b>(Graphics g){
&nbsp;&nbsp;&nbsp; if(<b>pushed</b>) g.<b>drawRect</b>(1,1,width,height);
&nbsp;&nbsp;&nbsp; else g.<b>drawRect</b>(-1,-1,width,height);

&nbsp;&nbsp;&nbsp; //...
&nbsp; }//end paint()
}//end class FakeButtonClass</pre></td></tr></table>
The next step in the discussion of the overridden <b>paint()</b> method
centers around locating the <b>caption</b> within the object. The goal
is to have it approximately centered in the object. This is slightly more
complicated than drawing the rectangle. We will settle for causing the
<b>caption</b> to be centered horizontally and slightly above the center
vertically.

<p>We will accomplish the positioning using an object of type <b>FontMetrics</b>.
Such an object can be caused to contain information about the font being
used in a particular <b>Graphics</b> object. We will have more to say about
this in a subsequent lesson. For the time being, suffice it to say that
we can obtain a <b>FontMetrics</b> object containing information about
the font in our <b>Graphics</b> object by invoking the <b>getFontMetrics()</b>
method on that object. Having the <b>FontMetrics</b> object, we can extract
information about the font by invoking methods on the <b>FontMetrics</b>
object.

<p>Horizontal placement is easy. We determine the width in pixels of our
<b>caption</b> by invoking the <b>stringWidth()</b> method on the <b>FontMetrics</b>
object and passing the <b>caption</b> as a parameter. Then we do a little
arithmetic to determine the horizontal coordinate where we should render
the <b>caption</b>.

<p>Vertical placement is a little more difficult. The <b>getHeight()</b>
method returns a combination of several parameters that describe the font:
<ul><li><b>leading </b>(space between lines)</li>

<li><b>ascent </b>(size of the upper-case characters above the baseline)</li>

<li><b>descent </b>(size of the part that hangs down below the baseline, as
in a lower-case "y")</li></ul>
For ease of programming, I simply adjusted the baseline down from the vertical
center of the object by an amount equal to one-fourth of the value returned
by <b>getHeight()</b> and it seemed to work pretty well for the default
font that I was using.
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>FakeButtonClass </b>extends Canvas{
&nbsp; //...
&nbsp; String <b>caption</b>;//caption for button

&nbsp; public void <b>paint</b>(Graphics g){
&nbsp;&nbsp;&nbsp; //...
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; int fontHeight = g.<b>getFontMetrics</b>().<b>getHeight</b>();
&nbsp;&nbsp;&nbsp; int stringWidth =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.<b>getFontMetrics</b>().<b>stringWidth</b>(caption);
&nbsp;&nbsp;&nbsp; g.<b>drawString</b>(caption,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (width-stringWidth)/2,(height/2)+(fontHeight/4));
&nbsp; }//end paint()
}//end class FakeButtonClass</pre></td></tr></table>
The next interesting code fragment contains statements from the constructor
of our GUI object to instantiate two objects of the <b>FakeButtonClass
</b>which are subsequently added to a <b>Frame</b> object using a <b>FlowLayout</b>
manager.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; FakeButtonClass firstFakeButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>new </b>FakeButtonClass(40,20,"Small");
&nbsp;&nbsp;&nbsp; FakeButtonClass secondFakeButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>new </b>FakeButtonClass(80,40,"Large");</pre></td></tr></table>
The next interesting code fragment instantiates a mouse listener object
and registers it to listen for mouse events on the two <b>FakeButton</b>
objects.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; MouseListenerClass myMouseListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseListenerClass();
&nbsp;&nbsp;&nbsp; firstFakeButton.<b>addMouseListener</b>(myMouseListener);
&nbsp;&nbsp;&nbsp; secondFakeButton.<b>addMouseListener</b>(myMouseListener);</pre></td></tr></table>
Next, we see the code in the overridden <b>mousePressed()</b> method in
the mouse listener object which is invoked whenever a <b>mouse </b>event
occurs on one of the <b>FakeButton</b> objects. This method is invoked
on the downstroke of the mouse button and causes the appearance of the
<b>FakeButton</b> object to become depressed into the screen by setting
the <b>pushed</b> instance variable of the object to <i>true</i> and calling
<b>repaint()</b> on the object.

<p>Note that the <b>component</b> object returned from <b>getComponent()</b>
must be downcast before it can be used to access the <b>pushed</b> instance
variable.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public void <b>mousePressed</b>(MouseEvent e){
&nbsp;&nbsp;&nbsp; ((FakeButtonClass)e.getComponent()).<b>pushed </b>= true;
&nbsp;&nbsp;&nbsp; e.getComponent().<b>repaint</b>();
&nbsp; }//end mousePressed()</pre></td></tr></table>
Finally, we see the code in the overridden <b>mouseReleased()</b> method
in the mouse listener object. This method is invoked on the upstroke of
the mouse button and causes the appearance of the <b>FakeButton</b> object
to appear to protrude from the screen by setting the <b>pushed</b> instance
variable of the object to <i>false</i> and calling <b>repaint()</b> on
the object.

<p>This method also displays a message on the screen to confirm that the
event has occurred.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public void <b>mouseReleased</b>(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Display a message
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("mouseReleased");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ((FakeButtonClass)e.getComponent()).<b>pushed </b>= false;
&nbsp;&nbsp;&nbsp; e.getComponent().<b>repaint</b>();
&nbsp; }//end mouseReleased()</pre></td></tr></table>
.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
This section contains a complete listing of the program.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Shapes02.java.java Copyright 1997, R.G.Baldwin
This program illustrates the use of the Canvas class and
several of the methods of the Graphics class.

The program creates two fake buttons that appear (on some
systems at least) to be green 3D button objects.

Note that the green 3D buttons are not constructed using&nbsp;
the Button class or the draw3DRect() method of the Graphics
class.

When the program starts, two green fake buttons with&nbsp;
captions of "Small" and "Large" along with a real Button&nbsp;
with a caption of "Button" appear in a Frame object.&nbsp;&nbsp;

The green buttons appears to protrude slightly from the&nbsp;
surface of the Frame object in a manner similar to the
real Button object.

When you point to a green button with the mouse and&nbsp;
press the left mouse button, the green button appears to
become depressed into the surface of the Frame object in
a manner similar to a real Button object.&nbsp;&nbsp;

When you release the mouse button, the green button&nbsp;
appears to pop back out of the surface of the Frame&nbsp;
object.&nbsp;

This is accomplished using a simple drawRect() method.
The draw3DRect() method is not used in this case.

The 3D effect is an artifact of the manner in which the&nbsp;
rectangle is drawn onto an underlying Canvas object. The
reason that the 3D effect appears is explained in the&nbsp;
comments.

When you click on a green button, some text is displayed
on the standard output device to confirm that the click&nbsp;
occurred.

Some text is also displayed when you click on the real&nbsp;
Button object.

It may be significant to note that the fake green buttons
are much more responsive than the real Button when running
under Win95 on a machine with a 133MHz Pentium.&nbsp; This can
be demonstrated by clicking repeatedly on one or the
other as fast as you can click. The real Button appears to
miss some of the clicks while the fake green buttons&nbsp;
appear to respond properly to every click.&nbsp; At least the
fake green buttons responds to a much higher percentage of&nbsp;
clicks than the real Button.

These results were produced using JDK 1.1.3, running under&nbsp;
Windows 95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;

//=======================================================//
//This class is used to create a fake button object.

//Subclass Canvas to override the paint method in order
// to set the size and color of a Canvas object, to draw
// a rectangle which is partially on and partially off
// of the Canvas object, and to draw a caption on the
// Canvas object.
&nbsp;&nbsp;
//The fact that the rectangle is only partially on the
// Canvas object causes the Canvas object to appear to&nbsp;
// protrude out of the screen, or to be depressed into the&nbsp;
// screen which produces the 3D effect.&nbsp;

//The rectangle is offset either up and to the left&nbsp;
// relative to the Canvas object or down and to the right.
// In either case, two lines on the border of the
// rectangle are lost.&nbsp; The remaining two appear to be
// shadows and this causes the 3D effect.

class FakeButtonClass extends Canvas{
&nbsp; boolean pushed = false;//indicates button pushed or not
&nbsp; int width; //button width in pixels
&nbsp; int height;//button height in pixels
&nbsp; String caption;//caption for button
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public FakeButtonClass(//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int width,int height,String caption){
&nbsp;&nbsp;&nbsp; this.width = width;
&nbsp;&nbsp;&nbsp; this.height = height;
&nbsp;&nbsp;&nbsp; this.caption = caption;
&nbsp;&nbsp;&nbsp; this.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; this.setSize(this.width,this.height);
&nbsp; }//end constructor

&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; //Determine offset and draw rectangle on Canvas object
&nbsp;&nbsp;&nbsp; if(pushed) g.drawRect(1,1,width,height);
&nbsp;&nbsp;&nbsp; else g.drawRect(-1,-1,width,height);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Draw the caption centered horizontally and slightly
&nbsp;&nbsp;&nbsp; // above center vertically. For vertical placement,&nbsp;
&nbsp;&nbsp;&nbsp; // use one-fourth the sum of leading, ascent, and
&nbsp;&nbsp;&nbsp; // descent parameters of the font to calculate the
&nbsp;&nbsp;&nbsp; // baseline position for the characters.
&nbsp;&nbsp;&nbsp; int fontHeight = g.getFontMetrics().getHeight();
&nbsp;&nbsp;&nbsp; int stringWidth =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.getFontMetrics().stringWidth(caption);
&nbsp;&nbsp;&nbsp; g.drawString(caption,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (width-stringWidth)/2,(height/2)+(fontHeight/4));
&nbsp; }//end paint()
}//end class FakeButtonClass

//=======================================================//

class Shapes02 extends Frame{//controlling class
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate an object of this type
&nbsp;&nbsp;&nbsp; new Shapes02();
&nbsp; }//end main&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; public Shapes02(){//constructor
&nbsp;&nbsp;&nbsp; this.setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setSize(300,150);

&nbsp;&nbsp;&nbsp; //Instantiate two fake button objects of different
&nbsp;&nbsp;&nbsp; // sizes and a real Button object
&nbsp;&nbsp;&nbsp; FakeButtonClass firstFakeButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FakeButtonClass(40,20,"Small");
&nbsp;&nbsp;&nbsp; FakeButtonClass secondFakeButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FakeButtonClass(80,40,"Large");
&nbsp;&nbsp;&nbsp; Button myRealButton = new Button("Button");

&nbsp;&nbsp;&nbsp; //Add the buttons to the Frame object
&nbsp;&nbsp;&nbsp; this.add(firstFakeButton);
&nbsp;&nbsp;&nbsp; this.add(myRealButton);
&nbsp;&nbsp;&nbsp; this.add(secondFakeButton);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setVisible(true);//make it all visible
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a mouse listener object and register it
&nbsp;&nbsp;&nbsp; // to listen for mouse events on the two fake buttons
&nbsp;&nbsp;&nbsp; MouseListenerClass myMouseListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseListenerClass();
&nbsp;&nbsp;&nbsp; firstFakeButton.addMouseListener(myMouseListener);
&nbsp;&nbsp;&nbsp; secondFakeButton.addMouseListener(myMouseListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register an action listener object
&nbsp;&nbsp;&nbsp; // on the real Button object.
&nbsp;&nbsp;&nbsp; myRealButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListenerClass());

&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which will
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes the&nbsp;
&nbsp;&nbsp;&nbsp; // Frame.
&nbsp;&nbsp;&nbsp; WindowListenerClass myWindowListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowListenerClass();
&nbsp;&nbsp;&nbsp; this.addWindowListener(myWindowListener);&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class Shapes02 definition
//=======================================================//

//This class is used to instantiate a listener object that
// listens for mouse events on the fake buttons and causes
// the visual rendering to switch between a protruding
// image and a "pushed" image. Also a message is displayed
// when the button is clicked.
class MouseListenerClass extends MouseAdapter{

&nbsp; //Override the mousePressed() method
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Set the "pushed" variable to true and repaint
&nbsp;&nbsp;&nbsp; ((FakeButtonClass)e.getComponent()).pushed = true;
&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
&nbsp; }//end mousePressed()

&nbsp; //Override the mouseReleased() method
&nbsp; public void mouseReleased(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Display a message
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("mouseReleased");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set the "pushed" variable to false and repaint
&nbsp;&nbsp;&nbsp; ((FakeButtonClass)e.getComponent()).pushed = false;
&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
&nbsp; }//end mouseReleased()
}//end class MouseListenerClass
//=======================================================//

//This class is used to instantiate a listener object that
// listens for action events on the real button and&nbsp;
// displays a message when it is clicked.
class MyActionListenerClass implements ActionListener{
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println("actionPerformed");//announce
&nbsp; }//end actionPerformed()
}//end class MyActionListenerClass

//=======================================================//

//The following listener is used to terminate the program&nbsp;
// when the user closes the frame.
class WindowListenerClass extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WindowListenerClass
//=======================================================//</pre></td></tr></table>
.
<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Without viewing the solution that follow, write a Java application
that replicates the functionality of the program named Shapes02 but uses
the <b>drawLine()</b> method instead of the <b>drawRect()</b> method. Use
double-width lines to emphasize the shadow effect. Also draw the caption
with a slight shift when the button is pushed to create the optical illusion
that the button has moved.

<p><font color="#0000ff"><font size=-1>A - See the following solution</font></font><table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg141.java.java Copyright 1997, R.G.Baldwin
From lesson 160.

Without viewing the solution that follows, write a Java
application that replicates the functionality of the&nbsp;
application named Shapes02.java but uses the drawLine()
method in place of the drawRect() method.&nbsp;

Use double width lines to emphasize the shadow effect.

Also draw the caption with a slight shift when the button
is pushed to give the visual impression of motion.
&nbsp;&nbsp;
This program illustrates the use of the Canvas class and
several of the methods of the Graphics class.

The program creates two fake buttons that appear (on some
systems at least) to be green 3D button objects.

When the program starts, two green fake buttons with&nbsp;
captions of "Small" and "Large" along with a real Button&nbsp;
with a caption of "Button" appear in a Frame object.&nbsp;&nbsp;

The green buttons appears to protrude slightly from the&nbsp;
surface of the Frame object in a manner similar to the
real Button object.

When you point to a green button with the mouse and&nbsp;
press the left mouse button, the green button appears to
become depressed into the surface of the Frame object in
a manner similar to a real Button object.&nbsp;&nbsp;

When you release the mouse button, the green button&nbsp;
appears to pop back out of the surface of the Frame&nbsp;
object.&nbsp;

The 3D effect is an artifact of the manner in which the&nbsp;
lines and the text are drawn onto an underlying Canvas&nbsp;
object. The reason that the 3D effect appears is explained
in the comments.

It may be significant to note that the fake green buttons
are much more responsive than the real Button when running
under Win95 on a machine with a 133MHz Pentium.&nbsp; This can
be demonstrated by clicking repeatedly on one or the
other as fast as you can click. The real Button appears to
miss some of the clicks while the fake green buttons&nbsp;
appear to respond properly to every click.&nbsp; At least the
fake green buttons responds to a much higher percentage of&nbsp;
clicks than the real Button.

These results were produced using JDK 1.1.3, running under&nbsp;
Windows 95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;

//=======================================================//
//This class is used to create a fake button object.

//Subclass Canvas to override the paint method in order
// to set the size and color of a Canvas object, to draw
// a series of lines on the Canvas object, and to draw a&nbsp;
// caption on the Canvas object.

//The lines are drawn so as to suggest shadows on the&nbsp;
// right and bottom of the button when it is not pushed,
// and to suggest shadows on the right and top of the
// button when it is pushed.

//The caption is drawn so as to move slightly down and to
// the right when the button is pushed to give the illusion
// of motion.
&nbsp;&nbsp;
//The combination of the shadow effect and the motion&nbsp;
// effect produce the illusion of a 3D button being
// pressed into the screen.

class FakeButtonClass extends Canvas{
&nbsp; boolean pushed = false;//indicates button pushed or not
&nbsp; int width; //button width in pixels
&nbsp; int height;//button height in pixels
&nbsp; String caption;//caption for button
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public FakeButtonClass(//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int width,int height,String caption){
&nbsp;&nbsp;&nbsp; this.width = width;
&nbsp;&nbsp;&nbsp; this.height = height;
&nbsp;&nbsp;&nbsp; this.caption = caption;
&nbsp;&nbsp;&nbsp; this.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; this.setSize(this.width,this.height);
&nbsp; }//end constructor

&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; //Draw the caption centered horizontally and slightly
&nbsp;&nbsp;&nbsp; // above center vertically. For vertical placement,&nbsp;
&nbsp;&nbsp;&nbsp; // use one-fourth the sum of leading, ascent, and
&nbsp;&nbsp;&nbsp; // descent parameters of the font to calculate the
&nbsp;&nbsp;&nbsp; // baseline position for the characters.
&nbsp;&nbsp;&nbsp; int fontHeight = g.getFontMetrics().getHeight();
&nbsp;&nbsp;&nbsp; int stringWidth =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.getFontMetrics().stringWidth(caption);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Determine the state and draw corresponding lines on&nbsp;
&nbsp;&nbsp;&nbsp; // Canvas object.
&nbsp;&nbsp;&nbsp; //Also draw the caption and shift it slightly to give
&nbsp;&nbsp;&nbsp; // the impression of motion when the button is pushed.
&nbsp;&nbsp;&nbsp; if(pushed){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,0,width,0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,1,width,1);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,0,0,height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(1,0,1,height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note the one-pixel x and y offset in the following
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // statement to give the impression that the button
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // has moved.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(caption, 1+(width-stringWidth)/2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1+((height/2)+(fontHeight/4)));
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that a line drawn at height or width is off
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the edge of the object and not visible.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,height-1,width-1,height-1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,height-2,width-2,height-2);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(width-1,0,width-1,height-1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(width-2,0,width-2,height-2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that there is no motion offset in the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // following statement.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(caption,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (width-stringWidth)/2,(height/2)+(fontHeight/4));
&nbsp;&nbsp;&nbsp; }//end else
&nbsp; }//end paint()
}//end class FakeButtonClass

//=======================================================//

class SampProg141 extends Frame{//controlling class
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate an object of this type
&nbsp;&nbsp;&nbsp; new SampProg141();
&nbsp; }//end main&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; public SampProg141(){//constructor
&nbsp;&nbsp;&nbsp; this.setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setSize(300,150);

&nbsp;&nbsp;&nbsp; //Instantiate two fake button objects of different
&nbsp;&nbsp;&nbsp; // sizes and a real Button object
&nbsp;&nbsp;&nbsp; FakeButtonClass firstFakeButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FakeButtonClass(40,20,"Small");
&nbsp;&nbsp;&nbsp; FakeButtonClass secondFakeButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FakeButtonClass(80,40,"Large");
&nbsp;&nbsp;&nbsp; Button myRealButton = new Button("Button");

&nbsp;&nbsp;&nbsp; //Add the buttons to the Frame object
&nbsp;&nbsp;&nbsp; this.add(firstFakeButton);
&nbsp;&nbsp;&nbsp; this.add(myRealButton);
&nbsp;&nbsp;&nbsp; this.add(secondFakeButton);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setVisible(true);//make it all visible
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a mouse listener object and register it
&nbsp;&nbsp;&nbsp; // to listen for mouse events on the two fake buttons
&nbsp;&nbsp;&nbsp; MouseListenerClass myMouseListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseListenerClass();
&nbsp;&nbsp;&nbsp; firstFakeButton.addMouseListener(myMouseListener);
&nbsp;&nbsp;&nbsp; secondFakeButton.addMouseListener(myMouseListener);

&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which will
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes the&nbsp;
&nbsp;&nbsp;&nbsp; // Frame.
&nbsp;&nbsp;&nbsp; WindowListenerClass myWindowListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowListenerClass();
&nbsp;&nbsp;&nbsp; this.addWindowListener(myWindowListener);&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class SampProg141 definition
//=======================================================//

//This class is used to instantiate a listener object that
// listens for mouse events on the fake buttons and causes
// the visual rendering to switch between a protruding
// image and a "pushed" image. Also a message is displayed
// when the button is clicked.
class MouseListenerClass extends MouseAdapter{

&nbsp; //Override the mousePressed() method
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Set the "pushed" variable to true and repaint
&nbsp;&nbsp;&nbsp; ((FakeButtonClass)e.getComponent()).pushed = true;
&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
&nbsp; }//end mousePressed()

&nbsp; //Override the mouseReleased() method
&nbsp; public void mouseReleased(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Set the "pushed" variable to false and repaint
&nbsp;&nbsp;&nbsp; ((FakeButtonClass)e.getComponent()).pushed = false;
&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
&nbsp; }//end mouseReleased()
}//end class MouseListenerClass

//=======================================================//

//The following listener is used to terminate the program&nbsp;
// when the user closes the frame.
class WindowListenerClass extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WindowListenerClass
//=======================================================//</font></pre></td></tr></table>
Q - Without viewing the solution that follows, write a Java application
that replicates the functionality of the application named SampProg141.java
with the following differences:

<p>Make the background color of the fake button to be a parameter in the
constructor for the class.

<p>Cause the background color of your fake buttons to be the same color
as the background color of their container. For example, an RGB color of
0,128,0 is an appropriate color for this purpose.

<p>Cause the highlighted edge of your fake button to be a brighter shade
of the background color of the button.

<p>Cause the shadow edge of your fake button to be a darker shade of the
background color of the button. This produces a much more convincing illusion
of a 3D button than previous versions where only the shadow was drawn and
it was drawn in black.

<p><font color="#0000ff"><font size=-1>A - See solution below.</font></font><table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg142.java.java Copyright 1997, R.G.Baldwin
From lesson 160.

Without viewing the solution that follows, write a Java
application that replicates the functionality of the&nbsp;
application named SampProg141.java with the following&nbsp;
differences

Make the background color of the fake button to be a&nbsp;
parameter in the constructor for the class.

Cause the background color of your fake buttons to be the
same color as the background color of their container.
For example, an RGB color of 0,128,0 is an appropriate
color for this purpose.

Cause the highlighted edge of your fake button to be a&nbsp;
brighter shade of the background color of the button.
Cause the shadow edge of your fake button to be a darker
shade of the background color of the button. This produces
a much more convincing illusion of a 3D button than&nbsp;
previous versions where only the shadow was drawn and it&nbsp;
was drawn in black.
&nbsp;
The program creates two fake buttons that appear (on some
systems at least) to be green 3D button objects.

When the program starts, two green fake buttons with&nbsp;
captions of "Small" and "Large" along with a real Button&nbsp;
with a caption of "Button" appear in a Frame object.&nbsp;&nbsp;

The green buttons appears to protrude slightly from the&nbsp;
surface of the Frame object in a manner similar to the
real Button object.

When you point to a green button with the mouse and&nbsp;
press the left mouse button, the green button appears to
become depressed into the surface of the Frame object in
a manner similar to a real Button object.&nbsp;&nbsp;

When you release the mouse button, the green button&nbsp;
appears to pop back out of the surface of the Frame&nbsp;
object.&nbsp;

As in previous versions of this application, the fake green
buttons are much more responsive than the real Button when&nbsp;
running under Win95 on a machine with a 133MHz Pentium.&nbsp;&nbsp;

These results were produced using JDK 1.1.3, running under&nbsp;
Windows 95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;

//=======================================================//
//This class is used to create a fake button object.

//Subclass Canvas to override the paint method in order
// to set the size and color of a Canvas object, to draw
// a series of lines on the Canvas object, and to draw a&nbsp;
// caption on the Canvas object.

//The lines are drawn so as to suggest shadows and
// highlights on the edges of a rectangular button object.

//The caption is drawn so as to move slightly down and to
// the right when the button is pushed to give the illusion
// of motion.
&nbsp;&nbsp;
//The highlights and the shadows and the motion effect&nbsp;
// combine to produce the illusion of a 3D button being&nbsp;
// pressed into the screen and released to pop out.

class FakeButtonClass extends Canvas{
&nbsp; boolean pushed = false;//indicates button pushed or not
&nbsp; int width; //button width in pixels
&nbsp; int height;//button height in pixels
&nbsp; String caption;//caption for button
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public FakeButtonClass(//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int width,int height,String caption,<b>Color color</b>){
&nbsp;&nbsp;&nbsp; this.width = width;
&nbsp;&nbsp;&nbsp; this.height = height;
&nbsp;&nbsp;&nbsp; this.caption = caption;
&nbsp;&nbsp;&nbsp; this.setBackground(<b>color</b>);
&nbsp;&nbsp;&nbsp; this.setSize(this.width,this.height);
&nbsp; }//end constructor

&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; int fontHeight = g.getFontMetrics().getHeight();
&nbsp;&nbsp;&nbsp; int stringWidth =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.getFontMetrics().stringWidth(caption);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Determine the state and draw corresponding lines on&nbsp;
&nbsp;&nbsp;&nbsp; // the Canvas object.
&nbsp;&nbsp;&nbsp; //Use lines which are darker and lighter than the
&nbsp;&nbsp;&nbsp; // background color of the object.
&nbsp;&nbsp;&nbsp; //Also draw the caption and shift it slightly to give
&nbsp;&nbsp;&nbsp; // the impression of motion when the button is pushed.
&nbsp;&nbsp;&nbsp; if(pushed){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //draw the shadow as dark green
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>g.setColor(this.getBackground().darker());
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,0,width,0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,1,width,1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,0,0,height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(1,0,1,height);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //draw the highlight as light green
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(this.getBackground().brighter());
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,height-1,width-1,height-1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,height-2,width-2,height-2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(width-1,0,width-1,height-1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(width-2,0,width-2,height-2);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw the caption in black, centered horizontally&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and slightly above center vertically.&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note the one-pixel x and y offset in the following
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // statement to give the impression that the button
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // has moved.
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(Color.black);
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(caption, 1+(width-stringWidth)/2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1+((height/2)+(fontHeight/4)));
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw the shadow in dark green
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that a line drawn at height or width is off
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the edge of the object and not visible.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(this.getBackground().darker());&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,height-1,width-1,height-1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,height-2,width-2,height-2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(width-1,0,width-1,height-1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(width-2,0,width-2,height-2);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw the highlight as light green
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(this.getBackground().brighter());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,0,width,0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,1,width,1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(0,0,0,height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawLine(1,0,1,height);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw the caption in black, centered horizontally&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and slightly above center vertically.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that there is no motion offset in the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // following statement.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(Color.black);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(caption,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (width-stringWidth)/2,(height/2)+(fontHeight/4));
&nbsp;&nbsp;&nbsp; }//end else
&nbsp; }//end paint()
}//end class FakeButtonClass

//=======================================================//

class SampProg142 extends Frame{//controlling class
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate an object of this type
&nbsp;&nbsp;&nbsp; new SampProg142();
&nbsp; }//end main&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; public SampProg142(){//constructor
&nbsp;&nbsp;&nbsp; this.setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setSize(300,150);
&nbsp;&nbsp;&nbsp; this.setBackground(<b>new Color(0,128,0)</b>);

&nbsp;&nbsp;&nbsp; //Instantiate two fake button objects of different
&nbsp;&nbsp;&nbsp; // sizes and a real Button object
&nbsp;&nbsp;&nbsp; FakeButtonClass firstFakeButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FakeButtonClass(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 40,20,"Small",<b>this.getBackground()</b>);
&nbsp;&nbsp;&nbsp; FakeButtonClass secondFakeButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FakeButtonClass(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 80,40,"Large",<b>this.getBackground()</b>);
&nbsp;&nbsp;&nbsp; Button myRealButton = new Button("Button");

&nbsp;&nbsp;&nbsp; //Add the buttons to the Frame object
&nbsp;&nbsp;&nbsp; this.add(firstFakeButton);
&nbsp;&nbsp;&nbsp; this.add(myRealButton);
&nbsp;&nbsp;&nbsp; this.add(secondFakeButton);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setVisible(true);//make it all visible
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a mouse listener object and register it
&nbsp;&nbsp;&nbsp; // to listen for mouse events on the two fake buttons
&nbsp;&nbsp;&nbsp; MouseListenerClass myMouseListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseListenerClass();
&nbsp;&nbsp;&nbsp; firstFakeButton.addMouseListener(myMouseListener);
&nbsp;&nbsp;&nbsp; secondFakeButton.addMouseListener(myMouseListener);

&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which will
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes the&nbsp;
&nbsp;&nbsp;&nbsp; // Frame.
&nbsp;&nbsp;&nbsp; WindowListenerClass myWindowListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowListenerClass();
&nbsp;&nbsp;&nbsp; this.addWindowListener(myWindowListener);&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class SampProg142 definition
//=======================================================//

//This class is used to instantiate a listener object that
// listens for mouse events on the fake buttons and causes
// the visual rendering to switch between a protruding
// image and a "pushed" image. Also a message is displayed
// when the button is clicked.
class MouseListenerClass extends MouseAdapter{

&nbsp; //Override the mousePressed() method
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Set the "pushed" variable to true and repaint
&nbsp;&nbsp;&nbsp; ((FakeButtonClass)e.getComponent()).pushed = true;
&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
&nbsp; }//end mousePressed()

&nbsp; //Override the mouseReleased() method
&nbsp; public void mouseReleased(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Set the "pushed" variable to false and repaint
&nbsp;&nbsp;&nbsp; ((FakeButtonClass)e.getComponent()).pushed = false;
&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
&nbsp; }//end mouseReleased()
}//end class MouseListenerClass

//=======================================================//

//The following listener is used to terminate the program&nbsp;
// when the user closes the frame.
class WindowListenerClass extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WindowListenerClass
//=======================================================//</font></pre></td></tr></table>
-end-<!--end--></body></html>