<html>

<head>
<meta name=Generator content="Microsoft Office HTML Filter 2.0">
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=Originator content="Microsoft Word 9">
<title>... in Java by Richard G Baldwin</title>
<style>
<!--
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{
	margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0in;
	margin-left:0in;
	text-align:center;
	font-size:18.0pt;
	font-family:"Times New Roman";
	color:red;
	font-weight:bold;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=author content="richard g. baldwin">
</head>

<body lang=EN-US link=blue vlink=blue>
<!--start-->

<div class=Section1>

<p>February 9, 2000</p>

<h2 align=left style='text-align:left'><!--title--><span style='color:black'>Java
2D Graphics, Simple Affine Transforms<!--endtitle--></span></h2>

<p>Java Programming, Lecture Notes # 306 </p>

<p><i>by Richard G. Baldwin<br>
baldwin@austin.cc.tx.us</i></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><a
     href="#_Introduction">Introduction</a></li>
 <li class=MsoNormal><a
     href="#_What_is_an">What is an Affine Transform?</a></li>
 <li class=MsoNormal><a
     href="#_Don&#8217;t_Panic!">Don&#8217;t Panic!</a></li>
 <li class=MsoNormal><a
     href="#_What_Do_These">What Do These Symbols Represent?</a></li>
 <li class=MsoNormal><a
     href="#_How_Are_They">How Are They Used?</a></li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal><a
      href="#_Scaling">Scaling</a></li>
  <li class=MsoNormal><a
      href="#_Translation">Translation</a></li>
  <li class=MsoNormal><a
      href="#_Shear">Shear</a></li>
  <li class=MsoNormal><a
      href="#_Rotation">Rotation</a></li>
 </ul>
 <li class=MsoNormal><a
     href="#_Sample_Program">Sample Program</a></li>
 <li class=MsoNormal><a
     href="#_Finally,_Some_Code!">Finally, Some Code</a></li>
 <li class=MsoNormal><a
     href="#_Conclusion">Conclusion</a></li>
 <li class=MsoNormal><a
     href="#_Complete_Program_Listing">Complete Program Listing</a></li>
</ul>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=3 width="100%" align=center>

</div>


<h2><a name="_Introduction"></a>Introduction</h2>

<p>In an earlier lesson, I explained that the <b>Graphics2D</b> class extends
the <b>Graphics</b> class to provide more sophisticated control over geometry,
coordinate transformations, color management, and text layout. Beginning with
JDK 1.2, <b>Graphics2D </b>is the fundamental class for rendering
two-dimensional shapes, text and images.</p>

<p>I also explained that without understanding the behavior of other classes
and interfaces such as <b>Shape</b>, <b>AffineTransform</b>, <b>GraphicsConfiguration</b>,
<b>PathIterator</b>, and <b>Stroke</b>, it is not possible to fully understand
the inner workings of the <b>Graphics2D</b> class.&nbsp; </p>

<p>This lesson is intended to give you the necessary understanding of the <b>AffineTransform</b>
class.</p>

<h2><a name="_What_is_an"></a>What is an Affine Transform?</h2>

<p>A system of device-independent coordinates (called <i>User Space</i>) is
used to pass all coordinate information to the methods of a <b>Graphics2D</b>
object.&nbsp; An <b>AffineTransform</b> object (see definition below) is
contained in the <b>Graphics2D</b> object as part of its state.&nbsp; This <b>AffineTransform</b>
object defines how to convert coordinates from user space to device-dependent
coordinates in <i>Device Space.</i>&nbsp; </p>

<p>According to Sun:</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p>The <b>AffineTransform</b> class represents a 2D Affine transform that
  performs a linear mapping from 2D coordinates to other 2D coordinates that
  preserves the &quot;straightness&quot; and &quot;parallelness&quot; of lines.
  Affine transformations can be constructed using sequences of translations,
  scales, flips, rotations, and shears.</p>
  </td>
 </tr>
</table>

<p>According to David Flanagan in his book <u>Java Foundation Classes in a
Nutshell</u>, &nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p>The coordinate system transformation described by <b>AffineTransform</b>
  have two very important properties:</p>
  <ul style='margin-top:0in' type=disc>
   <li class=MsoNormal>Straight
       lines remain straight</li>
   <li class=MsoNormal>Parallel
       lines remain parallel</li>
  </ul>
  </td>
 </tr>
</table>

<p>Flanagan goes on to tell us:&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p>An <b>AffineTransform</b> is a linear transform, so the transformation can
  be expressed in the matrix notation of linear algebra.&nbsp; An arbitrary <b>AffineTransform
  </b>can be mathematically expressed by six numbers in a matrix like this:</p>
  <p><span style='font-family:"Courier New"'>&nbsp;<b>sx shx tx</b></span><br>
  <b><span style='font-family:"Courier New"'>shy&nbsp; sy ty</span></b></p>
  </td>
 </tr>
</table>

<p>(If you are a purist, you will recognize immediately that this matrix is
missing the large square brackets [ ] that normally enclose a matrix.&nbsp;
That is because I don&#8217;t know how to create large square brackets in HTML.)</p>

<h2><a name="_Don&#8217;t_Panic!"></a>Don&#8217;t Panic!</h2>

<p>Please don&#8217;t panic at the mention of matrix algebra.&nbsp; You don&#8217;t need to
know anything about matrix algebra to understand the material in this
lesson.&nbsp; All that you need to know is a little about ordinary algebra.</p>

<p>In fact, you don&#8217;t even have to understand ordinary algebra to implement the
kinds of simple transforms that I am going to show you in this lesson, but such
an understanding will help you to better understand how it all works.</p>

<h2><a name="_What_Do_These"></a>What Do These Symbols Represent?</h2>

<p>In this lesson, I am going to show you how to use the <b>AffineTransform </b>to
cause your graphics to be transformed in the following ways before being
displayed on the output device:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Scaling</li>
 <li class=MsoNormal>Translation</li>
 <li class=MsoNormal>Shear</li>
 <li class=MsoNormal>Rotation</li>
</ul>

<p>In the notation shown above, the symbols or factors <b>sx</b> and <b>sy </b>are
scale factors that accomplish scaling. &nbsp;The factors <b>tx </b>and <b>ty</b>
are scale factors that accomplish translation.&nbsp; The factors <b>shx </b>and
<b>shy </b>are scale factors that accomplish shear.&nbsp;</p>

<p>According to Flanagan, &#8220;...rotation is a combination of scaling and
shearing, so there are not separate <b>rx </b>and <b>ry </b>numbers.&#8221;</p>

<h2><a name="_How_Are_They"></a>How Are They Used?</h2>

<p>&#8220;So what?&#8221; you say.&nbsp; &#8220;So what if I have six numbers?&#8221;&nbsp; How do they
accomplish scaling, translation, and shear?&nbsp; </p>

<p>With regard to these three, all that you need to remember is the following
pair of equations, where the asterisk (*) indicates multiplication just as it
does in Java programming syntax.&nbsp; (Actually, you don&#8217;t even need to
remember these equations, but it is helpful in understanding what happens when
we modify the default <b>AffineTransform </b>object.)</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p><b><span style='font-size:10.0pt;font-family:"Courier New"'>newX = sx*x +
  shx*y + tx<br>
  newY = shy*x + sy*y + ty</span></b></p>
  </td>
 </tr>
</table>

<p>In other words, given the values for an <b>x</b> and <b>y </b>coordinate in
user space, these multiplicative factors are used calculate new values for
those coordinates for use in device space, thereby accomplishing scaling,
shear, and translation.&nbsp; &nbsp;</p>

<p>As we will see later, if the factors representing shear and translation have
a value of zero, then that type of transform is simply not performed.&nbsp; If
the factors representing scaling have a value of unity (which is the default
case), then there is no change in the coordinate value between user space and
device space.&nbsp; Any other values for any of the factors will cause some
amount of scaling, shear, or translation to take place.</p>

<p>For all three types of transform, the value used to transform the <b>x</b>
coordinate is independent of the value used to transform the <b>y </b>coordinate.&nbsp;
Therefore, you could, for example, translate by a large value in <b>x</b> and
translate by a small value in <b>y</b>.<a name="_Text_Operations"></a></p>

<p>Before getting into the details of performing these transforms, it will
probably be useful to provide a few words of explanation about each.</p>

<h3 align=center style='text-align:center'><a name="_Scaling"></a><span
style='color:red'>Scaling</span></h3>

<p>Scaling is perhaps the easiest of the four types of transforms to
understand.&nbsp; This simply means that if a point is located at a horizontal
coordinate value of <b>x</b> in user space, it will be located at <b>sx*x</b>
in device space, where <b>sx</b> is a numeric multiplier that can be either
positive or negative.</p>

<h3 align=center style='text-align:center'><a name="_Translation"></a><span
style='color:red'>Translation</span></h3>

<p>The purpose of translation is to move the origin of the coordinate system in
device space.&nbsp; </p>

<p>For example, the default position of the origin is the upper left-hand
corner of the component on which the graphic is being displayed.&nbsp; Assume
that the component is a <b>Frame</b> object that is four inches on each
side.&nbsp; You might like for the origin to be in the center of the <b>Frame </b>instead
of at the top left-hand corner.&nbsp; You could accomplish this by translating
the origin by two inches in both the horizontal and vertical directions.</p>

<p>Or, you might like for the origin to be just barely inside the borders of
the <b>Frame</b> object instead of outside the borders as is the default.&nbsp;
This can be accomplished by getting the widths of the top border and left
border by invoking <b>getInsets()</b> on the <b>Frame</b>, and then using those
values to translate the origin to a location that is just barely inside the
borders.</p>

<p>Another use of translation (in combination with scaling) is to flip the
default positive direction of the vertical axis so that increasing positive
values go up instead of down, which is the default.&nbsp; I will leave the
implementation of this as an exercise for the student.</p>

<h3 align=center style='text-align:center'><a name="_Shear"></a><span
style='color:red'>Shear</span></h3>

<p>I like the way that Jonathan Knudsen describes shear in his book entitled <u>Java
2D Graphics</u>.&nbsp; He describes it something like this.&nbsp; Take a stack
of paper (like you might place in your laser printer) and draw a picture on the
side of the stack.&nbsp; Then deform the stack so that the side of the stack on
which you drew the picture takes the form of a parallelogram.&nbsp; Be
especially careful to keep the opposite sides parallel.&nbsp; Then look at your
picture.&nbsp; It will have been subjected to shear in one dimension.</p>

<h3 align=center style='text-align:center'><a name="_Rotation"></a><span
style='color:red'>Rotation</span></h3>

<p>Rotation is also fairly easy to visualize (but the combination of rotation
and shear can be very difficult to visualize).&nbsp; To visualize rotation,
draw a picture on a piece of paper.&nbsp; Use a single tack to attach it to a
bulletin board.&nbsp; Then rotate the paper a few degrees around the
tack.&nbsp; You will have rotated the picture around the coordinates of the
tack by the specified number of degrees.</p>

<p>Java 2D works the same way.&nbsp; In the process of transforming a graphic
from user space to device space, you can cause it to be rotated by a specified
angle around a specified coordinate position.</p>

<p>However, in Java 2D, the angle must be specified in radians instead of
degrees.&nbsp; If you are unfamiliar with the use of radian measure to specify
an angle, just remember the following identity:</p>

<p>PI radians = 180 degrees</p>

<p>Where PI is the numeric value that you learned about in your geometry
class.&nbsp; </p>

<p>PI has a value of 3.14159...........&nbsp; However, you don&#8217;t have to
remember the value of PI.&nbsp; It is available as a static final constant in
the <b>Math</b> class.&nbsp; You can access the value as <b>Math.PI</b>. </p>

<p>If this sounds confusing, you might also want to remember the following
identities:&nbsp;</p>

<p>PI/2 = 90 degrees<br>
PI/4 = 45 degrees<br>
PI/8 = 22.5 degrees<br>
PI/16 = 11.25 degrees, etc.</p>

<p>This last identify is used in the sample program in the following section to
rotate a simple graphic by 11.25 degrees.</p>

<p>Another interesting thing about the rotation transform is that positive
angles of rotation proceed in a clockwise direction.&nbsp; This may be
backwards from what you are accustomed to in various science and engineering
endeavors where counter-clockwise rotation is often thought of as the positive
direction of rotation.</p>

<h2><a name="_Sample_Programs"></a><a name="_Sample_Program"></a>Sample Program</h2>

<p>With that introduction, lets look at some code and learn just how simple it
is to accomplish Scaling, Translation, Shear, and Rotation with Java 2D.</p>

<p>The name of the sample program is <b>Affine01.java</b>.&nbsp; This program
illustrates the use of convenience method of the <b>Graphics2D</b> class that
make it very easy to apply transforms of the following types:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Scaling</li>
 <li class=MsoNormal>Translation</li>
 <li class=MsoNormal>Shear</li>
 <li class=MsoNormal>Rotation</li>
</ul>

<p>The methods that I will be discussing here are simply convenience methods,
and there are other, more general, ways to apply Affine transforms as
well.&nbsp; If you understand the process in sufficient detail, you can create
your own matrix of six numeric values and cause those six values to be used to
implement the transform.&nbsp; But, that is a topic for another lesson.&nbsp;
In this lesson, I will concentrate on the convenience methods.</p>

<p>You can use these convenience methods to apply transform of the four types
listed above with no concern for the six numeric values in the transform
matrix.&nbsp; However, for your education (and mine as well), I have written
the program such that when a transform is applied using a convenience method,
the six values are displayed on the command-line screen.&nbsp; That way, we can
both see what a particular transform produces in terms of the transform matrix
(if we care about such things).</p>

<h3><span style='color:red'>Experimentation is encouraged</span></h3>

<p>This program is designed for experimentation.&nbsp; Four individual
statements similar to the following are used to apply each of the four types of
transforms (as you can see, this is the statement that applies translation):</p>

<p><span style='font-size:10.0pt;font-family:Courier;color:green'>&nbsp;&nbsp;&nbsp;
</span><b><span style='font-size:10.0pt;font-family:Courier;color:black'>g2.translate(0.25*ds,0.25*ds);</span></b></p>

<p>You should experiment with these statements by disabling them, enabling
them, and rearranging them, and then observing the graphic output when you run
the program.&nbsp; </p>

<h3><span style='color:red'>Cumulative but not commutative</span></h3>

<p>You will find that the result of executing two or more of the statements in
succession is <i>cumulative</i>, but not <i>commutative</i>.&nbsp; In other
words, applying translation and rotation, for example, causes the output
graphic to be translated and also rotated.&nbsp; However, depending on your
parameters, you might not get the same results if you switch the order of
translating and rotating.</p>

<h3><span style='color:red'>The six numeric values</span></h3>

<p>Finally, before getting into the details of the code, I am going to show you
the six numeric values contained in the default Affine transform and the six
values contained in the transform after applying each of the four types of
transforms in succession.</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p><span style='font-size:8.0pt;font-family:Verdana'>Default Transform<br>
  1.0 0.0 0.0<br>
  0.0 1.0 0.0&nbsp;</span></p>
  <p><span style='font-size:8.0pt;font-family:Verdana'>Add Scale Transform<br>
  1.6666666666666667 0.0 0.0 <br>
  0.0 1.6666666666666667 0.0 &nbsp;</span></p>
  <p><span style='font-size:8.0pt;font-family:Verdana'>Add Translate Transform<br>
  1.6666666666666667 0.0 30.0 <br>
  0.0 1.6666666666666667 30.0 &nbsp;</span></p>
  <p><span style='font-size:8.0pt;font-family:Verdana'>Add Shear Transform<br>
  1.6666666666666667 0.08333333333333334 30.0<br>
  0.16666666666666669 1.666666666666666730.0&nbsp;</span></p>
  <p><span style='font-size:8.0pt;font-family:Verdana'>Add Rotate Transform<br>
  1.6508996608400615 -0.2434184299932779 79.32270275806317 <br>
  0.4886147500940855 1.6021270803360292 -7.066823581936546</span></p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>The default values</span></h3>

<p>As you can see, the default transform has non-zero values only in the two scale
factors for a scaling transform, and these scale factors are both unity.&nbsp;
Thus, the default transform doesn&#8217;t apply any scaling between user space and
device space.</p>

<h3><span style='color:red'>The scaling transform</span></h3>

<p>After invoking the <b>scale()</b> methodto compensate for the difference in
the default coordinate values (at 72 units per inch) and the actual resolution
of my screen at 120 pixels per inch, the scale factor increased to
1.666...&nbsp; This is the ratio of 120 to 72.</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p>See the caveat in an earlier lesson that the <b>getScreenResolution() </b>method
  always seems to return 120 on my computer regardless of the actual screen
  resolution settings.</p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>The translation</span></h3>

<p>After I applied a translation of 0.25 inches in both dimensions, each of the
translation scale factors changed from zero to 30.0.&nbsp; This is the product
of 0.25 and the resolution of my screen.</p>

<h3><span style='color:red'>The shear</span></h3>

<p>Then I applied a shear of 0.05 inches in <b>x</b> and 0.1 inches in <b>y</b>.&nbsp;
The two shear factors changed from zero to 0.08333... and 0.1666...
respectively.&nbsp; If you are interested, I will leave it as an exercise for
you to go back to the equations that I presented earlier to deduce how these
factors produce the desired amount of shear.&nbsp; </p>

<h3><span style='color:red'>The rotation</span></h3>

<p>Finally, adding rotation by 11.25 degrees caused all six values to change
from their previous values.&nbsp; As mentioned earlier, this is probably the
most complex aspect of the standard translations insofar as understanding what
the numbers mean.&nbsp; You will need some understanding of trigonometry to
understand these values.</p>

<h3><span style='color:red'>Don&#8217;t worry about the six numeric values</span></h3>

<p>Again, as I mentioned earlier, you can use the convenience methods to apply
the four standard types of transforms without ever giving any thought to these
numeric values.&nbsp; They are presented here only for the benefit of those
students who have a desire to go further and to produce custom transforms from
a numeric basis.</p>

<h2><a name="_Finally,_Some_Code!"></a>Finally, Some Code!</h2>

<p>After all of that, I am finally going to show you some code.</p>

<p>As usual, I will discuss the program in code fragments.&nbsp; A complete
listing of the program is provided at the end of the lesson.</p>

<p>The first fragment (<a href="Java306-fig01.htm">Figure 1</a>) instantiates
an object of a class named <b>GUI</b> and causes it to be displayed on the
screen.&nbsp; This code is very similar to code that I have presented in
earlier lessons, so I won&#8217;t discuss it in detail.</p>

<p>Basically, this code causes a <b>Frame</b> object that is four inches on
each side to be displayed on the screen.&nbsp; Beyond this, all of the action
in the program is provided by an overridden <b>paint()</b> method, which I will
discuss shortly.</p>

<h3><span style='color:red'>Overridden paint() method</span></h3>

<p><a href="Java306-fig02.htm">Figure 2</a> shows the beginning of the
overridden <b>paint()</b> method.&nbsp; As mentioned in an earlier lesson, the <b>paint()</b>
method always receives a reference to an object of the <b>Graphics</b> class.&nbsp;
It is necessary to downcast this reference to the <b>Graphics2D</b> class in
order to gain access to the methods of the <b>Graphics2D </b>class (<b>Graphics2D</b>
extends <b>Graphics</b>).</p>

<h3><span style='color:red'>Displaying the six numeric values</span></h3>

<p><a href="Java306-fig03.htm">Figure 3</a> displays the words &#8220;<b>Default
Transform&#8221;</b> on the screen and then invokes a method named <b>displayMatrix()</b>
to cause the six values of the default <b>AffineTransform</b> object to be
displayed.&nbsp; I will discuss the method named <b>displayMatrix()</b> later.</p>

<h3><span style='color:red'>What does the program really do?</span></h3>

<p>Fundamentally, this program makes four updates to the default <b>AffineTransform</b>
object to apply scaling, translation, shear, and rotation to the
transform.&nbsp; Then the program creates and draws a graphic inside the <b>Frame</b>
object.&nbsp; When the graphic is drawn, it is transformed according to the
current state of the <b>AffineTransform</b> object.</p>

<p>As indicated earlier, you are encouraged to disable, enable, and rearrange
these four transform update operations, recompile, and run the program in order
to get a good feel for the effect of the different types of transforms.</p>

<h3><span style='color:red'>The default case with no transforms enabled</span></h3>

<p>For example, if you disable all four transform updates and run the program,
you should see five concentric squares located in the upper left-hand quadrant
of the <b>Frame</b> object.&nbsp; (Can squares be concentric?&nbsp; Maybe
nested squares would be a better description.)&nbsp; </p>

<p>The dimensions of the outer square should be 72 pixels on each side.&nbsp;
Of course, this will produce different size squares, depending on the resolution
of your screen in terms of pixels per inch.&nbsp; If your screen actually has
72 pixels per inch, the outer square will be one inch on each side.</p>

<p>The text string &#8220;<b>Exit-&gt;</b>&#8221; should be superimposed on the squares
with the bottom left-hand corner of the letter &#8220;<b>E&#8221;</b> being located at the
center of the innermost square.</p>

<h3><span style='color:red'>Enable the scaling transform</span></h3>

<p>If you then enable the scaling update shown in <a href="Java306-fig04.htm">Figure
4</a> (while leaving the other three updates disabled) recompile, and rerun the
program, you should see the same five concentric squares, but this time they
should be centered in the four-inch by four-inch <b>Frame</b> object.&nbsp; </p>

<p>The outer square should be one inch on each side, and the distance between
the squares should be 0.1 inch.&nbsp; </p>

<p>This should be true regardless of the resolution of your screen because the
parameters being passed to the <b>scale()</b> method are designed to compensate
for the difference between actual screen resolution and the default resolution
of 72 pixels per inch.</p>

<p>The convenience method named <b>scale()</b> makes it possible to provide
scaling between user space and device space without having to be concerned as
to how the scaling is actually accomplished from a matrix algebra
viewpoint.&nbsp; The same is true for each of the other four convenience
methods that I will discuss.&nbsp; </p>

<p>Note that you have independent control over the scaling to be applied to the
horizontal axis and the scaling to be applied to the vertical axis.&nbsp; Each
of these is a different parameter that you pass to the <b>scale()</b> method.</p>

<h3><span style='color:red'>Enable the translation transform</span></h3>

<p>If you leave the above scaling enabled and then enable the translation
update shown in <a href="Java306-fig05.htm">Figure 5</a> (with shear and
rotation still disabled), you should see that the entire pattern of concentric
squares and the text has been translated to the right and down by 0.25
inch.&nbsp; </p>

<p>Although it isn&#8217;t obvious, what has actually happened is that the origin has
been translated from the upper left-hand corner of the <b>Frame</b> object to a
location that is 0.25 inches to the right and 0.25 inches below the upper
left-hand corner of the <b>Frame</b> object.&nbsp; </p>

<p>Then when the squares are drawn with respect to the new origin, they appear
to have moved in a similar fashion relative to the outer boundaries of the <b>Frame</b>
object.&nbsp; It is important to keep in mind, however, that the squares are
still being drawn in the same position relative to the origin.&nbsp; It is the
origin that has moved relative to the outer boundaries of the <b>Frame</b>.</p>

<h3><span style='color:red'>Enable the shear transform</span></h3>

<p>Next, I recommend that you disable translation, enable the shear update
shown in <a href="Java306-fig06.htm">Figure 6</a>, and leave scaling
enabled.&nbsp; If you recompile and run the program in that configuration, you
should see something like Mr. Knudsen&#8217;s shear example except that in this case,
it occurs in both the horizontal and vertical dimensions.&nbsp;</p>

<p>For example, the squares have all been converted to parallelograms.&nbsp;
The bottom ends of what used to be vertical lines are now further to the right
than the top ends of the same lines.&nbsp; The right ends of what used to be
horizontal lines are now lower than the left ends of the same lines.&nbsp; The
shapes of the characters in the text string are modified accordingly.</p>

<p>This picture also confirms what Mr. Flanagan has to say about Affine
transforms:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Straight
     lines remain straight</li>
 <li class=MsoNormal>Parallel
     lines remain parallel</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You might also want to modify the values of the parameters
being passed to the <b>shear()</b> method and observe the output.&nbsp; Be
careful and don&#8217;t make the values too large.&nbsp; If you do, you will push the
entire graphic out of the <b>Frame</b> and won&#8217;t be able to see it.</p>

<h3><span style='color:red'>A bad case of the &#8220;jaggies&#8221;</span></h3>

<p>Depending on your screen resolution, you may have noticed that the lines in
the graphic output have a bad case of the &#8220;jaggies.&#8221;&nbsp; In other words, the
lines are not smooth, but rather have a stair step appearance.&nbsp; This is
more properly referred to <i>aliasing</i>.&nbsp; A subsequent lesson will
explain how to use the <i>anti-aliasing</i> feature of Java 2D to reduce the
undesirable visual effect of this phenomenon.&nbsp; </p>

<h3><span style='color:red'>Enable the rotation transform</span></h3>

<p>Next, I recommend that you disable the shear update and enable the rotation
update shown in <a href="Java306-fig07.htm">Figure 7</a>, while keeping the
scaling update enabled.&nbsp; For me, at least, it is very difficult to
separate the visual results of combined shear and rotation, so it is better to
view them separately.</p>

<p>Now you should see the same five concentric squares plus the superimposed
text string, rotated clockwise by 11.25 degrees around the center of the
innermost square.&nbsp; </p>

<p>As mentioned earlier, you have the ability to specify the angle of rotation
in radians as well as the <b>x</b> and <b>y</b> coordinate values of the point
around which the rotation will take place.&nbsp; </p>

<h3><span style='color:red'>These are only suggestions</span></h3>

<p>The scenarios that I have been suggesting are simply that,
suggestions.&nbsp; At this point, you might want to go back and experiment
further with different combinations of transform types.&nbsp; Also, don&#8217;t
forget to experiment with the order in which the transforms take place because
the same transforms executed in a different order will often produce different
results.</p>

<h3><span style='color:red'>Drawing the picture</span></h3>

<p>None of the code discussed so far has actually caused anything to be
displayed on the screen (except for perhaps an empty <b>Frame</b>
object).&nbsp; Rather, that code was executed for the purpose of establishing
the behavior of the transform that is applied to any graphic that is
subsequently drawn in the <b>Frame</b>.</p>

<p><a href="Java306-fig08.htm">Figure 8</a> causes five concentric squares to
be drawn in the <b>Frame</b> object.&nbsp; If the scaling transform described
above is applied (with no shear or translation), the outer-most square will be
one-inch on each side.&nbsp; The squares will be separated by 0.1 inch, and the
entire group of squares will be centered at a coordinate position of two inches
horizontally and two inches vertically.&nbsp; </p>

<p>The application of different scaling factors, the application of shear, the
application of translation, or the application of rotation will cause different
results to be produced.</p>

<p><a href="Java306-fig09.htm">Figure 9</a> superimposes the text string &#8220;<b>Exit-&gt;</b>&#8221;
on the squares with the bottom left-hand corner of the letter &#8220;<b>E</b>&#8221;
located at the center of the innermost square.&nbsp; I will have a lot more to
say about how <b>Graphics2D</b> handles text in subsequent lessons.&nbsp; The
main reason I put it here is to provide orientation information to help you
keep track of what&#8217;s going on if you implement large rotation angles.</p>

<p>That ends the definition of the overridden <b>paint()</b> method.</p>

<h3><span style='color:red'>Displaying the six numeric values</span></h3>

<p><a href="Java306-fig10.htm">Figure 10</a> shows the beginning of the
definition of a convenience method that I wrote for the purpose of displaying
the six values stored in an <b>AffineTransform</b> object.</p>

<p>This method receives a reference to an <b>AffineTransform</b> object, on
which it invokes the <b>getMatrix()</b> method.&nbsp; </p>

<p>When the <b>getMatrix()</b> method is invoked, a reference to a <b>double</b>
array object having at least six elements is passed as a parameter.&nbsp; The <b>getMatrix()</b>
method places the six values of interest in the first six elements of that
array in a particular order and then returns.</p>

<p>I&#8217;m not going to go into the order in which the six values are placed in the
array.&nbsp; I will simply refer you to the Sun documentation for that
information.</p>

<p>However, you can probably figure it out from <a href="Java306-fig11.htm">Figure
11</a> that uses two sequential <b>for</b> loops to extract the information
from the array and display it in the following order.</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p>An arbitrary <b>AffineTransform </b>can be mathematically expressed by six
  numbers in a matrix like this:</p>
  <p><span style='font-family:"Courier New"'>&nbsp;<b>sx shx tx</b></span><br>
  <b><span style='font-family:"Courier New"'>shy&nbsp; sy ty</span></b></p>
  </td>
 </tr>
</table>

<p>Note that this is a partial reproduction of information that I provided
earlier in this lesson and you will find the definition of each of the terms,
such as <b>sx</b> and <b>shy</b> provided there.</p>

<h2><a name="_Conclusion"></a>Conclusion</h2>

<p>Because of the availability of the convenience methods named <b>scale()</b>,
<b>translate()</b>, <b>shear()</b>, and <b>rotate()</b>, it is very easy to
implement Affine transformations of these four standard types.</p>

<p>These are linear transforms, and the end result is the cumulative effect of
applying the transforms in a sequential fashion.&nbsp; Keep in mind that the
order in which you apply the transforms may have a significant impact on the
results.</p>

<p>If you need to implement more complex transforms, you can do so by creating
your own six-element matrix of values and using that matrix to set the
transform for a particular application.</p>

<h2><a name="_Complete_Program_Listing"></a><a name="_Complete_Program_Listings"></a>Complete
Program Listing</h2>

<p>A complete listing of the program is provided in <a href="Java306-fig12.htm">Figure
12</a>.</p>

<p><b><i>Richard Baldwin</i></b><i> is a college professor and private
consultant whose primary focus is a combination of Java and XML. In addition to
the many platform-independent benefits of Java applications, he believes that a
combination of Java and XML will become the primary driving force in the
delivery of structured information on the Web.</i></p>

<p><i>Richard has participated in numerous consulting projects involving Java,
XML, or a combination of the two.&nbsp; He frequently provides onsite Java
and/or XML training at the high-tech companies located in and around Austin, Texas.&nbsp;
He is the author of Baldwin's Java Programming <a
href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java Pro
magazine. </i></p>

<p><i>Richard holds an MSEE degree from Southern Methodist University and has
many years of experience in the application of computer technology to
real-world problems.</i></p>

<p><i>baldwin@austin.cc.tx.us</i></p>

<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;

<p>-end-<!--end--></p>

</div>

</body>

</html>
