<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MSOFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Event Handling in JDK 1.1, Component Events<!--endTitle--></H2>
<P>Java Programming, Lecture Notes # 97, Revised 02/24/99. </P>

<UL>
<LI><A HREF="#Preface">Preface</A> </LI>
<LI><A HREF="#Introduction">Introduction</A> </LI>
<LI><A HREF="#Overview">Overview</A> </LI>
<LI><A HREF="#Sample_Program">Sample Program</A> </LI>

<UL>
<LI><A HREF="#Interesting_Code_Fragments">Interesting Code Fragments</A> </LI>
<LI><A HREF="#Program_Listing">Program Listing</A> </LI></UL>
</UL>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Intermediate Java Programming</B></U> classes at ACC will be responsible for knowing and understanding all of the material in this lesson beginning with the Spring semester of 1999. </P>
<P>Sample program was successfully tested using JDK 1.2 under Win95 on 2/24/99.<BR>
&nbsp; </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Introduction"></A>Introduction</H2>
</FONT><P>This lesson was originally written on September 22, 1998, using the JDK 1.1.6 download package. The purpose of this lesson is to illustrate the use of <B>component</B> events. <BR>
&nbsp; </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Overview"></A>Overview</H2>
</FONT><P>If you instantiate an object of type <B>ComponentListener</B> and register that object on an object that is a subclass of the <B>Component</B> class, methods of the listener object will be invoked whenever the object is <I>hidden</I>, <I>moved</I>, <I>resized</I>, or <I>shown</I>. </P>
<P>Hiding and showing are accomplished by invoking the <B>setVisible()</B> method on the object with a parameter of <I>false</I> or <I>true</I>. </P>
<P>Resizing and moving are accomplished by physically performing these actions on the visual representation of the object on the screen. </P>
<P>Information regarding the event is passed into the <B>ComponentListener </B>methods in the form of an object of type <B>ComponentEvent</B>. <BR>
&nbsp; <BR>
&nbsp; </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Sample_Program"></A>Sample Program</H2>
</FONT><P>This program illustrates component events, and invokes the <B>componentShown()</B> and <B>componentHidden()</B> methods of the <B>ComponentListener</B> interface under program control. </P>
<P>The user can invoke the <B>componentMoved()</B> and&nbsp; <B>componentResized()</B> methods by moving and resizing the <B>Frame</B> object on the screen. </P>
<P>The program also illustrates the use of an anonymous inner class to terminate the program when the user clicks the <I>close</I> button on the <B>Frame</B> object.. </P>
<P>It also illustrates the use of the controlling class as a&nbsp; listener class.&nbsp; In this situation, the listener methods&nbsp; are defined as methods of the controlling class rather than being defined as methods of separately compiled listener classes. </P>
<P>Typical output from the program is shown in the program listing that follows later. </P>
<P>This program was tested using JDK 1.1.6 under Win95. <BR>
&nbsp; <BR>
&nbsp; </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Interesting_Code_Fragments"></A>Interesting Code Fragments</H3>
</FONT><P>We will begin with the first line of the definition of the controlling class. Note that the controlling class implements the <B>ComponentListener</B> interface. Having done this, the listener methods declared in that interface must be defined in the controlling class, and an object of the controlling class (<B>this</B>) is the listener object which gets registered on itself (<B>this</B>). <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>class Event34 <I>extends</I> <B>Frame</B> <I>implements</I> <B>ComponentListener</B>{</PRE></TD>
</TR>
</TABLE>

<P>I will skip the <B>main</B> method (that does nothing but instantiate an instance of the controlling class) and move on to the constructor.&nbsp; I will highlight only those statements in the constructor that are interesting with respect to component events or the structure of the program. </P>
<P>The next fragment shows the code to register the object as a listener on itself.&nbsp; This is a somewhat cryptic programming style that I have not used widely in these tutorial lessons up to this point but you do see it being used by other authors. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; <B>this</B>.addComponentListener(<B>this</B>);</PRE></TD>
</TR>
</TABLE>

<P>The next fragment shows statements that cause the <B>componentShown()</B> and <B>componentHidden()</B> methods of the <B>ComponentListener</B> interface to be invoked several times in succession. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; this.setVisible(true);//invoke shown event
&nbsp;&nbsp;&nbsp; this.setVisible(false);//invoke hidden event
&nbsp;&nbsp;&nbsp; this.setVisible(true);//invoke shown event</PRE></TD>
</TR>
</TABLE>

<P>To invoke the other two methods of the interface, you will need to manually resize and move the <B>Frame</B> object on the screen. </P>
<P>The last fragment shows the definition of one of the methods of the <B>ComponentListener</B> interface.&nbsp; The definitions of all four methods are essentially the same, so only one of them is shown here. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public void <B>componentResized</B>(ComponentEvent e){
&nbsp;&nbsp;&nbsp; System.out.println("Resized\n" + e.getSource());
&nbsp; }//end componentResized()</PRE></TD>
</TR>
</TABLE>

<P>The code in the program that was not highlighted in the fragments above can be viewed in the complete listing of the program that follows in the next section. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Program_Listing"></A>Program Listing</H3></FONT>
<TABLE BORDER CELLSPACING=1 WIDTH=486>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Event34.java
Copyright 1997, R.G.Baldwin

This program illustrates component events, and invokes the
componentShown() and componentHidden() methods of the
ComponentListener interface under program control.

The user can invoke the componentMoved() and&nbsp;
componentResized() methods by moving and resizing the
Frame object.&nbsp;&nbsp;

The program also illustrates the use of an anonymous
inner class.&nbsp;&nbsp;

It also illustrates the use of the controlling class as a&nbsp;
listener class.&nbsp; In this situation, the listener methods&nbsp;
are defined as methods of the controlling class rather than
being defined as methods of separately compiled listener
classes.

Typical output from the program with line breaks manually
inserted is shown below:
&nbsp;&nbsp;
Shown
Event34[frame0,0,0,350x100,layout=java.awt.BorderLayout,
resizable,title=Copyright 1998 R.G.Baldwin]
Hidden
Event34[frame0,0,0,350x100,layout=java.awt.BorderLayout,
resizable,title=Copyright 1998 R.G.Baldwin]
Shown
Event34[frame0,0,0,350x100,layout=java.awt.BorderLayout,
resizable,title=Copyright 1998 R.G.Baldwin]
Moved
Event34[frame0,31,43,350x100,layout=java.awt.BorderLayout,
resizable,title=Copyright 1998 R.G.Baldwin]
Resized
Event34[frame0,31,43,282x139,layout=java.awt.BorderLayout,
resizable,title=Copyright 1998 R.G.Baldwin]

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This program was tested using JDK 1.1.6 under Win95.
**********************************************************/
import java.awt.*;
import java.awt.event.*;

//Note that the controlling class implements the
// ComponentListener interface.
class Event34 extends Frame implements ComponentListener{
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Event34();//instantiate this object
&nbsp;&nbsp; }//end main
&nbsp; //=====================================================//

&nbsp; public Event34(){//constructor
&nbsp;&nbsp;&nbsp; //Add a component listener
&nbsp;&nbsp;&nbsp; this.addComponentListener(this);
&nbsp;&nbsp;&nbsp; this.setSize(350,100);
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1998 R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setVisible(true);//invoke shown event
&nbsp;&nbsp;&nbsp; this.setVisible(false);//invoke hidden event
&nbsp;&nbsp;&nbsp; this.setVisible(true);//invoke shown event
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Anonymous inner-class listener to terminate program
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp; }//end constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Define the methods of the ComponentListener interface
&nbsp; public void componentResized(ComponentEvent e){
&nbsp;&nbsp;&nbsp; System.out.println("Resized\n" + e.getSource());
&nbsp; }//end componentResized()

&nbsp; public void componentMoved(ComponentEvent e){
&nbsp;&nbsp;&nbsp; System.out.println("Moved\n" + e.getSource());
&nbsp; }//end componentMoved()

&nbsp; public void componentShown(ComponentEvent e){
&nbsp;&nbsp;&nbsp; System.out.println("Shown\n" + e.getSource());
&nbsp; }//end componentShown()

&nbsp; public void componentHidden(ComponentEvent e){
&nbsp;&nbsp;&nbsp; System.out.println("Hidden\n" + e.getSource());
&nbsp; }//end componentHidden()

}//end class Event34&nbsp;&nbsp;&nbsp;
//=======================================================//</PRE></TD>
</TR>
</TABLE>

<P>-end- <!--end--></P></BODY>
</HTML>
