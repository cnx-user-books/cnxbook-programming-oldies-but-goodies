<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Event Handling in JDK 1.1, Component Impersonation<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 106, Revised 02/21/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Intermediate Java Programming</u></b>
classes at ACC are responsible for knowing and understanding all of the
material in this lesson.

<p>JDK 1.1 was released on February 18, 1997 and JDK 1.1.1 was released
on March 27, 1997. This lesson was originally written on March 30, 1997
using the software and documentation in the JDK 1.1.1 download package.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This lesson continues the discussion of posting events to the <b>SystemEventQueue</b>.

<p>One of my teaching objectives is to present every concept in the simplest
possible terms, devoid of confusing extraneous material. This lesson contains
about the simplest example program that I was able to write that illustrates
the posting of events.

<p>In this lesson, a <b>Label </b>object <i>impersonates </i>a <b>Button
</b>object by posting <i>counterfeit </i><b>ActionEvent </b>objects attributable
to the <b>Button</b>. The events are picked up by the system and processed
just as though they were actually generated by the Button. In particular,
they are delivered to an <b>ActionListener </b>object registered on the
<b>Button </b>object where they are processed just as though they originated
at the <b>Button </b>object.

<p>This sample program operates completely within the<i> Source/Listener</i>
concept of the <i>Delegation Event Model.</i><center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
This program was originally designed to be compiled and executed under
JDK 1.1.1. It was later compiled and successfully tested under JDK 1.1.3.
It demonstrates the use of the <b>postEvent() </b>method to post <b>ActionEvents
</b>to the <b>SystemEventQueue</b>. In this program, a <b>Label </b>object
impersonates a <b>Button </b>object by posting <i>counterfeit </i><b>ActionEvent
</b>objects and attributing them to the <b>Button </b>object.

<p>Unlike a previous sample program, this program does <u>not</u> override
any of the <b>processXxxxEvent()</b> methods. Rather, this program works
completely within the <i>Source/Listener</i> concept of the <i>Delegation
Event Model</i>.

<p>Two <b>Label </b>objects and a <b>Button </b>object are instantiated
and added to a <b>Frame </b>object. When the <b>Button </b>object is clicked,
an <b>ActionEvent </b>is generated and trapped by an <b>ActionListener
</b>object registered on the <b>Button </b>object. Code in the<b> actionPerformed()</b>
method of the <b>ActionListener </b>object toggles the background color
of one of the <b>Label </b>objects back and forth between yellow and blue.

<p>Up to this point, everything is pretty normal. However, a <b>MouseListener
</b>object is registered on the other <b>Label</b>. When that <b>Label
</b>object is clicked, code in the <b>mouseClicked()</b> method of the
<b>MouseListener </b>object generates a <i>counterfeit </i><b>ActionEvent
</b>object and posts it to the <b>SystemEventQueue</b>.

<p>The code in the Label's <b>MouseListener </b>object impersonates the
<b>Button </b>object by placing the identification of the <b>Button </b>object
into the "source" field of the <i>counterfeit </i><b>ActionEvent </b>object.

<p>The runtime system delivers the <i>counterfeit </i><b>ActionEvent </b>object
to the <b>ActionListener </b>object registered on the <b>Button </b>object.
The final result is that clicking on the <b>Label </b>object invokes the
<b>actionPerformed()</b> method registered on the <b>Button </b>object,
so clicking on the <b>Label </b>object has exactly the same result as clicking
on the <b>Button </b>object.

<p>The program was tested using JDK 1.1.1 and Win95. An interesting sidelight
is that the <i>counterfeit button </i>constructed from the <b>Label </b>object
is <u>much more responsive</u> than the real button. In other words, the
<i>counterfeit button</i> can service mouse clicks at a much more rapid
rate than the real button.

<p>This probably has something to do with the requirement to redraw the
button twice each time it is clicked in order to animate it. An interesting
exercise for the student would be to respond to the <i>pressed </i>and
<i>released </i>events of the mouse on the <b>Label </b>to change the background
color of the <b>Label </b>while it is pressed to see if that would produce
a similar degradation of the responsiveness of the <i>counterfeit button</i>.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
Much of the material in this program has been included and discussed in
sample programs in earlier lessons. Those portions of the code won't be
highlighted here.

<p>The first interesting code fragment is the pair of statements in the
constructor which register <b>Listener </b>objects on the <b>Label </b>and
the <b>Button</b>. An important point to note is that a <i>reference </i>to
the <b>Button </b>object is passed to the constructor of the <b>MouseListener
</b>object for the <b>Label</b>. It is through this link that the <b>Label
</b>is able to create a <i>counterfeit </i><b>ActionEvent </b>object and
attribute it to the <b>Button</b>.

<p>It is also interesting to note that the <b>Listener </b>object for the
<b>Label </b>knows nothing about the other <b>Label </b>object whose color
is changed during the operation of the program. This is because the <b>Label
</b>object that impersonates the <b>Button </b><u>does not directly change</u>
the color of the other <b>Label </b>object. Rather, by impersonating the
<b>Button </b>object, it causes the <b>ActionListener </b>object on the
<b>Button </b>to perform that task. In fact, it has no knowledge of the
outcome of its impersonation. All it knows is that it posts an <b>ActionEvent
</b>object and attributes it to the <b>Button</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; clickMeLabel.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMouseListener(clickMeButton));
&nbsp;&nbsp;&nbsp; clickMeButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(colorMeLabel));</pre></td></tr></table>
The next interesting code fragment is the statement inside the<b> mouseClicked()
</b>method of the <b>MouseListener </b>object that creates and posts the
<i>counterfeit </i><b>ActionEvent </b>object and attributes it to the <b>Button
</b>object. It is possible for this code to attribute the event to the
<b>Button </b>object only because it has <u>access to a reference</u> to
the <b>Button </b>object.

<p>In this case, that reference is passed as a parameter when the <b>MouseListener
</b>object is constructed but there are probably other ways to accomplish
this as well. For example, code might be able to "peek" into the <b>SystemEventQueue
</b>in hopes of copying an <b>ActionEvent </b>object and obtaining a reference
to the <b>Button</b>. That is why special security provisions apply to
the <b>SystemEventQueue </b>for Applets.

<p>Because the <i>counterfeit </i><b>ActionEvent </b>object is attributed
to the <b>Button </b>object, it is delivered to the <b>ActionListener </b>object
for the <b>Button </b>where it is processed just as though it actually
originated at the <b>Button</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; //Note that the following is a single statement
&nbsp;&nbsp;&nbsp; Toolkit.getDefaultToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSystemEventQueue().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; postEvent(new ActionEvent(clickMeButton,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionEvent.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ACTION_PERFORMED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "counterfeit"));</pre></td></tr></table>
One additional thing worthy of note is the syntax of an <b>ActionEvent
</b>object for comparison with the above statement. There are two constructors
for an <b>ActionEvent </b>object. The following definition matches the
constructor used in the above statement to instantiate the <i>counterfeit
</i><b>ActionEvent </b>object. Note that the reference to the <b>Button</b>
object was used for the first (source) parameter.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>&nbsp;public ActionEvent(Object source,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int id,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String command)</pre>

<dl><dd><tt>Constructs an ActionEvent object with the&nbsp;</tt></dd>

<br><tt>specified source object.</tt>&nbsp;
<dl><dt><tt><b>Parameters:</b>&nbsp;</tt></dt>

<dd><tt><b>source </b>- the object where the event&nbsp;</tt></dd>

<br><tt>originated&nbsp;</tt>&nbsp;
<dd><tt><b>id </b>- the type of event&nbsp;</tt></dd>

<br><tt><b>command </b>- the command string for this&nbsp;</tt>&nbsp;
<br><tt>action event&nbsp;</tt></dl></dl></td></tr></table>
The other constructor has a fourth parameter that deals with the <i>modifier
</i>keys being held down when the event occurred.

<p>As mentioned in an earlier lesson, it is very important that you specify
a correct <b>id</b> parameter. Otherwise, the <b>ActionEvent </b>object
won't be delivered by the runtime system.

<p>I promised you earlier that this was going to be a simple program. The
remaining code is standard code that you have seen many times before so
we won't highlight it as being interesting. A complete listing of the program
is presented in the next section.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
This section contains a complete listing of the program with additional
comments. Refer to previous sections for an operational description of
the program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Event31.java Copyright 1997, R.G.Baldwin
Reformatted 10/5/97 to fit better on the screen.

This program was designed to be compiled and executed under
JDK 1.1.1.

This program demonstrates the use of the postEvent() method
to post ActionEvents to the SystemEventQueue.&nbsp; In this&nbsp;
program, a Label object impersonates a Button object by&nbsp;
posting counterfeit ActionEvent objects and attributes them
to the Button object.

Unlike a previous sample program, this program does not&nbsp;
override any of the processXxxxEvent() methods. Rather,&nbsp;
this program works completely within the Source/Listener&nbsp;
concept of the Delegation Event Model.

Two Labels and a Button are instantiated and added to a&nbsp;
Frame object. When the Button object is clicked, an&nbsp;
ActionEvent is generated and trapped by an ActionListener&nbsp;
object registered on the Button object. Code in the&nbsp;
actionPerformed() method of the Listener object toggles
the background color of one of the Label objects back and&nbsp;
forth between yellow and blue.

So far, everything is pretty standard.&nbsp; However, a&nbsp;
MouseListener object is registered on the other Label.&nbsp;&nbsp;
When that Label object is clicked, code in the&nbsp;
mouseClicked() method of the MouseListener object generates
a synthetic or counterfeit ActionEvent object and posts it&nbsp;
to the SystemEventQueue.

The code in the Label's MouseListener object impersonates&nbsp;
the Button object by placing the identification of the&nbsp;
Button object into the "source" field of the counterfeit&nbsp;
ActionEvent object.&nbsp;&nbsp;

The runtime system delivers the counterfeit ActionEvent&nbsp;
object to the ActionListener object registered on the&nbsp;
Button object.&nbsp; The final result is that clicking on the&nbsp;
Label object invokes the actionPerformed() method&nbsp;
registered on the Button object, so clicking on the Label&nbsp;
object has exactly the same result as clicking on the&nbsp;
Button object.

The program was tested using JDK 1.1.1 (and later&nbsp;
JDK 1.1.3) and Win95.&nbsp; An interesting sidelight is that the
counterfeit button constructed from the Label object is
more responsive than the real button.&nbsp; In other words, the
counterfeit button can service mouse clicks at a more rapid
rate than the real button.
*/

import java.awt.*;
import java.awt.event.*;

//=========================================================
public class Event31 extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; Event31 displayWindow = new Event31();//instantiate obj
&nbsp; }//end main
&nbsp; //-------------------------------------------------------

&nbsp; public Event31(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; Button clickMeButton = new Button("Click Me");
&nbsp;&nbsp;&nbsp; Label colorMeLabel = new Label("Color Me");
&nbsp;&nbsp;&nbsp; Label clickMeLabel = new Label("Click Me");&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; add(clickMeButton);//add components to the Frame object
&nbsp;&nbsp;&nbsp; add(colorMeLabel);
&nbsp;&nbsp;&nbsp; add(clickMeLabel);

&nbsp;&nbsp;&nbsp; setSize(250,100);//set frame size&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setVisible(true);//display the frame

&nbsp;&nbsp;&nbsp; //Register listener objects
&nbsp;&nbsp;&nbsp; clickMeLabel.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMouseListener(clickMeButton));
&nbsp;&nbsp;&nbsp; clickMeButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(colorMeLabel));
&nbsp;&nbsp;&nbsp; //terminate when Frame is closed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());
&nbsp;&nbsp; }//end constructor
}//end class Event31
//=========================================================

/*This MouseListener class is used to monitor for mouse&nbsp;
clicks on a Label object.&nbsp; Whenever the user clicks on the&nbsp;
label, the code in an object of this class creates a&nbsp;
counterfeit ActionEvent object and posts it to the&nbsp;
SystemEventQueue.&nbsp; The source of the event is specified to&nbsp;
be a particular Button object that is passed in when an&nbsp;
object of this class is instantiated.&nbsp; Thus, the Label&nbsp;
object "claims" to be the Button object and posts&nbsp;
ActionEvent objects that are interpreted by the runtime&nbsp;
system as originating at the Button object.&nbsp; The type of
ActionEvents generated are ACTION_PERFORMED events.&nbsp; The&nbsp;
events are automatically delivered to the actionPerformed()
method of an ActionListener object registered on the&nbsp;
button. */

class MyMouseListener extends MouseAdapter{
&nbsp; Button clickMeButton;//reference to the Button
&nbsp; //-------------------------------------------------------
&nbsp; MyMouseListener(Button inButton){//constructor
&nbsp;&nbsp;&nbsp; clickMeButton = inButton;//save reference to Button
&nbsp; }//end constructor
&nbsp; //-------------------------------------------------------
&nbsp; //overridden mouseClicked() method
&nbsp; public void mouseClicked(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Note that the following is a single statement
&nbsp;&nbsp;&nbsp; Toolkit.getDefaultToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSystemEventQueue().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; postEvent(new ActionEvent(clickMeButton,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionEvent.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ACTION_PERFORMED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "counterfeit"));
&nbsp; }//end overridden mouseClicked() method
}//end MyMouseListener

//=========================================================
/*This ActionListener class is used to instantiate a&nbsp;
Listener object for the Button object.&nbsp; Whenever the button
is clicked, or a counterfeit ActionEvent is posted with the
Button as the specified source object, the code in an&nbsp;
object of this class toggles the background color of a&nbsp;
Label object back and forth between yellow and blue.*/

class MyActionListener implements ActionListener{
&nbsp; int toggle = 0;
&nbsp; Label myLabel;
&nbsp; //-------------------------------------------------------
&nbsp; MyActionListener(Label inLabel){//constructor
&nbsp;&nbsp;&nbsp; myLabel = inLabel;
&nbsp; }//end constructor&nbsp;&nbsp;
&nbsp; //-------------------------------------------------------
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; if(toggle == 0){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toggle = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toggle = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.blue);
&nbsp;&nbsp;&nbsp; }//end else
&nbsp; }//end actionPerformed()
}//end class myActionListener
//=========================================================

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing
}//end class Terminate
//=========================================================</pre></td></tr></table>

<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Write a Java application that meets the specifications given below.

<p><font color="#0000ff"><font size=-1>A - See the specifications and the
solution below.</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg133.java Copyright 1997, R.G.Baldwin
Without viewing the solution that follows, write a Java
application that replicates the behavior of the application
named Event31.java (discussed in lesson 106) with the&nbsp;
following changes.

This is an upgrade to the original version of Event31.
In particular, in its original form, there is no visual&nbsp;
indication when the user clicks on the Label object&nbsp;
identified by the Click Me caption. Since this Label object
is being used to simulate a Button object, a visual&nbsp;
indication that the Label object has been clicked would be
appropriate.

In your upgraded version, the white Label object which&nbsp;
originally had the Click Me caption will appear as a&nbsp;
magenta colored rectangle when the program starts and will
not display a caption.&nbsp;&nbsp;

When the user clicks the magenta Label object, the caption&nbsp;
"ouch" will momentarily appear and disappear in synchronism
with the down stroke and the up stroke of the left mouse&nbsp;
button.&nbsp; The caption will appear on the down stroke and&nbsp;
will disappear on the upstroke.

In addition to the above, make your name appear in the
banner at the top of the Frame object.

The upgraded version of the program has been tested using
JDK 1.1.3 under Win95.

*/
//=========================================================
import java.awt.*;
import java.awt.event.*;

//=========================================================
public class SampProg133 extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate obj
&nbsp;&nbsp;&nbsp; SampProg133 displayWindow = new SampProg133();
&nbsp; }//end main
&nbsp; //-------------------------------------------------------

&nbsp; public SampProg133(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; Button clickMeButton = new Button("Click Me");
&nbsp;&nbsp;&nbsp; Label colorMeLabel = new Label("Color Me");
&nbsp;&nbsp;&nbsp; Label clickMeLabel = new Label("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
&nbsp;&nbsp;&nbsp; clickMeLabel.setBackground(Color.magenta);&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; add(clickMeButton);//add components to the Frame object
&nbsp;&nbsp;&nbsp; add(colorMeLabel);
&nbsp;&nbsp;&nbsp; add(clickMeLabel);

&nbsp;&nbsp;&nbsp; setSize(300,100);//set frame size&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setVisible(true);//display the frame

&nbsp;&nbsp;&nbsp; //Register listener objects
&nbsp;&nbsp;&nbsp; clickMeLabel.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMouseListener(clickMeButton,clickMeLabel));
&nbsp;&nbsp;&nbsp; clickMeButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(colorMeLabel));
&nbsp;&nbsp;&nbsp; //terminate when Frame is closed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());
&nbsp;&nbsp; }//end constructor
}//end class SampProg133
//=========================================================

/*This MouseListener class is used to monitor for mouse&nbsp;
clicks on a Label object.&nbsp; Whenever the user clicks on the&nbsp;
label, the code in an object of this class creates a&nbsp;
counterfeit ActionEvent object and posts it to the&nbsp;
SystemEventQueue.&nbsp; The source of the event is specified to&nbsp;
be a particular Button object that is passed in when an&nbsp;
object of this class is instantiated.&nbsp; Thus, the Label&nbsp;
object "claims" to be the Button object and posts&nbsp;
ActionEvent objects that are interpreted by the runtime&nbsp;
system as originating at the Button object.&nbsp; The type of
ActionEvents generated are ACTION_PERFORMED events.&nbsp; The&nbsp;
events are automatically delivered to the actionPerformed()
method of an ActionListener object registered on the&nbsp;
button. */

class MyMouseListener extends MouseAdapter{
&nbsp; Button clickMeButton;//reference to the Button
&nbsp; Label clickMeLabel;//reference to the Label
&nbsp; //-------------------------------------------------------
&nbsp; //constructor
&nbsp; MyMouseListener(Button inButton,Label inLabel){
&nbsp;&nbsp;&nbsp; clickMeButton = inButton;//save reference to Button
&nbsp;&nbsp;&nbsp; clickMeLabel = inLabel;//save reference to Label
&nbsp; }//end constructor
&nbsp; //-------------------------------------------------------
&nbsp; //overridden mouseClicked() method
&nbsp; public void mouseClicked(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Note that the following is a single statement
&nbsp;&nbsp;&nbsp; Toolkit.getDefaultToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSystemEventQueue().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; postEvent(new ActionEvent(clickMeButton,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionEvent.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ACTION_PERFORMED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "counterfeit"));
&nbsp; }//end overridden mouseClicked() method
&nbsp; //------------------------------------------------------
&nbsp; //overridden mousePressed() method
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; clickMeLabel.setText(" ouch ");
&nbsp; }//end overridden mousePressed() method
&nbsp; //------------------------------------------------------
&nbsp; //overridden mouseReleased() method
&nbsp; public void mouseReleased(MouseEvent e){
&nbsp;&nbsp;&nbsp; clickMeLabel.setText("&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ");
&nbsp; }//end overridden mousePressed() method
}//end MyMouseListener

//=========================================================
/*This ActionListener class is used to instantiate a&nbsp;
Listener object for the Button object.&nbsp; Whenever the button
is clicked, or a counterfeit ActionEvent is posted with the
Button as the specified source object, the code in an&nbsp;
object of this class toggles the background color of a&nbsp;
Label object back and forth between yellow and blue.*/

class MyActionListener implements ActionListener{
&nbsp; int toggle = 0;
&nbsp; Label myLabel;
&nbsp; //-------------------------------------------------------
&nbsp; MyActionListener(Label inLabel){//constructor
&nbsp;&nbsp;&nbsp; myLabel = inLabel;
&nbsp; }//end constructor&nbsp;&nbsp;
&nbsp; //-------------------------------------------------------
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; if(toggle == 0){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toggle = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toggle = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.blue);
&nbsp;&nbsp;&nbsp; }//end else
&nbsp; }//end actionPerformed()
}//end class myActionListener
//=========================================================

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing
}//end class Terminate
//=========================================================</font></pre></td></tr></table>
-end-<!--end--></body></html>