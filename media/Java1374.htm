<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 13,
The Comparator Interface, Part 5</h2>
<p>
<i><font color="#000000">Baldwin shows you how to use the sort method of
the </font>Collections class along with a Comparator object to sort the
contents of a List into reverse natural order.</i></p>
&nbsp;<b>Published:</b>&nbsp; September 3, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1374
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">A miniseries</font></b>
<p>This is the thirteenth lesson in a miniseries on Java data structures
and the Java<i> Collections Framework.</i>&nbsp; The first lesson in the
miniseries was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1372.htm">Data Structures in Java: Part 12, The
Comparator Interface, Part 4</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p><b><font color="#FF0000">A sub-series</font></b>
<p>This is also the fifth lesson in a sub-series on the <b>Comparator</b>
interface.&nbsp; The primary purpose of the lessons in this sub-series
is to teach you about the interactions between the <b>Comparator</b> interface
and the Collections Framework.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">In this lesson, I will teach you how to use the <b>sort</b>
method of the <b>Collections</b> class along with a <b>Comparator</b> object
to sort the contents of a <b>List </b>into <i>reverse natural order</i>.</font>
<p><font color="#000000">The methodology that I will teach you is completely
general, and can be used to sort a list in a wide variety of ways, depending
on how you define the <b>compare</b> method of a <b>Comparator</b> object.</font>
<p><font color="#000000">Furthermore, the same <b>sort</b> method and the
same <b>Comparator</b> object can be used to sort any implementation of
a list, so long as the list properly implements the <b>List</b> interface.</font>
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Program</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Let's begin with a little quiz to test your prior knowledge of the Collections
Framework.
<p>What output is produced by the program shown in Listing 1?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; BILL Bill JOE Joe TOM Tom</li>

<li>
D.&nbsp; Tom TOM Joe JOE Bill BILL</li>

<li>
E.&nbsp; Joe Bill Tom</li>

<br>F.&nbsp; None of the above.</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparator06.java
//Copyright 2001, R.G.Baldwin
import java.util.*;
import java.io.Serializable;

public class Comparator06{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparator06

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;

&nbsp;&nbsp;&nbsp; ref = new LinkedList();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; Collections.sort(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (List)ref, new TheComparator());
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();

&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements Comparator,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int compare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

&nbsp;&nbsp;&nbsp; //Do an upper-case comparison
&nbsp;&nbsp;&nbsp; int result = ((String)o1).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compareTo(((String)o2));
&nbsp;&nbsp;&nbsp; return result*(-1);
&nbsp; }//end compare()
}//end class TheComparator

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p>The correct answer to the above question is shown below:
<p>D.&nbsp; Tom TOM Joe JOE Bill BILL
<p>If that was your answer, you probably already understand most of the
material covered in this lesson.&nbsp; In that case, you might consider
skipping this lesson and moving on to the next lesson.&nbsp; If that wasn't
your answer, you should probably continue with your study of this lesson.
<p><b><font color="#FF0000">Similar to previous programs</font></b>
<p>The overall structure of this program in Listing 1 is similar to programs
that I have discussed in previous lessons.&nbsp; Therefore, I will concentrate
on those aspects of this program that differentiate it from the programs
in previous lessons.
<p><b><font color="#FF0000">A new LinkedList object</font></b>
<p>The code in Listing 2 instantiates a new <b>LinkedList</b> object and
passes that object's reference to a method named <b>fillIt</b> where it
is populated with the names of several people.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; ref = new LinkedList();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p>The <b>LinkedList</b> class is one of the concrete implementation classes
of the Collections Framework.&nbsp; This class implements the <b>Collection</b>
interface and the <b>List</b> interface.&nbsp; Here is part of what Sun
has to say about the <b>LinkedList</b> class:
<blockquote><i>"Linked list implementation of the List interface. Implements
all optional list operations, and permits all elements (including null).
In addition to implementing the List interface, the LinkedList class provides
uniformly named methods to get, remove and insert an element at the beginning
and end of the list. These operations allow linked lists to be used as
a stack, queue, or double-ended queue (deque)."</i></blockquote>
<b><font color="#FF0000">Populating the List</font></b>
<p>The code in Listing 3 shows the <b>fillIt</b> method that is used to
populate the list with references to six different <b>String</b> objects.
<p>The <b>add</b> method is used to add each new element to the end of
the list.&nbsp; As you can see, the elements are added to the list in no
particular order with respect to their values.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Displaying the list</font></b>
<p>Although I didn't bother to do so in this program, if an iterator were
to be used to access and display the elements in the list following the
invocation of the <b>fillIt</b> method, the result would be as shown below:
<p><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<p>As you can see, this is the same as the order in which the elements
are added to the list.&nbsp; The first element is added to the list at
index value 0 and the sixth element is added to the list at index value
6.
<p><b><font color="#FF0000">Sort the list</font></b>
<p>The code shown in Listing 4 is new to this lesson.&nbsp; This code uses
the <b>sort</b> method of the <b>Collections</b> class, along with a <b>Comparator</b>
object to sort the contents of the list.
<p><b><font color="#FF0000">A very important point</font></b>
<p>Note that unlike the programs in previous lessons that simply extracted
the contents of the collection into an array and sorted the array, this
code actually rearranges the contents of the list according to the sorting
rules.&nbsp; <i>(The programs in previous lessons that sorted the arrays
did not rearrange the contents of the list.&nbsp; Only the contents of
the arrays were rearranged.)</i>
<p>Thus, the relationship between an element in the list and the index
associated with that element can change as a result of the sorting operation
shown in Listing 4.
<p>Following the sort, when an iterator is used to access the elements,
the elements will be returned by the iterator in the newly-sorted order.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Collections.sort(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (List)ref, new TheComparator());

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The Collections class</font></b>
<p>Note that despite the similarity of the names, the <b>Collections</b>
class is different from the <b>Collection</b> interface.&nbsp; Here is
part of what Sun has to say about the <b>Collections</b> class:
<blockquote><i>"This class consists exclusively of static methods that
operate on or return collections. It contains polymorphic algorithms that
operate on collections, "wrappers", which return a new collection backed
by a specified collection, and a few other odds and ends."</i></blockquote>
<b><font color="#FF0000">The sort method</font></b>
<p>The <b>Collections</b> class provides a large number of very interesting
and useful methods, such as <b>binarySearch</b>, <b>copy</b>, <b>reverse</b>,
and <b>reverseOrder</b>.&nbsp; <i>(The reverseOrder method will be examined
in the next lesson.)</i>
<p>One of the static methods of the <b>Collections</b> class is the <b>sort</b>
method.&nbsp; One version of the <b>sort</b> method can be used to sort
a list into the <i>natural ordering</i> of its elements.&nbsp; Another
version sorts a list according to the order induced by a comparator.
<p>Here is part of what Sun has to say about this second version of the
<b>sort
</b>method
that uses a <b>Comparator</b>:
<blockquote><b><i><tt>public static void sort(</tt></i></b>
<br><b><i><tt>&nbsp;&nbsp;&nbsp;&nbsp; List list, Comparator c)</tt></i></b>
<br><i>"Sorts the specified list according to the order induced by the
specified comparator. All elements in the list must be mutually comparable
using the specified comparator (that is ...</i>
<p><i>The specified list must be modifiable, but need not be resizable.
This implementation dumps the specified list into an array, sorts the array,
and iterates over the list resetting each element from the corresponding
position in the array. This avoids the&nbsp; n2 log(n) performance that
would result from attempting to sort a linked list in place."</i></blockquote>
<b><font color="#FF0000">Also uses an array</font></b>
<p>I find it interesting that the <b>sort</b> method uses an array as an
intermediary in the sorting process.&nbsp; However, the difference between
this approach and the approach involving arrays shown in previous lessons
is given by the following excerpt from the above quotation:
<blockquote><i>"iterates over the list resetting each element from the
corresponding position in the array"</i></blockquote>
In other words, after sorting the array, the <b>sort</b> method uses the
sorted results in the array to rearrange the positions of the elements
in the list, resulting in a sorted list.
<p><b><font color="#FF0000">A flexible approach to sorting</font></b>
<p>Thus, the <b>sort</b> method of the <b>Collections</b> class can be
used to sort the elements in a list using whatever set of comparison rules
you program into the <b>compare</b> method of the <b>Comparator</b> object.&nbsp;
Furthermore, it doesn't matter how the list is actually implemented so
long as it properly implements the <b>List</b> interface.
<p><b><font color="#FF0000">The Comparator</font></b>
<p>The code in Listing 5 shows the class from which the <b>Comparator</b>
object was instantiated.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements Comparator,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int compare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

&nbsp;&nbsp;&nbsp; int result = ((String)o1).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compareTo(((String)o2));
&nbsp;&nbsp;&nbsp; return result*(-1);
&nbsp; }//end compare()
}//end class TheComparator

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p>I have presented and discussed this class in previous lessons, so I
won't discuss it in detail again here. Suffice it for now to say that an
object instantiated from this class will induce the list to be sorted into
<i>reverse
natural order</i>.
<p><b><font color="#FF0000">Display the sorted list</font></b>
<p>The code in Listing 6 gets and uses an iterator to display the contents
of the sorted list.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p>The output produced by the code in Listing 6 is shown below:
<p><b><tt>Tom TOM Joe JOE Bill BILL</tt></b>
<p>As you can see, this is <i>reverse natural order</i> as induced by the
<b>Comparator</b>
object.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I have taught you how to use the
sort method of the <b>Collections</b> class along with a <b>Comparator</b>
object to sort the contents of a list.</font>
<p><font color="#000000">By using this approach, you can sort the contents
of list according to any set of comparison rules that you can program into
the <b>compare</b> method of the <b>Comparator</b> object.</font>
<p><font color="#000000">Furthermore, the ability to sort the list is independent
of the actual implementation of the list, so long as the list properly
implements the <b>List</b> interface.&nbsp; For example, the same <b>Comparator</b>
object <i>(and the same code)</i> can be used to sort an <b>ArrayList</b>,
a <b>LinkedList</b>, or a <b>Vector</b>, producing the same results regardless
of which class the list object is instantiated from.</font>
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will show you how to use a <b>Comparator</b> created
by the <b>reverseOrder</b> method of the <b>Collections</b> class to sort
a list into
<i>reverse natural order</i>.&nbsp; I will also show you how
to use the <b>reverse</b> method of the <b>Collections</b> class to reverse
the order of the elements in a list.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
