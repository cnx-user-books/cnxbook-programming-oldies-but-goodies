<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Introduction to Applets in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Introduction to Applets<!--endtitle--></H2>
<P>Java Programming, Lecture Notes # 18, Revised 10/03/99. </P>
<P><!-toc file=Java018a.htm words=Preface-><A HREF="#preface">Preface</A><BR>
<!--endtoc--><!-toc file=Java018b.htm words=Introduction-><A HREF="#introduction">Introduction</A><BR>
<!--endtoc--><!-toc file=Java018c.htm words=A Brief Word about Overriding Methods-><A HREF="#abriefwordaboutoverridingmethods">A Brief Word about Overriding Methods</A><BR>
<!--endtoc--><!-toc file=Java018d.htm words=A Brief Word about the Java Class Hierarchy-><A HREF="#abriefwordaboutthejavaclasshierarchy">A Brief Word about the Java Class Hierarchy</A><BR>
<!--endtoc--><!-toc file=Java018e.htm words=The "Hello World" Applet-><A HREF="#thehelloworldapplet">The "Hello World" Applet</A><BR>
<!--endtoc--><!-toc file=Java018f.htm words=A Brief Word about Packages-><A HREF="#abriefwordaboutpackages">A Brief Word about Packages</A><BR>
<!--endtoc--><!-toc file=Java018g.htm words=A Brief Word about Inheritance and Applets-><A HREF="#abriefwordaboutinheritanceandapplets">A Brief Word about Inheritance and Applets</A><BR>
<!--endtoc--><!-toc file=Java018h.htm words=A Brief Word about the HTML Page-><A HREF="#abriefwordaboutthehtmlpage">A Brief Word about the HTML Page</A><BR>
<!--endtoc--><!-toc file=Java018i.htm words=Running Applets in Standalone Mode-><A HREF="#runningappletsinstandalonemode">Running Applets in Standalone Mode</A><BR>
<!--endtoc--><!-toc file=Java018j.htm words=Sample Program-><A HREF="#sampleprogram">Sample Program</A><BR>
<!--endtoc--><!-toc file=Java018k.htm words=Review Questions for Lesson 18-><A HREF="#review">Review Questions for Lesson 18</A><!--endtoc--> </P>
<P><!-next=Java018a.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Introductory Java Programming</B></U> classes at ACC are responsible for knowing and understanding all of the material in this lesson (except that they are not responsible for detailed information that is specific to C++). </P>
<P>The detailed material on C++ is provided as supplementary material for the benefit of those persons who are already familiar with C++ and who are making the transition into Java. </P>
<P><!-prev=Java018.htm-><!-next=Java018b.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="introduction"></A>Introduction</H2>
</FONT><B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Applets</P>
</B></I></FONT><P>This lesson provides a very brief introduction to the programming of Java Applets. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Two Approaches</P>
</B></I></FONT><P>To repeat some of what we said in an earlier lesson, Java programs can be written and executed in two ways: </P>

<UL>
<LI>Stand-alone <B>application</B>, run from the command line. </LI>
<B><LI>Applet</B> which runs under control of a Java-capable browser or the AppletViewer program.</LI></UL>

<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>A Third Approach</P>
</B></I></FONT><P>Actually we said that with a little extra programming effort, it is also possible to run most applets as standalone programs. We will illustrate this at the end of this lesson. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>What About A Graphical User Interface (GUI)?</P>
</B></I></FONT><P>Programming a simple <I>applet</I> in Java is significantly different from programming a simple <I>application</I>. This is particularly true when the application doesn't make use of a <I>Graphical User Interface </I>(GUI). When the application does make use of a GUI, the programming requirements for the two are more similar. </P>
<P>When a simple graphical user interface is needed, applet programming can be easier than application programming. We will also illustrate this at the end of the lesson. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Applet Execution Mode</P>
</B></I></FONT><P>Applets are designed to be downloaded and executed on-line, under control of a <I>Java-capable browser</I>. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>A Java-Capable Browser</P>
</B></I></FONT><P>What do we mean by a <I>Java-Capable browser</I>? We mean a browser that contains its own <I>Java Virtual Machine,</I> which (hopefully) is compatible with all the programming features included in your applet. As of August 1999, this compatibility issue continues to be a serious one, but not as serious as it was in past years. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>The Java Virtual Machine</P>
</B></I></FONT><P>What do we mean by a <I>Java Virtual Machine </I>or <B>JVM</B>? A <B>JVM</B> is a program that is capable of extracting the bytecode data from the compiled <I>class</I> files and using them to cause the behavior of the computer to match what the Java programmer (hopefully) had in mind when she wrote the Java application or applet in the first place. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Using a Different Language to Produce Bytecode</P>
</B></I></FONT><P>Could you use another language (possibly one of your own design) to create applets? The answer is probably yes. All that would be necessary would be for your other language to create <I>class</I> files whose contents match the requirements of the <B>JVM</B>, although that may be much easier said than done. All the browser actually sees is the <I>class</I> files. It really doesn't know how they were created as long as they meet the specifications for the Java language and <B>JVM</B>. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Special Security Procedures Apply</P>
</B></I></FONT><P>Because applets are designed to be downloaded and executed on-line, special security procedures are implemented. Applet functionality is restricted by the browser in an attempt to prevent downloaded applets from damaging your computer or your data. </P>
<P>Note that such restrictions are not a function of the Java language. Rather, they are imposed by a <I>security manager</I> that is a part of browser. In theory, you could write your own browser that would impose no such requirements on the execution of applets (but that might not be a wise thing to do). </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Security in JDK 1.1</P>
</B></I></FONT><P>Capabilities were designed into JDK 1.1 to allow the individual to decide the level of security restrictions that are to be imposed on applets when they are executed. However, as of August 1999, I don't believe that either the Netscape or Microsoft browser products are fully supporting this capability. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>New Security Requirements in JDK 1.2</P>
</B></I></FONT><P>Actually, security is a moving target. Major changes in the security area were introduced in JDK 1.2 in December 1998. However, the details are far too complex for an introductory course in Java.</P>
<P>The topic of security will be discussed in more detail in a subsequent lesson on Advanced Java Programming. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Is a main() Method Required?</P>
</B></I></FONT><P>A stand-alone Java program (Java application) requires a method named <B>main</B> in its <I>controlling class.</I> </P>
<P>An <B>Applet</B> does not require a <B>main</B> method, but we will show at the end of this lesson that it is technically all right to include a <B>main()</B> method in an applet to support standalone operation. </P>
<P><!-prev=Java018a.htm-><!-next=Java018c.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="abriefwordaboutoverridingmethods">A Brief Word about Overriding Methods</A></H2>
</FONT><P>In order to understand the program code for an applet, it is necessary to have some understanding of the concept of <I>overriding methods</I>. This topic will be covered in more detail later, so this is simply an introduction to help you understand the applet code that is presented later in this lesson. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Runtime Polymorphism</P>
</B></I></FONT><P>Overriding methods is an aspect of <I>inheritance </I>and results in a mode of behavior that we refer to as <I>runtime polymorphism</I>. (You should already know about <I>inheritance </I>and <I>runtime polymorphism</I> as a result of studying one of the early lessons in this series on Object-Oriented Programming.) </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Inheritance</P>
</B></I></FONT><P>New classes can be defined by <I>extending</I> (inheriting from) existing classes. The new class is often referred to as the <I>subclass</I> and the class being extended is often referred to as the <I>superclass</I>. (Many other names are used as well as explained in the earlier lesson on Object-Oriented Programming.) </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>When a new class <I>extends </I>an existing class, all the variables and methods which are members of the superclass (and which are members of <U>all the ancestors</U> of the superclass) <U>become members of the subclass</U>.&nbsp;</TD>
</TR>
</TABLE>

<P>This is an extremely important statement. Turn it over in your mind a few times to make sure that you realize the full impact of what I just said. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Modifying Behavior</P></B></I></FONT>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>In the event that the behavior specified by a method of the superclass (or one of its ancestors) is not appropriate for objects of the new type defined by the subclass, it is possible to rewrite the method in the subclass to cause it to impart different behavior for objects of the subclass type.</TD>
</TR>
</TABLE>

<P>This is another extremely important statement. Make certain that you think about it and understand what it means. It might also be worthwhile for you to go back and review the section on overriding methods in the earlier lesson on Object-Oriented programming. That section contains a small, but very important sample program illustrating the general behavior of overridden methods. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Overriding a Method in Java</P>
</B></I></FONT><P>Rewriting the method in the subclass is referred to as <I>overriding</I> the method. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>All that is required to override a method in Java is to use the same <I>method signature</I> in the subclass and then provide a different body for the method.</TD>
</TR>
</TABLE>

<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Overriding a Method in C++</P></B></I></FONT>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ff00">
<P>C++ programmers may recall that the procedure for overriding a method in C++ is a little more complicated, requiring among other things that the method being overridden be originally defined as a <I>virtual</I> method.</TD>
</TR>
</TABLE>

<P><!-prev=Java018b.htm-><!-next=Java018d.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="abriefwordaboutthejavaclasshierarchy">A Brief Word about the Java Class Hierarchy</A></H2>
</FONT><B><I><FONT FACE="Arial" COLOR="#ff0000"><P>The Object Class</P>
</B></I></FONT><P>All classes automatically derive from a superclass named <B>Object</B> or from a direct or indirect subclass of <B>Object</B>. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>All classes in Java form a hierarchical pyramid with the <B>Object</B> class at the top of the pyramid.</TD>
</TR>
</TABLE>

<P>The <B>Object</B> class defines a number of methods that are inherited by and are available to all direct or indirect subclasses of the <B>Object</B> class. Similarly, in the standard Java class libraries, various direct and indirect subclasses of <B>Object</B> provide additional methods that are inherited by new subclasses that you define. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>All Classes are Direct or Indirect Subclasses of Object</P>
</B></I></FONT><P>Whenever you define a new class, it is a subclass of <B>Object</B> by default. However, you will often want to take advantage of the functionality of existing subclasses of <B>Object</B> by extending one of those existing subclasses. That is the case when we define the class for and write the code for an applet. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>When Should You Override Methods?</P>
</B></I></FONT><P>Sometimes, you will be content with leaving the inherited methods alone and either using them as defined, or ignoring them altogether. At other times, you will need to modify the behavior of certain inherited methods by <I>overriding </I>them in new classes that you define. </P>
<P><!-prev=Java018c.htm-><!-next=Java018e.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="thehelloworldapplet">The "Hello World" Applet</A></H2>
</FONT><B><I><FONT FACE="Arial" COLOR="#ff0000"><P>What Is an Applet?</P>
</B></I></FONT><P>According to <U>The Java Tutorial,</U> by Mary Campione and Kathy Walrath, which at the time of this writing could be downloaded from <A HREF="http://java.sun.com:80/books/Series/Tutorial/index.html">http://java.sun.com:80/books/Series/Tutorial/index.html</A>, <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P><I><TT>"... a Java Applet is a program that adheres to a set of conventions that allows it to run within a Java-compatible browser."</I>&nbsp;</TT></TD>
</TR>
</TABLE>

<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Three Ways to Execute an Applet</P>
</B></I></FONT><P>There are at least two ways to execute a Java applet (actually three ways with a little extra programming effort). </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>AppletViewer</P>
</B></I></FONT><P>One way, and this is often the preferable way for testing, is to execute the applet using the <B>AppletViewer</B> program which is a standard part of the JDK. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Java-Capable Browser</P>
</B></I></FONT><P>A second way to execute a Java applet, and this is the way that you make applets available to others on your Web site, is to view it using a Java-capable browser program. </P>
<P>In both cases, it is necessary to produce an HTML file containing tags that reference the applet. HTML files will be discussed briefly a little later. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Running Applet in Standalone Mode</P>
</B></I></FONT><P>The third way to execute an applet is to run it in a standalone mode. This does not require an HTML file. It does require that a <B>main()</B> method is contained in the controlling class for the applet. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>The "Hello World" Applet</P>
</B></I></FONT><P>A sample applet that displays <B>Hello World</B> follows. </P>
<P>Note that the controlling class for this applet </P>

<UL>
<I><LI>extends</I> the <B>Applet</B> class, and </LI>
<I><LI>overrides</I> the <B>paint()</B> method. </LI></UL>

<P>The various parts of the applet are presented and discussed later in this lesson.<BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*Applet program hello3.java
This is a Java applet that produces the same
output as the application named hello1.java,
except this program runs under a browser or&nbsp;
the Applet Viewer.
*********************************************************/

<B>import</B> java.applet.Applet;//see discussion on packages
<B>import</B> java.awt.Graphics;

<B>public</B> class hello3 <B>extends</B> Applet {
&nbsp; //override the paint method
&nbsp; public void <B>paint(Graphics</B> screen) {
&nbsp;&nbsp;&nbsp; screen.drawString("Hello World",50,25);
&nbsp; }
} //End hello3 class.&nbsp;
//End applet</PRE></TD>
</TR>
</TABLE>

<P><!-prev=Java018d.htm-><!-next=Java018f.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="abriefwordaboutpackages">A Brief Word about Packages</A></H2>
</FONT><B><I><FONT FACE="Arial" COLOR="#ff0000"><P>What is a Package?</P>
</B></FONT><P>Packages</I> are used in Java to group classes similar to the way libraries are used to group functions and classes in C++. </P>
<I><P>Packages</I> will be discussed in more detail in a subsequent lesson. Suffice it for now to say that a package is nothing more and nothing less than the specification of a directory on your hard drive that contains a group of <I>(probably)</I> related <I>class</I> files. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Importing Classes</P>
</B></I></FONT><P>The above program contains two <B>import</B> statements. </P>
<P>Except for certain classes that are automatically <I>imported</I> (such as the <B>System</B> class) when a Java program is compiled, Java programs can <B>import</B> classes or <I>packages</I> <I>containing classes </I>in order to access the classes <U>with minimal code</U>. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Doing it the Hard Way</P>
</B></I></FONT><P>If we were to delete the <I>import</I> directives in the above program, we could still compile and run the program, but only if we made the modifications shown in boldface below. </P>
<P>As you can see, this requires more typing effort on your part.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>public class hello3 extends <B>java.applet.Applet</B> {
&nbsp; public void paint(<B>java.awt.Graphics</B> screen) {&nbsp;
&nbsp;&nbsp;&nbsp; screen.drawString("Hello World",50,25);
&nbsp; }
} //End hello3 class.&nbsp;</PRE></TD>
</TR>
</TABLE>

<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Why Use Import Directives?</P>
</B></I></FONT><P>The <B>import</B> directives are a convenience to the programmer making it possible to refer to the classes without the requirement to provide a <I>fully qualified path name </I>for every class. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Importing Packages</P>
</B></I></FONT><P>As an alternative to importing individual classes, you can import entire packages using a wildcard character as shown below. This may slow down compilation but will have no detrimental impact at runtime. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>import java.applet.*;

import java.awt.*;</PRE></TD>
</TR>
</TABLE>

<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>The Default Package</P>
</B></I></FONT><P>All classes are in packages, either the package specified when the class is defined, or in the <I>default</I> package. </P>
<P>All of the classes <U>within a package</U> can refer to each other without using <I>fully qualified path names</I>. </P>
<P>As mentioned above, packages will be discussed in more detail in a subsequent lesson. </P>
<P><!-prev=Java018e.htm-><!-next=Java018g.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="abriefwordaboutinheritanceandapplets">A Brief Word about Inheritance and Applets</A></H2>
</FONT><P>In both Java and C++, classes can <I>inherit</I> from other classes. (Inheritance will be discussed in more detail in a subsequent lesson.) </P>
<P>In Java, a class which inherits from another class is called a <B>subclass</B> and the inheritance is accomplished using the keyword <B>extends</B>. (Inheritance syntax is much different in C++.) </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Applets Must Extend the Applet Class</P>
</B></I></FONT><P>Every applet <B><U>must</B></U> inherit a <B>subclass</B> from the <B>Applet</B> class by <I>extending</I> the <B>Applet</B> class (which was <I>imported</I> in the above program). </P>
<P>Furthermore, that <B>subclass</B> <B><U>must</B></U> be defined as <B>public</B>. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>What About main()?</P>
</B></I></FONT><P>Applets do <U>not</U> need a <B>main</B> method (but may have one if you want to be able to run them in a standalone mode). </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>What Methods Must an Applet Override?</P>
</B></I></FONT><P>An applet must override at least one of the following methods, and can override more than one. </P>

<UL>
<B><LI>init()</B> </LI>
<B><LI>start()</B> </LI>
<B><LI>paint().</LI></UL>

<I><FONT FACE="Arial" COLOR="#ff0000"><P>Overridden paint() Method</P>
</B></I></FONT><P>The overridden <B>paint()</B> method appears as shown in the following code fragment:</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public void paint(<B>Graphics</B> screen) {&nbsp;
&nbsp;&nbsp;&nbsp; screen.drawString("Hello World",50,25);
&nbsp; }</PRE></TD>
</TR>
</TABLE>

<P>Without going into detail at this point, the <B>paint()</B> method receives a reference to an object of type <B>Graphics</B>.</P>
<P>This reference is known locally by the name <B>screen</B>.</P>
<P>The <B>Graphics</B> class provides a method named <B>drawString()</B> that is used to "draw" a text string onto the <B>Graphics</B> object at a specified location.</P>
<P>In this case, the <B>Graphics</B> object represents the computer's screen. That isn't always the case, but the exceptions are too advanced for an introductory course in Java.</P>
<P>In this case, the string <B>Hello World</B> is drawn onto the <B>Graphics</B> object (and hence the screen) at a location of 50 pixels to the right and 25 pixels down from the top left-hand corner of the screen space occupied by the applet.</P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Where Are These Methods Defined?</P>
</I></FONT><P>init</B> and <B>start</B> are methods of the Applet class. </P>
<B><P>paint</B> is a method of the <B>component</B> class that is inherited by several intermediate classes and is finally inherited by the <B>Applet</B> class. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Why Override the Methods?</P>
</B></I></FONT><P>There are some complex issues surrounding the overriding and use of these methods that will be discussed in subsequent lessons. Since this lesson is simply a brief introduction to applets, these issues will not be discussed further here. </P>
<P><!-prev=Java018f.htm-><!-next=Java018h.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="abriefwordaboutthehtmlpage">A Brief Word about the HTML Page</A></H2>
</FONT><B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Where Does HTML come Into the Picture?</P>
</B></I></FONT><P>Applets are intended to be included in HTML pages and downloaded from a Web site to a client computer. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>What is an &lt;APPLET&gt; Tag?</P>
</B></I></FONT><P>You use the HTML <B>&lt;APPLET&gt;</B> tag to specify the location of the applet subclass (controlling class) and the dimensions of the onscreen display area. </P>
<P>When the <B>&lt;APPLET&gt;</B> tag is encountered by a Java-capable browser, (or the AppletViewer program) it</P>

<UL>
<U><LI>reserves</U> screen space, </LI>
<U><LI>loads</U> the specified subclass file, and </LI>
<U><LI>instantiates</U> an object of the subclass. </LI></UL>

<P>It then invokes one of the three methods listed above for the object causing the Applet to execute. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>These are Not Class Methods</P>
</B></I></FONT><P>Unlike <B>main()</B>, the methods named <B>init(), start()</B> and <B>paint()</B> are not <I>class</I> methods.</P>
<P>Therefore they cannot be invoked simply by joining the name of the method with the name of a class. </P>
<P>These are <I>instance</I> methods and an object is required to invoke them. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Creating HTML Files</P>
</B></I></FONT><P>Instructions for creating simple HTML files can be obtained from a variety of sources, including several online locations on the Web. You can find links to hundreds of HTML resources at <A HREF="http://html.about.com/">http://html.about.com/</A>.</P>
<P>(In fact, you can find hundreds of links to hundreds of different topics at <A HREF="http://about.com/">http://about.com/</A>.)</P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>A Sample HTML File</P>
</B></I></FONT><P>There is no intention of providing a detailed discussion of HTML in this course of study. However, a minimum knowledge of HTML is required to work with applets. A sample HTML document that can be used to execute this Applet with the <I>Applet Viewer </I>or a Java-capable browser is shown below. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Appearance and Behavior of Applet</P>
</B></I></FONT><P>As a word of caution, in some cases, the appearance and behavior of your applet will not be exactly the same when viewed with the AppletViewer and when viewed with a Java-capable browsers. Always test your applets using one or more browsers before publishing them on your Web page (the appearance and behavior may differ between different browsers as well). <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;title&gt;Hello World Applet&lt;/title&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;applet code="hello3.class" width=300 height=100&gt;
&lt;/applet&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE></TD>
</TR>
</TABLE>

<P><!-prev=Java018g.htm-><!-next=Java018i.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="runningappletsinstandalonemode">Running Applets in Standalone Mode</A></H2>
</FONT><P>Earlier in this lesson I made the following statement: </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>In some ways, when a graphical user interface is needed, applet programming is easier than application programming.</TD>
</TR>
</TABLE>

<P>I am now going to show you what I meant by that statement. </P>
<P>The programs for most applets can be written so that can be run </P>

<UL>
<LI>under control of a Java-capable browser, </LI>
<LI>under control of the AppletViewer program, or </LI>
<LI>in a standalone mode. </LI></UL>

<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>Providing a Place for the Applet to Run</P>
</B></I></FONT><P>For simple applets, all that is required to run an applet in a standalone mode is to provide a place for the applet to run (recall that the browser normally provides the place for it to run). Some additional code is required to provide that place when running the applet in a standalone mode. </P>
<B><I><FONT FACE="Arial" COLOR="#ff0000"><P>A main() Method in an Applet</P>
</B></I></FONT><P>Although an applet doesn't require a <B>main()</B> method, there is no harm in providing one. If you provide an appropriate <B>main()</B> method, it can be invoked by the JVM to run the applet in a standalone mode. Unfortunately, the complexity of the <B>main()</B> method goes beyond what we have covered so far and it will be awhile before we cover enough material that you will be able to understand most of what you see in the following <B>main()</B> method. In fact, most of this material is not covered until the Intermediate Java Programming course.</P>
<P><!-prev=Java018h.htm-><!-next=Java018j.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="sampleprogram">Sample Program</A></H2>
</FONT><P>The following program will run </P>

<UL>
<LI>under control of a Java-capable browser (compatible with JDK 1.1.3 or later), </LI>
<LI>under control of the AppletViewer program, or </LI>
<LI>under control of the standalone JVM. </LI></UL>

<P>The comments pretty well explain what is going on. However, since we haven't covered any of the material involving the graphical user interface (<B>Frame</B>, etc.), we won't discuss it in detail at this point. This program is provided simply to alert you to the possible dual nature of applet programs. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*Applet program hello4.java
This program illustrates that simple applets can run
in a standalone mode as well as inside a browser or
under the AppletViewer program.

This is a Java applet which produces the same output as&nbsp;
the applet named hello3, except that this program is
capable of running either under AppletViewer or&nbsp;
standalone.

A main method is provided to support the running of the
applet in the standalone mode.

This program was tested using JDK 1.1.3 under Win95
*/
import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class hello4 extends Applet {
&nbsp; public void paint(Graphics screen) {
&nbsp;&nbsp;&nbsp; screen.drawString("Hello World",50,25);
&nbsp; }//end paint()
&nbsp;&nbsp;
&nbsp; //<B>Provide a main method</B> that can be used to run the
&nbsp; // applet in a standalone mode.&nbsp;&nbsp;
&nbsp; public static void <B>main</B>(String[] args){
&nbsp;&nbsp;&nbsp; //Create a Frame for the applet to run in
&nbsp;&nbsp;&nbsp; <B>Frame </B>myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setSize(300,100);
&nbsp;&nbsp;&nbsp; //Instantiate a hello4 applet object.
&nbsp;&nbsp;&nbsp; Applet myApplet = new hello4();
&nbsp;&nbsp;&nbsp; //Add the applet object to the Frame object&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(myApplet);
&nbsp;&nbsp;&nbsp; //Make the whole thing visible&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //This code will terminate the program when the
&nbsp;&nbsp;&nbsp; // user clicks the close button on the Frame
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);}});
&nbsp; }//end main
} //End hello4 class.</PRE></TD>
</TR>
</TABLE>

<P>The following html file can be used to run this program under the AppletViewer program. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;title&gt;Hello World Applet&lt;/title&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;

&lt;applet code="hello4.class" width=300 height=100&gt;
&lt;/applet&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE></TD>
</TR>
</TABLE>

<P><!-prev=Java018i.htm-><!-next=Java018k.htm><!-first=Java018.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="review">Review Questions for Lesson 18</A></H2>
</FONT><P>Q - Applets are designed to be executed in a stand-alone mode: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. Applets are designed to be downloaded and executed on-line under control of a browser.</FONT> </P>
<P>Q - The overall functionality of applets is restricted relative to applications: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True. Because applets are designed to be downloaded and executed on-line, special security procedures are implemented and applet functionality is restricted in an attempt to prevent downloaded applets from damaging your computer or your data.</FONT> </P>
<P>Q - Both applications and applets require a <B>main</B> method to be defined in the <I>controlling </I>class: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. An <B>Applet</B> does not require a <B>main</B> method.</FONT> </P>
<P>Q - In Java, new classes can be defined by <I>extending</I> existing classes. This is an example of <I>encapsulation, inheritance, </I>or <I>polymorphism </I>- pick one. </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - Inheritance</FONT> </P>
<P>Q - When a new class extends an existing class, all the variables and methods that are members of the immediate superclass (but none of its ancestors) become members of the new subclass: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. When a new class extends an existing class, all the variables and methods which are members of the superclass (and which are members of <U>all the ancestors</U> of the superclass) become members of the new subclass.</FONT> </P>
<P>Q - In the event that the behavior specified by a method of a superclass is not appropriate for objects of the new type defined by the subclass, it is possible to rewrite the method in the subclass to cause it to impart different behavior for objects of the subclass type. What is the common name for this process, and is it more closely associated with <I>encapsulation, inheritance</I>, or <I>polymorphism.</I> </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - The common name is <I>method overriding</I> (as distinguished from method overloading). The result of method overriding is <I>runtime polymoprhism</I>.</FONT> </P>
<P>Q - All that is required to override a method in Java is to use the same name, modify the <I>method signature</I> in the subclass and then provide a different body for the method: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False: All that is required to override a method in Java is to use the <U>same </U><I>method signature</I> (which includes the name and the argument list) in the subclass and then provide a different body for the method.</FONT> </P>
<P>Q - In Java, all classes automatically derive from a superclass named <B>Object</B>: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. In Java, all classes automatically derive from a superclass named <B>Object</B> <U>or from a direct or indirect subclass</U> of <B>Object</B>. That is to say, all classes in Java form a hierarchical pyramid with the <B>Object</B> class at the top of the pyramid.</FONT> </P>
<P>Q - The <B>Object</B> class is prohibited from defining methods to be inherited by direct and indirect subclasses: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False: The <B>Object</B> class defines a number of methods that are inherited by and are available to all direct or indirect subclasses of the <B>Object</B> class.</FONT> </P>
<P>Q - To write an applet, you need to extend <B>Object</B>: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. To write an applet, you need to extend the <B>Applet</B> class.</FONT> </P>
<P>Q - Whenever you define a new class, it is a subclass of <B>Object</B> by default: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True</FONT> </P>
<P>Q - In Java, you can either use inherited methods as is, or you can modify their behavior to better suit the needs of your new types: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True</FONT> </P>
<P>Q - Modifying inherited methods to make them more suitable for the new types that you define is commonly known as overloading methods: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. This is commonly known as <U>overriding </U>methods. Overloading methods is something entirely different.</FONT> </P>
<P>Q - Name two different ways to execute a Java applet. </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - Run it under control of a Java-compatible browser program, or run it under control of the <B>AppletViewer</B> program which is a standard part of the JDK.</FONT> </P>
<P>Q - Running an applet under a browser requires the use of an HTML file, but no such file is required to use the AppletViewer program: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. In both cases, it is necessary to produce an HTML file containing tags that reference the applet.</FONT> </P>
<P>Q - Write an applet and an associated HTML file that displays your name on the screen. Do not use <B>import</B> statements. </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - The applet follows:</P>
</FONT><FONT COLOR="#0000ff"><PRE>/*Applet program Name02.java
This is a Java applet that displays a name.
*/

public class Name02 extends java.applet.Applet {
&nbsp; //override the paint method
&nbsp; public void paint(java.awt.Graphics screen) {&nbsp;
&nbsp;&nbsp;&nbsp; screen.drawString("Dick Baldwin",50,25);
&nbsp; }//end overridden paint() method
} //End Name02 class.</PRE>
</FONT><FONT SIZE=2 COLOR="#0000ff"><P>The HTML file follows:</P>
</FONT><FONT COLOR="#0000ff"><PRE>&lt;HTML&gt;
&lt;HEAD&gt;
&lt;title&gt;Name Display Applet&lt;/title&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
&lt;applet code="Name02.class" width=300 height=100&gt;
&lt;/applet&gt;
&lt;/BODY&gt;
&lt;/HTML&gt;</PRE>
</FONT><P>Q - Import statements are an absolute requirement for any Java program that needs classes which are not automatically imported when a program is compiled: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False: <B>import</B> statements are a convenience to the programmer making it possible to refer to the classes without the requirement to provide a <I>fully qualified name </I>for every class.</FONT> </P>
<P>Q - As an alternative to importing individual classes, you can import entire packages using a wildcard character: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True. You can import entire packages using statements such as</FONT> </P>
<FONT COLOR="#0000ff"><TT><P>import java.applet.*;</FONT></TT> </P>
<P>Q - Importing entire packages will cause the application or applet to execute more slowly: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. This may slow down compilation but will have no detrimental impact at runtime.</FONT> </P>
<P>Q - All classes are in packages, either the package specified when the class is defined, or in the <I>default</I> package: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True</FONT> </P>
<P>Q - All of the classes within a package must use fully qualified names to refer to each other: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False: All of the classes <U>within a package</U> can refer to each other <U>without</U> using <I>fully qualified names</I>.</FONT> </P>
<P>Q - Every applet <U>must</U> inherit a subclass from the <B>Applet</B> class by <I>extending</I> the <B>Applet</B> class: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True</FONT> </P>
<P>Q - The subclass of the <B>Applet</B> class need not be defined as public: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False: The <B>subclass</B> of the <B>Applet</B> class <U>must</U> be defined as <B>public</B>.</FONT> </P>
<P>Q - Instead of having a <B>main</B> method, Applets may override one of the following methods: True or False? </P>

<UL>
<B><LI>init()</B> </LI>
<B><LI>start()</B> </LI>
<B><LI>paint().</LI></UL>

</B><FONT SIZE=2 COLOR="#0000ff"><P>A - True. Applets do <U>not</U> need a <B>main</B> method. However, they must override at least one of the following methods:</P>

<UL>
<B><LI>init()</B></FONT> </LI>
<B><FONT SIZE=2 COLOR="#0000ff"><LI>start()</B></FONT> </LI>
<B><FONT SIZE=2 COLOR="#0000ff"><LI>paint().</LI></UL>

</B></FONT><P>Q<B> - init, start</B> and <B>paint</B> are all methods of the <B>Applet </B>class: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A<B> - </B>False.<B> init</B> and <B>start</B> are methods of the <B>Applet </B>class. <B>paint</B> is a method of the <B>component</B> class that is inherited by several intermediate classes and is finally inherited by the <B>Applet </B>class.</FONT> </P>
<P>Q - To download an applet from a Web site to a client computer, you use the HTML <B>&lt;APPLET&gt;</B> tag to specify the location of the applet subclass and the dimensions of the onscreen display area: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True</FONT> </P>
<P>Q - When the <B>&lt;APPLET&gt;</B> tag is encountered by a Java-capable browser, it <U>reserves</U> screen space, <U>loads</U> the specified subclass file onto the computer, and <U>instantiates</U> an object of the subclass. It then invokes one of the three methods listed above for the object causing the Applet to execute: True or False? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True</FONT> </P>
<P>Q - Write a Java application that meets the following specifications: <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*Applet program SampProg03.java from lesson 18
Copyright 1997, R.G.Baldwin
Without reviewing the following solution, write a 
Java applet that will display your name in a small 
rectangle within a browser. Write a corresponding 
html file and run the applet from within a browser.
**********************************************************/
import java.applet.Applet;
import java.awt.Graphics;

public class SampProg03 extends Applet {
&nbsp; public void paint(Graphics screen) {
&nbsp;&nbsp;&nbsp; screen.drawString("Dick Baldwin",50,25);
&nbsp; }
} //End SampProg03 class.</PRE></TD>
</TR>
</TABLE>

<P><!-prev=Java018j.htm-><!-first=Java018.htm-></P>
<P>-end-<!--end--></P></BODY>
</HTML>
