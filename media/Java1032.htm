<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Glue, Struts, and BoxLayout</h2></center>
<b><i>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1032
<p>November 6, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures and listings while you are reading about
them.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In an earlier lesson entitled <a href="Java1030.htm">Alignment Properties
and BoxLayout, Part 1</a>, I recommended a list of my earlier Swing tutorials
for you to study prior to embarking on a study of this set of lessons.
<p><b><font color="#FF0000">Where are they located?</font></b>
<p>You will find those lessons published at Gamelan.com.&nbsp; I also maintain
a consolidated Table of Contents at
<i>Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><font color="#000000">The Table of Contents on my site provides links
to each of the lessons at Gamelan.com.</font>
<p>The lessons identified on that list will introduce you to the use of
Swing while avoiding much of the detail included in this series.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">The BoxLayout manager</font></b>
<p><font color="#000000">Also, in the earlier lesson entitled <a href="Java1030.htm">Alignment
Properties and BoxLayout, Part 1</a>, I introduced you to the <b>Box</b>
container and the <b>BoxLayout</b> manager.</font>
<p><font color="#000000">In the previous lesson entitled <a href="Java1031.htm">Alignment
Properties and BoxLayout, Part 2</a>, I promised you that this lesson would
deal with <i>glue</i> and <i>struts</i>.</font><font color="#000000"></font>
<p><b><font color="#FF0000">Preview</font></b><font color="#000000"></font>
<p>In this lesson, I will refresh your memory on how to use a <b>Box</b>
container with its default <b>BoxLayout</b> manager.
<p>I will also show you how to place components on the horizontal axis,
and how to insert glue and struts between the components so as to produce
the behavior for which the glue and strut components are intended.
<p><b><font color="#FF0000">What are glue and struts?</font></b>
<p><font color="#000000">The first thing that I want to do is to show you
an example of glue and struts in action.&nbsp; Let's begin with the screen
shot shown in Figure 1.</font>
<center>
<p><img SRC="Java1032a.gif" height=89 width=262>
<p><font color="#000000">Figure 1 An Example of Glue and Struts</font></center>
<font color="#000000"></font>
<p><font color="#000000">The screen shot in Figure 1 shows three buttons
and two labels placed in a <b>Box</b> container using <b>BoxLayout</b>
as the layout manager.</font>
<p><b><font color="#FF0000">Invisible components</font></b>
<p><font color="#000000">Although it isn't obvious in Figure 1, the container
also contains four invisible strut components and two invisible glue components.&nbsp;
These invisible components are used to separate the buttons and the labels
that you can see.&nbsp; Each of the invisible strut components has a width
of three pixels.</font>
<p><b><font color="#FF0000">Where are the invisible components hiding?</font></b>
<p><font color="#000000">The type and position of the components from left
to right is:</font>
<p><font color="#000000"><font size=-1>button, glue, strut, label, strut,
button, strut, label, strut, glue, button</font></font>
<p><font color="#000000">As you can see, the glue and strut components,
when present, separate the button and label components.</font>
<p><b><font color="#FF0000">Is the order important?</font></b>
<p><font color="#000000">The locations of the glue and strut components
relative to the buttons and labels is very important.</font>
<p><font color="#000000">However, the order in which the glue and strut
components occur relative to each other is not important.&nbsp; In fact,
they <i>appear</i> to occupy the same physical space regardless of the
order in which you add them to the layout.&nbsp; <i>(This appearance is
an illusion.&nbsp; They don't really occupy the same physical space.&nbsp;
I will explain this in more detail in a subsequent lesson.)</i></font>
<p><b><font color="#FF0000">What is a strut component?</font></b>
<p><font color="#000000">You can think of a strut component as an invisible,
<i>non-compressible</i> component of a given size that you can insert between
two other components.&nbsp; It acts as an invisible spacer that prevents
the components from being pushed together.</font>
<p><b><font color="#FF0000">You can't see the wind either</font></b>
<p><font color="#000000">Just like the wind, you can't see a strut, but
you can see the result of having a strut in the screen shot shown in Figure
2.</font>
<p><b><font color="#FF0000">Try to push buttons and labels closer together</font></b>
<p><font color="#000000">This screen shot shows the result of manually
reducing the size of the <b>JFrame</b> in an attempt to push the button
and label components closer together.</font>
<p><font color="#000000">As you can see, the components refuse to be pushed
closer together.&nbsp; This is because they are separated from each other
by an invisible spacer component called a strut.</font>
<center>
<p><img SRC="Java1032c.gif" height=89 width=220>
<p>Figure 2 Illustration that Struts Keep Components Separated</center>

<p><b><font color="#FF0000">What is glue?</font></b>
<p><font color="#000000">Actually, glue is not a very good name for this
component.&nbsp; The name <i>spring</i> may have been more appropriate,
because the component tends to act like a spring.</font>
<p><b><font color="#FF0000">Glue can expand</font></b>
<p><font color="#000000">A glue component is a component that can expand
when needed to fill the space between two other components.</font>
<p><b><font color="#FF0000">Where is the glue?</font></b>
<p><font color="#000000">As I mentioned earlier, two glue components were
placed in the <b>Box</b> along with the other components.&nbsp; The two
glue components were placed between the label components and the buttons
on each end.</font>
<p><b><font color="#FF0000">How does glue behave?</font></b>
<p><font color="#000000">The screen shot in Figure 3 shows the effect of
the glue components when the user manually resizes the <b>JFrame</b> to
make it wider than its original size.</font>
<center>
<p><img SRC="Java1032b.gif" height=119 width=320>
<p>Figure 3 Illustration of the Effect of Glue Components</center>

<p><b><font color="#FF0000">Glue components got wider</font></b>
<p><font color="#000000">As you can see, the glue components separating
the buttons and the labels increased in width to fill the newly available
horizontal space.</font>
<p><font color="#000000">This allowed the button and label components to
retain their original size.</font>
<p><font color="#000000">It also allowed the center button (which was separated
from the two labels on either side by a strut but no glue) to maintain
its same position relative to those two labels.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
The program that produced the above screen shots is named <b>Swing16</b>.&nbsp;
This program illustrates the use of glue and struts.
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will break this program down and discuss it in fragments.&nbsp; A listing
of the entire program is provided in <font color="#000000">Listing 6</font>.
<p><b><font color="#FF0000">The controlling class</font></b>
<p><font color="#000000">Listing 1 shows the beginning of the controlling
class.&nbsp; Because the controlling class extends <b>JFrame</b>, an object
of the controlling class is a top-level GUI.</font>
<br><font color="#000000"></font>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>class <b>Swing16</b> extends <b>JFrame</b>{

&nbsp; public static void <b>main</b>(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing16();
&nbsp; }//end main()

<b>Listing 1</b></font></font></pre>
</td>
</tr>
</table>

<p><font color="#000000">Listing 1 also shows the main method, which instantiates
an object of the controlling class.</font>
<p><b><font color="#FF0000">Constructor uses a factory method</font></b>
<p>The constructor for the controlling class begins in <font color="#000000">Listing
2</font>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;
&nbsp; Swing16(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a new horizontal Box
&nbsp;&nbsp;&nbsp; // object.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Box aBox = Box.createHorizontalBox();

&nbsp;&nbsp;&nbsp; //Add the Box to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBox);

<b>Listing 2</b></font></font></pre>
</td>
</tr>
</table>

<p>The constructor invokes a factory method of the <b>Box</b> class to
cause a new <b>Box</b> object to be instantiated.
<p><b><font color="#FF0000">An alternative approach</font></b>
<p>As an alternative, I could have used the new operator, as in the following
expression, to instantiate the object.
<p><b><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>new
Box(BoxLayout.X_AXIS)</font></font></b>
<p><b><font color="#FF0000">BoxLayout with horizontal placement</font></b>
<p>Recall that the layout manager for a <b>Box</b> object is <b>BoxLayout</b>,
and it can't be changed.
<p>In this case, the layout manager was initialized to cause the components
to be arranged in a horizontal line.
<p><b><font color="#FF0000">First component on the left...</font></b>
<p>The first component added to the <b>Box</b> appears on the left end
of the line, and the last component added to the <b>Box</b> appears on
the right end of the line.
<p>In typical Swing fashion, the constructor also adds the <b>Box</b> object
to the content pane.
<p><b><font color="#FF0000">Need some green buttons</font></b>
<p>The code in <font color="#000000">Listing 3</font> simply instantiates
three green <b>JButton</b> objects.&nbsp; This is not particularly interesting.&nbsp;
It is shown here simply for the sake of continuity.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but1 = new <b>JButton</b>("but1");
&nbsp;&nbsp;&nbsp; but1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but2 = new <b>JButton</b>("but2");
&nbsp;&nbsp;&nbsp; but2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but3 = new <b>JButton</b>("but3");
&nbsp;&nbsp;&nbsp; but3.setBackground(Color.green);

<b>Listing 3</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">And some yellow labels...</font></b>
<p>The code in <font color="#000000">Listing 4</font> instantiates two
yellow <b>JLabel</b> objects.&nbsp; A <b>CompoundBorder</b> is used to
make the labels taller than the buttons.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel lab1 = new <b>JLabel</b>("lab1");
&nbsp;&nbsp;&nbsp; lab1.setBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CompoundBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EtchedBorder(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EmptyBorder(20,2,20,2)));
&nbsp;&nbsp;&nbsp; lab1.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab1.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel lab2 = new <b>JLabel</b>("lab2");
&nbsp;&nbsp;&nbsp; lab2.setBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CompoundBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EtchedBorder(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EmptyBorder(20,2,20,2)));
&nbsp;&nbsp;&nbsp; lab2.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab2.setOpaque(true);

<b>Listing 4</b></font></font></pre>
</td>
</tr>
</table>

<p>Again, there is nothing particularly interesting here.&nbsp; This code
fragment was included in the discussion for the sake of continuity.
<p><b><font color="#FF0000">The final construction</font></b>
<p>We have arrived at the code that illustrates the main purpose of this
lesson.
<p>The code in <font color="#000000">Listing 5</font> performs the final
construction of the GUI.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; aBox.add(but1);

&nbsp;&nbsp;&nbsp; aBox.add(Box.<b>createGlue</b>());
&nbsp;&nbsp;&nbsp; aBox.add(Box.<b>createHorizontalStrut</b>(3));

&nbsp;&nbsp;&nbsp; aBox.add(lab1);
&nbsp;&nbsp;&nbsp; aBox.add(Box.<b>createHorizontalStrut</b>(3));
&nbsp;&nbsp;&nbsp; aBox.add(but2);
&nbsp;&nbsp;&nbsp; aBox.add(Box.<b>createHorizontalStrut</b>(3));
&nbsp;&nbsp;&nbsp; aBox.add(lab2);
&nbsp;&nbsp;&nbsp; aBox.add(Box.<b>createHorizontalStrut</b>(3));
&nbsp;&nbsp;&nbsp; aBox.add(Box.<b>createGlue</b>());
&nbsp;&nbsp;&nbsp; aBox.add(but3);

<b>Listing 5</b></font></font></pre>
</td>
</tr>
</table>

<p>This is where the buttons and labels get added to the <b>Box</b>.
<p><b><font color="#FF0000">Now for the glue and struts</font></b>
<p>More importantly, this is where the glue and the struts get inserted
between the buttons and the labels.
<p>Strut components, each three pixels wide, are inserted between each
of the buttons and labels to keep them separated by three pixels.
<p>Glue components are inserted between the buttons on each end and their
neighboring labels.
<p><b><font color="#FF0000">Where is the Glue or Strut class or interface?</font></b>
<p>If you go to the documentation, you probably won't find classes or interfaces
named Glue or Strut.&nbsp; What you will find are the factory methods,
highlighted with boldface in <font color="#000000">Listing 5</font>, to
create and return references to these invisible components as type <b>Component</b>.
<p><b><font color="#FF0000">Add the glue and the strut components</font></b>
<p>These invisible components are created and added to the <b>Box</b> in
the appropriate order, by the code in <font color="#000000">Listing 5</font>,
to cause them to be inserted between the buttons and the labels as indicated
earlier in this lesson.
<p><b><font color="#FF0000">Remaining Code</font></b>
<p>The remaining code in the program is uninteresting, and therefore won't
be discussed further here.&nbsp; You can view all of the code in the program
in <font color="#000000">Listing 6</font>.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In this lesson, I have illustrated once again how to use a <b>Box</b> container
with its default <b>BoxLayout</b> manager.
<p>I showed you how to place components on the horizontal axis, and how
to insert glue and struts between the components so as to produce the behavior
shown in the earlier screen shot.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will discuss the use of <i>minimum</i>, <i>maximum</i>,
and <i>preferred</i> sizes with struts in <b>BoxLayout</b>.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <font color="#000000">Listing
6</font>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing16
Rev 3/30/00
Copyright 2000, R.G.Baldwin

Illustrates use of glue and struts to control
the separation between components.&nbsp; In order
to see the effect of using glue, you must
manually resize the JFrame object to make&nbsp;
it larger and smaller.

Tested using JDK 1.2.2 under WinNT 4.0 WkStn
********************************************/

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

class Swing16 extends JFrame{

&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing16();
&nbsp; }//end main()
&nbsp; //---------------------------------------//
&nbsp;&nbsp;
&nbsp; Swing16(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a new horizontal Box
&nbsp;&nbsp;&nbsp; // object.&nbsp; Could also use the&nbsp;
&nbsp;&nbsp;&nbsp; // constructor
&nbsp;&nbsp;&nbsp; // new Box(BoxLayout.X_AXIS);
&nbsp;&nbsp;&nbsp; Box aBox = Box.createHorizontalBox();

&nbsp;&nbsp;&nbsp; //Add the Box to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBox);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three JButton objects,
&nbsp;&nbsp;&nbsp; // make them green.
&nbsp;&nbsp;&nbsp; JButton but1 = new JButton("but1");
&nbsp;&nbsp;&nbsp; but1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but2 = new JButton("but2");
&nbsp;&nbsp;&nbsp; but2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but3 = new JButton("but3");
&nbsp;&nbsp;&nbsp; but3.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two JLabel objects&nbsp; Use a
&nbsp;&nbsp;&nbsp; // compound border to make them taller
&nbsp;&nbsp;&nbsp; // than the buttons.&nbsp; Color them yellow.
&nbsp;&nbsp;&nbsp; JLabel lab1 = new JLabel("lab1");
&nbsp;&nbsp;&nbsp; lab1.setBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CompoundBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EtchedBorder(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EmptyBorder(20,2,20,2)));
&nbsp;&nbsp;&nbsp; lab1.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab1.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel lab2 = new JLabel("lab2");
&nbsp;&nbsp;&nbsp; lab2.setBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CompoundBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EtchedBorder(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EmptyBorder(20,2,20,2)));
&nbsp;&nbsp;&nbsp; lab2.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab2.setOpaque(true);

&nbsp;&nbsp;&nbsp; //Add the buttons and the labels to the
&nbsp;&nbsp;&nbsp; // Box.&nbsp; Insert glue between the labels
&nbsp;&nbsp;&nbsp; // and the buttons on each end.&nbsp; Insert
&nbsp;&nbsp;&nbsp; // horizontal struts between each of the&nbsp;
&nbsp;&nbsp;&nbsp; // components to control the minimum
&nbsp;&nbsp;&nbsp; // spacing between them.
&nbsp;&nbsp;&nbsp; aBox.add(but1);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createGlue());
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(3));
&nbsp;&nbsp;&nbsp; aBox.add(lab1);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(3));
&nbsp;&nbsp;&nbsp; aBox.add(but2);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(3));
&nbsp;&nbsp;&nbsp; aBox.add(lab2);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(3));
&nbsp;&nbsp;&nbsp; aBox.add(Box.createGlue());
&nbsp;&nbsp;&nbsp; aBox.add(but3);

&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; //Pack the JFrame down around the&nbsp;
&nbsp;&nbsp;&nbsp; // components
&nbsp;&nbsp;&nbsp; pack();
&nbsp;&nbsp;&nbsp; setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
&nbsp;&nbsp;
}//end class Swing16

<b>Listing 6</b></font></font></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
