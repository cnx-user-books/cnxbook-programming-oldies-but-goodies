<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Minimum, Maximum, and Preferred Sizes</h2></center>
<b><i>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1033
<p>November 20, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures and listings while you are reading about
them.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In an earlier lesson entitled <a href="Java1030.htm">Alignment Properties
and BoxLayout, Part 1</a>, I recommended a list of my earlier Swing tutorials
for you to study prior to embarking on a study of this set of lessons.
<p><b><font color="#FF0000">Where are they located?</font></b>
<p>You will find those lessons published at Gamelan.com.&nbsp; I also maintain
a consolidated Table of Contents at
<i>Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><font color="#000000">The Table of Contents on my site provides links
to each of the lessons at Gamelan.com.</font>
<p>The lessons identified on that list will introduce you to the use of
Swing while avoiding much of the detail included in this series.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<font color="#000000">Also, in the same earlier lesson, I introduced you
to the <b>Box</b> container and the <b>BoxLayout</b> manager.&nbsp; I will
use both of them in the sample program in this lesson.</font>
<p><font color="#000000">In the previous lesson entitled <a href="Java1032.htm">Glue,
Struts, and BoxLayout</a>, I promised you that this lesson would deal with
<i>minimum</i>,
<i>maximum</i>, and <i>preferred</i> sizes.</font><font color="#000000"></font>
<p><b><font color="#FF0000">Preview</font></b><font color="#000000"></font>
<p>Every component that extends <b>JComponent</b> has the following three
properties:
<ul>
<li>
preferredSize</li>

<li>
minimumSize</li>

<li>
maximumSize</li>
</ul>
Different layout managers behave differently with respect to these three
properties.
<p>In this lesson, I will show you how to control the values of these three
properties.&nbsp; I will also show you how a <b>BoxLayout</b> behaves with
respect to these properties when the physical size of the container is
changed.
<p><b><font color="#FF0000">What are minimum, maximum, and preferred sizes?</font></b>
<p>All components that extend <b>JComponent</b> inherit the three properties
listed above.
<p>The <b>JComponent</b> class provides setter and getter methods for all
three of these properties.&nbsp; <i>(This is a major improvement over the
original AWT, which treated them as read-only properties.)</i>
<p><b><font color="#FF0000">Why do we need them?</font></b>
<p><font color="#000000">These three properties are needed to support the
use of layout managers.</font>
<p><font color="#000000">Whenever a user (or the program code) resizes
a container that contains one or more components, the layout manager may
need to change the size of some of the components.</font>
<p><font color="#000000">These three properties are intended to be used
by layout managers to make changes in component sizes somewhat in accordance
with
the wishes of the programmer.</font>
<p><b><font color="#FF0000">How are the size properties maintained?</font></b>
<p><font color="#000000">The three size properties are all maintained as
objects of the class <b>Dimension</b>.</font>
<p><b><font color="#FF0000">What is a Dimension object?</font></b>
<p><font color="#000000">An object of the <b>Dimension</b> class is a container
for two public instance variables named <b>width</b> and <b>height</b>.&nbsp;
These variables are both defined as type <b>int</b>.</font>
<p><font color="#000000">According to Sun:</font>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#66FFFF" >
<tr>
<td>The Dimension class encapsulates the width and height of a component
(in integer precision) in a single object.&nbsp; The class is associated
with certain properties of components. Several methods defined by the Component
class and the LayoutManager interface return a Dimension object.&nbsp;</td>
</tr>
</table>

<p><b><font color="#FF0000">How are they accessed?</font></b>
<p><font color="#000000">Because <b>width</b> and <b>height</b> are public,
they can be accessed directly without the requirement to use an accessor
method, such as <b>getWidth()</b>.</font>
<p><font color="#000000">In addition, setter and getter methods are available
for both <b>width</b> and <b>height</b>.&nbsp; Interestingly, the setter
and getter methods take or return <b>double</b> values, and apparently
provide automatic conversion between <b>double</b> and <b>int </b>on the
fly.</font>
<p><b><font color="#FF0000">Are the size properties always honored?</font></b>
<p><font color="#000000">Some layout managers, such as <b>GridLayout</b>,
completely ignore the size properties.</font>
<p><font color="#000000"><b>FlowLayout</b>, attempts to honor both dimensions
of <b>preferredSize</b>, and possibly has no need to honor either <b>minimumSize</b>
or <b>maximumSize</b>.</font>
<p><font color="#000000">Other layout managers fall somewhere in between.</font>
<p><b><font color="#FF0000">What about BorderLayout?</font></b>
<p><font color="#000000">For example, <b>BorderLayout</b></font>
<ul>
<li>
<font color="#000000">Ignores the <b>width</b> dimension of <b>preferredSize</b>
for North and South components.</font></li>

<li>
<font color="#000000">Ignores the <b>height</b> dimension of <b>preferredSize
</b>for
East and West components.</font></li>

<li>
<font color="#000000">Ignores both dimensions of <b>preferredSize </b>for
Center components.</font></li>
</ul>
<font color="#000000">Apparently <b>BorderLayout</b> also ignores both
dimensions of <b>minimumSize</b> and <b>maximumSize</b> in all cases.</font>
<p><b><font color="#FF0000">BoxLayout</font></b>
<p><font color="#000000">As we will see in this lesson, <b>BoxLayout</b>
honors the width dimension of all three properties for components placed
on a horizontal line.</font>
<p><b><font color="#FF0000">Must the size properties always be set?</font></b>
<p><font color="#000000">Every component has default values for all three
of the size properties.&nbsp; It is not necessary for you to set them if
you are satisfied with the default values.&nbsp; The manner in which the
default values are determined varies from one component to another.</font>
<p><b><font color="#FF0000">An example of a default value</font></b>
<p><font color="#000000">For example, the default value for <b>preferredSize</b>
for a given component, is usually a size that provides a visually pleasing
component.</font>
<p><font color="#000000">For those components that have a text caption,
such as
<b>JButton</b> and <b>JLabel</b>, the default preferred size is
based on the size required to properly display the text caption in the
current font.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
This sample program, named <b>Swing17</b> illustrates the use and manipulation
of the width dimension of the <b>preferredSize</b>, <b>minimumSize</b>,
and <b>maximumSize</b> properties.
<p>Figure 1 shows three <b>JLabel</b> components placed on a horizontal
line in a <b>BoxLayout</b> in a <b>JFrame</b>.
<center>
<p><img SRC="Java1033a.gif" height=45 width=269>
<p><font color="#000000">Figure 1 A Screen Shot Showing Three JLabel Components
in a BoxLayout in a JFrame</font></center>

<p><i>(As mentioned in the earlier viewing tip, you may find it useful
to open another copy of this lesson in a separate browser window so that
you can easily view the screen shots while reading about them)</i>
<p><b><font color="#FF0000">Separated by ten-pixel struts</font></b>
<p>The three components are separated from each other and from the ends
of the frame by struts.&nbsp; Each, strut is ten pixels wide.
<p>Figure 1 shows what this GUI looks like when it first appears on the
screen, before it is manually resized.
<p><b><font color="#FF0000">preferredSize for component1</font></b>
<p>The left-most component (<b>component1</b>) has the width dimension
of its
<b>preferredSize</b> property set to 1.1 times the default preferred
width.
<p>As you can see in Figure 1, this causes a small amount of blank green
space to appear to the right of the caption on the component.&nbsp; <i>(Note
that the preferredSize property for the other two components was not modified.&nbsp;
Hence, they don't exhibit any blank green space.)</i>
<p><b><font color="#FF0000">What about minimumSize and maximumSize?</font></b>
<p>The width dimensions of the <b>minimumSize</b> and <b>maximumSize</b>
properties for <b>component1</b> were set equal to the modified preferred
size.&nbsp; Therefore, the size of <b>component1</b> doesn't change when
the user resizes the <b>JFrame</b>.
<p><b><font color="#FF0000">minimumSize for other two components</font></b>
<p>The two right-most components (<b>component2</b> and <b>component3</b>)
have the <b>width</b> dimension of their <b>minimumSize</b> property set
to 0.6 times the preferred width of <b>component1</b>.
<p><b><font color="#FF0000">maximumSize for other two components</font></b>
<p>The <b>width</b> dimension of the <b>maximumSize</b> property for the
other two components was set to 1.2 times the preferred width of <b>component1</b>.
<p><b><font color="#FF0000">Expand the JFrame</font></b>
<p><font color="#000000">The screen shot entitled Figure 2 shows what happens
if you m</font>anually expand the size of the <b>JFrame</b>.
<center>
<p><img SRC="Java1033b.gif" height=46 width=310><b><font face="Courier New,Courier"><font color="#000000"><font size=-1></font></font></font></b>
<p><font color="#000000">Figure 2 The result of manually expanding the
JFrame from Figure 1.</font></center>

<p>The width of
<b>component1</b> (the <b>JLabel</b> on the left in Figure
2) doesn't change when the <b>JFrame</b> is manually expanded.&nbsp; This
is because its maximum width was set equal to its preferred width.
<p><b><font color="#FF0000">What about the other two components?</font></b>
<p>However, the width of each of the two right-most components increases
up to its maximum size.&nbsp; This is evidenced by the fact that these
two components now show more blank green space than the blank green space
shown by <b>component1</b>.&nbsp; <i>(Recall that originally component2
and component3 didn't show any blank green space.)</i>
<p><b><font color="#FF0000">What happens if you continue expanding?</font></b>
<p>Figure 3 shows that continuing to increase the width of the <b>JFrame</b>
doesn't cause the widths of any of the three components to increase after
they reach their maximum width.&nbsp; This is evidenced by the increase
in the blank gray space on the right end of Figure 3.
<center>
<p><img SRC="Java1033c.gif" height=46 width=336><b><font face="Courier New,Courier"><font color="#000000"><font size=-1></font></font></font></b>
<p><font color="#000000">Figure 3 The Result of Expanding the JFrame Even
Further</font></center>

<p><b><font color="#FF0000">What if you decrease the width?</font></b>
<p><font color="#000000">Figure 4 shows what happens if you m</font>anually
decrease the width of the <b>JFrame</b>.
<center>
<p><img SRC="Java1033d.gif" height=43 width=227><b><font face="Courier New,Courier"><font color="#000000"><font size=-1></font></font></font></b>
<p><font color="#000000">Figure 4 The Result of Manually Decreasing the
Width of the JFrame</font></center>

<p>As you can see, this causes the two right-most components to decrease
in width.&nbsp; In fact, the decrease makes it impossible for these two
components to display their captions, so Swing automatically changes the
displayed caption to make it end with <b>...</b>
<p>This decrease in width was allowed because of the value previously set
for the <b>minimumSize</b> properties for these two components (0.6 times
the preferred width of component1).
<p>However, the left-most component (<b>component1</b>) doesn't decrease
in width, because its minimum width was set to be the same as its preferred
width.
<p><b><font color="#FF0000">Is minimum width <i>really</i> minimum width?</font></b>
<p>Figure 5 shows that if you continue to decrease the width of the <b>JFrame</b>,
none of the components decrease in width after they hit the width specified
by the <b>width</b> dimension of their <b>minimumSize</b> property.
<center>
<p><img SRC="Java1033e.gif" height=46 width=195><b><font face="Courier New,Courier"><font color="#000000"><font size=-1></font></font></font></b>
<p><font color="#000000">Figure 5 The Result of Manually Decreasing the
Width of the JFrame Even Further</font></center>

<p>As shown in Figure 5, once all three components hit their minimum widths,
the right-most component gets clipped by the edge of the <b>JFrame</b>.&nbsp;
This occurs when the <b>JFrame</b> is no longer wide enough to accommodate
all three components at their minimum widths.
<p><font color="#000000">Finally, Figure 6 shows that as you continue to
decrease the width of the <b>JFrame</b>, after</font> the right-most component
disappears, the middle component gets clipped.
<center>
<p><img SRC="Java1033f.gif" height=46 width=139><b><font face="Courier New,Courier"><font color="#000000"><font size=-1></font></font></font></b>
<p><font color="#000000">Figure 6 The Result of Manually Decreasing the
Width of the JFrame Even Further</font></center>

<p><b><font color="#FF0000">The width of the struts does not decrease</font></b>
<p>Note that the space between the components defined by the struts does
not decrease.
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will break this program down and discuss it in fragments.&nbsp; A listing
of the entire program is provided in <font color="#000000">Listing 7</font>.
<p><b><font color="#FF0000">The controlling class</font></b>
<p><font color="#000000">Listing 1 shows the beginning of the controlling
class and the <b>main()</b> method.&nbsp; You have seen code like this
in several previous lessons.&nbsp; Therefore, I won't discuss it further
here.</font>
<br><font color="#000000"></font>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>class <b>Swing17</b> extends JFrame{&nbsp;

&nbsp; public static void <b>main</b>(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing17();
&nbsp; }//end main()

<b>Listing 1</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The constructor</font></b>
<p><font color="#000000">The beginning of the constructor is shown in Listing
2.&nbsp; By now, this is also plain vanilla code.&nbsp; I won't discuss
it further.&nbsp; I will simply let the comments speak for themselves.</font>
<br><font color="#000000"></font>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;
&nbsp; Swing17(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a new horizontal Box
&nbsp;&nbsp;&nbsp; // object.
&nbsp;&nbsp;&nbsp; Box aBox = Box.createHorizontalBox();

&nbsp;&nbsp;&nbsp; //Add the Box to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBox);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three JLabel objects,
&nbsp;&nbsp;&nbsp; // make them green.
&nbsp;&nbsp;&nbsp; JLabel component1 =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JLabel("component1");
&nbsp;&nbsp;&nbsp; component1.setOpaque(true);
&nbsp;&nbsp;&nbsp; component1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel component2 =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JLabel("component2");
&nbsp;&nbsp;&nbsp; component2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; component2.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel component3 =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JLabel("component3");
&nbsp;&nbsp;&nbsp; component3.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; component3.setOpaque(true);

<b>Listing 2</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Modify the preferredSize property</font></b>
<p><font color="#000000">The code to modify the value of the <b>preferredSize</b>
property is shown in Listing 3.&nbsp; This is the beginning of the code
that is new to this lesson.</font>
<br><font color="#000000"></font>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Get and modify the preferred size of
&nbsp;&nbsp;&nbsp; // component1
&nbsp;&nbsp;&nbsp; Dimension preferredSize =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; component1.<b>getPreferredSize()</b>;
&nbsp;&nbsp;&nbsp; preferredSize.width =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)<b>(preferredSize.width*1.1);
</b>&nbsp;&nbsp;&nbsp; component1.<b>setPreferredSize</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; preferredSize);

<b>Listing 3</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Invoke getPreferredSize()</font></b>
<p><font color="#000000">The code begins by invoking the <b>getPreferredSize()</b>
method on the reference to the <b>JLabel</b> object.&nbsp; The reference
to the <b>Dimension</b> object that is returned is stored in the variable
named <b>preferredSize</b>.&nbsp; <i>(I did it this way because I wanted
to take advantage of the default preferred size in setting a new value
for the preferred size.&nbsp; In other words, I didn't want to have to
start from ground zero in coming up with a new preferred size.)</i></font>
<p><b><font color="#FF0000">Change the width dimension</font></b>
<p><font color="#000000">The next step is to increase the value of the
instance variable named <b>width</b> in the <b>Dimension</b> object by
a factor of 1.1.</font>
<p><b><font color="#FF0000">Invoke setPreferredSize()</font></b>
<p><font color="#000000">The third step in Listing 3 is to invoke <b>setPreferredSize()</b>
on the <b>JLabel</b> component passing the modified <b>Dimension</b> object
as a parameter.</font>
<p><b><font color="#FF0000">A permanent change</font></b>
<p><font color="#000000">This causes a permanent change in the value of
the
<b>preferredSize</b> property for that component.</font>
<p><font color="#000000">This change is reflected in Figure 1 where the
width of the left-most component is about ten-percent greater than the
width required to display its caption.</font>
<p><b><font color="#FF0000">Calculate new values for other components</font></b>
<p><font color="#000000">The code in Listing 4 calculates values for the
minimum and maximum widths that will be used later for setting the <b>minimumSize</b>
and <b>maximumSize</b> properties for the other two components.&nbsp; <i>(Again,
I did it this way because I wanted to cause these property values to be
based on the preferred size of component1.)</i></font>
<br><i><font color="#000000"></font></i>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; Dimension minSize = new Dimension();
&nbsp;&nbsp;&nbsp; minSize.<b>width</b> =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)<b>(preferredSize.width*0.6)</b>;
&nbsp;&nbsp;&nbsp; minSize.<b>height</b> = <b>preferredSize.height;

</b>&nbsp;&nbsp;&nbsp; Dimension maxSize = new Dimension();
&nbsp;&nbsp;&nbsp; maxSize.width =&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(preferredSize.width*1.2);
&nbsp;&nbsp;&nbsp; maxSize.height = preferredSize.height;

<b>Listing 4</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">No surprises here</font></b>
<p><font color="#000000">Since you already know that <b>width</b> and <b>height</b>
are public instance variables of objects of the class <b>Dimension</b>,
you should find the code in Listing 4 to be completely straightforward.</font>
<p><b><font color="#FF0000">Invoke setMinimumSize() and setMaximumSize()</font></b>
<p><font color="#000000">The code in Listing 5 invokes the <b>setMinimumSize()
</b>and<b> setMaximumSize()</b> methods on each of the three objects to
set the <b>minimumSize</b> and <b>maximumSize</b> properties of the components
to the predetermined values.</font>
<br><font color="#000000"></font>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set minimum and maximum sizes for all
&nbsp;&nbsp;&nbsp; // three components.&nbsp; Cause all three to
&nbsp;&nbsp;&nbsp; // be the same for component1
&nbsp;&nbsp;&nbsp; component1.<b>setMinimumSize</b>(preferredSize);
&nbsp;&nbsp;&nbsp; component2.setMinimumSize(minSize);
&nbsp;&nbsp;&nbsp; component3.setMinimumSize(minSize);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; component1.<b>setMaximumSize</b>(preferredSize);
&nbsp;&nbsp;&nbsp; component2.setMaximumSize(maxSize);
&nbsp;&nbsp;&nbsp; component3.setMaximumSize(maxSize);

<b>Listing 5</b></font></font></pre>
</td>
</tr>
</table>

<p><font color="#000000">These properties are set to match the preferred
size for the left-most component (<b>component1</b>).&nbsp; They are set
to the values calculated above for the other two components.</font>
<p><b><font color="#FF0000">Place components in the Box container</font></b>
<p><font color="#000000">Listing 6 shows the code that adds the three components
to the display with a strut separating the three components from each other
and from the two ends of the box.&nbsp; You have seen this code in previous
lessons, so I won't discuss it further.</font>
<br><font color="#000000"></font>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the components to the Box. Insert
&nbsp;&nbsp;&nbsp; // horizontal struts between the
&nbsp;&nbsp;&nbsp; // components to control the minimum
&nbsp;&nbsp;&nbsp; // spacing between them.
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(10));
&nbsp;&nbsp;&nbsp; aBox.add(component1);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(10));
&nbsp;&nbsp;&nbsp; aBox.add(component2);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(10));
&nbsp;&nbsp;&nbsp; aBox.add(component3);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(10));


<b>Listing 6</b></font></font></pre>
</td>
</tr>
</table>

<p><font color="#000000">The remaining code is completely uninteresting.&nbsp;
You can view that code in Listing 7.</font>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
Every component that extends <b>JComponent</b> has the following three
properties:
<ul>
<li>
preferredSize</li>

<li>
minimumSize</li>

<li>
maximumSize</li>
</ul>
In this lesson, I have shown you how to control the values of these three
properties.&nbsp; I have also shown you how a <b>BoxLayout</b> behaves
with respect to these properties when the physical size of the container
is changed.&nbsp; I also pointed out that different layout managers behave
differently with respect to these three properties.
<br>&nbsp;
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will show you how to create your own invisible spacers.&nbsp;
I will use them in a sample program that takes some of the mystery out
of glue and struts.
<p>The sample program will also demonstrate that <b>BoxLayout</b> is not
confined to being used with a <b>Box</b> container.&nbsp; In fact, just
for fun, I will use a <b>JButton</b> as a container with a <b>BoxLayout</b>
manager.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <font color="#000000">Listing
7</font>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing17.java
Copyright 2000, R.G.Baldwin
Rev 8/11/00

Illustrates the use of minimum, preferred,&nbsp;
and maximum sizes.

Three JLabel components are placed in a
horizontal line in a Box layout in a JFrame.
The components are separated from each other
and from the end of the frame by struts.&nbsp;&nbsp;
Each, strut is ten pixels wide.

The left-most component has its preferred
width set to 1.1 times the default preferred
width. The minimum and maximum sizes for this
component are fixed at the preferred size.
Therefore, its size doesn't change when the
user resizes the JFrame.

The two right-most components have their
minimum widths set to 0.6 times the preferred
width of the left-most component.&nbsp; Their
maximum widths are set to 1.2 times the&nbsp;
preferred width of the left-most component.

Manually expand the size of the JFrame to see
that the widths of the two right-most&nbsp;
components increase to their maximum sizes
and then don't increase any further after&nbsp;
that.

Manually decrease the size of the JFrame to&nbsp;
see that the two right-most components&nbsp;
decrease in width until they reach their
minimum size and then don't decrease in size
any further.&nbsp; Beyond this point, the right-
most component gets clipped by the edge of
the JFrame when the JFrame is no longer large
enough to accommodate all three components at
their minimum sizes.&nbsp;&nbsp;

When the right-most component disappears, the
middle component gets clipped. The space&nbsp;
between the components defined by the struts&nbsp;
does not decrease.

Tested using JDK 1.2.2 under WinNT 4.0 WkStn
*******************************************/

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

class Swing17 extends JFrame{

&nbsp; //---------------------------------------//&nbsp;&nbsp;

&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing17();
&nbsp; }//end main()
&nbsp; //---------------------------------------//
&nbsp;&nbsp;
&nbsp; Swing17(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a new horizontal Box
&nbsp;&nbsp;&nbsp; // object.
&nbsp;&nbsp;&nbsp; Box aBox = Box.createHorizontalBox();

&nbsp;&nbsp;&nbsp; //Add the Box to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBox);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three JLabel objects,
&nbsp;&nbsp;&nbsp; // make them green.
&nbsp;&nbsp;&nbsp; JLabel component1 =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JLabel("component1");
&nbsp;&nbsp;&nbsp; component1.setOpaque(true);
&nbsp;&nbsp;&nbsp; component1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel component2 =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JLabel("component2");
&nbsp;&nbsp;&nbsp; component2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; component2.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel component3 =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JLabel("component3");
&nbsp;&nbsp;&nbsp; component3.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; component3.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Get and modify the preferred size of
&nbsp;&nbsp;&nbsp; // component1
&nbsp;&nbsp;&nbsp; Dimension preferredSize =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; component1.getPreferredSize();
&nbsp;&nbsp;&nbsp; preferredSize.width =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(preferredSize.width*1.1);
&nbsp;&nbsp;&nbsp; component1.setPreferredSize(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; preferredSize);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Calculate minimum and maximum sizes
&nbsp;&nbsp;&nbsp; // based on preferred size of component1.
&nbsp;&nbsp;&nbsp; Dimension minSize = new Dimension();
&nbsp;&nbsp;&nbsp; minSize.width =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(preferredSize.width*0.6);
&nbsp;&nbsp;&nbsp; minSize.height = preferredSize.height;

&nbsp;&nbsp;&nbsp; Dimension maxSize = new Dimension();
&nbsp;&nbsp;&nbsp; maxSize.width =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(preferredSize.width*1.2);
&nbsp;&nbsp;&nbsp; maxSize.height = preferredSize.height;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set minimum and maximum sizes for all
&nbsp;&nbsp;&nbsp; // three components.&nbsp; Cause all three to
&nbsp;&nbsp;&nbsp; // be the same for component1
&nbsp;&nbsp;&nbsp; component1.setMinimumSize(preferredSize);
&nbsp;&nbsp;&nbsp; component2.setMinimumSize(minSize);
&nbsp;&nbsp;&nbsp; component3.setMinimumSize(minSize);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; component1.setMaximumSize(preferredSize);
&nbsp;&nbsp;&nbsp; component2.setMaximumSize(maxSize);
&nbsp;&nbsp;&nbsp; component3.setMaximumSize(maxSize);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the components to the Box. Insert
&nbsp;&nbsp;&nbsp; // horizontal struts between the
&nbsp;&nbsp;&nbsp; // components to control the minimum
&nbsp;&nbsp;&nbsp; // spacing between them.
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(10));
&nbsp;&nbsp;&nbsp; aBox.add(component1);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(10));
&nbsp;&nbsp;&nbsp; aBox.add(component2);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(10));
&nbsp;&nbsp;&nbsp; aBox.add(component3);
&nbsp;&nbsp;&nbsp; aBox.add(Box.createHorizontalStrut(10));

&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; //Pack the JFrame down around the&nbsp;
&nbsp;&nbsp;&nbsp; // components
&nbsp;&nbsp;&nbsp; pack();
&nbsp;&nbsp;&nbsp; setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
&nbsp;&nbsp;
}//end class Swing17


<b>Listing 7</b></font></font></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
