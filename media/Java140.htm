<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, Ordinary Menus<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 140, Revised 01/27/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#menus">Menus</a></li>

<ul><li><a href="#menucomponent class">MenuComponent Class</a></li>

<li><a href="#menu class">Menu Class</a></li>

<li><a href="#menuitem class">MenuItem Class</a></li>

<li><a href="#menubar class">MenuBar Class</a></li>

<li><a href="#menushortcut class">MenuShortcut Class</a></li></ul>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul>

<hr width="100%"></ul>

<center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This series of lessons is concentrating on package <b>java.awt </b>where
most of the functionality exists for providing the user interface to your
application or applet.

<p>We have learned how to handle events in JDK 1.1 and we have learned
how to use the layout managers in JDK 1.1. These two topics form the basis
for the design and implementation of a Graphical User Interface.

<p>The next step is to take a look at the variety of components that are
available to combine with layout and event handling to produce an effective
Graphical User Interface.

<p>The available components are defined by classes in the package <b>java.awt</b>.
Our approach will be to group those classes into categories and study the
material on a category basis. As of this writing, it looks as if the remaining
categories are:
<ul><li>
Ordinary Menus</li>

<li>
Checkbox Menus</li>

<li>
Popup Menus</li>

<li>
The Canvas Class</li>

<li>
Graphics - Shapes, Fonts, Images</li>

<li>
The PrintJob Class</li>

<li>
The Toolkit Class</li></ul>
As things develop, I may find it necessary to modify these groupings.
<center><h2><a name="menus"></a><font color="#ff0000">Menus</font></h2></center>
The inheritance hierarchy for menus is as shown below.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>java.lang.Object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----MenuShortcut&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuComponent&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuBar
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuItem&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.Menu
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.CheckboxMenuItem
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.PopupMenu</pre></td></tr></table>
As you might suspect from looking at this diagram, there are a number of
interesting issues associated with menus, and we will investigate those
issues in this and the next few lessons.

<p>The first thing that we need to do is to take a very brief look at all
the classes listed in the above hierarchy to get an overview of what lies
ahead.
<ul><li><b>MenuComponent Class </b>- Super class of all menu related components.</li>

<li><b>MenuShortcut Class </b>- Represents a keyboard accelerator for a MenuItem.</li>

<li><b>MenuItem Class </b>- Represents a choice in a menu.</li>

<li><b>Menu Class </b>- A component of a menu bar.</li>

<li><b>MenuBar Class </b>- Encapsulates the platform's concept of a menu bar
bound to a Frame.</li>

<li><b>PopupMenu Class </b>- Implements a menu which can be dynamically popped
up within a component.</li>

<li><b>CheckboxMenuItem Class </b>- Produces a checkbox that represents a choice
in a menu.</li></ul>
Our sample program in this lesson will make use of the <b>Menu</b>, <b>MenuItem</b>,
<b>MenuBar</b>, and <b>MenuShortcut </b>classes. We will defer detailed
consideration of the <b>PopupMenu </b>and <b>CheckboxMenuItem </b>classes
until future lessons.

<p>Before we look seriously at the four classes listed above, let's take
a brief look at the <b>MenuComponent </b>class.
<center><h3><a name="menucomponent class"></a><font color="#ff0000">MenuComponent Class</font></h3></center>
According to the JDK 1.1 documentation, this class contains no <i>fields</i>,
one public <i>constructor</i>, and about a dozen methods which are available
to all subclasses of MenuComponent.

<p>Although the JDK 1.1.3 documentation shows the constructor as
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre><b><tt>public MenuComponent()</tt></b></pre></td></tr></table>
this is apparently a typographical error. An attempt to instantiate an
object of this class results in the following compiler error message:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><b><tt>junk.java:97: class java.awt.MenuComponent is an abstract class.
It can't be instantiated.</tt></b>&nbsp;
<pre><b><tt>MenuComponent myMenu = new MenuComponent();</tt></b></pre></td></tr></table>
That being the case, lets move along to the classes that we will be using
in this lesson.
<center><h3><a name="menu class"></a><font color="#ff0000">Menu Class</font></h3></center>
The Menu class is used to construct what we typically think of as a pull-down
menu. It provides no fields and the following public constructors.
<ul><li><b>Menu</b>() -- Constructs a new Menu with an empty label.</li>

<li><b>Menu</b>(String) -- Constructs a new Menu with the specified label.</li>

<li><b>Menu</b>(String, boolean) -- Constructs a new Menu with the specified
label.</li></ul>
The behavior of the first two versions of the constructor are self-explanatory.

<p>The third version has a boolean parameter referred to as <b>tearOff</b>
in the detailed documentation. The following description from the JDK 1.1
documentation describes the use of the boolean parameter in the third version
of the constructor.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>"Constructs a new Menu with the specified label. If tearOff is true,
the menu can be torn off - the menu will still appear on screen after the
the mouse button has been released. NOTE: tear-off functionality may not
be supported by all AWT implementations. If a particular implementation
doesn't support tear-offs, this value will be silently ignored."</td></tr></table>
Because of this apparent uncertainty regarding support, we won't use this
version of the constructor in this lesson.

<p>There are more than a dozen methods provided by this class, and of course
objects of this class also have access to the methods of the <b>MenuComponent
</b>class and its superclasses. Some of the particularly interesting methods
in this class are listed below:
<ul><li><b>add</b>(MenuItem) -- Adds the specified item to this menu.</li>

<li><b>add</b>(String) -- Adds an item with the specified label to this menu.</li>

<li><b>addSeparator</b>() -- Adds a separator line, or a hyphen, to the menu
at the current position.</li>

<li><b>getItem</b>(int) -- Returns the item located at the specified index
of this menu.</li>

<li><b>getItemCount</b>() -- Returns the number of elements in this menu.</li>

<li><b>insert</b>(MenuItem, int) -- Inserts the MenuItem to this menu at the
specified position.</li>

<li><b>insert</b>(String, int) -- Inserts an item with the specified label
to this menu at the specified position.</li>

<li><b>insertSeparator</b>(int) -- Inserts a separator at the specified position</li>

<li><b>remove</b>(int) -- Deletes the item from this menu at the specified
index.</li>

<li><b>removeAll</b>() -- Deletes all items from this menu.</li></ul>
Most of these methods are also self-explanatory and are used for creating
and maintaining menus at runtime. We will be be using some of these methods
in our sample program.
<center><h3><a name="menuitem class"></a><font color="#ff0000">MenuItem Class</font></h3></center>
This class is used to instantiate objects which can become the choices
in a menu. This class has no <i>fields </i>and the following public <i>constructors</i>:
<ul><li><b>MenuItem</b>() -- Constructs a new MenuItem with an empty label and
no keyboard shortcut.</li>

<li><b>MenuItem</b>(String) -- Constructs a new MenuItem with the specified
label and no keyboard shortcut.</li>

<li><b>MenuItem</b>(String, MenuShortcut) -- Create a MenuItem with an associated
keyboard shortcut.</li></ul>
Although we haven't discussed <b>MenuShortcut </b>yet, probably anyone
who has ever used a system with a Windows-style GUI is familiar with the
use of shortcuts. For example, in the Netscape editor that I am using to
produce this document, the keyboard shortcut for opening a file is <i>Ctrl-O</i>.
When I open the <b>File </b>menu, the shortcut is displayed to the right
of the main text on the menu item. If I enter <i>Ctrl+O</i> at the keyboard
when the menu is not open, a dialog box appears that allows me to open
a file.

<p>This class provides about 20 methods, with some of the more interesting
ones listed below:
<ul><li><b>addActionListener</b>(ActionListener) -- Adds the specified action listener
to receive action events from this menu item.</li>

<li><b>removeActionListener</b>(ActionListener) -- Removes the specified action
listener so it no longer receives action events from this menu item.</li>

<li><b>setEnabled</b>(boolean) -- Sets whether or not this menu item can be
chosen.</li>

<li><b>isEnabled</b>() -- Checks whether the menu item is enabled.</li></ul>
The <b>addActionListener() </b>method is very familiar to us. Whenever
a menu item is chosen using either the mouse or the keyboard shortcut,
an <b>ActionEvent </b>is generated. In order to cause the selection of
that menu item to cause a specific action, we will instantiate and register
an <b>ActionListener </b>object which contains an overridden <b>actionPerformed()</b>
method to produce the desired action. In the case of our sample program,
the desired action will simply be to display the identification of the
menu item that was selected. In a real program, the action would probably
be more substantive.
<center><h3><a name="menubar class"></a><font color="#ff0000">MenuBar Class</font></h3></center>
According to the JDK 1.1 documentation, this is:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>" A class that encapsulates the platform's concept of a menu bar bound
to a Frame. In order to associate the MenuBar with an actual Frame, the
<b>Frame.setMenuBar()</b> method should be called."</td></tr></table>
This class has no <i>fields </i>and the following public <i>constructor</i>:
<ul><li><b>MenuBar</b>() -- Creates a new menu bar.</li></ul>
The class has about a dozen non-deprecated methods. An interesting subset
of those methods is listed below:
<ul><li><b>add</b>(Menu) -- Adds the specified menu to the menu bar.</li>

<li><b>getHelpMenu</b>() -- Gets the help menu on the menu bar.</li>

<li><b>remove</b>(int) -- Removes the menu located at the specified index from
the menu bar.</li>

<li><b>remove</b>(MenuComponent) -- Removes the specified menu from the menu
bar.</li>

<li><b>setHelpMenu</b>(Menu) -- Sets the help menu to the specified menu on
the menu bar.</li></ul>
We will be using some of these methods in the sample program that follows.
<center><h3><a name="menushortcut class"></a><font color="#ff0000">MenuShortcut Class</font></h3></center>
This class is used to instantiate an object which represents a keyboard
accelerator for a <b>MenuItem</b>. It has no <i>fields </i>and the following
<i>constructors</i>:
<ul><li><b>MenuShortcut</b>(int) -- Constructs a new MenuShortcut for the specified
key.</li>

<li><b>MenuShortcut</b>(int, boolean) -- Constructs a new MenuShortcut for
the specified key.</li></ul>
Apparently all of the shortcuts automatically require the user to hold
down the <b>Ctrl </b>key while pressing another key. The <b>boolean </b>parameter
in the second version of the constructor specifies whether or not the user
will also have to hold down the <b>Shift </b>key as well (<i>true </i>means
the <b>Shift </b>key is required).

<p>According to the JDK 1.1 documentation, the first parameter shown as
as <b>int</b> is:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>"the raw keycode for this <b>MenuShortcut</b>, as would be returned
in the <b>keyCode </b>field of a <b>KeyEvent </b>if this key were pressed"</td></tr></table>
Symbolic constants are defined in the <b>KeyEvent </b>class which define
these raw key codes.

<p>A small sampling of those symbolic constants, taken from the JDK 1.1
documentation, is shown below.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><ul><li>
VK_8&nbsp;</li>

<li>
VK_9&nbsp;</li>

<li>
VK_A&nbsp;</li>

<li>
VK_A thru VK_Z are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A)&nbsp;</li></ul></td></tr></table>
This class also provides five methods. We won't be using any of the methods
in the sample programs in this lesson, but you would be well advised to
go to the JDK 1.1 documentation and familiarize yourself with them.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
This program is designed to be compiled and run under JDK 1.1

<p>This application places two menus in a <b>Frame </b>object. One of the
menus has two items and the other has three items.

<p>The first item in the first menu also has a shortcut which is <i>Ctrl+Shift+K</i>.

<p>When a menu item is selected, this generates an <b>ActionEvent </b>which
in turn causes a line of text to be displayed on the screen <u>identifying
the item</u> that was selected.

<p>Typical screen outputs when menu items are selected using the mouse
or the shortcut key are:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><b><tt>java.awt.MenuItem[menuitem4,label=Third Item on Menu B]&nbsp;</tt></b>

<p><b><tt>java.awt.MenuItem[menuitem0,label=First Item on Menu A,shortcut=Ctrl+Shift+K]</tt></b></td></tr></table>
A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1.3 running under Win95.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
There is quite a lot of <u>repetitious code</u> in this sample program
due to the fact that essentially the same code is required to create each
menu item and register a <b>Listener </b>object on it.

<p>Also, the program generates two separate menus and essentially the same
code is required for each. Therefore, in this section, we will be highlighting
<u>typical code fragments</u> of the type required to perform each of the
necessary operations.

<p>Probably the most interesting thing about these code fragments is not
the code itself, but rather the order in which the different operations
are performed to accomplish the separate steps necessary to <u>construct
the menu</u>. You should pay particular attention to the steps involved.

<p>The first interesting code fragment instantiates a <b>MenuShortcut </b>object
that will later be used in the instantiation of a <b>MenuItem </b>object.

<p>Several such <b>MenuItem </b>objects will be added to a <b>Menu </b>object
to produce a menu with several choices.

<p>Two such <b>Menu </b>objects will be added to a <b>MenuBar </b>object
to produce a menu bar with two separate menus.

<p>The <b>MenuBar </b>object will then be associated with the <b>Frame
</b>object.

<p>Now that you have the overview, let's go back to the <b>MenuShortcut
</b>object.

<p>The argument list for the constructor in this case specifies a shortcut
key combination consisting of <i>Ctrl+Shift+K</i>.

<p>The <i>true </i>boolean parameter specifies the requirement for the
<b>Shift </b>key.

<p>The <b>Ctrl </b>key is apparently always required. The first parameter
to the constructor is a symbolic constant defined in the <b>KeyEvent </b>class
which specifies the <b>"K"</b> key.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>MenuShortcut myShortcut =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuShortcut(KeyEvent.VK_K,true);</pre></td></tr></table>
When this version of the constructor is used, the text string <i>"Ctrl+Shift+K"</i>
is automatically placed on the menu item as an extension to the label provided
by the programmer..

<p>The next interesting code fragment is typical of that required to instantiate
<b>MenuItem </b>objects which will later be added to the <b>Menu </b>object
to create the actual menu. Two different styles of instantiation are shown.
The first style specifies a shortcut for the item as discussed above. The
second style does not specify a shortcut.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; MenuItem firstItemOnMenuA =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuItem("First Item on Menu A",<b>myShortcut</b>);
&nbsp;&nbsp;&nbsp; MenuItem secondItemOnMenuA =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuItem("Second Item on Menu A");</pre></td></tr></table>
The next interesting code fragment instantiates an <b>ActionListener </b>object
and registers it on two of the menu items. You have seen code of this type
many times before. It is being included here simply to illustrate that
associating <b>ActionListener </b>objects with menu items is no different
from associating <b>ActionListener </b>objects with <b>Button </b>objects,
or any other object capable of generating an <b>ActionEvent</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; MyMenuProcessor <b>myMenuProcessor </b>=&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMenuProcessor();
&nbsp;&nbsp;&nbsp; firstItemOnMenuA.addActionListener(<b>myMenuProcessor</b>);
&nbsp;&nbsp;&nbsp; secondItemOnMenuA.addActionListener(<b>myMenuProcessor</b>);</pre></td></tr></table>
The next code fragment is typical of that required to instantiate each
of the two different <b>Menu </b>objects in this program and to add existing
<b>MenuItem </b>objects to the <b>Menu </b>Object. This is a typical <b>object.add()</b>
method invocation that you have seen many times in the past.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Menu menuA = new Menu("Menu A");
&nbsp;&nbsp;&nbsp; menuA.add(firstItemOnMenuA);</pre></td></tr></table>
The next code fragment instantiates the <b>MenuBar </b>object and adds
the two <b>Menu </b>objects to it.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp; MenuBar menuBar = new MenuBar();
&nbsp;&nbsp; menuBar.add(menuA);&nbsp;&nbsp;
&nbsp;&nbsp; menuBar.add(menuB);</pre></td></tr></table>
At this point, we have created our two Menu objects and hooked them onto
a MenuBar object. However, we haven't said anything about where the <u>entire
assembly</u> will reside. We do this by <u>associating</u> the <b>MenuBar
</b>object with a <b>Frame </b>object. Note that this is <u>not</u> accomplished
using a typical <b>object.add()</b> method invocation. Rather, we will
invoke a <u>special method</u> of the <b>Frame </b>class that has the following
signature:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><tt>public synchronized void setMenuBar(MenuBar mb)</tt>&nbsp;

<p><tt>Sets the menu bar for this frame to the specified menu bar.&nbsp;</tt>

<p><tt>Parameters: mb - the menu bar being set&nbsp;</tt></td></tr></table>
The code that uses this method to set the menu bar for our <b>Frame</b>
object follows:
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>Frame myFrame = new Frame("Copyright 1997, R.G.Baldwin");
myFrame.<b>setMenuBar(menuBar)</b>;</pre></td></tr></table>
That completes the new and interesting code in this program. The remaining
code is similar to that which you have seen in many previous example programs.
A complete listing of the program is provided in the next section.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
This section contains a complete listing of the program. See the previous
sections for an operational description of the program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Menu01.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

This application places two menus in a Frame object.&nbsp; One
of the menus has two items and the other has three items.

The first item in the first menu also has a shortcut which
is Ctrl+Shift+K.

When a menu item is selected, this generates an Action&nbsp;
event which in turn causes a line of text to be displayed
on the screen identifying the item that was selected.

Typical screen outputs when menu items are selected using
the Mouse are (line breaks manually inserted for this&nbsp;
document).

java.awt.MenuItem[menuitem4,label=Third Item on Menu B]
java.awt.MenuItem[menuitem0,label=First Item on Menu A,
&nbsp; shortcut=Ctrl+Shift+K]

A windowClosing() event listener object is instantiated&nbsp;
and registered on the frame to terminate the program when
the frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class Menu01 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class Menu01
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Instantiate a MenuShortcut object
&nbsp;&nbsp;&nbsp; MenuShortcut myShortcut =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuShortcut(KeyEvent.VK_K,true);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate several MenuItem objects&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MenuItem firstItemOnMenuA =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuItem("First Item on Menu A",myShortcut);
&nbsp;&nbsp;&nbsp; MenuItem secondItemOnMenuA =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuItem("Second Item on Menu A");
&nbsp;&nbsp;&nbsp; MenuItem firstItemOnMenuB =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuItem("First Item on Menu B");
&nbsp;&nbsp;&nbsp; MenuItem secondItemOnMenuB =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuItem("Second Item on Menu B");
&nbsp;&nbsp;&nbsp; MenuItem thirdItemOnMenuB =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MenuItem("Third Item on Menu B");
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate an ActionListener object and register&nbsp;
&nbsp;&nbsp;&nbsp; // it on the MenuItem objects.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyMenuProcessor myMenuProcessor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMenuProcessor();
&nbsp;&nbsp;&nbsp; firstItemOnMenuA.addActionListener(myMenuProcessor);
&nbsp;&nbsp;&nbsp; secondItemOnMenuA.addActionListener(myMenuProcessor);
&nbsp;&nbsp;&nbsp; firstItemOnMenuB.addActionListener(myMenuProcessor);
&nbsp;&nbsp;&nbsp; secondItemOnMenuB.addActionListener(myMenuProcessor);
&nbsp;&nbsp;&nbsp; thirdItemOnMenuB.addActionListener(myMenuProcessor);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two Menu objects and add the MenuItem
&nbsp;&nbsp;&nbsp; // objects to them
&nbsp;&nbsp;&nbsp; Menu menuA = new Menu("Menu A");
&nbsp;&nbsp;&nbsp; menuA.add(firstItemOnMenuA);
&nbsp;&nbsp;&nbsp; menuA.add(secondItemOnMenuA);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Menu menuB = new Menu("Menu B");
&nbsp;&nbsp;&nbsp; menuB.add(firstItemOnMenuB);
&nbsp;&nbsp;&nbsp; menuB.add(secondItemOnMenuB);
&nbsp;&nbsp;&nbsp; menuB.add(thirdItemOnMenuB);&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a MenuBar object and add the Menu&nbsp;
&nbsp;&nbsp;&nbsp; // objects to it&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MenuBar menuBar = new MenuBar();
&nbsp;&nbsp;&nbsp; menuBar.add(menuA);&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; menuBar.add(menuB);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Frame object and associate the MenuBar
&nbsp;&nbsp;&nbsp; // object with the Frame object.&nbsp; Note that this is&nbsp;
&nbsp;&nbsp;&nbsp; // NOT a typical myFrame.add() method invocation, but
&nbsp;&nbsp;&nbsp; // rather is a special form of method invocation that
&nbsp;&nbsp;&nbsp; // is required to associate a MenuBar object with a&nbsp;
&nbsp;&nbsp;&nbsp; // Frame object.
&nbsp;&nbsp;&nbsp; Frame myFrame =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Frame("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; //note that this is not an add method
&nbsp;&nbsp;&nbsp; myFrame.setMenuBar(menuBar);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,100);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//Class to instantiate an ActionListener object to be&nbsp;
// registered on the menu items.
class MyMenuProcessor implements ActionListener{
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Display the menu item that generated the ActionEvent
&nbsp;&nbsp;&nbsp; System.out.println(e.getSource());
&nbsp; }//end actionPerformed
}//end class MyMenuProcessor
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program&nbsp;
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>