<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">Wrapping Up the SimpleTurtle Class:&nbsp; Multimedia Programming with Java</h2>
<i>Learn more about the methods and the properties of a Turtle object from 
Ericson's 
Java multimedia library.</i><p><b>Published:</b>&nbsp; December 30, 2008<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 346</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
		<li><a href="#A_multimedia_class_library">A multimedia class library</a></li>
		<li><a href="#Software_installation_and_testing">Software installation 
		and testing</a></li>
	</ul>
	</li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#The_movement_methods">The movement methods</a></li>
	<li><a href="#The_set_and_get_methods">The set and get property methods</a></li>
	<li><a href="#Sample_program_named_Java346a">Sample program named Java346a</a></li>
	<li><a href="#The_pen_properties">The pen's properties</a></li>
	<li><a href="#Miscellaneous_methods">Miscellaneous methods</a></li>
	<li><a href="#Thats_a_wrap">That's a wrap</a></li>
</ul>
	</li>
	<li><a href="#Run%20the%20program">Run the programs</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p>This lesson is the next in a series <i>(see <a href="#Resources">Resources</a>)</i> designed to teach you how to write Java 
programs to do things like:</p>
<ul>
	<li>Remove <i>redeye</i> from a photographic image.</li>
	<li>Distort the human voice.</li>
	<li>Display one image inside another image.</li>
	<li>Do edge detection, blurring, and other filtering operations on images.</li>
	<li>Insert animated cartoon characters in videos of live humans.</li>
</ul>
<p>If you have ever wondered how to do these things, you've come to the right 
place.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Screen output from the program named 
	Java346a.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. The basic move forward method. </li>
	<li><a href="#Listing_2">Listing 2</a>. The three trivial move methods.</li>
	<li><a href="#Listing_3">Listing 3</a>. The moveTo method. </li>
	<li><a href="#Listing_4">Listing 4</a>. Turtle methods related to the pen's 
	up/down state. </li>
	<li><a href="#Listing_5">Listing 5</a>. Source code for the SimpleTurtle 
	class. </li>
	<li><a href="#Listing_6">Listing 6</a>. Source code for the program named 
	Java346a. </li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="A_multimedia_class_library">A multimedia class library</a></h3>
<p>In this series of lessons, I will present and explain many of the classes in 
a multimedia class library that was developed and released under a <b>Creative 
Commons Attribution 3.0 United States License</b> <i>(see
<a href="#Resources">Resources</a>) </i>by Mark Guzdial and 
Barbara Ericson at Georgia Institute of Technology.&nbsp; In doing this, I will also 
present some interesting sample programs that use the library.</p>
<h3><a name="Software_installation_and_testing">Software installation and 
testing</a></h3>
<p>I explained how to download, install, and test the multimedia class library 
in an earlier lesson titled <i>Multimedia Programming with Java, Getting Started 
(see <a href="#Resources">Resources</a>)</i>.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>I will complete my explanation of the multimedia class named <b>SimpleTurtle</b> 
in this lesson.</p>
<p>I will begin by explaining the methods that are used to 
cause the turtle to move.&nbsp; Then I will explain most of the turtle's 
property methods and provide a sample program that illustrates several of the 
property methods.</p>
<p>Following that, I will explain three of the pen's 
properties that are accessible via a turtle object and several miscellaneous 
methods that belong to the turtle.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><a name="The_movement_methods">The movement methods</a></h3>
<p>In this lesson, we continue to examine the class named <b>SimpleTurtle</b>.&nbsp; 
A complete listing of the <b>SimpleTurtle</b> class is provided in Listing 5 
near the end of the lesson.</p>
<p>The methods in the following list are dedicated to 
<a name="moving_the_turtle">moving the turtle</a>:</p>
<ol>
	<li>forward(int pixels)</li>
	<li>moveTo(int x,int y)</li>
	<li>forward()</li>
	<li>backward()</li>
	<li>backward(int pixels)</li>
</ol>
<p>The code in the last three methods in the list is fairly trivial.&nbsp; 
However, the code in the first two methods is slightly more complicated.&nbsp; 
Therefore, I will begin my discussion with the first method in the list, which 
is shown in its entirety in Listing 1.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. The basic move forward method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public void forward(int pixels){
    int oldX = xPos;
    int oldY = yPos;

    // change the current position
    xPos = oldX + (int)(pixels * Math.sin(Math.toRadians(
                                               heading)));
    yPos = oldY + (int)(pixels * -Math.cos(Math.toRadians(
                                               heading)));

    // add a move from the old position to the new
    // position to the pen
    pen.addMove(oldX,oldY,xPos,yPos);

    // update the display to show the new line
    updateDisplay();
  }//end forward</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This method receives an incoming parameter that specifies a distance <i>
(specified in units of pixels)</i>, 
and causes the turtle to move forward by that number of pixels the next time the 
display is updated.</p>
<p><font color="#FF0000"><b>Can be facing in any direction</b></font></p>
<p>Recall that at any point in time, the turtle may be facing in any direction.&nbsp; 
<i>(The direction that the turtle is facing is saved in one of the turtle's instance 
variables named <b>heading</b>, which saves the direction as an 
angle in degrees.)</i>&nbsp; A value of zero-degrees indicates that the turtle is facing to the 
north.&nbsp; Increasing the value of the angle in <b>heading</b> indicates that the turtle 
should rotate clockwise.&nbsp; Similarly, decreasing the value indicates that 
the turtle should rotate counter-clockwise.</p>
<p><font color="#FF0000"><b>Trigonometry and vector concepts</b></font></p>
<p>Because the turtle can be facing in any direction at any time, telling the turtle to move forward by a specified distance in pixels 
is a little more complicated than simply adding that value to either the x or y 
coordinate value of the turtle's current position.&nbsp; Instead, it may be 
necessary to modify both the x and y coordinate values in the turtle's position 
coordinates.</p>
<p>Listing 1 uses trigonometry and vector concepts to compute the projection of the 
distance onto the x and y axes individually, and then adds the projected values 
to the turtle's 
current x and y position coordinates.&nbsp; <i>(Note that the projected distance 
can be negative for certain angles of heading.)</i></p>
<p>If you understand trigonometry and vector concepts, you should have no problem understanding the 
code in Listing 1.&nbsp; Otherwise, you will simply need to take it on faith 
that this method behaves as advertised.</p>
<p><font color="#FF0000"><b><a name="Update_the_pens_history">Update the pen's history</a></b></font></p>
<p>After adjusting the turtle's position coordinates, Listing 1 calls the <b>
addMove</b> method on the turtle's <b>Pen</b> object to add the move information 
to the turtle's history of movements.&nbsp; <i>(This information is used under 
certain circumstances to recreate the turtle's historical movement path when the 
display is updated.)</i></p>
<p><font color="#FF0000"><b>Update the display, maybe...</b></font></p>
<p>Finally Listing 1 calls the <b>updateDisplay</b> method to trigger a possible 
update of the display.&nbsp; I explained the behavior of the <b>updateDisplay</b> 
method in detail in the previous lesson.&nbsp; To make a long story short, 
whether or not the display actually gets updated to reflect the new position of 
the turtle depends on several other factors, some of which are beyond the 
control of the turtle object.</p>
<p><font color="#FF0000"><b>The three trivial move methods</b></font></p>
<p>The code for each of the last three methods in the above <a href="#moving_the_turtle">
list</a> is shown in Listing 2.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. The three trivial move methods.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  //Method to move the turtle 100 pixels forward
  public void forward(){forward(100);}

  //Method to move the turtle 100 pixels backward
  public void backward(){backward(100);}

  //Method to move the turtle a given number of pixels
  // backward
  public void backward(int pixels){
    forward(-pixels);
  }//end backward</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As you can see, each of these methods causes the method in Listing 1 to be 
called to cause 
the turtle to move.&nbsp; The turtle is moved backwards by calling the method in 
Listing 1 with a negative distance for the turtle to move.</p>
<p><font color="#FF0000">
<b>The moveTo method</b></font></p>
<p>The remaining method from the above <a href="#moving_the_turtle">list</a> is 
shown in Listing 3. </p>
<p>
<b><a name="Listing_3">Listing 3</a>. The moveTo method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  //Method to move to turtle to a given x and y location
  public void moveTo(int x, int y){
    this.pen.addMove(xPos,yPos,x,y);
    this.xPos = x;
    this.yPos = y;
    this.updateDisplay();
  }//end moveTo</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Instead of adjusting the current position coordinates of the turtle 
incrementally, the code in Listing 3 simply sets new values into the two 
variables <i>(<b>xPos</b> and <b>yPos</b>)</i> that specify the current location of the turtle.</p>
<p>In addition to changing the turtle's position coordinates, Listing 3 also 
calls the <b>addMove</b> method on the turtle's <b>Pen</b> object to add the 
move information to the turtle's <a href="#Update_the_pens_history">history</a> of movements.&nbsp; Finally Listing 3 
calls the <b>updateDisplay</b> method to trigger a possible update of the 
display.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>What is a property?</b><br />
  If you are unfamiliar with the concept of properties, see my tutorial titled
<font size="3" face="arial">
	<i>Understanding Properties in Java and C#</i> in <a href="#Resources">
	Resources</a>.</font></td></tr></table>
</td>
</tr>
</table>
<h3><a name="The_set_and_get_methods">The set and get property methods</a></h3>
<p>Many of the instance variables belonging to a turtle constitute <i>properties</i>, which can be manipulated by <i>set</i> and <i>get</i> methods.&nbsp; 
Those properties are shown in the <a name="following_list">following list</a>:</p>
<ul>
	<li><b>picture</b> <i>(Picture object on which the turtle may be drawn)</i></li>
<li><b>modelDisplay</b> <i>(World object on which the turtle may be drawn)</i></li>
	<li><b>showInfo</b> <i>(used to draw text information about the turtle)</i></li>
	<li><b>infoColor</b> <i>(color of text information drawn about turtle)</i></li>
	<li><b>shellColor</b> <i>(color of the turtle's shell)</i></li>
	<li><b>bodyColor</b> <i>(color of the turtle's body)</i></li>
	<li><b>width</b> <i>(horizontal component of turtle's size)</i></li>
	<li><b>height</b> <i>(vertical component of turtle's size)</i></li>
	<li><b>xPos</b> <i>(current position coordinate along x-axis)</i></li>
	<li><b>yPos</b> <i>(current position coordinate along y-axis)</i></li>
	<li><b>pen</b> <i>(reference to Pen object used to draw the turtle's track)</i></li>
	<li><b>heading</b> <i>(direction the turtle is facing in degrees)</i></li>
	<li><b>name</b> <i>(turtle's name, &quot;No name&quot; by default)</i></li>
	<li><b>visible</b> <i>(used to cause turtle to be visible or invisible)</i></li>
</ul>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>The &quot;is&quot; property method</b><br />
  Another standard form of property method begins with the word &quot;is&quot;.&nbsp; This 
	form always returns type <b>boolean</b>, and is used to inquire about the 
	true/false state of a property.&nbsp; For example, the turtle's <b>isVisible</b> 
	method <i>(see Listing 5)</i> returns a <b>boolean</b> value indicating whether or not the turtle 
	is visible.</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Source code for property methods</b></font></p>
<p>You will find the source code for the <i>set</i> and <i>get</i> methods for 
the properties in the above <a href="#following_list">list</a> in Listing 5 near the end of the lesson.&nbsp;
<i>(Note that some of the properties, such as <b>xPos</b> and <b>yPos</b>, are &quot;read only&quot; 
properties, in which case there is no set method.)</i></p>
<h3><a name="Sample_program_named_Java346a">Sample program named Java346a</a></h3>
<p>The purpose of most of the properties in the above <a href="#following_list">list</a> is self-explanatory 
and shouldn't require further explanation.&nbsp; However, it might be useful to 
provide a short program that illustrates typical usage of such properties.&nbsp; 
Source code for the 
program is provided in Listing 6 near the end of the lesson.&nbsp; Because the code is 
very simple, no explanation of the code should be necessary.</p>
<p><font color="#FF0000"><b>Screen output from the program named Java346a</b></font></p>
<p>The screen output from the program named <b>Java346a</b> is shown in Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Screen output from the program named 
	Java346a.</b><table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java346a.jpg" width="309" height="529"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Default turtle colors</b><br />
  The default color of a turtle and its pen is determined by the constructor for 
	the SimpleTurtle class.&nbsp; The turtle and the pen are the same color by 
	default.&nbsp; The color is selected from an array of four different colors 
	on the basis of the order in which the Turtle objects are created.</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Create and manipulate the uppermost turtle</b></font></p>
<p>Two different <b>Turtle</b> objects are displayed in Figure 1.&nbsp; The 
program begins by creating the turtle shown near the top of Figure 1 and placing 
it in the default position <i>(the center of the world)</i>.&nbsp; By default, 
since this turtle is the first one created by the program it would be all green.&nbsp; 
The track created by the pen would also be green by default and would be one pixel wide.</p>
<p>The program calls a <i>set</i> method to change the <b>shellColor</b> 
property to red, leaving the turtle's body green.&nbsp; Then the program calls 
two other <i>set</i> methods to change the color of the pen to blue and change 
the width of the pen to two pixels.&nbsp; <i>(I will have more to say about 
controlling pen properties later.)</i></p>
<p>After that, the program causes the turtle to make two moves and one turn, 
producing the wide blue track shown in Figure 1.&nbsp; This all happens so 
quickly that all you will see is the turtle in its final position with the wide 
blue track shown in Figure 1.</p>
<p><font color="#FF0000"><b>Create and manipulate the other turtle</b></font></p>
<p>After performing the operations described above on the turtle near the top of 
Figure 1, the program turns its attention to the turtle shown near the bottom of 
Figure 1.</p>
<p>The program creates this turtle and places it in the center of the world by 
default.&nbsp; It calls two different <i>get</i> methods to get the current x 
and y position coordinates of the turtle.&nbsp; The position-coordinate values 
are used as parameters to the <b>moveTo</b> method <i>(see Listing 3)</i> to 
move the turtle to the position shown in Figure 1. By default, the color of this 
turtle and its pen is cyan and the pen is one pixel wide.</p>
<p><font color="#FF0000"><b>Set the name property</b></font></p>
<p>By default, a turtle has a name property with the name <i>&quot;No name&quot;</i>.&nbsp; 
The program calls the <b>setName</b> method to change the turtle's name property 
value to <i>&quot;Bill.&quot;</i>&nbsp; It is very important to understand that 
the value of the 
name property is distinct and different from the name of the reference variable 
named <b>bill</b> that holds a reference to the <b>Turtle</b> object.</p>
<p><font color="#FF0000"><b>Display a text string describing the turtle</b></font></p>
<p>Figure 1 shows a red text string to the right of this turtle.&nbsp; By 
default, this text string is not displayed.&nbsp; When it is displayed, it is 
black by default.&nbsp; The program causes this text string to be displayed by 
calling a <i>set</i> method to change the value of the <b>showInfo</b> property 
to true.&nbsp; It changes the display color of the text string by calling a <i>
set</i> method that changes the <b>infoColor</b> property value to <b>Color.RED</b>.&nbsp; 
The contents of the text string are determined by an overridden <b>toString</b> 
method that composes the string using the values of the following properties:</p>
<ul>
	<li><b>name</b></li>
	<li><b>xPos</b></li>
	<li><b>yPos</b></li>
	<li><b>heading</b></li>
</ul>
<p>The values of the x and y position properties, along with the value of the <b>
width</b> property are used to establish the position of the string when it is 
drawn on the display.</p>
<p><font color="#FF0000"><b>Change the size of the turtle</b></font></p>
<p>Finally, the program calls two <i>get</i> methods to get the current <b>width</b> 
and <b>height</b> property values for the turtle.&nbsp; The program also calls two <i>set</i> methods to set the 
<b>width</b> and 
<b>height</b> property values to twice the current width and height.&nbsp; This results in the shown near the bottom of Figure 1 being twice the size of the turtle shown near 
the top of Figure 1.</p>
<h3><a name="The_pen_properties">The pen's properties</a></h3>
<p>As you can see in Figure 1, a pen that is attached to the center of each 
turtle can be used to draw a line as the turtle moves.&nbsp; The pen is actually 
an object of the <b>Pen</b> class that is instantiated when the <b>Turtle</b> object is instantiated.&nbsp; 
<i>(The <b>Pen</b> object is referred to by the instance variable named <b>pen</b>.)&nbsp;
</i>Like 
the turtle object, the pen object has several properties.&nbsp; You will learn 
more about these properties when I explain the <b>Pen</b> class in detail in a future 
lesson.&nbsp; However, the values of the following three pen properties are made 
available to the programmer via the turtle object so you need to know how to 
access them in your programs:</p>
<ul>
	<li><b>penDown</b></li>
	<li><b>color</b></li>
	<li><b>width</b></li>
</ul>
<p>At this point, the most important thing to note is that the values of the pen 
properties are not stored in the turtle object.&nbsp; Instead, they are stored 
in the pen object that belongs to the turtle.&nbsp; As a result, <i>
<a name="indirection">indirection</a></i> is 
required to access the values of the pen's properties by way of a turtle object.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right" id="table1">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1" id="table2">
  <tr><td bgcolor="#eeeeee">
  <b>Historical perspective</b><br />
  The concept of the pen being <i>up</i> or <i>down</i> harkens back to the 
	early days of computers when <a href="http://www.calcompgraphics.com/">
	CalComp</a> brand mechanical plotters were the primary mechanism for 
	displaying graphic output from computers.</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>The pen's penDown property</b></font></p>
<p>For example, the four turtle methods shown in Listing 4 deal with the <i>up</i> or 
<i>down</i> state of the pen.&nbsp; <i>(When the pen is down, a line is drawn as 
the turtle moves.&nbsp; No 
line is drawn when the pen is up.)</i></p>
<p>
<b><a name="Listing_4">Listing 4</a>. Turtle methods related to the pen's up/down 
state. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  //Method to check if the pen is down
  //Returns true if down and false if up
  public boolean isPenDown(){
    return <b>this.pen.isPenDown()</b>;
  }//end isPenDown

  //Method to set the penDown boolean variable
  public void setPenDown(boolean value){
    this.pen.setPenDown(value);
  }//end setPenDown

  //Method to lift the pen up
  public void penUp(){
    this.pen.setPenDown(false);
  }//end penUp

  //Method to set the pen down
  public void penDown(){
    this.pen.setPenDown(true);
  }//end penDown</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The most important thing to note about the code in Listing 4 is that each of the turtle's 
methods in Listing 4 calls one of the pen's property methods to accomplish the intended 
purpose.</p>
<p><font color="#FF0000"><b>The pen's color and width properties</b></font></p>
<p>Similarly, the following turtle methods call property methods belonging to 
the pen to access and/or control the pen's color and width properties:</p>
<ul>
	<li>getPenColor</li>
	<li>setPenColor</li>
	<li>getPenWidth</li>
	<li>setPenWidth</li>
</ul>
<p>You can view the code for these methods in Listing 5 near the end of the 
lesson.</p>
<h3><a name="Miscellaneous_methods">Miscellaneous methods</a></h3>
<p>This leaves the following methods that I haven't explained:</p>
<ul>
	<li><b>getDistance</b> - returns the distance from the turtle to a specified 
	location given by x and y coordinate values.</li>
<li><b>setColor</b> - calls the turtle's <b>setBodyColor</b> method to set the 
color of a turtle.</li>
	<li><b>clearPath</b> - calls the pen's <b>clearPath</b> method to delete 
	historical data regarding the pen's path that is maintained by the pen 
	object.</li>
<li><b>hide</b> - calls the turtle's <b>setVisible</b> method, passing false as 
a parameter, to cause the turtle to become invisible.</li>
	<li><b>show</b> - calls the turtle's s<b>etVisible</b> method, passing 
	true as a parameter, to cause the turtle to become visible.</li>
	<li><b>drawInfoString</b> - method called from inside the <b>paintComponent</b> 
	method to cause the text string shown in Figure 1 to be drawn on the right 
	side of the turtle.</li>
	<li><b>toString</b> - Overridden method that constructs the text string 
	shown in Figure 1, which is drawn by the <b>drawInfoString</b> method.</li>
</ul>
<p>The code in each of these methods is straightforward.&nbsp; You can view that 
code in Listing 5 near the end of the lesson.</p>
<h3><a name="Thats_a_wrap">That's a wrap</a></h3>
<p>That concludes the explanation of the <b>SimpleTurtle</b> class.</p>
<center>
<h2><a name="Run the program"></a>Run the programs</h2>
</center>
<p>I encourage you to copy the code from Listing 6, compile 
the code, and execute it.&nbsp; Experiment with the code, making changes, and 
observing the results of your changes.&nbsp; Make certain that you can explain why 
your changes behave as they do.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>I completed my explanation of the multimedia class named <b>SimpleTurtle</b> 
in this lesson.</p>
<p>I began by explaining the methods that are used to cause 
the turtle to move.&nbsp; Then I explained most of the turtle's property methods 
and provided a sample program that illustrates several of the property methods.</p>
<p>Following that, I explained three of the pen's properties that are accessible 
via a turtle object and several miscellaneous methods that belong to the turtle.</p>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>In the next lesson, I will explain the <b>Pen</b> and <b>PathSegment</b> 
classes, which are used by the turtle to draw the lines shown in Figure 1.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a href="http://coweb.cc.gatech.edu/mediaComp-plan/101">Media 
	Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a href="http://drjava.sourceforge.net/">DrJava</a> download site</li>
	<li><a href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, the JavaPLT 
	group at Rice University</a></li>
	<li><a href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava Open Source 
	License</a></li>
	<li><a href="http://www.developer.com/java/article.php/1440571">The Essence 
	of OOP using Java, The this and super Keywords</a></li>
	<li><font color="#000000">
	<a href="http://www.dickbaldwin.com/java/Java058.htm">Threads of Control</a></font></li>
	<li><a href="http://java.sun.com/products/jfc/tsc/articles/painting/">
	Painting in AWT and Swing</a></li>
	<li><a href="http://www.dickbaldwin.com/java/Java200.htm">200</a> 
	Implementing the Model-View-Controller Paradigm using Observer and 
	Observable&nbsp; </li>
	<li><a href="http://www.dickbaldwin.com/java/Java300.htm">300</a> Java 2D 
	Graphics, Nested Top-Level Classes and Interfaces</li>
	<li><a href="http://www.dickbaldwin.com/java/Java302.htm">302</a> Java 2D 
	Graphics, The Point2D Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java304.htm">304</a> Java 2D 
	Graphics, The Graphics2D Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java306.htm">306</a> Java 2D 
	Graphics, Simple Affine Transforms</li>
	<li><a href="http://www.dickbaldwin.com/java/Java308.htm">308</a> Java 2D 
	Graphics, The Shape Interface, Part 1</li>
	<li><a href="http://www.dickbaldwin.com/java/Java310.htm">310</a> Java 2D 
	Graphics, The Shape Interface, Part 2</li>
	<li><a href="http://www.dickbaldwin.com/java/Java312.htm">312</a> Java 2D 
	Graphics, Solid Color Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java314.htm">314</a> Java 2D 
	Graphics, Gradient Color Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java316.htm">316</a> Java 2D 
	Graphics, Texture Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java318.htm">318</a> Java 2D 
	Graphics, The Stroke Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java320.htm">320</a> Java 2D 
	Graphics, The Composite Interface and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java322.htm">322</a> Java 2D 
	Graphics, The Composite Interface, GradientPaint, and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java324.htm">324</a> Java 2D 
	Graphics, The Color Constructors and Transparency</li>
	<li><a href="http://www.developer.com/java/other/article.php/2114451">2100</a> 
	Understanding Properties in Java and C#</li>
	<li><a href="http://www.developer.com/java/other/article.php/3782471">340</a> 
	Multimedia Programming with Java, Getting Started</li>
	<li><a href="http://www.developer.com/java/other/article.php/3788086">342</a> 
	Getting Started with the Turtle Class:&nbsp; Multimedia Programming with Java</li>
	<li><a href="http://www.developer.com/java/other/article.php/3791291">344</a> Continuing with the SimpleTurtle 
	Class:&nbsp; Multimedia Programming with Java</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the programs discussed in this lesson are shown in
Listing 5 and Listing 6 below.<p>
<b><a name="Listing_5">Listing 5</a>. Source code for the SimpleTurtle class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import javax.swing.*;
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.util.Observer;
import java.util.Random;

/**
 * Class that represents a Logo-style turtle.  The turtle
 * starts off facing north.
 * A turtle can have a name, has a starting x and y
 * position, has a heading, has a width, has a height,
 * has a visible flag, has a body color, can have a shell
 * color, and has a pen.
 * The turtle will not go beyond the model display or
 * picture boundaries.
 *
 * You can display this turtle in either a picture or in
 * a class that implements ModelDisplay.
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class SimpleTurtle{
  ///////////////// fields ////////////////////////

  /** count of the number of turtles created */
  private static int numTurtles = 0;

  /** array of colors to use for the turtles */
  private static Color[] colorArray = {Color.green,
              Color.cyan,new Color(204,0,204),Color.gray};

  /** who to notify about changes to this turtle */
  private ModelDisplay modelDisplay = null;

  /** picture to draw this turtle on */
  private Picture picture = null;

  /** width of turtle in pixels */
  private int width = 15;

  /** height of turtle in pixels */
  private int height = 18;

  /** current location in x (center) */
  private int xPos = 0;

  /** current location in y (center) */
  private int yPos = 0;

  /** heading angle */
  private double heading = 0;  // default is facing north

  /** pen to use for this turtle */
  private Pen pen = new Pen();

  /** color to draw the body in */
  private Color bodyColor = null;

  /** color to draw the shell in */
  private Color shellColor = null;

  /** color of information string */
  private Color infoColor = Color.black;

  /** flag to say if this turtle is visible */
  private boolean visible = true;

  /** flag to say if should show turtle info */
  private boolean showInfo = false;

  /** the name of this turtle */
  private String name = "No name";

  ////////////////// constructors ///////////////////

  /**
   * Constructor that takes the x and y position for the
   * turtle
   * @param x the x pos
   * @param y the y pos
   */
  public SimpleTurtle(int x, int y){
    xPos = x;
    yPos = y;
    bodyColor =
               colorArray[numTurtles % colorArray.length];
    setPenColor(bodyColor);
    numTurtles++;
  }//end constructor

  /**
   * Constructor that takes the x and y position and the
   * model displayer
   * @param x the x pos
   * @param y the y pos
   * @param display the model display
   */
  public SimpleTurtle(int x, int y, ModelDisplay display){
    this(x,y); // invoke constructor that takes x and y
    modelDisplay = display;
    display.addModel(this);
  }//end constructor

  /**
   * Constructor that takes a model display and adds
   * a turtle in the middle of it
   * @param display the model display
   */
  public SimpleTurtle(ModelDisplay display){
    // invoke constructor that takes x and y
    this((int) (display.getWidth() / 2),
         (int) (display.getHeight() / 2));
    modelDisplay = display;
    display.addModel(this);
  }//end constructor

  /**
   * Constructor that takes the x and y position and the
   * picture to draw on
   * @param x the x pos
   * @param y the y pos
   * @param picture the picture to draw on
   */
  public SimpleTurtle(int x, int y, Picture picture){
    this(x,y); // invoke constructor that takes x and y
    this.picture = picture;
    this.visible = false;//default is not to see turtle
  }//end constructor

  /**
   * Constructor that takes the
   * picture to draw on and will appear in the middle
   * @param picture the picture to draw on
   */
  public SimpleTurtle(Picture picture){
    // invoke constructor that takes x and y
    this((int) (picture.getWidth() / 2),
         (int) (picture.getHeight() / 2));
    this.picture = picture;
    this.visible = false;//default is not to see turtle
  }//end constructor

  //////////////////// methods /////////////////////////

  /**
   * Get the distance from the passed x and y location
   * @param x the x location
   * @param y the y location
   */
  public double getDistance(int x, int y){
    int xDiff = x - xPos;
    int yDiff = y - yPos;
    return (Math.sqrt((xDiff * xDiff) + (yDiff * yDiff)));
  }//end getDistance

  /**
   * Method to turn to face another simple turtle
   */
  public void turnToFace(SimpleTurtle turtle){
    turnToFace(turtle.xPos,turtle.yPos);
  }//turnToFace

   /**
   * Method to turn towards the given x and y
   * @param x the x to turn towards
   * @param y the y to turn towards
   */
  public void turnToFace(int x, int y){
    double dx = x - this.xPos;
    double dy = y - this.yPos;
    double arcTan = 0.0;
    double angle = 0.0;

    // avoid a divide by 0
    if (dx == 0){
      // if below the current turtle
      if (dy &gt; 0) heading = 180;

      // if above the current turtle
      else if (dy &lt; 0) heading = 0;
    }
    // dx isn't 0 so can divide by it
    else{
      arcTan = Math.toDegrees(Math.atan(dy/dx));
      if (dx &lt; 0) heading = arcTan - 90;
      else heading = arcTan + 90;
    }//end else

    // notify the display that we need to repaint
    updateDisplay();
  }//end turnToFace

  /**
   * Method to get the picture for this simple turtle
   * @return the picture for this turtle (may be null)
   */
  public Picture getPicture() { return this.picture; }

  /**
   * Method to set the picture for this simple turtle
   * @param pict the picture to use
   */
  public void setPicture(Picture pict){
    this.picture = pict;
  }//end setPicture

  /**
   * Method to get the model display for this simple
   * turtle.
   * @return the model display if there is one else null
   */
  public ModelDisplay getModelDisplay(){
    return this.modelDisplay;
  }//end getModelDisplay

  /**
   * Method to set the model display for this simple
   * turtle.
   * @param theModelDisplay the model display to use
   */
  public void setModelDisplay(
                            ModelDisplay theModelDisplay){
    this.modelDisplay = theModelDisplay;
  }//end setModelDisplay

  /**
   * Method to get value of show info
   * @return true if should show info, else false
   */
  public boolean getShowInfo(){return this.showInfo;}

  /**
   * Method to show the turtle information string
   * @param value the value to set showInfo to
   */
  public void setShowInfo(boolean value){
    this.showInfo = value;
  }//end setShowInfo

  /**
   * Method to get the shell color
   * @return the shell color
   */
  public Color getShellColor(){
    Color color = null;
    if(this.shellColor == null && this.bodyColor != null)
      color = bodyColor.darker();
    else color = this.shellColor;
    return color;
  }//end getShellColor

  /**
   * Method to set the shell color
   * @param color the color to use
   */
  public void setShellColor(Color color){
    this.shellColor = color;
  }//setShellColor

  /**
   * Method to get the body color
   * @return the body color
   */
  public Color getBodyColor(){return this.bodyColor;}

  /**
   * Method to set the body color which
   * will also set the pen color
   * @param color the color to use
   */
  public void setBodyColor(Color color){
    this.bodyColor = color;
    setPenColor(this.bodyColor);
  }//end setBodyColor

  /**
   * Method to set the color of the turtle.
   * This will set the body color
   * @param color the color to use
   */
  public void setColor(Color color){
    this.setBodyColor(color);
  }//end setColor

  /**
   * Method to get the information color
   * @return the color of the information string
   */
  public Color getInfoColor(){return this.infoColor;}

  /**
   * Method to set the information color
   * @param color the new color to use
   */
  public void setInfoColor(Color color){
    this.infoColor = color;
  }//setInfoColor

  /**
   * Method to return the width of this object
   * @return the width in pixels
   */
  public int getWidth(){return this.width;}

  /**
   * Method to return the height of this object
   * @return the height in pixels
   */
  public int getHeight(){return this.height;}

  /**
   * Method to set the width of this object
   * @param theWidth in width in pixels
   */
  public void setWidth(int theWidth){
    this.width = theWidth;
  }//end setWidth

  /**
   * Method to set the height of this object
   * @param theHeight the height in pixels
   */
  public void setHeight(int theHeight){
    this.height = theHeight;
  }//end setHeight

  /**
   * Method to get the current x position
   * @return the x position (in pixels)
   */
  public int getXPos(){return this.xPos;}

  /**
   * Method to get the current y position
   * @return the y position (in pixels)
   */
  public int getYPos(){return this.yPos;}

  /**
   * Method to get the pen
   * @return the pen
   */
  public Pen getPen(){return this.pen;}

  /**
   * Method to set the pen
   * @param thePen the new pen to use
   */
  public void setPen(Pen thePen){this.pen = thePen;}

  /**
   * Method to check if the pen is down
   * @return true if down else false
   */
  public boolean isPenDown(){return this.pen.isPenDown();}

  /**
   * Method to set the pen down boolean variable
   * @param value the value to set it to
   */
  public void setPenDown(boolean value){
    this.pen.setPenDown(value);
  }//end setPenDown

  /**
   * Method to lift the pen up
   */
  public void penUp(){this.pen.setPenDown(false);}

  /**
   * Method to set the pen down
   */
  public void penDown(){this.pen.setPenDown(true);}

  /**
   * Method to get the pen color
   * @return the pen color
   */
  public Color getPenColor(){return this.pen.getColor();}

  /**
   * Method to set the pen color
   * @param color the color for the pen ink
   */
  public void setPenColor(Color color){
    this.pen.setColor(color);
  }//end setPenColor

  /**
   * Method to set the pen width
   * @param width the width to use in pixels
   */
  public void setPenWidth(int width){
    this.pen.setWidth(width);
  }//end setPenWidth

  /**
   * Method to get the pen width
   * @return the width of the pen in pixels
   */
  public int getPenWidth(){return this.pen.getWidth();}

  /**
   * Method to clear the path (history of
   * where the turtle has been)
   */
  public void clearPath(){
    this.pen.clearPath();
  }//end clearPath

  /**
   * Method to get the current heading
   * @return the heading in degrees
   */
  public double getHeading(){return this.heading;}

  /**
   * Method to set the heading
   * @param heading the new heading to use
   */
  public void setHeading(double heading){
    this.heading = heading;
  }//end setHeading

  /**
   * Method to get the name of the turtle
   * @return the name of this turtle
   */
  public String getName(){return this.name;}

  /**
   * Method to set the name of the turtle
   * @param theName the new name to use
   */
  public void setName(String theName){
    this.name = theName;
  }//end setName

  /**
   * Method to get the value of the visible flag
   * @return true if visible else false
   */
  public boolean isVisible(){return this.visible;}

  /**
   * Method to hide the turtle (stop showing it)
   * This doesn't affect the pen status
   */
  public void hide(){this.setVisible(false);}

  /**
   * Method to show the turtle (doesn't affect
   * the pen status
   */
  public void show(){this.setVisible(true);}

  /**
   * Method to set the visible flag
   * @param value the value to set it to
   */
  public void setVisible(boolean value){
    // if the turtle wasn't visible and now is
    if (visible == false && value == true){
      // update the display
      this.updateDisplay();
    }//end if

    // set the visibile flag to the passed value
    this.visible = value;
  }//end setVisible

  /**
   * Method to update the display of this turtle and
   * also check that the turtle is in the bounds
   */
  public synchronized void updateDisplay(){
    // check that x and y are at least 0
    if (xPos &lt; 0) xPos = 0;
    if (yPos &lt; 0) yPos = 0;

    // if picture
    if (picture != null){
      if (xPos &gt;= picture.getWidth())
        xPos = picture.getWidth() - 1;
      if (yPos &gt;= picture.getHeight())
        yPos = picture.getHeight() - 1;
      Graphics g = picture.getGraphics();
      paintComponent(g);
    }//end if
    else if (modelDisplay != null){
      if (xPos &gt;= modelDisplay.getWidth())
        xPos = modelDisplay.getWidth() - 1;
      if (yPos &gt;= modelDisplay.getHeight())
        yPos = modelDisplay.getHeight() - 1;
      modelDisplay.modelChanged();
    }//end else if
  }//end updateDisplay

  /**
   * Method to move the turtle foward 100 pixels
   */
  public void forward(){forward(100);}

  /**
   * Method to move the turtle forward the given number
   * of pixels
   * @param pixels the number of pixels to walk forward in
   * the heading direction
   */
  public void forward(int pixels){
    int oldX = xPos;
    int oldY = yPos;

    // change the current position
    xPos = oldX + (int)(pixels * Math.sin(Math.toRadians(
                                               heading)));
    yPos = oldY + (int)(pixels * -Math.cos(Math.toRadians(
                                               heading)));

    // add a move from the old position to the new
    // position to the pen
    pen.addMove(oldX,oldY,xPos,yPos);

    // update the display to show the new line
    updateDisplay();
  }//end forward

  /**
   * Method to go backward by 100 pixels
   */
  public void backward(){backward(100);}

  /**
   * Method to go backward a given number of pixels
   * @param pixels the number of pixels to walk backward
   */
  public void backward(int pixels){
    forward(-pixels);
  }//end backward

  /**
   * Method to move to turtle to the given x and y
   * location
   * @param x the x value to move to
   * @param y the y value to move to
   */
  public void moveTo(int x, int y){
    this.pen.addMove(xPos,yPos,x,y);
    this.xPos = x;
    this.yPos = y;
    this.updateDisplay();
  }//end moveTo

  /**
   * Method to turn left
   */
  public void turnLeft(){this.turn(-90);}

  /**
   * Method to turn right
   */
  public void turnRight(){this.turn(90);}

  /**
   * Method to turn the turtle the passed degrees
   * use negative to turn left and pos to turn right
   * @param degrees the amount to turn in degrees
   */
  public void turn(int degrees){
    this.heading = (heading + degrees) % 360;
    this.updateDisplay();
  }//end turn

  /**
   * Method to draw a passed picture at the current turtle
   * location and rotation in a picture or model display
   * @param dropPicture the picture to drop
   */
  public synchronized void drop(Picture dropPicture){
    Graphics2D g2 = null;

    // only do this if drawing on a picture
    if (picture != null)
      g2 = (Graphics2D) picture.getGraphics();
    else if (modelDisplay != null)
      g2 = (Graphics2D) modelDisplay.getGraphics();

    // if g2 isn't null
    if (g2 != null){

      // save the current tranform
      AffineTransform oldTransform = g2.getTransform();

      // rotate to turtle heading and translate to xPos
      // and yPos
      g2.rotate(Math.toRadians(heading),xPos,yPos);

      // draw the passed picture
      g2.drawImage(dropPicture.getImage(),xPos,yPos,null);

      // reset the tranformation matrix
      g2.setTransform(oldTransform);

      //  draw the pen
      pen.paintComponent(g2);
    }
  }//end drop

  /**
   * Method to paint the turtle
   * @param g the graphics context to paint on
   */
  public synchronized void paintComponent(Graphics g){
    // cast to 2d object
    Graphics2D g2 = (Graphics2D) g;

    // if the turtle is visible
    if (visible){
      // save the current tranform
      AffineTransform oldTransform = g2.getTransform();

      // rotate the turtle and translate to xPos and yPos
      g2.rotate(Math.toRadians(heading),xPos,yPos);

      // determine the half width and height of the shell
      int halfWidth = (int) (width/2); // of shell
      int halfHeight = (int) (height/2); // of shell
      int quarterWidth = (int) (width/4); // of shell
      int thirdHeight = (int) (height/3); // of shell
      int thirdWidth = (int) (width/3); // of shell

      // draw the body parts (head)
      g2.setColor(bodyColor);
      g2.fillOval(xPos - quarterWidth,
                  yPos - halfHeight - (int) (height/3),
                  halfWidth, thirdHeight);
      g2.fillOval(xPos - (2 * thirdWidth),
                  yPos - thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos - (int) (1.6 * thirdWidth),
                  yPos + thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos + (int) (1.3 * thirdWidth),
                  yPos - thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos + (int) (0.9 * thirdWidth),
                  yPos + thirdHeight,
                  thirdWidth,thirdHeight);

      // draw the shell
      g2.setColor(getShellColor());
      g2.fillOval(xPos - halfWidth,
                  yPos - halfHeight, width, height);

      // draw the info string if the flag is true
      if (showInfo) drawInfoString(g2);

      // reset the tranformation matrix
      g2.setTransform(oldTransform);
    }//end if

    //  draw the pen
    pen.paintComponent(g);
  }//end paintComponent

  /**
   * Method to draw the information string
   * @param g the graphics context
   */
  public synchronized void drawInfoString(Graphics g){
    g.setColor(infoColor);
    g.drawString(
             this.toString(),xPos + (int) (width/2),yPos);
  }//end drawInfoString

  /**
   * Method to return a string with information
   * about this turtle
   * @return a string with information about this object
   */
  public String toString(){
    return this.name + " turtle at " + this.xPos + ", " +
      this.yPos + " heading " + this.heading + ".";
  }//end toString

} // end of class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Source code for the program named Java346a. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Java346a
 * The purpose of this program is to illustrate the use
 * of property setter and getter methods of the
 * SimpleTurtle class.
 *
 * Draws two turtles in a World and sets property values
 * on each of them.
 */
import java.awt.Color;
public class Main{
  public static void main(String[] args){
    World mars = new World(400,500);
    Turtle joe = new Turtle(mars);
    joe.setShellColor(Color.RED);
    joe.setPenColor(Color.BLUE);
    joe.setPenWidth(2);
    joe.forward(90);
    joe.turn(-30);
    joe.forward();
    
    Turtle bill = new Turtle(mars);
    bill.moveTo(bill.getXPos()-100,bill.getYPos()+100);
    bill.setName("Bill");
    bill.setShowInfo(true);
    bill.setInfoColor(Color.RED);
    bill.setWidth(bill.getWidth() * 2);
    bill.setHeight(bill.getHeight() * 2);
  }//end main

}//end class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2008, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
