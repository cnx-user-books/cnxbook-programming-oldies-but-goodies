<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">
<h2>
Java Sound, An Introduction</h2>
<i>Baldwin presents the first lesson in a new miniseries that will teach you how 
to use the Java Sound API.</i><p><b>Published:</b>&nbsp; January 7, 2003<br><b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
<p>Java Programming Notes # 2004<ul >
<li>
<a href="#Preface">Preface</a></li>
<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Code</a></li>

<li>
<a href="#Run the program">Run the Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Whats Next">What's Next?</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<p>
<font color="#FF0000"><b>What is sound?</b></font></p>
<p>From a human perspective, sound is the sensation that we experience when 
pressure waves impinge upon the small parts contained within our ears.&nbsp; 
Normally, this is the result of pressure waves being transmitted in air.&nbsp; 
However, sound pressure waves are not limited to air.&nbsp; For example, if you 
are an underwater swimmer, sound pressure waves may reach your ear by way of 
water.<p>From the perspective of the <i>Java Sound API,</i> the word <i>Sound</i> takes on a somewhat 
different meaning.&nbsp; However, it is probably fair to say that the ultimate purpose of 
the Sound API is to assist you in  writing  programs that will cause sound pressure 
waves  impinge upon the ears of targeted individuals 
at specific times.<p><font color="#FF0000"><b>What does Sun have to say about 
the API?</b></font><p>
Here is what Sun has to say about the Java Sound API:<blockquote>
<p><i>&quot;The Java Sound API is a low-level API for effecting and controlling input 
and output of audio media. It provides explicit control over the capabilities 
commonly required for audio input and output in a framework that promotes 
extensibility and flexibility.&quot;</i></blockquote>
<p>Sun also tells us:<blockquote>
<p><i>&quot;Java Sound provides the lowest level of audio support on the Java 
platform. It provides a high degree of control over audio-specific 
functionality. ... It does not include sophisticated sound editors and GUI 
tools; rather, it provides a set of capabilities upon which such applications 
can be built. It emphasizes low-level control beyond that commonly expected by 
the end user, who benefits from higher-level interfaces built on top of Java 
Sound.&quot;</i></blockquote>
<p>Thus, your mission as a Java programmer is to use the Sound API to produce 
 
higher-level user interfaces built on top of Java Sound.<p>
<font color="#FF0000"><b>Not a trivial API</b></font><p>There are a number of 
fairly complex issues involved in the use of the Sound API.&nbsp; This tutorial 
lesson will provide a very brief introduction to some of those issues.&nbsp; Future lessons will 
explore many of them in detail.<p>
<b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings and figures while you are reading about
them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at <font color="#000000">
<a href="http://www.DickBaldwin.com">www.DickBaldwin.com</a>.</font>
  <h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>This lesson provides a description of <i>sound</i> from both a physical and a 
programming viewpoint.<p>The lesson introduces the <i>Java Sound API,</i> which 
provides a high degree of control over audio-specific functionality in Java 
programs.<p>It identifies the important packages incorporated in the Sound API 
and explains the difference between the <i>sampled</i> packages and the <i>MIDI</i> 
packages.<p>The lesson provides a description of <i>sampled audio,</i> and 
explains the typical steps used to capture sampled audio.&nbsp; It also explains 
the typical steps used to render sampled audio.<p>Finally, the lesson provides a 
program that you can use to first capture and then to play back audio sound.<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Code</font></h2></center>
<p><font color="#FF0000"><b>Packages</b></font><p>Two significantly different 
types of audio <i>(or sound)</i> data are supported by the API:<ul>
  <li>Sampled audio data</li>
  <li>Musical Instrument Digital Interface (MIDI) data</li>
  </ul>
  <p><font color="#FF0000"><b>Sampled audio data</b></font><p>Sampled audio data can be thought of as a series of digital values that 
  represent the amplitude or intensity of sound pressure waves.&nbsp; This will 
  be the primary topic of the first several lessons in this miniseries.&nbsp; 
  This type of audio data is supported by the following two Java packages:<ul>
    <li>javax.sound.sampled</li>
    <li>javax.sound.sampled.spi </li>
    </ul>
    <p>According to Sun, the first of these two packages <i>&quot;specifies 
    interfaces for capture, mixing, and playback of digital (sampled) audio.&quot;&nbsp; </i>
    I will have more to say about the second <i>(spi)</i> package shortly.<p>
    <font color="#FF0000"><b>MIDI data</b></font><p>
    MIDI data can be thought of as sound <i>(usually musical sound or special 
    sound effects)</i> created 
    from a recipe.&nbsp; This type of audio data is covered by the following two 
    Java packages:<ul>
      <li>javax.sound.midi</li>
      <li>javax.sound.midi.spi </li>
      </ul>
      <p>According to Sun, the first of these two packages <i>&quot;provides 
      interfaces for MIDI synthesis, sequencing, and event transport.&quot;</i><p>
      <font color="#FF0000"><b>What about the spi packages?</b></font><p>
      According to Sun, each of the spi packages <i>&quot;permits service providers 
      (as opposed to application developers) to create custom components that 
      can be installed on the system&quot;</i><p>Because the two types of audio data 
      are so significantly different, I will defer any detailed discussion of 
      MIDI audio data until later.<p><font color="#FF0000"><b>What is sampled 
      data?</b></font><p>I am going to refer you to another publication of mine 
      entitled <a href="http://www.dickbaldwin.com/dsp/Dsp00104.htm">Digital 
      Signal Processing (DSP) in Java, Sampled Time Series</a> for a discussion 
      of sampled data in general.&nbsp; Because DSP techniques are often used in 
      the processing of sampled audio data, you may also be interested in my 
      other publications on <a href="http://www.dickbaldwin.com/tocdsp.htm">DSP</a> 
      as well.<p><font color="#FF0000"><b>What is sampled audio data?</b></font><p>
      Sampled audio data is a special case of  sampled data in general.&nbsp; For 
      sampled audio data, a series of 
      digital numeric values is used to represent the intensity of a sound 
      pressure wave.&nbsp; In other words, a set of numeric values is used to 
      represent the actual waveform of a sound pressure wave.&nbsp; Typically, 
      the sound pressure wave <i>(or an electronic representation thereof)</i> 
      is sampled at a 
      uniform series of points in time.<p>
      <font color="#FF0000"><b>An example</b></font><p>
      For example, the graph in Figure 1 might represent a set of sampled audio 
      data values  produced by a wide-band noise generator, such as the noise 
      at an airport.<p align="center">
      <img border="0" src="java2004a.gif" width="393" height="71"><p align="center">
      Figure 1 Sampled audio data<p>
      You can think of Figure 1 as the result of connecting a series of dots 
      with short straight lines.&nbsp; The vertical position of each dot 
      relative to the red horizontal axis would represent the intensity of a 
      sound wave at a particular point in time.&nbsp; The location of each dot along the horizontal axis would 
      represent the point in time at which the measurement of intensity was 
      made.<p>
      <font color="#FF0000"><b>An audio compact disk (CD)</b></font><p>
      As another example, the data on an audio CD is sampled audio 
      data.&nbsp; As I understand it, an electronic representation of the sound pressure waves produced by the 
      artist is sampled 44,100 times per second.&nbsp; Each sample is 
      represented as a 16-bit signed integer value.<p>
      <font color="#FF0000"><b>Other sources of sampled audio data</b></font><p>
      Although sampled audio data most commonly results from actually sampling 
      sound pressure waves, such data could be synthetically generated by a 
      computer.<p>
      For example, computerized speech synthesizers can be used to produce 
      sampled audio data.&nbsp; When that data is converted to sound pressure 
      waves <i>(rendered),</i> which impinge on a human ear, the human 
      experiences the sensation of sound representing human speech.<p>
      According to Sun:<blockquote>
  <p>
      <i>&quot;The term &quot;sampled audio&quot; refers to the type of data, not its origin. 
      Sampled audio can be thought of as the sound itself, whereas MIDI data can 
      be thought of as a recipe for creating musical sound.) &quot;</i></blockquote>
<p>
      <font color="#FF0000"><b>Capturing sampled audio</b></font><p>
      Typically sampled audio data is captured in two steps:<ul>
  <li>Use a microphone to convert the sound pressure waves to electrical voltages that 
  mimic the waveform of the sound pressure wave.</li>
  <li>Use an analog-to-digital converter to measure the voltage at specific 
  points in time and to convert that measurement to a digital value.</li>
  </ul>
  <p>
      <font color="#FF0000"><b>Rendering sampled audio</b></font><p>
      The rendering of sampled audio data is also typically accomplished 
      in two steps:<ul>
    <li>Use a digital-to-analog converter to convert a series of digital values 
    into an analog voltage whose amplitude waveform reflects the digital values.</li>
    <li>Apply this voltage to a speaker, a set of headphones, or some other 
    similar device that converts the analog voltage to sound pressure waves that mimic the waveform 
    of the voltage.</li>
    </ul>
<center>
<h2>
<a NAME="Run the program"></a>Run the Program</h2></center>
<p>
      At this point, you may find it useful to compile and run the program in 
      Listing 1 near the end of the lesson.<blockquote>
    <p align="left">
      <i>(I have provided this sample program with very little in the way of an 
      explanation as to how the program works.&nbsp; I wanted to give you some 
      code to get you started using the API.</i>&nbsp; <i>I will explain this 
      program, or other very similar programs in future lessons.)</i></blockquote>
    <p>
      <font color="#FF0000"><b>Capture and playback audio data</b></font><p>
      This program demonstrates the ability to capture audio data from a 
      microphone and to play it back through the speakers on your computer.&nbsp; The usage 
      instructions are simple:<ul>
  <li>Start the program running.&nbsp; A simple GUI will appear on the screen.</li>
  <li>Click the <b>Capture</b> button and speak into the microphone.</li>
  <li>Click the <b>Stop</b> button to terminate capturing data.</li>
  <li>Click the <b>Playback</b> button to play your captured voice back through 
  the system speakers.</li>
  </ul>
    <p>
      If you don't hear anything during playback, you may need to increase your speaker volume.<p>
      This program saves the data that it captures in memory, so be careful.&nbsp; 
      If you attempt to save too much data, you may run out of memory.<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I provided a description of <i>sound</i> from both a physical 
and a programming viewpoint.<p>I introduced the <i>Java Sound API,</i> which 
provides a high degree of control over audio-specific functionality in Java 
programs.<p>I identified the important packages incorporated in the Sound API, 
and explained the difference between the <i>sampled</i> packages and the <i>MIDI</i> 
packages.<p>I provided a description of <i>sampled audio,</i> and explained the 
typical steps used to capture sampled audio.&nbsp; I also explained the typical 
steps used to render sampled audio into sound pressure waves.<p>Finally, I 
provided a relatively simple program that you can use to first capture and then 
to playback audio sound.<h2 align="center"><a name="Whats Next">What's Next?</a></h2>
  <p>In the next lesson, I will explain the overall architecture of the Sound 
  API, introducing such terms and concepts as:</p>
<ul>
  <li>Lines</li>
  <li>TargetDataLine</li>
  <li>SourceDataLine</li>
  <li>Mixers</li>
  <li>Ports</li>
  <li>Audio format</li>
  <li>File format</li>
  <li>Audio stream</li>
  <li>Clip</li>
  <li>Controls</li>
</ul>
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is shown in Listing 1.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>/*File AudioCapture01.java
This program demonstrates the capture
and subsequent playback of audio data.

A GUI appears on the screen containing
the following buttons:
Capture
Stop
Playback

Input data from a microphone is
captured and saved in a
ByteArrayOutputStream object when the
user clicks the Capture button.

Data capture stops when the user clicks
the Stop button.

Playback begins when the user clicks
the Playback button.

Tested using SDK 1.4.0 under Win2000
**************************************/

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.sound.sampled.*;

public class AudioCapture01
                        extends JFrame{

  boolean stopCapture = false;
  ByteArrayOutputStream
                 byteArrayOutputStream;
  AudioFormat audioFormat;
  TargetDataLine targetDataLine;
  AudioInputStream audioInputStream;
  SourceDataLine sourceDataLine;

  public static void main(
                        String args[]){
    new AudioCapture01();
  }//end main

  public AudioCapture01(){//constructor
    final JButton captureBtn =
                new JButton("Capture");
    final JButton stopBtn =
                   new JButton("Stop");
    final JButton playBtn =
               new JButton("Playback");

    captureBtn.setEnabled(true);
    stopBtn.setEnabled(false);
    playBtn.setEnabled(false);

    //Register anonymous listeners
    captureBtn.addActionListener(
      new ActionListener(){
        public void actionPerformed(
                        ActionEvent e){
          captureBtn.setEnabled(false);
          stopBtn.setEnabled(true);
          playBtn.setEnabled(false);
          //Capture input data from the
          // microphone until the Stop
          // button is clicked.
          captureAudio();
        }//end actionPerformed
      }//end ActionListener
    );//end addActionListener()
    getContentPane().add(captureBtn);

    stopBtn.addActionListener(
      new ActionListener(){
        public void actionPerformed(
                        ActionEvent e){
          captureBtn.setEnabled(true);
          stopBtn.setEnabled(false);
          playBtn.setEnabled(true);
          //Terminate the capturing of
          // input data from the
          // microphone.
          stopCapture = true;
        }//end actionPerformed
      }//end ActionListener
    );//end addActionListener()
    getContentPane().add(stopBtn);

    playBtn.addActionListener(
      new ActionListener(){
        public void actionPerformed(
                        ActionEvent e){
          //Play back all of the data
          // that was saved during
          // capture.
          playAudio();
        }//end actionPerformed
      }//end ActionListener
    );//end addActionListener()
    getContentPane().add(playBtn);

    getContentPane().setLayout(
                     new FlowLayout());
    setTitle("Capture/Playback Demo");
    setDefaultCloseOperation(
                        EXIT_ON_CLOSE);
    setSize(250,70);
    setVisible(true);
  }//end constructor

  //This method captures audio input
  // from a microphone and saves it in
  // a ByteArrayOutputStream object.
  private void captureAudio(){
    try{
      //Get everything set up for
      // capture
      audioFormat = getAudioFormat();
      DataLine.Info dataLineInfo =
                new DataLine.Info(
                  TargetDataLine.class,
                   audioFormat);
      targetDataLine = (TargetDataLine)
                   AudioSystem.getLine(
                         dataLineInfo);
      targetDataLine.open(audioFormat);
      targetDataLine.start();

      //Create a thread to capture the
      // microphone data and start it
      // running.  It will run until
      // the Stop button is clicked.
      Thread captureThread =
                new Thread(
                  new CaptureThread());
      captureThread.start();
    } catch (Exception e) {
      System.out.println(e);
      System.exit(0);
    }//end catch
  }//end captureAudio method

  //This method plays back the audio
  // data that has been saved in the
  // ByteArrayOutputStream
  private void playAudio() {
    try{
      //Get everything set up for
      // playback.
      //Get the previously-saved data
      // into a byte array object.
      byte audioData[] =
                 byteArrayOutputStream.
                         toByteArray();
      //Get an input stream on the
      // byte array containing the data
      InputStream byteArrayInputStream
            = new ByteArrayInputStream(
                            audioData);
      AudioFormat audioFormat =
                      getAudioFormat();
      audioInputStream =
        new AudioInputStream(
          byteArrayInputStream,
          audioFormat,
          audioData.length/audioFormat.
                       getFrameSize());
      DataLine.Info dataLineInfo =
                new DataLine.Info(
                  SourceDataLine.class,
                          audioFormat);
      sourceDataLine = (SourceDataLine)
                   AudioSystem.getLine(
                         dataLineInfo);
      sourceDataLine.open(audioFormat);
      sourceDataLine.start();

      //Create a thread to play back
      // the data and start it
      // running.  It will run until
      // all the data has been played
      // back.
      Thread playThread =
          new Thread(new PlayThread());
      playThread.start();
    } catch (Exception e) {
      System.out.println(e);
      System.exit(0);
    }//end catch
  }//end playAudio

  //This method creates and returns an
  // AudioFormat object for a given set
  // of format parameters.  If these
  // parameters don't work well for
  // you, try some of the other
  // allowable parameter values, which
  // are shown in comments following
  // the declarations.
  private AudioFormat getAudioFormat(){
    float sampleRate = 8000.0F;
    //8000,11025,16000,22050,44100
    int sampleSizeInBits = 16;
    //8,16
    int channels = 1;
    //1,2
    boolean signed = true;
    //true,false
    boolean bigEndian = false;
    //true,false
    return new AudioFormat(
                      sampleRate,
                      sampleSizeInBits,
                      channels,
                      signed,
                      bigEndian);
  }//end getAudioFormat
//===================================//

//Inner class to capture data from
// microphone
class CaptureThread extends Thread{
  //An arbitrary-size temporary holding
  // buffer
  byte tempBuffer[] = new byte[10000];
  public void run(){
    byteArrayOutputStream =
           new ByteArrayOutputStream();
    stopCapture = false;
    try{//Loop until stopCapture is set
        // by another thread that
        // services the Stop button.
      while(!stopCapture){
        //Read data from the internal
        // buffer of the data line.
        int cnt = targetDataLine.read(
                    tempBuffer,
                    0,
                    tempBuffer.length);
        if(cnt > 0){
          //Save data in output stream
          // object.
          byteArrayOutputStream.write(
                   tempBuffer, 0, cnt);
        }//end if
      }//end while
      byteArrayOutputStream.close();
    }catch (Exception e) {
      System.out.println(e);
      System.exit(0);
    }//end catch
  }//end run
}//end inner class CaptureThread
//===================================//
//Inner class to play back the data
// that was saved.
class PlayThread extends Thread{
  byte tempBuffer[] = new byte[10000];

  public void run(){
    try{
      int cnt;
      //Keep looping until the input
      // read method returns -1 for
      // empty stream.
      while((cnt = audioInputStream.
        read(tempBuffer, 0,
            tempBuffer.length)) != -1){
        if(cnt > 0){
          //Write data to the internal
          // buffer of the data line
          // where it will be delivered
          // to the speaker.
          sourceDataLine.write(
                   tempBuffer, 0, cnt);
        }//end if
      }//end while
      //Block and wait for internal
      // buffer of the data line to
      // empty.
      sourceDataLine.drain();
      sourceDataLine.close();
    }catch (Exception e) {
      System.out.println(e);
      System.exit(0);
    }//end catch
  }//end run
}//end inner class PlayThread
//===================================//

}//end outer class AudioCapture01.java

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>
<p>
   <p>
   <hr size=3 width="100%" align=center>
<p>Copyright 2002, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited. <h4>
<a NAME="About the author"></a>About the author</h4>
<i><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a> is a college professor (at Austin Community College in Austin, TX) and private consultant whose primary focus is a combination of Java, C#, and XML. In addition to the many platform and/or language independent benefits of Java and C# applications, he believes that a combination of Java, C#, and XML will become the primary driving force in the delivery of structured information on the Web.</i><br><p><i>Richard has participated in numerous consulting projects and he
frequently provides onsite training at the high-tech companies located
in and around Austin, Texas.&nbsp; He is the author of Baldwin's Programming <a href="http://www.DickBaldwin.com">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring programmers.
He has also published articles in JavaPro magazine.</i> <p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i> <p><i><a href="mailto:Baldwin@DickBaldwin.com">Baldwin@DickBaldwin.com</a></i> <p>-end- </body></html>