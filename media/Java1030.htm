<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Alignment Properties and BoxLayout, Part 1</h2></center>
<b><i>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1030
<p>October 9, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#A Sample BoxLayout">A Sample BoxLayout</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's Next">What's Next?</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures while you are reading about them, without
losing the place where you are reading.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is recommended that prior to embarking on a study of this set of
lessons, you first study the following lessons on Swing, which you will
find at Gamelan.com.&nbsp; I also maintain a consolidated Table of Contents
at
<i>Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.&nbsp;
The Table of Contents provides links to each of the lessons at Gamelan.com.</font>
<ul>
<li>
The AWT and Swing, A Preview</li>

<li>
Swing and the Delegation Event Model</li>

<li>
Swing, New Event Types in Swing</li>

<li>
Swing, Understanding getContentPane() and other JFrame Layers</li>

<li>
The Swing Package, A Preview of Pluggable Look and Feel</li>

<li>
Swing, Hidden Buttons with Icons, Icon Images, Borders, Tool Tips, Nested
Buttons, and Other Fun Stuff</li>

<li>
Swing, Creating and Using Trees</li>

<li>
Swing, Custom Rendering of Tree Nodes</li>

<li>
Swing, Simplified Lists in Swing</li>

<li>
Swing, Understanding Component MVC Models</li>

<li>
Swing, Custom Rendering of JList Cells</li>

<li>
Swing, Custom List Selection Model for JList Objects</li>
</ul>
The lessons listed above will introduce you to the use of Swing while avoiding
much of the detail included in this series.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">Preview</font></b><b><font color="#FF0000"></font></b>
<p>In this lesson, I will introduce you to the <b>Box</b> container and
the
<b>BoxLayout</b> manager.&nbsp; I will discuss a number of characteristics
of each, and will show you some screen shots that illustrate the use of
the <b>BoxLayout</b> manager.<b><font color="#FF0000"></font></b>
<p><b><font color="#FF0000">The Box container</font></b>
<p><font color="#000000">The <b>Box</b> class can be used to produce a
lightweight container that uses a <b>BoxLayout</b> (see below) object as
its layout manager.</font>
<p><b><font color="#FF0000">Cannot modify the layout manager</font></b>
<p><font color="#000000">Unlike other containers, however, you cannot modify
the layout manager of a <b>Box</b> object.&nbsp; (For example, attempting
to cause the layout manager for a <b>Box</b> to be <b>FlowLayout</b> produces
the following runtime error:&nbsp; <i>java.awt.AWTError: Illegal request.</i></font>
<p><b><font color="#FF0000">Provides important class methods</font></b>
<p><font color="#000000">While the <b>Box</b> class can be used as a container,
perhaps its most useful characteristic is serving as the home for several
class methods that produce invisible&nbsp;<a NAME="GlueAndStruts"></a>components:</font>
<ul>
<li>
<font color="#000000">createGlue()</font></li>

<li>
<font color="#000000">createHorizontalGlue()</font></li>

<li>
<font color="#000000">createHorizontalStrut(int width)</font></li>

<li>
<font color="#000000">createRigidArea(Dimension d)</font></li>

<li>
<font color="#000000">createVerticalGlue()</font></li>

<li>
<font color="#000000">createVerticalStrut(int height)</font></li>
</ul>
<font color="#000000">These invisible components are very useful for controlling
the appearance of component layouts in containers that use <b>BoxLayout</b>.</font>
<p><font color="#000000">I will discuss the use of these invisible components
in a subsequent lesson.</font>
<p><b><font color="#FF0000">Does not extend JComponent</font></b>
<p><font color="#000000">One shortcoming of <b>Box</b> as a container is
that it does not extend <b>JComponent</b>.&nbsp; Rather, it extends <b>Container</b>.&nbsp;
As a result, many capabilities imparted by the <b>JComponent</b> class
(such as the creation of borders) do not apply to a <b>Box</b> container.</font>
<p><b><font color="#FF0000">The BoxLayout manager</font></b>
<p><font color="#000000">While <b>BoxLayout</b> is the default layout manager
for a
<b>Box</b> container, it can also be applied to other containers
as well, such as <b>JPanel</b>.</font>
<p><b><font color="#FF0000">Places components in a line</font></b>
<p><font color="#000000"><b>BoxLayout</b> is a layout manager that makes
it possible to position components in either a horizontal line or in a
vertical line.</font>
<p><font color="#000000">The components do not wrap (as in <b>FlowLayout</b>).&nbsp;
Therefore, a group of components in a horizontal or vertical line will
remain in the line when the container is resized.</font>
<p><b><font color="#FF0000">Nested BoxLayout objects</font></b>
<p><font color="#000000">You can nest containers having a <b>BoxLayout</b>
manager to achieve groupings of horizontal and vertical lines of components.&nbsp;
I will provide an illustration of nesting <b>JPanel</b> objects using <b>BoxLayout</b>
in a subsequent lesson.</font>
<p><font color="#000000">The <b>BoxLayout</b> manager places each of its
managed components from left to right, or from top to bottom in the order
that they are placed in the container.</font>
<p><b><font color="#FF0000">BoxLayout constructor</font></b>
<p>The constructor for <b>BoxLayout</b> is a little unusual.&nbsp; As shown
below, you must pass two parameters to the constructor when you instantiate
the object.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Arial Narrow"><font size=-1>public
BoxLayout(Container target,</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
int axis)</font></font>
<p><font face="Arial Narrow"><font size=-1>Creates a layout manager that
will lay out components either left to right or top to bottom, as specified
in the axis parameter.</font></font>
<p><font face="Arial Narrow"><font size=-1>Parameters:</font></font>
<ul>
<li>
<font face="Arial Narrow"><font size=-1>target - the container that needs
to be laid out</font></font></li>

<li>
<font face="Arial Narrow"><font size=-1>axis - the axis to lay out components
along. For left-to-right layout, specify BoxLayout.X_AXIS; for top-to-bottom
layout, specify BoxLayout.Y_AXIS</font></font></li>
</ul>
</td>
</tr>
</table>

<p>The first parameter is a reference to the container whose layout will
be managed by the layout manager (this is the unusual part).
<p>The second parameter specifies whether the components will be arranged
in a horizontal line or a vertical line.
<p><b><font color="#FF0000">Setting the alignment</font></b>
<p><font color="#000000">Component alignment is very important in <b>BoxLayout</b>.&nbsp;
Here is what Sun has to say about alignment in a <b>BoxLayout</b>.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font color="#000000">BoxLayout
attempts to arrange components at their preferred widths (for left to right
layout) or heights (for top to bottom layout).</font>
<p><font color="#000000">For a left to right layout, if not all the components
are the same height, BoxLayout attempts to make all the components as high
as the highest component. If that's not possible for a particular component,
then BoxLayout aligns that component vertically, according to the component's
Y alignment.&nbsp;</font>
<p><font color="#000000">By default, a component has an Y alignment of
0.5, which means that the vertical center of the component should have
the same Y coordinate as the vertical centers of other components with
0.5 Y alignment.&nbsp;</font>
<p><font color="#000000">Similarly, for a vertical layout, BoxLayout attempts
to make all components in the column as wide as the widest component; if
that fails, it aligns them horizontally according to their X alignments.&nbsp;</font></td>
</tr>
</table>

<p><b><font color="#FF0000">Set and get alignment property</font></b>
<p>The <b>JComponent</b> class provides <i>setter</i> and <i>getter</i>
methods for controlling the values of the <b>alignmentX</b> and <b>alignmentY</b>
properties of objects that extend <b>JComponent</b>.&nbsp; These methods
expect to receive a <b>float</b> parameter ranging from 0.0 to 1.0.
<p>A Y-value of 0.0 represents alignment at the bottom, while a Y-value
of 1.0 represents alignment at the top.
<p>An X-value of 0.0 represents alignment at the left, while an X-value
of 1.0 represents alignment on the right.
<p>Values in between 0.0 and 1.0 represent proportional movement from bottom
to top, or from left to right.&nbsp; A value of 0.5 represents center alignment
in both cases.&nbsp; As mentioned above, the default value for Y alignment
is 0.5.
<center>
<h2>
<a NAME="A Sample BoxLayout"></a><font color="#000000">A Sample BoxLayout</font></h2></center>
Figure 1 shows a screen shot of three buttons and two labels placed in
a <b>JFrame</b> using <b>BoxLayout</b>.&nbsp; The <b>BoxLayout.X_AXIS</b>
constant was used when constructing the <b>BoxLayout</b> to cause the components
to be placed along the horizontal axis.
<center>
<p><img SRC="Java1030A.gif" height=101 width=330>
<p>Figure 1 Screen Shot of Horizontal Box Layout</center>

<p>As you can see, the <b>alignmentY</b> property was used to control the
vertical positions of the five components relative to one another.
<p><font color="#000000">Figure 2 shows a screen shot of the same GUI after
having manually resized it to make it narrower.&nbsp; If you are familiar
with <b>FlowLayout</b>, you will know that performing this manual operation
on a container controlled by <b>FlowLayout</b> would cause the right-most
components to move down to produce a second line of components.</font>
<center>
<p><img SRC="Java1030B.gif" height=196 width=186>
<p>Figure 2 Screen Shot of "Narrowed" Horizontal Box Layout from Figure
1.</center>

<p><font color="#000000">However, as mentioned earlier, resizing a <b>BoxLayout</b>
doesn't have that effect.&nbsp; Rather, the components remain on the specified
axis, even if that means that they get clipped at their ends (as is the
case here).</font>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In this lesson, I have introduced you to the <b>Box</b> container and the
<b>BoxLayout</b>
manager.&nbsp; I have discussed a number of characteristics of each.
<center>
<h2>
<a NAME="What's Next"></a>What's Next?</h2></center>
In the next lesson, I will discuss the code that was used to produce the
screen shots shown above.&nbsp; Following that, I will discuss a variety
of interesting aspects of component alignment as inherited from the <b>JComponent</b>
class.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
