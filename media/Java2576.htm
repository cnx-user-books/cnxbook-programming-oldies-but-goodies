<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2>Introduction to the MIDlet User Interface, A First Look</h2>
<p><i>Learn the fundamentals of user interfaces for MIDlets, how to instantiate 
user interface components, how to cause them to become visible on the cell phone 
screen, the difference between a Screen and a Display, about restrictive 
constraints and modifier flags, about the MIDlet user interface class hierarchy, 
and about the methods of the various classes that can be used to manipulate user 
input and output.</i></p>
<p><b>Published:</b>&nbsp; February 12, 2008<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 2576</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#Discussion_and_Sample_Code">Discussion and sample code</a><ul>
	<li><a href="#Methods_defined_in_the_Displayable_class">Methods defined in the Displayable class</a></li>
	<li><a href="#Methods_defined_in_the_Display_class">Methods defined in the 
	Display class</a></li>
	<li><a href="#Methods_defined_in_the_TextBox_class">Methods defined in the 
	TextBox class</a></li>
</ul>
	</li>
	<li><a href="#Run%20the%20program">Run the programs</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p>This is one in a series of tutorial lessons designed to teach you how to 
write programs using the Sun Java Wireless Toolkit for CLDC.&nbsp; The first lesson 
was titled <i>Getting Started with MIDlets and the Sun Java Wireless Toolkit for 
CLDC</i>.&nbsp; The previous lesson was titled <i>Back to Basics with MIDlets and the 
Sun Java Wireless Toolkit for CLDC (see <a href="#Resources">
Resources</a>)</i>.</p>
<p><font color="#FF0000"><b>What you have learned</b></font></p>
<p>In the first lesson I provided and explained a MIDlet development framework 
that makes experimenting with MIDlet programming easy.&nbsp; In the second 
lesson, I taught you how to capture and display the standard output and the 
error output produced by programs executing in a child process.&nbsp; I also 
applied that knowledge to upgrade the MIDlet development framework from the 
earlier lesson.</p>
<p>In the previous lesson, I tackled two topics.&nbsp; First I taught you how 
the CLDC and the MIDP fit into the grand scheme of things when programming 
MIDlets.&nbsp; Second, I explained and demonstrated the life cycle of a MIDlet.</p>
<p><font color="#FF0000"><b>What you will learn</b></font></p>
<p>In this lesson, I will use an object of the <b>TextBox</b> class to teach you 
the fundamentals of user interfaces for MIDlets.&nbsp; I will show you how to 
instantiate user interface components and how to cause them to become visible on 
the cell phone screen.&nbsp; I will explain the difference between a <b>Screen</b> 
and a <b>Display</b>.&nbsp; I will explain how to use restrictive constraints and 
modifier flags to control the manner in which text can be edited.&nbsp; I will 
discuss the class hierarchy for that portion of the hierarchy that deals with 
user interface components.&nbsp; I will briefly explain the methods of the various 
classes that can be used to manipulate user input and output.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Cell phone emulator output for MIDlet 
	TextBox01.</li>
	<li><a href="#Figure_2">Figure 2</a>. A portion of the standard output 
	produced by TextBox01.</li>
	<li><a href="#Figure_3">Figure 3</a>. Sun cell phone emulator display of 
	UNEDITABLE NUMERIC data in a TextBox.</li>
	<li><a href="#Figure_4">Figure 4</a>. Partial class hierarchy for MIDP 2.0.</li>
	<li><a href="#Figure_5">Figure 5</a>. Methods of the Displayable class in 
	MIDP 2.0</li>
	<li><a href="#Figure_6">Figure 6</a> Cell phone emulator output for MIDlet 
	Ticker01.</li>
	<li><a href="#Figure_7">Figure 7</a> Methods of the Display class in MIDP 
	2.0.</li>
	<li><a href="#Figure_8">Figure 8</a>. Methods of the TextBox class in MIDP 
	2.0.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Beginning of the startApp method 
	for TextBox01.</li>
	<li><a href="#Listing_2">Listing 2</a>. Input constraint for UNEDITABLE 
	NUMERIC data.</li>
	<li><a href="#Listing_3">Listing 3</a>. Beginning of the MIDlet class named 
	Ticker01.</li>
	<li><a href="#Listing_4">Listing 4</a>. The MIDlet named TextBox01.</li>
	<li><a href="#Listing_5">Listing 5</a>. The MIDlet named Ticker01.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online Java tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><a name="Discussion_and_Sample_Code">Discussion and Sample 
Code</a></h2>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>MIDlet testing</b><br />
  All of the MIDlets in this lesson were tested using a Java SE 6 compiler, targeted at a V1.4 virtual machine, and WTK 2.5.2 running under Windows XP.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>A simple MIDlet with a TextBox user interface</b></font></p>
<p>I will illustrate this discussion on MIDlet user 
interfaces with a very simple MIDlet named <b>TextBox01</b>.&nbsp; A complete 
listing of this MIDlet is shown in Listing 4 near the end of the lesson.</p>
<p><font color="#FF0000"><b>Program output</b></font></p>
<p>The execution of this MIDlet in the MIDlet development framework that I provided 
in the earlier lesson titled <i>Capturing Output Produced by Programs Running in a 
Child Process</i> <i>(see <a href="#Resources">Resources</a>)</i> produces the Sun 
cell phone emulator output shown in Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Cell phone emulator output for MIDlet 
	TextBox01. </b>
<table border="0" cols="1" bgcolor="#ffffff" width="174">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java2576a1.jpg" width="323" height="728"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The standard output</b></font></p>
<p>A portion of the standard output produced by this MIDlet is shown in Figure 
2.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. A portion of the standard output produced by 
	TextBox01. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre>OUT: Construct MIDlet
OUT: Create TextBox
OUT: Destroy MIDlet</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>As is my custom, I will discuss and explain this MIDlet in fragments.&nbsp; The 
first fragment is shown in Listing 1, shows the beginning of the <b>startApp</b> 
method.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Beginning of the startApp method for 
TextBox01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public void <b>startApp</b>(){
    System.out.println("Create TextBox");

    <b>TextBox</b> textBox = new <b>TextBox</b>(
                             "TextBox Title",
                             "TextBox contents",
                             50,//maxSize
                             TextField.ANY);//constraints
                                  
    //Make the TextBox the current display.
    <b>Display.getDisplay(this).setCurrent(textBox)</b>;</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>You will 
recall that this is one of the three methods declared as abstract methods in the 
<b>MIDlet</b> class.&nbsp; These methods are used to control the life cycle of a MIDlet.</p>
<p>A 
MIDlet is originally in the <i>paused</i> state when it is launched by the user.&nbsp; 
The <b>startApp</b> method is called when the cell phone's Application 
Management Software <i>(AMS)</i> moves the MIDlet from the 
<i>paused</i> state to the <i>active</i> state.</p>
<p><font color="#FF0000"><b>Instantiate a new TextBox object</b></font></p>
<p>Hopefully, given what you already know about Java programming in general, you 
have already figured out that after displaying a preliminary message, the code 
in Listing 1 applies the <b>new</b> operator to the constructor for a class 
named <b>TextBox</b> to instantiate a new object of type <b>TextBox</b>.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>What is lcdui?</b><br />
  According to several sources on the web, the acronym <b>lcdui</b> stands for 
	Liquid Crystal Display User Interface.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>What is a TextBox object?</b></font></p>
<p><b>TextBox</b> is the name of a class in the <b>javax.microedition.lcdui</b> 
package.&nbsp; It exists in both MIDP 1.0 and MIDP 2.0.&nbsp; Here is part of 
what Sun has to say about the <b>TextBox</b> class:</p>
<blockquote>
	<p><i>&quot;The <b>TextBox</b> class is a <b>Screen</b> that allows the user to 
	enter and edit text. </i></p>
	<p><i>A <b>TextBox</b> has a maximum size, which is the maximum number of 
	characters that can be stored in the object at any time (its capacity)...</i></p>
	<p><i><b>TextBox</b> has the concept of input constraints that is identical 
	to <b>TextField</b>...</i></p>
	<p><i><b>TextBox</b> also has the concept of input modes that is identical 
	to <b>TextField</b>...&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>What is a Screen?</b></font></p>
<p><b>Screen</b> is also the name of a class in the <b>javax.microedition.lcdui</b> 
package.&nbsp; This class is the immediate superclass of the <b>TextBox</b> 
class <i>(see Figure 4)</i>.&nbsp; In MIDP 2.0, the direct subclasses of <b>Screen</b> are:</p>
<ul>
	<li><b>Alert</b> - A Screen that shows data to the user and waits for a 
	certain period of time before proceeding to the next <b>Displayable</b>.</li>
	<li><b>Form</b> - A Screen that contains an arbitrary mixture of items: 
	images, read-only text fields, editable text fields, editable date fields, 
	gauges, choice groups, and custom items.</li>
	<li><b>List</b> - A Screen containing a list of choices.</li>
	<li><b>TextBox</b> - A Screen that allows the user to enter and edit text</li>
</ul>
<p>Objects instantiated from each of these classes are user interface objects.&nbsp; 
As of MIDP 2.0, none of these classes have subclasses.&nbsp; I will have more to say about 
the first three classes in the above list in future lessons.&nbsp; In this lesson, I will concentrate on the
<b>TextBox</b> class.</p>
<p><font color="#FF0000"><b>What is a Displayable?</b></font></p>
<p>The <b>Screen</b> class is a direct subclass of the <b>Displayable</b> class, 
which in turn is a subclass of <b>Object</b> <i>(see Figure 4)</i>.&nbsp; Therefore, since the four 
classes in the above list are subclasses of the <b>Displayable</b> class, 
objects of these classes are <b>Displayables</b> or <b>Displayable</b> objects.</p>
<p><font color="#FF0000"><b>The TextBox class constructor</b></font></p>
<p>Listing 1 applies the <b>new</b> operator to the constructor for the <b>
TextBox</b> class to instantiate a new <b>TextBox</b> object.&nbsp; As of MIDP 
2.0, the <b>TextBox</b> class has a single constructor
<a name="with_the_following_parameters:">with the following parameters:</a></p>
<ul>
	<li><b>String title</b> - the title text to be shown with the display.&nbsp; <i>
	(See TextBox Title in Figure 1.)</i></li>
	<li><b>String text</b> - the initial contents of the text editing area.&nbsp; <i>
	(See TextBox contents in Figure 1.)</i></li>
	<li><b>int maxSize</b> - the maximum capacity in characters.</li>
	<li><b>int constraints</b> - see the discussion below</li>
</ul>
<p><font color="#FF0000"><b>The maxSize parameter</b></font></p>
<p>The first two parameters in the above list are relatively self-explanatory.</p>
<p>The third parameter is also self-explanatory except, according to 
Sun,</p>
<blockquote>
	<p><i>&quot;The implementation may limit boundary maximum capacity and the 
	actually assigned capacity may be smaller than requested. A defensive 
	application will test the actually given capacity with <b>getMaxSize()</b>.&quot;</i></p>
</blockquote>
<p>In other words, even though the programmer may specify a capacity of 100 
characters for a <b>TextBox</b> object, the actual cell phone in use may limit 
the capacity of the object to a smaller number of characters.</p>
<p><font color="#FF0000"><b>The constraints parameter</b></font></p>
<p>The fourth parameter in the above <a href="#with_the_following_parameters:">
list </a>is much more complicated.&nbsp; I will have more to say about this 
parameter later in this lesson.</p>
<p><font color="#FF0000"><b>What is a TextField?</b></font></p>
<p>According to Sun,</p>
<blockquote>
	<p><i>&quot;A <b>TextField</b> is an editable text component that may be placed 
	into a Form.&quot;</i></p>
</blockquote>
<p>The <b>TextField</b> class and the <b>Form</b> class will be major topics 
of a future lesson.&nbsp; Our main interest in the <b>TextField</b> class in 
this lesson has to do with the fourth constructor parameter in the above
<a href="#with_the_following_parameters:">list</a> <i>(constraints)</i>.&nbsp; This interest stems 
from the fact that the <b>TextField</b> class shares the concept of <i>input 
constraints</i> with the <b>TextBox</b> class.&nbsp; The explanation of input 
constraints in the API documentation appears in the documentation for the <b>
TextField</b> class.&nbsp; A reference to that material is provided in the documentation for 
the <b>TextBox</b> class.</p>
<p>We are also interested in the <b>TextField</b> class in this lesson because 
that is where Sun elected to define the constant values that we need to use for 
the fourth parameter to the <b>TextBox</b> constructor <i>(see Listing 1)</i>.&nbsp; 
It is important to note that this MIDlet does not contain a <b>TextField</b> 
object.</p>
<p><font color="#FF0000"><b>What are input constraints?</b></font></p>
<p>Here is part of what Sun has to say about input constraints:</p>
<blockquote>
	<p><i>&quot;The different constraints allow the application to request that the 
	user's input be restricted in a variety of ways. The implementation is 
	required to restrict the user's input as requested by the application. For 
	example, if the application requests the NUMERIC constraint on a TextField, 
	the implementation must allow only numeric characters to be entered.&quot; </i>
	</p>
</blockquote>
<p><font color="#FF0000"><b>Special formatting of text</b></font></p>
<p>Sun goes on to tell us</p>
<blockquote>
	<p><i>The actual contents of the text object are set and modified by and are 
	reported to the application through the TextBox and TextField APIs. The 
	displayed contents may differ from the actual contents if the implementation 
	has chosen to provide special formatting suitable for the text object's 
	constraint setting.&quot;</i></p>
</blockquote>
<p>For example, a PHONENUMBER field might be displayed with digit separators and 
punctuation but the actual contents of the text object available to the 
application would simply be a string of digits.</p>
<p><font color="#FF0000"><b>Restrictive constraints and modifier flags</b></font></p>
<p>Continuing with Sun's explanation,</p>
<blockquote>
	<p><i>&quot;Some constraints, such as DECIMAL, require the implementation to 
	perform syntactic validation of the contents of the text object. The syntax 
	checking is performed on the actual contents of the text object, which may 
	differ from the displayed contents as described above...</i></p>
	<p><i>The methods and 
	constructors throw IllegalArgumentException if they would result in the 
	contents of the text object not conforming to the required syntax.</i></p>
	<p><i>The value ... consists of a restrictive constraint setting described 
	above, as well as a variety of flag bits that modify the behavior of text 
	entry and display.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>The restrictive constraints in MIDP 2,0</b></font></p>
<p>The restrictive constraint settings, which are provided as <i>public static 
final</i> <a name="constants_in_the_TextField_class_are_as_follows:">variables 
in the <b>TextField</b> class are as follows:</a></p>
<ul>
	<li>ANY</li>
	<li>EMAILADDR</li>
	<li>NUMERIC</li>
	<li>PHONENUMBER</li>
	<li>URL</li>
	<li>DECIMAL</li>
</ul>
<p>I will leave it as an exercise for the student to examine Sun's documentation 
to get a full understanding of each of the restrictive constraints in the above list.&nbsp; 
Example MIDlets in this lesson will illustrate the use of the <b>ANY</b> and <b>
NUMERIC</b> input 
constraints.&nbsp; For the <b>ANY</b> constraint, the user is allowed 
to enter any text into the <b>TextBox</b> or the <b>TextField</b>.&nbsp; For the
<b>NUMERIC</b> constraint, the user is only allowed to enter numeric characters.</p>
<p><font color="#FF0000"><b>What are the modifier flags?</b></font></p>
<p>As the name implies, the modifier flags modify the restrictive constraints in the above
<a href="#constants_in_the_TextField_class_are_as_follows:">list</a> to provide 
additional specialization.&nbsp; <a name="The_modifier_flags_are_as_follows:_">
The 
available modifier flags in MIDP 2.0 are </a></p>
<ul>
	<li>PASSWORD</li>
	<li>UNEDITABLE</li>
	<li>SENSITIVE</li>
	<li>NON_PREDICTIVE</li>
	<li>INITIAL_CAPS_WORD</li>
	<li>INITIAL_CAPS_SENTENCE</li>
</ul>
<p>Once again, I will leave it as an exercise for the student to examine Sun's 
documentation to get a full understanding of each of the modifier flags.&nbsp; 
Example MIDlets in this lesson will illustrate the use of the <b>UNEDITABLE</b> 
modifier flag.&nbsp; According to Sun, the <b>UNEDITABLE</b> modifier flag</p>
<blockquote>
	<p><i>&quot;Indicates that editing is currently disallowed. When this flag is 
	set, the implementation must prevent the user from changing the text 
	contents of this object. The implementation should also provide a visual 
	indication that the object's text cannot be edited.&quot;</i></p>
</blockquote>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>The bitwise or operator</b><br />
  Hopefully you already know that the <i>bitwise OR</i> operator ( | ) is 
	different from the <i>logical OR</i> operator ( || ).
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Constructing the complete constraint value</b></font></p>
<p>The <a href="#The_modifier_flags_are_as_follows:_">modifier flags</a> can be 
combined with <a href="#constants_in_the_TextField_class_are_as_follows:">
restrictive constraints</a> by using the bit-wise inclusive OR operator.&nbsp; For example, to specify 
an input constraint of UNEDITABLE NUMERIC data, use the syntax shown in Listing 
2 for the fourth parameter to the <b>TextBox</b> constructor.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. Input constraint for UNEDITABLE NUMERIC 
data.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
    TextBox textBox = new TextBox(
                "TextBox Title",
                "123",
                50,
                <b>TextField.NUMERIC | TextField.UNEDITABLE)</b>;

    Display.getDisplay(this).setCurrent(textBox);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The cell phone emulator output with editing disabled</b></font></p>
<p>When displayed in Sun's cell phone emulator, the <b>TextBox</b> created and 
populated by the code in Listing 2 appears as shown in Figure 3.&nbsp; Note that 
the numeric contents of the <b>TextBox</b> are gray instead of black, indicating 
that the contents of the <b>TextBox</b> cannot be edited by the user.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. Sun cell phone emulator display of 
	UNEDITABLE NUMERIC data in a TextBox.</b><table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2576a2.jpg" width="314" height="175"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Behavior of the NUMERIC constraint</b></font></p>
<p>If you substitute &quot;abc&quot; for &quot;123&quot; in Listing 2, the 
prescribed <b>TextBox</b> contents 
won't satisfy the <b>NUMERIC</b> constraint and the MIDlet will throw a <b>
java.lang.IllegalArgumentException</b> when you launch the MIDlet in the Sun 
cell phone emulator.</p>
<p><font color="#FF0000"><b>What are Input Modes?</b></font></p>
<p>According to Sun,</p>
<blockquote>
	<p><i>&quot;... the application can request that the entry of certain characters 
	be made convenient. It can do this by passing the name of a Unicode 
	character subset to the <b>setInitialInputMode()</b> method. Calling this 
	method requests that the implementation set the mode of the text entry user 
	interface so that it is convenient for the user to enter characters in this 
	subset. The application can also request that the input mode have certain 
	behavioral characteristics by setting modifier flags in the constraints 
	value.&quot;</i></p>
</blockquote>
<p>I'm not even going to try to explain this beyond providing the above partial 
quotation of Sun's explanation.&nbsp; Rather, I will simply refer you to the Sun 
documentation if you need to know how to implement Input Modes in the input 
constraints.</p>
<p><font color="#FF0000"><b>A Screen versus a Display</b></font></p>
<p>What is the difference between a <b>Screen</b> and a <b>Display</b>?&nbsp; 
This question can probably be answered by examining the partial class 
hierarchy for MIDP 2.0 shown in Figure 4.&nbsp; I will discuss and illustrate the 
classes shown in boldface in this lesson.&nbsp; I will discuss 
and illustrate the remaining classes in Figure 2 in future lessons.&nbsp; I will 
also update the partial class hierarchy to include additional classes and refer 
to the modified version in future lessons.</p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Partial class hierarchy for MIDP 2.0. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li>Object<ul>
		<li><b>Displayable</b><ul>
			<li><b>Screen</b><ul>
				<li><b>TextBox</b></li>
				<li>Alert</li>
				<li>Form</li>
				<li>List</li>
			</ul>
			</li>
			<li>Canvas <i>(abstract)</i><ul>
				<li>GameCanvas <i>(abstract)</i></li>
			</ul>
			</li>
		</ul>
		</li>
		<li><b>Display</b></li>
		<li><b>Ticker</b></li>
		<li>Item<ul>
		<li>TextField</li>
	</ul>
		</li>
	</ul>
	</li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The class hierarchy</b></font></p>
<p>As you can see in Figure 4, the <b>Screen</b> class is a subclass of the <b>
Displayable</b> class and is also the superclass of the <b>TextBox</b> class and 
its siblings <i>(<b>Alert</b>, <b>Form</b>, and <b>List</b>)</i>.&nbsp; 
Therefore, a <b>TextBox</b> object is a <b>Displayable</b> object.&nbsp; It is 
also a <b>Screen</b> object or simply a <b>Screen</b>.</p>
<p><font color="#FF0000"><b>No public constructors</b></font></p>
<p>Neither the <b>Screen</b> class nor the <b>Displayable</b> class are 
abstract.&nbsp; However, neither of them provides a public constructor, so it is 
not possible to instantiate an object of either class.&nbsp; As a result, it 
appears that there are only three ways to create a <b>Displayable</b> object:</p>
<ol>
	<li>Instantiate an object of the <b>TextBox, Alert</b>, <b>Form</b>, or <b>
	List</b> classes.</li>
	<li>Create a subclass of the <b>Canvas</b> class and instantiate it.</li>
	<li>Create a subclass of the <b>GameCanvas</b> class and instantiate it.</li>
</ol>
<p><font color="#FF0000"><b>More on the class hierarchy</b></font></p>
<p>According to Sun, the <b>Screen</b> class is the common superclass of all 
<i>high-level</i> user interface classes.&nbsp; <i>(Canvas and GameCanvas are not 
considered to be high-level user interface classes.)</i></p>
<p>Whereas a <b>Screen</b> object is limited to objects of the <b>TextBox</b>,
<b>Alert</b>, <b>Form</b>, and <b>List</b> classes <i>(and their subclasses)</i>, 
a<b> Displayable</b> object also includes objects instantiated from subclasses 
of the <b>Canvas</b> and <b>GameCanvas</b> classes.</p>
<p><font color="#FF0000"><b>An object of the class Display</b></font></p>
<p>A <b>Displayable</b> object is an object that has the capability of being 
placed on the cell phone's physical display.&nbsp; The physical display is represented by an object of the class
<b>Display</b>.&nbsp; <b>&nbsp;</b></p>
<p>A <b>Display</b> object represents the manager of the display and input 
devices of the system. It includes methods for retrieving properties of the 
device and for requesting that objects be displayed on the device.</p>
<p><font color="#FF0000"><b>An analogy</b></font></p>
<p>To a first degree of approximation, the relationship between a <b>TextBox</b> 
object and a <b>Display</b> object in the WTK is similar to the relationship 
between an AWT <b>TextField</b> object and an AWT <b>Frame</b> object.</p>
<p>For example, a <b>Frame</b> object:</p>
<ul>
	<li>Can be placed on the computer screen <i>(although it doesn't manage the 
	entire computer screen)</i>.</li>
	<li>Can contain other objects such as AWT <b>TextField</b> objects.</li>
</ul>
<p>Thus, a <b>Frame</b> object <i>manages</i> the display of other Java objects such 
as AWT <b>TextField</b> objects.</p>
<p>Similarly, a WTK <b>Display</b> object <i>manages</i> the display of other 
WTK objects such as <b>TextBox</b> objects.</p>
<p>However, there are many differences between an AWT <b>Frame</b> and a WTK <b>
Display</b>, so don't put too much stock in this analogy.</p>
<p><font color="#FF0000"><b>Setting the current Display</b></font></p>
<p>That brings us to the point where you should be able to understand the last 
statement in Listing 1.&nbsp; The <b>Display</b> class defines several methods, 
one of which is a static method named <b>getDisplay</b>.&nbsp; The <b>getDisplay</b> 
method gets access to a <b>Display</b> object that is unique to the <b>MIDlet</b> 
object that is passed as a parameter to the method <i>(<b>this</b> is this 
MIDlet)</i>.</p>
<p>Once access to the <b>Display</b> object is obtained, a variety of instance 
methods can be called on the object.&nbsp; One of those methods is <b>setCurrent</b>.&nbsp; 
MIDP 2.0 contains two overloaded versions of this method.&nbsp; One version, 
which is the version called in Listing 1, requires an incoming parameter of type
<b>Displayable</b>.</p>
<p><font color="#FF0000"><b>The setCurrent method</b></font></p>
<p>Here is a small part of what Sun has to say about the <b>setCurrent</b> 
method:</p>
<blockquote>
	<p><i>&quot;Requests that a different Displayable object be made visible on the 
	display. The change will typically not take effect immediately...&quot;</i></p>
</blockquote>
<p>In addition to the above, Sun has a great deal to say about timing issues 
when this method is called.&nbsp; I strongly recommend that you strive to understand those timing issues before attempting to develop a J2ME 
product.</p>
<p>Thus, the last statement in Listing 1 requests that the <b>TextBox</b> object 
be made visible on the cell phone screen.</p>
<p><font color="#FF0000"><b>The remaining code in TextBox01</b></font></p>
<p>The remaining code in the MIDlet named <b>TextBox01</b> is straightforward 
and shouldn't require further explanation.&nbsp; You can view the remaining code 
in Listing 4 near the end of the lesson.</p>
<h3><a name="Methods_defined_in_the_Displayable_class">Methods defined in the Displayable class</a></h3>
<p>Now let's discuss things in more general terms.&nbsp; Because <b>Displayable</b> is the superclass of all objects that can be 
displayed by the WTK on the cell phone screen, all of the methods defined in 
the <b>Displayable</b> class are inherited into and can be called on those objects.</p>
<p>The methods defined in the <b>Displayable</b> class of MIDP 2.0 are shown 
in Figure 5.</p>
<p>
 <b><a name="Figure_5">Figure 5</a>. Methods of the Displayable class in MIDP 
	2.0. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li><i><font face="Arial" size="2">
	Group 1
	----------------------------------------------------</font></i></li>
	<li><font face="Arial" size="2"><b>getHeight()</b> - Gets the height 
	in pixels of the displayable area available to the application.</font></li>
	<li><font face="Arial" size="2"><b>getWidth()</b> - Gets the width in 
	pixels of the displayable area available to the application.</font></li>
	<li><font face="Arial" size="2"><b>getTitle()</b> - Gets the title of 
	the Displayable.</font></li>
	<li><font face="Arial" size="2"><b>setTitle(String&nbsp;s)</b> - Sets the 
	title of the Displayable.</font></li>
	<li><font face="Arial" size="2"><b>isShown()</b> - Checks if the 
	Displayable is actually visible on the display.</font></li>
	<li><i><font face="Arial" size="2">
	Group 2
	----------------------------------------------------</font></i></li>
	<li><font face="Arial" size="2"><b>getTicker()</b> - Gets the ticker 
	used by this</font></li>
	<li><font face="Arial" size="2"><b>setTicker(Ticker&nbsp;ticker)</b> - Sets 
	a ticker for use with this Displayable, replacing any previous ticker.</font></li>
	<li><i><font face="Arial" size="2">
	Group 3
	----------------------------------------------------</font></i></li>
	<li><font face="Arial" size="2"><b>addCommand(Command&nbsp;cmd)</b> - Adds 
	a command to the Displayable.</font></li>
	<li><font face="Arial" size="2"><b>removeCommand(Command&nbsp;cmd)</b> - 
	Removes a command from the Displayable</font></li>
	<li><font face="Arial" size="2"><b>setCommandListener(CommandListener&nbsp;l)</b> 
	- Sets a listener for Commands to this Displayable, replacing any previous 
	CommandListener.</font></li>
	<li><i><font face="Arial" size="2">
	Group 4
	----------------------------------------------------</font></i></li>
	<li><font face="Arial" size="2"><b>sizeChanged(int&nbsp;w, int&nbsp;h)</b> - The 
	implementation calls this method when the available area of the Displayable 
	has been changed.</font></li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Grouped into categories</b></font></p>
<p>I grouped the methods in Figure 5 into four categories to make them easier to 
discuss and understand.</p>
<p>If you are an experienced Java OOP programmer, you should be able to predict 
the behavior of the five methods in the first group based simply on their names 
and brief descriptions.&nbsp; If not, you should take a serious look at the MIDP 
2.0 API documentation and/or possibly step back and polish your Java OOP 
programming skills.</p>
<p>The same may also be true for the two methods in the second group, but just 
to be sure, I will present and explain a simple MIDlet that implements a <b>
Ticker</b>.</p>
<p>The methods in the third group with the word <b>command</b> in their names 
are used to create interactive MIDlets, similar to the use of event listeners 
and event sources in J2SE.&nbsp; This is a very important topic, and I will 
dedicate an entire future lesson to this topic.</p>
<p>The description of the last method at the bottom of Figure 5 isn't difficult 
to understand.&nbsp; This method is intended to be overridden.&nbsp; However, at 
this point in time, I'm unable to describe a practical situation where this 
method would be called and therefore, I am also unable to describe what the 
behavior of the overridden method should be.</p>
<p><font color="#FF0000"><b>A Ticker Example</b></font></p>
<p>Now let's take a look at a sample MIDlet that uses the <i>ticker</i> methods.&nbsp; Figure 6 shows the 
top portion of the cell phone emulator output for the MIDlet named <b>
Ticker01</b>.&nbsp; A complete listing of this MIDlet is provided in Listing 5.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. Cell phone emulator output for MIDlet 
	Ticker01. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2576a3.jpg" width="312" height="191"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>If you run this MIDlet, you will see the text in the horizontal white strip 
at the top of the screen scrolling from right to left like a <i>&quot;ticker tape.&quot;</i></p>
<p><font color="#FF0000">
<b>Beginning of the MIDlet class named Ticker01</b></font></p>
<p>The beginning of the class definition for the MIDlet named <b>Ticker01</b> is 
shown in Listing 3.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Beginning of the MIDlet class named 
Ticker01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class Ticker01 extends MIDlet{

  public Ticker01(){
    System.out.println("Construct MIDlet");
  }//end constructor

  public void startApp(){
<b>    String tickerText = 
      "The quick brown fox jumped over something, but I &quot;
      + "don't remember what it was.";
    Ticker ticker = new Ticker(tickerText);</b>

    System.out.println("Create TextBox");

    TextBox textBox = new TextBox("TextBox Title",
                                  "TextBox contents",
                                  50,//width
                                  TextField.ANY);
                                  
    //Attach the ticker to the text box.
    <b>textBox.setTicker(ticker);</b>
    
    //Make the TextBox be the current display.
    Display.getDisplay(this).setCurrent(textBox);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Update to TextBox01</b></font></p>
<p>This MIDlet program is an update to the earlier MIDlet named <b>TextBox01</b>.&nbsp; 
I highlighted the changes required to create and attach the <b>Ticker</b> object 
to the <b>TextBox</b> object.&nbsp; The process is straightforward and shouldn't 
require further explanation.</p>
<p>Remember, all of the classes that are subclasses of the <b>Displayable</b> 
class shown in Figure 4 inherit the ticker methods.&nbsp; Presumably therefore, 
a <b>Ticker</b> object can be attached to any object instantiated from any of 
those classes.</p>
<p>The same <b>Ticker</b> object can be attached to more than one
<b>Displayable</b> object.&nbsp; Therefore, you can create a situation where the 
same <b>Ticker</b> continues to scroll and to be visible as your MIDlet switches 
from one <b>Screen</b> to the next.&nbsp; There are a number of other interesting 
ramifications to the <b>Ticker</b> class, so I recommend that you study the 
documentation for that class in detail.</p>
<h3><a name="Methods_defined_in_the_Display_class">Methods defined in the 
Display class</a></h3>
<p>Next, we will take a look at the methods of the <b>
Display </b>class to get an idea of the manner in which this class makes it 
possible for our MIDlet to communicate with the hardware.&nbsp; Once again, I 
have grouped the methods into several categories.</p>
<p>
 <b><a name="Figure_7">Figure 7</a>. Methods of the Display class in MIDP 2.0. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>

	<tr>
      <td>
<ul>
	<li><i><font face="Arial" size="2">
	Group 1
	----------------------------------------------------</font></i></li>
	<li><font face="Arial" size="2"><b>getCurrent()</b> - Gets the current Displayable 
	object for this MIDlet.</font></li>
	<li><font face="Arial" size="2"><b>setCurrent(Alert&nbsp;alert, 
	Displayable&nbsp;nextDisplayable)</b> 
	- Requests that this Alert 
	be made current, and that nextDisplayable be made current after 
	the Alert 
	is dismissed.</font></li>
	<li><font face="Arial" size="2"><b>setCurrent(Displayable&nbsp;nextDisplayable)</b> 
	- Requests that a different 
	Displayable object be 
	made visible on the display.</font></li>
	<li><font face="Arial" size="2"><b>setCurrentItem(Item&nbsp;item)</b> 
	- Requests that the Displayable 
	that contains this Item 
	be made current, scrolls the 
	Displayable so that this Item 
	is visible, and possibly assigns the focus to this Item</font></li>
	<li><i><font face="Arial" size="2">
	Group 2
	----------------------------------------------------</font></i></li>
	<li><font face="Arial" size="2"><b>getDisplay(MIDlet&nbsp;m)</b> 
	- Gets the Display 
	object that is unique to this MIDlet.</font></li>
	<li><font face="Arial" size="2"><b>getBestImageHeight(int&nbsp;imageType)</b> 
	- Returns the best image height for a given image type.</font></li>
	<li><font face="Arial" size="2"><b>getBestImageWidth(int&nbsp;imageType)</b> 
	- Returns the best image width for a given image type.</font></li>
	<li><font face="Arial" size="2"><b>getBorderStyle(boolean&nbsp;highlighted)</b> 
	- Returns the stroke style used for border drawing depending on the state of 
	the component (highlighted/non-highlighted).</font></li>
	<li><font face="Arial" size="2"><b>getColor(int&nbsp;colorSpecifier)</b> 
	- Returns one of the colors from the high level user interface color scheme, 
	in the form 0x00RRGGBB 
	based on the colorSpecifier 
	passed in.</font></li>
	<li><font face="Arial" size="2"><b>isColor()</b> 
	- Gets information about color support of the device.</font></li>
	<li><font face="Arial" size="2"><b>numAlphaLevels()</b> 
	- Gets the number of alpha transparency levels supported by this 
	implementation.</font></li>
	<li><font face="Arial" size="2"><b>numColors()</b> 
	- Gets the number of colors (if isColor() is true) or 
	graylevels (if isColor() 
	is false) 
	that can be represented on the device.</font></li>
	<li><i><font face="Arial" size="2">
	Group 3
	----------------------------------------------------</font></i></li>
	<li><font face="Arial" size="2"><b>flashBacklight(int&nbsp;duration)</b> 
	- Requests a flashing effect for the device's backlight.</font></li>
	<li><font face="Arial" size="2"><b>vibrate(int&nbsp;duration)</b> 
	- Requests operation of the device's vibrator.</font></li>
	<li><i><font face="Arial" size="2">
	Group 4
	----------------------------------------------------</font></i></li>
	<li><font face="Arial" size="2"><b>callSerially(Runnable&nbsp;r)</b> 
	- Causes the Runnable 
	object r 
	to have its run() 
	method called later, serialized with the event stream, soon after completion 
	of the repaint cycle.</font></li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>There are a fairly large number of methods, which appear to be 
somewhat overwhelming when you view them in alphabetical order in the 
documentation.&nbsp; However, once they are grouped by general function, they don't look so 
overwhelming after all.</p>
<p><font color="#FF0000"><b>The <i>&quot;current&quot;</i> group</b></font></p>
<p>The first three methods in the first group either</p>
<ul>
	<li>Establish 
which <b>Displayable</b> object will be visible on the screen, or</li>
	<li>Query to 
determine which <b>Displayable</b> object is currently being displayed.&nbsp; 
	</li>
</ul>
<p>You should have no difficulty with those three methods.</p>
<p>The fourth method in this group goes a little further and establishes not 
only which <b>Displayable</b> object will become visible, but also establishes 
which item in that object will be scrolled into view.&nbsp; For example, this 
method could be used to cause a specific item in a long list of items to become 
visible.</p>
<p><font color="#FF0000"><b>The <i>&quot;get property&quot;</i> group</b></font></p>
<p>The first method in the second group is the <b>getDisplay</b> method, which 
we discussed earlier.&nbsp; The remaining seven methods in that group simply 
query the system to determine the value of seven different properties.&nbsp; If 
you are familiar with the use of properties in JavaBeans components, these 
methods should also be understandable on the basis of the names and the brief 
descriptions.</p>
<p><font color="#FF0000"><b>The &quot;custom operation&quot; group</b></font></p>
<p>The two methods in the third group allow you to ask the hardware to 
either flash the backlight on the display or cause the cell phone to vibrate for 
a specified period of time.&nbsp; 
There doesn't seem to be anything too complex here.</p>
<p><font color="#FF0000"><b>The callSerially method</b></font></p>
<p>This method in the fourth group appears to be used with graphics and the <b>Canvas</b> class, so I will 
defer a discussion of this method until a future lesson when I discuss graphics 
and the <b>Canvas</b> class.</p>
<p><font color="#FF0000"><b>One instance of Display per MIDlet</b></font></p>
<p>There is only one instance of <b>Display</b> per MIDlet, but each MIDlet can 
have any number of <b>Displayable</b> objects, often referred to as screens or 
canvases.&nbsp; However, only one <b>Displayable</b> object can become visible 
by way of the <b>Display</b> object at any time.&nbsp; That object is referred to 
as the <i>current</i> object.&nbsp; What this means is that unlike standard Java 
user interfaces where many items can be visible at any time, only one of the 
following <b>Displayable</b> objects can be visible at a time under J2ME.</p>
<ul>
	<li><b>Alert</b> - A Screen that shows data to the user and waits for a 
	certain period of time before proceeding to the next <b>Displayable</b>.</li>
	<li><b>Form</b> - A Screen that contains an arbitrary mixture of items: 
	images, read-only text fields, editable text fields, editable date fields, 
	gauges, choice groups, and custom items.</li>
	<li><b>List</b> - A Screen containing a list of choices.</li>
	<li><b>TextBox</b> - A Screen that allows the user to enter and edit text</li>
</ul>
<p><font color="#FF0000"><b>A Form can contain multiple items</b></font></p>
<p>Note, however, that a <b>Form</b> can contain an arbitrary number of other 
items.&nbsp; Therefore, it is possible to display two or more items at the 
same time by adding them to the <b>Form</b>.&nbsp; Items are added to the <b>
Form</b> by calling the <b>set</b>, <b>append</b>, or <b>insert</b> method on 
the <b>Form</b>.&nbsp; I will have a lot more 
to say about the <b>Form</b> class in a future lesson.</p>
<p><font color="#FF0000"><b>Accessing the Display object</b></font></p>
<p>MIDlet code can get access to the <b>Display</b> object at any point during 
the execution of the MIDlet by calling the static <b>getDisplay</b> method of 
the <b>Display</b> class.&nbsp; Once the MIDlet code has access to the <b>MIDlet</b> 
object, it can call any of the methods listed in Figure 7 on that object.</p>
<p>For example, we saw in Listing 1 how the <b>setCurrent</b> method can be used 
to cause a particular <b>Displayable</b> object to become visible on the cell 
phone screen.&nbsp; The MIDlet code can use this approach to switch among any 
number of <b>Displayable</b> objects making different <b>Displayable</b> objects 
visible at different points in time during the execution of the MIDlet program.</p>
<p><font color="#FF0000"><b>Foreground versus background</b></font></p>
<p>A MIDlet may be running in the foreground, in which case its current <b>
Displayable</b> objects will probably be visible.&nbsp; On the other hand, a 
MIDlet may run in the background behind another MIDlet, in which case none of 
its <b>Displayable</b> objects will be visible.&nbsp; However, it will still 
have a <i>current</i> <b>Displayable</b> object.&nbsp; The <i>current</i> <b>
Displayable</b> object is the object that will 
become visible if the MIDlet is allowed to move to the foreground.</p>
<h3><a name="Methods_defined_in_the_TextBox_class">Methods defined in the 
TextBox class</a></h3>
<p>We have seen the methods of the <b>Display</b> class that make it possible 
for the MIDlet to communicate with the hardware relative to the display.&nbsp; 
We have also seen how behavior can be imparted to all <b>Displayable</b> objects 
by methods of the <b>Displayable</b> class.</p>
<p>The <b>Screen</b> class, which extends <b>Displayable</b> serves only to 
distinguish <i>high level</i> user interface capabilities from the <i>low level</i> 
graphics capabilities provided by the <b>Canvas</b> class.&nbsp; The <b>Screen</b> 
class doesn't define any methods in MIDP 2.0.</p>
<p>Therefore, other than the behavior imparted to all <b>Displayable</b> objects by 
the methods shown in Figure 5, the behavior of each different type of <b>Displayable</b> 
object is 
imparted by the methods defined in that object's class:&nbsp; <b>Canvas</b>,<b> TextBox</b>, <b>Alert</b>, <b>Form</b>, 
and <b>List</b>.&nbsp; I will discuss the methods of the <b>TextBox</b> 
class in this lesson and will discuss the methods of the other four classes in 
future lessons.</p>
<p><font color="#FF0000">
 <b>Methods of the TextBox class in MIDP 2.0</b></font></p>
<p>Figure 8 shows the methods defined in the <b>TextBox</b> class in MIDP 2.0.</p>
<p>
 <b><a name="Figure_8">Figure 8</a>. Methods of the TextBox class in MIDP 2.0.</b><table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li><font face="Arial"><i><font size="2">Group </font></i><font size="2"><i>
	1</i></font>---------------------------------------------------------</font></li>
	<li><font face="Arial" size="2"><b>setTitle(String&nbsp;s)</b> - Sets the 
	title of the Displayable.</font></li>
	<li><font face="Arial" size="2"><b>setString(String&nbsp;text)</b> - Sets 
	the contents of the TextBox as a string value, replacing the previous 
	contents.</font></li>
	<li><font face="Arial" size="2"><b>setMaxSize(int&nbsp;maxSize)</b> - Sets 
	the maximum size (number of characters) that can be contained in this 
	TextBox.</font></li>
	<li><font face="Arial" size="2"><b>setConstraints(int&nbsp;constraints)</b> 
	- Sets the input constraints of the TextBox.</font></li>
	<li><font face="Arial"><i><font size="2">Group 2</font></i>---------------------------------------------------------</font></li>
	<li><font face="Arial" size="2"><b>delete(int&nbsp;offset, int&nbsp;length)</b> 
	- Deletes characters from the TextBox.</font></li>
	<li><font face="Arial" size="2"><b>insert(char[]&nbsp;data, int&nbsp;offset, int&nbsp;length, 
	int&nbsp;position)</b> - Inserts a subrange of an array of characters into the 
	contents of the TextBox.</font></li>
	<li><font face="Arial" size="2"><b>insert(String&nbsp;src, int&nbsp;position)</b> 
	- Inserts a string into the contents of the TextBox.</font></li>
	<li><font face="Arial" size="2"><b>setChars(char[]&nbsp;data, int&nbsp;offset, 
	int&nbsp;length)</b> - Sets the contents of the TextBox from a character array, 
	replacing the previous contents.</font></li>
	<li><font face="Arial"><i><font size="2">Group </font></i><font size="2"><i>
	3</i></font>---------------------------------------------------------</font></li>
	<li><font face="Arial" size="2"><b>getString()</b> - Gets the contents 
	of the TextBox as a string value.</font></li>
	<li><font face="Arial" size="2"><b>getChars(char[]&nbsp;data)</b> - Copies 
	the contents of the TextBox into a character array starting at index zero.</font></li>
	<li><font face="Arial"><i><font size="2">Group </font></i><font size="2"><i>
	4</i></font>---------------------------------------------------------</font></li>
	<li><font face="Arial" size="2"><b>getCaretPosition()</b> - Gets the 
	current input position.</font></li>
	<li><font face="Arial" size="2"><b>size()</b> - Gets the number of 
	characters that are currently stored in this TextBox.</font></li>
	<li><font face="Arial" size="2"><b>getMaxSize()</b> - Returns the 
	maximum size (number of characters) that can be stored in this TextBox.</font></li>
	<li><font face="Arial" size="2"><b>getConstraints()</b> - Gets the 
	current input constraints of the TextBox.</font></li>
	<li><font face="Arial"><i><font size="2">Group </font></i><font size="2"><i>
	5</i></font>---------------------------------------------------------</font></li>
	<li><font face="Arial" size="2"><b>setTicker(Ticker&nbsp;ticker)</b> - Sets 
	a ticker for use with this Displayable, replacing any previous ticker.</font></li>
	<li><font face="Arial" size="2"><b>setInitialInputMode(String&nbsp;characterSubset)</b> 
	- Sets a hint to the implementation as to the input mode that should be used 
	when the user initiates editing of this TextBox.</font></li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Grouped into categories</b></font></p>
<p>In order to make it easier to discuss and to understand the methods defined in 
the <b>TextBox</b> class, I have grouped them into categories in Figure 8.</p>
<p>The four methods in the first group are <i>setter</i> methods that make it 
possible to establish the values of the same four properties for which 
parameters are provided in the <a href="#with_the_following_parameters:">constructor</a>.</p>
<p><font color="#FF0000"><b>The editing methods</b></font></p>
<p>The four methods in the second group can be used to modify the contents of the
<b>TextBox</b> by deleting characters, inserting characters, or replacing 
characters in the text string contained in the <b>TextBox</b>.</p>
<p><font color="#FF0000"><b>Data extraction methods</b></font></p>
<p>The two methods in the third group are used to extract the data contained in 
the <b>TextBox</b> in either of two formats:&nbsp; a <b>String</b> or an array 
of characters.</p>
<p><font color="#FF0000"><b>Typical <i>getter</i> methods</b></font></p>
<p>The four methods in the fourth group are typical <i>getter</i> methods used 
to get the values of four different properties of the <b>TextBox</b> object.</p>
<p><font color="#FF0000"><b>Miscellaneous <i>setter</i> methods</b></font></p>
<p>The <b>setTicker</b> method in the fifth group seems to be redundant with the 
method having the same name in the <b>Displayable</b> class.&nbsp; Although I 
didn't make a word-for-word comparison, the description of this method in the 
documentation for the <b>TextBox</b> class seems to be the same as, or very 
similar to the description of the method in the documentation for the <b>
Displayable</b> class.</p>
<p>You may recall that I punted when time came to explain the concept of <i>input 
modes</i> earlier in this lesson, and I will do the same again here.&nbsp; I will 
simply refer you to the Sun documentation for the method named <b>
setInitialInputMode</b> if you need to know about input modes.</p>
<center>
<h2><a name="Run the program"></a>Run the programs</h2>
</center>
<p>I encourage you to copy the code from Listing 4 and Listing 5 and run it in 
the MIDlet development framework that I provided in the earlier lesson titled <i>Capturing Output Produced by Programs Running in a Child Process</i> <i>(see
<a href="#Resources">Resources</a>)</i>.&nbsp; Experiment with the MIDlet 
code, making changes and observing the results of your changes.&nbsp; See if you 
can explain why your changes have the effect that they have.</p>
<p>Don't forget that you will need to download and install the latest version of 
the Sun Java Wireless Toolkit for CLDC <i>(see <a href="#Resources">
Resources</a>)</i>.&nbsp; As of the date this lesson is being written, the latest version of the toolkit is WTK2.5.2.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I used an object of the <b>TextBox</b> class to teach you the 
fundamentals of user interfaces for MIDlets.</p>
<p>I showed you how to 
instantiate user interface components and how to cause them to become visible on 
the cell phone screen.</p>
<p>I explained the difference between a <b>Screen</b> 
and a <b>Display</b>.</p>
<p>I explained how to use restrictive constraints and 
modifier flags to control the manner in which text can be edited.</p>
<p>I 
discussed the class hierarchy for that portion of the hierarchy that deals with 
user interface components.</p>
<p>I briefly explained the methods of the various 
classes that can be used to manipulate user input and output.</p>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>In Listing 1 and Listing 3 above, I showed you code for two very short MIDlets that 
were designed to illustrate specific MIDlet programming concepts involving the 
user interface.&nbsp; Those MIDlets made very little effort to satisfy the rules for 
compliance with the life cycle requirements of a MIDlet.</p>
<p>In the second part of this lesson, I will present and explain two MIDlets that show how to write user interface code while complying with the life cycle 
requirements of a MIDlet.</p>
<p>The second MIDlet will differ from the first in that it will also attempt to 
minimize the memory footprint of the MIDlet while the MIDlet is in the paused 
state.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a href="http://java.sun.com/products/sjwtoolkit/download-2_5.html">
	Download</a> Sun Java Wireless Toolkit 2.5 for CLDC Release</li>
	<li><a href="http://en.wikipedia.org/wiki/MIDlet">MIDlet</a>: From 
	Wikipedia, the free encyclopedia</li>
	<li><a href="http://www.scmad.com/j2me-glossary1.php">MIDlet</a>: According 
	to SCMAD Certification Center</li>
	<li><a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html">J2ME 
	Tutorial, Part 1: Creating MIDlets</a> by Vikram Goyal</li>
	<li>
	<a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html?page=2#step4">
	Pre-verifying</a> MIDlet code according to Vikram Goyal</li>
	<li>
	<a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html?page=2#step7">
	Deploying</a> a MIDlet according to Vikram Goyal</li>
	<li><span class="style2">
	<a href="http://developers.sun.com/mobility/device/device;jsessionid=3F91C410E754F34B1A44DEBCE011ED18">
	The Java ME Device Table</a></span></li>
	<li><span class="style2">
	<a href="http://developers.sun.com/mobility/midp/ttips/getAppProperty/index.html">
	Retrieving MIDlet Attributes</a> by Richard Marejka</span></li>
	<li><a href="http://developers.sun.com/mobility/learn/midp/lifecycle/">
	Learning Path: MIDlet Life Cycle</a></li>
	<li><span class="style2">
	<a href="http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html?page=1">
	When Runtime.exec() won't</a> By </span>Michael C. Daconta</li>
	<li>
	<a href="http://en.wikipedia.org/wiki/Connected_Limited_Device_Configuration">
	Connected Limited Device Configuration</a> <i>(CLDC)</i> from
	<span class="style2">Wikipedia</span></li>
	<li><span class="style2">
	<a href="http://en.wikipedia.org/wiki/Mobile_Information_Device_Profile">
	Mobile Information Device Profile</a> <i>(MIDP)</i> from Wikipedia</span></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr030/">CLDC 1.0</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr139/">CLDC 1.1</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr037/">MIDP 1.0</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr118/">MIDP 2.0</a></li>
	<li><a href="http://www.developer.com/java/j2me/article.php/3719111">2570</a> 
	Getting Started with MIDlets and the Sun Java Wireless Toolkit for CLDC</li>
	<li>
	<a href="http://www.developer.com/java/j2me/article.php/3721706#Resources">2572</a> Capturing Output Produced by Programs Running in a Child Process</li>
	<li>
	<a href="2574%20Back%20to%20Basics%20with%20MIDlets%20and%20the%20Sun%20Java%20Wireless%20Toolkit%20for%20CLDC,%201/29/08,%20http:/www.developer.com/java/j2me/article.php/3724381">2574</a> Back to Basics with MIDlets and the Sun Java Wireless Toolkit for 
	CLDC</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the MIDlets discussed in this lesson are shown in Listing 4 
and Listing 5 below.
<p>
<b><a name="Listing_4">Listing 4</a>. The MIDlet named TextBox01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>//34567890123456789012345678901234567890123456789012345678
//Be sure to preserve < and > in html version
//======================================================//

/*TextBox01.java
Copyright 2007, R.G.Baldwin

The purpose of this program is to illustrate a TextBox 
user interface object.

Tested using a Java SE 6 compiler, targeted at a V1.4
virtual machine, and WTK 2.5.2 running under Windows XP.
*********************************************************/

package TextBox01;

import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.TextBox;
import javax.microedition.lcdui.TextField;
import javax.microedition.midlet.MIDlet;

public class TextBox01 extends MIDlet{

  public TextBox01(){
    System.out.println("Construct MIDlet");
  }//end constructor

  public void startApp(){

    System.out.println("Create TextBox");

    TextBox textBox = new TextBox("TextBox Title",
                                  "TextBox contents",
                                  50,//width
                                  TextField.ANY);
                                  
    //Make the TextBox be the current display.
    Display.getDisplay(this).setCurrent(textBox);

    //Sleep for 20 seconds.
    try{Thread.currentThread().sleep(20000);
    } catch(Exception e){}

    //Enter the destroyed state.
    this.destroyApp(true);
  }//end startApp

  public void pauseApp(){
  }//end pauseApp

  public void destroyApp(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp

}//end class TextBox01
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_5">Listing 5</a>. The MIDlet named Ticker01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Ticker01.java
Copyright 2007, R.G.Baldwin

The purpose of this program is to illustrate a TextBox 
user interface object with an attached Ticker.

Tested using a Java SE 6 compiler, targeted at a V1.4
virtual machine, and WTK 2.5.2 running under Windows XP.
*********************************************************/

package Ticker01;

import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.TextBox;
import javax.microedition.lcdui.TextField;
import javax.microedition.lcdui.Ticker;
import javax.microedition.midlet.MIDlet;

public class Ticker01 extends MIDlet{

  public Ticker01(){
    System.out.println("Construct MIDlet");
  }//end constructor

  public void startApp(){
    String tickerText = 
      "The quick brown fox jumped over something, but I &quot;
      + "don't remember what it was.";
    Ticker ticker = new Ticker(tickerText);

    System.out.println("Create TextBox");

    TextBox textBox = new TextBox("TextBox Title",
                                  "TextBox contents",
                                  50,//width
                                  TextField.ANY);
                                  
    //Attach the ticker to the text box.
    textBox.setTicker(ticker);
    
    //Make the TextBox be the current display.
    Display.getDisplay(this).setCurrent(textBox);

    //Sleep for 60 seconds.
    try{Thread.currentThread().sleep(60000);
    } catch(Exception e){}

    //Enter the destroyed state.
    this.destroyApp(true);
  }//end startApp

  public void pauseApp(){
  }//end pauseApp

  public void destroyApp(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp

}//end class Ticker01</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2008, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
java J2ME MIDlet &quot;cell phone emulator&quot; &quot;wireless toolkit&quot; WTK MIDP CLDC &quot;MIDlet 
life cycle&quot; Displayable TextBox Ticker TextField</p>
<p>-end- </p>
<p> <br>
&nbsp; </p>
<br>
<br>
<br>
<br>
</body>
</html>
