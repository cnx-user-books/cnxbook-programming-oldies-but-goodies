<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Getting Started, Part 2</h2></center>
<b><i>by Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 1001
<p>July 24, 2000
<ul >
<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Model View Control (MVC)">Model View Control (MVC)</a></li>

<li>
<a href="#JavaBean Components">JavaBean Components</a></li>

<li>
<a href="#The Java Interface">The Java Interface</a></li>

<li>
<a href="#Where Do We Go From Here">Where Do We Go From Here?</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
This is the second part of a two-part lesson in which I am discussing background
information necessary for an understanding of Swing.
<p>If you missed the <a href="Java1000.htm">first part</a>, you should
go back and read it before continuing with this part.
<p><b><font color="#FF0000">MVC, JavaBean Components, etc.</font></b>
<p>In Part 1 of this lesson, I discussed Event Handling and Lightweight
components.&nbsp; In this lesson, I will discuss MVC, JavaBean Components,
and the Java interface.
<p><b><font color="#FF0000">Model view control paradigm</font></b>
<p><font color="#000000">In order to really understand Swing, you need
to understand the Model View Control (MVC) paradigm.&nbsp; I have previously
published lessons on <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">MVC</a>
that will help you to come up to speed on this topic.&nbsp; For those in
a hurry, I will provide a brief discussion of MVC later in this lesson.</font>
<p><b><font color="#FF0000">JavaBean Components</font></b>
<p><font color="#000000">In this series of lessons, I will make numerous
references to JavaBean Components.&nbsp; I have previously published several
lessons on <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">JavaBean</a>
components.</font>
<p><font color="#000000">I will also provide a brief description of JavaBean
Components later in this lesson</font>
<p><b><font color="#FF0000">The Java interface</font></b>
<p><font color="#000000">The Java interface is the backbone of Java.&nbsp;
As I will discuss later, in addition to its many other uses, an understanding
of the interface is critical to the use of the Delegation Event Model with
Swing.&nbsp; You may also want to study my previous lessons on the Java
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">interface</a>
and the Delegation Event Model as well.</font>
<center>
<h2>
<a NAME="Model View Control (MVC)"></a><font color="#000000">Model View
Control (MVC)</font></h2></center>
<b><font color="#FF0000">What is MVC?</font></b>
<p><font color="#000000">MVC is a programming structure in which the program
is separated into three distinct parts.</font>
<p><font color="#000000">One part maintains the data that describes the
state of the program.&nbsp; This part is often called the <i>model</i>.</font>
<p><font color="#000000">A second part provides the conduit by which data
enters the program.&nbsp; This part is often called the <i>control</i>.</font>
<p><font color="#000000">A third part provides one or more views of the
data.&nbsp; As indicated by the name, this part is often called the <i>view</i>.</font>
<p><b><font color="#FF0000">Observable and observer</font></b>
<p><font color="#000000">In the <a href="Java1000.htm">previous</a> lesson,
I discussed the use of the Java interface to implements <i>callbacks</i>.</font>
<p><font color="#000000">Java provides a class/interface combination (<i>observable/observer</i>)
that makes it possible for views to register themselves on a model to be
notified whenever the data stored in the model changes.&nbsp; You can read
about this in one of the previous lessons in my </font><i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i>.
<p><b><font color="#FF0000">Swing components adhere to MVC concepts</font></b>
<p><font color="#000000">Most Swing components are designed according to
<i>(a
somewhat modified version of)</i> the MVC paradigm.</font>
<p><font color="#000000">This has a number of advantages.&nbsp; Perhaps
the most obvious advantage is that the rendering (view) of a particular
component can be changed at runtime.</font>
<p><b><font color="#FF0000">Pluggable look and feel</font></b>
<p><font color="#000000">For example, with Swing's <i>Pluggable Look and
Feel</i>, it is possible to cause a swing button to look like a <i>Motif</i>
button, a <i>Metal</i> button, or a <i>Windows</i> button, and to change
that look and feel at runtime if desired.&nbsp; <i>(Although I have never
attempted to install and use it, I understand that a <a href="http://java.sun.com/products/jfc/tsc/articles/jlf-design/">Macintosh</a>
look and feel is available also.)</i></font>
<p><b><font color="#FF0000">What is Metal?</font></b>
<p><font color="#000000"><i>Metal</i> is a proprietary look and feel that
Sun designed specifically for use with Java.</font>
<p><b><font color="#FF0000">What about Motif, Windows, and Macintosh?</font></b>
<p><font color="#000000"><i>Motif</i> is a common "look and feel" from
Sun, while <i>Windows</i> is from Microsoft and <i>Macintosh</i> is from
Apple.</font>
<p><b><font color="#FF0000">You can roll your own</font></b>
<p><font color="#000000">It is also possible for you to create your own
look and feel if you have such a need.</font>
<p><b><font color="#FF0000">Not pure MVC</font></b>
<p><font color="#000000">Swing doesn't use a <i>pure</i> MVC paradigm for
components.&nbsp; Rather, in Swing, the control and the view are combined,
producing a paradigm often referred to as the <i>model-delegate</i>.</font>
<p><b><font color="#FF0000">Changing the view at runtime</font></b>
<p><font color="#000000">If your program changes the look and feel at runtime,
the data in the model isn't changed.&nbsp; Only the view of that data is
changed.&nbsp; The component continues to represent the same data to the
user, but presents it in a different way.</font>
<p><b><font color="#FF0000">MVC is important to Swing</font></b>
<p><font color="#000000">In this series of lessons, we will see various
situations where the separation of the component into a model and a delegate
provides important capabilities.</font>
<center>
<h2>
<a NAME="JavaBean Components"></a><font color="#000000">JavaBean Components</font></h2></center>
<font color="#000000"><i>JavaBean Components</i> are Java program elements
that adhere to a well-defined set of interface specifications.&nbsp; Adherence
to these specifications causes beans to be highly-reusable.</font>
<p><b><font color="#FF0000">See previous lessons on beans</font></b>
<p><font color="#000000">You can learn more about JavaBean Components in
several previous lessons in my </font><i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i>.
<p><b><font color="#FF0000">Swing components are beans</font></b>
<p><font color="#000000">Swing components meet the JavaBean specifications.&nbsp;
Therefore, Swing components are JavaBean components, often referred to
simply as <i>beans</i>.</font>
<p><b><font color="#FF0000">Bean properties</font></b>
<p><font color="#000000">Beans maintain state information in the form of
<i>properties</i>.</font>
<p><b><font color="#FF0000">Another callback mechanism</font></b>
<p><font color="#000000">One of the important capabilities of a bean is
the ability to register interested listeners (observers) and to notify
them when the value of a property changes.</font>
<p><b><font color="#FF0000">Bound properties</font></b>
<p><font color="#000000">This can happen at two levels.&nbsp; At one level,
the listener is simply notified of a change in the value of a property.&nbsp;
Properties of this sort are referred to as <i>bound</i> properties.</font>
<p><b><font color="#FF0000">Constrained properties</font></b>
<p><font color="#000000">At another level, the listener is not only notified,
but has the right to veto the change.&nbsp; Properties of this sort are
referred to as <i>constrained</i> properties.</font>
<p><b><font color="#FF0000">Need to understand the inner workings of bound
and constrained properties</font></b>
<p><font color="#000000">Because many Swing components have bound and constrained
properties, an understanding of bound and constrained properties is important
to an understanding of Swing.</font>
<p><font color="#000000">You can learn about bound and constrained bean
properties in the lessons on my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">web
site</a>.</font>
<p><font color="#000000">Swing components have the ability to register
and notify other objects when the value of a property changes.&nbsp; Often,
this notification happens automatically, but you still need to understand
what is happening.</font>
<center>
<h2>
<a NAME="The Java Interface"></a><font color="#000000">The Java Interface</font></h2></center>
<font color="#000000">A Java <i>interface</i> declares a set of (optional)
<i>method
signatures</i> (no bodies) and a set of (optional) <i>constants</i> (public
final variables).</font>
<p><b><font color="#FF0000">Implementing an interface</font></b>
<p><font color="#000000">A Java class can <i>implement</i> an interface.</font>
<p><font color="#000000">If a Java class implements an interface, it must
provide a <i>concrete definition</i> of all methods declared in the interface.&nbsp;
(An empty method with a matching signature in the class definition will
satisfy this requirement.)</font>
<p><font color="#000000">A class that implements the interface also has
access to all of the constants declared in the interface.</font>
<p><b><font color="#FF0000">Object references are typed</font></b>
<p><font color="#000000">All references to a Java object must adhere to
a <i>type</i>.&nbsp; The <i>true type</i> of a Java object is the name
of the class from which it is instantiated.&nbsp; This is the type specification
that provides access to all of the members of an object instantiated from
the class (assuming that access to the members is not otherwise blocked.).</font>
<p><font color="#000000">Thus, a reference to a Java object can be treated
as the type of the class from which the object was instantiated.</font>
<p><b><font color="#FF0000">Other possibilities exist also</font></b>
<p><font color="#000000">The reference to the object can also be treated
as the type of any superclass of the class from which it was instantiated.&nbsp;
However, when referring to an object by its superclass type, some members
may not be accessible.&nbsp; <i>(Downcasting may be required to access
some members.)</i></font>
<p><b><font color="#FF0000">Treating object reference as type Object</font></b>
<p><font color="#000000">The superclass of all classes is the class named
<b>Object</b>.&nbsp;
It is common practice to treat references to Java objects as type <b>Object</b>,
particularly in the design of data structures and containers.</font>
<p><font color="#000000">This makes it possible to design a totally generic
container and use it to store references to objects instantiated from any
class.</font>
<p><b><font color="#FF0000">Downcasting is probably necessary</font></b>
<p><font color="#000000">However, when those references are later used
in an attempt to access the members of the object, it is typically necessary
to <i>downcast</i> the reference to the true type of the object.</font>
<p><b><font color="#FF0000">The interface type</font></b>
<p><font color="#000000">A reference to a Java object can also be treated
as a type that is the name of any interface implemented by the class from
which the object was instantiated, or any interface implemented by any
superclass of that class.&nbsp; <i>(Any members of the object not declared
in the interface will not be accessible in this case.)</i></font>
<p><b><font color="#FF0000">Interface is critical to registration and callback</font></b>
<p><font color="#000000">The Java interface has many important uses.&nbsp;
For example, it is the backbone of the Java registration-callback system.</font>
<p><font color="#000000">Under the Delegation Event Model discussed in
the <a href="Java1000.htm">previous</a> lesson, a source for a particular
event type is willing to register listener objects for notification only
if they are instantiated from a class that implements a specific interface.</font>
<p><b><font color="#FF0000">Another example</font></b>
<p><font color="#000000">In standard Java MVC, a Java <i>model</i> must
be an object of a class that extends the <b>Observable</b> class.</font>
<p><font color="#000000">Objects instantiated from such a class inherit
the ability to <i>register</i> objects instantiated from classes that implement
the <b>Observer</b> interface <i>(view objects)</i>.&nbsp; Any object that
doesn't implement the <b>Observer</b> interface cannot be registered on
an <b>Observable</b> object <i>(a model)</i>.</font>
<p><b><font color="#FF0000">Advantages</font></b>
<p><font color="#000000">One of the advantages of such a scheme is that
the author of the model class doesn't have to know the names of the classes
from which the view objects are instantiated.&nbsp; It is sufficient to
know that they are instantiated from classes that implement the <b>Observer</b>
interface.</font>
<p><font color="#000000">Another advantage is that the author of the model
class knows that all registered observers provide concrete definitions
of all methods declared in the <b>Observer</b> interface.</font>
<p><b><font color="#FF0000">Interface methods can be safely invoked on
observers</font></b>
<p><font color="#000000">The methods declared in the interface can be safely
invoked on all registered <b>Observer</b> objects with no downcasting required.</font>
<p><b><font color="#FF0000">No guarantee of correct behavior</font></b>
<p><font color="#000000">Of course, there is no guarantee that the concrete
definition of the interface method will behave properly.&nbsp; The guarantee
is simply that the method exists and can be invoked.</font>
<center>
<h2>
<a NAME="Where Do We Go From Here"></a><font color="#000000">Where Do We
Go From Here?</font></h2></center>
<font color="#000000">Most Swing components extend from the class named
<b>javax.swing.JComponent</b>.</font>
<p><font color="#000000"><b>JComponent</b> extends <b>java.awt.Container</b>
which, in turn extends <b>java.awt.Component</b>.</font>
<p><font color="#000000">If you understand the capabilities provided by
these three classes, you already know a great deal about all Swing components.</font><font color="#000000"></font>
<p><font color="#000000">One of the beauties of inheritance is that it
is not necessary for you to learn about specific capabilities on a component-by-component
basis.&nbsp; Rather, you can learn about capabilities on a group basis
by learning about the common superclass of those components.</font>
<p><b><font color="#FF0000">Most Swing components are containers</font></b>
<p><font color="#000000">Unlike the AWT components, almost all Swing components
behave as containers.&nbsp; This means that they can contain other things,
including other Swing components.</font>
<p><b><font color="#FF0000">Containment is very beneficial</font></b>
<p><font color="#000000">A lot of the improvement that Swing provides relative
to the AWT results from the capability of a Swing component to contain
other things, such as images and other components.</font>
<p><b><font color="#FF0000">A button tree</font></b>
<p><font color="#000000">For example, you could create a Swing tree whose
leaves are buttons where each button contains some text and an image.</font>
<p><font color="#000000">Each of the buttons could register a variety of
different event listeners including <b>Action</b> listeners,
<b>Mouse</b>
listeners, and <b>Focus</b> listeners.</font>
<p><font color="#000000">I'm not suggesting that such a structure would
be useful.&nbsp; I mention this possibility simply to illustrate the range
of possibilities that exist with Swing.</font>
<p><b><font color="#FF0000">Will devote a lot of time to JComponent and
its superclasses</font></b>
<p><font color="#000000">Since an understanding of the <b>JComponent</b>,
class and its superclasses is so critical to an understanding of Swing
capabilities, the next several lessons will be devoted to an understanding
of the capabilities that Swing components inherit from these classes.</font>
<p><b><font color="#FF0000">Where's the code?</font></b>
<p>If you have spent much time with my tutorial lessons in the past, you
probably know that I rarely write this much text without showing some code
to back it up.&nbsp; Beginning in the next lesson, I will get back into
that mode and start showing you how to program using Swing.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
