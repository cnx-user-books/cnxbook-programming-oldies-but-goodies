<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JDK 1.1, Controlling Position in a GridLayout<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 903, Revised 3/20/97.
<ul><li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li></ul>

<hr width="100%"><center><h2><a name="introduction"></a><b><font color="#ff0000">Introduction</font></b></h2></center>
This is one in a planned series of documents which will be written in response
to questions posted on the various Java newsgroups.

<p>In most cases, the response will be in the form of a sample program.
In most cases, the programs will be written using JDK 1.1 unless there
is some special reason to backtrack to JDK 1.0.2.

<p>Also, in most cases, there will be very little discussion other than
the comments contained in the program.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center><font color="#000000">This program was written in response to a request
from a poster for code which can be used to control the placement of components
in a GridLayout.</font>

<p><hr width="100%"><pre>/*File Layout08.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under JDK 1.1

This program illustrates use of the GridLayout manager and was written
to answer the following question posted on a newsgroup by another Java&nbsp;
programmer.

"I have been looking at your Lecture Notes #118: Placing Components in
Containers - GridLayout.&nbsp; I have run the examples and examined the code and
seem to understand it fine. I am now trying to write a program that
displays buttons in a panel, not flowed across the panel but specifiy the
coordinates for the buttons.&nbsp; I do not really want to use absolute
coordinates, because of potential cross platform compatiblity, so I thought
that using GridLayouts will solve this problem.&nbsp; However, I have a
question;

Once you set the grid spec's and associate it with a panel, is it possible
to say for instance; place button at row 4, column 6 on the grid (not
absolute coordinate).&nbsp; The Button constructors do not seem to allow for
this.

Any help you can give would be gratefully received.

Regards,
...

The answer, is that the positions of individual buttons in a GridLayout&nbsp;
of buttons is determined by the order that they are added to the container.
However, it is not necessary to be satisfied with that arrangement.&nbsp; It is
also possible to specify the position of any individual button by using
the two-arg form of the add() method to specify the index of the button
in the list of buttons.

This program creates a keypad emulating those typically found on PC
keyboards.&nbsp; Initially the keys labeled 7,8,9,4,6,1,2,3,0, and period.
are placed in a GridLayout pattern with a Label object inserted between
the 0-key and the period-key to produce a space in the pattern.&nbsp; These
keys are positioned by the order in which they are added.&nbsp; Note that the
5-key is missing in this arrangement.

Then the 5-key is inserted at the proper location using the two-arg
version of the add() method.

A windowClosing() event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

The program was tested using JDK 1.1 running under Win95.

This program will be included in the document entitled

"Java903.htm JDK 1.1, Controlling Position in a GridLayout"

at&nbsp;

&lt;http://www2.austin.cc.tx.us/baldwin/>
*/
//==========================================================================

import java.awt.*;
import java.awt.event.*;
//==========================================================================
public class Layout08 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a Graphical User Interface object
&nbsp; }//end main
}//end class Layout08
//===========================================================================

class GUI {
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; GridLayout myGridLayout = new GridLayout(4,3,8,8);//row,col,Hgap,Vgap

&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(myGridLayout);

&nbsp;&nbsp;&nbsp; //Add eleven buttons beginning at the top left.
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("7 - Home"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("8 - Up"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("9 - PgUp"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("4 - Left"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("6 - Right"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("1 - End"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("2 - Down"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("3 - PgDn"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("0 - Ins"));
&nbsp;&nbsp;&nbsp; myFrame.add(new Label(""));//insert a blank space&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(new Button(". - Del"));

&nbsp;&nbsp;&nbsp; //Insert a button in the center, causing all the others to move
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("5"), 4);

&nbsp;&nbsp;&nbsp; myFrame.setSize(250,300);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to terminate the program
&nbsp;&nbsp;&nbsp; // when the Frame is closed.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================================</pre>
-end-<!--end--></body></html>