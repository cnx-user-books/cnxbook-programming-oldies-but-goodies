<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<h2>
Enterprise JavaBeans:&nbsp; Middle-Tier Servers and J2EE</h2>
<i><font color="#000000">Baldwin discusses the use of J2EE as a middle-tier
server in a multi-tier environment.&nbsp; He explains some of the benefits
of the multi-tier environment in general, and the use of J2EE in particular.&nbsp;
He discusses the general concept of a container, describes the services
provided by the EJB container, and discusses how the EJB container fits
into the grand scheme of things in J2EE.</font></i>
<p><b>Published</b>&nbsp; February 12, 2001
<br><b>By <a href="#BaldwinBio">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1320
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Overview">Overview</a></li>

<li>
<a href="#A Middle-Tier Server">A Middle-Tier Server</a></li>

<li>
<a href="#A J2EE Compliant Server">A J2EE Compliant Server</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is one in a series of lessons designed to teach you about Sun's Enterprise
JavaBeans (EJB).
<p><b><font color="#FF0000">Time to regroup</font></b>
<p>The previous lessons in this series have provided accelerated instructions
to help you get your first enterprise bean up and running as quickly as
possible.&nbsp; Quite a few lessons were required to accomplish that objective,
not because it is especially difficult to write enterprise beans, but rather
because it is difficult to deploy the beans in a J2EE server.
<p><b><font color="#FF0000">A cookbook approach</font></b>
<p>In working through the accelerated lessons, I provided the information
more or less in a cookbook fashion.&nbsp; That is to say, I told you what
to do, and not necessarily why to do it.
<p><b><font color="#FF0000">A change of pace</font></b>
<p>Now that you have your first enterprise bean running successfully in
your J2EE server, it is time to sit back, relax, take a deep breath, and
embark on the task of understanding Enterprise JavaBeans.
<p>That will be the purpose of the remaining lesson in this series on EJB
-- to help you really understand what enterprise beans are, how to write
them, and how to use them to advantage.
<p>From this point on, I intend to go much more slowly explaining things
more carefully as I proceed.&nbsp; Along the way, I will show you lots
of sample bean programs, each of which will be as simple as I can make
it while still illustrating the concept that the program is intended to
illustrate.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is strongly recommended that you study the previous lesson entitled
<a href="Java1316.htm">Enterprise
JavaBeans(TM), Getting Started with EJB, Part 7</a> before embarking on
this lesson.
<p>Additional supplementary material that I have written is available at
<a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan</a>.&nbsp;
As of the date of this writing, Gamelan does not maintain a consolidated
index to my Java tutorials.&nbsp; Therefore, they may be difficult to locate
on the Gamelan site.&nbsp; A consolidated index with links to the tutorials
on the Gamelan site is available at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth and refer to earlier material without losing your place.
<center>
<h2>
<a NAME="Preview"></a>Preview</h2></center>
<b><font color="#FF0000">A middle-tier server</font></b>
<p><font color="#000000">In this lesson, I will discuss the use of Sun's
J2EE as a middle-tier server in a multi-tier environment.&nbsp; I will
explain some of the benefits of the multi-tier environment in general,
and the use of J2EE in particular.</font>
<p><b><font color="#FF0000">J2EE compliant services</font></b>
<p><font color="#000000">I will discuss some of the services provided by
a J2EE compliant server along with the fact that such a server provides
both a web container and an EJB container.&nbsp; The purpose of the web
container is different from the purpose of this series of lessons on EJB.&nbsp;
Therefore, the web container won't be discussed further in this series
of lessons on EJB.</font>
<p><b><font color="#FF0000">What is an EJB container?</font></b>
<p><font color="#000000">I will discuss the general concept of an EJB container,
describe the services provided by the EJB container, and discuss how the
EJB container fits into the grand scheme of things in J2EE.</font>
<center>
<h2>
<a NAME="Overview"></a><font color="#000000">Overview</font></h2></center>
<b><font color="#FF0000">The Java 2 Platform, Enterprise Edition</font></b>
<p>Enterprise JavaBeans technology <i>(also known as EJB technology)</i>
is part of a larger overall technology known as the Java 2 Platform, Enterprise
Edition (J2EE).&nbsp; <i>(Note that this series of lessons is primarily
concerned with EJB.&nbsp; Other components of J2EE, such as servlets and
JSP are covered in other lessons.)</i>
<p>J2EE provides an architecture for developing, deploying, and executing
applications in a distributed-object environment. System-level services,
such as transaction management, security, client connectivity, and database
access are often required of such applications.
<p><b><font color="#FF0000">Concentrating on business logic</font></b>
<p>A server that complies with the J2EE specification provides the required
system-level services.&nbsp; This allows the application programmer to
concentrate on business logic without having to also write the code to
provide system-level services.
<p><b><font color="#FF0000">Reusable components</font></b>
<p>Enterprise beans are reusable components that can be accessed by client
programs.&nbsp; The application programmer codes the business logic into
the beans and deploys them into a J2EE compliant server.&nbsp; The server
functions as a middle-tier server in a multi-tier client/server system.
<center>
<h2>
<a NAME="A Middle-Tier Server"></a><font color="#000000">A Middle-Tier
Server</font></h2></center>
A middle-tier server in a multi-tier system receives and processes requests
from clients.&nbsp; This often eliminates the need for client programs
to deal with the complexity of databases and other complex back end systems.
<p><b><font color="#FF0000">Thin clients</font></b>
<p>This leads to a system concept involving clients often referred to as
<i>thin
clients</i>.&nbsp; The thin-client programs simply deal with the interface
to the middle tier.&nbsp; This relieves them of the difficulties of executing
complex business rules, connecting to legacy programs, and making queries
to database systems.&nbsp; This complexity is handled by the enterprise
beans and the associated system services running in the middle tier.
<p>Because the clients are thin, and are not required to execute complex
programs, they can exist in a variety of forms including Java applications,
web browsers, hand-held devices, etc.
<p><b><font color="#FF0000">Typical organization</font></b>
<p>The first tier in a J2EE three-tier system typically consists of one
or more clients.&nbsp; These clients request business-logic services from
enterprise beans running in the middle tier.&nbsp; The beans make use of
the system services provided by the middle-tier server to access data from
existing systems in the third tier.&nbsp; The beans apply business rules
to the data, and return the results to the clients in the first tier.
<p><b><font color="#FF0000">Gasoline pumps and Automated Teller Machines</font></b>
<p>In an earlier lesson, I speculated that gasoline pumps that accept credit
cards and ATMs both function as thin clients in a multi-tier system.
<p>In one case, the back end database system includes your credit-card
account.&nbsp; In the other case, the back end system includes your bank
account.
<p>Although I don't know the details, I doubt that the little processor
in the gas pump interacts directly with your credit-card account, and I
doubt that the ATM interacts directly with your bank account.&nbsp; In
both cases, I speculate that there is a middle tier that accepts requests
from the client <i>(in this case the gas pump or the ATM)</i> and provides
the requested services by dealing with the back end databases.
<p><b><font color="#FF0000">Services provided by the middle-tier</font></b>
<p>According to Sun, middle-tier servers provide:
<ul>
<li>
Business services to clients</li>

<li>
Remote access to clients and back-office systems</li>

<li>
Session and transaction management</li>

<li>
Security enforcement</li>

<li>
Resource pooling</li>
</ul>
Also according to Sun,
<p><i>"Because the middle-tier provides these services, the clients can
be thin, simple, and rapidly developed. You can integrate new clients with
existing applications and databases, protecting your investment in legacy
systems.</i>
<p><i>Middle-tier servers enable you to create large-scale distributed
applications for the enterprise. The architecture of the J2EE platform
makes it the ideal choice for developing middle-tier servers."</i>
<center>
<h2>
<a NAME="A J2EE Compliant Server"></a>A J2EE Compliant Server</h2></center>
<b><font color="#FF0000">Services provided</font></b>
<p>According to Sun, a J2EE compliant server provides the following services:
<ul>
<li>
Naming and Directory - allows programs to locate services and components
through the Java Naming and Directory Interface (JNDI) API</li>

<li>
Authentication - enforces security by requiring users to log in</li>

<li>
HTTP - enables Web browsers to access servlets and JavaServer Pages (JSP)
files</li>

<li>
EJB - allows clients to invoke methods on enterprise beans</li>
</ul>
As mentioned earlier, and as indicated by the above list of services, J2EE
is broader than EJB alone.&nbsp; A J2EE compliant server can be compartmentalized
into two <i>containers</i>:
<ul>
<li>
A web container</li>

<li>
An EJB container</li>
</ul>
<b><font color="#FF0000">The Web container</font></b>
<p>The Web container is a runtime environment for managing JSP files and
servlets. I have previously published numerous tutorial lessons on JSP
and servlets in <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">a
different series of tutorial lessons</a>.&nbsp; The series of lessons that
you are reading now will concentrate on enterprise beans, and therefore,
won't be concerned with the <i>Web Container</i> that is a part of J2EE.
<p><b><font color="#FF0000">The EJB Container</font></b>
<p>The EJB container is a runtime environment for managing enterprise beans.&nbsp;
Enterprise beans are objects that run within an EJB container.
<p><b><font color="#FF0000">What is a container?</font></b>
<p>The concept of a container is a little abstract.&nbsp; Maybe this will
help.&nbsp; One author who publishes excellent technical material on Sun's
site explains the concept as follows, <i>"The container hosts and manages
an enterprise bean in the same manner that ... an HTML browser hosts a
Java applet."</i>
<p>An enterprise bean cannot function outside of an EJB container, <i>(which,
by the way, leads to some difficulty in testing and debugging enterprise
beans)</i>.&nbsp; The EJB container controls the beans and provides them
with system-level services.
<p><b><font color="#FF0000">Services provided by EJB container</font></b>
<p>With a J2EE compliant server, the programmer of the class from which
the enterprise bean object will be instantiated can assume that the following
system-level services will be available:
<ul>
<li>
Transaction Management</li>

<li>
Security</li>

<li>
Remote Access to the bean</li>

<li>
Life Cycle Management for the bean</li>

<li>
Database Connection Pooling</li>
</ul>
As a result, the programmer can concentrate on programming the methods
that execute business logic <i>(business methods)</i> within the enterprise
beans without having to also program the system-level services enumerated
in the above list.
<p><b><font color="#FF0000">Isolation</font></b>
<p>A client application does not have direct access to an enterprise bean.&nbsp;
Rather, the bean is isolated from the client application by the container.
<p>The invocation of a business method on the bean passes first through
the container before reaching the bean.&nbsp; The container ensures that
persistence, transaction management, and security are handled properly
for each invocation of a business method on a bean made by a client.
<p><b><font color="#FF0000">Transaction management</font></b>
<p>The code required to manage distributed transactions can be very complex.&nbsp;
Each time a client invokes a business method on a bean, the container intercepts
the invocation in order to manage the transaction.&nbsp; Rather than being
required to write and debug complex code for transaction management, the
bean programmer declares the transactional properties for the bean in something
called the <i>deployment descriptor file</i>.&nbsp; The container reads
the file and handles the bean's transaction requirements automatically.
<p><b><font color="#FF0000">The deployment descriptor file</font></b>
<p>The deployment descriptor file is an XML file that is automatically
generated by the J2EE deployment tool.&nbsp; (<i>In case you are unfamiliar
with XML, I have written numerous tutorial lessons on XML.&nbsp; You will
find a consolidated index to those tutorial lessons at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.)</font></i>
<p>I provided a listing of a J2EE deployment descriptor file for a simple
bean in Listing 4 of the lesson entitled <a href="Java1315.htm">Enterprise
JavaBeans(TM):&nbsp; Getting Started with EJB, Part 6</a>.
<p><b><font color="#FF0000">Security</font></b>
<p>The container also builds and manages a security shield around the enterprise
bean.&nbsp; Only authorized clients are allowed to invoke methods on the
bean.&nbsp; This is accomplished using a system of <i>roles</i>.
<p><b><font color="#FF0000">Roles</font></b>
<p>According to Sun, <i>"Each client belongs to a particular role, and
each role is permitted to invoke certain methods."</i>
<p>The roles of the different clients along with the methods they are allowed
to invoke are also declared in the deployment descriptor file.&nbsp; As
a result, the bean programmer is not required to write the code to enforce
security.
<p><b><font color="#FF0000">Remote access to the bean</font></b>
<p>The container manages the low-level communications between clients and
enterprise beans. As with <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">RMI</a>
and the Java implementation of <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">CORBA</a>,
once an enterprise bean has been <i>created</i> by a client, the client
invokes methods on the bean just as if the bean were running in the same
virtual machine as the client.
<p><b><font color="#FF0000">Life cycle management</font></b>
<p>According to Sun, <i>"An enterprise bean passes through several states
during its lifetime. The container creates the enterprise bean, moves it
between a pool of available instances and the active state, and finally,
removes it. Although the client calls methods to create and remove an enterprise
bean, the container performs these tasks behind the scenes."</i>
<p>Life cycle management for a simple session bean was illustrated by the
program discussed in several previous lessons in this series.&nbsp; <i>(See
the lesson entitled <a href="Java1311.htm">Enterprise JavaBeans(TM):&nbsp;
Getting Started with EJB, Part 2</a>.)</i>
<p>At each critical stage in the bean's life cycle, the container invokes
a specific callback method on the bean.&nbsp; The bean programmer can override
the callback methods to provide the desired behavior as the bean moves
from one stage in its life to the next.
<p><b><font color="#FF0000">Database connection pooling</font></b>
<p>Also according to Sun, <i>"A database connection is a costly resource.
Obtaining a database connection is time-consuming and the number of connections
may be limited. To alleviate these problems, the container manages a pool
of database connections. An enterprise bean can quickly obtain a connection
from the pool. After the bean releases the connection, it may be re-used
by another bean."</i>
<p>The simple bean that was discussed in the previous lessons in this series
did not involve a database.&nbsp; Furthermore, the bean was a session bean
and not an enterprise bean <i>(the two flavors of beans will be the primary
topic of a subsequent lesson)</i>.&nbsp; The use of database access by
enterprise beans will also be illustrated in subsequent lessons.
<p><b><font color="#FF0000">Other resource management</font></b>
<p>It is the container <i>(not the bean or the client program)</i> that
is generally responsible for resource management.&nbsp; For example, through
careful life cycle management and the pooling of resources, the container
can often reduce memory consumption.&nbsp; When a bean is not being used,
a container can place it in a pool to be used by another client.&nbsp;
The container can also remove it from memory and bring it back when it
is needed. <i>(This is referred to as passivation and activation, which
will also be discussed in a subsequent lesson.)</i>
<p>Because the container sits between the client and the bean, the client
is not aware of such activities.&nbsp; For example, a bean might be passivated
while its remote reference on the client remains intact.&nbsp; When the
client later invokes a method on the remote reference, the container activates
the bean to service the request.&nbsp; This all happens without any awareness
on the part of the client <i>(except possibly for the fact that some delays
might be noticed)</i>.
<p><b><font color="#FF0000">A bean's access to resources</font></b>
<p>A bean accesses other resources, such as those on the following list,
through the container:
<ul>
<li>
JDBC connection</li>

<li>
Another bean</li>

<li>
The identify of its caller</li>

<li>
A reference to itself</li>

<li>
Various properties</li>
</ul>
The following three mechanisms are provided, through which the bean interacts
with its container:
<ul>
<li>
Callback methods</li>

<li>
The EJBContext interface</li>

<li>
The Java Naming and Directory Interface (JNDI)</li>
</ul>
<b><font color="#FF0000">Callback methods</font></b>
<p>As mentioned earlier, each time a bean reaches a specific stage in its
life cycle, the container invokes a corresponding callback method on the
bean.&nbsp; By so doing, the container alerts the bean to the occurrence
of the specific events in its life.&nbsp; The bean programmer can override
the callback methods to cause the bean to exhibit some desired behavior
in conjunction with those events.
<p><b><font color="#FF0000">The EJBContext interface</font></b>
<p>One of the callback methods is a method named <b>setSessionContext()</b>.&nbsp;
When a bean is created by a client, the container invokes this method on
the bean passing a reference to an object of type <b>SessionContext</b>.&nbsp;
According to one author, this is <i>"a reference directly to the container."</i>
<p>The bean programmer can save this reference in an instance variable
of the bean.&nbsp; Having saved the reference, the bean can later invoke
methods
on the reference to interact with the container.&nbsp; For example, there
are methods that allow the bean to obtain the identity of its client.
<i>(I
will show you a sample bean that uses this capability in a subsequent lesson.)</i>
<p><b><font color="#FF0000">JNDI</font></b>
<p>I provided a brief discussion of JNDI in the lesson entitled <a href="Java1316.htm">Enterprise
JavaBeans(TM):&nbsp; Getting Started with EJB, Part 7</a>.
<p>The container manages a special naming system for use by the beans<i>.</i>&nbsp;
This naming system is accessed by beans using JNDI to access other resources
registered in the naming system.
<p><b><font color="#FF0000">Portability</font></b>
<p>One of the main advantages of J2EE is portability.&nbsp; The specification
defines a contract that is expected to be adhered to by J2EE compliant
servers.&nbsp; The contract specifies various bean/container interactions
and behaviors with regard to security, transaction management, persistence,
etc.&nbsp; This contract is intended to provide portability between J2EE
compliant servers so that existing enterprise beans can be deployed and
run in any J2EE compliant server.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<b><font color="#FF0000">A middle-tier server</font></b>
<p><font color="#000000">In this lesson, I have discussed the use of Sun's
J2EE as a middle-tier server in a multi-tier environment.&nbsp; I explained
some of the benefits of the multi-tier environment in general, and the
use of J2EE in particular.</font>
<p><b><font color="#FF0000">J2EE services</font></b>
<p><font color="#000000">I discussed some of the services provided by a
J2EE compliant server along with the fact that such a server provides both
a web container and an EJB container.&nbsp; I explained that the purpose
of the web container is different from the purpose of this series of lessons
on EJB, and therefore, I won't discuss the web container further in this
series.</font>
<p><b><font color="#FF0000">An EJB container</font></b>
<p><font color="#000000">I discussed the general concept of a container,
described the services provided by the EJB container, and discussed how
the EJB container fits into the whole scheme of things in J2EE.</font>
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
At numerous places in the above text, I stated that something will be discussed
in a <i>subsequent</i> lesson.&nbsp; Therefore, as you can readily see,
we have a lot of ground to cover in the future.
<p>In the next lesson, I will present another sample enterprise bean program
that you can use to hone your deployment skills.&nbsp; This bean will make
use of helper classes.
<p>Shortly after that, I will publish a lesson that discusses the two different
flavors of enterprise beans:&nbsp; session beans and entity beans.
<p>
<hr size=3 width="100%" align=center>
<br><font size=-1>Trademarks:&nbsp; The following terms <i>(and possibly
some other terms used in this lesson as well)</i> are trademarks of Sun
Microsystems:&nbsp; Enterprise JavaBeans, EJB, Java, Java 2 Platform Enterprise
Edition, J2EE, Java Naming and Directory Interface, JNDI, and JDBC</font>
<br>
<hr size=3 width="100%" align=center>
<br><font size=-1>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction
in whole or in part in any form or medium without express written permission
from Richard Baldwin is prohibited.</font>
<br>
<hr size=3 width="100%" align=center>
<h4>
<a NAME="BaldwinBio"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
