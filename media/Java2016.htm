<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">
<h2>
Java Sound, Playing Back Audio Files using Java</h2>
<i>Baldwin shows you how to write a program that you can use to play back 
audio files, including those that you create using a Java program, and 
those that you acquire from other sources.</i><p><b>Published:</b>&nbsp; April 
1, 2003<br><b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
<p>Java Programming Notes # 2016<ul >
<li>
<a href="#Preface">Preface</a></li>
<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Code</a></li>

<li>
<a href="#Run the program">Run the Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<p>
This  series of lessons is designed to teach you how to use the 
Java Sound API.&nbsp; The first lesson in the series was entitled 
<a href="http://www.developer.com/java/other/article.php/1565671">Java Sound, An 
Introduction</a>.&nbsp; The 
previous lesson was entitled
<a href="http://www.developer.com/java/other/article.php/2105421">Java Sound, 
Capturing Microphone Data into an Audio File</a>.</p>
<p><font color="#FF0000"><b>Two types of audio data</b></font></p>
<p>
Two  different 
types of audio data are supported by the Java Sound API:<ul>
  <li>Sampled audio data</li>
  <li>Musical Instrument Digital Interface (MIDI) data</li>
  </ul>
  <p>The two types of audio data are very different.&nbsp;  I 
  am concentrating on sampled audio data at this point in time.&nbsp; I will defer 
  my discussion of 
      MIDI    until later.<p>
<b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings and figures while you are reading about
them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at <font color="#000000">
<a href="http://www.DickBaldwin.com">www.DickBaldwin.com</a>.</font>
  <h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>The previous lesson showed you how to use the Java Sound API to write 
programs to capture microphone data into audio files types of your own choosing.&nbsp; 
At that time, I told you that you should be able to play the audio files back 
using readily available media players, such as the Windows Media Player.<p>In 
this lesson, I will provide and explain a program that you can use to play back 
audio files, including those that you create using a Java program, as well as 
those that you acquire from other sources.<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Code</font></h2></center>
<p>
<font color="#FF0000"><b>What is a SourceDataLine?</b></font><p>
I will be using a <b>SourceDataLine</b> object in this program.&nbsp; A <b>
SourceDataLine</b> object is a streaming mixer input object. <i>(A previous 
lesson explained lines and mixers in detail.)</i><p>
A <b>SourceDataLine</b> object can accept a stream of audio data and push that audio data into 
a mixer 
in real time. The actual audio data can derive from a variety of sources, such 
as an audio file, <i>(which will be the case in this program)</i> a network 
connection, or a buffer in memory.<p>
<font color="#FF0000"><b>Confusing terminology</b></font><p>
The terminology used with the Java sound API can be very confusing.&nbsp; Here 
is part of what Sun has to say about a <b>SourceDataLine</b> object.<blockquote>
  <p>
<i>&quot;A source data line is a data line to which data may be written. It acts as a 
source to its mixer. An application writes audio bytes to a source data line, 
which handles the buffering of the bytes and delivers them to the mixer. The 
mixer may ... deliver the mix to a target such as an output port (which may 
represent an audio output device on a sound card). </i>
  <p><i>Note that the naming convention for this interface reflects the 
  relationship between the line and its mixer. From the perspective of an 
  application, a source data line may act as a target for audio data.&quot;</i></p>
</blockquote>
<p>
This concept is discussed in detail in the 
lesson entitled
<a href="http://www.developer.com/java/other/article.php/1572251">Java Sound, 
Getting Started, Part 1, Playback</a>.<p>
<font color="#FF0000"><b>Audio data output</b></font><p>
The data written to the <b>SourceDataLine</b> object can be pushed into a mixer in real time.&nbsp; 
The 
actual destination of the audio data can be any  of a variety of 
destinations.<blockquote>
  <p>
<i>(The sample program in this lesson writes audio data into a SourceDataLine 
object, which pushes the data to the computer speakers.)</i></blockquote>
<p>
<font color="#FF0000"><b>The user interface</b></font><p>
When this program is executed, the GUI shown in Figure 1 appears on the screen.&nbsp; 
As you can see, this GUI contains the following components:<ul>
  <li>A text field</li>
  <li>A Play button</li>
  <li>A Stop button</li>
  </ul>
    <p align="center">
      <img border="0" src="java2016a.gif" width="251" height="71"><p align="center">
      Figure 1 Program GUI<p>
<font color="#FF0000"><b>Operation of the program</b></font><p>
The user enters the path and file name for an audio file into the 
text field, and then clicks the <b>Play</b> button.&nbsp; The contents of the 
audio file are played back through the system speakers.<p>
Playback continues until the system encounters the end of the audio file, or the 
user clicks the <b>Stop</b> button, whichever occurs first.<p>
Although the user can terminate the playback of the audio file by clicking the
<b>Stop</b> button, because the audio data is buffered in a large buffer in the playback loop, there may be a 
noticeable delay between the time that the <b>Stop</b> button is clicked and the time that the playback actually terminates.<p>
<font color="#FF0000"><b>Audio data format is displayed</b></font><p>
The program also displays the format of the audio data before playing the file.&nbsp; 
The format is displayed on the command- line screen.<p>
<font color="#FF0000"><b>Will discuss in fragments</b></font><p>
As usual, I will 
discuss this program in fragments.&nbsp; A complete listing of the program is 
shown in Listing 17 near the end of the lesson.<p>
<font color="#FF0000"><b>The class named AudioPlayer02</b></font><p>
The program named <b>AudioPlayer02</b> demonstrates the use of a Java program to 
play back the contents of an audio file.&nbsp; The class definition for the controlling class begins in Listing 1.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>public class AudioPlayer02 extends JFrame{

  AudioFormat audioFormat;
  AudioInputStream audioInputStream;
  SourceDataLine sourceDataLine;
  boolean stopPlayback = false;

  final JButton stopBtn = new JButton("Stop");
  final JButton playBtn = new JButton("Play");
  final JTextField textField =
                       new JTextField("junk.au");

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p>
<font color="#FF0000"><b>Instance variables</b></font><p>
Several instance variables are declared in Listing 1.&nbsp; Some of those 
instance variables are also initialized.&nbsp; It is worth noting that the text 
field object is initialized to contain the default file name <b>junk.au</b>.&nbsp; 
This makes it possible to run the program without the requirement to type the 
file name in the text field, provided that an audio file named <b>junk.au</b> 
resides in the same directory as the controlling class file.&nbsp; <i>(A 
previous lesson contained a program that created an audio file named junk.au.)</i><p>
<font color="#FF0000"><b>The main method</b></font><p>
The <b>main</b> method for this Java application,  shown in Listing 2, is 
extremely simple.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>  public static void main(String args[]){
    new AudioPlayer02();
  }//end main

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p>
The code in the <b>main</b> method simply instantiates an object of the 
controlling class.&nbsp; Code in the constructor, some other methods, and some 
inner classes take over at that point and provide the operational behavior of 
the program.<p>
<b><font color="#FF0000">The constructor</font></b><p>
The constructor begins in Listing 3.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>  public AudioPlayer02(){//constructor

    stopBtn.setEnabled(false);
    playBtn.setEnabled(true);

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p>
The code in Listing 3 causes the <b>Stop</b> button to be disabled and causes 
the <b>Play</b> button to be enabled when the program first starts running.&nbsp; 
This is the situation shown in Figure 1.<p>
<font color="#FF0000"><b>Action listener on the Play button</b></font><p>
The code in Listing 4 instantiates and register an action listener on the <b>
Play</b> button.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>    playBtn.addActionListener(
      new ActionListener(){
        public void actionPerformed(
                                  ActionEvent e){
          stopBtn.setEnabled(true);
          playBtn.setEnabled(false);
          <b>playAudio()</b>;//Play the file
        }//end actionPerformed
      }//end ActionListener
    );//end addActionListener()

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p>
I explained this anonymous inner class syntax in the previous lesson.&nbsp; The 
most significant thing about the code in Listing 4 is the statement highlighted 
in boldface.&nbsp; This statement invokes the <b>playAudio</b> method to play 
the contents of the audio file when the user clicks the <b>Play</b> button.<p>
The other two statements in Listing 4 simply reverse the enabled/disabled state 
of the <b>Play</b> and <b>Stop</b> buttons.<p>
<font color="#FF0000"><b>Action listener on the Stop button</b></font><p>
We are still discussing the constructor for the controlling class.&nbsp; The 
code in Listing 5 instantiates and registers an action listener on the <b>Stop</b> 
button.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>    stopBtn.addActionListener(
      new ActionListener(){
        public void actionPerformed(
                                  ActionEvent e){
          //Terminate playback before EOF
          <b>stopPlayback = true;</b>
        }//end actionPerformed
      }//end ActionListener
    );//end addActionListener()

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p>
When the user clicks the <b>Stop</b> button, the code in Listing 5 sets a flag 
named <b>stopPlayback</b> to true.&nbsp; As you will see later, the thread that 
handles the actual playback operation periodically tests this flag.&nbsp; If the 
flag switches from false to true, the code in the <b>run</b> method of the 
playback thread terminates playback at that point in time.<p>
<font color="#FF0000"><b>There may be a time delay before termination of 
playback</b></font><p>
However, there are some rather large buffers used in the playback loop.&nbsp; 
These buffers must be emptied before playback actually terminates.&nbsp; Therefore, 
there may be a time delay between the point in time that this flag is set to 
true and the point in time that playback actually terminates.<p>
<font color="#FF0000"><b>Finish constructing the GUI</b></font></p>
<p>
The code in Listing 6 finishes the construction of the GUI.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>    getContentPane().add(playBtn,"West");
    getContentPane().add(stopBtn,"East");
    getContentPane().add(textField,"North");

    setTitle("Copyright 2003, R.G.Baldwin");
    setDefaultCloseOperation(EXIT_ON_CLOSE);
    setSize(250,70);
    setVisible(true);
  }//end constructor

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p>
This code does the following:<ul>
  <li>Places the text field and the two buttons in their respective positions in 
  the GUI.</li>
  <li>Sets the title and the size of the GUI.</li>
  <li>Enables the X button in the upper-right corner of the frame to terminate 
  the program when it is clicked.</li>
  <li>Makes the whole thing visible.</li>
  </ul>

<p>
<font color="#FF0000"><b>The playAudio method</b></font><p>
Recall that the event handler on the <b>Play</b> button invokes the <b>playAudio</b> 
method.&nbsp; The <b>playAudio</b> method plays back audio data from an audio file, 
where the name of the audio file is specified in the text field of the GUI.&nbsp; The
<b>playAudio</b> method begins 
in Listing 7.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>  private void playAudio() {
    try{
      File soundFile =
                   new File(<b>textField.getText()</b>);

<b><font face="Courier New,Courier">Listing 7</font></b></pre>
</td>
</tr>
</table>

<p>
<font color="#FF0000"><b>A File object</b></font><p>
The first thing that we need to do is to create a new <b>File</b> object that 
provides an abstract representation of the file and directory pathname entered 
by the user in the text field of the GUI.<p>
This is accomplished in Listing 7 by:<ul>
    <li>Getting a <b>String</b> object that encapsulates the text entered by the 
    user into the text field.</li>
    <li>Passing that <b>String</b> object's reference to the constructor of the<b> 
    File</b> class.<b> </b></li>
    </ul>

<p>
<font color="#FF0000"><b>An AudioInputStream object</b></font><p>
Next, we need to get an <b>AudioInputStream</b> object that is connected to the 
audio file.&nbsp; This is accomplished in Listing 8.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>      audioInputStream = AudioSystem.
                  getAudioInputStream(soundFile);

<b><font face="Courier New,Courier">Listing 8</font></b></pre>
</td>
</tr>
</table>

<p>
Listing 8 passes the <b>File</b> object's reference to the static <b>
getAudioInputStream</b> method of the<b> AudioSystem</b> class.&nbsp; There are 
several overloaded versions of the <b>getAudioInputStream</b> method in Java SDK 
version 1.4.1.&nbsp; Here is part of what Sun has to say about the version of 
the method used in Listing 8.<blockquote>

<p>
<i>&quot;Obtains an audio input stream from the provided File. The File must point to 
valid audio file data.&quot;</i></blockquote>
<p>
<font color="#FF0000"><b>The audio format</b></font><p>
You learned in previous lessons that audio data comes in a variety of audio 
formats.&nbsp; The first statement in Listing 9 invokes the <b>getFormat</b> method on 
the <b>AudioInputStream</b> object to get and save the audio format of the specified 
audio file.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>      audioFormat = audioInputStream.<b>getFormat</b>();

      System.out.println(audioFormat);

<b><font face="Courier New,Courier">Listing 9</font></b></pre>
</td>
</tr>
</table>

<p>
<font color="#FF0000"><b>Sample formats</b></font><p>
The second statement in Listing 9 displays the reported format.<p>
Here is the reported format for a file named <b>tada.wav</b>, which I found in 
the operating system media directory on my Win2000 system.<p>
<b><font face="Courier New" size="2">PCM_SIGNED, 22050.0 Hz, 16 bit, stereo, 
little-endian, audio data</font></b><p>
Here is the reported format for a file named <b>junk.au</b>, which was produced 
by the program named <b>AudioRecorder02</b> in the previous lesson.<p>
<b><font face="Courier New" size="2">PCM_SIGNED, 8000.0 Hz, 16 bit, mono, 
big-endian, audio data</font></b><p>
<font color="#FF0000"><b>Be careful with the backslashes</b></font><p>
If you 
are using a Windows system, you must either specify the path and file name in 
the GUI text field using forward slashes, or by using double backslashes.&nbsp; If 
the audio file is in the same directory as the compiled version of this program, 
you don't have to specify a path.<p>
<font color="#FF0000"><b>A DataLine.Info object</b></font><p>
In the previous lesson, you learned of the requirement to create a <b>
DataLine.Info</b> object that described the <b>TargetDataLine</b> that was 
needed to handle the acquisition of the audio data from the microphone.<p>
A similar requirement exists in this program.&nbsp; However, in this program, we 
need a <b>DataLine.Info</b> object that describes the <b>SourceDataLine</b> 
object that we will use to feed the audio data to the speakers.&nbsp; The <b>
DataLine.Info</b> object is instantiated in Listing 10.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>      DataLine.Info dataLineInfo =
                          new DataLine.Info(
                            <b>SourceDataLine.class</b>,
                                    audioFormat);

<b><font face="Courier New,Courier">Listing 10</font></b></pre>
</td>
</tr>
</table>

<p>
<font color="#FF0000"><b>The DataLine.Info constructor</b></font><p>
Note that in this case, the first parameter to the <b>DataLine.Info</b> 
constructor is a <b>Class</b> object that represents the type of an object 
instantiated from a class that implements the <b>SourceDataLine</b> interface.<p>
The second parameter to the constructor specifies the format of the audio data 
to be handled by the <b>SourceDataLine</b> object.<p>
<font color="#FF0000"><b>Getting a SourceDataLine object</b></font><p>
Finally, the code in Listing 11 invokes the static <b>getLine</b> method of the
<b>AudioSystem</b> class to get a <b>SourceDataLine</b> object that matches the 
description of the object provided by the <b>DataLine.Info</b> object.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>      sourceDataLine =
             (SourceDataLine)AudioSystem.<b>getLine</b>(
                                   dataLineInfo);

<b><font face="Courier New,Courier">Listing 11</font></b></pre>
</td>
</tr>
</table>

<p>
I discussed the static <b>getLine</b> method of the <b>AudioSystem</b> class in 
detail in the previous lesson, so I won't discuss it further here.<p>
<font color="#FF0000"><b>Spawn and start a thread to handle the playback</b></font><p>
The boldface statement in Listing 12 creates a thread <i>(to play back the data)</i> and starts 
the thread running.&nbsp; The thread will run until the end of the file is 
encountered, or the <b>Stop</b> button is clicked by the user, whichever occurs first.&nbsp; 
<i>(Because of the data buffers involved, there will normally be a delay between the click on the
<b>Stop</b> button and the actual termination of playback.)</i><br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>      <b>new PlayThread().start();</b>
    }catch (Exception e) {
      e.printStackTrace();
      System.exit(0);
    }//end catch
  }//end playAudio

<b><font face="Courier New,Courier">Listing 12</font></b></pre>
</td>
</tr>
</table>

<p>
Once the thread is started, the <b>playAudio</b> method returns control to the action 
event handler on the <b>Play</b> button, which terminates very shortly 
thereafter.<p>
The remaining code in Listing 12 consists simply of a required <b>catch</b> 
block.&nbsp; The <b>playAudio</b> method ends in Listing 12.<p>
<font color="#FF0000"><b>The run method of the PlayThread class</b></font><p>
The <b>PlayThread</b> class is an inner class. An object of this class is used 
to perform the actual playback of the data from the audio file.<br>
<br>
Every thread object has a run method, which determines the behavior of the 
thread. Listing 13 shows the beginning of the <b>run</b> method of the <b>
PlayThread</b> class.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class <b>PlayThread</b> extends Thread{
  byte tempBuffer[] = new byte[10000];

  public void <b>run</b>(){
    try{
      sourceDataLine.<b>open</b>(audioFormat);
      sourceDataLine.<b>start</b>();

<b><font face="Courier New,Courier">Listing 13</font></b></pre>
</td>
</tr>
</table>

<p>
The array object of type <b>byte</b> that is instantiated in Listing 13 will be used to transfer the 
data from the audio file stream to the <b>SourceDataLine</b> object.<p>
<font color="#FF0000"><b>The open method of the SourceDataLine object</b></font><p>
The code in Listing 13 invokes the <b>open</b> method on the <b>SourceDataLine</b> 
object.&nbsp; According to Sun, the <b>open</b> method of a <b>SourceDataLine</b> 
object<blockquote>

<p>
<i>&quot;Opens the line with the specified format, causing the line to acquire any 
required system resources and become operational.&quot;</i></blockquote>

<p>
<font color="#FF0000"><b>The start method of the SourceDataLine object</b></font><p>
The code in Listing 13 also invokes the <b>start</b> method on the <b>
SourceDataLine</b> object.&nbsp; According to Sun, the <b>start</b> method of a
<b>SourceDataLine</b> object<blockquote>

<p>
<i>&quot;Allows a line to engage in data I/O.&nbsp; If invoked on a line that is 
already running, this method does nothing.&quot;</i></blockquote>

<p>
Thus, when the code in Listing 13 has been executed, the <b>SourceDataLine</b> 
object has acquired all necessary system resources and is ready to transfer 
audio data to the system speakers.<p>
<font color="#FF0000"><b>The data-transfer loop</b></font><p>
The conditional clause of the <b>while</b> loop in Listing 14 is a little 
complex.&nbsp; The <b>while</b> loop in Listing 14 loops until:<ul>
  <li>The <b>read</b> method of the <b>AudioInputStream</b> object returns a 
  minus 1, indicating empty stream <i>(end of file),</i> or</li>
  <li>The user clicks the <b>Stop</b> button causing <b>stopPlayback</b> to switch from false to true.</li>
  </ul>
  <table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>      int cnt;

      <b>while</b>((cnt = audioInputStream.<b>read</b>(
           tempBuffer,0,tempBuffer.length)) != -1
                       &amp;&amp; stopPlayback == false){
        if(cnt &gt; 0){
          sourceDataLine.<b>write</b>(
                             tempBuffer, 0, cnt);
        }//end if
      }//<b>end while loop</b>

<b><font face="Courier New,Courier">Listing 14</font></b></pre>
</td>
</tr>
</table>

<p>
<font color="#FF0000"><b>A positive value from the read method</b></font><p>
If the <b>read</b> method returns a positive value, that value indicates the 
number of bytes that were read from the audio file into the temporary buffer 
named <b>tempBuffer</b>.<p>
If the number of bytes that were read is greater than zero, the <b>write</b> 
method of the <b>SourceDataLine</b> object is invoked to transfer those bytes to 
an internal buffer of the <b>SourceDataLine</b> object.<p>
<font color="#FF0000"><b>Convert sampled audio data to sound pressure waves</b></font><p>
The <b>SourceDataLine</b> object causes the sampled audio data values to be converted 
to analog voltages, which are delivered to the speakers where the voltages are 
converted to sound pressure waves.<p>
In order to accomplish this, the <b>SourceDataLine</b> object must know about 
the format of the audio data, including the sample rate, the number of channels, 
the number of bits per sample, etc.&nbsp; That information was provided to the
<b>SourceDataLine</b> object by way of the <b>DataLine.Info</b> object in 
Listing 10.<p>
<font color="#FF0000"><b>Drain the SourceDataLine buffer</b></font><p>
When the <b>while</b> loop terminates for one of the reasons discussed earlier, 
there may still be data in the internal buffer of the <b>SourceDataLine</b> 
object.&nbsp; The code in Listing 15 invokes the <b>drain</b> method on the<b> SourceDataLine</b> 
object to continue the data transfer in real time until this data is exhausted.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>      sourceDataLine.<b>drain</b>();
      sourceDataLine.<b>close</b>();

<b><font face="Courier New,Courier">Listing 15</font></b></pre>
</td>
</tr>
</table>

<p>
Here is part of what Sun has to say about the <b>drain</b> method.<blockquote>

<p>
<i>&quot;Drains queued data from the line by continuing data I/O until the data 
line's internal buffer has been emptied. This method blocks until the draining 
is complete.&quot;</i></blockquote>

<p>
<font color="#FF0000"><b>The close method</b></font><p>
The code in Listing 15 also invokes the <b>close</b> method on the <b>
SourceDataLine</b> object.&nbsp; Here is part of what Sun has to say about the
<b>close</b> method.<blockquote>

<p>
<i>&quot;Closes the line, indicating that any system resources in use by the line can 
be released.&quot;</i></blockquote>

<p>
Thus, when the code in Listing 15 has finished executing, all of the data 
delivered to the <b>SourceDataLine</b> object has been passed along to the 
speakers, and the <b>SourceDataLine</b> object has release system resources.<p>
<font color="#FF0000"><b>Prepare to play back another file</b></font><p>
The three statements in Listing 16 reset some values to prepare the program to 
play back another file.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>      stopBtn.setEnabled(false);
      playBtn.setEnabled(true);
      stopPlayback = false;

<b><font face="Courier New,Courier">Listing 16</font></b></pre>
</td>
</tr>
</table>

<p>
With the exception of a <b>catch</b> block, the code in Listing 16:<ul>
  <li>Signals the end of 
the <b>run</b> method.</li>
  <li>Signals the end of the <b>PlayThread</b> inner class.</li>
  <li>Signals 
the end of the program.</li>
  </ul>

<p>
You can view the <b>catch</b> block in Listing 17 
near the end of the lesson.<center>
<h2>
<a NAME="Run the program"></a>Run the Program</h2></center>
<p>
      At this point, you may find it useful to compile and run the program shown 
      in Listing 17 near the end of the lesson.<p>
      <font color="#FF0000"><b>Specify the audio file</b></font><p>
      Start the program and enter the path and file name of an audio file in the 
      text field that appears on the GUI shown in Figure 1.&nbsp; You should 
      separate the directories in the path using forward slashes instead of 
      backslashes.&nbsp; If you are running under Windows and you want to use 
      backslashes, use two backslashes in each case in place of one backslash.&nbsp; 
      If the audio file is in the same directory as the program <i>(the current 
      directory),</i> you don't need to enter the path.<p>
      <font color="#FF0000"><b>Start the playback</b></font><p>
      Click the <b>Play</b> button after entering the file name.&nbsp; Playback 
      should begin, and should continue to the end of the audio file unless you 
      click the <b>Stop</b> button while the file is being played.<p>
      <font color="#FF0000"><b>The Stop button</b></font><p>
      If you click the <b>Stop</b> button while the file is being played, 
      playback should terminate.&nbsp; However, because some relatively large 
      buffers are used in the playback loop, there may be a noticeable delay 
      between the time that you click the <b>Stop</b> button and the time that 
      the playback actually terminates.<p>
      <font color="#FF0000"><b>Volume control</b></font><p>
      If you don't hear anything during playback, you may need to increase your speaker volume.&nbsp; 
      My laptop computer has a manual volume control in addition to the software volume 
      controls that are accessible via the speaker icon in the system tray.<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In 
this lesson, I have  explained a program that you can use to play back 
audio files, including those that you create using a Java program, as well as 
those that you acquire from other sources.</p>
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
  A complete listing of the program is shown in Listing 17.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>/*File AudioPlayer02.java
Copyright 2003 Richard G. Baldwin

Demonstrates playback of an audio file.  The
path and name of the audio file is specified by
the user in a text field.

A GUI appears on the screen containing
the following components:
  Text field for the file name
  Play
  Stop

After entering an audio file name in the text
field, the user can click the Play button to
cause the program to play the audio file.  By
default, the program will play the entire file
and then get ready to play another file, or to
play the same file again.

If the user clicks the Stop button while the file
is being played, playback will terminate.
However, because the audio data is buffered in a
large buffer in the playback loop, there may be a
noticeable delay between the time that the Stop
button is clicked and the time that the playback
actually terminates.

The text field contains the default audio file
name, junk.au, when the GUI first appears on the
screen.

The program displays the format of the audio
data in the file before playing the file.  The
format is displayed on the command- line screen.

Tested using SDK 1.4.1 under Win2000
************************************************/

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.sound.sampled.*;

public class AudioPlayer02 extends JFrame{

  AudioFormat audioFormat;
  AudioInputStream audioInputStream;
  SourceDataLine sourceDataLine;
  boolean stopPlayback = false;
  final JButton stopBtn = new JButton("Stop");
  final JButton playBtn = new JButton("Play");
  final JTextField textField =
                       new JTextField("junk.au");

  public static void main(String args[]){
    new AudioPlayer02();
  }//end main
  //-------------------------------------------//

  public AudioPlayer02(){//constructor

    stopBtn.setEnabled(false);
    playBtn.setEnabled(true);

    //Instantiate and register action listeners
    // on the Play and Stop buttons.
    playBtn.addActionListener(
      new ActionListener(){
        public void actionPerformed(
                                  ActionEvent e){
          stopBtn.setEnabled(true);
          playBtn.setEnabled(false);
          playAudio();//Play the file
        }//end actionPerformed
      }//end ActionListener
    );//end addActionListener()

    stopBtn.addActionListener(
      new ActionListener(){
        public void actionPerformed(
                                  ActionEvent e){
          //Terminate playback before EOF
          stopPlayback = true;
        }//end actionPerformed
      }//end ActionListener
    );//end addActionListener()

    getContentPane().add(playBtn,"West");
    getContentPane().add(stopBtn,"East");
    getContentPane().add(textField,"North");

    setTitle("Copyright 2003, R.G.Baldwin");
    setDefaultCloseOperation(EXIT_ON_CLOSE);
    setSize(250,70);
    setVisible(true);
  }//end constructor
  //-------------------------------------------//

  //This method plays back audio data from an
  // audio file whose name is specified in the
  // text field.
  private void playAudio() {
    try{
      File soundFile =
                   new File(textField.getText());
      audioInputStream = AudioSystem.
                  getAudioInputStream(soundFile);
      audioFormat = audioInputStream.getFormat();
      System.out.println(audioFormat);

      DataLine.Info dataLineInfo =
                          new DataLine.Info(
                            SourceDataLine.class,
                                    audioFormat);

      sourceDataLine =
             (SourceDataLine)AudioSystem.getLine(
                                   dataLineInfo);

      //Create a thread to play back the data and
      // start it running.  It will run until the
      // end of file, or the Stop button is
      // clicked, whichever occurs first.
      // Because of the data buffers involved,
      // there will normally be a delay between
      // the click on the Stop button and the
      // actual termination of playback.
      new PlayThread().start();
    }catch (Exception e) {
      e.printStackTrace();
      System.exit(0);
    }//end catch
  }//end playAudio


//=============================================//
//Inner class to play back the data from the
// audio file.
class PlayThread extends Thread{
  byte tempBuffer[] = new byte[10000];

  public void run(){
    try{
      sourceDataLine.open(audioFormat);
      sourceDataLine.start();

      int cnt;
      //Keep looping until the input read method
      // returns -1 for empty stream or the
      // user clicks the Stop button causing
      // stopPlayback to switch from false to
      // true.
      while((cnt = audioInputStream.read(
           tempBuffer,0,tempBuffer.length)) != -1
                       && stopPlayback == false){
        if(cnt > 0){
          //Write data to the internal buffer of
          // the data line where it will be
          // delivered to the speaker.
          sourceDataLine.write(
                             tempBuffer, 0, cnt);
        }//end if
      }//end while
      //Block and wait for internal buffer of the
      // data line to empty.
      sourceDataLine.drain();
      sourceDataLine.close();

      //Prepare to playback another file
      stopBtn.setEnabled(false);
      playBtn.setEnabled(true);
      stopPlayback = false;
    }catch (Exception e) {
      e.printStackTrace();
      System.exit(0);
    }//end catch
  }//end run
}//end inner class PlayThread
//===================================//

}//end outer class AudioPlayer02.java

<b><font face="Courier New,Courier">Listing 17</font></b></pre>
</td>
</tr>
</table>

   <hr size=3 width="100%" align=center>
<p>Copyright 2003, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited. <h4>
<a NAME="About the author"></a>About the author</h4>
<i><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a> is a college professor (at Austin Community College in Austin, TX) and private consultant whose primary focus is a combination of Java, C#, and XML. In addition to the many platform and/or language independent benefits of Java and C# applications, he believes that a combination of Java, C#, and XML will become the primary driving force in the delivery of structured information on the Web.</i><br><p><i>Richard has participated in numerous consulting projects and he
frequently provides onsite training at the high-tech companies located
in and around Austin, Texas.&nbsp; He is the author of Baldwin's Programming <a href="http://www.DickBaldwin.com">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring programmers.
He has also published articles in JavaPro magazine.</i> <p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i> <p><i><a href="mailto:Baldwin@DickBaldwin.com">Baldwin@DickBaldwin.com</a></i> <p>-end- </body></html>