<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The Swing Package, A Preview of Pluggable Look and Feel<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 111, Revised 03/25/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#pluggable look and feel panel -- sample program">Pluggable Look
and Feel Panel -- Sample Program</a></li>

<ul><li><a href="#pluggable look and feel panel  -- interesting code fragments">Pluggable
Look and Feel Panel -- Interesting Code Fragments</a></li>

<li><a href="#pluggable look and feel panel -- program listing">Pluggable Look
and Feel Panel -- Program Listing</a></li></ul>

<li><a href="#test program">Test Program</a></li>

<ul><li><a href="#test program -- interesting code fragments">Test Program -- Interesting
Code Fragments</a></li>

<li><a href="#test program -- program listing">Test Program -- Program Listing</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Beginning with the Summer 1998 session, students in Prof. Baldwin's <b><u>Intermediate
Java Programming</u></b> classes at ACC are responsible for knowing and
understanding all of the material in this lesson.

<p>This lesson was originally written in March of 1998 using the software
and documentation in the JDK 1.1.3, JFC 1.1, and Swing 1.0.1 download packages.
Swing 1.0.1 was contained in JFC 1.1.

<p>The 1.0.1 version of Swing is designed to be compatible with JDK 1.1.&nbsp;
A new version of Swing is scheduled to be incorporated in JDK 1.2.&nbsp;
Hopefully there won't be too many changes and the material in this lesson
will continue to be relevant.
<br>&nbsp;
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
Several previous lessons have provided information regarding the handling
of events in JDK 1.1.&nbsp; A previous lesson provided an overview of the
Java Abstract Windows Toolkit (AWT).&nbsp; The AWT is used in Java to create
Graphical User Interfaces (GUI).

<p>This lesson provides a preview of an alternative to the AWT for creating
GUIs - <b>Swing</b>.

<p><b>Swing</b> provides a set of lightweight components that can be used
in place of the components in the AWT, sometimes to advantage.&nbsp; (See
other lessons for a discussion of the difference between lightweight and
heavyweight components.)&nbsp; In addition, <b>Swing</b> provides a number
of components that are not contained in the AWT (progress bars, tool tips,
trees, combo boxes, etc.).

<p>At one level, the <b>Swing</b> components can be viewed simply as a
replacement for the AWT components.&nbsp; At another level, however, the
<b>Swing</b> components are much more sophisticated than the AWT components
for a variety of reasons.&nbsp; For example, additional event structures
are available with the <b>Swing</b> components and it is possible to change
the "look and feel" of the GUI at runtime.

<p>Perhaps even more important, the <b>Swing</b> components are designed
using a Model-View-Control (MVC) concept which makes them significantly
more powerful.&nbsp; A lesson on MVC is provided later.&nbsp; In brief,
MVC is a concept where data is provided by one or more <i>controls</i>,
maintained by a <i>model</i>, and displayed by one or more <i>views</i>.&nbsp;
MVC is an OOD design pattern that is strongly recommended for the design
of robust systems.&nbsp; With MVC, either the <i>control</i> or the <i>view</i>
can be modified without the attendant requirement to modify the <i>model</i>.

<p>One important manifestation of MVC in the <b>Swing</b> components is
that you can make them look like anything you please.&nbsp; This is referred
to as <b><i>Pluggable Look and Feel (PLAF)</i></b>.&nbsp; <b>Swing</b>
1.0.1 comes with three different PLAF implementations right out of the
box:
<ul><li>
Motif</li>

<li>
Windows 95/NT</li>

<li>
Metal (JavaSoft)</li></ul>
Apparently a Mac look and feel will also be available soon.&nbsp; In addition,
you can create your own look and feel (L&amp;F) if you so choose, but the
programming effort may not be trivial.

<p>Therefore, if you create a GUI using exclusively Swing components, you
can provide your customer with the ability to switch between L&amp;F implementations
at runtime.&nbsp; A sample program will be provided later in this lesson
that demonstrates this capability.

<p>When you download Swing 1.0.1, a demonstration program named SwingSet
comes with the download that illustrates most of the available Swing components.&nbsp;
This program also allows you to switch the L&amp;F at runtime.

<p>If you run that program, you will see another important difference between
Swing and the AWT.&nbsp; In particular, most of the Swing components are
containers.&nbsp; This means that they can contain other components and
can also contain images.&nbsp; Therefore, creation of GUI components containing
images (such as button bars with icons) is not too difficult with Swing.

<p>If we were to start from scratch, we could write an entire book on Swing.&nbsp;
However, much of the information in that book would duplicate material
already provided in discussions of the AWT.&nbsp; Therefore, the plan at
this time is to provide a series of lessons that <u>highlight the differences</u>
between Swing and the AWT, under the assumption that you already understand
the AWT.

<p>Sometimes when you change the L&amp;F of a GUI, you can be surprised
by the result.&nbsp; Therefore, it is important to have the ability to
test your GUI for different L&amp;F implementations.&nbsp; For that reason,
we will begin our investigation into Swing by providing a program that
makes it easy to perform such testing.
<br>&nbsp;
<center><h2><a name="pluggable look and feel panel -- sample program"></a><font color="#ff0000">Pluggable
Look and Feel Panel -- Sample Program</font></h2></center>
The purpose of this class is to construct an object that can easily be
associated with a GUI to test that GUI for all of the L&amp;F implementations
installed with the current JDK.

<p>To associate this object with a GUI under test, simply pass a reference
to the <b>JFrame</b> containing the GUI as a parameter when this object
is constructed. Typically, you will instantiate an object of this class
and add it to a JFrame object that is separate from the GUI under test.
The only link between the two will be that the object of this class has
a reference to the GUI under test so that it can change the L&amp;F of
that GUI.

<p>This class creates a <b>JPanel</b>. The JPanel contains one <b>JButton</b>
for each L&amp;F implementation in the currently installed JDK. Clicking
each JButton will cause the L&amp;F of the GUI under test to change to
the L&amp;F represented by that JButton.&nbsp; (The L&amp;F of the object
of this class also changes as well.)

<p>The name of the L&amp;F is displayed on the JButton.

<p>This class will be used with a variety of programs in this tutorial
in order to test them against the currently installed look and feel implementations.

<p>The key statements in selecting and then implementing the new L&amp;F
are:
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><tt>&nbsp; UIManager.<b>setLookAndFeel</b>(plafClassName);&nbsp;</tt>&nbsp;
<br><tt>&nbsp;</tt>&nbsp;
<br><tt>&nbsp; SwingUtilities.<b>updateComponentTreeUI</b>(thisPlafPanel);</tt>&nbsp;
<br><tt>&nbsp; SwingUtilities.<b>updateComponentTreeUI</b>(testGui);</tt></td></tr></table>
These statements will be discussed further as we discuss the programs in
this lesson.
<br>&nbsp;
<br>This class was tested using JDK 1.1.3 and Swing 1.0.1 under Win95.
<br>&nbsp;
<center><h3><a name="pluggable look and feel panel  -- interesting code fragments"></a><font color="#ff0000">Pluggable
Look and Feel Panel&nbsp; -- Interesting Code Fragments</font></h3></center>
The first interesting code fragment shows the import statements for this
program.&nbsp; This is provided simply to remind you that you will need
to deal with the <b>swing</b> package when working with Pluggable Look
and Feel (and other aspects of Swing as well).
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>import java.awt.event.*;
<b>import com.sun.java.swing.*;
</b>import java.util.*;</pre></td></tr></table>
&nbsp;
<br>The next fragment is the declaration of an unusual reference variable
type that is used to refer to an array of L&amp;F information.&nbsp; As
of Swing 1.0.1, the document that should explain this type is missing from
the download documentation file.

<p>The best available information seems to be the following statement that
was extracted from the description of the method named <b>getInstalledLookAndFeels()</b>
that returns an array object of this type (a minor typo was corrected by
the author in this quotation):
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>"Return an array of objects that provide some information about the
LookAndFeel implementations that have been installed with this java development
kit.&nbsp; The <b>LookAndFeelInfo</b> objects can be used by an application
to construct a menu of look and feel options for the user or to set the
look and feel at start up time."&nbsp;
<br>&nbsp;</td></tr></table>
The reference variable declaration follows.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>public class PlafPanel01 extends JPanel {

&nbsp; <b>UIManager.LookAndFeelInfo[]</b> plafInfoArray;</pre></td></tr></table>
&nbsp;
<br>In order for the event handlers in an object of this class to have
the ability to control the L&amp;F of a test GUI, the object must have
a reference to that test GUI.&nbsp; Such a reference is passed in as a
parameter to the constructor.

<p>Also, in order for the event handler to control the L&amp;F of an object
of this class, it must have a reference to the object.&nbsp; The next fragment
shows two variables that are used to save these two required references.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; JFrame testGui;//save a reference to the test GUI here
&nbsp; PlafPanel01 thisPlafPanel = this;//ref to this object</pre></td></tr></table>
&nbsp;
<br>The next fragment shows the beginning of the constructor for an object
of this type.&nbsp; The first two statements in the object
<ul><li>
save the incoming reference to the GUI object under test</li>

<li>
create a Label that contains a title for the PL&amp;F control panel.</li></ul>
&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;
&nbsp; public PlafPanel01(JFrame testGui) {//constructor
&nbsp;&nbsp;&nbsp; this.testGui = testGui;//save ref to test GUI
&nbsp;&nbsp;&nbsp; this.add(new JLabel(//label the PlafPanel
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "PL&amp;F Selection Panel, Copyright 1998, RGBaldwin"));</pre></td></tr></table>
&nbsp;
<br>That gets us through the preliminaries and into the meat of the subject.&nbsp;
The next fragment gets an array containing a list of all of the L&amp;F
implementations contained in the current JDK installation.&nbsp; The method
used in this fragment was discussed earlier.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; plafInfoArray = UIManager.<b>getInstalledLookAndFeels</b>();</pre></td></tr></table>
&nbsp;
<br>Once we have the list of L&amp;F implementations, we need to create
a JButton object that will be used to invoke each of those implementations.&nbsp;
Since we don't know how many such implementations may be installed in the
currently installed JDK, we will use a <b>Vector</b> object to contain
references to those JButton objects.&nbsp; We instantiate the JButton objects
in a <b>for</b> loop which makes one iteration for each element in the
array of L&amp;F implementations.

<p>The declaration of the <b>Vector</b> and the beginning of the <b>for</b>
loop with a statement to populate the <b>Vector</b> are shown in the next
code fragment.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Vector theButtons = new <b>Vector</b>(plafInfoArray.length);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; <b>for(int</b> cnt = 0; cnt &lt; plafInfoArray.length; cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theButtons.addElement(new JButton());</pre></td></tr></table>
&nbsp;
<br>We are going to need the name of the L&amp;F class associated with
each of the elements in the L&amp;F array for a couple of reasons, so the
next code fragment extracts the name and saves it in a reference variable
named <b>theClassName</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>//Still in the for loop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; String theClassName = plafInfoArray[cnt].getClassName();</pre></td></tr></table>
&nbsp;
<br>One of the uses for the name of the L&amp;F class is to create labels
for each of the JButton objects used to invoke the new L&amp;F.&nbsp; The
entire class name string is quite long.&nbsp; We will extract a short name
for each specific L&amp;F implementation and use it to label the JButton&nbsp;
corresponding to that L&amp;F. The short name that we will use appears
following the last period in the String representation of the class name
for the L&amp;F implementation, so we will use some simple string manipulation
to extract the name..

<p>Note the requirement to downcast the reference extracted from the Vector.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>//Still in the for loop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String label = theClassName.substring(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theClassName.lastIndexOf(".")+1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JButton)theButtons.elementAt(cnt)).<b>setText</b>(label);</pre></td></tr></table>
&nbsp;
<br>Following this, we instantiate and register an Action Listener object
on each of the JButton objects.&nbsp; When the button is clicked, the code
in the actionPerformed() method of the listener object causes the L&amp;F
to be changed to the specific L&amp;F represented by the button.

<p>Note that because the references to the buttons are stored as type <b>Object</b>
in a <b>Vector</b>, it is necessary to downcast them before they can be
used. The name of the L&amp;F class is also needed by the Action Event
handler, so we pass it as a parameter to the constructor for the listener
object.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JButton)theButtons.elementAt(cnt)).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addActionListener(new MyActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theClassName));</pre></td></tr></table>
&nbsp;
<br>Finally, while still in the for loop, we add each JButton to the JPanel.&nbsp;
That ends the <b>for</b> loop and ends the constructor.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>//Still in the for loop&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Add each JButton to the JPanel.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add((JButton)theButtons.elementAt(cnt));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end constructor</pre></td></tr></table>
&nbsp;
<br>The next code fragment shows the beginning of an inner class used to
instantiate the Action Listener objects.&nbsp; Note that although this
is an inner class, it is not an anonymous inner class.

<p>The following code fragment shows the constructor for the listener object
which saves the name of the L&amp;F class associated with the button on
which the listener is registered.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; class MyActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp; String plafClassName;//save name of plaf class here

&nbsp;&nbsp;&nbsp; MyActionListener(String plafClassName){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.plafClassName = plafClassName;
&nbsp;&nbsp;&nbsp; }//end constructor</pre></td></tr></table>
&nbsp;
<br>The <b>actionPerformed()</b> method is the heart of all Action Listener
objects.&nbsp; The next code fragment shows the beginning of this method&nbsp;
which invokes the static <b>setLookAndFeel()</b> method of the <b>UIManager</b>
class to set the current default L&amp;F.&nbsp; This method throws several
different types of exceptions so it in enclosed in a try/catch block.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; public void <b>actionPerformed</b>(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the current default L&amp;F to that passed in as
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a parameter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIManager.<b>setLookAndFeel</b>(plafClassName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception ex){System.out.println(ex);}</pre></td></tr></table>
&nbsp;
<br>Simply setting the current default L&amp;F doesn't cause it to become
effective.&nbsp; Rather, it is necessary to take specific action to cause
the new L&amp;F to take effect.

<p>The following code fragment accomplishes this by invoking the static
<b>updateComponentTreeUI()</b> method on two different references:
<ul><li>
the reference to the test GUI and</li>

<li>
the reference to the L&amp;F control panel.</li></ul>
The description of this method, as extracted from the Swing documentation
is as follows:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>"A simple minded look and feel change: ask each&nbsp; node in the tree
to updateUI(), i.e. to&nbsp; initialize its UI property with the current
look and feel.</td></tr></table>
The following code will cause both the test GUI and the panel containing
the L&amp;F buttons to reflect the new L&amp;F selected by clicking on
one of the buttons.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the L&amp;F for this PlafPanel01 object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SwingUtilities.<b>updateComponentTreeUI</b>(thisPlafPanel);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the L&amp;F for the test GUI object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SwingUtilities.<b>updateComponentTreeUI</b>(testGui);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class MyActionListener
}//end class PlafPanel01</pre></td></tr></table>
&nbsp;
<br>That is the end of the definition of the <b>actionPerformed</b>() method,
the end of the Action Listener class, and the end of the <b>PlafPanel01</b>
class.

<p>A complete listing of this program is contained in the next section.

<p>The program discussed in the sections sections following the program
listing put this class to work by using it to invoke different L&amp;F
implementations on a simple GUI consisting of a JButton and a JTextField.
<br>&nbsp;
<center><h3><a name="pluggable look and feel panel -- program listing"></a><font color="#ff0000">Pluggable
Look and Feel Panel -- Program Listing</font></h3></center>
This section contains a complete listing of the class used to display different
L&amp;F implementations.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File PlafPanel01 Copyright 1998, R.G.Baldwin
&nbsp; The purpose of this class is to construct an object that
&nbsp; can easily be associated with a GUI to test the GUI
&nbsp; for all of the Look and Feel implementations installed&nbsp;
&nbsp; with the current JDK.
&nbsp;&nbsp;
&nbsp; To associate this object with a GUI under test, pass
&nbsp; a reference to the JFrame containing the GUI as a
&nbsp; parameter when this object is constructed. Typically,
&nbsp; you will instantiate an object of this class and add
&nbsp; it to a JFrame object that is separate from the GUI
&nbsp; under test.
&nbsp;&nbsp;
&nbsp; This class creates a JPanel.&nbsp; The JPanel contains one&nbsp;
&nbsp; JButton for each L&amp;F implementation in the currently&nbsp;
&nbsp; installed JDK.&nbsp; Clicking each JButton will cause the L&amp;F
&nbsp; of the GUI to change to the L&amp;F represented by that&nbsp;
&nbsp; JButton.

&nbsp; The name of the L&amp;F is displayed on the JButton.
&nbsp;&nbsp;
&nbsp; This class will be used with a variety of programs in
&nbsp; this tutorial in order to test them against the currently
&nbsp; installed look and feel implementations.
&nbsp;&nbsp;
&nbsp; The key statements in selecting and then implementing
&nbsp; the new L&amp;F are:
&nbsp;&nbsp;
&nbsp; UIManager.setLookAndFeel(plafClassName);&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; SwingUtilities.updateComponentTreeUI(thisPlafPanel);
&nbsp; SwingUtilities.updateComponentTreeUI(testGui);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; These statements are discussed further in the comments
&nbsp; in the program.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; This class was tested using JDK 1.1.3 and Swing 1.0.1&nbsp;
&nbsp; under Win95.
**********************************************************/

import java.awt.event.*;
import com.sun.java.swing.*;
import java.util.*;

public class PlafPanel01 extends JPanel {
&nbsp; /*
&nbsp; The following is an unusual reference variable type that
&nbsp; is used to refer to an array of L&amp;F information.&nbsp; As of
&nbsp; Swing 1.0.1, the document that should explain this type
&nbsp; is missing from the download documentation file.
&nbsp;&nbsp;
&nbsp; The best available information seems to be the following
&nbsp; statement that was extracted from the description of the
&nbsp; method named getInstalledLookAndFeels() that returns an&nbsp;
&nbsp; array object of this type (a minor typo was corrected
&nbsp; by the author in this quotation):

&nbsp; "Return an array of objects that provide some&nbsp;
&nbsp; information about the LookAndFeel implementations
&nbsp; that have been installed with this java development kit.
&nbsp; The LookAndFeelInfo objects can be used by an&nbsp;
&nbsp; application to construct a menu of look and feel options
&nbsp; for the user or to set the look and feel at start up
&nbsp; time."
&nbsp; */
&nbsp; UIManager.LookAndFeelInfo[] plafInfoArray;
&nbsp; //-----------------------------------------------------//
&nbsp; JFrame testGui;//save a reference to the test GUI here
&nbsp; PlafPanel01 thisPlafPanel = this;//ref to this object
&nbsp;&nbsp;
&nbsp; public PlafPanel01(JFrame testGui) {//constructor
&nbsp;&nbsp;&nbsp; this.testGui = testGui;//save ref to test GUI
&nbsp;&nbsp;&nbsp; this.add(new JLabel(//label the PlafPanel
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "PL&amp;F Selection Panel, Copyright 1998, RGBaldwin"));
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Get the list of L&amp;Fs installed with the current JDK
&nbsp;&nbsp;&nbsp; //See note above regarding this method.
&nbsp;&nbsp;&nbsp; plafInfoArray = UIManager.getInstalledLookAndFeels();
&nbsp;
&nbsp;&nbsp;&nbsp; //Create a vector of references to JButton objects&nbsp;
&nbsp;&nbsp;&nbsp; // with one element in the vector for each L&amp;F
&nbsp;&nbsp;&nbsp; // implementation in the current JDK.&nbsp;
&nbsp;&nbsp;&nbsp; Vector theButtons = new Vector(plafInfoArray.length);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create one JButton object for each L&amp;F implementation
&nbsp;&nbsp;&nbsp; // and put its reference in the Vector.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; plafInfoArray.length; cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theButtons.addElement(new JButton());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get the name of the class for each specific L&amp;F
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // implementation
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String theClassName =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plafInfoArray[cnt].getClassName();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Extract a short name for each specific L&amp;F&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // implementation and use it to label the JButton&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // corresponding to that L&amp;F. The short name appears
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // following the last period in the String
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // representation of the class name for the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // L&amp;F implementation. Note the requirement to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // downcast the reference extracted from the Vector.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String label = theClassName.substring(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theClassName.lastIndexOf(".")+1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JButton)theButtons.elementAt(cnt)).setText(label);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Add an action listener to each JButton that will
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // cause the L&amp;F to change to the one represented by
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // that JButton whenever the JButton is clicked. Note
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // that because the references to the buttons are
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // stored in a Vector, it is necessary to downcast
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // them from Object to JButton.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JButton)theButtons.elementAt(cnt)).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; addActionListener(new MyActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theClassName));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Add each JButton to the JPanel.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add((JButton)theButtons.elementAt(cnt));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end constructor
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //Inner class for action listeners
&nbsp; class MyActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp; String plafClassName;//save name of plaf class here

&nbsp;&nbsp;&nbsp; //Constructor
&nbsp;&nbsp;&nbsp; MyActionListener(String plafClassName){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //save the incoming parameter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.plafClassName = plafClassName;
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the current default L&amp;F to that passed in as
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a parameter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIManager.setLookAndFeel(plafClassName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception ex){System.out.println(ex);}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now implement the current default L&amp;F to make it
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // take effect. The description of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // updateComponentTreeUI() method as extracted from
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the documentation is as follows:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //"A simple minded look and feel change: ask each&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // node in the tree to updateUI(), i.e. to&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // initialize its UI property with the current look
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and feel."
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the L&amp;F for this PlafPanel01 object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SwingUtilities.updateComponentTreeUI(thisPlafPanel);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the L&amp;F for the test GUI object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SwingUtilities.updateComponentTreeUI(testGui);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class MyActionListener
}//end class PlafPanel01
//=======================================================//</pre></td></tr></table>
.
<center><h2><a name="test program"></a><font color="#ff0000">Test Program</font></h2></center>
The primary purpose of this program is to demonstrate pluggable look and
feel (PL&amp;F) and the ability to change the L&amp;F at runtime.

<p>It also illustrates a couple of requirements of using Swing components
that differ from using AWT components.

<p>The program creates a GUI consisting of a <b>PlafPanel01</b> object
in a <b>JFrame</b> which is used to control the L&amp;F of the program.
The PlafPanel01 object is instantiated from the custom class named <b>PlafPanel01</b>
and contains one <b>JButton</b> for each L&amp;F implementation in the
currently installed JDK.

<p>The name of the L&amp;F is displayed on each JButton on the PlafPanel.

<p>The PlafPanel01 is added to the content pane of a JFrame.&nbsp; Clicking
each JButton on the PlafPanel01 will cause the L&amp;F of the test GUI
and the L&amp;F of the PlafPanel01 to change to the L&amp;F represented
by that JButton.

<p>The program also creates another GUI in a JFrame which is intended to
simulate a GUI under test.&nbsp; This GUI contains an inactive JButton
and an inactive JTextField.&nbsp; These components are provided so that
you can see how they behave when the L&amp;F is changed.
<br>&nbsp;
<br>This program was tested using JDK 1.1.3 and Swing 1.0.1 under Windows
95

<p>If you compile and run this program, you should see two JFrame objects
on your screen.&nbsp; The one at the upper left is the GUI under test and
contains an inactive JButton object and an inactive JTextField object.&nbsp;
They were placed there so that you can see how they look and behave when
you change among the available L&amp;F implementations on your system.

<p>The JFrame object below that one should contain one JButton object for
each of the L&amp;F implementations in your currently installed JDK.&nbsp;
(If your system contains a large number of L&amp;F implementations, some
of the buttons may not be visible and you may need to stretch the JFrame
manually.) Each of these buttons should be labeled with the name of the
L&amp;F to which it applies.&nbsp; Clicking on these buttons should cause
the L&amp;F of both JFrame objects to change to the specific L&amp;F identified
by the button.
<br>&nbsp;
<center><h3><a name="test program -- interesting code fragments"></a><font color="#ff0000">Test
Program -- Interesting Code Fragments</font></h3></center>
This program begins by subclassing JFrame to create a window for the test
GUI.&nbsp; The constructor for this object establishes the title, sets
the layout to FlowLayout, adds an inactive JButton object, and adds an
inactive JTextField object.

<p>About the only thing that is new in the following code is the requirement
to use the <b>getContentPane()</b> method for adding components to the
JFrame object.&nbsp; This is one of the major changes between an AWT Frame
object and a Swing JFrame object.&nbsp; A JFrame object is composed of
different layers or panes which will be discussed in a subsequent lesson
and you must add new components to the content pane..
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>public class Swing04 extends JFrame {//controlling class

&nbsp; Swing04(String title) {//constructor
&nbsp;&nbsp;&nbsp; // Set the title of the JFrame
&nbsp;&nbsp;&nbsp; super(title);

&nbsp;&nbsp;&nbsp; //Now create the test GUI for this application.
&nbsp;&nbsp;&nbsp; getContentPane().setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add some components to be viewed with the new L&amp;F
&nbsp;&nbsp;&nbsp; getContentPane().add(new JButton("Dummy JButton"));
&nbsp;&nbsp;&nbsp; getContentPane().add(new JTextField("Dummy JTextField"));

&nbsp; }//end constructor</pre></td></tr></table>
As is always the case, this application requires a <b>main()</b> method.&nbsp;
In this case, the main() method instantiates an object of its own type
to serve as a test GUI.&nbsp; It also instantiates another object of the
JFrame type containing a PlafPanel01 to serve as the control for changing
the L&amp;F.

<p>The main method also uses an anonymous inner class to create a Window
Listener object for terminating the program when the user presses the <i>close</i>
button on the JFrame.

<p>The following code fragment shows the instantiation of the test GUI
object and the instantiation of the Window Listener object.&nbsp; There
is really nothing new in this code fragment relative to AWT code that we
have seen before.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public static void <b>main</b>(String args[]) {
&nbsp;&nbsp;&nbsp; JFrame jFrame = new Swing04(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Pluggable L&amp;F, Copyright 1998, RG Baldwin");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; // Set the size of the JFrame and show it
&nbsp;&nbsp;&nbsp; jFrame.setSize(400,100);
&nbsp;&nbsp;&nbsp; jFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; // Create a WindowAdapter to terminate the program
&nbsp;&nbsp;&nbsp; // when the window is closed.
&nbsp;&nbsp;&nbsp; jFrame.addWindowListener(new WindowAdapter() {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp; });//end WindowListener</pre></td></tr></table>
Finally, the following code fragment instantiates a JFrame object and adds
a PlafPanel01 object to it.&nbsp; Again, the <b>getContentPane()</b> method
is used when adding a component to the JFrame object.

<p>It is important to note that a reference to the test GUI object (jFrame)
is passed to the constructor of the PlafPanel01 object when it is instantiated.&nbsp;
It is this reference that makes it possible for the event handlers in the
object to control the L&amp;F of the test GUI object.

<p>Other than the required use of <b>getContentPane()</b>, there is nothing
in this code fragment that we haven't seen many times in our work with
the AWT.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>//Still in main()
&nbsp;&nbsp;&nbsp; JFrame myPlafPanel = new JFrame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "PL&amp;F Panel,Copyright 1998,RG Baldwin");
&nbsp;&nbsp;&nbsp; myPlafPanel.getContentPane().add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PlafPanel01(jFrame));
&nbsp;&nbsp;&nbsp; myPlafPanel.setBounds(0,400,400,150);
&nbsp;&nbsp;&nbsp; myPlafPanel.setVisible(true);

&nbsp; }//end main()&nbsp;&nbsp;&nbsp;
}//end class Swing04</pre></td></tr></table>
.
<center><h3><a name="test program -- program listing"></a><font color="#ff0000">Test
Program -- Program Listing</font></h3></center>
A complete listing of the test program follows.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Swing04 Copyright 1998, R.G.Baldwin
The primary purpose of this program is to demonstrate
pluggable look and feel (PL&amp;F) and the ability to change
the L&amp;F at runtime.

It also illustrates a couple of requirements of using
Swing components that differ from using AWT components.

The program creates a GUI in a JFrame containing a&nbsp;
PlafPanel.&nbsp; The PlafPanel01 is instantiated from a custom&nbsp;
class named PlafPanel01 and contains one JButton for each&nbsp;
L&amp;F implementation in the currently installed JDK.&nbsp;&nbsp;

The name of the L&amp;F is displayed on each JButton on the
PlafPanel01.

The PlafPanel01 is added to the content pane of the JFrame.
Clicking each JButton on the PlafPanel01 will cause the L&amp;F
of the GUI to change to the L&amp;F represented by that&nbsp;
JButton.

The program also creates another GUI in a JFrame which is
intended to simulate a GUI under test.&nbsp; This GUI contains
an inactive JButton and an inactive JTextField.&nbsp; These
components are provided so that you can see how then behave
when the L&amp;F is changed.

It is instructive to see how shapes and colors for these
inactive components change as each different L&amp;F is&nbsp;
implemented.
&nbsp;
Tested using JDK 1.1.3 and Swing 1.0.1 under Windows 95

*********************************************************/

import java.awt.*;
import java.awt.event.*;
import com.sun.java.swing.*;
import java.util.*;

// Subclass JFrame to display a window
public class Swing04 extends JFrame {//controlling class

&nbsp; Swing04(String title) {//constructor
&nbsp;&nbsp;&nbsp; // Set the title of the JFrame
&nbsp;&nbsp;&nbsp; super(title);

&nbsp;&nbsp;&nbsp; //Now create the test GUI for this application.
&nbsp;&nbsp;&nbsp; getContentPane().setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add some components to be viewed with the new L&amp;F
&nbsp;&nbsp;&nbsp; getContentPane().add(new JButton("Dummy JButton"));
&nbsp;&nbsp;&nbsp; getContentPane().add(new JTextField("Dummy JTextField"));

&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; // Create main method to execute the application
&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp; JFrame jFrame = new Swing04(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Pluggable L&amp;F, Copyright 1998, RG Baldwin");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; // Set the size of the JFrame and show it
&nbsp;&nbsp;&nbsp; jFrame.setSize(400,100);
&nbsp;&nbsp;&nbsp; jFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; // Create a WindowAdapter to terminate the program
&nbsp;&nbsp;&nbsp; // when the window is closed.
&nbsp;&nbsp;&nbsp; jFrame.addWindowListener(new WindowAdapter() {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp; });//end WindowListener

&nbsp;&nbsp;&nbsp; //Create a PlafPanel in a floating JFrame that can be
&nbsp;&nbsp;&nbsp; // used to test this GUI.
&nbsp;&nbsp;&nbsp; JFrame myPlafPanel = new JFrame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "PL&amp;F Panel,Copyright 1998,RG Baldwin");
&nbsp;&nbsp;&nbsp; myPlafPanel.getContentPane().add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PlafPanel01(jFrame));
&nbsp;&nbsp;&nbsp; myPlafPanel.setBounds(0,400,400,150);
&nbsp;&nbsp;&nbsp; myPlafPanel.setVisible(true);

&nbsp; }//end main()&nbsp;&nbsp;&nbsp;
}//end class Swing04
//=======================================================//</pre></td></tr></table>
.
<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
As of this writing, no review material is available for this lesson.

<p>-end-<!--end--></body></html>