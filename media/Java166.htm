<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, Graphics- Working with Shapes<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 166, Revised 02/16/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
A previous lesson provided an overview of the <b>Graphics</b> class, and
grouped the methods of that class into several different categories. This
lesson will explore some of the methods in the category of <b>Drawing and
Filling Shapes</b>.

<p>To review, the following methods were put into this category in the
previous lesson.
<table border bgcolor="#80ffff" ><tr><td><b>drawLine</b>(int, int, int, int) - Draws a line, using the current
color, between two points in this graphics context's coordinate system.&nbsp;

<p><b>drawPolyline</b>(int[], int[], int) - Draws a sequence of connected
lines defined by arrays of <i>x</i> and <i>y</i> coordinates. The figure
will not be closed if the first point differs from the last point.&nbsp;

<p><b>drawRect</b>(int, int, int, int) - Draws the outline of the specified
rectangle using the current color of the graphics context..&nbsp;

<p><b>fillRect</b>(int, int, int, int) - Fills the specified rectangle
with the context's current color. Be sure to check the documentation regarding
the coordinates of the right edge and bottom edge of the rectangle before
using. This comment applies to all the fill methods.&nbsp;

<p><b>drawRoundRect</b>(int, int, int, int, int, int) - Draws an outlined
round-cornered rectangle using this graphics context's current color. You
might need to look at a book containing a diagram to learn how to specify
how the corners are rounded.&nbsp;

<p><b>fillRoundRect</b>(int, int, int, int, int, int) - Fills the specified
rounded corner rectangle with the current color.&nbsp;

<p><b>draw3DRect</b>(int, int, int, int, boolean) - Draws a 3-D highlighted
outline of the specified rectangle. The edges of the rectangle are highlighted
so that they appear to be beveled and lit from the upper left corner. The
boolean parameter determines whether the rectangle appears to be raised
above the surface or sunk into the surface. It is raised when the parameter
is true.&nbsp;

<p><b>fill3DRect</b>(int, int, int, int, boolean) - Paints a 3-D highlighted
rectangle filled with the current color.&nbsp;

<p><b>drawOval</b>(int, int, int, int) - Draws the outline of an oval in
the current color. When the last two parameters are equal, this method
draws a circle.&nbsp;

<p><b>fillOval</b>(int, int, int, int) - Fills an oval bounded by the specified
rectangle with the current color. As with drawOval(), when the last two
parameters are equal, the method fills a circle.&nbsp;

<p><b>drawArc</b>(int, int, int, int, int, int) - Draws the outline of
a circular or elliptical arc covering the specified rectangle. You will
probably need to examine the documentation to figure out how to specify
the parameters for this method as well as the fillArc() method.&nbsp;

<p><b>fillArc</b>(int, int, int, int, int, int) - Fills a circular or elliptical
arc covering the specified rectangle.&nbsp;

<p><b>drawPolygon</b>(Polygon) - Draws the outline of a polygon defined
by the specified <b>Polygon</b> object. Another overloaded version is available
that accepts a list of coordinate values to specify the polygon. The following
description of a <b>Polygon</b> object was taken from the JavaSoft documentation
for JDK 1.1.3.&nbsp;

<p><b>fillPolygon</b>(Polygon) - Fills the polygon defined by the specified
Polygon object with the graphics context's current color. Another overloaded
version is available that accepts a list of coordinate values to specify
the polygon.</td></tr></table>
The material in this lesson is not very difficult in comparison with material
in previous lessons. Only a very few of these methods (such as <b>drawArc()</b>)
involve any complexity at all, and once you see an explanation of how to
construct the parameter list, even those methods turn out to be easy to
use.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
The following program contains sample drawings of all the shapes in the
above list. A few of the shapes are drawn more than once to illustrate
different aspects of the associated method (ovals and circles for example).

<p>If you compile and run the program, and then review the source code
while viewing the screen output (and consult the JDK documentation describing
the various methods of the <b>Graphics</b> class along the way), you should
be able to understand everything that you need to know about drawing shapes.

<p>I do want to comment on the methods <b>draw3DRect()</b> and <b>fill3DRect()</b>.
These two methods are supposed to produce rectangles that appear to be
raised from the screen or depressed into the screen. This effect is achieved
by highlighting two edges while darkening the other two edges to give the
illusion of light and shadow. (Also the entire rectangle is darkened for
the depressed version of <b>fill3DRect()</b>.) However, it doesn't work
very well using JDK 1.1.3 under Win95. It was necessary for me to select
my drawing and background colors very carefully to create any illusion
of 3D at all. Simply drawing or filling them in red on a white background
did not produce images that had a 3D effect.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Graphics07.java
Copyright 1997, R.G.Baldwin

This program illustrates the drawing of all the shapes
available in JDK 1.1.3.

You will probably need to compile and run this program
to gain a good feel for how each shape is controlled by
its argument list.

This program was tested using JDK 1.1.3 under Win95.

**********************************************************/
import java.awt.*;
import java.awt.event.*;

class Graphics07 extends Frame{ //controlling class
&nbsp; //Override the paint method
&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; g.setColor(Color.red);//set the drawing color to red
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Translate the 0,0 coordinate of the graphics context
&nbsp;&nbsp;&nbsp; // to the upper left-hand corner of the client area of
&nbsp;&nbsp;&nbsp; // the Frame object.
&nbsp;&nbsp;&nbsp; g.translate(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.getInsets().left,this.getInsets().top);
&nbsp;&nbsp;&nbsp; //Draw a simple line
&nbsp;&nbsp;&nbsp; g.drawLine(0,0,50,50);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create two arrays of coordinate data and draw a
&nbsp;&nbsp;&nbsp; // polyline using that data
&nbsp;&nbsp;&nbsp; int xData[] = {100,110,120,130,140,150};&nbsp;
&nbsp;&nbsp;&nbsp; int yData[] = {0,25,37,43,47,50};
&nbsp;&nbsp;&nbsp; g.drawPolyline(xData,yData,6);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Draw a rectangle
&nbsp;&nbsp;&nbsp; g.drawRect(200,0,50,25);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Draw a filled rectangle
&nbsp;&nbsp;&nbsp; g.fillRect(300,0,25,50);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Draw a rounded rectangle
&nbsp;&nbsp;&nbsp; g.drawRoundRect(400,0,50,50,45,35);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Fill a rounded rectangle
&nbsp;&nbsp;&nbsp; g.fillRoundRect(500,0,50,50,35,45);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Draw a 3D rectangle, raised, doesn't look very 3D,&nbsp;
&nbsp;&nbsp;&nbsp; // but a slight hint of 3D can be seen if drawn in
&nbsp;&nbsp;&nbsp; // gray on on a white background.
&nbsp;&nbsp;&nbsp; g.setColor(Color.gray);//draw the 3D stuff in gray
&nbsp;&nbsp;&nbsp; g.draw3DRect(100,100,50,25,true);
&nbsp;&nbsp;&nbsp; //Draw a 3D rectangle, depressed
&nbsp;&nbsp;&nbsp; g.draw3DRect(200,100,50,25,false);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Fill a 3D rectangle, raised.&nbsp; Can be made to look
&nbsp;&nbsp;&nbsp; // pretty decent if drawn in gray on a gray background.
&nbsp;&nbsp;&nbsp; // Otherwise, doesn't look very 3D.
&nbsp;&nbsp;&nbsp; g.fillRect(275,75,75,100);//draw a gray background
&nbsp;&nbsp;&nbsp; g.fill3DRect(300,100,25,50,true);
&nbsp;&nbsp;&nbsp; //Fill a 3D rectangle, depressed, doesn't look very 3D
&nbsp;&nbsp;&nbsp; g.fillRect(375,75,75,100);//draw a gray background
&nbsp;&nbsp;&nbsp; g.fill3DRect(400,100,25,50,false);
&nbsp;&nbsp;&nbsp; g.setColor(Color.red);//restore red color
&nbsp;&nbsp;&nbsp; //Overall, the appearance of the 3DRect is not very
&nbsp;&nbsp;&nbsp; // good because it is necessary to select special
&nbsp;&nbsp;&nbsp; // colors and backgrounds to get the illusion of 3D.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Draw an oval, long axis on horizontal axis
&nbsp;&nbsp;&nbsp; g.drawOval(0,200,50,25);
&nbsp;&nbsp;&nbsp; //Fill an oval, long axos on vertical axis
&nbsp;&nbsp;&nbsp; g.fillOval(100,200,25,50);
&nbsp;&nbsp;&nbsp; //Fill an oval, which is a circle
&nbsp;&nbsp;&nbsp; g.fillOval(200,200,50,50);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Draw a 225-degree arc inside a bounding rectangle
&nbsp;&nbsp;&nbsp; g.drawRect(300,200,25,50);
&nbsp;&nbsp;&nbsp; g.drawArc(300,200,25,50,0,225);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Fill a 225-degree arc inside a bounding rectangle
&nbsp;&nbsp;&nbsp; g.drawRect(400,200,25,50);
&nbsp;&nbsp;&nbsp; g.fillArc(400,200,25,50,0,225);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Draw a polygon using array data as parameters
&nbsp;&nbsp;&nbsp; int xxData[] = {0,10,20,30,40,50};&nbsp;
&nbsp;&nbsp;&nbsp; int yyData[] = {300,325,337,343,347,350};
&nbsp;&nbsp;&nbsp; g.drawPolygon(xxData,yyData,6);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Fill a polygon using array data as parameters
&nbsp;&nbsp;&nbsp; int xxxData[] = {100,110,120,130,140,150};&nbsp;
&nbsp;&nbsp;&nbsp; int yyyData[] = {300,325,337,343,347,350};
&nbsp;&nbsp;&nbsp; g.fillPolygon(xxxData,yyyData,6);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end paint()

&nbsp; public Graphics07(){//constructor
&nbsp;&nbsp;&nbsp; this.setTitle(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Shape Samples,Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setSize(600,400);
&nbsp;&nbsp;&nbsp; this.setVisible(true);

&nbsp;&nbsp;&nbsp; //Anonymous inner-class listener to terminate program
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Graphics07();//instantiate this object
&nbsp; }//end main
}//end Graphics07 class
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>