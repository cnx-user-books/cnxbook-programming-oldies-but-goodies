<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, Arranging Components in Containers, BorderLayout<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 114, Revised 02/21/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#borderlayout">BorderLayout</a></li>

<li><a href="#plain vanilla sample program">Plain Vanilla Sample Program</a></li>

<ul><li><a href="#discussion of first program">Discussion of First Program</a></li>

<li><a href="#interesting code fragments in first program">Interesting Code
Fragments in First Program</a></li>

<li><a href="#program listing of first program">Program Listing of First Program</a></li></ul>

<li><a href="#second sample program">Second Sample Program</a></li>

<ul><li><a href="#discussion">Discussion</a></li>

<li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Intermediate Java Programming</u></b>
classes at ACC are responsible for knowing and understanding all of the
material in this lesson.

<p>JDK 1.1 was formally released on February 18, 1997. This lesson was
originally written on March 6, 1997 using the software and documentation
in the JDK 1.1 download package.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This is one in a series of lessons that concentrate on the package <b>java.awt
</b>where most of the functionality exists for providing the user interface
to your application or applet.
<center><h2><a name="borderlayout"></a><font color="#ff0000">BorderLayout</font></h2></center>
In a previous lesson, we learned how to create a <b>Frame</b> object and
place <b>Button</b> and <b>Label</b> components in the frame using <i>absolute
coordinates</i>. We also learned that there can be some cross-platform
compatibility problems with such an approach.

<p>This lesson looks at the first of several different approaches designed
to place components in a container while minimizing cross-platform compatibility
problems. This is accomplished using <i>layout manager classes</i>. In
this lesson, we will concentrate on the <b>BorderLayout</b> class.

<p>With the <b>BorderLayout</b> class, you can place <u>up to five</u>
different components in a container. If you place all five components in
the container, four of the components will be positioned along the edges
of the container and the fifth will be in the center.

<p>You specify the position of each component when you <b>add</b> the component
to the container using the strings <font color="#000000">"<b>North</b>",
"<b>South</b>", "<b>East</b>", "<b>West</b>" and "<b>Center</b>".</font>

<p><font color="#000000">For example, the following three statements would</font><ul><li><font color="#000000">create a new <b>Panel</b> container,</font></li>

<li><font color="#000000">specify that components are to be placed in the container
using a <b>BorderLayout</b> manager, and</font></li>

<li><font color="#000000">place a single <b>Button</b> object at the bottom
("<b>South</b>") position in the container.</font></li></ul><font color="#000000">.</font><br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><b><tt><font color="#000000">//create a Panel container object</font></tt></b>&nbsp;
<br><b><tt><font color="#000000">Panel p = new Panel();</font></tt></b>&nbsp;

<p><b><tt><font color="#000000">//specify use of the BorderLayout manager</font></tt></b>&nbsp;
<br><b><tt><font color="#000000">p.setLayout(new BorderLayout());&nbsp;</font></tt></b>&nbsp;
<pre><b><tt><font color="#000000">//add a button at the bottom
p.add(new Button("Okay"), "South");</font></tt></b></pre></td></tr></table><font color="#000000"><b>BorderLayout </b>interprets the <u>absence</u>
of a string location specification the same as "<b>Center</b>".</font>

<p><font color="#000000">The "<b>North</b>", "<b>South</b>", "<b>East</b>"
and "<b>West</b>" components get sized and positioned according to their
<i>preferred sizes</i> and the constraints of the container's size. The
"<b>Center</b>" component gets any <u>space left over</u>.</font>

<p><font color="#000000">Regarding the <i>preferred size</i> mentioned
above, according to <u>Exploring Java</u> by Niemeyer &amp; Peck:</font><br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><font color="#000000">"Every component has two important pieces of
information used by the layout manager in placing and sizing it: <u>a preferred
size</u> and a <u>minimum size</u>. ... For example, a plain <b>Button</b>
object can be resized to any proportions. However, the button's designer
can provide a preferred size for a good-looking button. The layout manager
might use this size when there are no other constraints, or it might ignore
it, depending on its scheme. Now, if we give the button a label, the button
may need a minimum size in order to display itself properly. The layout
manager might show more respect for the button's minimum size and guarantee
that it has at least that much space."</font></td></tr></table><font color="#000000">According to <u>Java AWT Reference</u> by John Zukowski:</font><br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><font color="#000000">"The <b>getPreferredSize()</b> method returns
the <b>Dimension</b> (width and height) for the preferred size of the components
within the container. The container determines its preferred size by calling
the <b>preferredLayoutSize()</b> method of the current <b>LayoutManager</b>,
which says how much space the layout manager needs to arrange the components.
If you override this method, you are overriding the default preferred size."</font></td></tr></table><font color="#000000">For example, the following code fragment is taken
from a subsequent lesson on Java Beans. A Java Bean is a reusable component
having certain specific characteristics. In this case, the <b>getPreferredSize()</b>
method of the class that defines the Java Bean has been overridden to establish
the preferred size for the Java Bean object to be a square, fifty pixels
on each side.</font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; //This method defines the preferred display size of the&nbsp;
&nbsp; // bean object.&nbsp;&nbsp;
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()</pre></td></tr></table><font color="#000000">Our first example program will illustrate how the
<b>BorderLayout</b> manager adjusts the size of a button to accommodate
the minimum size needed to display a long label on the button.</font>

<p><font color="#000000">The most straightforward way to specify a layout
manager is to invoke the <b>setLayout()</b> method on the <b>Container</b>
object passing an object of a class that <i>implements</i> the <b>LayoutManager
</b>interface as a parameter.</font>

<p><font color="#000000"><b>BorderLayout</b> is a class that extends <b>Object</b>
and implements <b>LayoutManager2</b>. (If you are curious about the minimal
difference between <b>LayoutManager</b> and <b>LayoutManager2</b>, it would
be a good exercise to look it up in the JDK 1.1 documentation.)</font>

<p><font color="#000000">The documentation defines the <b>setLayout()</b>
method as follows:</font><br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><tt><font color="#000000">public void setLayout(LayoutManager mgr)</font></tt>&nbsp;
<ul><pre><tt><font color="#000000">Parameters: mgr - the specified layout manager&nbsp;</font></tt></pre></ul></td></tr></table><font color="#000000"><b>BorderLayout</b> has the following constructors:</font><br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><tt><font color="#000000">BorderLayout() -- Constructs a new BorderLayout
with no gaps between components.&nbsp;</font></tt>&nbsp;

<p><tt><font color="#000000">BorderLayout(int, int) -- Constructs a BorderLayout
with the specified gaps.&nbsp;</font></tt></td></tr></table><font color="#000000">In addition, the <b>BorderLayout</b> class has numerous
methods as shown in the following list. We will look at a couple of these
methods in the example programs in this lesson. The term <i>Deprecated</i>
in the following list indicates an old method from JDK 1.0 that has been
replaced by another method in JDK 1.1 and should no longer be used. Apparently
the interpretation of <i>Deprecated</i> is that the method is still being
supported, but won't be supported in some future release of the JDK.</font><ul><li><b><font color="#000000">addLayoutComponent(Component, Object)</font></b><font color="#000000">
-- Adds the specified component to the layout, using the specified constraint
object.</font></li>

<li><b><font color="#000000">addLayoutComponent(String, Component)</font></b><font color="#000000">
-- Replaced by addLayoutComponent(Component, Object). <i>Deprecated</i>.</font></li>

<li><b><font color="#000000">getHgap()</font></b><font color="#000000"> --
Returns the horizontal gap between components.</font></li>

<li><b><font color="#000000">getLayoutAlignmentX(Container) </font></b><font color="#000000">--
Returns the alignment along the x axis.</font></li>

<li><b><font color="#000000">getLayoutAlignmentY(Container)</font></b><font color="#000000">
-- Returns the alignment along the y axis.</font></li>

<li><b><font color="#000000">getVgap() </font></b><font color="#000000">--
Returns the vertical gap between components.</font></li>

<li><b><font color="#000000">invalidateLayout(Container)</font></b><font color="#000000">
-- Invalidates the layout, indicating that if the layout manager has cached
information it should be discarded.</font></li>

<li><b><font color="#000000">layoutContainer(Container)</font></b><font color="#000000">
-- Lays out the specified container.</font></li>

<li><b><font color="#000000">maximumLayoutSize(Container)</font></b><font color="#000000">
-- Returns the maximum dimensions for this layout given the components
in the specified target container.</font></li>

<li><b><font color="#000000">minimumLayoutSize(Container)</font></b><font color="#000000">
-- Returns the minimum dimensions needed to layout the components contained
in the specified target container.</font></li>

<li><b><font color="#000000">preferredLayoutSize(Container)</font></b><font color="#000000">
-- Returns the preferred dimensions for this layout given the components
in the specified target container.</font></li>

<li><b><font color="#000000">removeLayoutComponent(Component)</font></b><font color="#000000">
-- Removes the specified component from the layout.</font></li>

<li><b><font color="#000000">setHgap(int) </font></b><font color="#000000">--
Sets the horizontal gap between components.</font></li>

<li><b><font color="#000000">setVgap(int)</font></b><font color="#000000">
-- Sets the vertical gap between components.</font></li>

<li><b><font color="#000000">toString() </font></b><font color="#000000">--
Returns the String representation of this BorderLayout's values.</font></li></ul><font color="#000000">We will take a look at two different example programs
in this lesson. The first one will be designed for extreme simplicity while
the second one will provide additional functionality.</font><center><h2><a name="plain vanilla sample program"></a><font color="#ff0000">Plain
Vanilla Sample Program</font></h2></center><font color="#000000">This program was designed to be extremely simple.
It contains only the code necessary to create a "Plain Vanilla" visual
object by placing five <u>non-functional</u> Button objects on a Frame
object using the <u>default</u> <b>BorderLayout</b> manager. (The buttons
are non-functional because there are no event listener objects registered
for them.)</font>

<p><font color="#000000">One of the buttons is given a <u>long label</u>
to force the layout manager to allocate space according to the minimum
size requirement of that particular button.</font><center><h3><a name="discussion of first program"></a><font color="#ff0000">Discussion
of First Program</font></h3></center><font color="#000000">If you compile and execute this program, you will
see that you can resize the <b>Frame</b> object, and that <u>within limits</u>,
the components will automatically be resized to accommodate the overall
size of the frame.</font>

<p><font color="#000000">You will also note that not all of the possible
problems are eliminated. It is still possible to make the frame sufficiently
small that</font><ul><li><font color="#000000">first the labels begin to be truncated,</font></li>

<li><font color="#000000">then the center button disappears completely, and</font></li>

<li><font color="#000000">finally the buttons on the side can be made to disappear.</font></li></ul><font color="#000000">However, this visual component is much better able
to accommodate resizing than was the case in an earlier lesson that contained
components placed and sized on an <u>absolute</u> coordinate basis.</font>

<p><font color="#000000">Another thing to notice is the way in which the
larger <u>minimum size requirement</u> of the button on the "East" (caused
by a longer label) is accommodated automatically with the extra space needed
being taken from the button in the "Center".</font><center><h3><a name="interesting code fragments in first program"></a><font color="#ff0000">Interesting
Code Fragments in First Program</font></h3></center><font color="#000000">The following code fragment was extracted from the
constructor of the the GUI object.</font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("South"),"South");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("West"),"West");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("North"),"North");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "East with a long label"),"East");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("Center"),"Center");
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);</pre></td></tr></table><font color="#000000">These statements create a new <b>Frame</b> object
and add five <i>anonymous </i><b>Button</b> objects to the frame specifying
the location of each object using the strings: "South", "West", etc.</font>

<p><font color="#000000">Then the size of the frame is established, and
frame and its components are made visible.</font>

<p><font color="#000000">The label on the button in the "East" position
was made longer than the others to cause the minimum size of that button
to be larger than the minimum size of each of the other buttons.</font><center><h3><a name="program listing of first program"></a><font color="#ff0000">Program
Listing of First Program</font></h3></center><font color="#000000">A complete listing of the program follows.</font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Layout02.java Copyright 1997, R.G.Baldwin
Revised 10/27/97 to better fit within the space.
This program is designed to be compiled and run under&nbsp;
JDK 1.1

This program creates a "Plain Vanilla" visual object by&nbsp;
placing five non-functional Button objects on a Frame&nbsp;
object using the default BorderLayout manager.

One of the buttons is given a long label in order to force
the layout manager to allocate space according to the&nbsp;
minimum size requirement of that particular button.

The program was tested using JDK 1.1 running under Win95.
*/
//=======================================================//

import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class Layout02 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Layout02
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("South"),"South");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("West"),"West");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("North"),"North");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "East with a long label"),"East");
&nbsp;&nbsp;&nbsp; myFrame.add(new Button("Center"),"Center");
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//</pre></td></tr></table><font color="#000000">The next sample program is slightly more realistic
in that it includes functional buttons and makes use of some of the methods
and parameters of the <b>BorderLayout</b> Class</font><center><h2><a name="second sample program"></a><font color="#ff0000">Second Sample
Program</font></h2></center>
This program has more substance that the previous one in this lesson, although
it still doesn't do anything particularly useful. It is designed simply
to illustrate additional aspects of the use of the <b>BorderLayout</b>
class as a layout manager.
<center><h3><a name="discussion"></a><font color="#ff0000">Discussion</font></h3></center>
Five buttons are added to a frame using a <b>BorderLayout </b>object as
the layout manager with a <u>three-pixel gap</u> between components in
both the horizontal and vertical direction.

<p>An <u>action listener object</u> is instantiated and registered to listen
for action events on all five of the buttons, with all five buttons <u>sharing</u>
the same action event handler.

<p>The behavior of the action event handler is to <u>increase the spacing</u>
between components by five pixels whenever any of the buttons is pressed.
This is accomplished by
<ul><li>
increasing the <b>Vgap </b>and <b>Hgap </b>attributes of the <b>BorderLayout</b>
object,</li>

<li>
setting the layout manager of the frame to the modified <b>BorderLayout</b>
object, and</li>

<li>
validating the frame.</li></ul>
The validation step is required in order for the change to take effect
and become visible.

<p>If you click the buttons repeatedly, three of the buttons will <u>shrink
entirely out of sight</u>. They can be made to <u>reappear</u> by physically
enlarging the frame.

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
The three statements in the following code fragment
<ul><li>
instantiate a <b>Frame </b>object,</li>

<li>
instantiate a <b>BorderLayout</b> object with a gap of three pixels between
components in both the horizontal and vertical directions, and</li>

<li>
establish this <b>BorderLayout</b> object as the layout manager for the
<b>Frame </b>object.</li></ul>
.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");

&nbsp;&nbsp;&nbsp; BorderLayout myBorderLayout = new BorderLayout(3,3);

&nbsp;&nbsp;&nbsp; myFrame.setLayout(myBorderLayout);</pre></td></tr></table>
The following statement is typical of those used to instantiate five Button
objects.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Button button1 = new Button("South");</pre></td></tr></table>
The following statement is typical of those used to add all five Button
objects to the Frame object.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp; myFrame.add(button1,"South");</pre></td></tr></table>
The following statements are typical of those used to instantiate an action
listener object and register it to listen for action events on <u>all five</u>
buttons.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; MyActionListener myActionListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(myBorderLayout,myFrame);
&nbsp;&nbsp;&nbsp; button1.addActionListener(myActionListener);</pre></td></tr></table>
The following code in the <b>actionPerformed()</b> event handler uses the
<b>BorderLayout</b> methods <b>getHgap(), setHgap(), getVgap(), and setVgap()</b>
to modify the vertical and horizontal gap attributes of the <b>BorderLayout</b>
object.

<p>Then the modified <b>BorderLayout()</b> object is used in conjunction
with <b>setLayout()</b> to cause the <u>modified</u> <b>BorderLayout</b>
object to become the layout manager for the <b>Frame</b> object. (Note
that the layout manager for the <b>Frame</b> object is being modified at
runtime.)

<p>Then the <b>validate()</b> method is used to force the <b>Frame</b>
object to readjust the size and locations of its components and to display
the modified version of itself.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBorderLayoutObject.setHgap(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myBorderLayoutObject.getHgap() + 5 );
&nbsp;&nbsp;&nbsp; myBorderLayoutObject.setVgap(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myBorderLayoutObject.getVgap() + 5 );
&nbsp;&nbsp;&nbsp; myFrameObject.setLayout(myBorderLayoutObject);
&nbsp;&nbsp;&nbsp; myFrameObject.validate();
&nbsp; }//end actionPerformed()</pre></td></tr></table>

<pre>.</pre>

<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
A complete listing of the program with additional comments follows.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Layout03.java Copyright 1997, R.G.Baldwin
Revised 10/26/97 to cause the source code to better fit in
the allocated space in the lesson.

This program is designed to be compiled and run under&nbsp;
JDK 1.1

This program has more substance that the previous one in&nbsp;
this lesson, although it doesn't do anything particularly&nbsp;
useful.

Five buttons are added to a frame using a BorderLayout&nbsp;
object as the layout manager with a three-pixel gap between
components in both the horizontal and vertical direction.

An action listener object is instantiated and registered to
listen for action events on all five of the buttons, with&nbsp;
all five buttons sharing the same event handler.

The behavior of the action event handler is to increase the
spacing between components whenever any of the buttons is&nbsp;
pressed.&nbsp; This is accomplished by increasing the Vgap and&nbsp;
Hgap attributes of the BorderLayout object, setting the&nbsp;
layout manager of the frame to the modified BorderLayout&nbsp;
object, and validating the frame.&nbsp; The validation step is&nbsp;
required in order for the change to become visible.

If you continue to click the buttons long enough, three of&nbsp;
the buttons will shrink entirely out of sight.&nbsp; They can be
made to reappear by manually enlarging the frame.

A windowClosing() event listener object is instantiated and
registered on the frame to terminate the program when the&nbsp;
frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
*/
//=======================================================//

import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class Layout03 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Layout03
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; //Instantiate a BorderLayout object with default Center
&nbsp;&nbsp;&nbsp; // alignment and a Vgap and Hgap of 3 pixels.
&nbsp;&nbsp;&nbsp; BorderLayout myBorderLayout = new BorderLayout(3,3);
&nbsp;&nbsp;&nbsp; //Set the layout manager for the frame to be the&nbsp;
&nbsp;&nbsp;&nbsp; // BorderLayout object.
&nbsp;&nbsp;&nbsp; myFrame.setLayout(myBorderLayout);

&nbsp;&nbsp;&nbsp; //Instantiate five Button objects&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button button1 = new Button("South");
&nbsp;&nbsp;&nbsp; Button button2 = new Button("West");
&nbsp;&nbsp;&nbsp; Button button3 = new Button("North");
&nbsp;&nbsp;&nbsp; Button button4 = new Button("East");
&nbsp;&nbsp;&nbsp; Button button5 = new Button("Center");

&nbsp;&nbsp;&nbsp; //Add the five Button objects to the Frame object in&nbsp;
&nbsp;&nbsp;&nbsp; // the positions specified.
&nbsp;&nbsp;&nbsp; myFrame.add(button1,"South");
&nbsp;&nbsp;&nbsp; myFrame.add(button2,"West");
&nbsp;&nbsp;&nbsp; myFrame.add(button3,"North");
&nbsp;&nbsp;&nbsp; myFrame.add(button4,"East");
&nbsp;&nbsp;&nbsp; myFrame.add(button5,"Center");

&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //Instantiate an action listener object and register&nbsp;
&nbsp;&nbsp;&nbsp; // it on all five buttons.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyActionListener myActionListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(myBorderLayout,myFrame);
&nbsp;&nbsp;&nbsp; button1.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; button2.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; button3.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; button4.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; button5.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

class MyActionListener implements ActionListener{
&nbsp; BorderLayout myBorderLayoutObject;
&nbsp; Frame myFrameObject;
&nbsp;&nbsp;
&nbsp; //constructor
&nbsp; MyActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BorderLayout layoutObject,Frame inFrame){
&nbsp;&nbsp;&nbsp; myBorderLayoutObject = layoutObject;//save references
&nbsp;&nbsp;&nbsp; myFrameObject = inFrame;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; //When an action event occurs, increase the horizontal&nbsp;
&nbsp; // and vertical gap between components in the&nbsp;
&nbsp; // BorderLayout object.&nbsp; Then set the layout manager for&nbsp;
&nbsp; // the frame to be the newly-modified BorderLayout&nbsp;
&nbsp; // object.&nbsp; Then validate the frame to ensure a valid
&nbsp; // layout so that the new visual will take effect.
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBorderLayoutObject.setHgap(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myBorderLayoutObject.getHgap() + 5 );
&nbsp;&nbsp;&nbsp; myBorderLayoutObject.setVgap(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myBorderLayoutObject.getVgap() + 5 );
&nbsp;&nbsp;&nbsp; myFrameObject.setLayout(myBorderLayoutObject);
&nbsp;&nbsp;&nbsp; myFrameObject.validate();
&nbsp; }//end actionPerformed()
}//end class MyActionListener

//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);&nbsp;
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>

<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Without viewing the solution that follows, rewrite the program named
Layout03 with the following changes:

<p>As in the program named Layout03, five buttons are added to a Frame
object using a BorderLayout object as the layout manager with a one-pixel
gap between components in both the horizontal and vertical direction. There
are no captions on any of the buttons.

<p>When the program starts, the buttons in the East and West positions
are each approximately 100 pixels wide and the button in the Center is
approximately 50 pixels wide.

<p>Each time you click on any of the buttons, the horizontal gap between
buttons increases by five pixels. However, the widths of the East and West
buttons don't change appreciably. In other words, the increase in horizontal
gap is accommodated almost entirely as a result of the Center button becoming
narrower.

<p>If you continue to click the buttons long enough, the Center button
will shrink entirely out of sight but the other four buttons will continue
to be visible with no apparent change in size. The Center button can be
made to reappear by manually enlarging the Frame.

<p>If you manually increase the width of the Frame, the widths of the East
and West buttons don't change appreciably. Rather, the Center button increases
in width to accommodate the change in the width of the Frame object.

<p>If you start the program running and then manually decrease the width
of the Frame object, the Center button decreases in width to accommodate
the reduction in overall width. Eventually the Center button will shrink
completely out of sight and then the East and West buttons will collide
and begin to change width.

<p><font color="#0000ff"><font size=-1>A - See the solution below.</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg135.java Copyright 1997, R.G.Baldwin

Without viewing the solution that follows, rewrite the
program named Layout03 with the following changes:
&nbsp;&nbsp;
As in the program named Layout03, five buttons are added to
a Frame object using a BorderLayout object as the layout&nbsp;
manager with a one-pixel gap between components in both the
horizontal and vertical direction.&nbsp;&nbsp;
&nbsp;&nbsp;
There are no captions on any of the buttons.

When the program starts, the buttons in the East and West
positions are each approximately 100 pixels wide and the
button in the Center is approximately 50 pixels wide.

Each time you click on any of the buttons, the horizontal
gap between buttons increases by five pixels.&nbsp; However,&nbsp;
the widths of the East and West buttons don't change&nbsp;
appreciably.&nbsp; In other words, the increase in horizontal
gap is accommodated almost entirely as a result of the
Center button becoming narrower.

If you continue to click the buttons long enough, the
Center button will shrink entirely out of sight but the
other four buttons will continue to be visible with no
apparent change in size.&nbsp; The Center button can be made to
reappear by manually enlarging the Frame.

If you manually increase the width of the Frame, the
widths of the East and West buttons don't change&nbsp;
appreciably.&nbsp; Rather, the Center button increases in width
to accommodate the change in the width of the Frame&nbsp;
object.

If you start the program running and then manually&nbsp;
decrease the width of the Frame object, the Center button
decreases in width to accommodate the reduction in&nbsp;
overall width.&nbsp; Eventually the Center button will shrink
completely out of sight and then the East and West buttons
will collide and begin to change width.
&nbsp;&nbsp;
A windowClosing() event listener object is instantiated and
registered on the frame to terminate the program when the&nbsp;
frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
*/
//=======================================================//

import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class SampProg135 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg135
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; //Instantiate a BorderLayout object with a Vgap&nbsp;
&nbsp;&nbsp;&nbsp; // and Hgap of 1 pixel.
&nbsp;&nbsp;&nbsp; BorderLayout myBorderLayout = new BorderLayout(1,1);
&nbsp;&nbsp;&nbsp; //Set the layout manager for the frame to be the&nbsp;
&nbsp;&nbsp;&nbsp; // BorderLayout object.
&nbsp;&nbsp;&nbsp; myFrame.setLayout(myBorderLayout);

&nbsp;&nbsp;&nbsp; //Instantiate five button-like objects.&nbsp; Note that two
&nbsp;&nbsp;&nbsp; // of these objects are of type MyButton instead of
&nbsp;&nbsp;&nbsp; // type Button.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button button1 = new Button();
&nbsp;&nbsp;&nbsp; MyButton button2 = new MyButton();
&nbsp;&nbsp;&nbsp; Button button3 = new Button();
&nbsp;&nbsp;&nbsp; MyButton button4 = new MyButton();
&nbsp;&nbsp;&nbsp; Button button5 = new Button();

&nbsp;&nbsp;&nbsp; //Add the five button-like objects to the Frame object
&nbsp;&nbsp;&nbsp; // in the positions specified.
&nbsp;&nbsp;&nbsp; myFrame.add(button1,"South");
&nbsp;&nbsp;&nbsp; myFrame.add(button2,"West");
&nbsp;&nbsp;&nbsp; myFrame.add(button3,"North");
&nbsp;&nbsp;&nbsp; myFrame.add(button4,"East");
&nbsp;&nbsp;&nbsp; myFrame.add(button5,"Center");

&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);//set size of frame
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //Instantiate an action listener object and register&nbsp;
&nbsp;&nbsp;&nbsp; // it on all five buttons.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyActionListener myActionListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(myBorderLayout,myFrame);
&nbsp;&nbsp;&nbsp; button1.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; button2.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; button3.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; button4.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; button5.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

class MyActionListener implements ActionListener{
&nbsp; BorderLayout myBorderLayoutObject;
&nbsp; Frame myFrameObject;
&nbsp;&nbsp;
&nbsp; //constructor
&nbsp; MyActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BorderLayout layoutObject,Frame inFrame){
&nbsp;&nbsp;&nbsp; myBorderLayoutObject = layoutObject;//save references
&nbsp;&nbsp;&nbsp; myFrameObject = inFrame;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; //When an action event occurs, increase the horizontal&nbsp;
&nbsp; // gap between components in the BorderLayout object.&nbsp;&nbsp;
&nbsp; // Then set the layout manager for the frame to be the&nbsp;
&nbsp; // newly-modified BorderLayout object.&nbsp; Then validate&nbsp;
&nbsp; // the frame to ensure a valid layout so that the new&nbsp;
&nbsp; // visual will take effect.
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBorderLayoutObject.setHgap(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myBorderLayoutObject.getHgap() + 5 );
&nbsp;&nbsp;&nbsp; myFrameObject.setLayout(myBorderLayoutObject);
&nbsp;&nbsp;&nbsp; myFrameObject.validate();
&nbsp; }//end actionPerformed()
}//end class MyActionListener

//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);&nbsp;
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//

//This class extends the standard Button class in order
// to make it possible to override the getPreferredSize()
// method.&nbsp; The BorderLayout manager honors the width of
// the preferred size insofar as possible to maintain the
// specified preferred width.&nbsp;&nbsp;
class MyButton extends Button{
&nbsp;&nbsp;
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp;&nbsp; return new Dimension(100,100);
&nbsp; }//end getPreferredSize()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
}//end class MyButton</font></pre></td></tr></table>
-end-<!--end--></body></html>