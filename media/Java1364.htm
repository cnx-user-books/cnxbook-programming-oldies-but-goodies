<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 8, The Comparable Interface, Part 2</h2>
<i><font color="#000000">Baldwin shows you why the elements stored in a
TreeSet collection need to be references to objects instantiated from a
class that implements the Comparable interface, and briefly discusses an
alternative approach using the Comparator interface.&nbsp; He shows you
how to implement </font>the Comparable interface for a new class definition.&nbsp;
He explains the "natural ordering of the elements" for a class and discusses
the "consistent with equals" requirement.&nbsp; Finally, he shows you how
to define a new class whose objects are eligible for inclusion in a TreeSet
collection.</i>
<p><b>Published:</b>&nbsp; July 23, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1364
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Programs</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is the eighth lesson in a miniseries on Java data structures and the
Java<i> Collections Framework.</i>&nbsp; The first lesson in the miniseries
was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1362.htm">Data Structures in Java: Part 7, The
Comparable Interface, Part 1</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p>This is also the second and final lesson in a sub-series on the <b>Comparable</b>
interface.&nbsp; The purpose of the lessons in the sub-series is to teach
you about the interactions between the <b>Comparable</b> interface and
the Collections Framework<i>,</i> particularly with respect to the
<b>Set</b>,
<b>SortedSet</b>,
and <b>SortedMap</b> interfaces of the Collections Framework.&nbsp; This
lesson discusses <b>Set</b> and <b>SortedSet</b>.&nbsp; A discussion of
<b>SortedMap</b>
will be deferred for inclusion in a subsequent lesson.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">In this lesson, I will teach you why the elements
stored in a <b>TreeSet</b> collection need to be references to objects
instantiated from a class that implements the <b>Comparable</b> interface.&nbsp;
(<i>In a subsequent lesson, I will teach you about an alternative approach
that makes use of the Comparator interface.)</i></font>
<p>I will provide an example of implementing the <b>Comparable</b> interface
for a new class definition, and will teach you about the <i>natural ordering
of the elements</i> for a class.
<p>I will teach you the meaning of the <i>consistent with equals</i> requirement
and show you how to satisfy that requirement for a new class definition.
<p>Finally, I will show you how to define a new class whose objects are
eligible for inclusion in a <b>TreeSet</b> collection.
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Programs</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Let's begin with a little quiz to test your prior knowledge of the Collections
Framework.
<p>What output is produced by the program shown in Listing 1?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; 44321</li>

<li>
D.&nbsp; 4321</li>

<li>
E.&nbsp; 1234</li>

<li>
F.&nbsp; 12344</li>

<li>
G.&nbsp; None of the above.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparable04.java

import java.util.*;

public class Comparable04{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparable04

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ref = new TreeSet();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next());
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();

&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(3));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(2));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(1));
&nbsp; }//end fillIt()
}//end class Populator

class MyClass{
&nbsp; int data;
&nbsp;&nbsp;
&nbsp; MyClass(){
&nbsp;&nbsp;&nbsp; data = 0;
&nbsp; }//end noarg constructor
&nbsp;&nbsp;
&nbsp; MyClass(int data){
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end parameterized constructor
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return "" + data;
&nbsp; }//end overridden toString()

}//end MyClass

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p>If your answer was <b>B.&nbsp; Runtime Error</b>, you were correct.
<p><b><font color="#FF0000">What caused the runtime error?</font></b>
<p>The runtime error was caused by the code shown in Listing 2.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new <b>MyClass</b>(4));

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Why did this code produce a runtime error?</font></b>
<p>This code produced a runtime error for the reasons described in the
following paragraphs.
<p>The incoming parameter of the <b>fillIt</b> method is a reference to
an object of type <b>TreeSet</b>.&nbsp; The <b>TreeSet</b> class implements
the <b>Collection</b>, <b>Set</b>, and <b>SortedSet</b> interfaces.&nbsp;
In this lesson, we will be primarily interested in the <b>Set</b> and <b>SortedSet</b>
interfaces.
<p>The contract for the <b>add</b> method of the <b>Set</b> interface reads
partially as follows:
<blockquote><i>"Adds the specified element to this set if it is not already
present ... If this set already contains the specified element, the call
leaves this set unchanged and returns false. ... this ensures that sets
never contain duplicate elements."</i></blockquote>
<b><font color="#FF0000">What does this mean?</font></b>
<p>This means that whenever the <b>add</b> method is invoked on a <b>Set</b>
object, the <b>add</b> method must have a way of determining if the element
being added is a duplicate of an element that already exists in the collection.&nbsp;
This means that it must be possible for the <b>add</b> method to <i>compare</i>
the new element with all of the existing elements to determine if the new
element is a duplicate of any of the existing elements.
<p><b><font color="#FF0000">The compareTo method</font></b>
<p>The documentation for the <b>TreeSet</b> class states the following:
<blockquote><i>"... the Set interface is defined in terms of the equals
operation, but a TreeSet instance performs all key comparisons using its
<b>compareTo</b>
(or compare) method ..."</i></blockquote>
What this means is that insofar as the handling of duplicate elements is
concerned, <i>(with the possible exception given below involving a Comparator),</i>
in order for a reference to an object to be included in a <b>TreeSet</b>
collection, the class from which that object is instantiated must implement
the <b>Comparable</b> interface.
<p><b><font color="#FF0000">A possible exception</font></b>
<p>Note that one of the constructors for the <b>TreeSet</b> class makes
it possible to instantiate a new object by passing a parameter that is
a reference to an object that implements the <b>Comparator</b> interface.
<p>The <b>Comparator</b> interface declares a method named <b>compare</b>,
which compares its two arguments for order.&nbsp; The text in the above
excerpt from the Sun documentation suggests that when this parameterized
constructor is used, it may not be necessary for the objects included in
the <b>TreeSet</b> collection to implement the <b>Comparable</b> interface.
<p>I won't discuss that possibility in this lesson, but I will discuss
it in a subsequent lesson that discusses the use of the <b>Comparator</b>
interface.&nbsp; For purposes of this lesson, I will concentrate on the
use of a <b>TreeSet</b> collection that does not receive a reference to
a <b>Comparator</b> object when it is instantiated.
<p><b><font color="#FF0000">The SortedSet interface</font></b>
<p>The <b>TreeSet</b> class also implements the <b>SortedSet</b> interface.&nbsp;
The documentation for the <b>SortedSet</b> interface states the following:
<blockquote><i>"A set that further guarantees that its iterator will traverse
the set in ascending element order, sorted according to the natural ordering
of its elements (see Comparable), or by a Comparator provided at sorted
set creation time."</i></blockquote>
<b><font color="#FF0000">Natural ordering of the elements</font></b>
<p>The key term to note in the above quotation is the term <i>natural ordering
of its elements</i>.&nbsp; This takes us back to the <b>Comparable</b>
interface, for which the documentation states:
<blockquote><i>"This interface imposes a total ordering on the objects
of each class that implements it. This ordering is referred to as the class's
natural ordering, and the class's compareTo method is referred to as its
natural comparison method."</i></blockquote>
<b><font color="#FF0000">Conclusion</font></b>
<p>The conclusion is, in order for the iterator to be able to traverse
the set according to the <i>natural ordering of its elements,</i> the elements
stored in an object that implements the <b>SortedSet</b> interface must
be instantiated from a class that implements the <b>Comparable</b> interface
<i>(unless
a Comparator is provided when the SortedSet object is instantiated.)</i>
<p><b><font color="#FF0000">The bottom line</font></b>
<p>The bottom line is, because the class named <b>MyClass</b> in Listing
1 does not implement the <b>Comparable</b> interface, objects of that class
are not eligible for use with a <b>TreeSet</b> collection <i>(unless a
Comparator is provided when the TreeSet object is instantiated).</i>
<p>A <b>Comparator</b> was not provided when the <b>TreeSet</b> object
was instantiated in Listing 1.
<p>Therefore, the attempt in Listing 2, to add a <b>MyClass</b> object
to the <b>TreeSet</b> collection resulted in a <b>ClassCastException</b>
being thrown at runtime.
<p><b><font color="#FF0000">The solution</font></b>
<p>To solve this problem, we must modify the definition of the class named
<b>MyClass
</b>to make it implement the <b>Comparable</b> interface <i>(assuming that
we don't provide a Comparator when the TreeSet object is instantiated).</i>
<p>This is accomplished in the modified version of the program shown in
Listing 3.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparable05.java
import java.util.*;

public class Comparable05{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparable05

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ref = new TreeSet();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next());
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();

&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(3));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(2));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(1));
&nbsp; }//end fillIt()
}//end class Populator

class MyClass implements Comparable{
&nbsp; int data;
&nbsp;&nbsp;
&nbsp; MyClass(){
&nbsp;&nbsp;&nbsp; data = 0;
&nbsp; }//end noarg constructor
&nbsp;&nbsp;
&nbsp; MyClass(int data){
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end parameterized constructor
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return "" + data;
&nbsp; }//end overridden toString()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int compareTo(Object o){
&nbsp;&nbsp;&nbsp; if(!(o instanceof MyClass))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(((MyClass)o).data &lt; data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;
&nbsp;&nbsp;&nbsp; if(((MyClass)o).data > data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1;
&nbsp;&nbsp;&nbsp; else return 0;
&nbsp; }//end compareTo()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public boolean equals(Object o){
&nbsp;&nbsp;&nbsp; if(!(o instanceof MyClass))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
&nbsp;&nbsp;&nbsp; if(((MyClass)o).data == data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;
&nbsp;&nbsp;&nbsp; else return false;
&nbsp; }//end overridden equals()
}//end MyClass

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The corrected code</font></b>
<p>The important code to note in this modified version of the program is
the new definition of the class named <b>MyClass</b>.&nbsp; The other code
in the program is essentially the same as in the previous version of the
program.
<p>The beginning portion of the new definition for <b>MyClass</b> is shown
in Listing 4.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class MyClass <b>implements</b> <b>Comparable</b>{
&nbsp; int data;
&nbsp;&nbsp;
&nbsp; MyClass(){
&nbsp;&nbsp;&nbsp; data = 0;
&nbsp; }//end noarg constructor
&nbsp;&nbsp;
&nbsp; MyClass(int data){
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end parameterized constructor
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return "" + data;
&nbsp; }//end overridden toString()

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p>The code shown in Listing 4 is identical to the code in the previous
version with one major exception.&nbsp; This version of the class definition
implements the <b>Comparable</b> interface.&nbsp; That means that this
class must provide a concrete definition for the following method, which
is the only method declared in the <b>Comparable</b> interface:
<p><b>public int compareTo(Object o)</b>
<p><b><font color="#FF0000">The compareTo method</font></b>
<p>The description of the <b>compareTo</b> method in the Sun documentation
begins as follows:
<p><i>"Compares this object with the specified object for order. Returns
a negative integer, zero, or a positive integer as this object is less
than, equal to, or greater than the specified object."</i>
<p>Beyond this, there are a number of additional stipulations that I won't
repeat here.&nbsp; You can view them in the Sun documentation if you are
interested in that level of detail.
<p>Listing 5 shows my implementation of the <b>compareTo</b> method.&nbsp;
Although this implementation satisfies the general description given above,
I haven't taken the time to test it fully to confirm that it meets all
of the additional stipulations provided by Sun.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; public int compareTo(Object o){
&nbsp;&nbsp;&nbsp; if(!(o instanceof MyClass))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(((MyClass)o).data &lt; data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;
&nbsp;&nbsp;&nbsp; if(((MyClass)o).data > data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1;
&nbsp;&nbsp;&nbsp; else return 0;
&nbsp; }//end compareTo()

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Consistent with equals</font></b>
<p>The Sun documentation strongly emphasizes the need to make certain that
a class' natural ordering is <i>consistent with equals,</i> and provides
the rules for meeting that requirement.
<p>Further, the documentation for the <b>TreeSet</b> class reads partially
as follows:
<blockquote><i>"Note that the ordering maintained by a set (whether or
not an explicit comparator is provided) must be <b>consistent with equals</b>
if it is to correctly implement the Set interface. ..."</i></blockquote>
<b><font color="#FF0000">Meeting the consistent with equals requirement</font></b>
<p>In order to satisfy the rules and to cause the <i>natural ordering</i>
of the <b>MyClass</b> class to be <i>consistent with equals</i>, it was
necessary to override the <b>equals</b> method inherited from the <b>Object</b>
class.&nbsp; My overridden version of the <b>equals</b> method is shown
in Listing 6.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public boolean equals(Object o){
&nbsp;&nbsp;&nbsp; if(!(o instanceof MyClass))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
&nbsp;&nbsp;&nbsp; if(((MyClass)o).data == data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return true;
&nbsp;&nbsp;&nbsp; else return false;
&nbsp; }//end overridden equals()
}//end MyClass

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p>As was the case in defining the <b>compareTo</b> method, there are also
a large number of stipulations involved in properly overriding the <b>equals</b>
method.&nbsp; I will simply refer you to the Sun documentation if you are
interested in reading about those stipulations.
<p><b><font color="#FF0000">The program output</font></b>
<p>Given all of the above, this program compiles and executes correctly,
producing the following output.
<p>1234
<p>Note that duplicate elements were eliminated, and the iterator traversed
the set in ascending element order, sorted according to the natural ordering
of the elements, as required for a <b>SortedSet</b> collection.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">I explained why the elements stored in a <b>TreeSet</b>
collection need to be references to objects instantiated from a class that
implements the <b>Comparable</b> interface.&nbsp; (<i>In a subsequent lesson,
I will teach you about an alternative approach that makes use of the Comparator
interface.)</i></font>
<p>I provided an example of implementing the <b>Comparable</b> interface
for a new class definition, and I taught you about the <i>natural ordering
of the elements</i> for a class.
<p>I taught you the meaning of the <i>consistent with equals</i> requirement
and showed you how to satisfy that requirement for a new class definition.
<p>I showed you how to define a new class whose objects are eligible for
inclusion in a <b>TreeSet</b> collection.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will discuss the use of the <b>Comparator</b> interface
in order to achieve a sorting order that is different from the <i>natural
ordering</i> of the elements in a sorted collection.
<br>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
