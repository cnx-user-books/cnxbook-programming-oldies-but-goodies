<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Network Programming - The URLConnection Class<!--endtitle--></b></h2></center>
Java Programming, Lesson # 556, Revised 02/20/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#code fragments">Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.

<p>The material in this lesson is extremely important. However, there is
simply too much material to be covered in detail during lecture periods.
Therefore, students in Prof. Baldwin's <b>Advanced Java Programming</b>
classes at ACC will be responsible for studying this material on their
own, and bringing any questions regarding the material to class for discussion.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
I really don't plan to say very much about the <b>URLConnection </b>class.
It is an <b>abstract </b>class that can be <i>extended</i>, and it has
a protected constructor that takes a <b>URL </b>object as a parameter.

<p>It has about eight variables that contain useful information about a
connection.

<p>It has about 37 methods that can be used to examine and manipulate an
object of the class in a variety of different ways.

<p>If you plan to use the <b>URL </b>class for the higher-lever capabilities
that it offers, and you plan to write <i>content handlers</i> and <i>protocol
handlers</i>, you will probably need to become very familiar with this
class. In that case, you will probably want to get a copy of a good Java
networking book, such as <u>Java Network Programming</u>, by Elliotte Rusty
Howard, and study the use of this class in depth.

<p>My objective here is simply to make you aware of the existence of the
class and its many methods, and to provide some examples of how you can
get and use an object of the class to obtain higher-level information about
a connection.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
This program illustrates connecting to a <i>URL </i>and creating a <b>URLConnection
</b>object.

<p>The program then uses the <b>URLConnection </b>object to obtain and
display some of the "higher level" aspects of the <i>URL</i>:
<ul><li>
the <i>URL</i></li>

<li>
the date last modified</li>

<li>
the content type</li></ul>
The computer must be online for this program to run properly. Otherwise,
it will throw an exception of type <b>UnknownHostException</b>.

<p>The program was tested using JDK 1.1.3 under Win95.

<p>The output from the program is a display of:
<ul><li>
the <i>URL</i>,</li>

<li>
the date last modified,</li>

<li>
the content type</li></ul>
As of 01/19/98, an abbreviated version of the output was:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>http://www2.austin.cc.tx.us/baldwin/Test01.html
Mon Jan 19 22:56:04 CST 1998
text/html</pre></td></tr></table>

<center><h3><a name="code fragments"></a><font color="#ff0000">Code Fragments</font></h3></center>
The <b>URLConnection </b>class is <b>abstract</b>, and therefore cannot
be instantiated directly. However, it can be <i>extended</i>, and it has
a protected constructor that requires a <b>URL </b>object as a parameter.

<p>A common way to get a <b>URLConnection </b>object is to invoke a method
on a <b>URL </b>object that returns an object of a subclass of the <b>URLConnection
</b>class. That is the case in the sample program for this lesson.

<p>I will remove all exception handling code from the discussion of this
program for brevity.

<p>All of the code in the sample program for this lesson is contained in
the <b>main()</b> method of the controlling class.

<p>The first code fragment instantiates a <b>URL </b>object. This is essentially
the same code that we saw in the sample programs in the lesson on the <b>URL
</b>class, but you need to see it again here in order to understand the
code that follows it.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL url = <b>new URL</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http://www2.austin.cc.tx.us/baldwin/Test01.html");</pre></td></tr></table>
The next code fragment gets a <b>URLConnection </b>object by invoking the
<b>openConnection()</b> method on the <b>URL </b>object instantiated above.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URLConnection urlConnection = url.<b>openConnection()</b>;</pre></td></tr></table>
The next code fragment invokes three methods on the <b>URLConnection </b>object
to obtain three of the higher-level aspects of the <i>URL</i>:
<ul><li>
the URL</li>

<li>
the date that the file was last modified</li>

<li>
the content type of the file</li></ul>
The result of these three inquiries was as shown below:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>http://www2.austin.cc.tx.us/baldwin/Test01.html
<br>Mon Jan 19 22:56:04 CST 1998
<br>text/html</td></tr></table>
The date information for when the file was last modified appears to be
based on the date maintained by the "directory" capability of the system
showing when the file was written or modified.

<p>The content type is probably based on the file's extension.

<p>This is the kind of information that you might need in order to make
more effective use of the file pointed to by the <i>URL</i>. Again, there
are many more methods which can be used to obtain other information about
the connection.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(urlConnection.<b>getURL()</b>);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date lastModified = new Date(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; urlConnection.<b>getLastModified()</b>);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(lastModified);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(urlConnection.<b>getContentType()</b>);</pre></td></tr></table>
Following this, the program uses the <b>URL </b>object to get an input
stream and to display the contents of the file. However, this essentially
duplicates a portion of the program in the earlier lesson on the <b>URL
</b>class, so we won't discuss it further here.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
A complete listing of the program follows.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Url004.java Copyright 1998, R.G.Baldwin
Revised 01/19/98

Illustrates connecting to a URL and creating a
URLConnection object.

Uses the URL object to obtain and display&nbsp;
the URL, the date last modified, and the content type.

Also uses the URLConnection object to obtain an&nbsp;
input stream object.&nbsp; Then uses this object to read and&nbsp;
display the file.

Computer must be online for this program to run properly.
Otherwise, it will throw an exception of type&nbsp;
UnknownHostException.

Tested using JDK 1.1.3 under Win95.

The output from the program is a display of:
the URL,
the date last modified,&nbsp;
the content type, and&nbsp;
the contents of the file named Test01.html in a text format

As of 01/19/98, the output(with line breaks manually&nbsp;

inserted) was:

http://www2.austin.cc.tx.us/baldwin/Test01.html
Mon Jan 19 22:56:04 CST 1998
text/html
&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
&lt;HTML>
&lt;HEAD>
&nbsp;&nbsp; &lt;TITLE>&lt;/TITLE>
&nbsp;&nbsp; &lt;META NAME="Author" CONTENT="">
&nbsp;&nbsp; &lt;META NAME="GENERATOR" CONTENT="Mozilla/3.01Gold&nbsp;
&nbsp;&nbsp; (Win95; I) [Netscape]">
&lt;/HEAD>
&lt;BODY>

&lt;P>&lt;B>&lt;I>Richard G Baldwin (512) 223-4758,&nbsp;
&lt;A HREF="mailto:baldwin@austin.cc.tx.us">
baldwin@austin.cc.tx.us&lt;/A>,
&lt;A HREF="http://www2.austin.cc.tx.us/baldwin/">
http://www2.austin.cc.tx.us/baldwin/&lt;/A>&lt;/I>&lt;/B>&lt;/P>

&lt;H3 ALIGN=CENTER>
&lt;A HREF="http://www2.austin.cc.tx.us/baldwin/">
Test File&lt;/A>&lt;/H3>

&lt;P>This test file is used to test certain network&nbsp;
programming applications.&lt;/P>

&lt;/BODY>
&lt;/HTML>&nbsp;&nbsp;
**********************************************************/

import java.net.*;
import java.io.*;
import java.util.*;

class Url004{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; String dataLine;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a URL object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL url = new URL(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http://www2.austin.cc.tx.us/baldwin/Test01.html");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Open a connection to the URL and get a&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // URLConnection object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URLConnection urlConnection = url.openConnection();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the connection to get and display the URL
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(urlConnection.getURL());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the connection to get and display the date last
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // modified.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Date lastModified = new Date(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; urlConnection.getLastModified());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(lastModified);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the connection to get and display the content
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // type.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(urlConnection.getContentType());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the connection to get an InputStream object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Use the InputStream object to instantiate a&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // DataInputStream object.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BufferedReader htmlPage =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BufferedReader(new InputStreamReader(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url.openStream()));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the DataInputStream object to read and display
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the file one line at a time.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while((dataLine = htmlPage.readLine()) != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(dataLine);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; }//end try
&nbsp;&nbsp;&nbsp; catch(UnknownHostException e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Must be online to run properly.");
&nbsp;&nbsp;&nbsp; }//end catch
&nbsp;&nbsp;&nbsp; catch(MalformedURLException e){System.out.println(e);}
&nbsp;&nbsp;&nbsp; catch(IOException e){System.out.println(e);}

&nbsp; }//end main
}//end class Url004
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>