<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">The Pen and PathSegment Classes:&nbsp; Multimedia Programming with Java</h2>
<i>Learn about the Pen and PathSegment classes in Ericson's multimedia 
library, which are critical to maintaining a complete history of the turtle's 
movements.</i><p><b>Published:</b>&nbsp; January 13, 2009<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 348</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Comments_regarding_turtle_graphics">Comments regarding 
		turtle graphics</a><ul>
		<li><a href="#Illustration_of_OOP_concepts">Illustration of OOP concepts</a></li>
		<li><a href="#Vector_graphics">Vector graphics</a></li>
	</ul>
		</li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#A_multimedia_class_library">A multimedia class library</a></li>
	<li><a href="#Software_installation_and_testing">Software installation and 
	testing</a></li>
</ul>
	</li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#The_Pen_class">The Pen class</a></li>
	<li><a href="#The_PathSegment_class">The PathSegment class</a></li>
	<li><a href="#Back_to_the_Pen_class">Back to the Pen class</a></li>
	<li><a href="#The_program_named_TurtleGoRound">The program named 
	TurtleGoRound</a></li>
</ul>
	</li>
	<li><a href="#Run%20the%20program">Run the programs</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p>This lesson is the next in a series <i>(see <a href="#Resources">Resources</a>)</i> 
designed to teach you how to write Java programs to do things like:</p>
<ul>
	<li>Remove <i>redeye</i> from a photographic image.</li>
	<li>Distort the human voice.</li>
	<li>Display one image inside another image.</li>
	<li>Do edge detection, blurring, and other filtering operations on images.</li>
	<li>Insert animated cartoon characters in videos of live humans.</li>
</ul>
<p>If you have ever wondered how to do these things, you've come to the right 
place.</p>
<h3><a name="Comments_regarding_turtle_graphics">Comments regarding turtle 
graphics</a></h3>
<p>By now, you may be wondering why I am spending so much time and expending so 
much effort explaining those parts of Ericson's multimedia library that have to 
do with <i>turtle graphics (see <a href="#Resources">Resources</a>)</i>.&nbsp; 
<i>&quot;After all,&quot;</i> you may ask, <i>&quot;wasn't turtle graphics something 
that was invented by
<a title="Seymour Papert" href="http://en.wikipedia.org/wiki/Seymour_Papert">
Seymour Papert</a> in the late 60s primarily to teach computer programming to 
children?&quot;</i></p>
<p>Maybe so, but in my opinion Ericson's turtle graphics are still relevant in today's 
object-oriented world.&nbsp; There are two 
main reasons for my concentration on turtle graphics in the early part of this 
series:</p>
<ul>
	<li>Illustration of OOP concepts</li>
<li>Illustration of vector graphics</li>
</ul>
<h4><a name="Illustration_of_OOP_concepts">Illustration of OOP concepts</a></h4>
<p>Modern turtle graphics provide an excellent illustration of Object-Oriented 
Programming concepts.</p>
<p><font color="#FF0000"><b>What is OOP?</b></font></p>
<p>Someone once said that an object-oriented program consists of a bunch of 
objects, hanging around and exchanging messages for the purpose of solving a 
specific programming problem.&nbsp; Modern object-oriented turtle graphics 
programs are no exception to that description.</p>
<p><font color="#FF0000"><b>Inheritance</b></font></p>
<p>A turtle is an object of the <b>Turtle</b> class, which is a subclass of the
<b>SimpleTurtle</b> class, which in turn is a subclass of the <b>Object</b> 
class.&nbsp; Therefore, a <b>Turtle</b> object <i>IsA (see <a href="#Resources">
Resources</a>)</i> <b>SimpleTurtle</b> object, and also <i>IsA<b> </b></i><b>
Object</b> object.&nbsp; In that sense, a turtle illustrates inheritance.</p>
<p><font color="#FF0000"><b>Containment or composition</b></font></p>
<p>In addition, a <b>Turtle</b> object <i>HasA</i> <i>(see <a href="#Resources">
Resources</a>)</i> <b>Pen</b> object, which in 
turn <i>HasA</i> <b>ArrayList</b> object.&nbsp; The <b>ArrayList</b> object <i>
HasA</i> list of <b>PathSegment</b> objects.&nbsp; Therefore, a turtle also 
illustrates <i>containment</i> or <i>composition</i>.</p>
<p><font color="#FF0000"><b>A world is an object</b></font></p>
<p>As you will see in the next lesson, a world is an object of the <b>World</b> 
class, which <i>IsA</i> <b>JComponent</b>, <b>Container</b>, <b>Component</b>, 
and <b>Object</b>.&nbsp; Also, through interface inheritance, a world <i>IsA</i> <b>
ImageObserver</b>, <b>MenuContainer</b>, <b>Serializable</b>, and <b>
ModelDisplay</b>.</p>
<p>A <b>World</b> object <i>HasA</i> <b>ArrayList</b> object, which in turn <i>
HasA</i> list of none, one, or more <b>Turtle</b> objects.</p>
<p><font color="#FF0000"><b>Exchanging messages</b></font></p>
<p>A <b>Turtle</b> object has <i>state</i> and <i>behavior</i>.&nbsp; Whenever 
certain aspects of the turtle's state change, the turtle sends a message to the 
containing world notifying the world that its state has changed.&nbsp; The 
world may elect to repaint itself and its contents at that point in time, or may 
defer the repaint to sometime later.</p>
<p>When the world does decide to 
repaint, it sends a message to each turtle telling the turtles to repaint 
themselves on the graphics context belonging to the world.</p>
<p>After 
repainting its own image as indicated by its current state, the turtle sends a 
message to its <b>Pen</b> object telling the pen to repaint its historical path 
on the graphics context belonging to the world.&nbsp; This is an example of a 
model-view-control <i>(MVC)</i> programming paradigm.</p>
<p>I could go on and on, but hopefully this gives you an idea why I consider 
modern turtle graphics to be important in terms of illustrating OOP concepts.</p>
<h4><a name="Vector_graphics">Vector graphics</a></h4>
<p>According to Wikipedia <i>(see <a href="#Resources">Resources</a>)</i>:</p>
<blockquote>
	<p><i>&quot;<b>Turtle graphics</b> is a term in computer graphics for a method of 
	programming
	<a title="Vector graphics" href="http://en.wikipedia.org/wiki/Vector_graphics">
	vector graphics</a> using a relative cursor (the &quot;turtle&quot;) upon a
	<a title="Cartesian plane" class="mw-redirect" href="http://en.wikipedia.org/wiki/Cartesian_plane">
	Cartesian plane</a>.&quot;</i></p>
</blockquote>
<p>Wikipedia goes on to tell us:</p>
<blockquote>
	<p><i>&quot;The turtle has three attributes:</i></p>
	<ol>
		<li><i>a position</i></li>
		<li><i>an orientation</i></li>
		<li><i>a pen, itself having attributes such as color, width, and up 
		versus down.</i></li>
	</ol>
	<p><i>The turtle moves with commands that are relative to its own position, 
	such as &quot;move forward 10 spaces&quot; and &quot;turn left 90 degrees&quot;. The pen carried 
	by the turtle can also be controlled, by enabling it, setting its color, or 
	setting its width. A student could understand (and predict and reason about) 
	the turtle's motion by imagining what they would do if they were the turtle.
	<a title="Seymour Papert" href="http://en.wikipedia.org/wiki/Seymour_Papert">
	Seymour Papert</a> called this &quot;body syntonic&quot; reasoning.</i></p>
	<p><i>From these building blocks one can build more complex shapes like 
	squares, triangles, circles and other composite figures. Combined with 
	control flow, procedures, and recursion, the idea of turtle graphics is also 
	useful in a
	<a title="Lindenmayer system" class="mw-redirect" href="http://en.wikipedia.org/wiki/Lindenmayer_system">
	Lindenmayer system</a> for generating 
	<a title="Fractal" href="http://en.wikipedia.org/wiki/Fractal">fractals</a>.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>Almost a lost technology</b></font></p>
<p>Although vector graphics was one of the mainstays of computer graphic output 
during my early days in the computer industry, it is doubtful that many current 
students know much about the topic or appreciate its benefits <i>(Adobe 
postscript and CAD/CAM use vector graphics for example)</i>.</p>
<p><font color="#FF0000"><b>Bitmapped graphics tend to rule</b></font></p>
<p>Those students who do know 
something about computer graphics are mostly familiar with bitmapped graphics.&nbsp; 
Therefore, I see turtle graphics as one way to expand the horizons of those 
students, allowing them to learn about and to appreciate the pros and cons of 
both vector graphics and bitmapped graphics.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Screen output from the program named 
	Java346a.</li>
	<li><a href="#Figure_2">Figure 2</a>. Screen output from the program named 
	TurtleGoRound. </li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Instance variables of the Pen class. </li>
	<li><a href="#Listing_2">Listing 2</a>. Instance variables for the 
	PathSegment class. </li>
	<li><a href="#Listing_3">Listing 3</a>. Constructor for the PathSegment 
	class. </li>
	<li><a href="#Listing_4">Listing 4</a>. The paintComponent method for the 
	PathSegment class. </li>
	<li><a href="#Listing_5">Listing 5</a>. Constructors for the Pen class. </li>
	<li><a href="#Listing_6">Listing 6</a>. Property methods for the pen's 
	penDown property. </li>
	<li><a href="#Listing_7">Listing 7</a>. Property methods for the pen's color 
	property. </li>
	<li><a href="#Listing_8">Listing 8</a>. Property methods for the pen's width 
	property. </li>
	<li><a href="#Listing_9">Listing 9</a>. The addMove method of the Pen class. </li>
	<li><a href="#Listing_10">Listing 10</a>. The clearPath method of the Pen 
	class. </li>
	<li><a href="#Listing_11">Listing 11</a>. The pen's paintComponent method. </li>
	<li><a href="#Listing_12">Listing 12</a>. Beginning of the Main class and 
	the main method. </li>
	<li><a href="#Listing_13">Listing 13</a>. Declare and initialize working 
	variables. </li>
	<li><a href="#Listing_14">Listing 14</a>. Move the turtle in a circle. </li>
	<li><a href="#Listing_15">Listing 15</a>. Source code for the Pen class. </li>
	<li><a href="#Listing_16">Listing 16</a>. Source code for the PathSegment 
	class. </li>
	<li><a href="#Listing_17">Listing 17</a>. Source code for the program named 
	Java346a. </li>
	<li><a href="#Listing_18">Listing 18</a>. Source code for the program named 
	TurtleGoRound. </li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="A_multimedia_class_library">A multimedia class library</a></h3>
<p>In this series of lessons, I will present and explain many of the classes in 
a multimedia class library that was developed and released under a <b>Creative 
Commons Attribution 3.0 United States License</b> <i>(see <a href="#Resources">
Resources</a>) </i>by Mark Guzdial and Barbara Ericson at Georgia Institute of 
Technology.&nbsp; In doing this, I will also present some interesting sample programs 
that use the library.</p>
<h3><a name="Software_installation_and_testing">Software installation and 
testing</a></h3>
<p>I explained how to download, install, and test the multimedia class library 
in an earlier lesson titled <i>Multimedia Programming with Java, Getting Started 
(see <a href="#Resources">Resources</a>)</i>.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>In the previous lesson titled <i>Wrapping 
Up the SimpleTurtle Class:&nbsp; Multimedia Programming with Java,</i> <i>&nbsp;(see <a href="#Resources">Resources</a>)</i>, I 
explained that after adjusting the turtle's position coordinates, code in the 
various <i>turtle movement</i> methods calls the <b>addMove</b> method on the 
turtle's <b>Pen</b> 
object to add the move information to the turtle's history of movements.&nbsp; I 
further explained that the history information is used under certain 
circumstances to recreate the turtle's historical movement path when the display 
is updated.</p>
<p>I will explain the <b>Pen</b> class in this lesson.&nbsp; I will also explain 
a class named <b>PathSegment</b> that is used by the <b>Pen</b> class to 
construct and maintain historical turtle movement data.&nbsp; Along the 
way, I will also explain some of the capabilities of the <b>Graphics2D</b> class 
and other classes in the Java 2D API.</p>
<p><font color="#FF0000"><b>Program from the previous lesson</b></font></p>
<p>Listing 17 provides the source code for a program named <b>Java346a</b> that I explained in the 
previous lesson.&nbsp; Figure 1 shows the screen output produced by that 
program.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Screen output from the program named 
	Java346a.</b><table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java348a.jpg" width="309" height="529"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Turtle tracks are important</b></font></p>
<p>In this lesson, we are primarily interested in the tracks produced by the 
movement of turtles.&nbsp; The tracks are produced 
through the use of <b>Pen</b> objects, and the entire historical track of each 
turtle is redrawn each time the screen display is updated to show a different 
state of a turtle.</p>
<p><font color="#FF0000"><b>The program named TurtleGoRound</b></font></p>
<p>In this lesson, I will also present and explain another program that 
uses a turtle's pen in a slightly more significant way.&nbsp; In this program, 
an invisible turtle moves around a circular path leaving a wide multi-colored track in its 
wake.&nbsp; The source code for the program is provided in Listing 18 near the 
end of the lesson.&nbsp; The screen output is shown in Figure 2.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Screen output from the program named 
	TurtleGoRound. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java348b.jpg" width="209" height="229"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><a name="The_Pen_class">The Pen class</a></h3>
<p>A complete listing of the <b>Pen</b> class, as defined by Barb Ericson at the 
Georgia Institute of Technology, is shown in Listing 15.&nbsp; Only minor editing 
changes were made to force the source code to fit into this narrow publication 
format.</p>
<p>As is my custom, I will explain the code in fragments, beginning with the 
instance variables shown in Listing 1.&nbsp; </p>
<p>
<b><a name="Listing_1">Listing 1</a>. Instance variables of the Pen class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  /** track if up or down */
  private boolean penDown = true;

  /** color of ink */
  private Color color = Color.green;

  /** width of stroke */
  private int width = 1;

  /** list of path segment objects to draw */
  private List&lt;PathSegment&gt; pathSegmentList =
    new ArrayList&lt;PathSegment&gt;();</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Property names</b><br />
  See the lesson titled <i>JavaBeans, Introspection</i> in <a href="#Resources">
	Resources</a> for an explanation of the conventions regarding Java property 
	names.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>The variable named penDown</b></font></p>
<p>This variable contains the value of a <b>boolean</b> property named <b>
penDown</b> that controls 
whether or not a track is drawn when the turtle moves.&nbsp; The property value 
was true for both of the turtles shown in Figure 1, which caused the lines 
describing the tracks of both turtles to be drawn.</p>
<p>The <b>penDown</b> property value was initially false for the program shown 
in Figure 2.&nbsp; In this program, the turtle moved from its initial location 
at the center of the world to the center-right edge of the world without leaving 
a track.&nbsp; Then the <b>penDown</b> property value was set to true while the 
turtle traversed the circular path shown by the wide multi-colored line.</p>
<p>By default, the <b>penDown</b> property value is set to <b>true</b> causing a track to be drawn.&nbsp; 
The state of this property can be initialized through the use of an overloaded
<b>Pen</b> constructor and can be modified through the use of a property method 
named <b>setPenDown</b>.&nbsp; The state can also be determined by calling a 
property method named <b>isPenDown</b> on a turtle object.</p>
<p><font color="#FF0000"><b>The variable named color</b></font></p>
<p>This variable contains the value of a property named <b>color</b> that controls the color of a 
track when it is drawn.&nbsp; By default, the pen color is green.&nbsp; However, 
we learned in an earlier lesson that the color of the pen is set to the <b>bodyColor</b> of 
each turtle by default when the <b>SimpleTurtle</b> object is constructed.&nbsp; Thus, the 
default pen color shown in Listing 1 is modified by code in the constructor for 
the <b>SimpleTurtle</b> class.</p>
<p><font color="#FF0000"><b>Turtles of many colors</b></font></p>
<p>We also learned that as more and more turtle objects are constructed and 
added to either a <b>Picture</b> object or a <b>ModelDisplay</b> <i>(world)</i> object, their 
default colors cycle through the following <a name="colors">colors</a> in 
sequence:</p>
<ul>
	<li>Color.green</li>
	<li>Color.cyan</li>
	<li>new Color(204,0,204)</li>
<li>Color.gray</li>
</ul>
<p><font color="#FF0000"><b>Controlling and getting the color property value</b></font></p>
<p>The value of the <b>color</b> property can be controlled either through the use of 
two different overloaded constructors, or by calling a property method named <b>
setColor</b>.&nbsp; This method provides the mechanism by which the constructor 
for the <b>SimpleTurtle</b> class sets the color of the pen to the <b>
bodyColor</b> of the turtle by default.&nbsp; The <b>SimpleTurtle</b> 
constructor calls a method named <b>setPenColor</b>, which in turn calls the pen's
<b>setColor</b> method.</p>
<p>After constructing the small turtle shown in Figure 1 and setting the color 
of the turtle's shell to red, the code in Listing 17 calls the <b>setPenColor</b> method on the turtle object to 
set the pen's <b>color</b> property value to blue.&nbsp; This causes the track for that turtle to be 
blue.</p>
<p>On the other hand, the default pen color for the large turtle shown in Figure 
1 was not modified, causing the track for that turtle to be the same color as 
the color of the turtle.&nbsp; Since this was the second turtle constructed and 
added to the world, the default color of the turtle was <a href="#colors">cyan</a>.</p>
<p>The pen's <b>color</b> property value was changed continuously as the turtle 
traversed the circular path in Figure 2, causing the variation in the color of 
the turtle track.</p>
<p>The color of the pen can also be determined by calling a property method 
named <b>getColor</b>.</p>
<p><font color="#FF0000"><b>The variable named width</b></font></p>
<p>The third instance variable shown in Listing 1 is <b>width</b>.&nbsp; The 
value stored in this variable is a property named <b>width</b> that controls the width of the line that is drawn to 
represent the turtle's track.&nbsp; By default, the line is one pixel wide.</p>
<p>The value of this property can be controlled through the use of either one of 
two overloaded constructors, or by calling a property method named <b>setWidth</b>.&nbsp; </p>
<p>The value of <b>width</b> can also be determined by calling a property method 
named <b>getWidth</b>.</p>
<p>In a manner similar to the color, the <b>SimpleTurtle</b> class provides a 
method named <b>setPenWidth</b> that is used to set the width property for the
<b>Pen</b> object belonging to each individual turtle object.&nbsp; This method 
calls the <b>setWidth</b> method on the turtle's <b>Pen</b> object to set the 
value of the pen's <b>width</b> property.</p>
<p>The code in Listing 17 calls the <b>setPenWidth</b> method on the turtle with 
the red shell to set the pen width to two pixels.&nbsp; This results in the blue 
track in Figure 1 being twice the default width of the cyan track.</p>
<p>The pen's <b>width</b> property was set to five pixels for the program output 
shown in Figure 2.</p>
<p><font color="#FF0000"><b>The variable named pathSegmentList</b></font></p>
<p>The last instance variable shown in Listing 1, named <b>pathSegmentList</b>, 
is a reference to a new <b>ArrayList</b> object that uses generics <i>(see
the lesson titled Generics in J2SE, Getting Started in
<a href="#Resources">Resources</a>)</i> to create a container for references to 
objects of the <b>PathSegment</b> class.</p>
<p>At this point, I will temporarily 
put the explanation of the <b>Pen</b> class on the back burner and explain the
<b>PathSegment</b> class.&nbsp; Then I will return to the explanation of the <b>
Pen</b> class.</p>
<h3><a name="The_PathSegment_class">The PathSegment class</a></h3>
<p>A complete listing of the <b>PathSegment</b> class is provided in Listing 16 
near the end of the lesson.&nbsp; As usual, I will explain the code in this 
class in fragments.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b><a name="The_Line2D_class">The Line2D class</a></b><br />
  According to the documentation, <i>&quot;This Line2D represents a line segment in (x,y) 
	coordinate space. ...This class is only the abstract superclass for all 
	objects that store a 2D line segment. The actual storage representation of 
	the coordinates is left to the subclass.&quot;</i>
</td></tr></table>
</td>
</tr>
</table>
<p>The purpose of an object of the <b>PathSegment</b> class is to represent a line segment in a 
series of one or more line segments that track the movement of a turtle when the 
pen for that turtle is down.</p>
<p><a name="A_PathSegment_object">A <b>PathSegment</b> object</a> has a color, a width, and a reference to a <b>
Line2D</b> object.&nbsp; <i>(See the various references to Java 2D Graphics in
<a href="#Resources">Resources</a> for examples of the use of <b>Line2D</b> 
objects.)</i></p>
<p>As I explained in earlier lessons, whenever a <b>World</b> object 
containing turtles is repainted, it is necessary to completely redraw the entire 
track for each turtle object that has been moving with its pen down.&nbsp; As you will see later, 
this is accomplished by the turtle object's <b>Pen</b> object saving that track 
as a list of <b>PathSegment</b> objects in the <b>ArrayList</b> object referred 
to by the <b>pathSegmentList</b> variable shown in Listing 1.</p>
<p><font color="#FF0000"><b>Instance variables for the PathSegment class</b></font></p>
<p>Listing 2 shows the instance variables belonging to an object of the <b>
PathSegment</b> class.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. Instance variables for the PathSegment 
class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  private Color color;
  private int width;
  private Line2D.Float line;</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>These three instance variables correspond to the three items mentioned
<a href="#A_PathSegment_object">earlier</a>.&nbsp; Of the three, only the third 
one merits an explanation.</p>
<p><font color="#FF0000"><b>The Line2D.Float class</b></font></p>
<p>As explained in the <a href="#The_Line2D_class">sidebar</a>, the <b>Line2D</b> 
class is the abstract superclass for all objects that store a 2D line segment. 
The actual storage representation of the coordinates is left to the subclass.&nbsp; 
This concept is explained more fully in the lesson titled <i>Java 2D Graphics, 
Nested Top-Level Classes and Interfaces (see <a href="#Resources">Resources</a>)</i>.&nbsp; 
The <b>Line2D.Float</b> class is a subclass of the <b>Line2D</b> class.&nbsp; An 
object of the <b>Line2D.Float</b> class stores information pertaining to the 
line segment as type <b>float</b>.</p>
<p><font color="#FF0000"><b>The Constructor for the PathSegment class</b></font></p>
<p>The constructor is shown in its entirety in Listing 3.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Constructor for the PathSegment class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public PathSegment (Color theColor, int theWidth,
                      Line2D.Float theLine){
    this.color = theColor;
    this.width = theWidth;
    this.line = theLine;
  }</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The constructor is straightforward.&nbsp; It simply receives values for the 
three instance variables shown in Listing 2 and saves those values in the 
instance variables belonging to the new <b>PathSegment</b> object.</p>
<p><font color="#FF0000">
<b>The paintComponent method for the PathSegment class</b></font></p>
<p>The <b>paintComponent</b> method is shown in Listing 4.<p>
<p>
<b><a name="Listing_4">Listing 4</a>. The paintComponent method for the 
PathSegment class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public void paintComponent(Graphics g){
    Graphics2D g2 = (Graphics2D) g;
    BasicStroke penStroke = new BasicStroke(this.width);
    g2.setStroke(penStroke););
    g2.setColor(this.color);
    g2.draw(this.line);
  }</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A cast to type Graphics2D is required</b></font></p>
<p>The purpose of the <b>paintComponent</b> method is to draw the line segment 
on the graphics context received as an incoming parameter.&nbsp; Because the 
method calls methods of the <b>Graphics2D</b> class, the code in Listing 4 
begins by casting the incoming reference to type <b>Graphics2D</b>.</p>
<p><font color="#FF0000"><b>Draw the line segment</b></font></p>
<p>Then Listing 4 draws the line segment on the specified graphics context with 
the required width and the required color.&nbsp; If you are unfamiliar with the 
code involving the <b>Stroke</b> interface in 
Listing 4 to control the line width, see the lesson titled <i>Java 2D Graphics, The Stroke Interface</i> 
in <a href="#Resources">Resources</a>.</p>
<p><font color="#FF0000"><b>Recap for the PathSegment class</b></font></p>
<p>To recap, as you will see later, the <b>Pen</b> object belonging to each 
turtle object saves each of the turtle's movement in an <b>ArrayList</b> object 
as a list of references to objects of the <b>PathSegment</b> class.&nbsp; </p>
<p>At the 
proper point in time, <i>(when the screen display is being repainted)</i>, the
<b>paintComponent</b> method is called on each reference in the
<b>ArrayList</b> to cause a series of line segments that track the turtle's 
movements to be drawn as shown in Figure 1 and Figure 2.</p>
<p>The tracks in Figure 1 consist 
of two blue line segments, each having a width of two pixels for the turtle with 
the red shell, and a single cyan line segment with a width of one pixel for the 
cyan turtle.</p>
<p>The track in Figure 2 consists of 360 line segments, each with a width of 
five pixels and each having a different value for its <b>color</b> property.</p>
<h3><a name="Back_to_the_Pen_class">Back to the Pen class</a></h3>
<p><font color="#FF0000">
<b>Constructors for the Pen class</b></font></p>
<p>Getting back to my explanation of the <b>Pen</b> class, Listing 5 shows three overloaded constructors for the <b>Pen</b> class.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. Constructors for the Pen class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * Constructor that takes no arguments
   */
  public Pen(){ }

  /**
   * Constructor that takes all the ink color, and width
   * @param color the ink color
   * @param width the width in pixels
   */
  public Pen(Color color, int width){
    this.color = color;
    this.width = width;
  }//end constructor

  /**
   * Constructor that takes the ink color, width, and
   * penDown flag
   * @param color the ink color
   * @param width the width in pixels
   * @param penDown the flag if the pen is down
   */
  public Pen(Color color, int width, boolean penDown){
    // use the other constructor to set these
    this(color,width);

    // set the pen down flag
    this.penDown = penDown;
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Straightforward code</b></font></p>
<p>These constructors are straightforward and shouldn't require an explanation.&nbsp; 
Note however, that the only constructor used by the <b>SimpleTurtle</b> class is 
the constructor that takes no parameters.&nbsp; Therefore, Barb Ericson must 
have had some other purpose involving a <b>Pen</b> object in mind when she 
defined the overloaded versions of the constructors.&nbsp; Perhaps we will 
discover what that purpose is as we dig deeper into her multimedia library in 
future lessons.</p>
<p><font color="#FF0000"><b>The property methods for the pen class</b></font></p>
<p>Listing 6, Listing 7, and Listing 8 show the property methods for the pen 
object's <b>penDown</b>, <b>color</b>, and <b>width</b> properties.&nbsp; These methods are 
straightforward and no explanation beyond the embedded comments should be 
required.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Property methods for the pen's penDown property. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * Method to get pen down status
   * @return true if the pen is down else false
   */
  public boolean isPenDown() { return penDown; }

  /**
   * Method to set the pen down value
   * @param value the new value to use
   */
  public void setPenDown(boolean value){
    penDown = value;
  }</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_7">Listing 7</a>. Property methods for the pen's color 
property. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * Method to get the pen (ink) color
   * @return the ink color
   */
  public Color getColor() { return color; }

  /**
   * Method to set the pen (ink) color
   * @param color the color to use
   */
  public void setColor(Color color) { this.color = color;}</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_8">Listing 8</a>. Property methods for the pen's width 
property. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * Method to get the width of the pen
   * @return the width in pixels
   */
  public int getWidth() { return width; }

  /**
   * Method to set the width of the pen
   * @param width the width to use in pixels
   */
  public void setWidth(int width) { this.width = width; }</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The addMove method</b></font></p>
<p>We learned in the previous lesson that each movement of the turtle results in 
a call to the pen's <b>addMove</b> method with the old and new location 
coordinates of the turtle being passed as parameters to the method.&nbsp; The <b>
addMove</b> method is shown in its entirety in Listing 9.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. The addMove method of the Pen class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * Method to add a path segment if the pen is down
   * @param x1 the first x
   * @param y1 the first y
   * @param x2 the second x
   * @param y2 the second y
   */
  public synchronized void addMove(
                           int x1, int y1, int x2, int y2)
  {
    if (penDown)
    {
      PathSegment pathSeg =
        new PathSegment(this.color,this.width,
                        new Line2D.Float(x1,y1,x2,y2));
      pathSegmentList.add(pathSeg);
    }
  }</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Purpose of the pen's addMove method</b></font></p>
<p>The purpose of the <b>addMove</b> method is to add information to the pen's
<b>pathSegmentList</b> describing the movement of the turtle from one location 
to another location when the pen is down.</p>
<p><font color="#FF0000"><b>If the pen is up</b></font></p>
<p>Listing 9 begins by testing to confirm that the pen is down.&nbsp; If the pen 
is not down, the turtle-movement data is not added to the list of historical 
movement data.</p>
<p><font color="#FF0000"><b>If the pen is down</b></font></p>
<p>If the pen is down, Listing 9 constructs a new <b>PathSegment</b> object 
containing the beginning and ending coordinates of the line segment, the pen color 
for the line segment, and the pen width for the line segment.&nbsp; Then the 
code in Listing 9 adds the new <b>PathSegment</b> object's reference to the 
list.</p>
<p>Therefore, the <b>pathSegmentList</b> contains references to <b>PathSegment</b> objects that describe 
every turtle movement <i>(with the pen down)</i> since the beginning of the program, or since the 
most recent call 
to the
<b>clearPath </b>
method.&nbsp; I will explain the <b>clearPath</b> method below.</p>
<p><font color="#FF0000">
<b>The clearPath method</b></font></p>
<p>At any point during the execution of the program, the <b>clearPath</b> method 
shown in Listing 10 can be called to erase the historical movement data for a 
turtle.</p>
<p>
<b><a name="Listing_10">Listing 10</a>. The clearPath method of the Pen class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * Method to clear the path stored for this pen
   */
  public void clearPath()
  {
    pathSegmentList.clear();   }</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Recall that the container referred to by the reference variable named <b>
pathSegmentList</b> is an object of the class <b>ArrayList</b>.&nbsp; Calling 
the <b>clear</b> method on a reference to an <b>ArrayList</b> object, as is done 
in Listing 10, removes all of the elements from the list resulting in an empty 
list.</p>
<p><font color="#FF0000">
<b>The pen's paintComponent method</b></font></p>
<p>We learned in earlier lessons that there are several different situations in 
which the pen's <b>paintComponent</b> method may be called.&nbsp; In all cases, 
it is called to draw the line segments that represent a 
turtle's historical track on a specific graphics context of the type <b>Graphics2D</b>.&nbsp; When the pen's <b>paintComponent</b> method is called, it receives a reference to the specified 
graphics context as an incoming parameter of type <b>Graphics</b>.</p>
<p>The pen's <b>paintComponent</b> method is shown in its entirety in Listing 
11.</p>
<p>
<b><a name="Listing_11">Listing 11</a>. The pen's paintComponent method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * Method to paint the pen path
   * @param g the graphics context
   */
  public synchronized void paintComponent(Graphics g)
  {

    Color oldcolor = g.getColor();

    // loop through path segment list and
    Iterator iterator = pathSegmentList.iterator();
    PathSegment pathSeg = null;

    // loop through path segments
    while (iterator.hasNext())
    {
      pathSeg = (PathSegment) iterator.next();
      pathSeg.paintComponent(g);
    }

    g.setColor(oldcolor);
  }

} // end of class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Straightforward code</b></font></p>
<p>Once again, the code in Listing 11 is relatively straightforward.&nbsp; The 
method begins by saving the value of the <b>color</b> property belonging to the 
incoming graphics context.&nbsp; <i>(The value of the <b>color</b> property is 
restored immediately before the method terminates.)</i></p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>An Iterator object</b><br />
  I have discussed the use of an Iterator object in numerous earlier lessons.&nbsp; 
	To find them, go to Google and search for the keywords&quot;<p>baldwin java 
	iterator
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Loop and draw segments</b></font></p>
<p>Then the code in Listing 11 uses an <b>Iterator</b> to loop through the <b>
pathSegmentList</b> calling the <b>paintComponent</b> method on each element in 
the list, passing the graphics context as a parameter to each call to the <b>
PathSegment</b> object's <b>paintComponent</b> method.</p>
<p><font color="#FF0000"><b>Call the paintComponent method on each PathSegment 
object</b></font></p>
<p>I explained the <b>paintComponent</b> method for the <b>PathSegment</b> class 
in conjunction with Listing 4 earlier.&nbsp; To make a long story short, each 
time the <b>paintComponent</b> method is called on a <b>PathSegment</b> object, 
the object displays itself by drawing a line segment with the correct color, the correct width, 
and the correct length at the correct location on the specified graphics context.</p>
<h3><a name="The_program_named_TurtleGoRound">The program named TurtleGoRound</a></h3>
<p>A complete listing of the program named <b>TurtleGoRound</b> is provided in Listing 18 near the end of 
the lesson.&nbsp; The screen output from the program is shown in Figure 2.</p>
<p>The purpose of this program is to illustrate the use of the <b>Turtle</b> class to draw a circle with a wide multi-colored pen.</p>
<p><font color="#FF0000">
<b>Beginning of the Main class and the main method</b></font></p>
<p>As usual, I will explain this program in fragments.&nbsp; The fragment in 
Listing 12 shows the beginning of the <b>Main</b> class and the <b>main</b> 
method.</p>
<p>
<b><a name="Listing_12">Listing 12</a>. Beginning of the Main class and the main 
method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.*;
public class Main{
  public static void main(String[] args){
    int width = 200;
    int height = 200;
    
    //Create a new World object
    World mars = new World(width,height);
    //Put a turtle in the center of the world
    Turtle joe = new Turtle(mars);
    
    //Place turtle in starting position and set turtle
    // properties
    joe.setVisible(false);//make turtle invisible
    joe.setPenDown(false);//pick up the pen
    joe.moveTo(width,height/2);//move turtle to right edge
    joe.setPenDown(true);//drop the pen
    joe.setPenWidth(5);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in Listing 12 should be familiar to you by now.&nbsp; Note how the 
turtle's <b>penDown</b> property is used to prevent the turtle from leaving a 
track as it moves from the center of the world in Figure 2 to a location at the 
center of the right edge of the world.&nbsp; Also note the use of the turtle's
<b>visible</b> property to make the turtle invisible.&nbsp; Finally, note the 
use of the turtle's <b>penWidth</b> property to cause the turtle to leave a 
track that is five pixels wide.</p>
<p><font color="#FF0000">
<b>Declare and initialize working variables</b></font></p>
<p>Listing 13 declares and initializes several working variables.</p>
<p>
<b><a name="Listing_13">Listing 13</a>. Declare and initialize working 
variables. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    //Declare and initialize working variables
    double angRad = 0;//angle in radians
    int x = 0;//current x-coordinate
    int y = 0;//current y-coordinate

    //Initial color component values for pen color
    int red = 255;
    int green = 0;
    int blue = 255;

    //Set the initial pen color
    joe.setPenColor(new Color(red,green,blue));</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 13 also sets the initial value for the turtle's <b>penColor</b> 
property to a color that is commonly referred to as <i>magenta</i>.</p>
<p><font color="#FF0000">
<b>Move the turtle in a circle</b></font></p>
<p>Listing 14 causes the turtle to move in a circle, changing the color of the 
pen during each step along the way.</p>
<p>
<b><a name="Listing_14">Listing 14</a>. Move the turtle in a circle. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    //Make turtle move in a circle changing the pen color
    // along the way.
    for(int ang = 0;ang &lt; 361;ang += 1){
      angRad = Math.toRadians(ang);
      x = width/2 + (int)(Math.cos(angRad)*width/2);
      y = height/2 + (int)(Math.sin(angRad)*height/2);

      //Modify the green and blue color components
      green = (int)(ang*255/360.0);//increase
      blue = 255 - (int)(ang*255/360.0);//decrease
      joe.setPenColor(new Color(red,green,blue));

      joe.moveTo(x,y);
    }//end for loop

  }//end main

}//end class Main</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Move incrementally along a circular path</b></font></p>
<p>The invisible turtle is initially positioned at the center-right of the world 
shown in Figure 2.&nbsp; It moves clockwise in one-degree increments around a 
circular path centered on the center of the world, making one round trip and 
then stopping.</p>
<p><font color="#FF0000"><b>Change pen color during each incremental step</b></font></p>
<p>Each time the turtle moves one increment, the value of the pen's green color 
component, <i>(which begins with a value of zero)</i>, is increased.&nbsp; The 
incremental increases are such as to cause the value of the green color 
component to be at its maximum <i>(255)</i> when the turtle has completed one 
round-trip around the circular path.</p>
<p>Similarly, value of the pen's blue color component is decreased by an 
incremental amount each time the turtle moves one increment.&nbsp; The 
incremental decreases are such as to cause the value of the blue component to be 
slowly reduced from the maximum <i>(255)</i> at the start to zero when the 
turtle has completed one round-trip around the circular path.</p>
<p>The value of the red color component remains at the maximum <i>(255)</i> 
throughout the trip.&nbsp; The result is that the pen's color is magenta at the 
start of the trip and is yellow at the end of the trip.</p>
<p>Listing 14 also signals the end of the <b>Main</b> class and the <b>main</b> 
method.</p>
<center>
<h2><a name="Run the program"></a>Run the programs</h2>
</center>
<p>I encourage you to copy the code from Listing 17 and Listing 18, compile 
the code, and execute it.&nbsp; Experiment with the code, making changes, and 
observing the results of your changes.&nbsp; Make certain that you can explain why 
your changes behave as they do. </p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>I explained the <b>Pen</b> class in this lesson.&nbsp; I also explained a class 
named <b>PathSegment</b> that is used by the <b>Pen</b> class to construct and 
maintain historical turtle-movement data.&nbsp; Along the way, I explained some of the capabilities of the Java 2D API.&nbsp; Finally, I 
presented and explained a sample program that illustrates the use of the <b>
Turtle</b> class to draw a multi-colored circle using a stroke that is five 
pixels wide.</p>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>In the next lesson, you will learn about color distance, projecting 3D coordinates onto a 2D display plane, 
and edge detection; all are concepts that will help you to better understand 
modern image processing.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a href="http://coweb.cc.gatech.edu/mediaComp-plan/101">Media 
	Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a href="http://drjava.sourceforge.net/">DrJava</a> download site</li>
	<li><a href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, the JavaPLT 
	group at Rice University</a></li>
	<li><a href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava Open Source 
	License</a></li>
	<li><a href="http://www.developer.com/java/article.php/1440571">The Essence 
	of OOP using Java, The this and super Keywords</a></li>
	<li><font color="#000000">
	<a href="http://www.dickbaldwin.com/java/Java058.htm">Threads of Control</a></font></li>
	<li><a href="http://java.sun.com/products/jfc/tsc/articles/painting/">
Painting in AWT and Swing</a></li>
	<li><a href="http://en.wikipedia.org/wiki/Turtle_graphics/">Wikipedia Turtle 
	Graphics</a></li>
	<li><a href="http://www.devx.com/tips/Tip/5809">IsA or HasA</a></li>
	<li><a href="http://www.vectorcad3d.com/support/lathetutorial.htm">Vector 
	Cad-Cam XI Lathe Tutorial</a></li>
	<li><a href="http://www.dickbaldwin.com/java/Java200.htm">200000</a> 
	Implementing the Model-View-Controller Paradigm using Observer and 
	Observable&nbsp; </li>
	<li><a href="http://www.dickbaldwin.com/java/Java300.htm">300</a> Java 2D 
	Graphics, Nested Top-Level Classes and Interfaces</li>
	<li><a href="http://www.dickbaldwin.com/java/Java302.htm">302</a> Java 2D 
	Graphics, The Point2D Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java304.htm">304</a> Java 2D 
	Graphics, The Graphics2D Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java306.htm">306</a> Java 2D 
	Graphics, Simple Affine Transforms</li>
	<li><a href="http://www.dickbaldwin.com/java/Java308.htm">308</a> Java 2D 
	Graphics, The Shape Interface, Part 1</li>
	<li><a href="http://www.dickbaldwin.com/java/Java310.htm">310</a> Java 2D 
	Graphics, The Shape Interface, Part 2</li>
	<li><a href="http://www.dickbaldwin.com/java/Java312.htm">312</a> Java 2D 
	Graphics, Solid Color Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java314.htm">314</a> Java 2D 
	Graphics, Gradient Color Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java316.htm">316</a> Java 2D 
	Graphics, Texture Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java318.htm">318</a> Java 2D 
	Graphics, The Stroke Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java320.htm">320</a> Java 2D 
	Graphics, The Composite Interface and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java322.htm">322</a> Java 2D 
	Graphics, The Composite Interface, GradientPaint, and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java324.htm">324</a> Java 2D 
	Graphics, The Color Constructors and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java506.htm">506</a> JavaBeans, 
	Introspection</li>
	<li><a href="http://www.developer.com/java/other/article.php/2114451">2100</a> 
	Understanding Properties in Java and C#</li>
	<li><a href="http://www.developer.com/java/other/article.php/3495121">2300</a> 
	Generics in J2SE, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3782471">
	340</a> Multimedia Programming with Java, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3788086">
	342</a> Getting Started with the Turtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3791291">
	344</a> Continuing with the SimpleTurtle Class: Multimedia Programming with 
	Java</li>
	<li><a href="http://www.developer.com/java/other/article.php/3793401">346</a> Wrapping Up the SimpleTurtle 
	Class:&nbsp; Multimedia Programming with Java</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the programs discussed in this lesson are shown in Listing 
15 through Listing 18 below.
<p>
<b><a name="Listing_15">Listing 15</a>. Source code for the Pen class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.*;
import java.awt.geom.*;import javax.swing.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

/***
 * Class to represent a pen which has a color, width,
 * and a list of path segments that it should draw.
 * A pen also knows if it is up or down
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class Pen
{
  ////////////////// fields //////////////////////

  /** track if up or down */
  private boolean penDown = true;

  /** color of ink */
  private Color color = Color.green;

  /** width of stroke */
  private int width = 1;

  /** list of path segment objects to draw */
  private List&lt;PathSegment&gt; pathSegmentList =
    new ArrayList&lt;PathSegment&gt;();

  //////////////// constructors ///////////////////

  /**
   * Constructor that takes no arguments
   */
  public Pen() { }

  /**
   * Constructor that takes all the ink color, and width
   * @param color the ink color
   * @param width the width in pixels
   */
  public Pen(Color color, int width)
  {
    this.color = color;
    this.width = width;
  }

  /**
   * Constructor that takes the ink color, width, and
   * penDown flag
   * @param color the ink color
   * @param width the width in pixels
   * @param penDown the flag if the pen is down
   */
  public Pen(Color color, int width, boolean penDown)
  {
    // use the other constructor to set these
    this(color,width);

    // set the pen down flag
    this.penDown = penDown;
  }

  ////////////////// methods ///////////////////////

  /**
   * Method to get pen down status
   * @return true if the pen is down else false
   */
  public boolean isPenDown() { return penDown; }

  /**
   * Method to set the pen down value
   * @param value the new value to use
   */
  public void setPenDown(boolean value){
    penDown = value;
  }

  /**
   * Method to get the pen (ink) color
   * @return the ink color
   */
  public Color getColor() { return color; }

  /**
   * Method to set the pen (ink) color
   * @param color the color to use
   */
  public void setColor(Color color) { this.color = color;}

  /**
   * Method to get the width of the pen
   * @return the width in pixels
   */
  public int getWidth() { return width; }

  /**
   * Method to set the width of the pen
   * @param width the width to use in pixels
   */
  public void setWidth(int width) { this.width = width; }

  /**
   * Method to add a path segment if the pen is down
   * @param x1 the first x
   * @param y1 the first y
   * @param x2 the second x
   * @param y2 the second y
   */
  public synchronized void addMove(
                           int x1, int y1, int x2, int y2)
  {
    if (penDown)
    {
      PathSegment pathSeg =
        new PathSegment(this.color,this.width,
                        new Line2D.Float(x1,y1,x2,y2));
      pathSegmentList.add(pathSeg);
    }
  }

  /**
   * Method to clear the path stored for this pen
   */
  public void clearPath()
  {
    pathSegmentList.clear();
  }

  /**
   * Method to paint the pen path
   * @param g the graphics context
   */
  public synchronized void paintComponent(Graphics g)
  {

    Color oldcolor = g.getColor();

    // loop through path segment list and
    Iterator iterator = pathSegmentList.iterator();
    PathSegment pathSeg = null;

    // loop through path segments
    while (iterator.hasNext())
    {
      pathSeg = (PathSegment) iterator.next();
      pathSeg.paintComponent(g);
    }

    g.setColor(oldcolor);
  }

} // end of class
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_16">Listing 16</a>. Source code for the PathSegment class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.*;
import java.awt.geom.*;

/**
 * This class represents a displayable path segment
 * it has a color, width, and a Line2D object
 * Copyright Georgia Institute of Technology 2005
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class PathSegment
{
  //////////////// fields /////////////////////
  private Color color;
  private int width;
  private Line2D.Float line;

  //////////////// constructors ///////////////

  /**
   * Constructor that takes the color, width,
   * and line
   */
  public PathSegment (Color theColor, int theWidth,
                      Line2D.Float theLine)
  {
    this.color = theColor;
    this.width = theWidth;
    this.line = theLine;
  }

  //////////////// methods ////////////////////

  /**
   * Method to paint this path segment
   * @param g the graphics context
   */
  public void paintComponent(Graphics g)
  {
    Graphics2D g2 = (Graphics2D) g;
    BasicStroke penStroke = new BasicStroke(this.width);
    g2.setStroke(penStroke);
    g2.setColor(this.color);
    g2.draw(this.line);
  }

} // end of class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_17">Listing 17</a>. Source code for the program named Java346a. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Java346a
 * The purpose of this program is to illustrate the use
 * of property setter and getter methods of the
 * SimpleTurtle class.
 *
 * Draws two turtles in a World and sets property values
 * on each of them.
 */
import java.awt.Color;
public class Main{
  public static void main(String[] args){
    World mars = new World(400,500);
    Turtle joe = new Turtle(mars);
    joe.setShellColor(Color.RED);
    joe.setPenColor(Color.BLUE);
    joe.setPenWidth(2);
    joe.forward(90);
    joe.turn(-30);
    joe.forward();
    
    Turtle bill = new Turtle(mars);
    bill.moveTo(bill.getXPos()-100,bill.getYPos()+100);
    bill.setName("Bill");
    bill.setShowInfo(true);
    bill.setInfoColor(Color.RED);
    bill.setWidth(bill.getWidth() * 2);
    bill.setHeight(bill.getHeight() * 2);
  }//end main

}//end class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>

<p>&nbsp;</p>
<p>
<b><a name="Listing_18">Listing 18</a>. Source code for the program named TurtleGoRound. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*********************************************************
TurtleGoRound
 The purpose of this program is to illustrate the use
 of the Turtle class to draw a circle with a wide multi-
 colored pen.

 Copyright R.G.Baldwin 2009
*********************************************************/
import java.awt.*;
public class Main{
  public static void main(String[] args){
    int width = 200;
    int height = 200;
    World mars = new World(width,height);
    //Put a turtle in the center of the world
    Turtle joe = new Turtle(mars);
    joe.setVisible(false);//make turtle invisible
    joe.setPenDown(false);//pick up the pen
    joe.moveTo(width,height/2);//move turtle to right edge
    joe.setPenDown(true);//drop the pen
    joe.setPenWidth(5);

    //Declare and initialize working variables
    double angRad = 0;
    int x = 0;
    int y = 0;
    int red = 255;
    int green = 0;
    int blue = 255;
    joe.setPenColor(new Color(red,green,blue));

    //Make turtle move in a circle changing the pen color
    // along the way.
    for(int ang = 0;ang &lt; 361;ang += 1){
      angRad = Math.toRadians(ang);
      x = width/2 + (int)(Math.cos(angRad)*width/2);
      y = height/2 + (int)(Math.sin(angRad)*height/2);
      //Modify the green and blue color components
      green = (int)(ang*255/360.0);//increase
      blue = 255 - (int)(ang*255/360.0);//decrease
      joe.setPenColor(new Color(red,green,blue));
      joe.moveTo(x,y);
    }//end for loop

  }//end main

}//end class Main</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2009, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
