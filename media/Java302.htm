<html>

<head>
<meta name=Generator content="Microsoft Office HTML Filter 2.0">
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=Originator content="Microsoft Word 9">
<title>... in Java by Richard G Baldwin</title>
<style>
<!--
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{
	margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0in;
	margin-left:0in;
	font-size:18.0pt;
	font-family:"Times New Roman";
	font-weight:bold;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=author content="richard g. baldwin">
</head>

<body lang=EN-US link=blue vlink=blue>
<!--start-->

<div class=Section1>

<p>February 9, 2000</p>

<h2><!--title-->Java 2D Graphics, The Point2D Class<!--endtitle--></h2>

<p>Java Programming, Lecture Notes # 302</p>

<p><i>by Richard G. Baldwin<br>
baldwin@austin.cc.tx.us </i></p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><a
     href="#_Introduction">Introduction</a></li>
 <li class=MsoNormal><a
     href="#_What_is_a">What is a Point?</a></li>
 <li class=MsoNormal><a
     href="#_Nested_Top-Level_Classes">Nested Top-Level Classes</a></li>
 <li class=MsoNormal><a
     href="#_What_About_the">What About the Point Class?</a></li>
 <li class=MsoNormal><a
     href="#_Methods_of_the">Methods of the Point2D Class</a></li>
 <li class=MsoNormal><a
     href="#_Methods_of_the_1">Methods of the Nested Subclasses</a></li>
 <li class=MsoNormal><a
     href="#_Methods_of_the_2">Methods of the Point Class</a></li>
 <li class=MsoNormal><a
     href="#_Sample_Program">Sample Program</a></li>
 <li class=MsoNormal><a
     href="#_Complete_Program_Listing">Complete Program Listing</a></li>
</ul>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=3 width="100%" align=center>

</div>


<h2 align=center style='text-align:center'><a name="_Introduction"></a><span
style='color:red'>Introduction</span></h2>

<p>This lesson is primarily concerned with the use of the <b>java.awt.geom.Point2D</b>
class.&nbsp; It also illustrates the use of <i>nested top-level classes</i> in
the Java 2D Graphics API.&nbsp; This is a concept that was explained in an
earlier tutorial lesson.&nbsp; If you aren&#8217;t familiar with this concept, you
should review the earlier tutorial that explains it. </p>

<h2 align=center style='text-align:center'><a name="_What_is_a"></a><span
style='color:red'>What is a Point?</span></h2>

<p>The concept of a <i>point</i> is central to most graphics models.&nbsp; A
point is a specification of a particular location in space.&nbsp; It has
neither height, nor width, nor depth.&nbsp; Therefore, it cannot be rendered on
your computer screen, although it might be possible to render a <i>pixel</i> on
your screen that occupies a space generally specified by the point.</p>

<p>Although points can exist in three-dimensional space, that is not our
interest in the current series of lessons.&nbsp; This series of lessons in
concerned with the Java 2D (two-dimensional) API.&nbsp; Hence, a point in our
2D space represents a location in that space commonly specified by a pair of
coordinate values, horizontal (x) and vertical (y).</p>

<p>You may already be familiar with the notion of performing graphic operations
in Cartesian coordinates.&nbsp; This is similar, except in Cartesian
coordinates, the positive direction of y-displacement is normally up, while in
our current frame of reference, the direction of positive y-displacement is
down.&nbsp; As in typical Cartesian coordinates, the direction of positive
x-displacement is to the right.</p>

<p>So, an object of the <b>java.awt.geom.Point2D</b> class encapsulates a pair
of coordinate values that specify a location in our coordinate system.&nbsp;
Many of the graphic objects that we will encounter later as we continue to pursue
the Java 2D Graphics API are constructed on a foundation of points.&nbsp; For
example, four points could be used to specify the corners of a rectangle, and
three points could be used to specify the apexes of a triangle.&nbsp; A large
number of points could be used to specify a curved line made up of many short
straight-line segments.</p>

<h2 align=center style='text-align:center'><a name="_Nested_Top-Level_Classes"></a><span
style='color:red'>Nested Top-Level Classes</span></h2>

<p>The <b>Point2D</b> class demonstrates the use of <i>nested top-level classes</i>,
which is an inheritance concept used throughout the 2D API.&nbsp; This is a
concept where one or more subclasses are defined as <i>static</i> classes
inside their superclass.&nbsp; The details of this concept were presented in an
earlier tutorial lesson.</p>

<p>While an object of the <b>Point2D</b> class encapsulates the coordinates of
a location in space, that class alone doesn&#8217;t specify how the coordinate values
are stored.&nbsp; Rather, two nested subclasses named <b>Point2D.Double</b> and
<b>Point2D.Float</b> are used to actually store the coordinate
information.&nbsp; An object of the first subclass stores the coordinate
information as type <b>double</b> while an object of the second subclass stores
the coordinate information as type <b>float</b>.&nbsp; Apparently, however, it
is usually satisfactory to treat those objects as type <b>Point2D</b>, because
many of the standard methods that use an object of the type <b>Point2D</b> will
determine the actual subclass type and then behave accordingly.</p>

<h2 align=center style='text-align:center'><a name="_What_About_the"></a><span
style='color:red'>What About the Point Class?</span></h2>

<p>The Java 2D API became available with the release of JDK 1.2.&nbsp; Prior to
that time, the Java AWT included a class named <b>Point</b> that could also be
used to specify the coordinates of a location in space.&nbsp; Objects of the <b>Point</b>
class have, since the beginning, specified the coordinate values as type <b>int</b>,
and that is still the case.&nbsp; With the release of the 2D API, the <b>Point</b>
class now extends the <b>Point2D</b> class.&nbsp; However, <b>Point</b> is not
a nested subclass of <b>Point2D</b>.&nbsp; It is simply a subclass of <b>Point2D</b>.</p>

<h2 align=center style='text-align:center'><a name="_Methods_of_the"></a><span
style='color:red'>Methods of the Point2D Class</span></h2>

<p>The <b>Point2D</b> class provides several methods that are inherited by its
subclasses, and can be used to operate on objects instantiated from those
subclasses.&nbsp; Most of the methods have several overloaded versions.&nbsp;
Generally the methods provide the following capabilities:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Create
     a new object of the same class and with the same contents as an existing
     point object.</li>
 <li class=MsoNormal>Determine
     the distance between two points.</li>
 <li class=MsoNormal>Determine
     the square of the distance between two points.</li>
 <li class=MsoNormal>Determine
     whether or not two points are equal.</li>
 <li class=MsoNormal>Get
     the x and y coordinate values of a point.</li>
 <li class=MsoNormal>Set
     the x and y coordinate values of a point.</li>
 <li class=MsoNormal>Get
     the hashcode value for a point.</li>
</ul>

<p>The sample program that I will present later will make use of some of these
capabilities.</p>

<h2 align=center style='text-align:center'><a name="_Methods_of_the_1"></a><span
style='color:red'>Methods of the Nested Subclasses</span></h2>

<p>The two nested subclasses provide (apparently overridden versions of) the <b>set</b>
and <b>get</b> methods for setting and getting the coordinate values as the
appropriate type.&nbsp; The <b>Point2D.Float</b> class provides <b>set</b>
methods for input parameters of either type <b>double</b> or type <b>float</b>.&nbsp;
Presumably if the coordinate values are provided as type <b>double</b>, they
are converted to type <b>float</b> and saved as that type.</p>

<p>Curiously, the <b>get</b> methods of the <b>Point2D.Float</b> class do not
provide an overridden version to return coordinate values of type <b>float</b>.&nbsp;
Rather, they return the coordinate values as type <b>double</b> even if this
means returning inaccurate <b>double</b> results.&nbsp; This is illustrated in
the sample program that I will present later.</p>

<p>Both of the nested subclasses provide an overridden <b>toString()</b> method
that returns a <b>String</b> that represents the type of object and the
coordinate values of the point.</p>

<h2 align=center style='text-align:center'><a name="_Methods_of_the_2"></a><span
style='color:red'>Methods of the Point Class</span></h2>

<p>The <b>Point</b> class provides methods to accomplish generally the same
behavior as described above for the new classes in the 2D API, although in some
cases the syntax is different.&nbsp; In addition, the <b>Point</b> class
provides methods to</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Move a
     point to a specified location in the (x, y) coordinate plane.</li>
 <li class=MsoNormal>Translates
     a point, at location (x, y), by dx along the x axis and dy along the
     y-axis so that it then represents the point (x + dx, y + dy).&nbsp;</li>
</ul>

<p>Since the <b>Point</b> class is not new to the Java 2D API, I probably won&#8217;t
have much to say about it in this series of lessons.&nbsp; The biggest
difference between the <b>Point</b> class, which has existed since JDK 1.0, and
the <b>Point2D</b> class that was released with JDK 1.2 is:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><b>Point</b>
     objects specify a location of a point in whole (<b>int</b>) units only.</li>
 <li class=MsoNormal><b>Point2D.Double</b>
     and <b>Point2D.Float</b> objects specify the location of a point using
     fractional values of either the <b>double</b> or <b>float</b> variety.</li>
</ul>

<p>The sample program presented later will illustrate the use of the nested
subclasses named <b>Point2D.Double</b> and <b>Point2D.Float</b>.</p>

<h2 align=center style='text-align:center'><a name="_Sample_Program"></a><span
style='color:red'>Sample Program</span></h2>

<p>This sample program, named <b>Point01.java</b> is designed to illustrate the
use of the two nested top-level classes that are contained in, and extend the
class named <b>Point2D</b>.&nbsp; I will break the program into fragments for
discussion.&nbsp; A complete listing of the program is provided at the end of
the lesson.</p>

<p>The first fragment (<a href="Java302-fig01.htm">Figure 1</a>) shows an <b>import</b>
directive to remind us that we are working with a class that belongs to the <b>java.awt.geom</b>
package.</p>

<p>This fragment also shows the beginning of the definition of the controlling
class named <b>Point01</b>.&nbsp; Two instance variables are declared, each of
type <b>Point2D</b>.&nbsp; Later, these instance variables will be used to
contain references to two objects, one of each of the nested subclass types.</p>

<h3><span style='color:red'>The main() method</span></h3>

<p><a href="Java302-fig02.htm">Figure 2</a> shows the beginning of the <b>main()</b>
method.&nbsp; This fragment also shows the instantiation of an object of the
controlling class, and the storage of a reference to this object in the local
reference variable named <b>thisObj</b>.&nbsp; This object contains the two
instance variables of type <b>Point2D</b> declared above, which can be used to
refer to objects of the nested subclass types.</p>

<h3><span style='color:red'>An object of the nested subclass Point2D.Double</span></h3>

<p><a href="Java302-fig03.htm">Figure 3</a> instantiates an object of the
nested subclass, <b>Point2D.Double</b> and stores a reference to that object in
an instance variable named <b>doublePointVar</b>, which is an instance variable
of the object of the controlling class (<b>thisObj</b>).&nbsp; Note that this
reference variable is not of the actual type of the object, but rather is of
the type of its superclass named <b>Point2D</b>.&nbsp; This is possible because
in Java, a reference to an object can be stored in a reference variable of the
actual class of the object, or of any superclass of the class of the object.</p>

<p>When the new object of the <b>Point2D.Double</b> class is instantiated, the
x and y coordinate values are initialized with the following values
respectively:</p>

<p>0.3333333333333333333333333333333333333333333333333333333...<br>
0.6666666666666666666666666666666666666666666666666666666...&nbsp;</p>

<p>At least these would be the values if we had infinite precision.&nbsp; In
reality, these values are stored in the object with the precision afforded by
the <b>double</b> type</p>

<h3><span style='color:red'>An object of the nested subclass Point2D.Float</span></h3>

<p>Similarly, <a href="Java302-fig04.htm">Figure 4</a> instantiates an object
of the <b>Point2D.Float</b> class, and stores its reference in a different
instance variable of the controlling class named <b>floatPointVar</b>.&nbsp; Again,
this variable is not of the actual type of the object, but rather is of the
superclass of the object, <b>Point2D</b>.&nbsp; </p>

<p>This is a common theme used throughout the Java 2D API.&nbsp; Objects are
frequently instantiated from a nested subclass type and the references to those
objects are stored in reference variables of the superclass type.</p>

<p>When this object is instantiated, its coordinate values are initialized with
the same values described above (never ending 3&#8217;s and 6&#8217;s) except that in this
case, the values are stored with precision afforded by the <b>float</b> type,
which is considerably less than the precision afforded by the <b>double</b>
type.</p>

<p>Note that a (<b>float</b>) cast is required to force the result of the
division to be of type <b>float</b> in order to satisfy the parameter type
requirements of the constructor for the <b>Point2D.float</b> class.</p>

<h3><span style='color:red'>Getting and displaying coordinate values</span></h3>

<p><a href="Java302-fig05.htm">Figure 5</a> applies the <b>getX()</b>, and <b>getY()</b>
methods to the two instance variables containing references to the two objects of
the nested-subclass types to get and display the coordinate values stored in
those objects.</p>

<p>The output produced by this code fragment follows:</p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>Data from the object of type Point2D.Double</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>0.3333333333333333</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>0.6666666666666666</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>&nbsp;</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>Data from the object of type Point2D.Float</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>0.3333333<span style='color:red'>432674408</span></span></b></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:Courier'>0.6666666<span
style='color:red'>865348816</span></span></b></p>

<p>As mentioned earlier, the <b>get</b> methods for the <b>Point2D.Float</b>
class return the stored coordinate information as type <b>double</b>.&nbsp;
However, as you can see, the returned values are not accurate beyond about the
seventh significant digit in this case (I have highlighted the erroneous values
in red).&nbsp; The <b>double</b> values returned by the <b>get</b> method for
the <b>Point2D.Double</b> class are accurate through about sixteen significant
digits.</p>

<p>This fragment also ends the <b>main()</b> method and ends the controlling
class.</p>

<h2 align=center style='text-align:center'><a name="_Complete_Program_Listing"></a><span
style='color:red'>Complete Program Listing</span></h2>

<p>A listing of the complete program is provided in <a href="Java302-fig06.htm">Figure
6</a></p>

<p><b><i>Richard Baldwin</i></b><i> is a college professor and private
consultant whose primary focus is a combination of Java and XML. In addition to
the many platform-independent benefits of Java applications, he believes that a
combination of Java and XML will become the primary driving force in the
delivery of structured information on the Web.</i></p>

<p><i>Richard has participated in numerous consulting projects involving Java,
XML, or a combination of the two.&nbsp; He frequently provides onsite Java
and/or XML training at the high-tech companies located in and around Austin,
Texas.&nbsp; He is the author of Baldwin's Java Programming <a
href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java Pro
magazine. </i></p>

<p><i>Richard holds an MSEE degree from Southern Methodist University and has
many years of experience in the application of computer technology to
real-world problems.</i></p>

<p><i>baldwin@austin.cc.tx.us</i></p>

<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;

<p>-end-<!--end--></p>

</div>

</body>

</html>
