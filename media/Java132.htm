<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>&nbsp;Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, The Button, Checkbox, Choice, and List Classes<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 132, Revised 01/05/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#the non-text input classes">The Non-Text Input Classes</a></li>

<li><a href="#button">Button</a></li>

<li><a href="#checkbox">Checkbox</a></li>

<ul><li><a href="#sample checkbox program">Sample Checkbox Program</a></li>

<li><a href="#interesting code fragments for checkbox program">Interesting
Code Fragments for Checkbox Program</a></li>

<li><a href="#program listing for checkbox program">Program Listing for Checkbox
Program</a></li></ul>

<li><a href="#choice">Choice</a></li>

<ul><li><a href="#sample program for choice">Sample Program for Choice</a></li>

<li><a href="#interesting code fragments for choice program">Interesting Code
Fragments for Choice Program</a></li>

<li><a href="#program listing for choice program">Program Listing for Choice
Program</a></li></ul>

<li><a href="#list">List</a></li>

<ul><li><a href="#sample program for list class">Sample Program for List Class</a></li>

<li><a href="#interesting code fragments for list class program">Interesting
Code Fragments for List Class Program</a></li>

<li><a href="#program listing of list class program">Program Listing of List
Class Program</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.

<p>This lesson, and the next several lessons will concentrate on the use
of the GUI components available in the JDK 1.1.x release. You should also
be aware that an entirely new set of <i>lightweight </i>GUI components,
known collectively as the <i>Swing</i> set, are in the pre-beta evaluation
stage at JavaSoft as of January 1998.

<p>It is rumored that JDK 1.2 (or perhaps 2.0) will be released in the
first or second quarter of 1998, and that the <i>Swing </i>components will
be part of that release.

<p>The <i>Swing</i> components are not intended to replace the AWT components
from JDK 1.1, but rather are intended to supplement those components with
a set of components that provide a consistent <i>look and feel</i> across
all platforms. In addition to providing a consistent look and feel, several
components (such as progress bars) are included in the <i>Swing</i> set
that are not included in the JDK 1.1 AWT.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This series of lessons is concentrating on package <b>java.awt </b>where
most of the functionality exists for providing the user interface to your
application or applet.

<p>We have learned how to handle events and we have learned how to use
the layout managers. These two topics form the basis for the design and
implementation of a Graphical User Interface.

<p>The next step is to take a look at the variety of components that are
available to combine with layout and event handling to produce an effective
Graphical User Interface.

<p>The available components are defined by classes in the package <b>java.awt</b>.
Our approach will be to group those classes into categories and study the
material on a category basis. A previous lesson discussed a set of classes
that we referred to as the Container Classes.

<p>As of this writing, it looks as if the remaining categories to be discussed
will be:
<ul><li>
The Non-Text Input Classes</li>

<li>
Text Input and Output Classes</li>

<li>
The Scrollbar Classes</li>

<li>
The Dialog Class</li>

<li>
The Canvas Class</li>

<li>
Menus</li>

<li>
Graphics - Shapes, Fonts, Images</li>

<li>
The PrintJob Class</li>

<li>
The Toolkit Class</li></ul>
As things develop, I may find it necessary to modify these groupings.

<p>This lesson will concentrate on the Non-Text Input classes.
<center><h2><a name="the non-text input classes"></a><font color="#ff0000">The Non-Text
Input Classes</font></h2></center>
The components in this group are generally used to allow the user to input
information to the program without the requirement to use the keys on the
keyboard. In some circumstances they could also be used to output information
to the user as well but that is not common practice.

<p>The first four of the following five classes extend the class <b>Component</b>.
<ul><li>
Button</li>

<li>
Checkbox</li>

<li>
Choice</li>

<li>
List</li>

<li>
CheckboxGroup</li></ul>
The class named <b>CheckboxGroup </b>does not extend <b>Component</b>,
but extends <b>Object </b>instead. As the name suggests, objects of this
class can be used to group <b>CheckBox </b>components so that they behave
in a mutually exclusive fashion.
<center><h2><a name="button"></a><font color="#ff0000">Button</font></h2></center>
We have been using <b>Button </b>objects since the beginning of the course.
However, we have never stopped to consider their attributes. We will take
a close look at the <b>Button </b>class now so that we will better understand
what we are doing when we use a <b>Button </b>object in the future.

<p>To begin with, the <b>Button </b>class extends <b>Component </b>which
causes it to have access to the many dozens of methods defined in the <b>Component
</b>class. To quote the JDK 1.1 documentation, the <b>Button </b>class
is
<table border bgcolor="#80ffff" ><tr><td>"A class that produces a labeled button component."</td></tr></table>
As of 3/12/97, the <b>Button </b>class has the following two public constructors:
<ul><li><b>Button</b>() -- Constructs a Button with no label.</li>

<li><b>Button</b>(String) -- Constructs a Button with the specified label.</li></ul>
We have typically used the second version of the constructor which accepts
a <b>String </b>object as the label for the button.

<p>The <b>Button </b>class has no fields or instance variables. As of 3/12/97,
it has ten methods including the following familiar methods which we have
used in previous lessons.
<ul><li><b>addActionListener</b>(ActionListener) -- Adds the specified action listener
to receive action events from this button.</li>

<li><b>getLabel</b>() -- Gets the label of the button.</li>

<li><b>removeActionListener</b>(ActionListener) -- Removes the specified action
listener so it no longer receives action events from this button.</li>

<li><b>setLabel</b>(String) -- Sets the button with the specified label.</li></ul>
In addition to these ten methods, it also inherits all the methods of the
<b>Component </b>class and the <b>Object </b>class.

<p><b>ActionListener </b>is one of the high-level or <i>semantic</i> events.
An action event is generated when we click on a <b>Button </b>object.

<p>We also learned during our studies of event handling in JDK 1.1 that
an object of the <b>Button </b>class can generate low-level events such
as mouse events, focus events, etc, because it inherits methods, such as
the following, from the <b>Component </b>class.
<ul><li><b>addComponentListener</b>(ComponentListener) -- Adds the specified component
listener to receive component events from this component.</li>

<li><b>addFocusListener</b>(FocusListener) -- Adds the specified focus listener
to receive focus events from this component.</li>

<li><b>addKeyListener</b>(KeyListener) -- Adds the specified key listener to
receive key events from this component.</li>

<li><b>addMouseListener</b>(MouseListener) -- Adds the specified mouse listener
to receive mouse events from this component.</li>

<li><b>addMouseMotionListener</b>(MouseMotionListener) -- Adds the specified
mouse motion listener to receive mouse motion events from this component.</li></ul>
In fact, <u>objects of all subclasses</u> of <b>Component </b>can generate
the low-level events in the above list.

<p>We have worked with many different sample programs containing <b>Button
</b>objects, so there isn't any need to write a program for the sole purpose
of studying the <b>Button </b>class. In addition, some of the later sample
programs in this lesson will make use of the <b>Button </b>class.
<center><h2><a name="checkbox"></a><font color="#ff0000">Checkbox</font></h2></center>
If you have ever worked much with Windows, you are probably familiar with
objects of the <b>Checkbox </b>class. However, we have not made much use
of objects of this class in our previous lessons.

<p>The <b>Checkbox </b>class extends the <b>Component </b>class, and implements
the <b>ItemSelectable </b>interface.

<p>According to the JDK 1.1 documentation, the <b>ItemSelectable </b>interface
is
<table border bgcolor="#80ffff" ><tr><td>"The interface for objects which contain a set of items for which zero
or more can be selected."</td></tr></table>
The <b>ItemSelectable </b>interface declares the following three methods,
meaning that they must be defined by the <b>Checkbox </b>class since it
implements the interface.
<ul><li>
public abstract Object[] <b>getSelectedObjects</b>() -- Returns the selected
items or null if no items are selected.</li>

<li>
public abstract void <b>addItemListener</b>(ItemListener l) -- Add a listener
to receive item events <u>when the state of an item changes</u>.</li>

<li>
public abstract void <b>removeItemListener</b>(ItemListener l) -- Removes
an item listener.</li></ul>
As of 3/12/97, the Checkbox class has no <i>fields</i>. It has the following
five <i>constructors</i>.
<ul><li><b>Checkbox</b>() -- Constructs a Checkbox with an empty label. The check
box starts in a false state and is not part of any check box group.</li>

<li><b>Checkbox</b>(String) -- Constructs a Checkbox with the specified label.
The check box starts in a false state and is not part of any check box
group.</li>

<li><b>Checkbox</b>(String, boolean) -- Constructs a Checkbox with the specified
label. The check box starts in the specified state and is not part of any
check box group.</li>

<li><b>Checkbox</b>(String, boolean, CheckboxGroup) -- Constructs a Checkbox
with the specified label, set to the specified state, and in the specified
check box group.</li>

<li><b>Checkbox</b>(String, CheckboxGroup, boolean) -- Constructs a Checkbox
with the specified label, set to the specified state, and in the specified
check box group.</li></ul>
The last two appear to be functionally the same except that the position
of two arguments is switched between the two.

<p>As of 3/12/97, the <b>Checkbox </b>class has about a dozen methods,
including the three listed above under the discussion of the <b>ItemSelectable
</b>interface. We will use methods from this class in a sample program
that follows later.

<p>Before getting to that sample program, we need to understand the class
named <b>CheckboxGroup</b>. According to the JDK 1.1 documentation,
<table border bgcolor="#80ffff" ><tr><td>"This class is used to create a multiple-exclusion scope for a set
of Checkbox buttons. For example, creating a set of Checkbox buttons with
the same CheckboxGroup object means that <u>only one</u> of those Checkbox
buttons will be allowed to be "on" at a time."</td></tr></table>
As of 3/12/97, this class had no <i>fields </i>and only one <i>constructor</i>:
<ul><li><b>CheckboxGroup</b>() -- Creates a new CheckboxGroup.</li></ul>
Although there were five methods, two were <i>deprecated</i> leaving the
following three:
<ul><li><b>getSelectedCheckbox</b>() -- Gets the current choice. Returns type Checkbox.</li>

<li><b>setSelectedCheckbox</b>(Checkbox) -- Sets the current choice to the
specified Checkbox.</li>

<li><b>toString</b>() -- Returns the String representation of this CheckboxGroup's
values.</li></ul>

<center><h3><a name="sample checkbox program"></a><font color="#ff0000">Sample Checkbox
Program</font></h3></center>
Programming <b>Checkbox </b>objects can be <u>simple</u>, or it can be
<u>complicated</u>, depending on your approach.

<p>The <u>simple</u> way to process <b>Checkbox </b>objects is to put the
mutually-exclusive <b>Checkbox </b>objects in a <b>CheckboxGroup</b>, <u>ignore</u>
all the events that are generated as the user selects individual <b>Checkbox
</b>objects, and then process a single <b>Action </b>event when the user
has made his choice and clicks an "OK" <b>Button </b>object. A very large
percentage of programs that are written to work in a Windows environment
are designed this way.

<p>The <u>complicated</u> way to process <b>Checkbox </b>objects is to
<u>respond</u> to the different kinds of events that are generated as the
user selects different <b>Checkbox </b>objects. Actually, responding to
the events is not complicated, because we can still use the <i>Source/Listener</i>
approach of instantiating <b>Listener </b>objects and registering them
on the <b>Checkbox </b>objects.

<p>The complicated part is implementing the logic needed to <u>make sense</u>
out of the user activity, particularly when the user may be prone to <u>change
his or her mind</u> regarding the selection and we need to deal with that
situation.

<p>In this lesson, we will discuss a sample program that does it the <u>simple</u>
way. We will let the user change her mind as many times as needed and click
as many checkboxes as required before finally making a decision and clicking
an OK Button object.

<p>The program places four <b>Checkbox </b>objects and a <b>Button </b>object
in a <b>Frame </b>object. The <b>Checkbox </b>objects are defined to be
in a <b>CheckBoxGroup </b>object when they are instantiated. They are labeled
<b>A</b>, <b>B</b>, <b>C</b>, and <b>D</b>.

<p>An <b>ActionListener </b>object is instantiated and registered on the
<b>Button </b>object.

<p>Because the <b>Checkbox </b>objects are in a group, <u>only one</u>
can be selected at any time.

<p>The action to deselect a previously-selected <b>Checkbox </b>object
when a different <b>Checkbox </b>object is selected is handled <u>automatically</u>
with no effort required by the programmer other than to put them in a <b>CheckboxGroup</b>.

<p>The <b>Button </b>object can be clicked at any time causing the overridden
<b>actionPerformed()</b> method in the <b>ActionListener </b>object to
determine and display the <u>identification</u> of the <b>Checkbox </b>object
that is <u>currently selected</u>.

<p>Both the unique component <u>name</u> assigned by the system and the
<u>label</u> assigned by the programmer are displayed, demonstrating that
you can use either form of identification in your programs.

<p>The following outputs were produced by clicking the <b>Button </b>object
while each one of the four <b>Checkbox </b>objects was selected.
<ul><li><b><tt>checkbox0 A</tt></b></li>


<p><b><tt>checkbox1 B</tt></b>

<p><b><tt>checkbox2 C</tt></b>

<p><b><tt>checkbox3 D</tt></b></ul>
A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h3><a name="interesting code fragments for checkbox program"></a><font color="#ff0000">Interesting
Code Fragments for Checkbox Program</font></h3></center>
The first step is to create a <b>CheckboxGroup </b>object which is later
used to group the four <b>Checkbox </b>objects into a single logical group.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;CheckboxGroup myCheckboxGroup = new CheckboxGroup();</pre></td></tr></table>
Then we create a <b>Button </b>object to serve as our "OK" button. We also
create an <b>ActionListener </b>object and register it on the <b>Button
</b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>Button myButton = new Button("OK");
myButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(myCheckboxGroup));</pre></td></tr></table>
The following code is typical of that used to instantiate the four <b>Checkbox
</b>objects as a part of the group named <b>myCheckBoxGroup </b>and add
them to the <b>Frame </b>object. We will skip the instantiation of the
<b>Frame </b>object, setting the layout manager, and adding the <b>Button
</b>object to the <b>Frame </b>because you have seen how to do that many
times already.
<table border bgcolor="#ffff80" ><tr><td><pre>myFrame.add(new Checkbox("A",true, <b>myCheckboxGroup</b>));</pre></td></tr></table>
The next code fragment is the overridden <b>actionPerformed()</b> method
in the <b>ActionListener </b>object that extracts the identification of
the currently selected <b>Checkbox </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aCheckBoxGroup.getSelectedCheckbox().getName()</b>+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " " +&nbsp;
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aCheckBoxGroup.getSelectedCheckbox().getLabel()</b>);
&nbsp; }//end actionPerformed()</pre></td></tr></table>
The <b>getSelectedCheckbox()</b> method is a member of the <b>CheckboxGroup
</b>class. This method returns an object of type <b>Checkbox</b>. The<b>
getLabel()</b> method is a member of the <b>Checkbox </b>class. The <b>getName()</b>
method is a member of the <b>Component </b>class, which is a superclass
of <b>Checkbox</b>.
<center><h3><a name="program listing for checkbox program"></a><font color="#ff0000">Program
Listing for Checkbox Program</font></h3></center>
A listing of the entire program with additional comments follows. See the
previous sections for a operational description of the program.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Checkbox01.java Copyright 1997, R.G.Baldwin

The following output was produced by clicking the Button&nbsp;
object while each of the four buttons was selected.

checkbox0 A
checkbox1 B
checkbox2 C
checkbox3 D

A windowClosing() event listener object is instantiated and&nbsp;
registered on the frame to terminate the program when the&nbsp;
frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
import java.util.*;
//=======================================================//
public class Checkbox01 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Checkbox01
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Create a CheckboxGroup object
&nbsp;&nbsp;&nbsp; CheckboxGroup myCheckboxGroup = new CheckboxGroup();

&nbsp;&nbsp;&nbsp; //Create a Button object and register an ActionListener
&nbsp;&nbsp;&nbsp; //&nbsp; object on it
&nbsp;&nbsp;&nbsp; Button myButton = new Button("OK");
&nbsp;&nbsp;&nbsp; myButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(myCheckboxGroup));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a Frame object to contain CheckBox objects and
&nbsp;&nbsp;&nbsp; // a Button object, set to FlowLayout, add the&nbsp;
&nbsp;&nbsp;&nbsp; // CheckBox and Button objects, set the size and make
&nbsp;&nbsp;&nbsp; // it visible.
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(new Checkbox("A",true, myCheckboxGroup));
&nbsp;&nbsp;&nbsp; myFrame.add(new Checkbox("B",false,myCheckboxGroup));
&nbsp;&nbsp;&nbsp; myFrame.add(new Checkbox("C",false,myCheckboxGroup));
&nbsp;&nbsp;&nbsp; myFrame.add(new Checkbox("D",false,myCheckboxGroup));
&nbsp;&nbsp;&nbsp; myFrame.add(myButton);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,100);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//Class to display which checkbox is selected at the time
// that the OK button is pressed.
class MyActionListener implements ActionListener{
&nbsp; CheckboxGroup aCheckBoxGroup;

&nbsp; MyActionListener(CheckboxGroup checkBoxGroupIn){
&nbsp;&nbsp;&nbsp; aCheckBoxGroup = checkBoxGroupIn;
&nbsp; }//end constructor&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aCheckBoxGroup.getSelectedCheckbox().getName()+
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aCheckBoxGroup.getSelectedCheckbox().getLabel());
&nbsp; }//end actionPerformed()

}//end MyActionListener
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
Next, we will investigate how to create components of the <b>Choice </b>class.
<center><h2><a name="choice"></a><font color="#ff0000">Choice</font></h2></center>
Like <b>Checkbox</b>, the <b>Choice </b>class extends the <b>Component
</b>class and implements the <b>ItemSelectable </b>interface. According
to the JDK 1.1 documentation:
<table border bgcolor="#80ffff" ><tr><td><tt>"The Choice class is a <b>pop-up menu</b> of choices. The current
choice is displayed as the title of the menu."</tt></td></tr></table>
Also, and very important for event handling, the <b>Choice </b>class provides
the following method:
<ul><li><b>addItemListener</b>(ItemListener) -- Adds the specified item listener
to receive item events from this choice.</li></ul>
This is the method that we will use for event handling in our sample program
for the <b>Choice </b>class. Note that some books indicate that the <b>Choice
</b>class supports the <b>addActionListener()</b> method, but that does
not seem to be the case for JDK 1.1.
<table border bgcolor="#80ffff" ><tr><td><b>Author's Comment:</b> In my opinion, the use of the terminology
<b>"pop-up menu"</b> in the description above is a poor choice of words.
I think of a pop-up menu as a menu that is normally invisible and becomes
visible in its entirety whenever the user takes some specific action (like
often happens when the user clicks the right mouse button on an object
in Win95). The <b>Choice </b>object is more like what other IDEs might
call a <i>list box</i> that operates like a <i>pull-down menu</i>. It may
or may not be visible at any given point in time, but when it is visible,
you must select it to cause it to pull down like a window shade and display
the list of choices that it contains. In any event, you can compile and
execute the program and decide what you think.</td></tr></table>
.As of 3/12.97, the <b>Choice </b>class has no <i>fields </i>and only one
public <i>constructor</i>:
<ul><li><b>Choice</b>() -- Constructs a new Choice.</li></ul>
Also as of 3/12/97, the <b>Choice </b>class has about twenty methods. Many
of these methods have to do with adding and/or removing items from the
menu and determining which choice has been selected by the user. We will
use some of the methods in a sample program later.

<p>A partial list of the methods of this class is reproduced below to illustrate
the various ways to add items to the list of choices and various ways to
deal with choices made by the user.
<ul><li><b>add</b>(String) Adds an item to this Choice.</li>

<li><b>addItem</b>(String) Adds an item to this Choice.</li>

<li><b>addItemListener</b>(ItemListener) Adds the specified item listener to
receive item events from this choice.</li>

<li><b>getItem</b>(int) Returns the String at the specified index in the Choice.</li>

<li><b>getItemCount</b>() Returns the number of items in this Choice.</li>

<li><b>getSelectedIndex</b>() Returns the index of the currently selected item.</li>

<li><b>getSelectedItem</b>() Returns a String representation of the current
choice.</li>

<li><b>getSelectedObjects</b>() Returns an array (length 1) containing the
currently selected item.</li>

<li><b>insert</b>(String, int) Inserts the item into this choice at the specified
position.</li>

<li><b>remove</b>(int) Removes an item from the choice menu.</li>

<li><b>remove</b>(String) Remove the first occurrence of item from the choice
menu.</li>

<li><b>removeAll</b>() Removes all items from the choice menu.</li>

<li><b>removeItemListener</b>(ItemListener) Removes the specified item listener
so that it no longer receives item events from this choice.</li>

<li><b>select</b>(int) Selects the item with the specified position.</li>

<li><b>select</b>(String) Selects the item with the specified String.</li></ul>
The use of the <b>Choice </b>object is illustrated in the following sample
program.
<center><h4><a name="sample program for choice"></a><font color="#ff0000">Sample Program
for Choice</font></h4></center>
This program is designed to be compiled and run under JDK 1.1

<p>The program places a <b>Choice </b>object in a <b>Frame </b>object.
Three <b>String </b>objects are added to the <b>Choice </b>object:
<ul><li>
"First Choice"</li>

<li>
"Second Choice"</li>

<li>
"Third Choice"</li></ul>
The <b>String </b>object "Second Choice" is selected for initial display
at program startup.

<p>An <b>ItemListener </b>object is instantiated and registered on the
<b>Choice </b>object. The purpose of the <b>ItemListener </b>object is
to identify and display the <b>String </b>object that is chosen whenever
the user makes a choice.

<p>Whenever the user selects a choice, an event is trapped in the overridden<b>
itemStateChanged()</b> method of the <b>ItemListener </b>object. Code in
the overridden method uses the <b>getSelectedItem()</b> method of the <b>Choice
</b>class to identify and <u>display</u> the <b>String </b>object chosen.

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h4><a name="interesting code fragments for choice program"></a><font color="#ff0000">Interesting
Code Fragments for Choice Program</font></h4></center>
The following code fragment is typical of that used to instantiate a <b>Choice
</b>object and add <b>String </b>objects to the <b>Choice</b> object.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Choice myChoice = new Choice();
&nbsp;&nbsp;&nbsp; myChoice.add("First Choice");
&nbsp;&nbsp;&nbsp; ...</pre></td></tr></table>
The following statement is used to cause the <b>String </b>object "Second
Choice" to be visible at startup.
<table border bgcolor="#ffff80" ><tr><td><pre>myChoice.select("Second Choice");</pre></td></tr></table>
The following statement is used to instantiate and register an <b>ItemListener
</b>object on the <b>Choice </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>myChoice.addItemListener(new MyItemListener(myChoice));</pre></td></tr></table>
This is followed by code to create a <b>Frame </b>object and place the
<b>Choice </b>object in the <b>Frame</b>, etc. By this point, you have
seen many instances of code of this type, so we will skip over it in this
discussion of interesting code fragments.

<p>The next interesting code fragment is the overridden <b>itemStateChanged()</b>
method in the <b>Itemlistener </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; public void itemStateChanged(ItemEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(aChoice.getSelectedItem());
&nbsp;&nbsp;&nbsp; }//end itemStateChanged()</pre></td></tr></table>
This event occurs whenever the user makes a choice (pulls down the menu
and clicks on an item). As you can see, the <b>getSelectedItem()</b> method
of the <b>Choice </b>class is used to obtain a <b>String </b>representation
of the item that was selected.
<center><h4><a name="program listing for choice program"></a><font color="#ff0000">Program
Listing for Choice Program</font></h4></center>
A complete program listing with additional comments follows. See the previous
sections for an operational description of the program.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Choice01.java Copyright 1997, R.G.Baldwin

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
import java.util.*;
//=======================================================//
public class Choice01 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Choice01
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a Choice object and place some String&nbsp;
&nbsp;&nbsp;&nbsp; // objects in it.
&nbsp;&nbsp;&nbsp; Choice myChoice = new Choice();
&nbsp;&nbsp;&nbsp; myChoice.add("First Choice");
&nbsp;&nbsp;&nbsp; myChoice.add("Second Choice");
&nbsp;&nbsp;&nbsp; myChoice.add("Third Choice");

&nbsp;&nbsp;&nbsp; //Select the "Second Choice" String object for display
&nbsp;&nbsp;&nbsp; // at startup.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myChoice.select("Second Choice");

&nbsp;&nbsp;&nbsp; //Instantiate and register an ItemListener object on&nbsp;
&nbsp;&nbsp;&nbsp; // the Choice object.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myChoice.addItemListener(new MyItemListener(myChoice));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Place the Choice object in a Frame object for display
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(myChoice);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

&nbsp; //Class to listen for ItemListener events on the Choice
&nbsp; // object
&nbsp; class MyItemListener implements ItemListener{
&nbsp;&nbsp;&nbsp; Choice aChoice;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyItemListener(Choice inChoice){//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aChoice = inChoice;//save a reference
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Override the itemStateChanged() method of the&nbsp;
&nbsp;&nbsp;&nbsp; // ItemListener interface.
&nbsp;&nbsp;&nbsp; public void itemStateChanged(ItemEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(aChoice.getSelectedItem());
&nbsp;&nbsp;&nbsp; }//end itemStateChanged()
&nbsp; }//end class MyItemListener
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
The next topic for consideration in this lesson is the <b>List </b>class.
<center><h2><a name="list"></a><font color="#ff0000">List</font></h2></center>
As with the two previous classes that we have discussed, the <b>List </b>class
extends the <b>Component </b>class and implements the <b>ItemSelectable
</b>interface.

<p>The <b>List </b>class is described in the documentation as:
<table border bgcolor="#80ffff" ><tr><td>"A scrolling list of text items."</td></tr></table>
The <b>List </b>class also supports the<b> addActionListener()</b> method
which is the method that we will use for our sample program on the <b>List
</b>class. An <b>ActionEvent </b>is generated when the user <u>double-clicks</u>
on an item in the list.

<p>As of 3/12/97, the <b>List </b>class has no <i>fields </i>and has the
following three public <i>constructors</i>:
<ul><li><b>List</b>() -- Creates a new scrolling list initialized with no visible
Lines or multiple selections.</li>

<li><b>List</b>(int) -- Creates a new scrolling list initialized with the specified
number of visible lines.</li>

<li><b>List</b>(int, boolean) -- Creates a new scrolling list initialized with
the specified number of visible lines and a boolean stating whether multiple
selections are allowed or not.</li></ul>
As of 3/12/97, the <b>List </b>class provided about fifty different methods,
primarily for use in manipulating the items in the list and for dealing
with the situation when the user selects one or more items from the list.
Some of those methods were marked <i>deprecated</i>. We will use a couple
of methods from the <b>List</b> class later in our sample program.

<p>The following is a partial list of methods in the class.
<ul><li><b>add</b>(String) -- Adds the specified item to the end of scrolling list.</li>

<li><b>add</b>(String, int) -- Adds the specified item to the scrolling list
at the specified position.</li>

<li><b>addActionListener</b>(ActionListener) -- Adds the specified action listener
to receive action events from this list.</li>

<li><b>addItem</b>(String) -- Adds the specified item to the end of scrolling
list.</li>

<li><b>addItem</b>(String, int) -- Adds the specified item to the scrolling
list at the specified position.</li></ul>
Note that there is no difference in the descriptions for <b>add(String)</b>
and <b>addItem(String)</b>. There is also no difference in the descriptions
for <b>add(String,int)</b> and <b>addItem(String,int)</b>. Even the longer
descriptions provided deeper in the documentation package makes no distinction
between these apparently duplicated methods.
<center><h4><a name="sample program for list class"></a><font color="#ff0000">Sample
Program for List Class</font></h4></center>
This program is designed to be compiled and run under JDK 1.1

<p>The program places a <b>List </b>object and a <b>Button </b>object in
a <b>Frame </b>object. Fifteen <b>String </b>objects are added to the <b>List
</b>object.

<p>The second <b>String </b>object in the list is initially selected by
the code in the program to illustrate that software selection of an item
in a <b>List </b>object is possible.

<p>An <b>ActionListener </b>object is instantiated and registered on the
<b>List </b>object. The purpose of the <b>ActionListener </b>object is
to identify and display the <b>String </b>object that is selected whenever
the user makes a choice by selecting and double-clicking an item in the
list.

<p>Whenever the user selects and then double-clicks an item in the list,
an event is trapped in the overridden <b>actionPerformed()</b> method of
the <b>ActionListener </b>object. Code in the overridden method uses the
<b>getSelectedItem()</b> method of the <b>List </b>class to identify and
display the <b>String </b>object chosen. However, if the user double-clicks
on an item while more than one item is selected, the <b>getSelectedItem()</b>
returns null and nothing is displayed by the event handler.

<p>A <b>Button </b>object is also added to the <b>Frame </b>object to service
the case of multiple selections in the <b>List </b>object. An <b>ActionListener
</b>object is registered on the <b>Button </b>object. Whenever the user
clicks the <b>Button </b>object, the <b>ActionListener </b>object traps
an <b>ActionEvent </b>object, identifies, and then displays the selected
items in the list, even if only one item is selected. If no items are selected
at that time, nothing is displayed.

<p>A typical series of output lines from this program might be as follows:
<pre><b><tt>Single Item Selection
&nbsp; List Item 1
Multiple Item Selection
&nbsp; List Item 1
Multiple Item Selection
&nbsp; List Item 1
&nbsp; List Item 3</tt></b></pre>
A windowClosing() event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h4><a name="interesting code fragments for list class program"></a><font color="#ff0000">Interesting
Code Fragments for List Class Program</font></h4></center>
The first interesting code fragment instantiates a <b>List </b>object and
places fifteen <b>String </b>objects in the list. Then the list is defined
to allow multiple selections. Finally, the second item in the list is initially
selected by the program code so that it will be selected upon program startup.
<table border bgcolor="#ffff80" ><tr><td><pre>List myList = new List();
for(int cnt = 0; cnt &lt; 15; cnt++)
&nbsp; myList.add("List Item " + cnt);
myList.setMultipleMode(true);//allow multiple selections
myList.select(1);//display item[1] on startup</pre></td></tr></table>
The next interesting code fragment instantiates and registers an <b>ActionListener
</b>object on the <b>List </b>object which will respond whenever the user
double-clicks on an item in the list.
<table border bgcolor="#ffff80" ><tr><td><pre>myList.addActionListener(new MyListActionListener(myList));</pre></td></tr></table>
After this, a <b>Button </b>object is instantiated, an <b>ActionListener
</b>object is instantiated and registered on the <b>Button </b>object,
and both the <b>List </b>object and the <b>Button </b>object are added
to a <b>Frame </b>object. However, we have seen code like this so often
that it no longer falls in the category of <i>Interesting Code Fragments
</i>and won't be discussed in this section.

<p>The next interesting code fragment occurs in the class named <b>MyListActionListener
</b>which is designed to respond whenever the user double-clicks on a selected
item in the <b>List </b>object. If the user double-clicks on a single selection
in the <b>List </b>object, the overridden <b>actionPerformed() </b>method
identifies and displays the selected item by using the <b>getSelectedItem()</b>
method of the <b>List </b>class. However, if the user double-clicks when
more than one item is selected, the <b>getSelectedItem()</b> method returns
null and the event is effectively ignored by this <b>ActionListener </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>public void actionPerformed(ActionEvent e){
&nbsp; if(aList.<b>getSelectedItem</b>() != null){
&nbsp;&nbsp;&nbsp; System.out.println("Single Item Selection");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("&nbsp; " + aList.<b>getSelectedItem</b>());
&nbsp; }//end-if
}//end actionPerformed()</pre></td></tr></table>
The next interesting code fragment occurs in an <b>ActionListener </b>class
designed to respond to a click on a <b>Button </b>object and display the
<u>one or more</u> items selected in the <b>List </b>object. In this case,
the <b>getSelectedItems()</b> method (note the plural "Items" in the name
of this method) of the <b>List </b>class is used to create a <b>String
</b>array containing all of the items that were selected when the user
clicked the <b>Button </b>object. Typical array processing is performed
in the overridden <b>actionPerformed()</b> method to either display all
the strings in the array, or to display nothing if the array is empty.
This latter case occurs if the user clicks the <b>Button </b>object when
no items are selected.
<table border bgcolor="#ffff80" ><tr><td><pre>public void actionPerformed(ActionEvent e){
&nbsp; String[] <b>tempString </b>= <b>aList.getSelectedItems()</b>;
&nbsp; if(tempString.length != 0){
&nbsp;&nbsp;&nbsp; System.out.println("Multiple Item Selection");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempString.length; cnt++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("&nbsp; " + <b>tempString[cnt]</b>);
&nbsp; }//end-if
}//end actionPerformed()</pre></td></tr></table>
See the next section for a complete listing of the program.
<center><h4><a name="program listing of list class program"></a><font color="#ff0000">Program
Listing of List Class Program</font></h4></center>
This section contains a complete listing of the program along with additional
comments. See the previous sections for an operational description of the
program.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File List01.java Copyright 1997, R.G.Baldwin

A windowClosing() event listener object is instantiated&nbsp;
and registered on the frame to terminate the program when
the frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class List01 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class List01
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a List object and place some String&nbsp;
&nbsp;&nbsp;&nbsp; // objects in it.
&nbsp;&nbsp;&nbsp; List myList = new List();
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; 15; cnt++)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myList.add("List Item " + cnt);

&nbsp;&nbsp;&nbsp; myList.setMultipleMode(true);//allow multiple selection
&nbsp;&nbsp;&nbsp; myList.select(1);//display item[1] on startup

&nbsp;&nbsp;&nbsp; //Instantiate and register an ActionListener object on
&nbsp;&nbsp;&nbsp; // the List object. Action event occurs when the user&nbsp;
&nbsp;&nbsp;&nbsp; // double-clicks on an item.
&nbsp;&nbsp;&nbsp; myList.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyListActionListener(myList));

&nbsp;&nbsp;&nbsp; //Instantiate a Button object to service multiple-item
&nbsp;&nbsp;&nbsp; // selections. Also instantiate and register an&nbsp;
&nbsp;&nbsp;&nbsp; // ActionListener object on the Button.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button myButton = new Button("Select Multiple Items");
&nbsp;&nbsp;&nbsp; myButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyButtonActionListener(myList));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Place the List object and the Button object in&nbsp;
&nbsp;&nbsp;&nbsp; // a Frame object.
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(myList);
&nbsp;&nbsp;&nbsp; myFrame.add(myButton);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

&nbsp; //Class to listen for ActionListener events on the List
&nbsp; // object&nbsp; Displays the item selected when the user&nbsp;
&nbsp; // double-clicks an item in the list when only one item
&nbsp; // is selected.&nbsp; If the user double-clicks on a multiple
&nbsp; // selection, an event occurs but the getSelectedItem()
&nbsp; // method of the List class returns null and nothing is
&nbsp; // displayed.
&nbsp; class MyListActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp; List aList;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyListActionListener(List inList){//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aList = inList;//save a reference to the List object
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Override the actionPerformed() method of the&nbsp;
&nbsp;&nbsp;&nbsp; // ActionListener interface.
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(aList.getSelectedItem() != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Single Item Selection");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("&nbsp; " + aList.getSelectedItem());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end-if
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class MyListActionListener
//=======================================================//

//Class to listen for ActionListener events on the Button
// object. Displays the items selected when the user&nbsp;
// clicks the Button object, even if only one item is&nbsp;
// selected. If no items are selected, nothing is&nbsp;
// displayed.
class MyButtonActionListener implements ActionListener{
&nbsp; List aList;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; MyButtonActionListener(List inList){//constructor
&nbsp;&nbsp;&nbsp; aList = inList;//save a reference to the List object
&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //Override the actionPerformed() method of the&nbsp;
&nbsp; // ActionListener interface.
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; String[] tempString = aList.getSelectedItems();
&nbsp;&nbsp;&nbsp; if(tempString.length != 0){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Multiple Item Selection");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempString.length; cnt++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("&nbsp; " + tempString[cnt]);
&nbsp;&nbsp;&nbsp; }//end-if
&nbsp; }//end actionPerformed()
}//end class MyListActionListener
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate</pre></td></tr></table>
.
<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Write a Java program that meets the following specifications.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File SampProg148.java Copyright 1997, R.G.Baldwin
From lesson 132

Without viewing the solution, write a Java program that
meets the following specifications.

When this program starts, a Frame appears with your name
in the banner at the top.&nbsp; There are four Checkbox objects
in the Frame, labeled A, B, C, and D.&nbsp; Only one of them
can be selected at any time.&nbsp; The Checkbox object labeled
B cannot be selected.&nbsp; An attempt to select it causes
the Checkbox object labeled A to be selected instead.

When you click on the close button on the Frame, the&nbsp;
program terminates and returns control to the operating
system.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
import java.util.*;
//=======================================================//
public class SampProg148 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg148
//=======================================================//

class GUI {
&nbsp; Checkbox checkboxA;
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Create CheckboxGroup object
&nbsp;&nbsp;&nbsp; CheckboxGroup checkBoxGroup1 = new CheckboxGroup();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create Checkbox objects and assign to group
&nbsp;&nbsp;&nbsp; checkboxA = new Checkbox("A",true, checkBoxGroup1);
&nbsp;&nbsp;&nbsp; Checkbox checkboxB = new Checkbox(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "B",false,checkBoxGroup1);
&nbsp;&nbsp;&nbsp; Checkbox checkboxC = new Checkbox(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "C",false,checkBoxGroup1);
&nbsp;&nbsp;&nbsp; Checkbox checkboxD = new Checkbox(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "D",false,checkBoxGroup1);

&nbsp;&nbsp;&nbsp; //This is an inner class for an ItemListener
&nbsp;&nbsp;&nbsp; class myItemListener implements ItemListener{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void itemStateChanged(ItemEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //When an attempt is made to select checkboxB
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // set the state of checkboxA to true.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getStateChange() == ItemEvent.SELECTED)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; checkboxA.setState(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end itemStateChanged
&nbsp;&nbsp;&nbsp; }//end class myItemListener
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; checkboxB.addItemListener(new myItemListener());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(checkboxA);
&nbsp;&nbsp;&nbsp; myFrame.add(checkboxB);
&nbsp;&nbsp;&nbsp; myFrame.add(checkboxC);
&nbsp;&nbsp;&nbsp; myFrame.add(checkboxD);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,100);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate</pre></td></tr></table>
Q - Write a Java program that meets the following specifications.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File SampProg149.java Copyright 1997, R.G.Baldwin
From lesson 132.

Without viewing the solution that follows, write a Java
program that meets the following specifications.

When the program starts running, a Frame appears on the
screen with your name in the banner at the top.

The Frame contains two Choice objects.&nbsp; Each Choice object
contains three items.&nbsp; There are no duplicate items.

When you make a selection in one Choice object, the
selected item disappears from that Choice object and&nbsp;
reappears in the other Choice object.

When you click the close button on the Frame, the program
terminates, returning control to the operating system.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
import java.util.*;
//=======================================================//
public class SampProg149 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg149
//=======================================================//

class GUI {
&nbsp; Choice myChoice1; //refs to two Choice objects
&nbsp; Choice myChoice2;
&nbsp;&nbsp;
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a Choice object and place some String&nbsp;
&nbsp;&nbsp;&nbsp; // objects in it.
&nbsp;&nbsp;&nbsp; myChoice1 = new Choice();
&nbsp;&nbsp;&nbsp; myChoice1.add("123");
&nbsp;&nbsp;&nbsp; myChoice1.add("456");
&nbsp;&nbsp;&nbsp; myChoice1.add("789");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myChoice2 = new Choice();
&nbsp;&nbsp;&nbsp; myChoice2.add("ABC");
&nbsp;&nbsp;&nbsp; myChoice2.add("DEF");
&nbsp;&nbsp;&nbsp; myChoice2.add("GHI");

&nbsp;&nbsp;&nbsp; //These are inner classes
&nbsp;&nbsp;&nbsp; class MyItemListener1 implements ItemListener{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void itemStateChanged(ItemEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String temp = myChoice1.getSelectedItem();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myChoice1.remove(temp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myChoice2.add(temp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end itemStateChanged()
&nbsp;&nbsp;&nbsp; }//end class MyItemListener1&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; class MyItemListener2 implements ItemListener{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void itemStateChanged(ItemEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String temp = myChoice2.getSelectedItem();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myChoice2.remove(temp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myChoice1.add(temp);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end itemStateChanged()
&nbsp;&nbsp;&nbsp; }//end class MyItemListener2&nbsp;

&nbsp;&nbsp;&nbsp; myChoice1.addItemListener(new MyItemListener1());
&nbsp;&nbsp;&nbsp; myChoice2.addItemListener(new MyItemListener2());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(myChoice1);
&nbsp;&nbsp;&nbsp; myFrame.add(myChoice2);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate</pre></td></tr></table>
Q - Write a Java program that meets the following specifications.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File SampProg150.java Copyright 1997, R.G.Baldwin
From lesson 132

Without viewing the following solution, write a Java
program that meets the following specifications.

The program starts with a Frame object containing a
List object displayed on the screen. The size of the
Frame is 250x150.&nbsp; The List object completely fills the
client area of the Frame object.

The List object contains about 15 items.&nbsp; Only one item
can be highlighted at any one time.

Whenever you cause an item to be highlighted, that
item is displayed on the screen.

When you click the close box on the Frame, the program
terminates and control returns to the operating system.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class SampProg150 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg150
//=======================================================//

class GUI {
&nbsp; List myList;//ref to List object
&nbsp;&nbsp;
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a List object and place some String&nbsp;
&nbsp;&nbsp;&nbsp; // objects in it.
&nbsp;&nbsp;&nbsp; myList = new List();
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; 15; cnt++)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myList.add("List Item " + cnt);

&nbsp;&nbsp;&nbsp; //This is an inner class
&nbsp;&nbsp;&nbsp; class MyListItemListener implements ItemListener{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void itemStateChanged(ItemEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(myList.getSelectedItem());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end itemStateChanged()
&nbsp;&nbsp;&nbsp; }//end class MyListItemListener

&nbsp;&nbsp;&nbsp; //Instantiate and register an ItemListener object on
&nbsp;&nbsp;&nbsp; // the List object.&nbsp;
&nbsp;&nbsp;&nbsp; myList.addItemListener(new MyListItemListener());

&nbsp;&nbsp;&nbsp; //Place the List object in a Frame object.
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.add(myList);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate</pre></td></tr></table>
-end-<!--end--></body></html>