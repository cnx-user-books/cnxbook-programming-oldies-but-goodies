<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MSOFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->RMI with Multiple Objects of Different Types Having Multiple Methods<!--endTitle--></H2>
<P>Java Programming, Lecture Notes 602, Revised 2/11/99. </P>

<UL>
<LI><A HREF="#Preface">Preface</A> </LI>
<LI><A HREF="#Introduction">Introduction</A> </LI>
<LI><A HREF="#Overview">Overview</A> </LI>
<LI><A HREF="#Sample_Program">Sample Program</A> </LI>
<LI><A HREF="#The_Batch_file">The Batch File</A> </LI>
<LI><A HREF="#The_Interface_File">The Interface Files</A> </LI>
<LI><A HREF="#The_Remote_Object_File">The Remote Object Files</A> </LI>
<LI><A HREF="#The_Server_Code_File">The Server Code File</A> </LI>
<LI><A HREF="#The_Client_Code_File">The Client Code File</A> </LI>
<LI><A HREF="#Program_Listing">Program Listings</A> </LI></UL>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Advanced Java Programming</B></U> classes at ACC will be responsible for knowing and understanding all of the material in this lesson beginning with the spring semester of 1999. </P>
<P>This lesson was originally written on October 10, 1998, using the JDK 1.1.6 download package (and sometimes the MS SDK). The purpose of this lesson is to illustrate RMI for the case of multiple remote objects of different types each of which has multiple methods. <BR>
&nbsp; <BR>
&nbsp; </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Introduction"></A>Introduction</H2>
</FONT><P>Previous lesson have given you an introduction to RMI.&nbsp; I am going to assume that you have read those lessons and skip most of the introductory and overview material. </P>
<P>Briefly, Java's Remote Method Invocation (RMI) makes it possible for code running in one Java Virtual Machine (JVM) to invoke methods in an object running in another JVM which may be on the same or a different computer. </P>
<P>The machine with the object whose methods are invoked remotely is the server, and the machine invoking the methods on the remote objects is the client. </P>
<P>After some preliminaries, the invocation of methods on the remote objects is essentially no different from the invocation of methods on local objects. </P>
<P>A previous lesson illustrated RMI by exposing two different remote objects of the same type, each of which exposed two different methods.&nbsp; This lesson upgrades the process by exposing two remote objects of different types, each of which exposes two methods. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Overview"></A>Overview</H2>
</FONT><P>The implementation of RMI for a minimal application in an earlier lesson required me to write and compile four source code files and to execute two different utility programs.&nbsp; In general, the minimum number of source code files consists of a server file, a client file, and two files for each type of object being exposed by the server.&nbsp; The two files required for each type of exposed object consist of an interface definition file and a class definition file. </P>
<P>Therefore, for the sample program in this lesson that exposes two different types of objects, six files are required.&nbsp; The six files are: </P>

<UL>
<LI>Two interface files that declare the signatures of the methods on the remote objects that can be invoked by the client. </LI>
<LI>Two files that define the classes for the remote objects on the server whose methods will be invoked by the client. </LI>
<LI>A file that serves as the server program. </LI>
<LI>A file that serves as the client program. </LI></UL>

<P>As before, the two utility programs are: </P>

<UL>
<B><LI>rmic.exe</B> - a program that produces stub and skeleton class files used by the client and the server. </LI>
<B><LI>rmiregistry.exe</B> - a program that creates and maintains a registry of objects on a server whose methods can be invoked remotely by clients. </LI></UL>

<P>This process produces a minimum of ten class files that must be installed on the client and the server.&nbsp; I will discuss those ten files briefly in the next section. </P>
<P>Once you work through the material in this lesson, you should be able to see patterns emerge that you can use to write RMI applications invoking any number of methods on any number of different types of exposed objects. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Sample_Program"></A>Sample Program</H2>
</FONT><P>The biggest challenge with a program of this sort is keeping track of which class files must be installed where.&nbsp; As in the previous lessons, I made the process semi-automatic by encapsulating the process in an MS-DOS batch file.&nbsp; If you are not running under Windows or NT, you will need to figure out how to produce an equivalent script file for the platform that you are running on. </P>
<P>The names of the six source files required by this application are listed below. </P>

<UL>
<B><LI>Rmi04RemoteIntfcA.java</B> - an interface </LI>
<B><LI>Rmi04RemoteIntfcB.java</B> - an interface </LI>
<B><LI>Rmi04RemoteObjA.java</B> - an object </LI>
<B><LI>Rmi04RemoteObjB.java</B> - an object </LI>
<B><LI>Rmi04Server.java</B> - the server </LI>
<B><LI>Rmi04Client.java</B> - the client </LI></UL>

<P>The ten class files produced by the process were: </P>

<UL>
<LI>Rmi04Server.class </LI>
<LI>Rmi04RemoteObjA.class </LI>
<LI>Rmi04RemoteIntfcA.class </LI>
<LI>Rmi04RemoteObjB.class </LI>
<LI>Rmi04RemoteIntfcB.class </LI>
<LI>Rmi04Client.class </LI>
<I><LI>Rmi04RemoteObjA_Stub.class</I> </LI>
<I><LI>Rmi04RemoteObjA_Skel.class</I> </LI>
<I><LI>Rmi04RemoteObjB_Stub.class</I> </LI>
<I><LI>Rmi04RemoteObjB_Skel.class</I> </LI></UL>

<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="The_Batch_file"></A>The Batch file</H2>
</FONT><P>The name of the batch file is <B>Rmi04.bat</B>.&nbsp; A complete listing of the file is provided near the end of this lesson.&nbsp; Because of the greater number of class files involved, a number of changes to the batch file were required in order to install those files in the correct folder.&nbsp; Most of that should be pretty obvious. </P>
<P>However, it may not be obvious that the <B>rmic.exe</B> program must be executed twice in this case, once for each different type of remote object being exposed.&nbsp; Each time this program is executed, it creates two new class files of the <I>stub</I> and <I>skeleton</I> variety.&nbsp; I have highlighted those files using Italics in the above list of class files. </P>
<P>The lines in the batch file that accomplish this are shown below. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>rmic Rmi04RemoteObjA
rmic Rmi04RemoteObjB</PRE></TD>
</TR>
</TABLE>

<P>I'm not going to go over all the changes in the batch file in detail.&nbsp; You can probably figure out what changes were required by taking a look at it.&nbsp; If that doesn't do it, compare it in detail with the batch file in an earlier lesson and highlight the differences.&nbsp; The important thing is for you to be able to produce a similar batch file for any number of objects of different types being exposed. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="The_Interface_File"></A>The Interface Files</H2>
</FONT><P>Since this program exposes two different types of objects, it needs two different interface files to declare the methods that can be remotely invoked for each type of exposed object. </P>
<P>Except for the fact that there are now two different interface files with different names, there is nothing significantly different between these two files and the single interface file used in the earlier lesson.&nbsp; Therefore, I won't bother to show them here. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="The_Remote_Object_File"></A>The Remote Object Files</H2>
</FONT><P>Because this program exposes two different types of objects, it needs a class definition for each type of object being exposed. </P>
<P>Again, except for the fact that there are two of them, and they have different names, there is nothing significantly different between these two class definitions and the single class definition used in the earlier lesson.&nbsp; Therefore, I won't show them here.&nbsp; You can view them in the program listings near the end of the lesson. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="The_Server_Code_File"></A>The Server Code File</H2>
</FONT><P>The server code for this program differs from the earlier version in that the two objects that it instantiates are of two different types instead of being of the same type.&nbsp; I have highlighted these differences in boldface below. <BR>
&nbsp; </P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Rmi04Server.java
Rev 10/09/98.
**********************************************************/
//snip
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Rmi04RemoteObjA</B> remoteObjA&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new <B>Rmi04RemoteObjA</B>("objA-1");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Rmi04RemoteObjB</B> remoteObjB&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new <B>Rmi04RemoteObjB</B>("objB-2");
//snip
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Naming.rebind("helloObjA", remoteObjA);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Naming.rebind("helloObjB", remoteObjB);
//snip</PRE></TD>
</TR>
</TABLE>
</CENTER></P>

<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="The_Client_Code_File"></A>The Client Code File</H2>
</FONT><P>That brings us to the client code shown below. </P>
<P>As in the earlier lesson, this code goes to the registry on the server twice and obtains references to two different remote objects: <B>refToObjA</B> and <B>refToObjB</B>.&nbsp; However, in this case, the references are of two different types instead of being of the same type as was the case in the earlier lesson. </P>
<P>Having obtained references to each of the two objects, the code invokes two methods on each of the objects:&nbsp; <B>hello()</B> and <B>goodbye()</B>. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Rmi04Client.java
**********************************************************/
//snip&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; String partOfUrl = "rmi://localhost/";&nbsp;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Rmi04RemoteIntfcA</B> refToObjA =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Rmi04RemoteIntfcA)Naming.lookup(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partOfUrl + "helloObjA");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Rmi04RemoteIntfcB</B> refToObjB =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Rmi04RemoteIntfcB)Naming.lookup(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partOfUrl + "helloObjB");


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(refToObjA.hello("Dick"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(refToObjA.goodbye("Dick"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(refToObjB.hello("Dick"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(refToObjB.goodbye("Dick"));
//snip</PRE></TD>
</TR>
</TABLE>

<P>Now you've seen an RMI application that supports multiple methods on multiple remote objects of different types.&nbsp; Hopefully you can extend this to apply to any number of methods on any number of different remote object types. </P>
<P>Complete listings of all of the code are provided in the next section. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Program_Listing"></A>Program Listings</H2></FONT>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>rem File Rmi04.bat
rem Rev 10/09/98
echo off
echo Make certain that you have a Client folder and
echo&nbsp; a Server folder immediately below this one.

echo Delete residue from previous run
del Rmi04*.class
del Client\*.class
del Server\*.class

echo Compile files required by Server
jvc Rmi04Server.java

echo Compile files required by Client
jvc Rmi04Client.java

echo Run rmic utility to create skeleton and stub classes
rmic Rmi04RemoteObjA
rmic Rmi04RemoteObjB

echo Put a copy of the stub class in the Serverfolder
copy Rmi04RemoteObjA_Stub.class Server
copy Rmi04RemoteObjB_Stub.class Server

echo Put a copy of the skeleton class in the Server folder
copy Rmi04RemoteObjA_Skel.class Server
copy Rmi04RemoteObjB_Skel.class Server

echo Put a copy of the remote obj class file in Server
copy Rmi04RemoteObjA.class Server
copy Rmi04RemoteObjB.class Server

echo Put a copy of the remote server class file in Server
copy Rmi04Server.class Server

echo Put copy of remote interface class file in Server
copy Rmi04RemoteIntfcA.class Server
copy Rmi04RemoteIntfcB.class Server

echo Put copy of client class file in Client folder
copy Rmi04Client.class Client

echo Put a copy of the stub class in the Client folder
copy Rmi04RemoteObjA_Stub.class Client
copy Rmi04RemoteObjB_Stub.class Client

echo Put copy of remote interface class file in Client
copy Rmi04RemoteIntfcA.class Client
copy Rmi04RemoteIntfcB.class Client

echo Should be able to start rmiregistry here, but it gives
echo&nbsp; fatal error on my Win95 with jdk1.1.6.&nbsp; Start it
echo&nbsp; in server program instead.

echo Wait for remote object to become ready.&nbsp; Then click&nbsp;
echo&nbsp; main window to keep things moving.

echo Start the server running in a different MSDOS window
cd Server
start java Rmi04Server
cd ..

echo Run client program twice to demo that remote object
echo&nbsp; stays alive.
cd Client
java Rmi04Client
java Rmi04Client
cd..

echo Manually terminate the remote object.</PRE></TD>
</TR>
</TABLE>
</CENTER></P>

<P ALIGN="CENTER">. </P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Rmi04RemoteIntfcA.java
Rev 10/10/98.
This is the interface for an RMI Hello World program
that declares two methods.
**********************************************************/

import java.rmi.*;

public interface Rmi04RemoteIntfcA extends Remote{
&nbsp; String hello(String client) throws RemoteException;

&nbsp; String goodbye(String client) throws RemoteException;

}//end Rmi04RemoteIntfcA definition</PRE></TD>
</TR>
</TABLE>
</CENTER></P>

<P ALIGN="CENTER">. </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Rmi04RemoteIntfcB.java
Rev 10/10/98.
This is the interface for an RMI Hello World program
that declares two methods.
**********************************************************/

import java.rmi.*;

public interface Rmi04RemoteIntfcB extends Remote{
&nbsp; String hello(String client) throws RemoteException;

&nbsp; String goodbye(String client) throws RemoteException;

}//end Rmi04RemoteIntfcB definition</PRE></TD>
</TR>
</TABLE>

<P>. </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Rmi04RemoteObjA.java
Rev 10/09/98.
This is the remote object for an RMI hello world program
upgraded to define two methods..
**********************************************************/

import java.rmi.*;
import java.rmi.server.*;

public class Rmi04RemoteObjA extends UnicastRemoteObject
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Rmi04RemoteIntfcA{

&nbsp; String objID;
&nbsp;&nbsp;
&nbsp; public Rmi04RemoteObjA(String objID)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws RemoteException{
&nbsp;&nbsp;&nbsp; this.objID = objID;//save the ID
&nbsp; }//end constructor

&nbsp; public String hello(String client)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws RemoteException{
&nbsp;&nbsp;&nbsp; return "Hello " + client + " from " + objID;
&nbsp; }//end hello()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public String goodbye(String client)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws RemoteException{
&nbsp;&nbsp;&nbsp; return "Goodbye " + client + " from " + objID;
&nbsp; }//end goodbye()
&nbsp;&nbsp;&nbsp;&nbsp;
}//end class Rmi04RemoteObjA</PRE></TD>
</TR>
</TABLE>

<P>. </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Rmi04RemoteObjB.java
Rev 10/09/98.
This is the remote object for an RMI hello world program
that defines two methods..
**********************************************************/

import java.rmi.*;
import java.rmi.server.*;

public class Rmi04RemoteObjB extends UnicastRemoteObject
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Rmi04RemoteIntfcB{

&nbsp; String objID;
&nbsp;&nbsp;
&nbsp; public Rmi04RemoteObjB(String objID)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws RemoteException{
&nbsp;&nbsp;&nbsp; this.objID = objID;//save the ID
&nbsp; }//end constructor

&nbsp; public String hello(String client)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws RemoteException{
&nbsp;&nbsp;&nbsp; return "Hello " + client + " from " + objID;
&nbsp; }//end hello()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public String goodbye(String client)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws RemoteException{
&nbsp;&nbsp;&nbsp; return "Goodbye " + client + " from " + objID;
&nbsp; }//end goodbye()
&nbsp;&nbsp;&nbsp;&nbsp;
}//end class Rmi04RemoteObjB</PRE></TD>
</TR>
</TABLE>

<P>. </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Rmi04Server.java
Rev 10/09/98.
This program is the remote server for an RMI version of
hello world upgraded to support two objects of different
types.
**********************************************************/

import java.rmi.*;
import java.rmi.server.*;
import sun.applet.*;
import java.rmi.registry.LocateRegistry;

public class Rmi04Server{
&nbsp;&nbsp;
&nbsp; public static void main(String args[]){
&nbsp;&nbsp;&nbsp; System.setSecurityManager(new RMISecurityManager());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rmi04RemoteObjA remoteObjA&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new Rmi04RemoteObjA("objA-1");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rmi04RemoteObjB remoteObjB&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = new Rmi04RemoteObjB("objB-2");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Had to register it this way to avoid Win95 error
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LocateRegistry.createRegistry(1099);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Naming.rebind("helloObjA", remoteObjA);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Naming.rebind("helloObjB", remoteObjB);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Remote obj ready to use");
&nbsp;&nbsp;&nbsp; }catch(Exception e){System.out.println("Error: " + e);}
&nbsp; }//end main
}//end class Rmi04Server</PRE></TD>
</TR>
</TABLE>

<P>. </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Rmi04Client.java
Rev 10/09/98.
This program is the client for an RMI hello world program
that invokes two different methods on each of two&nbsp;
different objects of different types.
**********************************************************/

import java.rmi.*;
import java.rmi.server.*;

public class Rmi04Client{
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; System.setSecurityManager(new RMISecurityManager());&nbsp;
&nbsp;&nbsp;&nbsp; String partOfUrl = "rmi://localhost/";&nbsp;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rmi04RemoteIntfcA refToObjA =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Rmi04RemoteIntfcA)Naming.lookup(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partOfUrl + "helloObjA");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Rmi04RemoteIntfcB refToObjB =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Rmi04RemoteIntfcB)Naming.lookup(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partOfUrl + "helloObjB");


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(refToObjA.hello("Dick"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(refToObjA.goodbye("Dick"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(refToObjB.hello("Dick"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(refToObjB.goodbye("Dick"));

&nbsp;&nbsp;&nbsp; }catch(Exception e){System.out.println("Error " + e);}
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end main
}//end class Rmi04Client</PRE></TD>
</TR>
</TABLE>

<P>-end- <!--end--></P></BODY>
</HTML>
