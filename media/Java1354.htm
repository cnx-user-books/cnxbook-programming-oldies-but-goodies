<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 3, Purpose of Framework Interfaces</h2>
<i>There are six core interfaces in the Collections Framework.&nbsp; Each
interface declares several methods and provides a contract that applies
to each declared method.&nbsp; The method declarations and their associated
contracts specify the general behavior of matching methods in the classes
that implement the interfaces.</i>
<p><b>Published:</b>&nbsp; May 21, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1354
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is the third lesson in a miniseries on Java data structures and the
Java Collections Framework.&nbsp; The first lesson in the miniseries was
entitled <a href="Java1350.htm">Data Structures in Java: Part 1, Getting
Started</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the <i>Collections Framework</i>.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth to view the listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<p><font color="#000000">The index on my site provides links to the lessons
at </font><a href="http://softwaredev.earthweb.com/java">Gamelan.com</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
At least three things are included in a collections framework:
<ul>
<li>
interfaces</li>

<li>
implementations</li>

<li>
algorithms</li>
</ul>
This lesson will discuss the purpose of the interfaces in the Collections
Framework.&nbsp; Subsequent lessons will discuss implementations and algorithms.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
In the previous lesson, entitled <a href="Java1352.htm">Data Structures
in Java: Part 2, What Is a Collection?</a>, we learned that the Collections
Framework contains six core interfaces with the parent-child relationships
shown through indentation in Listing 1:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<ul>
<li>
<b><tt>Collection</tt></b></li>

<ul>
<li>
<tt>Set</tt></li>

<ul>
<li>
<tt>SortedSet</tt></li>
</ul>

<li>
<tt>List</tt></li>
</ul>

<li>
<b><tt>Map</tt></b></li>

<ul>
<li>
<tt>SortedMap</tt></li>
</ul>
</ul>

<p><br><b><tt>Listing 1</tt></b></td>
</tr>
</table>

<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion</font></h2></center>
<b><font color="#FF0000">Purpose of framework interfaces</font></b>
<p>So, just what is the purpose of this set of core interfaces?&nbsp; Hopefully,
the following paragraphs will answer that question.
<p><font color="#000000">A <i>collection</i> is an object of some type,
and that type is defined in a generic sense by one or more interfaces that
make up the Collections Framework.</font>
<p><b><font color="#FF0000">What is a data type?</font></b>
<p><font color="#000000">All data types specify the operations that can
be performed on an entity of that type.&nbsp; <i>(Data types also specify
the kinds of data that can be stored in an entity of that type, but that
is not germane to this discussion.)</i></font>
<p><b><font color="#FF0000">Interface is a type</font></b>
<p><font color="#000000">An object in Java can often be considered to be
of several different types.&nbsp; One of those types is determined by any
interfaces implemented by the class from which the object was instantiated.&nbsp;
Framework collection objects in Java are instantiated from classes that
implement the core interfaces of the framework.</font>
<p><font color="#000000">Thus, a Java interface in the Collections Framework
specifies the type of such an object, and provides a generic representation
of the operations that apply across different implementations of the interface.</font>
<p><b><font color="#FF0000">Collection interface declares several methods</font></b>
<p><font color="#000000">The <b>Collection</b> interface declares several
methods.&nbsp; This is not unusual.&nbsp; From a technical standpoint,
all interfaces declare none, one, or more methods.&nbsp; Most interfaces
declare several methods.&nbsp; <i>(Interfaces can also declare constants,
but that is not germane to this discussion.)</i></font>
<p><font color="#000000">In general, there is no technical requirement
for a specification of the behavior of the interface methods when implemented
in a class.&nbsp; In fact, because a method that is declared in an interface
is abstract, it specifically refrains from defining the behavior of the
method.&nbsp; The interface definition simply declares the interfaces for
all the methods that it declares.</font>
<p><b><font color="#FF0000">An extra step</font></b>
<p><font color="#000000">The Sun documentation for the <b>Collection</b>
interface, however, goes a step beyond the minimum technical requirements
for an interface.&nbsp; The documentation describes the general behavior
that must be exhibited by each of the methods belonging to an object instantiated
from a class that implements the <b>Collection</b> interface.&nbsp; This
is sometimes referred to as a <i>contract</i>.</font>
<p><font color="#000000">Therefore, if you define a class that implements
the <b>Collection </b>interface in a manner consistent with the Collections
Framework, it is important that you make certain that each of your methods
behaves as described in the Sun documentation.&nbsp; In other words, you
must be careful to comply with the contract defined for those methods.&nbsp;
If you don't do that, a user can't rely on objects instantiated from your
class exhibiting proper behavior.</font>
<p><b><font color="#FF0000">The add() method in Collection</font></b>
<p><font color="#000000">For example, the <b>Collection</b> interface declares
a method named <b>add()</b>, which receives an incoming reference of type
<b>Object</b>,
and returns a <b>boolean</b>.&nbsp; Here is one of the paragraphs from
the Sun JDK 1.3 documentation describing the required behavior <i>(contract)</i>
of the <b>add()</b> method for any class that implements the <b>Collection</b>
interface.</font>
<p><i><font color="#000000">"Ensures that this collection contains the
specified element (optional operation). Returns true if this collection
changed as a result of the call. (Returns false if this collection does
not permit duplicates and already contains the specified element.)"</font></i>
<p><font color="#000000">As you can see, the behavior is defined in a very
general way.&nbsp; There is no indication as to how that behavior is to
be achieved.&nbsp; <i>(In addition, the documentation provides several
other paragraphs describing the contract for the add() method.)</i></font>
<p><b><font color="#FF0000">The add() method in Set</font></b>
<p><font color="#000000">As you can see from Listing 1 above, the <b>Set</b>
interface extends the <b>Collection</b> interface.&nbsp; In keeping with
the general form of object-oriented design, <b>Set</b> is more specialized
than <b>Collection</b>.&nbsp; Therefore, <b>Set</b> makes the contract
for the <b>add()</b> method more specific for objects of type
<b>Set</b>.&nbsp;
Here is some of the material from the Sun JDK 1.3 documentation describing
the contract of the <b>add()</b> method for any class that implements the
<b>Set</b>
interface.</font>
<p><i><font color="#000000">"Adds the specified element to this set if
it is not already present... If this set already contains the specified
element, the call leaves this set unchanged and returns false... this ensures
that sets never contain duplicate elements."</font></i>
<p><b><font color="#FF0000">How do the contracts differ?</font></b>
<p>The contract for the <b>add()</b> method, as declared in the <b>Collection</b>
interface, does not prohibit duplicate elements, but does make the provision
for interfaces that extend <b>Collection</b> to prohibit duplicate elements.
<p>The contract for the <b>add()</b> method in the <b>Set</b> interface
does prohibit duplicate elements.
<p><b><font color="#FF0000">What about the List interface?</font></b>
<p><font color="#000000">I'm not going to show it here, but the contract
for the <b>add()</b> method declared in the <b>List</b> interface, <i>(which
extends Collection)</i>, does not prohibit duplicate elements.&nbsp; However,
it does have some other requirements that don't apply to <b>Set</b> objects.</font>
<p><b><font color="#FF0000">A major difference</font></b>
<p><font color="#000000">This is one of the major differences between lists
and sets in the Java Collection Framework.&nbsp; Both <b>List</b> objects
and <b>Set</b> objects are collections, because both of the interfaces
extend the <b>Collection</b> interface.&nbsp; However, the <b>Set</b> interface
contract prohibits duplicate elements while the <b>List</b> interface contract
does not prohibit duplicate elements.</font>
<p><b><font color="#FF0000">Designing a framework</font></b>
<p><font color="#000000">In theory, it should be possible <i>(but perhaps
not very practical)</i> to define a framework consisting solely of interface
definitions and associated contracts for methods and algorithms.&nbsp;
Then each user could implement the interfaces however they see fit, provided
that they comply with the contracts. <i>(This might not be very practical
because every user of the framework would then be required to implement
the interfaces, which would entail a lot of work.)</i></font>
<p><b><font color="#FF0000">The SAX framework</font></b>
<p><font color="#000000">As an aside, I'm aware of one case in which this
was done successfully.&nbsp; Although I wasn't involved, I have read that
the Simple API for XML <i>(SAX)</i> was initially defined as a set of interface
definitions and contracts <i>(and possibly a few concrete implementations).</i>&nbsp;
Further, I have been led to believe that the framework was designed by
a group of volunteers working cooperatively via the Internet.</font>
<p><font color="#000000">Several companies have since provided free or
low-cost implementations of the interfaces, resulting in a very convenient
way to use Java to parse XML documents.
<i>(There are several tutorial
lessons on the use of SAX on my <a href="http://www2.austin.cc.tx.us/baldwin/">web
site</a>.)&nbsp; </i>One of these companies is IBM, which has made the
<a href="http://www.alphaworks.ibm.com/tech/xml4j">XML4J</a>
parser available.&nbsp; I have found the XML4J parser to be very usable.</font>
<p><b><font color="#FF0000">Now, back to the main thread</font></b>
<p><font color="#000000">Fortunately, Sun didn't stop work after defining
the interfaces and contracts for the Java Collections Framework.&nbsp;
Rather, they also provided us with several useful classes that implement
the interfaces in the framework.&nbsp; Thus, we can instantiate and use
objects of those classes immediately without having to define them ourselves.&nbsp;
Here is a list of the concrete implementation classes in the Java Collections
Framework as defined in JDK 1.3.</font>
<ul>
<li>
HashSet</li>

<li>
TreeSet</li>

<li>
LinkedList</li>

<li>
Vector</li>

<li>
ArrayList</li>

<li>
HashMap</li>

<li>
Hashtable</li>

<li>
WeakHashMap</li>

<li>
TreeMap</li>
</ul>
<font color="#000000">In addition, they provided us with several partial
implementation classes <i>(</i></font><i>AbstractSet, AbstractList, and
AbstractMap),</i> which are intended to serve a starting point for new
implementations that we choose to define.&nbsp; According to Sun, these
classes three provide <i>a skeletal implementation of the Set, List, and
Map interfaces to minimize the effort required to implement those interfaces.</i>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
There are six core interfaces in the Collections Framework.
<p>As is always the case, each of the core interfaces defines a data type.&nbsp;
Each interface declares several methods.&nbsp; In addition, each interface
provides a contract that applies to each declared method.&nbsp; The contracts
become more specific as we traverse down the interface inheritance hierarchy.
<p>Objects instantiated from classes that implement the interfaces can
be considered to be of the interface type.
<p>The method declarations and their associated contracts in the interfaces
specify the general behavior of matching methods in the classes that implement
the interfaces.
<p>The framework provides nine concrete implementations of the interfaces
that we can use to instantiate new objects to use as data structures.
<p>The framework also provides three abstract implementations that we can
use as a starting point for defining our own implementations.
<br>&nbsp;
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
At least three things are included in a collections framework:
<ul>
<li>
interfaces</li>

<li>
implementations</li>

<li>
algorithms</li>
</ul>
This lesson has discussed interfaces.
<p>In the next lesson, I will begin a discussion of the nine concrete implementations
provided in the Collections Framework.&nbsp; I will also discuss the algorithms
in that lesson.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
