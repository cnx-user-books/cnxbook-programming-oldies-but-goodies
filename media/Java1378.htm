<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 15,
The toArray Method, Part 1</h2>
<p>
<i><font color="#000000">Baldwin shows you how to use the simpler version
of the overloaded toArray method that is declared in the Collection interface.&nbsp;
He also explains why you need to exercise care when using the elements
stored in the resulting array to avoid corrupting the state of the objects
referred to by the elements in the collection.</font></i></p>
&nbsp;<h2>
&nbsp;</h2>
<b>Published:</b>&nbsp; September 17, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1378
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">A miniseries</font></b>
<p>This lesson is part of a miniseries on Java data structures and the
Java<i> Collections Framework.</i>&nbsp; The first lesson in the miniseries
was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1376.htm">Data Structures in Java: Part 14, The
Comparator Interface, Part 6</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p><b><font color="#FF0000">A sub-series</font></b>
<p>This is also the first lesson in a sub-series on the <b>toArray</b>
method.&nbsp; The primary purpose of the lessons in this sub-series is
to teach you how to use the overloaded <b>toArray</b> method, which is
declared in the <b>Collection</b> interface.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">In earlier lessons, I used the <b>toArray</b> method,
declared in the <b>Collection</b> interface, to copy elements from a collection
into an array.&nbsp; However, in those lessons, I didn't take the time
to fully explain how to use the method.&nbsp; Also, I didn't fully explain
the precautions that you need to take when you use the method.</font>
<p><font color="#000000">The <b>Collection</b> interface declares the following
two overloaded versions of the <b>toArray</b> method:</font>
<p><b><tt><font color="#000000">public Object[] toArray()</font></tt></b>
<br><b><tt><font color="#000000">public Object[] toArray(Object[] a)</font></tt></b>
<p><font color="#000000">In this lesson, will teach you how to use the
first <i>(simpler)</i> version of the <b>toArray</b> method.&nbsp; I will
also show why you need to exercise care when using the elements stored
in the array to avoid corrupting the state of the objects referred to by
the elements in the collection.</font>
<p><font color="#000000">I will teach you how to use the second <i>(more
complex)</i> version of the <b>toArray</b> method in the next lesson.</font>
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Program</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Let's begin with a little quiz to test your prior knowledge of the Collections
Framework.&nbsp; To take this quiz, examine the program shown in Listing
1 and write down the output produced by the program.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File ToArray01.java
//Copyright 2001, R.G.Baldwin
import java.util.*;
import javax.swing.*;

public class ToArray01{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class ToArray01
//===================================//

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Collection ref;

&nbsp;&nbsp;&nbsp; //Create, populate, and display the
&nbsp;&nbsp;&nbsp; // contents of a collection
&nbsp;&nbsp;&nbsp; ref = new LinkedList();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection contents");
&nbsp;&nbsp;&nbsp; showCollection(ref);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Get collection contents into the
&nbsp;&nbsp;&nbsp; // array and display the new
&nbsp;&nbsp;&nbsp; // contents of the array.
&nbsp;&nbsp;&nbsp; Object[] array = <b>ref.toArray()</b>;
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "New array contents");
&nbsp;&nbsp;&nbsp; showArray(array);

&nbsp;&nbsp;&nbsp; //Modify a property of an object
&nbsp;&nbsp;&nbsp; // referred to by one of the
&nbsp;&nbsp;&nbsp; // elements in the array. Display
&nbsp;&nbsp;&nbsp; // array contents after&nbsp;
&nbsp;&nbsp;&nbsp; // modification
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Modified array contents");
&nbsp;&nbsp;&nbsp; ((JComponent)array[0]).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setToolTipText("XX");
&nbsp;&nbsp;&nbsp; showArray(array);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Display the contents of the
&nbsp;&nbsp;&nbsp; // collection
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection contents");
&nbsp;&nbsp;&nbsp; showCollection(ref);
&nbsp; }//end doIt()
//-----------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //Utility method for displaying
&nbsp; // array contents
&nbsp; void showArray(Object[] array){
&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt; array.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(array[i] == null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print("null ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JComponent)array[i]).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getToolTipText() + " ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end showArray()
//-----------------------------------//

&nbsp; //Utility method for displaying
&nbsp; // collection contents
&nbsp; void showCollection(Collection ref){
&nbsp;&nbsp;&nbsp; Iterator iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JComponent)iter.next()).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getToolTipText() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end showCollection
}// end class Worker
//===================================//

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JLabel());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JLabel());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Iterator iter = ref.iterator();
&nbsp;&nbsp;&nbsp; int cnt = 0;
&nbsp;&nbsp;&nbsp; JComponent refVar;
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar = (JComponent)iter.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(refVar instanceof JButton){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar.setToolTipText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "B"+cnt++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar.setToolTipText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "L" + cnt++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end fillIt()
}//end class Populator

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">And the answer is ...</font></b>
<p>The correct answer to the quiz is the program output shown below:
<p><b><tt>Collection contents</tt></b>
<br><b><tt>B0 B1 L2 B3 B4 L5</tt></b>
<br><b><tt>New array contents</tt></b>
<br><b><tt>B0 B1 L2 B3 B4 L5</tt></b>
<br><b><tt>Modified array contents</tt></b>
<br><b><tt>XX B1 L2 B3 B4 L5</tt></b>
<br><b><tt>Collection contents</tt></b>
<br><b><tt>XX B1 L2 B3 B4 L5</tt></b>
<p>If that was your answer, you probably already understand most of the
material covered in this lesson.&nbsp; In that case, you might consider
skipping this lesson and moving on to the next lesson.&nbsp; If that wasn't
your answer, you should probably continue with your study of this lesson.
<p><b><font color="#FF0000">A new LinkedList collection</font></b>
<p>The code in Listing 2 creates and populates a new <b>LinkedList</b>
collection.&nbsp; The collection is populated by passing the <b>LinkedList</b>
object's reference to a method named <b>fillIt</b>.
<p>The code in Listing 2 also displays the contents of the <b>LinkedList</b>
after it has been populated.&nbsp; The list is displayed by passing the
<b>LinkedList</b>
object's reference to a method named <b>showCollection</b>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp; ref = new <b>LinkedList</b>();

&nbsp;&nbsp;&nbsp; Populator.<b>fillIt</b>(ref);

&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection contents");
&nbsp;&nbsp;&nbsp; <b>showCollection</b>(ref);

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The LinkedList class</font></b>
<p>The <b>LinkedList</b> class is one of the concrete class implementations
of the Collections Framework.&nbsp; This class implements the <b>Collection</b>
interface and the <b>List</b> interface.&nbsp; Thus, it adheres to the
contracts and stipulations of the <b>List</b> interface.
<p>Here is part of what Sun has to say about this class:
<blockquote><i>"Linked list implementation of the List interface. Implements
all optional list operations, and permits all elements (including null).
In addition ..."</i></blockquote>
<b><font color="#FF0000">Populating the LinkedList collection</font></b>
<p>The beginning of the static <b>fillIt</b> method, used to populate the
collection, is shown in Listing 3.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; public static void <b>fillIt</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JLabel());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JLabel());

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p>As shown in Listing 3, the <b>fillIt</b> method begins by invoking the
<b>add</b>
method six times in succession, passing references to new anonymous objects
as a parameter to the <b>add</b> method.
<p><b><font color="#FF0000">Four buttons and two labels</font></b>
<p>Four of the objects are instantiated from the class named <b>JButton</b>.&nbsp;
Two of the objects are instantiated from the class named <b>JLabel</b>.
<p>Both <b>JButton</b> and <b>JLabel</b> belong to the <b>javax.swing</b>
package.&nbsp; Further, both are subclasses of the class named <b>JComponent</b>.
<p><b><font color="#FF0000">The toolTipText property</font></b>
<p>Finally, both classes have a property named <b>toolTipText</b>, which
can be set and accessed by invoking the following methods on a reference
to the object:
<p><b><tt>void setToolTipText(String text)</tt></b>
<br><b><tt>String getToolTipText()</tt></b>
<p><b><font color="#FF0000">Why am I using Swing GUI components?</font></b>
<p>I really don't plan to do anything special with these two Swing GUI
components.&nbsp; Rather, I chose to use them for illustration purposes
simply because they possess the characteristics that I need for this lesson,
and the next lesson.&nbsp; Those characteristics are:
<ul>
<li>
Both classes subclass the class named JComponent <i>(a common superclass
below the Object class).</i></li>

<li>
Both classes inherit a property <i>(toolTipText)</i> that can be used to
identify them later.</li>
</ul>
<b><font color="#FF0000">Making the objects distinguishable</font></b>
<p>After the code in Listing 3 has been executed, the buttons and labels
are indistinguishable on the basis of the value of their <b>toolTipText</b>
property.
<p>The code in Listing 4 deals with this issue.&nbsp; This code uses the
<b>setToolTipText</b>
method to store a unique <b>String </b>value in the
<b>toolTipText</b>
property of the object referred to by each of the elements in the collection.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Iterator iter = ref.iterator();
&nbsp;&nbsp;&nbsp; int cnt = 0;
&nbsp;&nbsp;&nbsp; JComponent refVar;

&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar = (JComponent)iter.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(refVar instanceof JButton){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar.<b>setToolTipText</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "B"+cnt++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar.<b>setToolTipText</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "L" + cnt++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end fillIt()

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Identifying the buttons and labels</font></b>
<p>In addition to storing a unique value in the <b>toolTipText</b> property
of the object referred to by each element, the code in Listing 4 also makes
it possible to distinguish between the <b>JButton</b> objects and the <b>JLabel</b>
objects.&nbsp; This is accomplished by including an upper-case "B" in the
property value for each <b>JButton</b>, and including an upper-case "L"
in the property value for each <b>JLabel</b> button.
<p><b><font color="#FF0000">Why populate this way?</font></b>
<p>This approach to population is, admittedly, a little bit of an overkill
for illustrating what I want to illustrate in this program.&nbsp; However,
I plan to use the same <b>fillIt</b> method in the sample program in the
next lesson, and it won't be an overkill there.
<p><b><font color="#FF0000">Display the collection</font></b>
<p>The code in Listing 2 above invokes the <b>showCollection</b> method
to display the contents of the populated <b>LinkedList</b> collection.&nbsp;
The <b>showCollection</b> method is shown in Listing 5
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; void <b>showCollection</b>(Collection ref){
&nbsp;&nbsp;&nbsp; Iterator iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JComponent)iter.next()).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getToolTipText() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end showCollection

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p>By now, you should have no difficulty understanding the code in Listing
5.&nbsp; This code gets an iterator on the incoming reference of type <b>Collection</b>.&nbsp;
The code then uses that iterator to gain access to each element in succession,
displaying the <b>String</b> value of the <b>toolTipText</b> property belonging
to a particular object during each iteration.
<p><b><font color="#FF0000">Downcast is required</font></b>
<p>Note that the <b>next</b> method of the <b>Iterator</b> interface returns
a reference to the next element in the collection, as type <b>Object</b>.
<p>In order to invoke the <b>getToolTipText</b> method on the returned
reference, the reference must be downcast to type <b>JComponent</b>.&nbsp;
Since both <b>JButton</b> and <b>JLabel</b> extend <b>JComponent</b>, and
the <b>getToolTipText</b> method is declared in the <b>JComponent</b> class,
it is not necessary to be concerned as to whether an object is type <b>JButton</b>
or type <b>JLabel</b> to display the value of the <b>toolTipText</b> property.
<i>(This
is an example of polymorphic behavior based on class inheritance.)</i>
<p><b><font color="#FF0000">The output for the collection</font></b>
<p>The output produced by the code in Listing 2 is shown below:
<p><b><tt>Collection contents</tt></b>
<br><b><tt>B0 B1 L2 B3 B4 L5</tt></b>
<p>By examining the "B" and "L" characters in this output, you can identify
the <b>JButton</b> objects and the <b>JLabel</b> objects.
<p><b><font color="#FF0000">Copy collection elements into an array</font></b>
<p>The code in Listing 6 shows how to use the simple version of the <b>toArray</b>
method to create an array of type <b>Object</b> that contains a copy of
each element in the <b>LinkedList</b> collection.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Object[] array = ref.<b>toArray</b>();

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The toArray method</font></b>
<p>Here is some of what Sun has to say about this version of the <b>toArray</b>
method:
<blockquote><i>"Returns an array containing all of the elements in this
collection. If the collection makes any guarantees as to what order its
elements are returned by its iterator, this method must return the elements
in the same order.</i>
<p><i>The returned array will be "safe" in that no references to it are
maintained by this collection. ... The caller is thus free to modify the
returned array."</i></blockquote>
I will have some more to say about the <i>safe</i> aspects of the array
shortly.
<p><b><font color="#FF0000">Display the array contents</font></b>
<p>The code in Listing 7 invokes a method named <b>showArray</b> to cause
the current contents of the array to be displayed.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "New array contents");
&nbsp;&nbsp;&nbsp; <b>showArray</b>(array);

<b><font face="Courier New,Courier">Listing 7</font></b></pre>
</td>
</tr>
</table>

<p>The entire <b>showArray</b> method is shown in Listing 8.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; void <b>showArray</b>(Object[] array){
&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt; array.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(array[i] == null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print("null ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JComponent)array[i]).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getToolTipText</b>() + " ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end showArray()

<b><font face="Courier New,Courier">Listing 8</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The showArray method</font></b>
<p>The behavior of the <b>ShowArray</b> method is straightforward.&nbsp;
The method uses a <b>for</b> loop to access each of the elements stored
in the array in increasing index order.
<p>A test is made to determine if the element contains a null reference.&nbsp;
If so, then the word <b>null</b> is displayed for that element.&nbsp; If
not, the <b>getToolTipText</b> method is used to access and display the
value of the <b>toolTipText</b> property for each element in the array.
<p><b><font color="#FF0000">The output for the array</font></b>
<p>The output produced by the code in Listing 8 is shown below:
<p><b><tt>New array contents</tt></b>
<br><b><tt>B0 B1 L2 B3 B4 L5</tt></b>
<p>As you can see, (except for the String that identifies the type of output)
this is an exact match to the output produced when the contents of the
collection were displayed.
<p><b><font color="#FF0000">How "safe" is the array?</font></b>
<p>While it is "safe" to modify the contents of the array as explained
in the quotation from Sun earlier, there is still some danger here that
you need to be aware of.
<p>Java collections do not store objects.&nbsp; Rather, Java collections
store references to objects.&nbsp; In Java, it is entirely possible to
have two or more references to the same object.
<p><b><font color="#FF0000">Array contains copies of references to objects</font></b>
<p>Each element in the array is a copy of an element in the collection.
<p>Therefore, at this point, for each object being managed by the collection,
at least two references exist that refer to that object.&nbsp; One copy
is contained in the collection.&nbsp; The other copy is contained in the
collection.
<p>If you use a reference stored in the array to modify the state of one
of those objects, that modification is made to the object that is also
referenced by an element in the collection.&nbsp; This may or may not be
what you intend.&nbsp; It's not necessarily a problem as long as you understand
what is going on and be careful how you use the references stored in the
array.
<p><b><font color="#FF0000">Modifying the state of an object</font></b>
<p>The code shown in Listing 9 invokes the <b>setToolTipText</b> method
on the reference stored in the first element in the array to modify the
state of the object to which that reference refers.&nbsp; Then the code
invokes the <b>showArray</b> method to display the contents of the array.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Modified array contents");
&nbsp;&nbsp;&nbsp; ((JComponent)array[0]).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>setToolTipText("XX")</b>;
&nbsp;&nbsp;&nbsp; <b>showArray</b>(array);

<b><font face="Courier New,Courier">Listing 9</font></b></pre>
</td>
</tr>
</table>

<p>The <b>toolTipText</b> property value for each of the objects referred
to by the remaining elements is left undisturbed.
<p><b><font color="#FF0000">Display array contents after object modification</font></b>
<p>The output produced by the code in Listing 9 is shown below:
<p><b><tt>Modified array contents</tt></b>
<br><b><tt>XX B1 L2 B3 B4 L5</tt></b>
<p>As you can see, except for the first element, this is a match for the
display of the array contents before the state of the object referred by
the first element was modified.&nbsp; However, the <b>toolTipText</b> property
for the object referred to by the first element now contains the string
"XX", instead of the string "B0" as before.
<p><b><font color="#FF0000">Now, display the contents of the collection
again</font></b>
<p>The code in Listing 10 displays the state of each of the objects referred
to by the elements in the <b>LinkedList</b> collection.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection contents");
&nbsp;&nbsp;&nbsp; showCollection(ref);

<b><font face="Courier New,Courier">Listing 10</font></b></pre>
</td>
</tr>
</table>

<p>The output produced by Listing 10 is shown below:
<p><b><tt>Collection contents</tt></b>
<br><b><tt>XX B1 L2 B3 B4 L5</tt></b>
<p>As you can see, the state of the object referred to by the reference
stored in the first element of the collection is also changed.&nbsp; The
<b>toolTipText</b>
property for that object now contains the string "XX" instead of "B0" as
before.
<p><b><font color="#FF0000">The bottom line</font></b>
<p>It is safe to modify the contents of the array, even to replace the
references in the array with references to other objects.&nbsp; Such a
replacement has no impact on the contents of the collection.
<p>However, it is also possible to use the elements of the array to modify
the state of the objects referred to by the elements in the collection.
<p>If this is what you need to do, that's great.&nbsp; However, if that
is not what you need to do, that may be a problem.&nbsp; So, the bottom
line is -- be careful what you do with the elements in the array.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I taught you how to use the simpler
version of the overloaded <b>toArray</b> method, declared in the <b>Collection</b>
interface, to copy the elements from a collection into an array of type
<b>Object</b>.</font>
<p><font color="#000000">I also showed why you need to exercise care when
using the elements stored in the array, to avoid corrupting the state of
the objects referred to by the elements in the collection.</font>
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will teach you how to use the other, more complex
version of the overloaded <b>toArray</b> method.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
