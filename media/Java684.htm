<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Servlets, Server-Side Includes<!--endtitle--></H2>
<P>Java Programming, Lecture Notes # 684, Revised 2/19/99. </P>
<P><A HREF="#Preface">Preface</A> </P>
<P><A HREF="#Introduction">Introduction</A> </P>
<P><A HREF="#sample_program">Sample Program</A> </P><DIR>
<DIR>

<P><A HREF="#Interesting_Code_Fragments">Interesting Code Fragments</A> </P>
<P><A HREF="#program_listing">Program Listing</A> </P></DIR>
</DIR>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Preface">Preface</A></H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Advanced Java Programming</B></U> classes at ACC will be responsible for knowing and understanding all of the material in this lesson beginning with the spring semester of 1999. </P>
<P>This lesson was originally written on January 6, 1999. The sample servlet was tested using the JDK 1.2 download package from JavaSoft along with the Java Servlet Development Kit (JSDK) 2.0 from JavaSoft. All tests were performed under Win95.</P>
<P>The servlet was tested using the Java Web Server 1.1.1 from JavaSoft. It was not tested using the <STRONG>servletrunner</STRONG> program because that program does not support Server-Side Includes.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Introduction">Introduction</A></H2>
</FONT><P>Previous lessons have introduced you to two different ways to activate a servlet. One of these ways was to point a browser to a URL containing the name of the servlet. The other way was to reference the servlet in the ACTION command of an HTML form.</P>
<P>There is another way to activate a servlet that I haven't, and probably won't demonstrate. That is to register a servlet under a different name, such as <STRONG>MyFile.html</STRONG>, using the administration feature of a server. Then the servlet can be activated by specifying the name of the file in the URL. This is useful if you need to replace an HTML file with a servlet and don't want to break the bookmarks that others may have already placed on that file.</P>
<P>The purpose of this lesson is to introduce you to one additional way to activate a servlet, using a methodology commonly referred to as a <EM>Server-Side Include</EM> or <EM>SSI</EM> for short.</P>
<P>In a manner similar to the use of &lt;APPLET&gt; tags in an HTML file, you can embed </P>
<P>&lt;SERVLET&gt; ... &lt;/SERVLET&gt;</P>
<P>tags in an HTML file. When told to do so, the server will examine the content of the HTML file while delivering it to the client. Each time it encounters a servlet tag, it will activate the servlet whose name (and possibly location) is embedded in the servlet tag. The entire servlet tag sequence will be replaced by the material produced by the servlet before the HTML file is delivered to the client.</P>
<P>Thus, you can write an HTML file that activates different servlets at various points within the file and cause the material produced by the servlets to be embedded in the HTML file and delivered to the client who requested the HTML file.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="sample_program"></A>Sample Program</H2>
</FONT><P>The name of the sample program is <STRONG>Servlet03</STRONG>. This servlet is designed to illustrate Server-Side Includes, commonly known as SSI. </P>
<P>When tested with the HTML file named <STRONG>Servlet03.shtml</STRONG> and the JavaSoft Java Web Server 1.1.1, this servlet produced the following output in the browser window. The servlet determines the date and time 120 days in the future. (Note that it automatically took daylight savings time into account.)</P>
<P>The output was:</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<PRE>The current date and time is: 
06-Jan-99 6:53:12 PM 

The date and time in 120 days will be: 
06-May-99 7:53:12 PM</PRE></TD>
</TR>
</TABLE>

<P>Note that it is necessary to use an extension of <STRONG>shtml</STRONG> on the HTML file. By default, the Java Web Server will parse HTML files looking for included references to servlets only if the file extension is <STRONG>shtml</STRONG>. (However, you can change the required extension if you want by using the administration program for the server.)</P>
<P>The substantive material contained in the body of the HTML file named <STRONG>Servlet03.shtml</STRONG> was as follows:</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>The current date and time is: &lt;br&gt; 
&lt;<STRONG>SERVLET</STRONG> CODE=Servlet03&gt;
&lt;/SERVLET&gt;

&lt;BR&gt;&lt;BR&gt;
The date and time in 120 days will be: &lt;br&gt; 
&lt;<STRONG>SERVLET</STRONG> CODE=Servlet03&gt;
&lt;PARAM NAME=days VALUE=120&gt;
&lt;/SERVLET&gt;</PRE></TD>
</TR>
</TABLE>

<P>There are two &lt;SERVLET&gt; tags in the HTML file, one that specifies a parameter value of 120 and one that doesn't specify a parameter value. The remainder of the HTML file was strictly boilerplate.</P>
<P>As the server parses the <STRONG>shtml</STRONG> file, whenever it finds a &lt;SERVLET&gt; tag, it activates the servlet specified by the <STRONG>CODE</STRONG> attribute. The material produced by the servlet is embedded in the HTML file by using that material to replace the entire &lt;SERVLET&gt;...&lt;/SERVLET&gt; tag sequence before sending the HTML file to the client.</P>
<P>It is also possible to provide a <STRONG>CODEBASE</STRONG> attribute which specifies the URL, down to the directory level, of a remote location from which the servlet should be loaded. If the <STRONG>CODEBASE</STRONG> attribute is not provided, the servlet is assumed to be stored in the normal location for servlets with that server.</P>
<P>The program was tested using two computers on the network, each running JDK 1.2 under Win95.<BR>
<BR>
The HTTP server program from JavaSoft named Java Web Server 1.1.1 was running on one machine. A browser was running on a second machine. </P>
<P>The file named <STRONG>Servlet03.shtml</STRONG> was stored in the <STRONG>public_html</STRONG> folder in the server's directory tree.</P>
<P>The servlet file named <STRONG>Servlet03.class</STRONG> was stored in the <STRONG>servlets</STRONG> folder in the server's directory tree.</P>
<P>The browser was pointed to the following URL</P><DIR>
<DIR>

<FONT FACE="Courier New"><STRONG><P>http://webserver:8080/Servlet03.shtml</P></DIR>
</DIR>

</FONT></STRONG><P>to request that the file named <STRONG>Servlet03.shtml</STRONG> be downloaded. This caused the server to deliver the requested HTML file. During delivery, the file was modified by two calls to the servlet caused by two &lt;SERVLET&gt; tags embedded in the HTML.</P>
<P>The servlet was not tested against the<STRONG> servletrunner</STRONG> program because it does not support SSI.</P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Interesting_Code_Fragments">Interesting Code Fragments</A></H3>
</FONT><P>The first fragment shows the beginning of the <STRONG>doGet()</STRONG> method including its request and response parameters.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>public class Servlet03 extends HttpServlet{
  public void <STRONG>doGet</STRONG>(HttpServletRequest req, 
                    HttpServletResponse res)
                      throws ServletException, IOException{
                        
    try {</PRE></TD>
</TR>
</TABLE>

<P>The next fragment shows the correct code for getting an output writer object for sending data to the server for inclusion in the HTML page. However, this statement doesn't work in this case, apparently due to a bug in Java Web Server 1.1.1. For that reason, the fragment is shown as a comment.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>//      PrintWriter out = res.getWriter();</PRE></TD>
</TR>
</TABLE>

<P>The next fragment shows a slightly more complicated way to get an output writer object, which serves as a work-around for the bug described above. The reference variable named <STRONG>out</STRONG> is a reference to a writer object that is linked to the response object received as an incoming parameter.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>      PrintWriter out = new PrintWriter(
                               res.getOutputStream(),true);</PRE></TD>
</TR>
</TABLE>

<P>The next fragment gets a <STRONG>Date</STRONG> object using a constructor that defaults to the current date and time.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>      Date theDate = new Date();</PRE></TD>
</TR>
</TABLE>

<P>Dates and times in Java are maintained as the number of milliseconds since the standard base time known as "the epoch", namely January 1, 1970, 00:00:00 GMT. The next fragment gets the number of milliseconds that represents current date and time as a <STRONG>long</STRONG> integer..</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>      long theCurrentMillis = theDate.getTime();</PRE></TD>
</TR>
</TABLE>

<P>If the servlet tag in the HTML file specifies a parameter named <STRONG>days</STRONG>, this servlet uses the value of that parameter as an offset to determine the date and time that many days in the future or in the past. If the servlet tag doesn't specify a value for the <STRONG>days</STRONG> parameter, the offset is treated as zero.</P>
<P>The next fragment gets the value of the parameter named <STRONG>days</STRONG>. If the HTML doesn't specify a value for this parameter, the <STRONG>getParameter()</STRONG> method returns null. Note that even though this parameter is intended to represent a number of days, it is received as a <STRONG>String</STRONG> object that must be converted to an integer numeric value.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>      String futureDaysString = req.<STRONG>getParameter</STRONG>("days");</PRE></TD>
</TR>
</TABLE>

<P>The value of the <STRONG>days</STRONG> parameter is tested to see if it is null. If not, the <STRONG>parseInt()</STRONG> method of the <STRONG>Integer</STRONG> class is used to convert it to a <STRONG>long</STRONG> variable named <STRONG>futureDays.</P></STRONG>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>      if(futureDaysString != null){
        long futureDays = Integer.<STRONG>parseInt</STRONG>(
                                         futureDaysString);</PRE></TD>
</TR>
</TABLE>

<P>Appropriate arithmetic is then performed to convert the offset in days to an offset in milliseconds and the number of milliseconds is stored in a <STRONG>long</STRONG> variable named <STRONG>theFutureMillis</STRONG>.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>        long <STRONG>theFutureMillis</STRONG> = futureDays*24*60*60*1000;</PRE></TD>
</TR>
</TABLE>

<P>The offset in milliseconds is added to the number of milliseconds that represents the current date and time. The sum of the two produces a value in milliseconds that represents a different date and time. In the event that the value of the <STRONG>days</STRONG> parameter is negative, the sum represents negative future, or history.</P>
<P>A new <B>Date</B> object is constructed using a version of the constructor that takes milliseconds as an input parameter. A reference to the new <B>Date</B> object is assigned to the reference variable named <STRONG>theDate</STRONG>. That ends the code that is executed when the value of <STRONG>days</STRONG> is not null.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>        theDate = new Date(
                       theCurrentMillis + theFutureMillis);
      }//end if</PRE></TD>
</TR>
</TABLE>

<P>If the original value returned by <STRONG>getParameter()</STRONG> is null, all of the code that applies the offset is bypassed and the reference variable named <STRONG>theDate</STRONG> refers to an object that represents the current date and time. At this point, <STRONG>theDate</STRONG> refers to a <STRONG>Date</STRONG> object that either represents the current date and time, or represents a date and time calculated by applying an offset to the current date and time.</P>
<P>The next fragment is a rather complicated statement that formats the contents of the <STRONG>Date</STRONG> object in a particular way and delivers it as a <STRONG>String</STRONG> back to the server by passing the <STRONG>String</STRONG> as a parameter to the <STRONG>println()</STRONG> method. If you don't understand the formatting that is being used here, you should look it up in the JDK documentation.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>      out.println(DateFormat.getDateTimeInstance().
                                          format(theDate));</PRE></TD>
</TR>
</TABLE>

<P>The remaining code that is not shown here is an exception handler and some other wrap-up code. You can view it in the complete listing of the program that follows in the next section.</P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="program_listing"></A>Program Listing</H3>
</FONT><P>A complete listing of the program follows.</P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Servlet03.java, Copyright 1999, R.G.Baldwin

Rev 1/6/99 

This servlet is designed to illustrate Server Side 
Includes, commonly known as SSI.  

When used with the HTML file named Servlet03.shtml and the
JavaSoft Java Web Server, this servlet produced the 
following output in the browser window.  (Note that the 
output automatically took daylight savings time into 
account.)

The current date and time is: 
06-Jan-99 6:53:12 PM 

The date and time in 120 days will be: 
06-May-99 7:53:12 PM

Also note the requirement to use an extension of shtml on
the HTML file.  By default, the Java Web Server will parse
HTML files looking for included references to servlets only
if the extension is shtml.  (The required extension can be
changed using the administration program for the server.)

The substantive part of the HTML file named Servlet03.shtml
was as follows:
  
The current date and time is: &lt;br&gt; 
&lt;SERVLET CODE=Servlet03&gt;
&lt;/SERVLET&gt;

&lt;BR&gt;&lt;BR&gt;
The date and time in 120 days will be: &lt;br&gt; 
&lt;SERVLET CODE=Servlet03&gt;
&lt;PARAM NAME=days VALUE=120&gt;
&lt;/SERVLET&gt;

This shows two &lt;SERVLET&gt; tags in the HTML file, one which
specifies a parameter value of 120 and one that doesn't
specify a parameter value.  The remainder of the HTML file
was strictly boilerplate.

As the server is parsing the shtml file, whenever it finds
a &lt;SERVLET&gt; tag, it activates the servlet specified by the
CODE attribute.  The material produced by the servlet is
embedded in the HTML file by using that material to replace
the entire &lt;SERVLET&gt;...&lt;/SERVLET&gt; tag sequence before 
sending the HTML file back to the client.

The program was tested using two computers on the 
network, each running JDK 1.2 under Win95.

The HTTP server program from JavaSoft named Java Web 
Server 1.1.1 was running on one machine.  A browser was
running on a second machine.  

The file named Servlet03.shtml was stored in the 
public_html folder in the server's directory tree.

The servlet file named Servlet03.class was stored in the
servlets folder in the server's directory tree.

The browser was pointed to the following URL

http://webserver:8080/Servlet03.shtml

to request that the file named Servlet03.shtml be 
downloaded.  This caused the server to deliver the 
requested HTML file.  During delivery, the file was 
modified by two calls to the servlet caused by two 
&lt;SERVLET&gt; tags embedded in the HTML.

The servlet was not tested against the serevletrunner
program because it does not suppor SSI.
**********************************************************/
import java.io.*;
import java.util.Date;
import java.text.DateFormat;
import javax.servlet.*;
import javax.servlet.http.*;

public class Servlet03 extends HttpServlet{
  public void doGet(HttpServletRequest req, 
                    HttpServletResponse res)
                      throws ServletException, IOException{
                        
    try {
      //Get an output writer object to send data back to
      // the client.
/*
      //The following is the correct code to get an output
      // writer object to send data to the server for 
      // inclusion in the HTML page being returned to the 
      // client.  However, it doesn't work, apparently due
      // to a bug in the Java Web Server 1.1.1 from 
      // JavaSoft.
      PrintWriter out = res.getWriter();
*/
      //The following is a work-around for a bug in Java 
      // Web Server 1.1.1 from JavaSoft.
      PrintWriter out = new PrintWriter(
                               res.getOutputStream(),true);
      
      //Get a Date object containing the current date and
      // time.
      Date theDate = new Date();
      
      //Get the number of milliseconds required to 
      // represent the current date and time.
      long theCurrentMillis = theDate.getTime();

      //Get the parameter value from the SERVLET tag in
      // the shtml file.
      String futureDaysString = req.getParameter("days");
      
      //If a parameter was submitted, use it to determine
      // the date and time at a point in the future
      // represented by the number of days specified by
      // the parameter.
      if(futureDaysString != null){
        //Convert the String parameter to a long
        long futureDays = Integer.parseInt(
                                         futureDaysString);
        //Calculate number of milliseconds required to
        // represent that number of days.
        long theFutureMillis = futureDays*24*60*60*1000;
        //Add that number of milliseconds to the current
        // number of milliseconds and get the date and time
        // represented by the total.
        theDate = new Date(
                       theCurrentMillis + theFutureMillis);
      }//end if
      
      //Produce and output string that will be used by the
      // server.  See the JDK documentation for an 
      // explanation of the formatting provided by this
      // statement.  It is rather complex.
      out.println(DateFormat.getDateTimeInstance().
                                          format(theDate));

    }catch( Exception e ) {
      e.printStackTrace();
    }//end catch
  }//end doGet()
}//end class Servlet03</PRE></TD>
</TR>
</TABLE>

<P>-end-<!--end--></P></BODY>
</HTML>
