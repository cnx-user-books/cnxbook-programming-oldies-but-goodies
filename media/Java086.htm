<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Event Handling in JDK 1.1, Requesting the Focus<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 86, Revised 03/09/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#overview">Overview</a></li>

<li><a href="#the sample program">The Sample Program</a></li>

<ul><li><a href="#discussion">Discussion</a></li>

<ul><li><a href="#focus event processing">Focus Event Processing</a></li>

<li><a href="#mouse event processing">Mouse Event Processing</a></li>

<li><a href="#keyboard event processing">Keyboard Event Processing</a></li>

<li><a href="#window event processing">Window Event Processing</a></li>

<li><a href="#automatic component naming">Automatic Component Naming</a></li></ul>

<li><a href="#program listing">Program Listing</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><font color="#ff0000">Preface</font></h2></center>
Students in Prof. Baldwin's <b><u>Intermediate Java Programming</u></b>
classes at ACC are responsible for knowing and understanding all of the
material in this lesson.
<center><h2><a name="introduction"></a><b><font color="#ff0000">Introduction</font></b></h2></center>
An earlier lesson briefly discussed the <b>focusGained()</b> and <b>focusLost()</b>
events in the <i>Delegation Event Model</i> of JDK 1.1.

<p>This lesson takes another look at that topic through the use of a program
which forces an object which <u>doesn't usually gain the focus</u> in typical
Windows programs (a Label object) to
<ul><li>
not only gain the focus, but</li>

<li>
also respond to keyboard events.</li></ul>
This lesson is intended to illustrate the power, consistency, and flexibility
of the new <i>Delegation Event Model</i> in JDK 1.1.
<center><h2><a name="overview"></a><font color="#ff0000">Overview</font></h2></center>
A major weakness of the <i>Inheritance Event Model</i> in JDK 1.0.2 has
to do with decisions made by the runtime system as to the <u>type of events
it will generate</u> for visual components.

<p>For example, in JDK 1.0.2, it is apparently <u>not possible for a TextField
object to generate a mouse event</u> because the runtime system which creates
<b>Event </b>objects and passes them to the <b>postEvent()</b> method simply
doesn't create mouse events for <b>TextFields</b>.

<p>Many, and possibly all, of these <u>restrictions have been removed</u>
in the <i>Delegation Event Model</i> of JDK 1.1. The <i>Delegation Event
Model </i>provides for a <u>wide array of event types</u> across a <u>wide
array of visual component types</u>.

<p>It appears that in JDK 1.1, <u>most</u> of the standard visual components
can generate any of the low-level events <i>that make any sense</i> (although
I haven't tested all combinations of components and events).

<p>In this lesson, we use a <u>combination</u> of low-level <u>focus</u>,
<u>mouse</u>, and <u>keyboard</u> events to cause a <b>Frame</b>, a <b>Label</b>,
a <b>Button</b>, and a <b>TextField </b>all to
<ul><li><u>gain the focus</u> and to</li>

<li><u>respond to keyboard events</u>.</li></ul>
(Note that prior to 9/5/97, this section erroneously referred to focus
events as semantic events.)

<p>Note that Windows programs and RAD environments in BASIC, C++, and Pascal
often do not provide keyboard event support for <b>Labels </b>and <b>Frames
</b>and often <u>do not allow</u> <b>Labels </b>to <u>gain the focus</u>.

<p>Having a <b>Label</b> gain the focus and respond to keyboard events
may not be particularly useful by conventional standards, but the ability
to cause it to do so illustrates the power of the <i>Delegation Event Model</i>
in JDK 1.1.
<center><h2><a name="the sample program"></a><font color="#ff0000">The Sample Program</font></h2></center>
This section will present a discussion of the program followed by the program
listing.
<center><h3><a name="discussion"></a><font color="#ff0000">Discussion</font></h3></center>
This program is fairly <u>long</u>, but it is also fairly <u>repetitive</u>.

<p>The fact that it is repetitive speaks well for the Delegation Event
Mode.

<p>The code <u>syntax</u> required to <u>handle one type of event on one
type of object</u> is very <u>similar</u> to the code required to <u>handle
other types of events on the same or different objects</u>.

<p>Once you learn the syntax, you should be able to write programs that
are generally <u>error free</u>.

<p>A <b>Button </b>object, a <b>TextField </b>object, and a <b>Label </b>object
are placed in a <b>Frame </b>object.

<p>Normally you cannot see the outline of a Label object, so its <u>background
color is made <font color="#000000">yellow</font></u><font color="#000000"></font>so that it will show up in the <font color="#000000">white </font>expanse
of the <b>Frame </b>object.
<center><h4><a name="focus event processing"></a><font color="#ff0000">Focus Event
Processing</font></h4></center>
A <b>FocusListener </b>object is <u>instantiated and registered</u> to
listen for <b>focusGained()</b> and <b>focusLost()</b> events on the <b>Frame
</b>and the <b>Label</b>. When these events occur, the <b>FocusListener</b>
object makes a <u>color change</u> on the <b>Frame </b>or the <b>Label
</b>to provide a visual indication of focus gained or lost.

<p>One of the benefits of the <i>Delegation Event Model</i> is the ability
to <u>filter events</u> so that event-handler code needs to <u>deal only
with those events that are of interest</u>.

<p>In this particular program, the <b>TextField </b>object and the <b>Button
</b>object <u>also generate focus events</u>. However, there was no reason
to process them, so the FocusListener object simply <u>wasn't registered</u>
to be notified when they occurred.

<p>In JDK 1.0.2, the filtering of events to only those handlers that needed
to deal with them isn't nearly as clean.

<p>When the <b>Label </b>has the focus, its text is <font color="#000000">red</font>.
Otherwise, its text is black.

<p>When the <b>Frame </b>has the focus, its background color is <font color="#000000">blue</font>.
Otherwise, it is <font color="#000000">white</font>.

<p>Note that the <b>Button </b>and the <b>TextField </b>components <u>automatically</u>
provide a visual indication of focus without <u>intervention by the programmer</u>.
<center><h4><a name="mouse event processing"></a><font color="#ff0000">Mouse Event
Processing</font></h4></center>
A <b>MouseListener </b>object is instantiated and registered to listen
for low-level mousePressed() events on the <b>Frame </b>and the <b>Label</b>.
(The above comments regarding event filtering apply here also.)

<p>When such an event occurs, the <b>MouseListener</b> object invokes <b>requestFocus()</b>
on the visual component object. This causes the <b>Label </b>and the <b>Frame
</b>to <u>receive the focus when clicked on</u>. This is decidedly <u>unusual
behavior</u> for a <b>Label</b> object.

<p>Note that the <b>Button </b>and the <b>TextField </b><u>automatically</u>
receive the focus when clicked on <u>without intervention by the programmer</u>.
<center><h4><a name="keyboard event processing"></a><font color="#ff0000">Keyboard
Event Processing</font></h4></center>
A <b>KeyListener </b>object is instantiated and registered to listen for
<b>keyPressed()</b> events on the <b>Frame</b>, <b>Label</b>, <b>Button</b>,
and <b>TextField </b>objects.

<p>Whenever a key is pressed, the <u>object currently holding the focus</u>
generates a <b>keyPressed()</b> event, even if it is a type of object that
we don't normally expect to respond to the keyboard (such as the <b>Label</b>).

<p>The <b>KeyListener </b>object <u>determines which</u> visual component
generated the event and <u>displays a message</u> to that effect.

<p>Thus, the <b>Label </b>and the <b>Frame </b>which <u>don't normally
respond to the keyboard</u> are forced to respond to the keyboard in this
program.

<p>The comments at the beginning of the program <u>show the messages</u>
generated by each of the four visual components <u>when a key is pressed
while that component has the focus</u>.
<center><h4><a name="window event processing"></a><font color="#ff0000">Window Event
Processing</font></h4></center>
Finally, a <b>WindowListener </b>object is instantiated and registered
to terminate the program when the user closes the <b>Frame </b>object.
We have used this type of event processing in previous lessons so there
is nothing new here.
<center><h4><a name="automatic component naming"></a><font color="#ff0000">Automatic
Component Naming</font></h4></center>
Whenever an object of the Component class is instantiated, <u>it is automatically
given a component name</u>.

<p>That name can be <u>accessed</u> using the <b>getName()</b> method of
the <b>Component </b>class, and it can be <u>changed</u> using the <b>setName()</b>
method of the <b>Component </b>class.

<p>This program uses the component name to <u>determine which component
generated an event</u> in those cases where there is a choice.

<p>A sample program in a <u>previous lesson</u> established the names of
various components using the <b>setName()</b> method of the Component class.
However, it was pointed out at that time that the Beta 3 version of JDK
1.1 <u>does not enforce a requirement for unique component names</u> when
those names are set by code in the program. This can lead to problems if
the programmer isn't careful to always assign unique names.

<p>This program <u>assumes that the names which are automatically given
to the components are unique</u> and instead of assigning names for later
use in distinguishing among components, it <u>retrieves and saves</u> the
names which are <u>automatically assigned</u>. These names are later used
to distinguish among components to determine which component generated
an event.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
A listing of the program follows. Additional information about the operation
of the program is provided in the comments.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Event15.java Copyright 1997, R.G.Baldwin
Revised 03/09/98 to fit on the page better.

This program is designed to be compiled and run&nbsp;
under JDK 1.1

Illustrates how visual components such as Label objects can
be forced to gain the focus, and can then respond to&nbsp;
keyboard events while they have the focus.&nbsp; (Note that, by
convention, Label objects don't typically gain the focus&nbsp;
and don't usually respond to the keyboard in typical&nbsp;
Windows programs.)

A Button object, a TextField object, and a Label object are
placed in a Frame object.

A FocusListener object is instantiated and registered to&nbsp;
listen for focusGained() and focusLost() events on the&nbsp;
Frame and the Label.&nbsp; When these events occur, the listener
object makes a color change on the Frame or Label to&nbsp;
provide a visual indication of focus gained or lost.&nbsp;&nbsp;

When the Label has the focus, its text is red.&nbsp; Otherwise,
its text is black.&nbsp; When the Frame has the focus, its&nbsp;
background color is blue. Otherwise, it is white.

Note that the Button and the TextField components&nbsp;
automatically provide a visual indication of focus without
intervention by the programmer.

A MouseListener object is instantiated and registered to&nbsp;
listen for low-level mousePressed() events on the Frame and
the Label.&nbsp; When such an event occurs, the mouse listener&nbsp;
object invokes requestFocus() on the object that was the&nbsp;
source of the mouse event. This causes the Label and the&nbsp;
Frame to receive the focus when clicked on.

Note that the Button and the TextField automatically&nbsp;
receive the focus when clicked on without intervention by&nbsp;
the programmer.

A KeyListener object is instantiated and registered to&nbsp;
listen for keyPressed() events on the Frame, Label, Button,
and TextField objects.&nbsp;&nbsp;

Whenever a key is pressed, the object currently holding the
focus generates a keyPressed() event.&nbsp; The KeyListener&nbsp;
object determines which component generated the event and&nbsp;
displays a message to that effect.&nbsp; Thus, the Label and the
Frame which "don't normally respond" to the keyboard are&nbsp;
forced to respond to the keyboard in this program.

Finally, a WindowListener object is instantiated and&nbsp;
registered to terminate the program when the user closes&nbsp;
the Frame object.


Pressing a key causes messages such as the following to be
displayed:

Got keyPressed event from textfield0
Got keyPressed event from frame0
Got keyPressed event from label0
Got keyPressed event from button0

This program retrieves and saves the component names&nbsp;
automatically assigned to the visual components (under the
assumption that the system will assign unique names) and&nbsp;
uses those names to determine which component generated an
event when such determination is necessary.

These results were produced using JDK 1.1.3 under Win95
**********************************************************/

import java.awt.*;
import java.awt.event.*;

public class Event15 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Event15
//=======================================================//

//The following class is used to instantiate a graphical&nbsp;
// user interface object.
class GUI {
&nbsp; //save automatic component name here
&nbsp; String myTextFieldName;&nbsp;
&nbsp; String myButtonName;
&nbsp; String myFrameName;
&nbsp; String myLabelName;
&nbsp; Frame myFrame;//ref variable passed as parameter
&nbsp; Label myLabel;

&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create several visual components&nbsp;
&nbsp;&nbsp;&nbsp; TextField myTextField = new TextField(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "TextField Object");
&nbsp;&nbsp;&nbsp; //save the name of the component
&nbsp;&nbsp;&nbsp; myTextFieldName = myTextField.getName();

&nbsp;&nbsp;&nbsp; myLabel = new Label("LabelObject");
&nbsp;&nbsp;&nbsp; myLabelName = myLabel.getName();
&nbsp;&nbsp;&nbsp; //make it yellow so it will show up
&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.yellow);

&nbsp;&nbsp;&nbsp; Button myButton = new Button("Button Object");
&nbsp;&nbsp;&nbsp; myButtonName = myButton.getName();
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame = new Frame();
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,300);
&nbsp;&nbsp;&nbsp; myFrame.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrameName = myFrame.getName();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the other objects to the frame using default&nbsp;
&nbsp;&nbsp;&nbsp; // border layout manager
&nbsp;&nbsp;&nbsp; myFrame.add("North",myButton);
&nbsp;&nbsp;&nbsp; myFrame.add("South",myTextField);
&nbsp;&nbsp;&nbsp; myFrame.add("West",myLabel);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);//make the frame visible
&nbsp;&nbsp;&nbsp; //shift the focus to the TextField
&nbsp;&nbsp;&nbsp; myTextField.requestFocus();

&nbsp;&nbsp;&nbsp; //Instantiate and register a FocusListener object which
&nbsp;&nbsp;&nbsp; // will process focus events on two different visual&nbsp;
&nbsp;&nbsp;&nbsp; // components.&nbsp; In this case, the listener object makes
&nbsp;&nbsp;&nbsp; // a color change on the visual component to indicate&nbsp;
&nbsp;&nbsp;&nbsp; // focus gained or focus lost.
&nbsp;&nbsp;&nbsp; myFocusListener focusHandler =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new myFocusListener(this);
&nbsp;&nbsp;&nbsp; myFrame.addFocusListener(focusHandler);&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myLabel.addFocusListener(focusHandler);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a MouseListener object which
&nbsp;&nbsp;&nbsp; // will process mouse events on two different visual&nbsp;
&nbsp;&nbsp;&nbsp; // components.&nbsp; In this case, the listener object&nbsp;
&nbsp;&nbsp;&nbsp; // specifically requests focus for the Label and the&nbsp;
&nbsp;&nbsp;&nbsp; // Frame components when those components are clicked&nbsp;
&nbsp;&nbsp;&nbsp; // on.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myMouseListener mouseHandler =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new myMouseListener(this);
&nbsp;&nbsp;&nbsp; myFrame.addMouseListener(mouseHandler);
&nbsp;&nbsp;&nbsp; myLabel.addMouseListener(mouseHandler);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a KeyListener object which
&nbsp;&nbsp;&nbsp; // will process key events on four different
&nbsp;&nbsp;&nbsp; // components.&nbsp; Whenever a key is pressed, a message is
&nbsp;&nbsp;&nbsp; // displayed showing that the component that had the&nbsp;
&nbsp;&nbsp;&nbsp; // focus received a keyPressed event.
&nbsp;&nbsp;&nbsp; myKeyListener keyHandler = new myKeyListener(this);
&nbsp;&nbsp;&nbsp; myFrame.addKeyListener(keyHandler);
&nbsp;&nbsp;&nbsp; myTextField.addKeyListener(keyHandler);
&nbsp;&nbsp;&nbsp; myButton.addKeyListener(keyHandler);
&nbsp;&nbsp;&nbsp; myLabel.addKeyListener(keyHandler);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; //Instantiate and register a WindowListener object&nbsp;
&nbsp;&nbsp;&nbsp; // which will terminate the program when the user&nbsp;
&nbsp;&nbsp;&nbsp; // closes the Frame object
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(winProcCmd1);
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//This FocusListener class is used to instantiate a&nbsp;
// Listener object that listens for focus events on the&nbsp;
// Frame and the Label. Whenever a focusLost() or&nbsp;
// focusGained() event occurs, it makes a color change on&nbsp;
// the component to provide a visual indication of the
// gain or loss of focus.

class myFocusListener implements FocusListener{
&nbsp; GUI thisObject;
&nbsp;&nbsp;
&nbsp; myFocusListener(GUI thisObjectIn){//constructor
&nbsp;&nbsp;&nbsp; thisObject = thisObjectIn;
&nbsp; }// end constructor
&nbsp;&nbsp;
&nbsp; public void focusGained(FocusEvent e){
&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myFrameName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myFrame.setBackground(Color.blue);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myLabelName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myLabel.setForeground(Color.red);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; thisObject.myFrame.repaint();
&nbsp; }//end focusGained()

&nbsp; public void focusLost(FocusEvent e){
&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myFrameName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myFrame.setBackground(Color.white);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end if&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myLabelName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myLabel.setForeground(Color.black);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end if&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; thisObject.myFrame.repaint();
&nbsp; }//end focusLost()
}//end class myFocusListener
//=======================================================//

//This listener class listens for mouse presses on the&nbsp;
// Frame and Label components.&nbsp; These components do not
// automatically receive the focus when clicked with the
// mouse.&nbsp; This listener class requests the focus for these
// components when they are clicked on with the mouse.

class myMouseListener extends MouseAdapter{
&nbsp; GUI thisObject;
&nbsp;&nbsp;
&nbsp; myMouseListener(GUI thisObjectIn){//constructor
&nbsp;&nbsp;&nbsp; thisObject = thisObjectIn;
&nbsp; }//end constructor
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myFrameName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myFrame.requestFocus();
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myLabelName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myLabel.requestFocus();
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end mousePressed()
}//end class myMouseListener
//=======================================================//

//This listener class listens for key presses and displays
// a message when a keyPressed() event occurs. The
// component that has the focus when the keyPress event
// occurs generates the event.&nbsp; This class identifies the
// component that generated the event and displays a&nbsp;
// message identifying that component.

// The significant thing here is that any component that
// has the focus will generate a keyPress event, including
// those components, such as Label objects, which don't
// "normally" have the focus.

class myKeyListener extends KeyAdapter{
&nbsp; GUI thisObject;
&nbsp;&nbsp;
&nbsp; myKeyListener(GUI thisObjectIn){//constructor
&nbsp;&nbsp;&nbsp; thisObject = thisObjectIn;
&nbsp; }//end constructor

&nbsp; public void keyPressed(KeyEvent e){
&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myFrameName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Got keyPressed event from " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myFrameName);
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myTextFieldName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Got keyPressed event from " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myTextFieldName);
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myButtonName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Got keyPressed event from " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myButtonName);
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; if( e.toString().indexOf(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "on " + thisObject.myLabelName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Got keyPressed event from " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObject.myLabelName);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end keyPressed()
}//end class myKeyListener
//=======================================================//

//The following listener is used to terminate the&nbsp;
// program when the user closes the Frame object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=======================================================//</pre></td></tr></table>
This program contains a lot of useful information about <i>event handling</i>
in general and <i>focus </i>in particular in JDK 1.1. It would be well
for you to study it and understand how it works.
<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Without viewing the following solution, write a Java application that
illustrates the use of the focusGained and focusLost events along with
the keyPressed event.

<p>A Button object and a TextField object are placed in a Frame object.
Focus can be moved between the two by pressing the tab key or clicking
on them with the mouse.

<p>A WindowListener object is instantiated and registered to terminate
the program when the user closes the Frame object. Pressing the tab key
causes messages such as the following to be displayed:
<pre>Got keyPressed event from button0
java.awt.event.FocusEvent[FOCUS_LOST,permanent] on button0
java.awt.event.FocusEvent[FOCUS_GAINED,permanent] on textfield0
Got keyPressed event from textfield0
java.awt.event.FocusEvent[FOCUS_LOST,permanent] on textfield0
java.awt.event.FocusEvent[FOCUS_GAINED,permanent] on button0</pre><font color="#0000ff"><font size=-1>A - See program below.</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File SampProg124.java from lesson 86
Copyright 1997, R.G.Baldwin
*/
//=========================================================

import java.awt.*;
import java.awt.event.*;

public class SampProg124 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg124
//==========================================================

class GUI {
&nbsp; String myTextFieldName; //save component names here
&nbsp; String myButtonName;
&nbsp;&nbsp;
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create visual components&nbsp;
&nbsp;&nbsp;&nbsp; TextField myTextField =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new TextField("TextField Object");
&nbsp;&nbsp;&nbsp; myTextFieldName = myTextField.getName();//save the name

&nbsp;&nbsp;&nbsp; Button myButton = new Button("Button Object");
&nbsp;&nbsp;&nbsp; myButtonName = myButton.getName();//save the name
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame();
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,100);
&nbsp;&nbsp;&nbsp; myFrame.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add objects to the frame using default border&nbsp;
&nbsp;&nbsp;&nbsp; // layout manager
&nbsp;&nbsp;&nbsp; myFrame.add("North",myButton);
&nbsp;&nbsp;&nbsp; myFrame.add("South",myTextField);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);//make the frame visible
&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a FocusListener object
&nbsp;&nbsp;&nbsp; myFocusListener focusHandler = new myFocusListener();
&nbsp;&nbsp;&nbsp; myButton.addFocusListener(focusHandler);
&nbsp;&nbsp;&nbsp; myTextField.addFocusListener(focusHandler);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a KeyListener object&nbsp;
&nbsp;&nbsp;&nbsp; myKeyListener keyHandler = new myKeyListener(this);
&nbsp;&nbsp;&nbsp; myTextField.addKeyListener(keyHandler);
&nbsp;&nbsp;&nbsp; myButton.addKeyListener(keyHandler);

&nbsp;&nbsp;&nbsp; //Instantiate and register a WindowListener object&nbsp;
&nbsp;&nbsp;&nbsp; // which will terminate the program when the user&nbsp;
&nbsp;&nbsp;&nbsp; // closes the Frame object
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(winProcCmd1);
&nbsp; }//end constructor
}//end class GUI definition
//=========================================================

//This FocusListener class is used to instantiate a&nbsp;
// Listener object that listens for focus events on the&nbsp;
// button and textField components. Whenever a focusLost()&nbsp;
// or focusGained() event occurs, it displays a message to&nbsp;
// that effect.

class myFocusListener implements FocusListener{
&nbsp;&nbsp;
&nbsp; public void focusGained(FocusEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(e.toString());
&nbsp; }//end focusGained()

&nbsp; public void focusLost(FocusEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(e.toString());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end focusLost()
}//end class myFocusListener
//=========================================================

//This listener class listens for key presses and displays
// a message when a keyPressed() event occurs. The visual&nbsp;
// component that has the focus when the keyPress event&nbsp;
// occurs generates the event.&nbsp; This class identifies the&nbsp;
// component that generated the event and displays a&nbsp;
// message identifying that component.

class myKeyListener extends KeyAdapter{
&nbsp; GUI thisObject;
&nbsp;&nbsp;
&nbsp; myKeyListener(GUI thisObjectIn){//constructor
&nbsp;&nbsp;&nbsp; thisObject = thisObjectIn;
&nbsp; }//end constructor

&nbsp; public void keyPressed(KeyEvent e){
&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + thisObject.myTextFieldName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Got keyPressed event from "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + thisObject.myTextFieldName);
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; if( e.toString().indexOf("on "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + thisObject.myButtonName) != -1 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Got keyPressed event from "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + thisObject.myButtonName);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end keyPressed()
}//end class myKeyListener
//=========================================================

//The following listener is used to terminate the&nbsp;
// program when the user closes the Frame object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=========================================================</pre></td></tr></table>
-end-<!--end--></body></html>