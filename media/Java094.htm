<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Event Handling in JDK 1.1, Using Abbreviated Inner Classes<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 94, Revised 02/21/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#first the sample program">First Sample Program</a></li>

<ul><li><a href="#discussion of first sample program">Discussion of First Sample
Program</a></li>

<li><a href="#program listing of first sample program">Program Listing of First
Sample Program</a></li></ul>

<li><a href="#second sample program">Second Sample Program</a></li>

<ul><li><a href="#discussion of second sample program">Discussion of Second Sample
Program</a></li>

<li><a href="#program listing of second sample program">Program Listing of
Second Sample Program</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><font color="#ff0000">Preface</font></h2></center>
Students in Prof. Baldwin's <b><u>Intermediate Java Programming</u></b>
classes at ACC are responsible for knowing and understanding all of the
material in this lesson.
<center><h2><a name="introduction"></a><b><font color="#ff0000">Introduction</font></b></h2></center>
JDK 1.1 was formally released on February 18, 1997. This lesson was originally
written on February 27, 1997 using the software and documentation in JDK
1.1.

<p>One of the new features in JDK 1.1 in the capability to create <i>inner
classes</i> and also to use a somewhat cryptic abbreviated syntax for the
<i>definition of anonymous classes</i> and the <i>instantiation of anonymous
objects</i> from those classes.

<p>The instantiation of <b>Listener </b>objects is a strong candidate for
the use of anonymous classes and objects as provided by the <i>inner class</i>
capability.

<p>An entire series of lessons will be dedicated to a discussion of inner
classes. The purpose of this lesson is simply to <u>introduce you to the
concept</u> so that you will know what you are seeing whenever you encounter
code using the <u>abbreviated <i>inner class </i>syntax</u>.

<p>Two sample programs will be presented and discussed. The first will
be implemented using Inner Classes, but will <u>not use the anonymous class,
anonymous object syntax</u>.

<p>Then the same program will be presented after having been modified to
<u>use the anonymous class, anonymous object syntax</u>.

<p>This will make it possible for you to <u>compare the two</u> and hopefully
gain a better understanding the abbreviated syntax version.

<p>The topic of <i>inner classes</i> is a broad topic. The discussion of
the technical aspects of inner classes will be <u>very brief</u>. Also
there are many aspects of inner classes that won't be discussed even briefly.

<p>You will probably need to refer to either the JDK 1.1 documentation
package, or the lessons dedicated to inner classes to fully understand
the material presented in this lesson.

<p><font color="#000000">According to the JDK 1.1 Documentation:</font><ul><li><font color="#000000">"Inner classes allow classes to be defined in any
scope. In previous releases, Java supported only top-level classes, which
must be members of packages. In this release, the programmer can now define
inner classes as members of other classes, locally within a block of statements,
or (anonymously) within an expression."</font></li></ul>

<center><h2><a name="first the sample program"></a><font color="#ff0000">First Sample
Program</font></h2></center>
As mentioned earlier, in order to avoid some of the cryptic aspects of
anonymous classes/objects, the first sample program makes use of inner
classes in a <u>relatively straightforward manner</u>. Classes are defined
inside of classes and those class definitions are used to instantiate the
necessary objects.

<p>This differs significantly from previous lessons on the Delegation Event
Model where the classes needed to instantiate <b>Listener </b>objects were
top-level classes (direct subclasses of the class <b>object</b> or subclasses
of <b>adapter</b> classes such as <b>MouseAdapter</b>).

<p>In this program, the classes needed to instantiate <b>Listener </b>objects,
as well as some others are nested within other classes.
<center><h3><a name="discussion of first sample program"></a><font color="#ff0000">Discussion
of First Sample Program</font></h3></center><font color="#000000">The inner class capability does not exist in JDK
1.0. Therefore, this program is designed to be compiled and run under JDK
1.1</font>

<p><font color="#000000">The program combines the use of inner classes
with event handling under the JDK 1.1 Delegation Event Handling model.</font>

<p><font color="#000000">The controlling class is named Event23. An inner
class named <b>GUI </b>is defined inside the class named <b>Event23 </b>and
an object of that class is instantiated inside the <b>main()</b> method.</font>

<p><font color="#000000">In addition, two "data processing" methods named
<b>sing()</b> and <b>whistle()</b> are defined inside the controlling class.
They are defined in such a way as <u>to be separated</u> from the event
handling activity except that they are invoked by the event handler methods.</font>

<p><font color="#000000"><u>Three additional</u> inner classes are defined
inside the inner class named <b>GUI</b>. They are named <b>SingActionListener</b>,
<b>WhistleActionListener</b>, and <b>Terminator</b>. All three of these
are <b>Listener </b>classes. The first two implement the <b>ActionListener
</b>interface while the third extends the <b>WindowListener </b>adapter.</font>

<p><font color="#000000">The first two override the <b>actionPerformed()</b>
method of the <b>ActionListener </b>interface while the third overrides
the <b>windowClosing()</b> method of the <b>WindowListener </b>interface.</font>

<p><font color="#000000">The class named <b>GUI </b>extends <b>Frame</b>.
Two <b>Button </b>objects labeled <i>Sing </i>and <i>Whistle </i>are instantiated
in the <b>GUI </b>constructor. They are referenced by variables named <b>singButton
</b>and <b>whistleButton </b>respectively. Both buttons are added to the
<b>Frame </b>object.</font>

<p><font color="#000000">Although this sample program does not use anonymous
classes, it <u>does use anonymous objects</u>. Anonymous <b>Listener </b>objects
of the classes <b>SingActionListener </b>and <b>WhistleActionListener </b>are
instantiated and <u>registered for event handling</u> on the two <b>Button
</b>objects having similar names.</font>

<p><font color="#000000">Another anonymous <b>Listener </b>object of the
class <b>Terminator </b>is registered for event handling on the <b>Frame
</b>object of class <b>GUI</b>.</font>

<p><font color="#000000">When the program starts, a <b>Frame </b>object
containing the two buttons appears on the screen. When the user clicks
on the button labeled <i>Sing</i>, the event handler registered to listen
for <b>Action </b>events on that button invokes the method named <b>sing()</b>
which in turn displays the message</font>

<p><b><font color="#000000">"I am singing, Tra la la"</font></b>

<p><font color="#000000">When the user clicks on the button labeled <i>Whistle</i>,
the event handler registered to listen for <b>Action </b>events on that
button invokes the method named <b>whistle()</b> which in turn displays
the message</font>

<p><b><font color="#000000">"I am whistling, Tweet, Tweet, Tweet"</font></b>

<p><font color="#000000">When the user clicks the "close" box on the <b>Frame</b>,
the event handler registered to listen for <b>windowClosing()</b> events
on the <b>Frame </b>terminates the program.</font>

<p><font color="#000000">These results were produced using JDK 1.1 running
under Windows 95. */</font><center><h3><a name="program listing of first sample program"></a><font color="#ff0000">Program
Listing of First Sample Program</font></h3></center>
A listing of the program with additional comments follows:
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Event23.java Copyright 1997, R.G.Baldwin
Revised 9/17/97
This program is designed to be compiled and run under&nbsp;
JDK 1.1

The program illustrates the use of Inner Classes with event&nbsp;
handling under the JDK 1.1 Delegation Event Handling model.

The controlling class is named Event23.&nbsp; An Inner Class&nbsp;
named GUI is defined inside the class named Event23 and an
object of that class is instantiated inside the main()&nbsp;
method.

In addition, two "data processing" methods named sing() and
whistle() are defined inside the controlling class.&nbsp; They&nbsp;
are defined in such a way as to be separated from the event
handling activity except that they are invoked by the event
handler methods.

Three more Inner Classes are defined inside the Inner Class
named GUI. They are named SingActionListener,&nbsp;
WhistleActionListener, and Terminator.&nbsp; All three of these&nbsp;
are Listener classes.&nbsp; The first two implement the&nbsp;
ActionListener interface while the third extends the
WindowListener adapter.

The first two override the actionPerformed() method of the&nbsp;
ActionListener interface while the third overrides the&nbsp;
windowClosing() method of the WindowListener interface.

The class named GUI extends Frame.&nbsp; Two Button objects&nbsp;
labeled Sing and Whistle are instantiated in the GUI&nbsp;
constructor. They are referenced by variables named&nbsp;
singButton and whistleButton respectively.&nbsp; Both buttons
are added to the Frame object.

Anonymous Listener objects of the classes&nbsp;
SingActionListener and WhistleActionListener are&nbsp;
instantiated and registered for event handling on the two&nbsp;
Button objects having similar names.

An anonymous Listener object of the class Terminator is&nbsp;
registered for event handling on the Frame object of class&nbsp;
GUI.

When the program starts, a Frame object containing the two&nbsp;
buttons appears on the screen.&nbsp; When the user clicks on the
button labeled Sing, the event handler registered to&nbsp;
listen for Action events on that button invokes the method&nbsp;
named sing() causing the message

"I am singing, Tra la la"&nbsp;

to be displayed on the screen.

When the user clicks on the button labeled Whistle, the&nbsp;
event handler registered to listen for Action events on&nbsp;
that button invokes the method named whistle() causing the&nbsp;
message&nbsp;

"I am whistling, Tweet, Tweet, Tweet"

to be displayed on the screen.

When the user clicks the "close" box on the Frame, the&nbsp;
event handler registered to listen for windowClosing()&nbsp;
events on the Frame terminates the program.

This version uses long form notation as opposed to the use
of anonymous inner classes.&nbsp; See the program named Event22&nbsp;
for a version that uses the more cryptic abbreviated&nbsp;
notation attributable to the use of anonymous inner&nbsp;
classes.

These results were produced using JDK 1.1 running under&nbsp;
Windows 95.
*/
//=========================================================

import java.awt.*;
import java.awt.event.*;

public class Event23 {
&nbsp; //The following two methods are invoked directly from
&nbsp; // code in methods defined in classes which are inner-
&nbsp; // classes of this class.
&nbsp; void sing() {System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "I am singing, Tra la la");}
&nbsp; void whistle() {System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "I am whistling, Tweet Tweet Tweet");}

&nbsp; //-------------------------------------------------------
&nbsp; static public void main(String[] args){
&nbsp;&nbsp;&nbsp; Event23 app = new Event23();
&nbsp;&nbsp;&nbsp; //Note the syntax in the following statement where the
&nbsp;&nbsp;&nbsp; // new operator is joined to the reference to the
&nbsp;&nbsp;&nbsp; // object of a class in which the GUI inner class is
&nbsp;&nbsp;&nbsp; // defined in order to instantiate an object of the
&nbsp;&nbsp;&nbsp; // GUI class.
&nbsp;&nbsp;&nbsp; GUI gui = app.new GUI();&nbsp;
&nbsp; }//end main()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //-------------------------------------------------------
&nbsp; //Note that the following GUI class is defined inside&nbsp;
&nbsp; // the Event23 class and thus is an inner-class of the
&nbsp; // Event23 class.
&nbsp; class GUI extends Frame{
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------
&nbsp;&nbsp;&nbsp; //Note that the SingActionListener class is defined
&nbsp;&nbsp;&nbsp; // inside the GUI class which is defined inside the
&nbsp;&nbsp;&nbsp; // Event23 class.
&nbsp;&nbsp;&nbsp; class SingActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Implement the actionPerformed method which is
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // declared in the ActionListener interface.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that because this class is defined inside
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the GUI class which is defined inside the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Event23 class, this method has direct
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // access to the members of the Event23 class.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Therefore, this method can directly access the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // method named sing() without having to access
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // it via an object of type Event23.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sing();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp; }//end SingActionListener class defined inside GUI&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------
&nbsp;&nbsp;&nbsp; //Note that the WhistleActionListener class is defined
&nbsp;&nbsp;&nbsp; // inside the GUI class which is defined inside the
&nbsp;&nbsp;&nbsp; // Event23 class.
&nbsp;&nbsp;&nbsp; class WhistleActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //As mentioned earlier, this inner-class of the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // has direct access to the members of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Event23 class without the requirement to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // access via an object of type Event23.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; whistle();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp; }//end WhistleActionListener class defined inside GUI
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------
&nbsp;&nbsp;&nbsp; //Note that the Terminator class is defined inside the&nbsp;
&nbsp;&nbsp;&nbsp; // GUI class which is defined inside the Event23 class.
&nbsp;&nbsp;&nbsp; class Terminator extends WindowAdapter{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp; }//end class Terminator defined inside GUI class
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public GUI(){//constructor for GUI class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button singButton;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(singButton = new Button("Sing"),"North");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; singButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SingActionListener() );

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button whistleButton;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(whistleButton = new Button("Whistle"),"South");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; whistleButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WhistleActionListener() );

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Register a Listener object for event handling on&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the Frame object of class GUI.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminator());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set frame size and make visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setSize(300,100);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setVisible(true);
&nbsp;&nbsp;&nbsp; }//end GUI constructor
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------
&nbsp; }//end class GUI which is defined inside Event23 class
&nbsp; //-------------------------------------------------------
}//end class Event23
//=========================================================</pre></td></tr></table>

<center><h2><a name="second sample program"></a><font color="#ff0000">Second Sample
Program</font></h2></center>
The second sample program is similar to the first, <u>except</u> that it
makes use of <u>anonymous classes</u> for instantiation of the <b>Listener
</b>objects.
<center><h3><a name="discussion of second sample program"></a><font color="#ff0000">Discussion
of Second Sample Program</font></h3></center><font color="#000000">In order to make small adapter classes (such as <b>Listener
</b>classes) as concise as possible, Java 1.1 allows an abbreviated notation
for local objects.</font>

<p><font color="#000000">A <u>single expression</u> combines</font><ul><li><font color="#000000">the definition of an anonymous class with</font></li>

<li><font color="#000000">the allocation of the instance.</font></li></ul><font color="#000000">Here is a code fragment from the second sample program
which illustrates this concept.</font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>singButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>new ActionListener()</b>{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b>actionPerformed(ActionEvent e)</b>{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>sing();//call</b> the sing() method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener
&nbsp;&nbsp;&nbsp; );//end addActionListener()</pre></td></tr></table><font color="#000000">In this case, the code defines a new anonymous class
that <u>automatically implements</u> the <b>ActionListener </b>interface
(<u>without</u> use of the keyword <b>implements</b>) and <u>automatically
instantiates</u> an anonymous object of that new class.</font>

<p><font color="#000000">In this case, the word <i>anonymous </i>indicates
that neither the class nor the object are named.</font>

<p><font color="#000000">In previous lessons we have instantiated anonymous
objects by using the <b>new</b> operator and making a call to the constructor
for the object as part of a larger overall expression. However, we have
not done that using <u>classes that had no name</u>.</font>

<p><font color="#000000">Another interesting aspect of this syntax is the
following code fragment which looks like a constructor call in a typical
object instantiation.</font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><b>new ActionListener()</b>{...</pre></td></tr></table><font color="#000000">However, <b>ActionListener </b>is not a class, it
is an interface and since an interface cannot contain any fully defined
methods, it doesn't seem that it could have a constructor (but it works
anyway).</font>

<p><font color="#000000">Pay particular attention to the positions of the
<u>open and close parentheses</u> which define the argument list for the
<b>addActionListener()</b> method.</font>

<p><font color="#000000">The <u>definition of the anonymous class</u> as
well as the <u>instantiation of the anonymous object</u> are both included
in the argument list of <b>addActionListener()</b>.</font>

<p><font color="#000000">The addActionListener<b>()</b> method is used
to <u>register</u> this anonymous object to listen for <b>actionPerformed()</b>
events on the <b>Button </b>object named <b>singButton</b>. Whenever an
<b>Action </b>event occurs on that specific button, the overridden <b>actionPerformed()</b>
method invokes the "data processing" method named <b>sing()</b>. Because
this is an inner-class of the outer-class in which the method <b>sing()</b>
is defined, code in the inner-class has direct access to the method named
<b>sing() </b>without the requirement to instantiate an object of the outer-class.</font>

<p><font color="#000000">When using the abbreviated syntax, a <b>new</b>
operator expression <u>can end with a class body</u>. According to the
JDK 1.1 documentation:</font><ul><li><font color="#000000">"The effect of this is to take the class (or interface)
named after the <b>new </b>token, and subclass it (or implement it) with
the given body. The resulting anonymous inner-class has the same meaning
as if the programmer had defined it locally, with a name, in the current
block of statements."</font></li></ul><font color="#000000">It is important to note that an <u>anonymous</u>
class can have initializers but it <u>cannot have a constructor</u>. The
argument list of the associated <b>new </b>expression is implicitly passed
to a constructor of the superclass.</font>

<p><font color="#000000">For the second sample program which follows, the
controlling class is named <b>Event22</b>. As before, an inner class named
<b>GUI </b>is defined inside the class named <b>Event22 </b>and an object
of that class is instantiated inside the <b>main()</b> method.</font>

<p><font color="#000000">Also as before, two "data processing" methods
named <b>sing()</b> and <b>whistle()</b> are defined inside the controlling
class. They are defined in such a way as to be separated from the event
handling activity except that they are <u>invoked by the event handler
methods</u>.</font>

<p><font color="#000000">However, unlike the first sample program, <u>abbreviated
notation is used</u> to anonymously define the classes for and instantiate
three anonymous listener objects inside the inner class named <b>GUI</b>.
The first two implement the <b>ActionListener </b>interface while the third
extends the <b>WindowListener </b>adapter class.</font>

<p><font color="#000000">As before, the first two override the <b>actionPerformed()
</b>method of the <b>ActionListener </b>interface while the third overrides
the <b>windowClosing()</b> method of the <b>WindowListener </b>interface.</font>

<p><font color="#000000">The class named <b>GUI </b>extends <b>Frame</b>.
Two <b>Button </b>objects labeled <i>Sing </i>and <i>Whistle </i>are instantiated
in the <b>GUI </b>constructor. They are referenced by variables named <b>singButton
</b>and <b>whistleButton </b>respectively. Both buttons are added to the
<b>Frame </b>object.</font>

<p><font color="#000000">The first two anonymous listener objects mentioned
above are <u>registered to listen</u> for <b>actionPerformed()</b> events
on the two buttons. The third anonymous listener object is <u>registered</u>
to listen for <b>windowClosing() </b>events on the <b>Frame </b>object.</font>

<p><font color="#000000">When the program starts, a <b>Frame </b>object
containing the two buttons appears on the screen. When the user <u>clicks</u>
on the button labeled <i>Sing</i>, the event handler registered to listen
for <b>Action </b>events on that button invokes the method named <b>sing()</b>
which displays the message:</font>

<p><b><font color="#000000">"I am singing, Tra la la"</font></b>

<p><font color="#000000">When the user clicks on the button labeled <i>Whistle</i>,
the event handler registered to listen for <b>Action </b>events on that
button invokes the method named <b>whistle()</b> which displays the message:</font>

<p><b><font color="#000000">"I am whistling, Tweet, Tweet, Tweet"</font></b>

<p><font color="#000000">When the user clicks the "close" box on the <b>Frame</b>,
the event handler registered to listen for <b>windowClosing()</b> events
on the Frame <u>terminates the program</u>.</font>

<p><font color="#000000">These results were produced using JDK 1.1 running
under Windows 95.</font><center><h3><a name="program listing of second sample program"></a><font color="#ff0000">Program
Listing of Second Sample Program</font></h3></center>
A program listing with additional comments follows:
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Event22.java Copyright 1997, R.G.Baldwin
Revised 9/17/97
This program is designed to be compiled and run under&nbsp;
JDK 1.1

The program illustrates the use of Inner Classes with event&nbsp;
handling under the JDK 1.1 Delegation Event Handling model.

The use of anonymous Inner Classes is also illustrated.
See the program named Event23 for an example of Inner
Classes that does not use anonymous Inner Classes.

The controlling class is named Event22.&nbsp; An Inner Class&nbsp;
named GUI is defined inside the class named Event22 and an&nbsp;
object of that class is instantiated inside the main()&nbsp;
method.

In addition, two "data processing" methods named sing() and
whistle() are defined inside the controlling class named
Event22.&nbsp; They are defined in such a way as to be separated
from the event handling activity except that they are&nbsp;
invoked by the event handler methods.

Abbreviated notation is used to anonymously define the&nbsp;
classes for and instantiate three anonymous listener&nbsp;
objects inside the Inner Class named GUI. The first two&nbsp;
implement the ActionListener interface while the third&nbsp;
extends the WindowListener adapter.

The first two implement the actionPerformed() method of the
ActionListener interface while the third overrides the&nbsp;
windowClosing() method of the WindowListener interface.

The class named GUI extends Frame.&nbsp; Two Button objects&nbsp;
labeled Sing and Whistle are instantiated in the GUI&nbsp;
constructor. They are referenced by variables named&nbsp;
singButton and whistleButton respectively.&nbsp; Both buttons
are added to the Frame object.

The first two anonymous listener objects mentioned above&nbsp;
are registered to listen for actionPerformed() events on&nbsp;
the two buttons respectively.&nbsp; The third anonymous listener
object is registered to listen for windowClosing() events&nbsp;
on the Frame object.

When the program starts, a Frame object containing the two&nbsp;
buttons appears on the screen.&nbsp; When the user clicks on the
button labeled Sing, the event handler registered to listen
for Action events on that button invokes the method named&nbsp;
sing() causing the message

"I am singing, Tra la la"&nbsp;

to be displayed on the screen.

When the user clicks one the button labeled Whistle, the&nbsp;
event handler registered to listen for Action events on&nbsp;
that button invokes the method named whistle() causing the&nbsp;
message&nbsp;

"I am whistling, Tweet, Tweet, Tweet"

to be displayed on the screen.

When the user clicks the "close" box on the Frame, the&nbsp;
event handler registered to listen for windowClosing()&nbsp;
events on the Frame terminates the program.

This version of the program uses abbreviated notation to&nbsp;
define anonymous classes and instantiate anonymous listener
objects.&nbsp; The abbreviated notation is fairly cryptic.&nbsp; See&nbsp;
the program named Event23 for a version that does the same&nbsp;
thing without using the abbreviated notation.

These results were produced using JDK 1.1 running under&nbsp;
Windows 95.
*/
//=========================================================

import java.awt.*;
import java.awt.event.*;

public class Event22 {
&nbsp; void sing() {System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "I am singing, Tra la la");}
&nbsp; void whistle() {System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "I am whistling, Tweet Tweet Tweet");}
&nbsp;&nbsp;
&nbsp; //-------------------------------------------------------
&nbsp; static public void main(String[] args){
&nbsp;&nbsp;&nbsp; Event22 app = new Event22();
&nbsp;&nbsp;&nbsp; //Note the following syntax which instantiates an
&nbsp;&nbsp;&nbsp; // object of the class GUI which is an inner-class of
&nbsp;&nbsp;&nbsp; // the class Event22.&nbsp; The new operator is invoked on
&nbsp;&nbsp;&nbsp; // the object named app which is of class Event22.
&nbsp;&nbsp;&nbsp; GUI gui = app.new GUI();
&nbsp; }//end main()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //-------------------------------------------------------
&nbsp; //Note that the GUI class is defined inside the Event22&nbsp;
&nbsp; // class and thus becomes an inner-class of Event22.
&nbsp; class GUI extends Frame{

&nbsp;&nbsp;&nbsp; public GUI(){//constructor for GUI inner-class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button singButton;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(singButton = new Button("Sing"),"North");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button whistleButton;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(whistleButton = new Button("Whistle"),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "South");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //---------------------------------------------------
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The code which follows instantiates three&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // anonymous objects of types ActionListener and&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // WindowAdapter, and registers them for handling&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // events on the two corresponding Button objects and

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the Frame object.&nbsp; This code uses the abbreviated&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // syntax which defines the listener classes
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // anonymously (the listener classes do not have
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // class names and the objects instantiated from
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // those classes do not have names).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Begin statement -----------------------------------
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; singButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The following object is passed as a parameter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to the addActionListener() method.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new //instantiate anonymous object of the class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionListener(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Implement the actionPerformed() method&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // which is declared in the ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // interface.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The methods in this inner-class have direct
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // access to the members of the enclosing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // outer-class named Event22.&nbsp; Thus, the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // direct invocation of the sing() method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is possible without the requirement to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // instantiate an object of type Event22.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sing();//call the sing() method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener() statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //End statement -------------------------------------&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Begin statement -----------------------------------
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; whistleButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //See above discussion for explanation of this code
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //See note above regarding the method sing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; whistle();//call the whistle() method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //End statement -------------------------------------
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Begin statement -----------------------------------
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //See above discussion for explanation of this code
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //End statement -------------------------------------
&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //---------------------------------------------------
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set frame size and make it visible.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setSize(300,100);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setVisible(true);
&nbsp;&nbsp;&nbsp; }//end GUI constructor
&nbsp; }//end class GUI
}//end class Event22
//=========================================================</pre></td></tr></table>

<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Without viewing the solution given below, write a Java application
that meets the following specifications:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>The program must be written using the following skeleton&nbsp;
and inserting any additional code that may be necessary.


<b>import java.awt.*;
import java.awt.event.*;

public class SampProg127 {
//All new code must be inserted after this comment
&nbsp;&nbsp;
//Insert the necessary additional code here

//All new code must be inserted before this comment&nbsp;&nbsp;
}//end class SampProg127

</b>&nbsp;&nbsp;

When the program starts, a Frame object containing a button&nbsp;
labeled Button and a Label object containing the string&nbsp;
Initial Text in Label appears on the screen.&nbsp; Your name
must appear in the title at the top of the frame. When the&nbsp;
user clicks the button, the text in the label changes to&nbsp;
Ouch.

When the user clicks the "close" box on the Frame, the&nbsp;
program terminates and control is properly returned to the
operating system.</pre></td></tr></table><font color="#0000ff"><font size=-1>A - See solution below:</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg127.java Copyright 1997, R.G.Baldwin
Revised 9/17/97

These results were produced using JDK 1.1.3 running under&nbsp;
Windows 95.
*/
//=========================================================

import java.awt.*;
import java.awt.event.*;

public class SampProg127 {

&nbsp; //-------------------------------------------------------
&nbsp; static public void main(String[] args){
&nbsp;&nbsp;&nbsp; SampProg127 app = new SampProg127();
&nbsp;&nbsp;&nbsp; //Note the syntax in the following statement where the
&nbsp;&nbsp;&nbsp; // new operator is joined to the reference to the
&nbsp;&nbsp;&nbsp; // object of a class in which the GUI inner class is
&nbsp;&nbsp;&nbsp; // defined in order to instantiate an object of the
&nbsp;&nbsp;&nbsp; // GUI class.
&nbsp;&nbsp;&nbsp; GUI gui = app.new GUI();&nbsp;
&nbsp; }//end main()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //-------------------------------------------------------
&nbsp; //Note that the following GUI class is defined inside&nbsp;
&nbsp; // the SampProg127 class and thus is an inner-class of&nbsp;
&nbsp; // the SampProg127 class.
&nbsp; class GUI extends Frame{
&nbsp;&nbsp;&nbsp; //The object referenced by the following reference
&nbsp;&nbsp;&nbsp; // variable is accessed directly by code in an&nbsp;
&nbsp;&nbsp;&nbsp; // inner-class of the GUI class.
&nbsp;&nbsp;&nbsp; Label myLabel;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public GUI(){//constructor for GUI class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button myButton;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(myButton = new Button("Button"),"North");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ButtonActionListener() );
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(myLabel = new Label(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Initial Text in Label"),"South");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Register a Listener object for event handling on&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the Frame object of class GUI.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminator());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set frame size and make visible&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setSize(300,100);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setVisible(true);
&nbsp;&nbsp;&nbsp; }//end GUI constructor&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------
&nbsp;&nbsp;&nbsp; //Note that the ButtonActionListener class is defined
&nbsp;&nbsp;&nbsp; // inside the GUI class which is defined inside the
&nbsp;&nbsp;&nbsp; // SampProg127 class.
&nbsp;&nbsp;&nbsp; class ButtonActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Implement the actionPerformed method which is
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // declared in the ActionListener interface.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that because this class is defined inside
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the GUI class which is defined inside the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // SampProg127 class, this method has direct
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // access to the members of both the SampProg127&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // class and the GUI class.&nbsp; Therefore, this method&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // can directly access the reference variable named&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // myLabel without having to access it via an&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object of type GUI.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setText("Ouch");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp; }//end ButtonActionListener class defined inside GUI&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------
&nbsp;&nbsp;&nbsp; //Note that the Terminator class is defined inside the
&nbsp;&nbsp;&nbsp; // GUI class which is defined inside the SampProg127&nbsp;
&nbsp;&nbsp;&nbsp; // class.
&nbsp;&nbsp;&nbsp; class Terminator extends WindowAdapter{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp; }//end class Terminator defined inside GUI class
&nbsp;&nbsp;&nbsp; //-----------------------------------------------------
&nbsp; }//end class GUI defined inside SampProg127 class
&nbsp; //-------------------------------------------------------
}//end class SampProg127
//=========================================================</font></pre></td></tr></table>
.

<p>Q - Without viewing the solution given below, write a Java application
that meets the following specifications:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>The program must be written using the following skeleton&nbsp;
and inserting any additional code that may be necessary.


<b>import java.awt.*;
import java.awt.event.*;

public class SampProg128 extends Frame{
//All new code must be inserted after this comment
&nbsp;&nbsp;
//Insert the necessary additional code here.

<i>//Do not define any named classes other than the class
// named SampProg128

</i>//All new code must be inserted before this comment&nbsp;&nbsp;
}//end class SampProg128

</b>&nbsp;&nbsp;
When the program starts, a Frame object containing a button&nbsp;
labeled Button and a label containing the string&nbsp;
Initial Text in Label appears on the screen.&nbsp; Your name
must appear in the title at the top of the frame. When the&nbsp;
user clicks the button, the text in the label changes to&nbsp;
Ouch.

When the user clicks the "close" box on the Frame, the&nbsp;
program terminates and control is properly returned to the
operating system.</pre></td></tr></table><font color="#0000ff"><font size=-1>A - See the solution below:</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg128.java from lesson 94
Revised 02/21/98 to correct an earlier problem which&nbsp;
caused the program to violate the specifications.

Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

These results were produced using JDK 1.1.3 running under&nbsp;
Windows 95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;

public class SampProg128 extends Frame {
&nbsp; Label myLabel;&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//
&nbsp; static public void main(String[] args){
&nbsp;&nbsp;&nbsp; SampProg128 app = new SampProg128();
&nbsp; }//end main()
&nbsp; //-----------------------------------------------------//

&nbsp; public SampProg128(){//constructor&nbsp;
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; Button myButton;
&nbsp;&nbsp;&nbsp; this.add(myButton = new Button("Button"),"North");
&nbsp;&nbsp;&nbsp; this.add(myLabel = new Label(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Initial Text in Label"),"South");
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The code which follows instantiates two&nbsp;
&nbsp;&nbsp;&nbsp; // anonymous objects of types ActionListener and&nbsp;
&nbsp;&nbsp;&nbsp; // WindowAdapter, and registers them for handling&nbsp;
&nbsp;&nbsp;&nbsp; // events on the corresponding Button object and
&nbsp;&nbsp;&nbsp; // the Frame object.&nbsp; This code uses the abbreviated&nbsp;
&nbsp;&nbsp;&nbsp; // syntax which defines the listener classes
&nbsp;&nbsp;&nbsp; // anonymously (the listener classes do not have
&nbsp;&nbsp;&nbsp; // class names and the objects instantiated from
&nbsp;&nbsp;&nbsp; // those classes do not have names).
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Begin statement -----------------------------------
&nbsp;&nbsp;&nbsp; myButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The following object is passed as a parameter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to the addActionListener() method.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new //instantiate anonymous object of the class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionListener(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Implement the actionPerformed() method&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // which is declared in the ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // interface.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The methods in this inner-class have direct
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // access to the members of the enclosing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // outer-classes named SampProg128.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Thus, direct access to the reference
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // variable named myLabel
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is possible
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setText("Ouch");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener() statement
&nbsp;&nbsp;&nbsp; //End statement -------------------------------------
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Begin statement -----------------------------------
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp; //See above discussion for explanation of this code
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //End statement -------------------------------------

&nbsp;&nbsp;&nbsp; //---------------------------------------------------
&nbsp;&nbsp;&nbsp; //Set frame size and make it visible.
&nbsp;&nbsp;&nbsp; this.setSize(300,100);
&nbsp;&nbsp;&nbsp; this.setVisible(true);
&nbsp; }//end SampProg128 constructor
}//end class SampProg128
//=========================================================</font></pre></td></tr></table>
-end-<!--end--></body></html>