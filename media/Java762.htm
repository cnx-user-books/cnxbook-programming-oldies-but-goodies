<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="author" content="richard g. baldwin">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">
<!--start-->
<center>
<h2>
<!--title-->JavaServer Pages and JavaBean Components, Part I</h2></center>
<b><i>by Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 762
<p>June 25, 2000
<ul>
<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#What is a JavaBean">What is a JavaBean Component</a></li>

<li>
<a href="#Why Use Beans with JSP">Why Use Beans with JSP</a></li>

<li>
<a href="#Creating or Locating an Instance of the Bean">Creating or Locating
an Instance of the Bean</a></li>

<li>
<a href="#Element Syntax">Element Syntax</a></li>

<li>
<a href="#Attributes of the <jsp:useBean> Element">Attributes of the &lt;jsp:useBean>
Element</a></li>

<li>
<a href="#Sample JSP Page">Sample JSP Pages</a></li>

<li>
<a href="#Invoking methods on the Bean">Invoking methods on the Bean</a></li>

<li>
<a href="#JSP Syntax Summary">JSP Syntax Summary</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Introduction"></a><font color="#FF0000">Introduction</font></h2></center>
<b><font color="#FF0000">What is JSP?</font></b>
<p>JSP makes it possible to embed Java code fragments into special HTML
tags.&nbsp; A JSP engine automatically creates, compiles, and executes
servlets to implement the behavior of the combined HTML and embedded Java
code.
<p><b><font color="#FF0000">Previous Lessons</font></b>
<p>Previous lessons have explained the use of the following JSP elements:
<ul>
<li>
Output comments</li>

<li>
Hidden comments</li>

<li>
Declarations</li>

<li>
Expressions</li>

<li>
Scriptlets</li>

<li>
The include directive</li>

<li>
The page directive</li>

<li>
The <b><font face="Arial Narrow">&lt;jsp.forward></font></b> tag</li>
</ul>
This and subsequent lessons will teach you how to use JSP with <i>JavaBean
components</i>.
<center>
<h2>
<a NAME="What is a JavaBean"></a><font color="#FF0000">What is a JavaBean
Component</font></h2></center>
The topic of JavaBean components is a broad and complex topic.&nbsp; I
have written several tutorial lessons on the subject that you can view
on my onsite at the following <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">URL</a>.&nbsp;
(You might want to bookmark it for future reference.)
<p><b><font color="#FF0000">An overview</font></b>
<p>Of necessity, this lesson can provide little more than an overview of
the subject of JavaBean components.&nbsp; You are encouraged to review
the tutorial lessons on JavaBean components mentioned above to learn more
about the details.
<p><b><font color="#FF0000">A loose definition</font></b>
<p>Although this is not a rigorous definition, for this lesson, it should
suffice to say that a JavaBean component need not be any more complex than
a class that implements the <b>Serializable</b> interface and has a public
constructor that takes no parameters.
<p><b><font color="#FF0000">Make it useful</font></b>
<p>To be useful, the class should have one or more exposed methods, each
of which performs some useful work.
<p>An <i>exposed method </i>in a JavaBean component is any <b>public</b>
method.
<p><b><font color="#FF0000">Other desirable attributes</font></b>
<p>In the next lesson, I will dig a little deeper into JavaBean components
and describe some other attributes that the class should have to make it
more useful.
<p><b><font color="#FF0000">A sample JavaBean component</font></b>
<p><a href="Java762-fig01.htm">Figure 1</a> is a sample JavaBean component
that will be used to illustrate the integration of JSP and JavaBean components
in this lesson.
<p>As you can see, this Bean implements the <b>Serializable</b> interface.&nbsp;
It also has a <i>noarg</i> constructor by default since no parameterized
constructors were defined in the class definition.
<p><b><font color="#FF0000">The name of the Bean is jspBeanTest001</font></b>
<p>The name of the Bean is the same as the name of the class:&nbsp; <b>jspBeanTest001</b>.
<p>The Bean has three exposed methods:
<ul>
<li>
<b>setSize()</b></li>

<li>
<b>getSize()</b></li>

<li>
<b>exposedMethod()</b></li>
</ul>
<b><font color="#FF0000">Bean properties</font></b>
<p>In addition to being exposed methods, the first two of these methods
represent the <i>set</i> and <i>get</i> side of the <i>property</i> named
<b>size</b>.
<p><b><font color="#FF0000">Beans design patterns</font></b>
<p>The names of these two methods satisfy the JavaBean <i>design pattern</i>
for properties.&nbsp; (See my online Java tutorials mentioned earlier for
a discussion of properties.)
<center>
<h2>
<a NAME="Why Use Beans with JSP"></a><font color="#FF0000">Why Use Beans
with JSP</font></h2></center>
<b><font color="#FF0000">JSP is powerful</font></b>
<p>By now you may have concluded that JSP provides a powerful capability,
but you probably wouldn't want to create a large, complex Java program
using JSP.
<p><b><font color="#FF0000">Creating large JSP program would be difficult</font></b>
<p>That would be a difficult task because:
<ul>
<li>
The syntax is a little unwieldy.</li>

<li>
Debugging is very difficult.</li>
</ul>

<p><br><b><font color="#FF0000">The good news</font></b>
<p>The good news is that you don't need to create large Java programs using
JSP for JSP to be useful.&nbsp; The idea is to use each of the different
capabilities of Java for the purpose for which it is best suited.
<p><b><font color="#FF0000">Mixing executable code and raw HTML</font></b>
<p>JSP is well suited to mixing executable code fragments and raw HTML
(or XML) on a page.
<p><b><font color="#FF0000">Reusable software components</font></b>
<p>JavaBean components are well suited to the task of capturing business
logic into reusable software components.&nbsp; These reusable components
are potentially large Java programs.
<p><b><font color="#FF0000">The combination is very powerful</font></b>
<p>It is the combination of these two capabilities, JSP and Beans, which
provides maximum power.
<p><b><font color="#FF0000">Use Beans for business logic</font></b>
<p>You should program your business logic as JavaBean components where
you have the best access to high-quality editors, compilers, etc.
<p><b><font color="#FF0000">Use Java fragments to integrate Beans with
HTML</font></b>
<p>Similarly, you should restrict your use of Java code fragments in JSP
pages to the invocation of those beans, causing the output from the Beans
to be integrated into HTML text streams for transmittal back to the browser.
<center>
<h2>
<a NAME="Creating or Locating an Instance of the Bean"></a><font color="#FF0000">Creating
or Locating an Instance of the Bean</font></h2></center>
Before you can use a Bean with JSP, you must either locate an existing
instance of the Bean class (an object), or you must create a new instance
of the Bean class.
<p>You can accomplish this by using the <b><font face="Arial Narrow">&lt;jsp:useBean>
</font></b>tag.
<p><b><font color="#FF0000">General Discussion</font></b>
<p>The <b><font face="Arial Narrow">&lt;jsp:useBean> </font></b>tag attempts
to locate an instance of the Bean class.&nbsp; If no such object exists,
the tag causes a Bean object to be created.&nbsp; Creation can take either
of two forms:
<ul>
<li>
Instantiation from the Bean class.</li>

<li>
Reconstruction from a previously serialized Bean object.</li>
</ul>
<b><font color="#FF0000">Here are the steps</font></b>
<p>According to Sun, in order to locate or create a Bean, the <b><font face="Arial Narrow">&lt;jsp:useBean>
</font></b>tag
takes the following steps in order:
<br>&nbsp;
<table BORDER=2 COLS=1 WIDTH="337" BGCOLOR="#66FFFF" >
<tr>
<td>1.Attempts to locate a Bean with the scope and name you specify.&nbsp;
<br>2.Defines an object reference variable with the name you specify.&nbsp;
<br>3.If it finds the Bean, stores a reference to it in the variable. If
you specified type, gives the Bean that type.&nbsp;
<br>4.If it does not find the Bean, instantiates it from the class you
specify, storing a reference to it in the new variable. If the class name
represents a serialized template, the Bean is instantiated by java.beans.Beans.instantiate.&nbsp;
<br>5.If it has instantiated (rather than located) the Bean, and if it
has body tags (between &lt;jsp:useBean> and &lt;/jsp:useBean>), executes
the body tags.&nbsp;</td>
</tr>
</table>

<p><b><font color="#FF0000">Details, details!</font></b>
<p>In order to understand all of the above details, you will need a deeper
understanding of JavaBean components than you will get in this lesson.
<p><b><font color="#FF0000">Reusable software components</font></b>
<p>However, JavaBean components are reusable software components.&nbsp;
One of the great benefits of using JavaBean components is that you don't
have to understand all of the details in order to use them to advantage.
<p><b><font color="#FF0000">What do you really need to understand?</font></b>
<p>As a practical matter, all that you really need to know about JavaBean
components in order to use them with JSP is to where to put the class files
on your server, and how to reference them using the syntax that I provide
below.
<p>Of course, you also need to understand the behavior of the Bean, but
that is assumed to be a given.
<p><b><font color="#FF0000">What about enterprise beans?</font></b>
<p>If you already know about enterprise beans, this may be of interest
to you.&nbsp; Otherwise, skip to the next section.
<p>JSP 1.0 does not work with enterprise beans.&nbsp; If you want to use
enterprise beans, you can write a JSP file that constructs a JavaBean component,
and have the JavaBean component call the enterprise Bean.
<center>
<h2>
<a NAME="Element Syntax"></a><b><font color="#FF0000">Element Syntax</font></b></h2></center>
Here is the JSP element syntax for creating or locating an instance of
a Bean:
<p><font face="Arial Narrow"><font size=-2>&lt;jsp:useBean</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
id="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
scope="page|request|session|application"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
class="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
type="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
class="package.class" type="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
beanName="{ package.class | &lt;%= expression %> }"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
type="package.class"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; }</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
/> | > other tags &lt;/jsp:useBean>&nbsp; }</font></font>
<p>I will discuss some of the attributes of the tag in the next section.
<center>
<h2>
<a NAME="Attributes of the <jsp:useBean> Element"></a><font color="#FF0000">Attributes
of the &lt;jsp:useBean> Element</font></h2></center>
<b><font color="#FF0000">id="beanInstanceName"</font></b>
<p>The purpose of this attribute is to name a variable that identifies
the Bean.&nbsp; You can reference this variable later in expressions or
scriptlets in the same JSP file.
<p>This variable name is accessible within the scope that you identify
as explained below.
<p><b><font color="#FF0000">A sample variable</font></b>
<p>The sample JSP page later in this lesson will use the following value
for this attribute:
<p><b><font face="Arial Narrow">id="theBean"</font></b>
<p><b><font color="#FF0000">Case sensitivity</font></b>
<p>The variable name is case sensitive, and must be a valid name in the
Java programming language.
<p><b><font color="#FF0000">Matching earlier definition</font></b>
<p>It is possible that the Bean has already been created by an earlier
<b><font face="Arial Narrow">&lt;jsp:useBean></font></b>
tag.&nbsp; In this case, the value of <b>id</b> must match the value used
in the original <b><font face="Arial Narrow">&lt;jsp:useBean></font></b>
tag.
<p><b><font color="#FF0000">scope="page | request | session | application"</font></b>
<p>The purpose of this attribute is to define the scope in which the Bean
exists.&nbsp; This also defines the scope in which the <b>id</b> described
above is accessible.
<p>The choices are page, request, session, or application.&nbsp; I will
refer you to my tutorial lessons on servlets for a better understanding
of what these choices mean.
<p><b><font color="#FF0000">The default is <i>page</i></font></b>
<p>Even though the default value is <b>page,</b> the sample JSP page discussed
later in this lesson uses the following attribute value to illustrate the
syntax.
<p><b><font face="Arial Narrow">scope="page"</font></b>
<p><b><font color="#FF0000">class="package.class"</font></b>
<p>This attribute causes a Bean to be instantiated from a class, using
the <b>new</b> keyword and the class constructor.
<p>The class must not be abstract, and must have a public constructor that
takes no arguments.&nbsp; Both the package and class name are case sensitive.
<p><b><font color="#FF0000">Sample instantiation</font></b>
<p>The sample JSP page that I discuss later in this lesson uses the following
value for this attribute:
<p><b><font face="Arial Narrow">class="BaldwinBeans.jspBeanTest001"</font></b>
<p><b><font color="#FF0000">class="package.class" type="package.class"</font></b>
<p>Another option is to instantiate a new Bean object from a class and
to specify a <i>type</i> for the new Bean.
<p>In keeping with the general inheritance and polymorphic behavior of
Java, the type that you specify can be the same as the class, a superclass
of the class, or an interface implemented by the class.
<p><b><font color="#FF0000">beanName="{ package.class | &lt;%= expression
%> }" type="package.class"</font></b>
<p>Still another option is to instantiate a Bean from either a class or
a serialized template, using the <b>java.beans.Beans.instantiate()</b>
method.
<p>The use of this attribute also gives the Bean the type specified in
type.
<p><b><font color="#FF0000">type="package.class"</font></b>
<p>If the bean already exists in the specified scope, this attribute can
be use to give the Bean the type you specify.&nbsp; The choices for type
are as described earlier.
<center>
<h2>
<a NAME="Sample JSP Page"></a><font color="#FF0000">Sample JSP Page</font></h2></center>
<a href="Java762-fig02.htm">Figure 2</a> shows a JSP file that is designed
to use the Bean shown earlier in Figure 1.
<p>The <b><font face="Arial Narrow">&lt;jsp:useBean></font></b> tag, and
its attributes, are highlighted in boldface.
<p>This tag either finds or instantiates a Bean object for the Bean class
named <b>BaldwinBeans.jspBeanTest001</b>.
<p><b><font color="#FF0000">Variable named theBean</font></b>
<p>As mentioned earlier, this tag creates a variable named <b>theBean</b>
that can be used to refer to the Bean object in JSP code later in the page.
<p><b><font color="#FF0000">Page scope</font></b>
<p>Also, as explained earlier, this tag specifies the scope in which the
variable named <b>theBean</b> is accessible, as <b>page</b>.
<center>
<h2>
<a NAME="Invoking methods on the Bean"></a><b><font color="#FF0000">Invoking
methods on the Bean</font></b></h2></center>
Three JSP expressions and one JSP scriptlet refer to the bean via the variable
named <b>theBean</b> later in the page.&nbsp; I have colored those references
red to make them easy to find.
<p><b><font color="#FF0000">Exposed methods</font></b>
<p>In all four cases, one of the exposed methods of the Bean is being invoked.&nbsp;
In the following scriptlet, the <b>String</b> parameter <i>"Large"</i>
is passed to the method named <b>setSize()</b> when it is invoked.
<p>Note that the variable named <b>theBean</b> behaves just like an ordinary
Java reference variable.
<p><b><font face="Arial Narrow">&lt;% theBean.setSize("Large"); %></font></b>
<p><b><font color="#FF0000">Setter method for the property named size</font></b>
<p>Since the method named <b><font face="Arial Narrow">setSize()</font></b>
satisfies the design-pattern naming conventions for the <i>setter</i> side
of a property, Bean jargon would say that the property named <b>size</b>
is being set to the <b>String</b> value "Large".
<p><b><font color="#FF0000">The getter method</font></b>
<p>Two of the references to <b>theBean</b> invoke the <i>getter</i> method
of the <b>size</b> property.&nbsp; The getter method is named <b><font face="Arial Narrow">getSize()</font></b>.
<p>Since these two references are inside a JSP expression, the <b>String</b>
values returned by the getter method is written to the output and sent
back to the browser that requested the JSP page in the first place.
<p><b><font color="#FF0000">Ordinary exposed method</font></b>
<p>Finally, one of the references to <b>theBean</b> invokes an ordinary
method named <b>exposedMethod()</b>.
<p>This method call is also inside a JSP expression and the <b>String</b>
value that it returns is written to the output and sent back to the browser.
<p><b><font color="#FF0000">The browser output</font></b>
<p><a href="Java762-fig03.htm">Figure 3</a> shows a replica of my browser
output for this JSP page.&nbsp; There aren't any surprises here.
<p>However, when I copied the text from my browser window into this presentation,
I colored the text produced by the Bean red to make it easy to spot.&nbsp;
(Note that neither the HTML nor the JSP contained anything to produce red
text on the browser screen.)
<p>You should be able to correlate each line of output from the browser
window with either raw HTML text in the JSP page, or with the invocation
of methods on <b>theBean</b> in JSP expressions.
<center>
<h2>
<a NAME="JSP Syntax Summary"></a><font color="#FF0000">JSP Syntax Summary</font></h2></center>
In this and previous lessons, I have discussed the following JSP syntax:
<p><b><font face="Arial Narrow"><font size=-1>Output comments:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;!-- comment [ &lt;%= expression
%> ] --></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Hidden comments:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%-- hidden comment --%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Declarations:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%! declarations %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Expressions:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%= expression %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Scriptlets:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;% code fragment %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Include Directive:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%@ include file="relativeURL"
%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Page Directive:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%@ page</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ language="java" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ extends="package.class"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ import= "{ package.class
|</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; package.*
}, ..." ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ session="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ buffer="none|8kb|sizekb"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ autoFlush="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ isThreadSafe="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ info="text" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ errorPage="relativeURL"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ contentType="mimeType
[</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; ;charset=characterSet
]" |</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; "text/html
; charset=ISO-8859-1" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ isErrorPage="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:forward tag:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;jsp:forward page=</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp; "{
relativeURL | &lt;%= expression %> }" /></font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:useBean tag:</font></font></b>
<br><font face="Arial Narrow"><font size=-2>&lt;jsp:useBean</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
id="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
scope="page|request|session|application"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
class="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
type="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
class="package.class" type="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
beanName="{ package.class | &lt;%= expression %> }"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
type="package.class"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; }</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
/> | > other tags &lt;/jsp:useBean>&nbsp; }</font></font>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.
<br>&nbsp;
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-<!--end-->
</body>
</html>
