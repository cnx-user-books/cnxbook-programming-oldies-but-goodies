<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JavaBeans, A Skeleton Bean Program<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 502, Revised 02/16/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#skeleton bean program">Skeleton Bean Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#listing of skeleton bean program">Listing of Skeleton Bean Program</a></li></ul>

<li><a href="#listing of test program">Listing of Test Program</a></li></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
A previous lesson provided an overview of Java Beans. This lesson expands
on that overview by providing a skeleton Java Bean program that contains
many of the interface characteristics required of all Beans.

<p>In addition, this lesson provides a Java application program to test
the Bean. As you will see, the test program is longer and more complex
than the Bean program. The test program is included for two reasons:
<ul><li>
To illustrate the ease with which Beans can be incorporated into ordinary
Java applications.</li>

<li>
To help you appreciate the simplicity of testing a Bean using the JavaSoft
BeanBox which we will study in a subsequent lesson.</li></ul>
Even though the test program is longer and more complex, there is nothing
contained in that program that you haven't seen many times in previous
lessons. Therefore, very little space will be devoted to discussing the
test program.
<center><h2><a name="skeleton bean program"></a><font color="#ff0000">Skeleton Bean
Program</font></h2></center>
This program was designed to be compiled and executed under JDK 1.1.1 in
compliance with the JavaBeans specification 1.0.

<p>A Java Bean is a <i>reusable software component</i> that can be manipulated
visually in a builder tool. Creating such a component requires careful
adherence to a specified interface. This program produces a <i>skeleton
</i>Bean that exhibits many of the required interface characteristics and
other required attributes of a Bean.

<p>Information about the Bean interface can be provided by the programmer
to the builder tool either
<ul><li>
by adherence to <i>design patterns</i>, or</li>

<li>
by publishing that information in an object of a class that implements
the <b>BeanInfo </b>interface.</li></ul>
This program relies on <i>design patterns</i>.

<p>Some essential information for developing Beans is listed below.
<ul><li>
All beans should implement the <b>Serializable </b>interface so that their
state can be saved and later restored.</li>

<li><i>Methods </i>that are to be <i>exposed </i>to the builder tool and to
other beans must be made <b>public</b>.</li>

<li>
All exposed methods should be made threadsafe (possibly <b>synchronized)
</b>to prevent more than one thread from calling a method at any given
time.</li>

<li><i>Properties </i>are exposed through the use of public <i>"set"</i> and
<i>"get"</i> methods. Properties with no "set" method are <i>read-only</i>.
Properties with no "get" method are <i>write-only</i>.</li>

<li>
The "get" side of a <b>boolean </b>property may be exposed either through
the use of a public <i>"is"</i> method or an ordinary <i>"get"</i> method.</li>

<li>
Events which the bean can <i>multicast </i>are exposed through public <i>"add"</i>
and <i>"remove"</i> methods.</li></ul>
The program was tested using JDK 1.1.1 and Win95.

<p>The following package specification was required in order to install
the Bean in the JavaSoft <b>BeanBox</b>. The BeanBox is a Java application
that can be used to test Beans. The package specification may change depending
on where the Bean is installed in the directory structure.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><tt>package sunw.demo.beans01;</tt></pre></td></tr></table>

<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
The first interesting code fragment is the first line in the class definition
showing that the class implements the <b>Serializable</b> interface. All
Beans should implement this interface so that their state can be saved
and later restored.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>public class Beans01 extends Canvas&nbsp;
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Serializable</b>{</pre></td></tr></table>
The next interesting code fragment is the declaration of the pair of instance
variables that will later combine with methods to become <i>properties</i>.
According to the Java Beans Specification from JavaSoft,
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>"Properties are discrete, named attributes of a Java Bean that can
affect its appearance or its behaviour."</td></tr></table>
For example, a GUI button might have a property named “Label” that represents
the text displayed in the button. However, the <b>String </b>object that
constitutes the Label <u>may or may not</u> be maintained in an instance
variable with the same name.

<p>A bean’s properties will usually be <i>persistent</i>. That is, their
current state can be stored away as part of the <i>persistent </i>state
of the bean. This is one reason that the class of the Bean object should
implement the <b>Serializable</b> interface.

<p>Properties can have arbitrary types, including primitive types such
as <b>int</b> and class or interfaces types such as <b>java.awt.Color</b>.

<p>As you can see, the instance variables that are used to maintain property
values in this skeleton program are of type <b>Color </b>and <b>boolean</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; protected Color myColor;
&nbsp; protected boolean myBooleanInstanceVariable = true;</pre></td></tr></table>
The constructor for the Bean is pretty straightforward except that it contains
a call to a method named <b>sizeToFit()</b>. This method is interesting
because it is required to cause the Bean to appear at the proper size when
placed in the BeanBox, but is not required for that purpose when the Bean
is placed in an ordinary Frame object.

<p>As of this writing, I have not determined why it is required in one
case and not required in the other case. The <b>sizeToFit()</b> method
follows. Since the body of this method is really more germane to <i>graphics
</i>than to Beans, an analysis of the body of the method will be left as
an exercise for the student.

<p>(Update Notice: April 13, 1997. The apparent bug in the February 1997
version of the BDK 1.0 that required use of the <b>sizeToFit()</b> method
has been eliminated in the April 1997 method. When using the April version,
this method is no longer required.)

<p>Note that an auxiliary method, <b>getPreferredSize()</b> that specifies
the display size of the Bean is also shown in this code fragment.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>private void sizeToFit () {
&nbsp;&nbsp;&nbsp; this.setSize(getPreferredSize());
&nbsp;&nbsp;&nbsp; Component p = getParent();
&nbsp;&nbsp;&nbsp; if (p != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.invalidate();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.doLayout();
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end sizeToFit()&nbsp;&nbsp;

&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()</pre></td></tr></table>
The next interesting code fragment is the pair of methods that, when combined
with the instance variable named <b>myBooleanInstanceVariable</b>, constitute
the property named <b>myBooleanProperty</b>. Note that in the special case
of boolean properties, you can use either a "get" method or an "is" method
(or both) to satisfy the "get" side of the <i>design pattern</i> for properties.
In this case, we use an "is" method.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public synchronized boolean isMyBooleanProperty(){
&nbsp;&nbsp;&nbsp; return myBooleanInstanceVariable;
&nbsp; }//end isMyBooleanProperty()
&nbsp;&nbsp;
&nbsp; public synchronized void setMyBooleanProperty(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boolean data){
&nbsp;&nbsp;&nbsp; myBooleanInstanceVariable = data;
&nbsp; }//end setMyBooleanProperty</pre></td></tr></table>
The next interesting code fragment is the pair of "set" and "get" methods
which, along with the instance variable named <b>myColor</b>, constitute
the property named <b>color</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public synchronized void setColor(Color inColor){
&nbsp;&nbsp;&nbsp; myColor = inColor;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp; }//end setColor()

&nbsp; public synchronized Color getColor(){
&nbsp;&nbsp;&nbsp; return myColor;
&nbsp; }//end getColor</pre></td></tr></table>
The following two methods are exposed to the builder tool as <u>accessible
methods</u> by virtue of the fact that they are public, and no explicit
instructions as to which methods are accessible were provided. Thus, a
builder tool will consider these methods as being available for being invoked
as a result of events emitted by other Beans.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public synchronized void makeBlue(){
&nbsp;&nbsp;&nbsp; myColor = Color.blue;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp; };//end makeBlue()

&nbsp; public synchronized void makeRed(){
&nbsp;&nbsp;&nbsp; myColor = Color.red;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp; };//end makeRed()</pre></td></tr></table>
The following pair of "add" and "remove" <b>Listener </b>methods expose
the fact that this Bean has the ability to <i>multicast</i> <b>Action </b>events.

<p>Note, however, that the body of these methods is<u> incomplete for brevity</u>
and they are not really capable of <i>multicasting</i> such events. The
builder tool identifies the capability to <i>multicast</i> events using
the "add" and "remove" <i>design pattern</i> and has no way to determine
if the body of the methods really supports the claim made by the <i>design
pattern</i>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public synchronized void addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionListener e){
&nbsp;&nbsp;&nbsp; //Incomplete.&nbsp; Need to put some substance here
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "addActionListener not fully implemented");
&nbsp; }//end addActionListener()&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; public synchronized void removeActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionListener e){
&nbsp;&nbsp;&nbsp; //Incomplete.&nbsp; Need to put some substance here
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "removeActionListener not fully implemented");
&nbsp; }//end removeActionListener</pre></td></tr></table>
These are the interesting code fragments for this skeleton Bean program.
A complete listing of the program is provided in the next section.
<center><h3><a name="listing of skeleton bean program"></a><font color="#ff0000">Listing
of Skeleton Bean Program</font></h3></center>
This section contains a complete listing of the skeleton Bean program with
additional comments.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Beans01.java.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.1.

A Java Bean is a reusable software component that can be&nbsp;
manipulated visually in a builder tool.&nbsp; This requires&nbsp;
careful adherence to a specified interface.

This program produces a skeleton Bean that exhibits many&nbsp;
of the required interface characteristics of a Bean.

Information about the interface to the bean can be&nbsp;
provided to the builder tool either by adherence to design
patterns, or by publishing that information in an object&nbsp;
of a class that implements the BeanInfo interface.&nbsp; This&nbsp;
program relies on design patterns.

Some guidelines are:

All beans should implement the Serializable interface so&nbsp;
that their state can be saved and later restored.

Methods that are to be exposed to the builder tool and to&nbsp;
other beans must be made public.

All exposed methods should be synchronized to prevent more&nbsp;
than one thread from calling a method at any given time.

Properties are exposed through the use of public&nbsp;
"set"/"get" methods. Properties with no "set" method are&nbsp;
read-only.&nbsp; Properties with no "get" method are write-only.

The "get" side of a Boolean property may be exposed either
through the use of a public "is" methods or an ordinary&nbsp;
"get" method.

Events which the bean can multicast are exposed through&nbsp;
public "add"/"remove" methods.

The program was tested using JDK 1.1.1 and Win95.&nbsp;&nbsp;
**********************************************************/

//The following package specification is required in order
// to install the Bean in the BeanBox.&nbsp; The package&nbsp;
// specification changes depending on where the Bean is&nbsp;
// installed in the directory structure.
//package sunw.demo.beans01;

import java.awt.event.*;
import java.awt.*;
import java.io.Serializable;
//=======================================================//
//All beans should implement the Serializable interface
public class Beans01 extends Canvas&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Serializable{

&nbsp; //The following two instance variables are used for&nbsp;
&nbsp; // properties
&nbsp; protected Color myColor;
&nbsp; protected boolean myBooleanInstanceVariable = true;
&nbsp;&nbsp;
&nbsp; public Beans01(){//constructor
&nbsp;&nbsp;&nbsp; myColor = Color.yellow;
&nbsp;&nbsp;&nbsp; setBackground(myColor);
&nbsp;&nbsp;&nbsp; sizeToFit();//see discussion below
&nbsp; }//end constructor

&nbsp; //The following method and the above call to the method&nbsp;
&nbsp; // in the constructor are required to cause the bean to&nbsp;
&nbsp; // be the correct size in the BeanBox.&nbsp; It is not&nbsp;
&nbsp; // required when the Bean is tested in an ordinary Frame
&nbsp; // object.&nbsp; The reason for the difference hasn't been&nbsp;
&nbsp; // determined.
&nbsp; private void sizeToFit () {
&nbsp;&nbsp;&nbsp; this.setSize(getPreferredSize());
&nbsp;&nbsp;&nbsp; Component p = getParent();
&nbsp;&nbsp;&nbsp; if (p != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.invalidate();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; p.doLayout();
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end sizeToFit()&nbsp;&nbsp;

&nbsp; //This method defines the display size of the object.&nbsp;&nbsp;
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()

&nbsp; //The following "set" and "is" methods in conjunction&nbsp;
&nbsp; // with the instance variable myBooleanInstanceVariable
&nbsp; // constitute a boolean property. For boolean properties,
&nbsp; // either a "get" method or an "is" method will support
&nbsp; // the design pattern requirement.
&nbsp; public synchronized boolean isMyBooleanProperty(){
&nbsp;&nbsp;&nbsp; return myBooleanInstanceVariable;
&nbsp; }//end isDummyInstanceVariable()
&nbsp;&nbsp;
&nbsp; public synchronized void setMyBooleanProperty(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boolean data){
&nbsp;&nbsp;&nbsp; myBooleanInstanceVariable = data;
&nbsp; }//end setMyBooleanProperty

&nbsp; //The following "set" and "get" methods in conjunction&nbsp;
&nbsp; // with the instance variable myColor constitute a&nbsp;
&nbsp; // property of type Color.&nbsp;&nbsp;
&nbsp; public synchronized void setColor(Color inColor){
&nbsp;&nbsp;&nbsp; myColor = inColor;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp; }//end setColor()

&nbsp; public synchronized Color getColor(){
&nbsp;&nbsp;&nbsp; return myColor;
&nbsp; }//end getColor

&nbsp; //The following two methods are exposed to the builder
&nbsp; // tool as accessible methods.&nbsp;&nbsp;
&nbsp; public synchronized void makeBlue(){
&nbsp;&nbsp;&nbsp; myColor = Color.blue;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp; };//end makeBlue()

&nbsp; public synchronized void makeRed(){
&nbsp;&nbsp;&nbsp; myColor = Color.red;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp; };//end makeRed()

&nbsp; //The following two methods expose to the builder tool
&nbsp; // the fact that this Bean is able to multicast Action
&nbsp; // events (but the methods are incomplete for brevity).
&nbsp; public synchronized void addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionListener e){
&nbsp;&nbsp;&nbsp; //Incomplete.&nbsp; Need to put some substance here
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "addActionListener not fully implemented");
&nbsp; }//end addActionListener()&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; public synchronized void removeActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionListener e){
&nbsp;&nbsp;&nbsp; //Incomplete.&nbsp; Need to put some substance here
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "removeActionListener not fully implemented");
&nbsp; }//end removeActionListener
&nbsp;&nbsp;
}//end class Beans01.java

&nbsp;</pre></td></tr></table>

<center><h2><a name="listing of test program"></a><font color="#ff0000">Listing of
Test Program</font></h2></center>
The following Java application can be used to test the interface of the
skeleton Bean program presented above. There is nothing in this application
that hasn't been covered in depth in previous lessons, so no analysis of
the program, other than that provided in the comments, will be provided.

<p>A subsequent lesson will explain how to also test the skeleton Bean
program using the JavaSoft BeanBox.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Beans01Test.java.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.1.

The purpose is to test the bean named Beans01.java in a&nbsp;
Frame.

A Bean01 object is placed in the frame along with eight&nbsp;
buttons. The visual manifestation of the Bean object is a&nbsp;
colored square.

One pair of buttons exercises the "get" and "set" color&nbsp;
properties of the Bean.

A second pair of buttons invokes the makeRed() and&nbsp;
makeBlue() methods of the Bean.

A third pair of buttons invokes the addActionListener()&nbsp;
and removeActionListener() methods of the Bean.

A fourth pair of buttons exercises the "set" and "is"&nbsp;
boolean properties of the Bean.

For those cases where information is returned from the&nbsp;
Bean, it is displayed on the standard output device.

The program was tested using JDK 1.1.1 and Win95.&nbsp;&nbsp;
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class Beans01Test extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Beans01Test();
&nbsp; }//end main

&nbsp; public Beans01Test(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; Beans01 myBean = new Beans01();//instantiate Bean obj
&nbsp;&nbsp;&nbsp; add(myBean);//Add it to the Frame
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate several test buttons&nbsp;
&nbsp;&nbsp;&nbsp; Button buttonToSetColor = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "set color property");
&nbsp;&nbsp;&nbsp; Button buttonToGetColor = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "get color property");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeRedMethod = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Invoke makeRed Method");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeBlueMethod = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Invoke makeBlue Method");
&nbsp;&nbsp;&nbsp; Button buttonToAddActionListener = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Add Action Listener");
&nbsp;&nbsp;&nbsp; Button buttonToRemoveActionListener = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Remove Action Listener");
&nbsp;&nbsp;&nbsp; Button buttonToSetBooleanProperty = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Set boolean Property");
&nbsp;&nbsp;&nbsp; Button buttonToGetBooleanProperty = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Get boolean Property");
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the test buttons to the frame&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(buttonToSetColor);
&nbsp;&nbsp;&nbsp; add(buttonToGetColor);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeRedMethod);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeBlueMethod);
&nbsp;&nbsp;&nbsp; add(buttonToAddActionListener);
&nbsp;&nbsp;&nbsp; add(buttonToRemoveActionListener);
&nbsp;&nbsp;&nbsp; add(buttonToSetBooleanProperty);
&nbsp;&nbsp;&nbsp; add(buttonToGetBooleanProperty);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setSize(250,350);
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //Register action listener objects for all the test&nbsp;
&nbsp;&nbsp;&nbsp; // buttons&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; buttonToSetColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToGetColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new GetColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeRedMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new RedActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeBlueMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BlueActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToAddActionListener.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new AdditActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToRemoveActionListener.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new RmovitActionLstnr(myBean));
&nbsp;&nbsp;&nbsp; buttonToSetBooleanProperty.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetBoolPropLstnr(myBean));
&nbsp;&nbsp;&nbsp; buttonToGetBooleanProperty.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new GetBoolPropLstnr(myBean));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //terminate when frame is closed
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class Beans01Test.java
//=======================================================//
//The following two classes are used to instantiate&nbsp;
// objects to be registered to listen to two of the&nbsp;
// buttons on the test panel.&nbsp; When the&nbsp;
// buttonToSetBooleanProperty is pressed, the boolean&nbsp;
// property is set to false. When the&nbsp;
// buttonToGetBooleanProperty is pressed, the current&nbsp;
// boolean property is displayed on the standard output&nbsp;
// device.

class SetBoolPropLstnr implements ActionListener{
&nbsp; Beans01 myBean;
&nbsp;&nbsp;
&nbsp; SetBoolPropLstnr(Beans01 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.setMyBooleanProperty(false);
&nbsp; }//end actionPerformed()
}//end class SetBoolPropLstnr
//=======================================================//
class GetBoolPropLstnr implements ActionListener{
&nbsp; Beans01 myBean;
&nbsp;&nbsp;
&nbsp; GetBoolPropLstnr(Beans01 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(myBean.isMyBooleanProperty());
&nbsp; }//end actionPerformed()
}//end class GetBoolPropLstnr

//=======================================================//

//The following two classes are used to instantiate&nbsp;
// objects to be registered to listen to two of the&nbsp;
// buttons on the test panel.&nbsp; When the setColor button is
// pressed, the Color property is set to green. When the&nbsp;
// getColor button is pressed, the current color is&nbsp;
// displayed on the standard output device.
class SetColorListener implements ActionListener{
&nbsp; Beans01 myBean;
&nbsp;&nbsp;
&nbsp; SetColorListener(Beans01 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.setColor(Color.green);
&nbsp; }//end actionPerformed()
}//end class SetColorListener
//=======================================================//
class GetColorListener implements ActionListener{
&nbsp; Beans01 myBean;
&nbsp;&nbsp;
&nbsp; GetColorListener(Beans01 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(myBean.getColor().toString());
&nbsp; }//end actionPerformed()
}//end class GetColorListener

//=======================================================//
//The following class is used to instantiate a dummy&nbsp;
// ActionListener object which is passed to the&nbsp;
// addActionListener() and removeActionListener() methods
// of the Bean.
class MyDummyActionListener implements ActionListener{
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp; }//end empty actionPerformed() method
}//end class MyDummyActionListener
//=======================================================//
//The following two classes are used to instantiate&nbsp;
// objects to be registered to listen to two of the&nbsp;
// buttons on the test panel.&nbsp; When the buttons are&nbsp;
// pressed, the addActionListener() and&nbsp;
// removeActionListener() methods of the Bean are invoked.
class AdditActionListener implements ActionListener{
&nbsp; Beans01 myBean;
&nbsp;&nbsp;
&nbsp; AdditActionListener(Beans01 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.addActionListener(new MyDummyActionListener());
&nbsp; }//end actionPerformed()
}//end class AdditActionListener
//=======================================================//
class RmovitActionLstnr implements ActionListener{
&nbsp; Beans01 myBean;
&nbsp;&nbsp;
&nbsp; RmovitActionLstnr(Beans01 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.removeActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyDummyActionListener());
&nbsp; }//end actionPerformed()
}//end class AdditActionListener
//=======================================================//
//The following two classes are used to instantiate&nbsp;
// objects to be registered to listen to two of the&nbsp;
// buttons on the test panel.&nbsp; When the buttons are&nbsp;
// pressed, these objects invoke methods of the Bean under
// test. The first class invokes the makeRed() method and
// the second class invokes the makeBlue() method.
class RedActionListener implements ActionListener{
&nbsp; Beans01 myBean;
&nbsp;&nbsp;
&nbsp; RedActionListener(Beans01 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeRed();
&nbsp; }//end actionPerformed()
}//end class RedActionListener
//=======================================================//
class BlueActionListener implements ActionListener{
&nbsp; Beans01 myBean;
&nbsp;&nbsp;
&nbsp; BlueActionListener(Beans01 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeBlue();
&nbsp; }//end actionPerformed()
}//end class RedActionListener
//=======================================================//
class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>