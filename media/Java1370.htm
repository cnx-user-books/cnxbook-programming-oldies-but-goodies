<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 11, The Comparator Interface, Part 3</h2>
<p><i><font color="#000000">Baldwin shows you how to use a Comparator to cause
a TreeSet collection to be sorted in descending order while preserving
the impact of differences in case.</font></i></p>
<b>Published:</b>&nbsp; August 20, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1370
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">A miniseries</font></b>
<p>This is the eleventh lesson in a miniseries on Java data structures
and the Java<i> Collections Framework.</i>&nbsp; The first lesson in the
miniseries was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1368.htm">Data Structures in Java: Part 10, The
Comparator Interface, Part 2</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p><b><font color="#FF0000">A sub-series</font></b>
<p>This is also the third lesson in a sub-series on the <b>Comparator</b>
interface.&nbsp; The purpose of the lessons in this sub-series is to teach
you about the interactions between the <b>Comparator</b> interface and
the Collections Framework<i>,</i> particularly with respect to the
<b>Set</b>,
<b>SortedSet</b>,
and <b>SortedMap</b> interfaces of the Collections Framework.&nbsp; This
lesson discusses <b>Set</b> and <b>SortedSet</b>.&nbsp; A discussion of
<b>SortedMap</b>
will be deferred for inclusion in a subsequent lesson.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">In this lesson, I will teach you how to use a <b>Comparator</b>
to cause a <b>TreeSet</b> collection to be sorted in descending order while
preserving the impact of differences in case.&nbsp; We might refer to this
as <i>reverse natural order.</i>&nbsp; In other words, the sorting order
is the same as the <i>natural order</i> except that the order is descending
instead of ascending.</font>
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Program</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Let's begin with a little quiz to test your prior knowledge of the Collections
Framework.
<p>What output is produced by the program shown in Listing 1?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; BILL Bill JOE Joe TOM Tom</li>

<li>
D.&nbsp; Tom TOM Joe JOE Bill BILL</li>

<li>
E.&nbsp; Joe Bill Tom</li>

<li>
F.&nbsp; None of the above.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparator04.java
//Copyright 2001, R.G.Baldwin

import java.util.*;
import java.io.Serializable;

public class Comparator04{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparator04

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;

&nbsp;&nbsp;&nbsp; ref = new TreeSet(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new TheComparator());
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();

&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements Comparator,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int compare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

&nbsp;&nbsp;&nbsp; int result = ((String)o1).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compareTo(((String)o2));
&nbsp;&nbsp;&nbsp; return result*(-1);
&nbsp; }//end compare()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public boolean equals(Object o){
&nbsp;&nbsp;&nbsp; if(!(o instanceof TheComparator))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
&nbsp;&nbsp;&nbsp; else return true;
&nbsp; }//end overridden equals()
}//end class TheComparator

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p>If you selected the following, you are correct:
<p><b>D.&nbsp; Tom TOM Joe JOE Bill BILL</b>
<p><b><font color="#FF0000">Similar to previous programs</font></b>
<p>The overall structure of this program is very similar to programs that
I have discussed in previous lessons.&nbsp; Therefore, I will concentrate
on those aspects of this program that differentiate it from the programs
in previous lessons.
<p><b><font color="#FF0000">A new TreeSet object with a Comparator</font></b>
<p>The code in Listing 2 instantiates a new <b>TreeSet</b> object, by providing
a reference to an anonymous object that implements the
<b>Comparator</b>
interface.&nbsp; That object is instantiated from the class named <b>TheComparator</b>.&nbsp;
It is the <b>Comparator</b> object that will be of most interest to us
in this lesson.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Collection ref;

&nbsp;&nbsp;&nbsp; ref = new <b>TreeSet</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>new TheComparator(</b>));
&nbsp;&nbsp;&nbsp; Populator.<b>fillIt</b>(ref);

&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Populating the TreeSet collection</font></b>
<p>After the <b>TreeSet</b> object is instantiated, it is passed to a method
named <b>fillIt</b> where the <b>TreeSet</b> collection is populated with
the names of several people.
<p><b><font color="#FF0000">Display the contents of the TreeSet collection</font></b>
<p>As shown by the code in Listing 2, after the <b>TreeSet</b> collection
is populated, an <b>Iterator</b> is obtained for that collection and used
to display the contents of the collection.&nbsp; The output produced by
the program is shown below:
<p><b><tt>Tom TOM Joe JOE Bill BILL</tt></b>
<p><b><font color="#FF0000">Analyzing the contents of the TreeSet collection</font></b>
<p>We will need to compare this output with the names used to populate
the collection to appreciate the true significance of the use of the <b>Comparator</b>
object.
<p>At this point, it is worth pointing out that the six names contained
in the collection are returned by the iterator in descending order, taking
the significance of upper and lower case into account.&nbsp; In other words,
names beginning with letters that are high in the alphabet occur before
names beginning with letters that are lower in the alphabet.&nbsp; In addition,
names containing lower case characters appear before the same names containing
only upper case characters.
<p><b><font color="#FF0000">Method used to populate the collection</font></b>
<p>Listing 3 shows the method named <b>fillIt</b> that was used to populate
the collection with references to six <b>String</b> objects.&nbsp; As you
can see, the names weren't added in any particular order.
<p>As you can also see by comparing Listing 3 with the output shown above,
all six names that were added to the collection were displayed in the output,
but in a different order from the order in which they were added. 
<i>(Names
with the same spelling but different case were not considered to be duplicates
insofar as the contract for the set was concerned.)</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; public static void <b>fillIt</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Implementing the Comparator interface</font></b>
<p>That brings us to the class from which the <b>Comparator</b> object
was instantiated.&nbsp; The beginning portion of that class is shown in
Listing 4.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class <b>TheComparator</b>&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements <b>Comparator</b>,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int <b>compare</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p>The code in Listing 4 isn't particularly interesting.&nbsp; That code
simply throws an exception if either of the references passed to the <b>compare</b>
method refer to an object of some type other than <b>String</b>.
<p><b><font color="#FF0000">The interesting code</font></b>
<p>The interesting code is shown in Listing 5.&nbsp; The first statement
in Listing 5 uses the <b>compareTo</b> method of the string class to compare
the two objects in an <b>ascending</b> <i>natural ordering</i> sense.&nbsp;
The behavior of this method is more formally described as follows:
<blockquote><i>"Returns:&nbsp; the value 0 if the argument is a string
lexicographically equal to this string; a value less than 0 if the argument
is a string lexicographically greater than this string; and a value greater
than 0 if the argument is a string lexicographically less than this string."</i></blockquote>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; int result = ((String)o1).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>compareTo</b>(((String)o2));

&nbsp;&nbsp;&nbsp; <b>return result*(-1);

<font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Converting to reverse natural order</font></b>
<p>The most interesting line of code in this entire program is the
<b>return</b>
statement shown in Listing 5.&nbsp; This line of code changes the sign
on the value returned by the <b>compareTo</b> method before returning it
as the return value for the <b>compare</b> method.&nbsp; The effect of
changing the sign is to return a value that causes the <b>TreeSet</b> collection
to arrange the elements in <b>reverse</b> <i>natural order </i>instead
of the normal <b>ascending</b> <i>natural order.</i>
<p>As a result, the use of an iterator to access and display the contents
of the collection is as follows:
<p><b><tt>Tom TOM Joe JOE Bill BILL</tt></b>
<p>For comparison, if the names were arranged in <b>ascending</b> <i>natural
order, </i>the output would be as shown below:
<p><b><tt>BILL Bill JOE Joe TOM Tom</tt></b>
<br>&nbsp;
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I taught you how to use a <b>Comparator</b>
to cause a <b>TreeSet</b> collection to be sorted in <i>reverse natural
order.</i>&nbsp; In other words, the sorting order is the same as the <i>natural
order</i> except that the order is descending instead of ascending.</font>
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will show you how to use a <b>Comparator</b> object
to sort the contents of an array.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
