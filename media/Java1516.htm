<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">

	<h2 align="center">Introduction to Alice Programming</h2>

<i>Baldwin reviews a major 3D interactive graphics Java program named Alice 
that is used to teach beginners how to program.</i><p><b>Published:</b>&nbsp; 
April 24, 2007<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 1516</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
			<li><a href="#Tables">Tables</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion</a></li>
	<ul>
		<li><a href="#Getting_started">Getting started</a></li>
		<li><a href="#Creating_and_animating_an_Alice_world">Creating and 
		animating an Alice world</a></li>
		<li><a href="#Objects_in_3D_space">Objects in 3D space</a></li>
		<li><a href="#A_simple_Alice_program">A simple Alice program</a></li>
	</ul>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p> <font color="#FF0000"><b>Target audience</b></font></p>
<p> The target audience for this article includes experienced programmers who would 
like an interesting diversion from work while eating lunch at their desk, and experienced programmers who have children, 
grandchildren, siblings or friends who need to learn how to program.</p>
<p> <font color="#FF0000"><b>An interesting diversion</b></font></p>
<p> If you spend your lunch hour at your desk eating a sandwich, playing
<a href="http://www.rummigame.com/cubrummy/">Cub Rummy</a>, watching 
outrageous videos at <a href="http://www.youtube.com/">YouTube</a>, or watching 
bad-news videos on your favorite news channel, all you have to 
show for it at the end of the lunch period is indigestion.&nbsp; However, if you 
spend that time using <a href="http://www.alice.org/">Alice</a> to create an 
animation video of the ice skater shown in <a href="#Figure_11">Figure 11</a> 
jumping over three or four of the characters in <a href="#Figure_1">Figure 1</a>, 
you could show it off to your peers and brag a little at the end of the lunch 
period.</p>
<p> <font color="#FF0000"><b>Teaching teenagers to write computer programs</b></font></p>
<p> On a slightly more serious note, have you ever had the thought that you would like to teach your teenager to 
program?&nbsp; Your reason may 
simply be to try to make them aware that there is more to a computer than a 
tool for hanging out at <a href="http://www.myspace.com/">myspace.com</a>, 
visiting <a href="http://www.youtube.com/">YouTube</a>, or playing computer 
games written by others.</p>
<p> <font color="#FF0000"><b>No way!</b></font></p>
<p> When you mentioned that possibility to your teenager as casually as you could, did she roll 
his eyes and give you a look that means &quot;No way!&quot;</p>
<p> Whatever your reason for thinking that it might be beneficial for your 
teenager to learn a little about computer programming, there may actually be a way to interest 
that teenager in learning to program.&nbsp; That way 
is a very impressive Java program named <a href="http://www.alice.org/">Alice</a>, 
which can make learning to write computer programs fun even for teenagers.&nbsp;
<i>(It will give them the appearance of being gamers, which is probably more 
socially acceptable than the appearance of being nerds.)</i></p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Disclaimer:</b>
  Professor Baldwin has no vested interest in Carnegie Mellon University or the Stage3 
	Research Group.&nbsp; He is an independent author whose only interest in 
	Alice is that of professional development.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>A Java program from Carnegie Mellon University</b></font></p>
<p> Alice is a computer program written in Java by the
<a href="http://www.alice.org/stage3/">Stage3 Research Group</a> at
<a href="http://www.cmu.edu/">Carnegie Mellon University</a> that makes it easy to 
write object-based, event driven, 3D animation and game programs with 
a cast that can be selected from 
<a href="http://www.alice.org/gallery/index.html"><i>hundreds</i></a><i> </i>of 
available objects.&nbsp; A 
small sampling of the available objects from the Alice class gallery is shown in Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. A sampling of the objects available in Alice. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a01.jpg" width="455" height="341"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p> In this article, I will give you some background on the Alice program, and 
describe some of its features.</p>
<h3> <a name="General">General</a></h3>
<p> <font color="#FF0000"><b>Alice is not a toy</b></font></p>
<p> Alice is not a toy 
designed solely to create pretty pictures.&nbsp; Rather, Alice is a full-featured 
programming language designed for use in teaching programming to beginners on 
the basis of programming principles that are well recognized within the computer 
science community.&nbsp; For example, Alice supports almost all of the fundamental programming 
concepts that we have taught for many years in the programming fundamentals course at 
the community college where I teach.</p>
<p> <font color="#FF0000"><b>A serious 3D graphics programming environment</b></font></p>
<p> Here is a quotation from the
<a href="http://www.alice.org/stage3/projects.html">projects</a> page of the
<a href="http://www.alice.org/stage3/">Stage3 Research Group</a>:</p>
<p> <i>Alice is a 3d graphics programming environment intended to be a gentle 
first introduction to students ranging from 6th grade to college, typically 
students who would not take (or pass!) a programming course.</i></p>
<p> <font color="#FF0000"><b>Elimination of frustration</b></font></p>
<p> <i>The Alice project was motivated by the fact that for most first-time 
students, the experience of learning to program has been filled with 
frustration. Hours of trying to understand syntax errors in pursuit of a working 
Fibonacci sequence generation program have lead many students to conclude that 
Computer Science is uninteresting before they have completed a single course.</i></p>
<p> <font color="#FF0000"><b>The goal of Alice</b></font></p>
<p> <i>The goal of the Alice project is to change the first experience students 
have with computer programming. We believe that Alice will change the experience 
of learning to program in two main ways: removing unnecessary frustration and 
providing an environment in which beginning students, of both genders, can 
create programs they find compelling.</i></p>
<p> <font color="#FF0000"><b>Drag-and-drop instead of type</b></font></p>
<p> Continuing with quotations from the <a href="http://www.alice.org/stage3/">
Stage3 Research Group</a>:</p>
<p> <i>When students create programs in Alice, they do not type. Instead, they 
drag and drop words representing commands that objects in the 3D scene 
understand. </i></p>
<p> <i>For example, a student may instruct a bunny in the 3D scene to &quot;move 
forward&quot; or &quot;look at the camera.&quot; </i></p>
<p> <font color="#FF0000"><b>Alice is full featured</b></font></p>
<p> <i>In addition to straight-forward commands, students can also drag 
traditional programming constructs, such as &quot;if,&quot; &quot;loop N times,&quot; &quot;do while 
something is true,&quot; etc. Students can construct &quot;If&quot; statements by dragging 
questions like &quot;is the carrot near the rabbit&quot; or &quot;how tall is the tree&quot; into 
them. </i></p>
<p> <i>Although the terminology is intentionally simplistic, Alice is actually a 
complete programming environment, supporting arrays, lists, functions with 
parameters, recursion, and an object-based data model. In addition, methods can 
be stored as part of an object and then loaded into different 3d &quot;worlds&quot; 
created with Alice. </i></p>
<p> And might I add that Alice provides a rudimentary system for writing 
event-driven programs, making it suitable for writing games and instructional 
programs for younger children.</p>
<p> <font color="#FF0000"><b>Why does Alice succeed?</b></font></p>
<p> <i>Alice succeeds for several fundamental reasons </i></p>
<ol>
	<li><i>By removing typing and the ability to make a syntax error, Alice 
	removes much of the initial frustration for new programmers, </i></li>
	<li><i>The ideas of data and objects are very concrete when students can 
	*see* what they are, and </i></li>
	<li><i>Almost all changes to the program state are visible and animated, so 
	debugging is a much less obscure task it is much easier to realize that &quot;the 
	rabbit moved backwards when I meant to for it to move forward&quot; than to 
	realize that &quot;I subtracted one from the integer 'x' when I intended to add 
	one&quot; (particularly when 'x' isn't directly visible on the screen).</i></li>
</ol>
<p> <font color="#FF0000"><b>Alice 2.0 is free and practical</b></font></p>
<p> The Alice 2.0 programming environment can be
<a href="http://www.alice.org/downloads/authoringtool/">downloaded</a> free of 
charge from Carnegie Mellon University.&nbsp; Furthermore, it doesn't require a 
Windows installation.&nbsp; All that is required to run Alice is to:</p>
<ol>
	<li>Download the zip file containing the Alice environment.</li>
	<li>Extract the files and directories from the zip file into a local 
	directory.</li>
	<li>Double-click on one of the exe files that are extracted from the zip 
	file.</li>
</ol>
<p> Once the zip file is downloaded, further access to the Internet is not 
required.&nbsp; Many classes for creating 3D objects are stored locally in an 
area that is called the gallery.&nbsp; However, in order to conserve local disk 
space, the classes for many other objects are not routinely included in the 
local class library. &nbsp; Rather, 
they can be accessed from a web 
version of the class gallery.</p>
<p> <font color="#FF0000"><b>Fits on a 256 mbyte USB flash drive</b></font></p>
<p> The entire local version of the Alice development environment will fit on a 
256 mbyte USB flash drive, and can be executed directly from the flash drive.&nbsp; 
This makes it possible for students to carry the development kit with them from 
one computer to another.</p>
<p> <font color="#FF0000"><b>Improved accessibility</b></font></p>
<p> The use of the drag-and-drop programming paradigm causes Alice to be much 
more <a href="http://en.wikipedia.org/wiki/Accessibility">accessible</a> to 
beginning programming students than 
languages such as Java, C++, and C# that require extensive keyboard activity for 
use.&nbsp; A student who can type a few strings with one finger and operate a 
finger-driven mouse pad can write Alice programs just as rapidly and effectively 
as a student who can type 60 wpm.</p>
<p> <font color="#FF0000"><b>What about Alice documentation?</b></font></p>
<p> Having been teaching and programming in Java for the past ten years, I have 
become spoiled by the availability of extensive detailed Java documentation.&nbsp; 
In my opinion, the main thing that is lacking from Alice 2.0 is good documentation.</p>
<p> Because I am planning to teach a programming fundamentals course using Alice 
in the near future, I consider a good set of documentation to be vital to the 
success of that course.&nbsp; Apparently however, most of the efforts of the
<a href="http://www.alice.org/stage3/">Stage3 Research Group</a> at Carnegie 
Mellon are now being dedicated to the development of Alice 3.0.&nbsp; Therefore, 
I don't expect much in the way of additional documentation on Alice 2.0 to be 
forthcoming from that group.</p>
<p> <font color="#FF0000"><b>Alice documentation by Dick Baldwin</b></font></p>
<p> Therefore, I am developing a form of documentation on my own.&nbsp; I am making it 
freely available online at <a href="http://www.dickbaldwin.com/tocalice.htm">
http://www.dickbaldwin.com/tocalice.htm</a>.&nbsp; </p>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b>
				<a name="Sending_email_to_Dick_Baldwin">Sending email to Dick 
				Baldwin</a></b><br>
				Send your email message to
				<a href="mailto:baldwin@dickbaldwin.com">baldwin@dickbaldwin.com</a> 
				and include the word Alice surrounded by spaces in the subject 
				line to cause the message to bypass my spam blocker.&nbsp; <i>(Note 
				that if the spammers catch onto this, I will modify these 
				instructions later.)</i>
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<p> This documentation will include a combination of tutorial lessons explaining 
how to program using Alice and appendices containing slightly more formal 
descriptions of various features of the language such as methods, functions, and 
events.&nbsp; Please feel free to use the documentation, and also feel free to 
contact me via email to make suggestions regarding possible improvement in the 
documentation.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures, listings, 
and tables while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. A sampling of the objects available in Alice.</li>
	<li><a href="#Figure_2">Figure 2</a>. The Alice splash screen.</li>
	<li><a href="#Figure_3">Figure 3</a>. The scene edit mode.</li>
	<li><a href="#Figure_4">Figure 4</a>. An airplane with its 3D axes exposed.</li>
	<li><a href="#Figure_5">Figure 5</a>. A Coach object.</li>
	<li><a href="#Figure_6">Figure 6</a>. Left arm of the Coach object.</li>
	<li><a href="#Figure_7">Figure 7</a>. Coach's arm <i>turned</i> 90 degrees 
	to the right.</li>
	<li><a href="#Figure_8">Figure 8</a>. Coach's arm <i>turned</i> backwards by 
	180 degrees.</li>
	<li><a href="#Figure_9">Figure 9</a>. Coach's arm <i>rolled</i> right by 45 
	degrees.</li>
	<li><a href="#Figure_10">Figure 10</a>. Coach's arm pointing to the left and up 
	with palm up.</li>
	<li><a href="#Figure_11">Figure 11</a>. Skater's starting and ending pose in 
	program Alice0125f.</li>
	<li><a href="#Figure_12">Figure 12</a>. Animation shot from program 
	Alice0125f.</li>
	<li><a href="#Figure_13">Figure 13</a>. A reduced screen shot of the Alice 
	program edit mode.</li>
	<li><a href="#Figure_14">Figure 14</a>. Object tree with iceSkater object 
	expanded.</li>
	<li><a href="#Figure_15">Figure 15</a>. Reduced screen shot of Events area 
	in program edit mode.</li>
	<li><a href="#Figure_16">Figure 16.</a> Reduced screen shot of edit pane in 
	program edit mode.</li>
	<li><a href="#Figure_17">Figure 17</a>. Screen shot of methods tab in 
	details area for iceSkater object.</li>
	<li><a href="#Figure_18">Figure 18</a>. Screen shot of properties tab in 
	details area for iceSkater object.</li>
	<li><a href="#Figure_19">Figure 19</a>. Screen shot of functions tab in 
	details area for iceSkater object.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Events for the program named 
	Alice0125f.</li>
	<li><a href="#Listing_2">Listing 2</a>. The main method for the program 
	named Alice0125f.&nbsp;</li>
	<li><a href="#Listing_3">Listing 3</a>. Source code for the method named 
	setTheStage.</li>
	<li><a href="#Listing_4">Listing 4</a>. Source code for method named 
	playTheShow.</li>
	<li><a href="#Listing_5">Listing 5</a>. Source code for the program named 
	Alice0125f.</li>
</ul>
<h4> <a name="Tables">Tables</a></h4>
<ul>
	<li><a href="#Table_1">Table 1</a>. Standard primitive methods in Alice.</li>
	<li><a href="#Table_2">Table 2</a>. Standard functions belonging to objects.</li>
	<li><a href="#Table_3">Table 3</a>. Categories of functions in the world.</li>
	<li><a href="#Table_4">Table 4</a>. Custom methods for a penguin object.</li>
	<li><a href="#Table_5">Table 5</a>. Event types in Alice.</li>
	<li><a href="#Table_6">Table 6</a>. Allowable types in Alice.</li>
	<li><a href="#Table_7">Table 7</a>. Control structures in Alice.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>The remaining sections of this article will contain brief discussions on the 
following topics as they pertain to Alice:</p>
<ul>
	<li>Getting started</li>
	<li>Setting the stage</li>
	<li>Objects in 3D space</li>
	<li>A simple Alice program</li>
</ul>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion</font></h2>
</center>
<h3><a name="Getting_started">Getting started</a></h3>
<p><font color="#ff0000"><b>Alice is not an object-oriented programming <i>(OOP)</i> 
language</b></font></p>
<p>While Alice is an outstanding product for teaching <i>object-based</i> programming, 
in my opinion Alice is not an object-oriented programming language.</p>
<p>A true OOP language must make the following features available to the 
programmer:</p>
<ul>
	<li>Encapsulation</li>
	<li>Inheritance</li>
	<li>Polymorphism</li>
</ul>
<p>Alice supports encapsulation quite well.&nbsp; In addition, it makes a 
reasonable gesture towards making inheritance available to the Alice programmer.&nbsp; 
However, there is no semblance of support for polymorphism.</p>
<p>In addition, there are numerous detailed features <i>(such at type casting)</i> 
that are expected from a true OOP language which are not available in Alice.</p>
<p><font color="#ff0000"><b>Makes writing 3D graphics a breeze</b></font></p>
<p>However, the Alice program makes it possible for a student to learn in a few months how to 
write 3D animation programs that would probably require the student to study for years 
if he were programming in hard-core Java 3D instead of using a Java program to 
write his programs in Alice.</p>
<p>While Alice is not a fully object-oriented programming environment, it is 
object-based and therefore is very suitable for getting a student started down the 
road towards object-oriented programming.</p>
<p><font color="#FF0000"><b>Downloading, installing, and running Alice</b></font></p>
<p>The installation of Alice on a Windows XP computer is very straightforward.&nbsp; 
No formal <i>&quot;Windows Installation&quot;</i> is required.&nbsp; All the 
student needs to do is to 
download a zip file from the Alice website <i>(see
<a href="#Resources">Resources</a>)</i> and 
to extract its contents into a directory of his choice on his hard disk.&nbsp; 
<i>(Alice is also available for the Macintosh, but I'm not qualified to provide any 
information in that area.)</i></p>

Once the student has extracted the files from the zip file, he double-clicks on one of 
two executable files to start Alice running.&nbsp; The two files are:<ul>
	<li>Alice.exe</li>
	<li>SlowAndSteadyAlice.exe</li>
</ul>
<p><font color="#ff0000"><b>Why two files?</b></font></p>
<p>As I understand it, the file named <b>Alice.exe</b> is for use with computers 
having high-quality hardware graphics capability, whereas the file named <b>
SlowAndSteadyAlice.exe</b> is for use with computers that don't have that 
capability.</p>
<p>The student should first try double-clicking on the file named <b>Alice.exe</b>.&nbsp; If 
that works OK, use it.&nbsp; If not, double-click on the file named <b>
SlowAndSteadyAlice.exe</b>.</p>
<p><font color="#ff0000"><b>When things go right</b></font></p>
<p>If things go right when the student double-clicks on the exe file,  
the 
flash screen shown in Figure 2 should appear on the screen.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. The Alice splash screen. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java1516a02.jpg" width="472" height="301"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>For more information on the Alice development screen and the testing of an 
installation, follow the link to the tutorial titled &quot;Getting Started&quot; in
<a href="#Resources">Resources</a>.</p>
<h3><a name="Creating_and_animating_an_Alice_world">Creating and animating an 
Alice world</a></h3>
<p>Creating and animating an Alice <i>world</i> consists of two very distinct 
steps.&nbsp; The first step, which I refer to as <i>setting the stage</i>, is similar to setting the stage for a 
stage play or a movie production.&nbsp; It involves the process of painting 
scenery, selecting costume colors, putting the players, the scenery, and other 
objects in their correct positions on the stage, and getting ready for the 
curtain to rise, or the cameras to roll.</p>
<p>A small portion of the effort required to set the stage must be accomplished 
manually outside of the program code.&nbsp; The remainder of the effort to set 
the stage can be accomplished either outside of the program code or using 
program code, depending of the preferences of the programmer.&nbsp; As I will 
illustrate in the simple Alice program that I will present and explain later, my 
preference is to accomplish that effort using program code.</p>
<p>The second step in creating and animating an Alice world is to write the program 
code to animate the world causing the 
players to behave according to the script.</p>
<p><font color="#FF0000"><b>Two major edit modes</b></font></p>
<p>The Alice development screen can be switched between two major edit modes:</p>
<ul>
	<li>Scene edit mode</li>
	<li>Program edit mode</li>
</ul>
<p>Figure 3 shows a greatly reduced screen shot of the scene edit mode.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. The scene edit mode. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a03.jpg" width="475" height="345"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A picture of the world</b></font></p>
<p>The picture of the green grassy area at the top center shows an image of the 
current state of the world including the objects that have been added to the 
world.&nbsp; <i>(The only object that has been added to the world in Figure 3 is 
the ground.)</i></p>
<p><font color="#FF0000"><b>The gallery</b></font></p>
<p>The bottom of the screen in Figure 3 shows the graphical user interface into 
the class library called the gallery.&nbsp; This is where you go to find classes 
from which to instantiate objects and add them to the world.&nbsp; This area 
also contains a link to a web-based gallery where you will find even more 
classes from which to instantiate objects.</p>
<p><font color="#FF0000"><b>The remainder of the scene edit screen</b></font></p>
<p>You can learn 
about all of the other features of the development screen in scene edit mode by 
following the links to the various 
tutorials listed in <a href="#Resources">Resources</a>. </p>
<p>Most of the time, you work in the scene edit mode while setting the stage.</p>
<p><font color="#FF0000"><b>Instantiating new objects</b></font></p>
<p>One of the limitations of Alice as compared to other programming environments 
such as Java, C++, and C# is that objects cannot be created and destroyed 
dynamically at runtime.&nbsp; Rather, all objects must be manually created and 
added to the world in scene edit mode outside of program code.&nbsp; Those objects that are not needed 
in a particular scene can either be moved off camera or made invisible or 
possibly both.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Methods, functions, and properties</b><br />
  In Alice, functions always return a value and methods never return a value.&nbsp; 
	A property is a variable belonging to the object, which would probably be called an
	<i>instance variable</i> in Java.</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>The members of an Alice object</b></font></p>
<p>Everything in an Alice world, except possibly the world itself is an object.&nbsp; All objects in Alice 
<i>(except for the world itself)</i> encapsulate twenty standard primitive methods, about 
twenty-nine standard functions, and a fair number of properties.&nbsp; This 
includes the objects that represent the camera, the light, the ground, and objects instantiated from 
classes in the gallery.</p>
<p>A list of the twenty standard primitive methods is presented in Table 1.</p>

<p>
 <b><a name="Table_1">Table 1</a>. Standard primitive methods in Alice. </b>
<table border="1" width="477"cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <b>Primitive methods in Alice 2.0</b><ol>
		<li>move(direction,amount)</li>
		<li>turn(direction,amount)</li>
		<li>roll(direction,amount)</li>
		<li>resize(amount)</li>
		<li>say(what)</li>
		<li>think(what)</li>
		<li>playSound(sound)</li>
		<li>moveTo(asSeenBy)</li>
		<li>moveToward(target,amount)</li>
		<li>moveAwayFrom(target,amount)</li>
		<li>orientTo(asSeenBy)</li>
		<li>turnToFace(target)</li>
		<li>pointAt(target)</li>
		<li>setPointOfView(asSeenBy)</li>
		<li>setPose(pose)</li>
		<li>standUp()</li>
		<li>moveAtSpeed(direction,speed)</li>
		<li>turnAtSpeed(direction,speed)</li>
		<li>rollAtSpeed(direction,speed)</li>
		<li>constrainToPointAt(target)</li>
		</ol>
		<p><i>To learn more about the primitive methods in 
Alice, follow the link to the tutorial titled &quot;Appendix A, Behavior of Primitive 
Methods&quot; in <a href="#Resources">Resources</a>.</i></td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Controlling motion and viewpoint</b></font></p>
<p>As you can see, most of the primitive methods shown in Table 1 have to do 
with motion, position, and orientation <i>(viewpoint)</i>.&nbsp; The Alice programmer has full motion 
control over all of the objects in the world including the camera, the light, 
and the ground.&nbsp; <i>(The world has no primitive methods and cannot be moved 
or re-oriented.)</i>&nbsp; 
Furthermore, the programmer can cause the motions of different objects to occur 
either concurrently, in order, or a combination of the two.</p>
<p><font color="#FF0000"><b>Method parameters</b></font></p>
<p>With one exception, all of the primitive methods have one or two required 
parameters, which are fairly intuitive in nature.&nbsp; <i>(A few are not so 
intuitive, which is one of the reasons that I wrote and published Appendix A, 
which is referenced in <a href="#Resources">Resources</a>.)</i></p>
<p>In addition, most and probably all of the primitive methods have optional 
parameters with default values.&nbsp; <i>(In my writings, I refer to these 
parameters as default parameters.)</i> When writing an Alice program and calling 
one of these methods, you can either accept the default values, or provide different values.</p>
<p><font color="#FF0000"><b>Three very interesting default parameters</b></font></p>
<p>Three of the default parameters that most of the primitive methods have are:</p>
<ul>
	<li>duration </li>
	<li>style</li>
	<li>asSeenBy</li>
</ul>
<p>These are not the only default parameters.&nbsp; They are simply the ones 
that I elected to highlight in this article.</p>
<p><font color="#FF0000"><b>The duration parameter</b></font></p>
<p>The <b>duration</b> parameter specifies the amount of time that will be 
required to accomplish the action dictated by the method.&nbsp; The default value is one second, but 
you can set it to any value you choose, including zero if you need the 
action to be completed very quickly.&nbsp; This is a parameter whose value you 
will frequently change.</p>
<p><font color="#FF0000"><b>The style parameter</b></font></p>
<p>The <b>style</b> parameter specifies the behavior of the action at the 
beginning and the end.&nbsp; The options are:</p>
<ul>
	<li>BEGIN_AND_END_GENTLY</li>
	<li>BEGIN_GENTLY_AND_END_ABRUPTLY</li>
	<li>BEGIN_ABRUPTLY_AND_END_GENTLY</li>
	<li>BEGIN_ABRUPTLY_AND_END_ABRUPTLY</li>
</ul>
<p>The default is the first item in the list.&nbsp; That choice would be 
appropriate, for example for the motion of an object in space under the influence of 
mass and inertia.&nbsp; I find a need to change the value of this parameter much 
less frequently than the value of the <b>duration</b> parameter for example.</p>
<p><font color="#FF0000"><b>The asSeenBy parameter</b></font></p>
<p>The <b>asSeenBy</b> parameter is particularly interesting.&nbsp; The default 
value is the object on which the method is called.&nbsp; However, some 
very interesting effects can be achieved by setting the value to a different 
object.&nbsp; In that case, the effect will depend on the fundamental behavior of 
the method.</p>
<p>For example, one of the sample programs that I explain in the lessons 
referenced in <a href="#Resources">Resources</a> uses this parameter to cause a 
hungry shark to circle a hapless bunny in the water.&nbsp; A second use of this 
parameter causes the camera to 
circle the unfortunate scene below as though the camera is in a news helicopter 
witnessing the scene.</p>
<p>Another example that I present in those tutorial lessons uses this parameter to cause an airplane to fly loops.</p>
<p><font color="#FF0000"><b>Standard functions</b></font></p>
<p>Table 2 shows the standard functions that belong to most, if not all objects 
other than the world, including the camera, the light, and the ground.&nbsp; 
These functions are called for a variety of purposes in an Alice animation 
program.</p>

<p>
 <b><a name="Table_2">Table 2</a>. Standard functions belonging to objects. </b>
<table border="1" width="477" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <b>Standard functions</b><ol>
	<li>isCloseTo(threshold,object)</li>
	<li>isFarFrom(threshold,object)</li>
	<li>distanceTo(object)</li>
	<li>distanceToTheLeftOf(object)</li>
	<li>distanceToTheRightOf(object)</li>
	<li>distanceAbove(object)</li>
	<li>distanceBelow(object)</li>
	<li>distanceInFrontOf(object)</li>
	<li>distanceBehind(object)</li>
	<li>getWidth</li>
	<li>getHeight</li>
	<li>getDepth</li>
	<li>isSmallerThan(object)</li>
	<li>isLargerThan(object)</li>
	<li>isNarrowerThan(object)</li>
	<li>isWiderThan(object)</li>
	<li>isShorterThan(object)</li>
	<li>isTallerThan(object)</li>
	<li>isToTheLeftOf(object)</li>
	<li>isToTheRightOf(object)</li>
	<li>isAbove(object)</li>
	<li>isBelow(object)</li>
	<li>isInFrontOf(object)</li>
	<li>isBehind(object)</li>
	<li>getPointOfView</li>
	<li>getPosition</li>
	<li>getQuaternion</li>
	<li>getCurrentPose</li>
	<li>partNamed(key)</li>
	</ol>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Functions in the world</b></font></p>
<p>The world provides more than fifty other functions, most of a very utilitarian 
nature.&nbsp; They are organized into categories.&nbsp; The categories along 
with some examples are shown 
in Table 3.&nbsp; You will note that many of the functions in both Table 2 and 
Table 3 have a distinct Java-like appearance.</p>

<p>
 <b><a name="Table_3">Table 3</a>. Categories of functions in the world.</b>
 <table border="1" width="477" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
 <b>Categories of functions in the world</b><ul>
		<li>boolean logic example:&nbsp; (a &amp;&amp; b)</li>
		<li>math example:&nbsp; a != b</li>
		<li>random example:&nbsp; Random.nextDouble()</li>
		<li>string example:&nbsp; what.toString()</li>
		<li>ask user example:&nbsp; NumberDialog(question)</li>
		<li>mouse example:&nbsp; Mouse.getDistanceFromLeftEdge()</li>
		<li>time example:&nbsp; getTimeElapsedSinceWorldStart()</li>
		<li>advanced math example:&nbsp; Math.IEEERemainder(a,b)</li>
		<li>other example:&nbsp; getVector(right,up,forward)</li>
		</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>You will frequently need to drag these functions and drop them onto 
placeholders in expressions in the edit pane to construct the desired expressions 
in your statements.</p>
<p>



<p><font color="#FF0000"><b>Custom methods</b></font></p>
<p>Some 
objects instantiated from classes in the gallery contain custom methods in 
addition to the primitive methods.&nbsp; For example, Table 4 shows the custom 
methods that are provided by Alice for a penguin object.</p>

<p>
 <b><a name="Table_4">Table 4</a>. Custom methods for a penguin object. </b>
<table border="1" width="477" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <b>Custom methods for penguin object</b><ul>
		<li>wing_flap(times)</li>
		<li>jumping(height)</li>
		<li>turn_head_right()</li>
		<li>turn_head_left()</li>
		<li>glide()</li>
		<li>jump(times)</li>
		<li>walk(move_times)</li>
		<li>walking(x)</li>
		</ul>
		</td>
    </tr>
  </tbody>
</table>
</p>
<p>Custom methods may or may not have default parameters, depending on whether 
or not the author of the method created them.</p>
<p><font color="#FF0000"><b>Defining and saving a class</b></font></p>
<p>Once you create an object and add it to 
a world, you can define and add new methods, functions, and properties to the 
object.</p>
<p>After you add methods, functions, and/or properties to an object, you 
can export and save the class that is represented by the current configuration 
of the object.&nbsp; You can use that new class to create additional objects in 
the same world, or you can use it later to create objects for a different world.&nbsp; 
If you wish to do so, you can add it to the gallery.&nbsp; This represents a 
rudimentary form of inheritance, and is the mechanism by which you can create a 
library of custom classes.</p>
<p>



<p><font color="#FF0000"><b>Various choices for setup</b></font></p>
<p>Except for the manual creation of the objects, which is required, the process of setting the stage 
can be accomplished either manually or using setup code at the beginning of the 
program <i>(as I will do in a sample program later in this article)</i>, or using a combination of the two.</p>
<p><font color="#FF0000"><b>Objects contain component parts</b></font></p>
<p>Many of the Alice objects contain various component parts <i>(see Figure 14)</i>, which are also objects.&nbsp; 
Examples of component objects are the legs, arms, and hands of an object that represents a person, the 
propeller, wheels, and fuselage of an airplane, the head, wings, and feet of a 
penguin, etc.&nbsp; </p>
<p><font color="#FF0000"><b>Creating and saving a pose</b></font></p>
<p>Often the process of setting the stage involves manipulating the various 
parts of an object to create a pose.&nbsp; If you are doing a manual setup, you 
have a choice of doing this by:</p>
<ul>
	<li>Dragging components with the mouse.</li>
	<li>Interactively 
calling methods on the objects that constitute the parts.</li>
	<li>A combination of the 
two.</li>
</ul>
<p>Once you have created a pose, you can save it as a property of the 
object and use it in program code at runtime.&nbsp; To learn more about 
operations such as this, follow the links to the lessons in <a href="#Resources">Resources</a>.</p>
<h3><a name="Objects_in_3D_space">Objects in 3D space</a></h3>
<p><font color="#ff0000"><b>An object's viewpoint</b></font></p>
<p>Every Alice object has a <i>viewpoint</i>.&nbsp; The viewpoint of an object is 
determined by:</p>
<ul>
	<li>The position of the object in 3D space.</li>
	<li>The orientation of the object as determined by a 3D coordinate system that 
	belongs to the object.</li>
</ul>
<p>For example, causing an object to move to a different position or to face in 
a different direction, or both would change the viewpoint of that object.&nbsp; 
Generally speaking, when viewpoint is important, I usually normalize the 
viewpoint of each object relative to the viewpoint of the world as the baseline 
standard.</p>
<p><font color="#ff0000"><b>An object's center point</b></font></p>
<p>Every Alice object has a <i>center point</i> and three axes.&nbsp; The center 
point is the position in space <i>(relative to the object)</i> at which that 
object's three orthogonal coordinate axes cross.&nbsp; <i>(This is often called the origin in 
other programming environments.)</i></p>
<p>Sometimes the center point is inside the object and sometimes it is outside 
the object.&nbsp; For example, the center point of the penguin shown in Figure 1 is a point on the 
ground midway between the penguin's feet, while the center point of the airplane 
shown in Figure 4 is inside the fuselage of the airplane.</p>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b><a name="A_disconnected_object">A 
				disconnected object</a></b><br>
				Note, however, that it is possible to break the connection 
				between an object and its component parts.&nbsp; For example, you 
				could cause an object that represents a man to move away and 
				leave his arms behind.
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<font color="#ff0000"><b>An object's motion</b></font><p>If you <b><i>move</i></b> 
an Alice object, you are actually moving its center point.&nbsp; The rest of the 
object comes along for the ride.&nbsp; <i>(See
<a href="#A_disconnected_object">sidebar</a>.)</i></p>
<p>If you <b><i>turn</i></b> an Alice object to the <i>right</i> or to the <i>
left</i>, you are rotating the object around one of its three axes.&nbsp; This 
is sometimes called <i>yaw</i>.&nbsp; If you
<b><i>turn</i></b> an Alice object <i>forward</i> or <i>backward</i>, you are 
rotating the object around a different axis.&nbsp; This is sometimes called 
<i>pitch</i>.&nbsp; If you <b><i>roll</i></b> an 
Alice object to the <i>right</i> or the <i>left</i>, you are rotating the object 
around a third axis.&nbsp; This is sometimes called <i>roll</i>.</p>
<p><font color="#ff0000"><b>Italicized method names</b></font></p>
<p>Why did I represent the words move, turn, and roll in 
boldface Italics in the above text?&nbsp; I did that to emphasize that I wasn't 
simply using a generic term for producing motion.&nbsp; Rather I was using a very 
specific term that has an official connotation.&nbsp; The official connotation is 
that <i><b>move</b></i>, <i><b>turn</b></i>, and <i><b>roll</b></i> are the 
names of primitive methods that are used to produce very specific kinds of 
motion.</p>
<p><font color="#FF0000"><b>Color coded axes</b></font></p>
<p>When you select a view of an object in scene edit mode that causes the axes belonging to that 
object to be visible, the axis that protrudes <i>up</i> is colored green, the axis 
that protrudes to the <i>right</i> is colored red, and the axis that protrudes to the 
<i>front</i> is colored blue.&nbsp; For example, Figure 4 shows an airplane 
object with its three axes exposed in scene edit mode.&nbsp; As you will see 
later, however, up, right, and front from the viewpoint of the object are not 
always the same as up, right, and front from the viewpoint of the world.&nbsp; 
For example, if you <b><i>roll</i></b> the airplane in Figure 4 by one-half a 
revolution, the green axis will then be pointing <i>down</i> from the viewpoint of the 
world but will still be pointing <i>up</i> from the viewpoint of the object.</p>
<p>
 <b><a name="Figure_4">Figure 4</a>. An airplane with its 3D axes exposed. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a04.jpg" width="414" height="281"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Many objects have component parts</b></font></p>
<p>As mentioned earlier, many objects have component parts.&nbsp; For example, a Penguin object is made up of five smaller component objects:</p>
<ul>
	<li>head</li>
	<li>right leg</li>
	<li>left leg</li>
	<li>right wing</li>
	<li>left wing</li>
</ul>
<p>Each of those component objects may contain other component objects.&nbsp; For 
example, the head contains the following component objects:</p>
<ul>
	<li>upper beak</li>
	<li>lower beak</li>
</ul>
<p><font color="#ff0000"><b>Every component object has its own center point</b></font></p>
<p>Because the right and left wings of a penguin object are themselves objects, 
it is possible to animate a penguin causing it to flap its wings independently 
of one another.&nbsp; We can do that by rotating each wing around one of its axes.&nbsp; 
However, in order for us to know how to do that, we must know where the 
center point is for each wing and we must know what constitutes front, right, 
and up from the viewpoint of the wing.&nbsp; In other words, we must know the 
directions of the red, green, and blue axes relative to the center point of the 
wing.</p>
<p><font color="#ff0000"><b>Turn and/or rotate</b></font></p>
<p>If we tell a penguin or any other object, <i>(such as a penguin's wing)</i> 
to <i><b>turn</b></i> to the right or to the left, that object will rotate 
<i>(yaw)</i> around the green axis that goes through the object's center point.&nbsp; If we tell 
an object to <i><b>turn</b></i> forward or backward, the object will rotate 
<i>(pitch)</i> around the red axis that goes through that object's center point.&nbsp; Finally, if 
we tell an object to <i><b>roll</b></i> to the right or to the left, the object 
will rotate around the blue axis that goes through that object's center point.&nbsp; 
Think about that while viewing the image of the airplane with its axes exposed 
in Figure 4.</p>
<p>As you can see, in order to cause a penguin to flap a wing, we must know the 
position of the wing object's center point, and we must also know the directions 
of the red, green, and blue axes that go through the center point for that wing.</p>
<p><font color="#FF0000"><b>Yaw</b></font><font color="#ff0000"><b>, pitch, and 
roll</b></font></p>
<p>An object in 3D space can <i>yaw</i>, <i>pitch</i>, or <i>roll</i>, and can do any one of the 
three in either of two directions.&nbsp; Therefore, the object can experience any 
combination of the following three rotations:</p>
<ol>
	<li>Yaw left or yaw right <i>(it cannot yaw left and yaw right at the same 
	time)</i></li>
	<li>Pitch down or pitch up <i>(it cannot pitch down and pitch up at the same 
	time)</i></li>
	<li>Roll left or roll right <i>(it cannot roll left and roll right at the 
	same time)</i></li>
</ol>
<p><font color="#ff0000"><b>Translation</b></font></p>
<p>In addition to rotation about the three axes, an object can also move or 
change its position in 3D space <i>
(translate)</i>:</p>
<ol>
	<li>Forward or backward <i>(but not both at the same time)</i></li>
	<li>Right or left <i>(but not both at the same time)</i></li>
	<li>Up or down <i>(but not both at the same time)</i></li>
</ol>
<p><font color="#ff0000"><b>Six degrees of freedom</b></font></p>
<p>The combination of the three possible rotational motions and the three 
possible translational motions, <i>(which can occur concurrently)</i> results in what is often called <i>six degrees of 
freedom</i>.&nbsp; Thus, Alice objects can be animated with six degrees of freedom <i>
(or more if you count the fact that the legs, arms, wings, etc., can experience 
independent rotation and/or translation while the object to which they belong is 
also experiencing rotation and/or translation).</i></p>

<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Six degrees of freedom</b><br />
  I told you earlier that many Alice objects are composed of other objects.&nbsp; 
I also told you that every Alice object has six degrees of freedom.&nbsp; Even the 
smaller component objects that make up other objects have six degrees of 
freedom.&nbsp; However, it may not make sense to exercise all six in all cases.&nbsp; For example, an airplane cannot fly backwards, but 
	an object that represents a person could walk backwards if properly animated 
	to do so.&nbsp; An interesting exercise would be to animate the mad 
	scientist shown in Figure 1 to cause him to do Michael Jackson's moon walk.</td></tr></table>
</td>
</tr>
</table>

<p><font color="#ff0000"><b>An object's axes travel with the object</b></font></p>
<p>Every object has a center point and has its own set of 3D axes. The center 
point and the 3D axes belonging to an object travel with and rotate with the 
object, independently of the other objects in the world.&nbsp; Thus, the 3D axes 
belonging to the penguin that I mentioned earlier travel and rotate with him.&nbsp; 
If I caused the penguin to <i><b>turn</b></i> forward one-half revolution in order to dive head-first 
into the water, that will cause his green axis, which originally pointed up <i>
(from my viewpoint)</i> to be pointing down <i>(from my viewpoint)</i> .&nbsp; As a 
result, at that point, I must move him <i>up</i> to force him to fall <i>down</i> into the 
water head first.&nbsp; <i>(However, there are more elegant ways to accomplish 
the same thing in Alice using the default parameter named <b>asSeenBy</b>.)</i></p>
<p>



<p><font color="#ff0000"><b>Animating component objects belonging to an object</b></font></p>
<p>To give you a taste of what is possible in Alice, I am going to show you how 
an Alice programmer might go about animating a component object that belongs to 
a larger object.&nbsp; In particular I will show you how to animate the left arm 
of a Coach object.</p>
<p>Consider the Coach object shown in Figure 5.</p>
<p>
 <b><a name="Figure_5">Figure 5</a>. A Coach object.</b><table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a05.jpg" width="412" height="309"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The Coach object is actually made up of a large number of component objects, 
each of which has six degrees of freedom.</p>
<p><font color="#ff0000"><b>Consider the left arm at the shoulder</b></font></p>
<p>Let's consider just his left arm at the shoulder joint as shown in Figure 6.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. Left arm of the Coach object.</b>
 <table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a06.jpg" width="416" height="310"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>The coach looks like a headless ghost</b></font></p>
<p>You may be wondering how I produced the image shown in Figure 6.&nbsp; To begin 
with, I repositioned the camera so that it would provide a better view of the 
center point on the left arm, which is what I wanted to see in detail.</p>
<p>Then I made his head invisible to get it out of the way.&nbsp; Then I set the
<b>opacity</b> property of the upper body to 30-percent so that we can still see 
it for reference, but we can also see through it in order to see the shoulder 
joint.</p>
<p>Finally, I caused the left arm to be rendered as a <i>wireframe</i> drawing 
instead of a <i>solid</i> drawing.&nbsp; This made it possible for us to see the 
center point of the left arm along with the red, green, and blue 3D axes associated with that center 
point.</p>
<p><font color="#ff0000"><b>Note the directions of the axes</b></font></p>
<p>To begin our analysis, we recognize that from the coach's viewpoint <i>(and 
from our viewpoint as well)</i>, the green axis is pointed <i>up</i> at this 
point.&nbsp; Similarly, the blue axis is pointing toward the <i>front</i>, and the red axis is pointing into the coach's upper body 
toward his <i>right</i> side.</p>
<p><font color="#ff0000"><b>Rotate around the green axis</b></font></p>
<p>We can rotate the arm around the green axis.&nbsp; If we <i>
<b>turn</b></i> the arm one-fourth of a revolution <i>(90 degrees)</i> to the <i>
right</i>, the coach will be pointing to the front.&nbsp; That would be OK, as shown 
in Figure 7.&nbsp; He would still be comfortable.&nbsp; <i>(Note that from the 
coach's viewpoint, the blue axis no longer points to the front and the red axis 
no longer points to the right but the red axis still points up.)</i></p>
<p>
 <b><a name="Figure_7">Figure 7</a>. Coach's arm <i>turned</i> 90 degrees to the right.</b>
 <table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a07.jpg" width="412" height="310"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>However, if we <i><b>turn</b></i> the arm to the <i>left</i> instead of the
<i>right</i>, we can't turn it very far until we would put it in a position that 
is not possible for most humans.&nbsp; So, we need to be careful as to the 
limits if we <i><b>turn</b></i> the arm to the right or to the left.</p>
<p><font color="#ff0000"><b>Rotate around the red axis</b></font></p>
<p>Going back to the original pose in Figure 6, another possibility would be to <i><b>turn</b></i> the arm <i>backwards</i> so as to rotate it 
around the red axis by as much as one-half revolution <i>(180 degrees)</i> as 
shown in Figure 8.&nbsp; However, turning the arm backwards by more than 180 
degrees, or 
turning the arm forward by any amount at all would put the arm in an unnatural 
state.</p>
<p>
 <b><a name="Figure_8">Figure 8</a>. Coach's arm <i>turned</i> backwards by 180 degrees.</b><table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a08.jpg" width="413" height="311"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Rotate the arm around the blue axis</b></font></p>
<p>Once again, going back to the original pose in Figure 6, that leaves us with two more possibilities.&nbsp; We can <i><b>roll</b></i> the 
arm to the <i>left</i> or to the <i>right</i>, thus causing it to rotate around 
the blue axis.&nbsp; For example, Figure 9 shows the arm rolled to the right by 
one-eighth of a revolution <i>(45 degrees)</i>.</p>
<p>
 <b><a name="Figure_9">Figure 9</a>. Coach's arm <i>rolled</i> right by 45 degrees.</b><table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a09.jpg" width="414" height="313"></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>As you can see, this caused the coach to lift his arm so as to point skyward.</p>
<p><font color="#ff0000"><b>Difference between a right roll and a left roll</b></font></p>
<p>The difference between a right roll and a left roll can sometimes be a little 
confusing.&nbsp; To avoid the confusion, don't think primarily in terms of what 
happens to the arm proper.&nbsp; Rather, think of what happens to the red axis.&nbsp; For 
example, a right roll around the blue axis will cause the red axis to tilt 
downward, just like a right roll in an airplane will cause the right wing to 
tilt downward.&nbsp; In the case of the coach's left arm, if the red axis tilts 
downward, then the arm proper, which protrudes in the opposite direction from 
the red axis will tilt upward.</p>
<p><font color="#ff0000"><b>The grand finale</b></font></p>
<p>It is important to note that when one of these turn or roll operations is 
performed, the arm's 3D axes travel or rotate with the arm.&nbsp; For example, the 
green axis no longer points straight up in Figure 9.&nbsp; As a result, we could 
follow the motion in Figure 9 by a turn to the right by 45 degrees <i>(rotation 
around the new position of the green axis)</i> and follow that by a turn 
backwards by 180 degrees <i>(rotation around the new position of the red axis)</i> 
resulting in the image shown in Figure 10.</p>
<p>
 <b><a name="Figure_10">Figure 10</a>. Coach's arm pointing to the left and up with palm 
	up.</b><table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a10.jpg" width="413" height="308"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Body parts are once again visible</b></font></p>
<p>Note that I made all of the coach's body parts visible in Figure 10 so that 
we can see the new position of the left arm in the context of the entire body.&nbsp; 
In this case, the coach is pointing slightly upward and slightly to his left 
with his palm turned up.</p>
<p><font color="#FF0000"><b>Calling the turn and roll methods</b></font></p>
<p>Each of the motions described above can be executed interactively by manually 
calling the <b>turn</b> and <b>roll</b> methods on the arm object during manual 
setup.&nbsp; The same methods can also be called by program code at runtime to 
animate the arm.</p>
<p>To learn more about the handling of objects in 3D space by Alice, follow the 
link to the tutorial titled &quot;Objects in 3D Space&quot; in <a href="#Resources">
Resources</a>.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>A case of the jaggies</b><br />
  Note that the requirement to reduce these images 
to a size that would fit in this narrow publication format caused them to have a 
slight case of the jaggies along diagonal lines.</td></tr></table>
</td>
</tr>
</table>
<h3><a name="A_simple_Alice_program">A simple Alice program</a></h3>
<p>It's time for us to take a look at how a simple Alice program might be put 
together.&nbsp; The goal of the program is to cause the ice skater in 
Figure 11 to face the parking meter, <i>(which is used here simply to provide a 
visible marker for the 
center of the world)</i>, rotate the lower portion of her left leg around her 
knee, and point her toe behind her as 
shown in Figure 12.&nbsp; Following this, she is to reverse the motion and 
resume the pose shown in Figure 11.</p>
<p>
 <b><a name="Figure_11">Figure 11</a>. Skater's starting and ending pose in program 
	Alice0125f.</b><table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a11.jpg" width="455" height="341"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
 <b><a name="Figure_12">Figure 12</a>. Animation shot from program Alice0125f.</b><table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a12.jpg" width="455" height="341"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Program listing</b></font></p>
<p>A complete listing of the source code for the program is presented in Listing 
5 near the end of the lesson.&nbsp; The format of the listing shown in Listing 5 is one of three 
standard output formats that are available from Alice:</p>
<ol>
	<li>Alice Style</li>
	<li>Java Style in Color</li>
	<li>Java Style in Black &amp; White</li>
</ol>
<p>The format shown in Listing 5 is Java Style in Color.&nbsp; When a program 
listing is requested, it is delivered in an HTML file in the selected style.</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>I will discuss this program in fragments.&nbsp; The first fragment is shown 
in Listing 1.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Events for the program named Alice0125f. </b>
<table bgcolor="#eeeeee" border="1" cols="1" width="477">
	<tr>
		<td>
		<h3>Events</h3>
		<table style="border: 1px solid rgb(192, 192, 192);" cellpadding="2" cellspacing="0" width="100%">
			<tr>
				<td colspan="2" bgcolor="#cbe7ec"><b>When the world starts</b></td>
			</tr>
			<tr>
				<td align="right" bgcolor="#cbe7ec"><b>Do:</b></td>
				<td bgcolor="#cbe7ec" width="100%">
				<table cellpadding="2" cellspacing="0" width="100%">
					<tr>
						<td style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4">
						<b>world.main</b> <b>( );</b></td>
					</tr>
				</table>
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<p><font color="#FF0000"><b>Event-driven programming</b></font></p>
<p>As I have mentioned earlier, Alice is an event-driven programming language.&nbsp; 
An Alice program can service the set of event types shown in Table 5.</p>

<p>
 <b><a name="Table_5">Table 5</a>. Event types in Alice. </b>
<table border="1" width="477" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <b>Event types in Alice</b><ol>
		<li>When the world starts</li>
		<li>While the world is running</li>
		<li>When a key is types</li>
		<li>While&nbsp; a key is pressed</li>
		<li>When the mouse is clicked on something</li>
		<li>While the mouse is pressed on something</li>
		<li>While something is true</li>
		<li>When something becomes true</li>
		<li>When a variable changes</li>
		<li>Let the mouse move &lt;objects&gt; </li>
		<li>Let the arrow keys move &lt;subject&gt;</li>
		<li>Let the mouse move the camera</li>
		<li>Let the mouse orient the camera</li>
		</ol>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>An event is fired <i>&quot;When the 
world starts&quot;</i> as well as at many other times during the execution of the 
program as shown in Table 5.&nbsp; This program handles only one of those event types.&nbsp; The code in 
Listing 1 instructs that the method named <b>main</b> is to be executed when that 
event is fired.&nbsp; Unlike Java, C++, and C# the Alice programmer can specify 
the method that is to be executed when the program first starts running by 
designating the method that is to handle the event shown in Listing 1.</p>

<p><font color="#FF0000"><b>The main method</b></font></p>
<p>When you create a new world in Alice, a skeleton for a method named <b>
my_first_method</b> is automatically created.&nbsp; I don't like that name for a 
method so I routinely rename it <b>main</b>.&nbsp; The <b>main</b> method for 
this program is shown in Listing 2.</p><p>
<b><a name="Listing_2">Listing 2</a>. The main method for the program named Alice0125f.&nbsp; </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
		<h3>Methods</h3>
		<table cellpadding="2" cellspacing="0" width="100%">
			<tr>
				<td colspan="2" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>public void main</b>&nbsp;(&nbsp;) <b>{</b> <br>
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
			</tr>
			<tr>
				<td rowspan="3" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Program Alice0125f, Copyright 2007, R.G.Baldwin</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<b>world.setTheStage</b> <b>( );</b></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<b>world.playTheShow</b> <b>( );</b></td>
			</tr>
			<tr>
				<td colspan="2" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			

			
			
		</table>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Methods in Alice</b></font></p>
<p>Methods in Alice can exist at either the world level or at the class <i>
(object)</i> level.&nbsp; The closest analogy that I can draw to more 
conventional programming languages such as Java is that <i>world-level</i> methods are 
sort of like class methods in Java while <i>class-level</i> methods are definitely like 
instance methods in Java.</p>
<p>For this program, I defined two additional methods at the world level named:</p>
<ol>
	<li>setTheStage</li>
	<li>playTheShow</li>
</ol>
<p>As the names imply, the purpose of the first method is to get everything 
ready for the show and the second method actually presents the show.&nbsp; As 
you can see, the code in Listing 2 calls these two methods in sequence.</p>
<p><font color="#FF0000"><b>Writing programs in Alice</b></font></p>
<p>Before getting into the details of the two methods listed above, I need to explain a little 
about the physical process of writing programs in Alice.&nbsp; I mentioned 
earlier that the Alice development screen can be switched between two major edit 
modes:</p>
<ol>
	<li>Scene edit mode</li>
	<li>Program edit mode</li>
</ol>
<p>I showed you a picture of the scene edit mode in Figure 3.&nbsp; Figure 13 
shows a greatly reduced screen shot of the program edit mode.</p>
<p>
 <b><a name="Figure_13">Figure 13</a>. A reduced screen shot of the Alice 
	program edit mode. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a13.jpg" width="475" height="356"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Various parts of the program edit screen</b></font></p>
<p>Beginning with the <i>object tree</i> in the white rectangle in the upper left, skipping the blue 
rectangular area <i>
(which is simply a picture of the current state of the world)</i> and moving 
clockwise around the screen, Figures 14 through 17 show cropped <i>(and in some 
cases reduced)</i> screen shots of 
the major areas of the screen in program edit mode.&nbsp; Note that you can drag 
the blue boundaries between the different sections in Figure 13 to reallocate space 
on the screen.&nbsp; I did that here in an attempt to get the most informative 
screen shots.</p>
<p><font color="#FF0000"><b>The object tree</b></font></p>
<p>Figure 14 shows the object tree for the completed program named <b>Alice0125f</b> 
with the <b>iceSkater</b> object expanded to show as much detail regarding 
component objects as the screen 
size would allow.</p>
<p>
 <b><a name="Figure_14">Figure 14</a>. Object tree with iceSkater object expanded. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a14.jpg" width="337" height="623"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As you can see, the ice skater is a very detailed object with details 
extending all the way down to the upper and lower eye lids.&nbsp; As a result, 
this object can be animated to blink her eyes.</p>
<p><font color="#FF0000"><b>The Events area</b></font></p>
<p>This is the area of the screen that you work in when writing a program that 
services other events in addition to the one shown in Figure 15 and Listing 1.&nbsp;
<i>(The item shown in Figure 15, with a different method name, is created 
automatically when you create the new world.)</i></p>
<p>
 <b><a name="Figure_15">Figure 15</a>. Reduced screen shot of Events area in 
	program edit mode. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a15.jpg" width="475" height="201"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The edit pane</b></font></p>
<p>Figure 16 shows the part of the screen where you will spend most of your time 
after you design the program, add the objects to the world, do whatever manual 
setup you elect to do, and are ready to begin writing code to animate the world.</p>
<p>
 <b><a name="Figure_16">Figure 16</a>. Reduced screen shot of edit pane in 
	program edit mode. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a16.jpg" width="475" height="423"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The drag-and-drop paradigm</b></font></p>
<p>You actually write the source code by dragging tiles from the <i>variables area</i> at the 
top of Figure 16, from the <i>control structures are</i>a at the bottom of Figure 16, and 
from one 
of the tabbed panes shown in Figure 17.&nbsp; You drop those tiles into 
appropriate locations in 
Figure 16.&nbsp; You occasionally need to use the mouse with an image of a number-pad to enter a numeric value.&nbsp; 
You occasionally also need to type the text for a string, a new variable name, a 
new method name, a new parameter name, etc. into a dialog.&nbsp; Otherwise, no 
typing is required to write your source code.</p>
<p><font color="#FF0000"><b>Placeholders and other complicating factors</b></font></p>
<p>Sometimes you need to specify placeholder values when you drop a tile.&nbsp; 
You then come back and replace the placeholder with another tile later.&nbsp; Also, sometimes it can be a little tricky 
constructing a complex expression by dropping tiles in the correct order.&nbsp; 
All in all, however, once you get used to it, this is a very effective way to 
write source code for a program and it virtually eliminates the possibility of 
syntax errors, which is a good thing, especially for new aspiring programmers.</p>
<p><font color="#FF0000"><b>Defining new methods</b></font></p>
<p>You create the skeleton for a new method by:</p>
<ul>
	<li>Selecting an object in the object tree in Figure 14 <i>(possibly 
	including the world)</i>.</li>
	<li>Selecting the <b>methods</b> tab for that object in Figure 17.</li>
	<li>Clicking the button labeled <b>create new method</b> in Figure 17.</li>
</ul>
<p>This will create a new tabbed pane as shown in Figure 16 that will contain the source code 
for that method.</p>
<p><font color="#FF0000"><b>Method parameters</b></font></p>
<p>If your new method requires parameters, you create them by clicking the button 
labeled <b>create new parameter</b> in Figure 16.&nbsp; This causes a dialog box 
to appear in which you specify the name and type of the new parameter.&nbsp; <i>
(The 
allowable types in Alice are shown in Table 6.)</i>&nbsp; The parameter then appears 
inside the parentheses in the method signature in Figure 16.&nbsp; <i>(The
<b>main</b> method in Figure 16 doesn't have any parameters.)</i></p>

<p>
 <b><a name="Table_6">Table 6</a>. Allowable types in Alice. </b>
<table border="1" width="477" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <b>Allowable types in Alice</b><ul>
		<li>Number</li>
		<li>Boolean</li>
		<li>Object</li>
		<li>Other<ul>
			<li>String</li>
			<li>Color</li>
			<li>TextureMap</li>
			<li>Sound</li>
			<li>Pose</li>
			<li>Position</li>
			<li>Orientation</li>
			<li>PointOfView</li>
			<li>ReferenceFrame</li>
			<li>Transformable</li>
			<li>Light</li>
			<li>Direction</li>
		</ul>
		</li>
		</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The variables area</b></font></p>
<p>If your new method needs variables, you declare them by clicking the button 
labeled <b>create new variable</b> in Figure 16.&nbsp; This causes a dialog to 
appear that allows you to specify the name, type, and initial value of the 
variable.&nbsp; The variable then appears in a new tile directly below the method signature in the edit 
pane in Figure 16.&nbsp; However, the <b>main</b> method showing in Figure 16 
doesn't have any variables.</p>
<p><font color="#FF0000"><b>The control structures area</b></font></p>
<p>The control structures area at the bottom of Figure 16 contains tiles that 
you use to specify the overall control structure of the method plus a few tiles 
that are used for other purposes.&nbsp; A brief 
description of each of these tiles is given in Table 7.</p>

<p>
 <b><a name="Table_7">Table 7</a>. Control structures in Alice. </b>
<table border="1" width="477" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <b>Control structures in Alice</b><ul>
		<li><b>doInOrder</b> - creates a code block where each item is executed in 
		sequential order.</li>
		<li><b>doTogether</b> - creates a code block where each item is executed 
		concurrently.</li>
		<li><b>if</b> - creates an <b>if-else</b> construct.</li>
		<li><b>loop</b> - creates a <b>for</b> loop.</li>
		<li><b>while</b> - creates a <b>while</b> loop.</li>
		<li><b>forAllInOrder</b> - iterates an array or list applying the same action 
		to each element in sequential order.</li>
		<li><b>forAllTogether</b> - processes an array or list applying the same action 
		to all elements concurrently.</li>
		<li><b>wait</b> - inserts a pause in the execution of the program.</li>
		<li><b>print</b> - displays text in a special output area on the screen.</li>
		<li><b>//</b> - inserts a comment in the code.</li>
		</ul>
		</td>
    </tr>
  </tbody>
</table>
</p>
<p>As you can see from Table 7, Alice supports all of the control structures 
that are 
required for writing computer programs plus two structures that support 
concurrent programming.&nbsp; Alice does not support a <b>switch</b> structure 
or a <b>do-while</b> structure, but those are generally considered in computer 
science circles to be simply convenience structures.</p>
<p><font color="#FF0000"><b>The tabbed panes in the details area</b></font></p>
	<p>Figures 17, 18, and 19 show screen shots of the three tabbed panes in the 
	details area for the iceSkater object in the program named <b>Alice0125f</b>.&nbsp; 
	Figure 17 shows the tabbed pane for the <b>methods</b> tab.</p>
<p>
 <b><a name="Figure_17">Figure 17</a>. Screen shot of methods tab in details 
	area for iceSkater object. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a17.jpg" width="338" height="644"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Figure 18 shows the tabbed pane for the <b>properties</b> tab.</p>
<p>
 <b><a name="Figure_18">Figure 18</a>. Screen shot of properties tab in details 
	area for iceSkater object. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a18.jpg" width="431" height="648"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Figure 19 shows the tabbed pane for the <b>functions</b> tab.</p>
<p>
 <b><a name="Figure_19">Figure 19</a>. Screen shot of functions tab in details 
	area for iceSkater object. </b>
<table cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java1516a19.jpg" width="333" height="647"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The method named setTheStage</b></font></p>
<p>Listing 3 contains the source code for the method named <b>setTheStage</b>.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Source code for the method named 
setTheStage. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <table cellpadding="2" cellspacing="0" width="100%">
			<tr>
				<td colspan="3" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>public void setTheStage</b>&nbsp;(&nbsp;) <b>{</b> <br>
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
			</tr>
			<tr>
				<td rowspan="21" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="2" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>doInOrder {</b></td>
			</tr>
			<tr>
				<td rowspan="19" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Align objects to the world</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Note: The ground, the parking meter, and the skater</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>are invisible at startup</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>ground</b></span>
				<b>.setPointOfView( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>world</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>parkingMeter</b></span>
				<b>.setPointOfView( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>world</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater</b></span>
				<b>.setPointOfView( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>world</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Set the camera to a known viewpoint</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>camera</b></span>
				<b>.setPointOfView( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>ground</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>camera</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>RIGHT</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				135/360 </b>revolutions</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>camera</b></span>
				<b>.moveAwayFrom( </b>
				<span style="background-color: rgb(240, 240, 255);">target = <b>
				parkingMeter</b></span> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);">amount = <b>
				10 </b>meters</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>camera</b></span>
				<b>.move( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>UP</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				1.5 </b>meters</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Set skater to her starting viewpoint</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>RIGHT</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.25 </b>revolutions</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater</b></span>
				<b>.moveAwayFrom( </b>
				<span style="background-color: rgb(240, 240, 255);">target = <b>
				parkingMeter</b></span> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);">amount = <b>
				2 </b>meters</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Cause the ground, the parking meter, and </b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>the skater to become visible</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>ground</b></span>
				<b>.set( opacity</b> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);"><b>1 (100%)</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>parkingMeter</b></span>
				<b>.set( opacity</b> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);"><b>1 (100%)</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>1 </b>second</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater</b></span>
				<b>.set( opacity</b> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);"><b>1 (100%)</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>2 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="2" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			<tr>
				<td colspan="3" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
		</table>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A feel for the lay of the land</b></font></p>
<p>While I don't plan to explain this code in detail in this article, I will 
make a few comments just to give you a feel for the lay of the land.</p>
	<p>The only manual setup required for this program is to:</p>
	<ul>
		<li>Create the world selecting the ice template for the ground.</li>
		<li>Add the ice skater and the parking meter to the world.</li>
		<li>Set the <b>opacity</b> properties for the ground, the ice skater, 
		and the world to 0% to make them invisible at startup.</li>
	</ul>
	<p>All of the remaining setup requirements are handled by the code in 
	Listing 3.</p>
	<p><font color="#FF0000"><b>Align objects to the world</b></font></p>
	<p>The first three statements following the alignment comment cause the ground, the parking meter, and the 
	ice skater to be positioned so that their centers are aligned with the 
	center of the world and they all to face in the same direction as the world.&nbsp;
	<i>(Yes, the world does face in a particular direction.)</i>&nbsp; In other 
	words, the viewpoints of the three objects are set to match <i>(aligned to)</i> the viewpoint 
	of the world.</p>
<p><font color="#FF0000"><b>A duration property value of 0</b></font></p>
<p>Because the values of the default <b>duration</b> 
	parameters for these three method calls are set to 0, this alignment process happens almost instantaneously.</p>
<p>The <b>duration</b> parameters for all of the method calls in Listing 3 <i>
	(with the exception of the final two statements)</i> are set to 0 so as to 
	cause the entire setup to occur almost instantaneously.</p>
	<p><font color="#FF0000"><b>Set the camera to a known viewpoint</b></font></p>
	<p>The statements following the camera comment cause the viewpoint <i>
	(position and orientation)</i> of the camera to be set to a known viewpoint.</p>
	<p><font color="#FF0000"><b>Set skater to her starting viewpoint</b></font></p>
	<p>The code following this comment causes the skater to assume the viewpoint 
	shown in Figure 11 <i>(but she is still invisible at this point)</i>.</p>
	<p><font color="#FF0000"><b>Make the objects visible</b></font></p>
	<p>The last three statements in Listing 3 cause the ground, the parking 
	meter, and the skater to become visible in that order.&nbsp; The ground 
	becomes visible almost instantaneously.&nbsp; The parking meter requires one 
	second to transition from invisible to totally visible.&nbsp; The skater 
	requires two seconds to make the transition from being invisible to being 
	totally visible.&nbsp; This is a simple transition effect, of which many are 
	possible.</p>
	<p><font color="#FF0000"><b>The doInOrder construct</b></font></p>
	<p>You may be wondering why I included all of the code in Listing 3 in a <b>doInOrder</b> 
	construct since all of the statements in Listing 3 would be executed in 
	sequential order with or without that construct.&nbsp; The reason has to do 
	with real estate in the edit pane.&nbsp; The available real estate in the edit pane in Figure 16 
	is somewhat limited.&nbsp; When the pane becomes full, you can 
	scroll the code up and down in the typical fashion but this is somewhat 
	inconvenient.</p>
<p>The 
	code in the edit pane appears in the form of a tree structure that allows 
	you to collapse and expand the nodes of the tree.&nbsp; The first seven control 
	structures in Table 7 constitute nodes on that tree.&nbsp; When you 
	place code in one of those structures, you can collapse all of the code 
contained in the structure into 
	a single line of text in the edit pane to make room for other code.&nbsp; 
	Therefore, I usually include sequential code in a <b>doInOrder</b> control 
	structure so I can collapse it later to make room for 
	creating and editing other code while minimizing the requirement to scroll 
	the code in the edit pane.</p>
	<p><font color="#FF0000"><b>The method named playTheShow</b></font></p>
	<p>The source code for the method named <b>playTheShow</b> is shown in Listing 4.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Source code for method named playTheShow. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <table cellpadding="2" cellspacing="0" width="100%">
			<tr>
				<td colspan="4" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>public void playTheShow</b>&nbsp;(&nbsp;) <b>{</b> <br>
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
			</tr>
			<tr>
				<td rowspan="12" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="3" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>doInOrder {</b></td>
			</tr>
			<tr>
				<td rowspan="10" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="2" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Animate the skater's leg and foot</b></span></td>
			</tr>
			<tr>
				<td colspan="2" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#eeddff">
				&nbsp;&nbsp;<b>doTogether {</b></td>
			</tr>
			<tr>
				<td rowspan="2" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#eeddff" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater.leftLeg.lowerLeg</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>FORWARD</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.25 </b>revolutions</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater.leftLeg.lowerLeg.foot</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>FORWARD</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.12 </b>revolutions</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="2" style bgcolor="#eeddff"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			<tr>
				<td colspan="2" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<b>wait( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>1 </b>
				second</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="2" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#eeddff">
				&nbsp;&nbsp;<b>doTogether {</b></td>
			</tr>
			<tr>
				<td rowspan="2" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#eeddff" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater.leftLeg.lowerLeg.foot</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>BACKWARD</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.12 </b>revolutions</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater.leftLeg.lowerLeg</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>BACKWARD</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.25 </b>revolutions</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="2" style bgcolor="#eeddff"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			<tr>
				<td colspan="3" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			<tr>
				<td colspan="4" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
		</table>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A relatively short method</b></font></p>
<p>As you can see by comparing Listing 4 with Listing 3, the amount of code required 
to perform this animation is less than the amount of code required to get 
everything set up to begin with for this simple animation program.</p>
	<p><font color="#FF0000"><b>Concurrent execution of program code</b></font></p>
<p>This method contains no parameters and no variables, so it is pretty 
	simple as methods go.&nbsp; The code in broken into two blocks each 
	enclosed in a <b>doTogether</b> control structure.&nbsp; The two 
	statements in each <b>doTogether</b> block are executed concurrently.&nbsp; 
	The two <b>doTogether</b> blocks are executed in sequential order with a one-second 
	pause in between.</p>
	<p>The code in the first <b>doTogether</b> block causes the skater to rotate 
	her lower leg around her knee and rotate her foot around her ankle during a 
	default <b>duration</b> of one second.&nbsp; This causes the lower leg and 
	foot objects to transition from the viewpoints that they have in Figure 11 
	to the new viewpoints that they have in Figure 12.</p>
	<p>The code in the second <b>doTogether</b> block in Listing 4 is 
	essentially the reverse of the code in the first <b>doTogether</b> block, 
	causing the skater to resume the pose shown in Figure 11.</p>

<p><font color="#FF0000"><b>An appetizer, not a full-course meal</b></font></p>
	<p>Since the purpose of this article is to provide an appetizer and not a 
	full-course meal, this will probably be a good place for me to stop.&nbsp; 
	The full course meal is available at
	<a href="http://www.dickbaldwin.com/tocalice.htm">
	http://www.dickbaldwin.com/tocalice.htm</a> and I invite you to go there and 
	partake of that meal.</p>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b>The Alice demonstration videos</b><br>
				Note that I was unable to view the second demonstration video in 
				Firefox, but was successful in downloading and viewing it in 
				Internet Explorer 7 by selecting the link on the page that reads <i>&quot;If you have difficulty watching these videos, please 
	try to view <b>this file in Windows Media Player</b>.&quot;&nbsp; </i>However, it 
	took about <span lang="en-us"></span>six minutes to download the video because it is about 75 mbytes in 
	size.
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<p><font color="#FF0000"><b>The Alice website</b></font></p>
<p>I also recommend that you visit and explore the
	<a href="http://www.alice.org/">Alice</a> website.&nbsp; In particular, I 
	recommend that you view the two <a href="http://www.alice.org/Alice_movies/">
	demonstration videos</a> that are available there.</p>
	<p>Beyond that, I recommend that you
	<a href="http://www.alice.org/downloads/authoringtool/">download</a> the 
	Alice software, get it running, and run the tutorial and some of the sample 
	animations that appear on the Welcome page when you start Alice running.</p>
	<p><font color="#FF0000"><b>Visit my website to learn even more</b></font></p>
<p>And if you are interested in learning more about how to program using 
	Alice, be sure to visit my <a href="http://www.dickbaldwin.com/tocalice.htm">
	website</a>.</p>
<ul>
</ul>
<h2 align="center"><a name="Resources">Resources</a></h2>
<p><font color="#ff0000"><b>General resources</b></font></p>
<ul>
	<li><a href="http://www.dickbaldwin.com/toc.htm">Dick Baldwin's website</a></li>
	<li><a href="http://www.alice.org/">Alice v2.0, Learn to Program Interactive 
	3D Graphics</a> (Alice website)</li>
	<li><a href="http://www.alice.org/when_things_go_wrong.htm">When Things Go 
	Wrong</a> (with the Alice program)</li>
</ul>
<p><font color="#ff0000"><b>Resources from Baldwin's lessons in the series titled 
&quot;Learn to Program using Alice&quot;</b></font></p>
<ul>
	<li><a href="http://www.dickbaldwin.com/tocalice.htm">Table of Contents page</a> 
	see this page for links to lessons that were incomplete at the time this 
	article was written, but were completed later.</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0100.htm">100</a> Getting 
	Started</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0105.htm">105</a> Setting 
	the Stage</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0110.htm">110</a> Objects 
	in 3D Space</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0115.htm">115</a> Setting 
	the Stage Manually, Part 1</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0120.htm">120</a> Setting 
	the Stage Manually, Part 2</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0125.htm">125</a> Your 
	First Alice Program</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0130.htm">130</a> The 
	Program Development Cycle</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0135.htm">135</a> 
	Functions that return values</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0140.htm">140</a> Data 
	Types and Variables</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0145.htm">145</a> 
	World-Level Methods</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0150.htm">150</a> 
	Class-Level Methods and Inheritance</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0155.htm">155</a> Syntax, 
	Runtime, and Logic Errors</li>
	<li><a href="http://www.dickBaldwin.com/alice/Alice0160.htm">160</a> 
	Expressions and Operators</li>
	<li>More lessons will be added between 160 and 900.</li>
	<li><font color="#000000">
	<a href="http://www.dickBaldwin.com/alice/Alice0900.htm">900</a> Appendix A, 
	Behavior of Primitive Methods</font></li>
</ul>
<p><font color="#ff0000"><b>Downloads</b></font></p>
<ul>
	<li><a href="http://www.alice.org/downloads/authoringtool/">Download Alice 
	v2.0</a></li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listing</h2>
</center>
A complete listing of the program discussed in this lesson is shown in Listing 
5.
<p>
<b><a name="Listing_5">Listing 5</a>. Source code for the program named Alice0125f. </b>
<table bgcolor="#eeeeee" border="1" cols="1" width="477">
	<tr>
		<td>
		<h1>Alice0125f's Code</h1>
		<h1>Created by: Dick Baldwin</h1>
		<h2>world</h2>
		<h3>Events</h3>
		<table style="border: 1px solid rgb(192, 192, 192);" cellpadding="2" cellspacing="0" width="100%">
			<tr>
				<td colspan="2" bgcolor="#cbe7ec"><b>When the world starts</b></td>
			</tr>
			<tr>
				<td align="right" bgcolor="#cbe7ec"><b>Do:</b></td>
				<td bgcolor="#cbe7ec" width="100%">
				<table cellpadding="2" cellspacing="0" width="100%">
					<tr>
						<td style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4">
						<b>world.main</b> <b>( );</b></td>
					</tr>
				</table>
				</td>
			</tr>
		</table>
		<h3>Methods</h3>
		<table cellpadding="2" cellspacing="0" width="100%">
			<tr>
				<td colspan="2" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>public void main</b>&nbsp;(&nbsp;) <b>{</b> <br>
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
			</tr>
			<tr>
				<td rowspan="3" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Program Alice0125f, Copyright 2007, R.G.Baldwin</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<b>world.setTheStage</b> <b>( );</b></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<b>world.playTheShow</b> <b>( );</b></td>
			</tr>
			<tr>
				<td colspan="2" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
		</table>
		&nbsp;<table cellpadding="2" cellspacing="0" width="100%">
			<tr>
				<td colspan="3" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>public void setTheStage</b>&nbsp;(&nbsp;) <b>{</b> <br>
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
			</tr>
			<tr>
				<td rowspan="21" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="2" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>doInOrder {</b></td>
			</tr>
			<tr>
				<td rowspan="19" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Align objects to the world</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Note: The ground, the parking meter, and the skater</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>are invisible at startup</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>ground</b></span>
				<b>.setPointOfView( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>world</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>parkingMeter</b></span>
				<b>.setPointOfView( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>world</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater</b></span>
				<b>.setPointOfView( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>world</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Set the camera to a known viewpoint</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>camera</b></span>
				<b>.setPointOfView( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>ground</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>camera</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>RIGHT</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				135/360 </b>revolutions</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>camera</b></span>
				<b>.moveAwayFrom( </b>
				<span style="background-color: rgb(240, 240, 255);">target = <b>
				parkingMeter</b></span> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);">amount = <b>
				10 </b>meters</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>camera</b></span>
				<b>.move( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>UP</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				1.5 </b>meters</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Set skater to her starting viewpoint</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>RIGHT</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.25 </b>revolutions</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater</b></span>
				<b>.moveAwayFrom( </b>
				<span style="background-color: rgb(240, 240, 255);">target = <b>
				parkingMeter</b></span> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);">amount = <b>
				2 </b>meters</span> <b>);</b>
				<span style="background-color: rgb(240, 240, 255);">duration =
				<b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Cause the ground, the parking meter, and </b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>the skater to become visible</b></span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>ground</b></span>
				<b>.set( opacity</b> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);"><b>1 (100%)</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>0 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>parkingMeter</b></span>
				<b>.set( opacity</b> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);"><b>1 (100%)</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>1 </b>second</span></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater</b></span>
				<b>.set( opacity</b> <b>, </b>
				<span style="background-color: rgb(240, 240, 255);"><b>1 (100%)</b></span>
				<b>);</b> <span style="background-color: rgb(240, 240, 255);">
				duration = <b>2 </b>seconds</span></td>
			</tr>
			<tr>
				<td colspan="2" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			<tr>
				<td colspan="3" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
		</table>
		&nbsp;<table cellpadding="2" cellspacing="0" width="100%">
			<tr>
				<td colspan="4" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>public void playTheShow</b>&nbsp;(&nbsp;) <b>{</b> <br>
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
			</tr>
			<tr>
				<td rowspan="12" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="3" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2">
				&nbsp;&nbsp;<b>doInOrder {</b></td>
			</tr>
			<tr>
				<td rowspan="10" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#ffffd2" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="2" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffffff" width="100%">
				&nbsp;&nbsp;<b>// </b><span style="background-color: rgb(240, 240, 255);">
				<b>Animate the skater's leg and foot</b></span></td>
			</tr>
			<tr>
				<td colspan="2" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#eeddff">
				&nbsp;&nbsp;<b>doTogether {</b></td>
			</tr>
			<tr>
				<td rowspan="2" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#eeddff" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater.leftLeg.lowerLeg</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>FORWARD</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.25 </b>revolutions</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater.leftLeg.lowerLeg.foot</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>FORWARD</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.12 </b>revolutions</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="2" style bgcolor="#eeddff"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			<tr>
				<td colspan="2" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<b>wait( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>1 </b>
				second</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="2" style="border-top: 1px solid rgb(192, 192, 192); border-left: 1px solid rgb(192, 192, 192); border-right: 1px solid rgb(192, 192, 192);" bgcolor="#eeddff">
				&nbsp;&nbsp;<b>doTogether {</b></td>
			</tr>
			<tr>
				<td rowspan="2" style="border-left: 1px solid rgb(192, 192, 192);" bgcolor="#eeddff" width="20">
				&nbsp;&nbsp;&nbsp;&nbsp;</td>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater.leftLeg.lowerLeg.foot</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>BACKWARD</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.12 </b>revolutions</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="1" style="border: 1px solid rgb(192, 192, 192);" bgcolor="#ffe6b4" width="100%">
				&nbsp;&nbsp;<span style="background-color: rgb(240, 240, 255);"><b>iceSkater.leftLeg.lowerLeg</b></span>
				<b>.turn( </b>
				<span style="background-color: rgb(240, 240, 255);"><b>BACKWARD</b></span>
				<b>, </b><span style="background-color: rgb(240, 240, 255);"><b>
				0.25 </b>revolutions</span> <b>);</b></td>
			</tr>
			<tr>
				<td colspan="2" style bgcolor="#eeddff"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			<tr>
				<td colspan="3" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
			<tr>
				<td colspan="4" style bgcolor="#ffffd2"><b>&nbsp;&nbsp;}</b></td>
			</tr>
		</table>
		</td>
	</tr>
</table>
</p>
<p>&nbsp;</p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2007, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
java Alice </p>
<p>-end- <br>
&nbsp;</p>
</body>
</html>
