<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Alignment Properties and BoxLayout, Part 2</h2></center>
<b><i>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1031
<p>October 9, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures and listings while you are reading about
them.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In the previous lesson entitled <a href="Java1030.htm">Swing from A
to Z, Alignment Properties and BoxLayout, Part 1</a>, I recommended a list
of my earlier Swing tutorials for you to study prior to embarking on a
study of this set of lessons.
<p><b><font color="#FF0000">Where are they located?</font></b>
<p>You will find those lessons published at Gamelan.com.&nbsp; I also maintain
a consolidated Table of Contents at
<i>Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.&nbsp;
The Table of Contents on my site provides links to each of the lessons
at Gamelan.com.</font>
<p>The lessons identified on that list will introduce you to the use of
Swing while avoiding much of the detail included in this series.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">Preview</font></b>
<p>In this lesson, I will show you how to use a <b>Box</b> container with
its default <b>BoxLayout</b> manager.
<p>I will show you how to place components on the horizontal axis, and
how to establish their vertical positions relative to one another by setting
the <b>alignmentY</b> property value.
<p><b><font color="#FF0000">The Box container and BoxLayout manager</font></b>
<p><font color="#000000">Also in the </font>previous<font color="#000000">
lesson, I introduced you to the <b>Box</b> container and the <b>BoxLayout</b>
manager.&nbsp; I showed you the screen shot in Figure 1, which shows five
components placed in a <b>JFrame</b> object using the <b>BoxLayout</b>
manager.</font>
<center>
<p><img SRC="Java1031A.gif" BORDER=0 height=101 width=330 align=TEXTTOP>
<p>Figure 1 Screen Shot with BoxLayout Manager</center>

<p>I explained that the <b>BoxLayout.X_AXIS</b> constant was used when
constructing the <b>BoxLayout</b> to cause the components to be placed
along the horizontal axis.&nbsp; <i>(It is also possible to place components
along a vertical axis in BoxLayout.)</i>
<p><b><font color="#FF0000">The alignmentX and alignmentY properties</font></b>
<p>The primary purpose of this lesson is to investigate the use of the
<b>alignmentX</b>
and <b>alignmentY</b> properties that many components inherit from the
<b>JComponent</b>
class.
<p>In the program used to produce the above screen shot, the <b>alignmentY</b>
property was used to control the vertical positions of the five components
relative to one another.
<p>I will show you the code that was used to produce this screen shot later
in this lesson.
<p><b><font color="#FF0000">Components stay in a line</font></b>
<p><font color="#000000">Also in the </font>previous<font color="#000000">
lesson, I explained that if the user manually resizes a container that
contains components laid out according to <b>BoxLayout</b>, the components
stay in their line formation, even if this means that some of the components
are no longer visible.</font>
<p><font color="#000000">Figure 2 is a screen shot of the same GUI after
having manually resized it to make it narrower.</font>
<center>
<p><img SRC="Java1031B.gif" height=196 width=186 align=TEXTTOP>
<p>Figure 2 Manually Resized Version of the GUI from Figure 1</center>

<p><font color="#000000">As you can see, making the container narrower
caused the components on the ends to become partially obscured due to their
determination to <i>"stay in the line, no matter what."</i></font>
<p><b><i><font color="#FF0000">Stay on the rails, no matter what</font></i></b>
<p><i><font color="#000000">In case you didn't recognize it, the above
line is a takeoff on a book that I used to read to my children about a
little railroad engine that had trouble remembering that he had to "stay
on the rails, no matter what."&nbsp; I'll bet that book was read to many
of you by your parents as well.</font></i>
<p><b><font color="#FF0000">The BoxLayout manager</font></b>
<p><font color="#000000"><b>BoxLayout</b> is the default layout manager
for a
<b>Box</b> container.&nbsp; It can also be applied to other containers
as well, such as <b>JPanel</b>.</font>
<p><b><font color="#FF0000">BoxLayout constructor</font></b>
<p>Information from Sun regarding the constructor for <b>BoxLayout</b>
is shown below.&nbsp; We will need this later when viewing code that uses
<b>BoxLayout</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Arial Narrow"><font size=-1>public
BoxLayout(Container target,</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
int axis)</font></font>
<p><font face="Arial Narrow"><font size=-1>Creates a layout manager that
will lay out components either left to right or top to bottom, as specified
in the axis parameter.</font></font>
<p><font face="Arial Narrow"><font size=-1>Parameters:</font></font>
<ul>
<li>
<font face="Arial Narrow"><font size=-1>target - the container that needs
to be laid out</font></font></li>

<li>
<font face="Arial Narrow"><font size=-1>axis - the axis to lay out components
along. For left-to-right layout, specify BoxLayout.X_AXIS; for top-to-bottom
layout, specify BoxLayout.Y_AXIS</font></font></li>
</ul>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Setting the alignment</font></b>
<p><font color="#000000">Here is what Sun has to say about alignment in
a container being laid out using a <b>BoxLayout</b> manager.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font color="#000000">BoxLayout
attempts to arrange components at their preferred widths (for left to right
layout) or heights (for top to bottom layout).&nbsp;</font>
<p><font color="#000000">For a left to right layout, if not all the components
are the same height, BoxLayout attempts to make all the components as high
as the highest component. If that's not possible for a particular component,
then BoxLayout aligns that component vertically, according to the component's
Y alignment.&nbsp;</font>
<p><font color="#000000">By default, a component has an Y alignment of
0.5, which means that the vertical center of the component should have
the same Y coordinate as the vertical centers of other components with
0.5 Y alignment.&nbsp;</font>
<p><font color="#000000">Similarly, for a vertical layout, BoxLayout attempts
to make all components in the column as wide as the widest component; if
that fails, it aligns them horizontally according to their X alignments.&nbsp;</font></td>
</tr>
</table>

<p><b><font color="#FF0000">Set and get alignment property</font></b>
<p>The <b>JComponent</b> class provides <i>setter</i> methods for controlling
the values of the <b>alignmentX</b> and <b>alignmentY</b> properties of
objects that extend <b>JComponent</b>.&nbsp; These methods expect to receive
a <b>float</b> parameter ranging from 0.0 to 1.0.
<p><b><font color="#FF0000">What do the alignment values mean?</font></b>
<p>A Y-value of 0.0 represents alignment at the bottom, while a Y-value
of 1.0 represents alignment at the top.
<p>An X-value of 0.0 represents alignment at the left, while an X-value
of 1.0 represents alignment on the right.
<p>Values in between 0.0 and 1.0 represent proportional movement from bottom
to top, or from left to right.
<p>A value of 0.5 represents center alignment in both cases.&nbsp; As mentioned
above, the default value for Y alignment is 0.5.&nbsp; This will be illustrated
in the sample program that follows.
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
This program illustrates the use of a <b>Box</b> container.
<p>The program also illustrates the use of the <b>setAlignmentY() </b>method
inherited from the <b>JComponent</b> class to adjust the vertical positions
of some components in a <b>Box</b> container.
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will break this program down and discuss it in fragments.&nbsp; A listing
of the entire program is provided in <font color="#000000">Listing 7 near
the end of the lesson</font>.
<p><font color="#000000">This program is named <b>Swing15</b>.</font>
<p><b><font color="#FF0000">The controlling class</font></b>
<p><font color="#000000">Listing 1 shows the beginning of the controlling
class along with the <b>main()</b> method.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>class Swing15 extends JFrame{

&nbsp; public static void <b>main</b>(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing15();
&nbsp; }//end main()
&nbsp;&nbsp;
<b>Listing 1</b></font></font></pre>
</td>
</tr>
</table>

<p><font color="#000000">You have seen code like this many times in the
past.&nbsp; The only significant thing about this code is, because the
controlling class extends <b>JFrame</b>, an object of the controlling class
is also a top-level GUI that can be placed on the computer's desktop.</font>
<p><b><font color="#FF0000">The constructor</font></b>
<p><font color="#000000">Listing 2</font> shows the beginning of the constructor.&nbsp;
If you have studied the supplementary Swing lessons recommended earlier,
you will recognize that there is also nothing particularly new about this
code.&nbsp; The main reason that I highlighted it is not to explain what
it is, but rather to explain what it is <u>not</u>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp; Swing15(){//constructor

&nbsp;&nbsp;&nbsp; //Set for center <b>alignment</b> in the&nbsp;
&nbsp;&nbsp;&nbsp; // contentPane&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; getContentPane().setLayout(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FlowLayout(<b>FlowLayout.CENTER</b>));

<b>Listing 2</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Not the same alignment</font></b>
<p>Although the word <i>alignment</i> is used in the comments describing
this code, this is not the same as the <b>alignmentX</b> and <b>alignmentY</b>
properties inherited from the <b>JComponent</b> class.&nbsp; Rather, this
deals with a property named <b>alignment</b>, which is a property of objects
of the <b>FlowLayout</b> class.
<p><b><font color="#FF0000">FlowLayout constructor sets alignment property</font></b>
<p>In this case, the alignment is being set through a parameter to the
<b>FlowLayout
</b>constructor.&nbsp;
However, the <b>FlowLayout</b> class also provides a setter method named
<b>setAlignment(int
align)</b> that can be used to set the <b>alignment</b> property after
the object has been instantiated. <i>(Note that this setter method requires
an int as a parameter instead of a float.)</i>
<p><b><font color="#FF0000">Instantiate a Box object</font></b>
<p>The code in <font color="#000000">Listing 3</font> instantiates a new
<b>Box</b>
container object and adds it to the content pane.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; //Instantiate a Box container
&nbsp;&nbsp;&nbsp; Box aBox = new Box(<b>BoxLayout.X_AXIS</b>);

&nbsp;&nbsp;&nbsp; //Add the Box to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBox);
&nbsp;&nbsp;&nbsp;&nbsp;
<b>Listing 3</b></font></font></pre>
</td>
</tr>
</table>

<p>The parameter to the constructor for the <b>Box</b> specifies that the
components be arranged in a horizontal line within the container.
<i>(Recall
that the default layout manager for a Box is BoxLayout, and this cannot
be changed.)</i>
<p><b><font color="#FF0000">Instantiate the JButton objects</font></b>
<p>The code fragment in <font color="#000000">Listing 4</font>
<ul>
<li>
Instantiates three <b>JButton</b> objects.</li>

<li>
Sets their vertical alignment using the <b>setAlignmentY()</b> method inherited
from <b>JComponent</b>.&nbsp; <i>(Note that this method requires a float
parameter instead of an int.)</i></li>

<li>
Sets their <b>background</b> property to the color green.</li>
</ul>

<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; JButton but1 = new <b>JButton</b>("but1");
&nbsp;&nbsp;&nbsp; but1.<b>setAlignmentY</b>(0.25f);
&nbsp;&nbsp;&nbsp; but1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but2 = new <b>JButton</b>("but2");
&nbsp;&nbsp;&nbsp; but2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but3 = new <b>JButton</b>("but3");
&nbsp;&nbsp;&nbsp; but3.<b>setAlignmentY</b>(0.75f);
&nbsp;&nbsp;&nbsp; but3.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
<b>Listing 4</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Where does the background property come from?</font></b>
<p>The <b>background</b> property is also inherited into <b>JButton</b>.&nbsp;
In this case, the property is inherited from the class named <b>Component</b>,
which is a superclass of <b>JComponent</b>.
<p><b><font color="#FF0000">Default value of alignmentY</font></b>
<p>Note that the default value for the <b>alignmentY</b> property is 0.5f.&nbsp;
Since this is the desired value for the second button, it isn't necessary
to set the property for that button.&nbsp; Thus, the new property values
are set only for the first and third buttons.
<p><b><font color="#FF0000">Now let's see some labels</font></b>
<p>The code fragment in <font color="#000000">Listing 5</font>
<ul>
<li>
Instantiates two <b>JLabel</b> objects.</li>

<li>
Sets their <b>border</b> property to a <b>CompoundBorder</b> to make them
taller than the buttons.</li>

<li>
Sets their <b>background</b> property to yellow.</li>
</ul>

<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; JLabel lab1 = new <b>JLabel</b>("lab1");
&nbsp;&nbsp;&nbsp; lab1.setBorder(new <b>CompoundBorder</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EtchedBorder(),new EmptyBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20,2,20,2)));
&nbsp;&nbsp;&nbsp; lab1.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab1.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel lab2 = new <b>JLabel</b>("lab2");
&nbsp;&nbsp;&nbsp; lab2.setBorder(new <b>CompoundBorder</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EtchedBorder(),new EmptyBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20,2,20,2)));
&nbsp;&nbsp;&nbsp; lab2.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab2.setOpaque(true);

<b>Listing 5</b></font></font></pre>
</td>
</tr>
</table>

<p>I discussed the use of the <b>border</b> property in several previous
lessons.
<p><b><font color="#FF0000">Does not set alignmentY property</font></b>
<p>Note that this code does not set the <b>alignmentY</b> property for
the <b>JLabel</b> objects.&nbsp; Rather, this property is allowed to retain
its default value of 0.5f.
<p>By viewing the screen shot presented in Figure 1, you will see that
the two <b>JLabel</b> objects and the single <b>JButton</b> object with
the default value for <b>alignmentY</b>, are aligned at their vertical
centers.&nbsp; This agrees with the information from Sun that I presented
earlier.
<p><b><font color="#FF0000">One button is lower; another is higher</font></b>
<p>By viewing the screen shot in Figure 1, you will also notice that the
center of the button with the <b>alignmentY</b> value of 0.25f is aligned
about half way between the bottom and the center of the <b>JLabel</b>.
<p>The button with the <b>alignmentY </b>value of 0.75f is aligned about
half way between the center and the top of the <b>JLabel.</b>
<p><b><font color="#FF0000">Finish constructing the GUI</font></b>
<p>Finally, the code fragment in <font color="#000000">Listing 6</font>
adds the buttons and the labels to the <b>Box</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; aBox.add(but1);
&nbsp;&nbsp;&nbsp; aBox.add(lab1);
&nbsp;&nbsp;&nbsp; aBox.add(but2);
&nbsp;&nbsp;&nbsp; aBox.add(lab2);
&nbsp;&nbsp;&nbsp; aBox.add(but3);

<b>Listing 6</b></font></font></pre>
</td>
</tr>
</table>

<p>The remaining code in the program simply takes care of some utility
matters that aren't worth discussing here.&nbsp; You can view that code
in <font color="#000000">Listing 7 near the end of the lesson</font>.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In this lesson, I showed you how to use a <b>Box</b> container with its
default <b>BoxLayout</b> manager.
<p>I showed you how to place components on the horizontal axis, and how
to establish their vertical positions relative to one another by setting
the <b>alignmentY</b> property value.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will show you how to use glue and struts to control
the separation between components.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <font color="#000000">Listing
7</font>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="396" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing15
Rev 3/30/00
Copyright 2000, R.G.Baldwin

Illustrates use of setAlignmentY to adjust
the vertical position of some buttons in a&nbsp;
Box container.&nbsp; Also illustrates the use&nbsp;
of a Box container.

Tested using JDK 1.2.2 under WinNT 4.0 WkStn
**********************************/

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

class Swing15 extends JFrame{

&nbsp; //---------------------------------------//

&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing15();
&nbsp; }//end main()
&nbsp; //---------------------------------------//
&nbsp;&nbsp;
&nbsp; Swing15(){//constructor

&nbsp;&nbsp;&nbsp; //Set for center alignment in the&nbsp;
&nbsp;&nbsp;&nbsp; // contentPane&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; getContentPane().setLayout(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FlowLayout(FlowLayout.CENTER));

&nbsp;&nbsp;&nbsp; //Instantiate a new horizontal Box
&nbsp;&nbsp;&nbsp; // object.&nbsp; Could also use the method
&nbsp;&nbsp;&nbsp; // named createHorizontalBox()
&nbsp;&nbsp;&nbsp; Box aBox = new Box(BoxLayout.X_AXIS);

&nbsp;&nbsp;&nbsp; //Add the Box to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBox);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three JButton objects,
&nbsp;&nbsp;&nbsp; // make them green, and set their
&nbsp;&nbsp;&nbsp; // vertical alignment.&nbsp; Note that the
&nbsp;&nbsp;&nbsp; // default vertical alignment is 0.5f.
&nbsp;&nbsp;&nbsp; JButton but1 = new JButton("but1");
&nbsp;&nbsp;&nbsp; but1.setAlignmentY(0.25f);
&nbsp;&nbsp;&nbsp; but1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but2 = new JButton("but2");
&nbsp;&nbsp;&nbsp; but2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but3 = new JButton("but3");
&nbsp;&nbsp;&nbsp; but3.setAlignmentY(0.75f);
&nbsp;&nbsp;&nbsp; but3.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two JLabel objects&nbsp; Use a
&nbsp;&nbsp;&nbsp; // compound border to make them taller
&nbsp;&nbsp;&nbsp; // than the buttons.&nbsp; Color them yellow.
&nbsp;&nbsp;&nbsp; JLabel lab1 = new JLabel("lab1");
&nbsp;&nbsp;&nbsp; lab1.setBorder(new CompoundBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EtchedBorder(),new EmptyBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20,2,20,2)));
&nbsp;&nbsp;&nbsp; lab1.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab1.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel lab2 = new JLabel("lab2");
&nbsp;&nbsp;&nbsp; lab2.setBorder(new CompoundBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EtchedBorder(),new EmptyBorder(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 20,2,20,2)));
&nbsp;&nbsp;&nbsp; lab2.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab2.setOpaque(true);

&nbsp;&nbsp;&nbsp; //Add the buttons and the labels to the
&nbsp;&nbsp;&nbsp; // Box.
&nbsp;&nbsp;&nbsp; aBox.add(but1);
&nbsp;&nbsp;&nbsp; aBox.add(lab1);
&nbsp;&nbsp;&nbsp; aBox.add(but2);
&nbsp;&nbsp;&nbsp; aBox.add(lab2);
&nbsp;&nbsp;&nbsp; aBox.add(but3);


&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setSize(329,100);
&nbsp;&nbsp;&nbsp; setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
&nbsp;&nbsp;
}//end class Swing15

<b>Listing 7</b></font></font></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
