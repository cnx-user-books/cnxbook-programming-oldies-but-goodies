<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2 align="center">Programming MIDlets for Interactive Behavior</h2>
<p><i>Learn how to add commands to a MIDlet and how those commands are presented 
to the user in the Sun cell phone emulator.&nbsp; Also learn how to produce 
interactive behavior in a MIDlet through the use of a CommandListener object and 
an ItemCommandListener object.</i>&nbsp; </p>
<p><b>Published:</b>&nbsp; June 17, 2008<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 2586</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a></li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a></li>
	<ul>
		<li><a href="#The_Command_class">The Command class</a><ul>
		<li><a href="#The_MIDlet_named_Command02">The MIDlet named Command02</a></li>
	</ul>
		</li>
		<li><a href="#The_CommandListener_interface">The CommandListener interface</a><ul>
		<li><a href="#The_MIDlet_named_Command03">The MIDlet named Command03</a></li>
		<li><a href="#The_MIDlet_named_Command04">The MIDlet named Command04</a></li>
	</ul>
		</li>
		<li><a href="#The_ItemCommandListener_interface">The ItemCommandListener 
	interface</a><ul>
		<li><a href="#The_MIDlet_named_Command05">The MIDlet named Command05</a></li>
	</ul>
		</li>
	</ul>
	<li><a href="#Run%20the%20program">Run the programs</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p> This is one in a series of tutorial lessons designed to teach you how to 
write programs using the Sun Java Wireless Toolkit for CLDC.&nbsp; The first lesson 
was titled <i>Getting Started with MIDlets and the Sun Java Wireless Toolkit for 
CLDC</i>.&nbsp; The previous lesson was titled <i>Using Forms and Items in MIDlets 
(see <a href="#Resources">Resources</a>)</i>.</p>
<p> <font color="#FF0000"><b>What you will learn</b></font></p>
<p>I will begin by illustrating and explaining the addition of <b>Command</b> 
objects to a 
MIDlet and showing you how those commands are presented to the user in the Sun 
cell phone emulator.</p>
<p>Interactive behavior of a MIDlet is achieved, not through commands, but 
rather through the use of a <b>CommandListener</b> object or an <b>
ItemCommandListener</b> object.&nbsp; I will illustrate and explain the setting and 
subsequent processing of a <b>CommandListener</b> in one of the simplest ways 
possible.</p>
<p>Following that, I will present and explain a much more substantive MIDlet.&nbsp; 
This MIDlet illustrates the use of <b>CommandListener</b> objects to handle 
seven of the eight possible types of commands and shows how to use commands to 
navigate through the different pages of a MIDlet that is composed of several 
pages.</p>
<p>Finally, I will illustrate and explain the use of an <b>ItemCommandListener</b> 
to handle an ITEM command on an item contained in a <b>Form</b>.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Partial class hierarchy for MIDP 2.0.</li>
	<li><a href="#Figure_2">Figure 2</a>. Sun cell phone emulator with nine 
	commands showing.</li>
	<li><a href="#Figure_3">Figure 3</a>. The commandAction method.</li>
	<li><a href="#Figure_4">Figure 4</a>. The MIDlet named Command03 in the Sun 
	emulator.</li>
	<li><a href="#Figure_5">Figure 5</a>. Sun emulator screen when the MIDlet is 
	not running.</li>
	<li><a href="#Figure_6">Figure 6</a>. General behavior of each command type.</li>
	<li><a href="#Figure_7">Figure 7</a>. Screen shot of Command04 in the Sun 
	cell phone emulator.</li>
	<li><a href="#Figure_8">Figure 8</a>. ChoiceGroup selected in Sun cell phone 
	emulator.</li>
	<li><a href="#Figure_9">Figure 9</a>. Result of activating the <i>
	GetSelection</i> command.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Beginning of MIDlet class named 
	Command02.</li>
	<li><a href="#Listing_2">Listing 2</a>. Add four commands to the TextBox.</li>
	<li><a href="#Listing_3">Listing 3</a>. Add four more commands to the 
	TextBox.</li>
	<li><a href="#Listing_4">Listing 4</a>. Remaining code in the MIDlet named 
	Command02.</li>
	<li><a href="#Listing_5">Listing 5</a>. Beginning of the class for the 
	MIDlet named Commond03.</li>
	<li><a href="#Listing_6">Listing 6</a>. Add two commands to the TextBox.</li>
	<li><a href="#Listing_7">Listing 7</a>. Set a commandListener object on the 
	TextBox.</li>
	<li><a href="#Listing_8">Listing 8</a>. Remaining code for the MIDlet named 
	Command03.</li>
	<li><a href="#Listing_9">Listing 9</a>. Beginning of the class for the 
	MIDlet named Command04.</li>
	<li><a href="#Listing_10">Listing 10</a>. Set a CommandListener on the page 
	1 TextBox.</li>
	<li><a href="#Listing_11">Listing 11</a>. Remaining code for the MIDlet 
	named Command04.</li>
	<li><a href="#Listing_12">Listing 12</a>. Beginning of the class for the 
	MIDlet named Command05.</li>
	<li><a href="#Listing_13">Listing 13</a>. Append a StringItem and an 
	ImageItem to the Form.</li>
	<li><a href="#Listing_14">Listing 14</a>. Append a ChoiceGroup object to the 
	Form.</li>
	<li><a href="#Listing_15">Listing 15</a>. Add an ITEM command and an 
	ItemCommandListener to the ChoiceGroup object.</li>
	<li><a href="#Listing_16">Listing 16</a>. Source code for the MIDlet named 
	Command02.</li>
	<li><a href="#Listing_17">Listing 17</a>. Source code for the MIDlet named 
	Command03.</li>
	<li><a href="#Listing_18">Listing 18</a>. Source code for the MIDlet named 
	Command04.</li>
	<li><a href="#Listing_19">Listing 19</a>. Source code for the MIDlet named 
	Command05.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online Java tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<p>If you were expecting the interactive programming capability of J2ME to be 
similar to the JavaBeans or Delegation Event models in J2SE <i>(see
<a href="#Resources">Resources</a>)</i>, you are in for a big disappointment.&nbsp; 
The model is more akin to the somewhat rudimentary models that I describe in the 
following tutorial lessons </p>
<ul>
	<li><font color="#000000">Event Handling in JDK 1.0.2, The Event Class </font> <i>(see
<a href="#Resources">Resources</a>)</i></li>
	<li><font color="#000000">Handling Events in Extended Components without 
	Listener Objects </font> <i>(see
<a href="#Resources">Resources</a>)</i></li>
</ul>
<p><font color="#FF0000"><b>Partial class hierarchy for MIDP 2.0</b></font></p>
<p>A partial class hierarchy for MIDP 2.0 is shown in Figure 1.</p>
<p>
 <b><a name="Figure_1">Figure 1</a>. Partial class hierarchy for MIDP 2.0. </b>

<table bgcolor="#ffffff" border="1" cols="1" width="477">
	<tr>
		<td>
		<ul>
			<li>Object<ul>
				<li><i><b>Displayable</b></i><ul>
					<li><i><b>Screen</b></i><ul>
						<li><i><b>TextBox</b></i></li>
						<li><i><b>Alert</b></i></li>
						<li><i><b>List</b></i></li>
						<li><i><b>Form</b></i></li>
					</ul>
					</li>
					<li>Canvas <i>(abstract)</i><ul>
						<li>GameCanvas <i>(abstract)</i></li>
					</ul>
					</li>
				</ul>
				</li>
				<li><i><b>Display</b></i></li>
				<li><b><i>Ticker</i></b></li>
				<li><i><b>AlertType</b></i></li>
				<li><i><b>Image</b></i></li>
				<li><i><b>Item</b></i><ul>
					<li><i><b>Gauge</b></i></li>
					<li><i><b>ChoiceGroup</b></i></li>
					<li>CustomItem</li>
					<li><i><b>DateField</b></i></li>
					<li><i><b>ImageItem</b></i></li>
					<li><i><b>Spacer</b></i></li>
					<li><i><b>StringItem</b></i></li>
					<li><i><b>TextField</b></i></li>
				</ul>
				</li>
				<li><i><b>Timer</b></i></li>
				<li><i><b>TimerTask</b></i></li>
				<li><b>Command</b></li>
			</ul>
			</li>
		</ul>
		</td>
	</tr>
</table>
<p>I have discussed and illustrated the classes shown in boldface Italics <i>
(plus the <b>Choice</b> interface)</i> in earlier lessons <i>(see
<a href="#Resources">Resources</a>)</i>.&nbsp; I will discuss and illustrate the 
following class and interfaces in this lesson:</p>
<ul>
	<li><b>Command</b> class</li>
	<li><b>CommandListener</b> interface</li>
	<li><b>ItemCommandListener</b> interface</li>
</ul>
<p>I will discuss and illustrate the<b> Canvas</b> and <b>GameCanvas</b> classes 
in future lessons.&nbsp; I will leave <b>CustomItem</b> as an exercise for the 
student.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>I will present and explain four MIDlets in this lesson.&nbsp; The first 
MIDlet named <b>Command02</b> illustrates the addition of commands to a MIDlet 
and shows how those commands are presented to the user.</p>
<p>Interactive behavior of a MIDlet is achieved, not through commands, but 
rather through the use of a <b>CommandListener</b> or an <b>ItemCommandListener</b>.&nbsp; 
The MIDlet named <b>Command03</b> illustrates the setting and subsequent 
processing of a <b>CommandListener</b> in one of the simplest ways possible.</p>
<p>The MIDlet named <b>Command04</b> is a much more substantive program.&nbsp; 
It illustrates the use of <b>CommandListener</b> objects to handle seven of the 
eight possible types of commands.&nbsp; This MIDlet shows how to use commands to 
navigate through the different pages of a MIDlet that is composed of several 
pages.</p>
<p>The MIDlet named <b>Command05</b> illustrates the use of an <b>
ItemCommandListener</b> to handle an ITEM command on an item contained in a <b>
Form</b>.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><a name="The_Command_class">The Command class</a></h3>
<p>According to Sun,</p>
<blockquote>
	<p><i>&quot;The Command class is a construct that encapsulates the semantic 
	information of an action. The behavior that the command activates is not 
	encapsulated in this object. This means that command contains only 
	information about &quot;command&quot; not the actual action that happens when command 
	is activated.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>What does this really mean?</b></font></p>
<p>Perhaps the image of the Sun cell phone 
emulator shown in Figure 2 will help.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Sun cell phone emulator with nine commands 
	showing. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java2586a1.jpg" width="312" height="489"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Commands on the Sun cell phone emulator</b></font></p>
<p>Figure 2 shows an image of the Sun cell phone emulator with nine commands 
showing.&nbsp; One of the commands <i>(<b>Menu</b> on the right soft key)</i> 
was produced by the AMS.&nbsp; The <b>BACK</b> command on the left soft key as 
well as the seven commands showing in the Menu were produced by the MIDlet.&nbsp;
<i>(I will present and explain the code that produced this image later in this 
lesson.)</i></p>
<p><font color="#FF0000"><b>A CommandListener is required</b></font></p>
<p>When the user uses the keys on the cell phone keypad to <i>activate</i> one 
of the commands, the user normally expects the MIDlet to take some action that 
is semantically consistent with the command label.</p>
<p>Seven of the commands shown in Figure 2 were added to the <b>TextBox</b> 
component containing the text that is displayed at the top of Figure 2.&nbsp; 
However, if you were to run this MIDlet and activate one 
of those seven commands, nothing significant would happen.&nbsp; This is because 
a<b> CommandListener</b> was not registered on the <b>TextBox</b> to provide a 
specific action for each of the different commands.</p>
<p><font color="#FF0000"><b>Behavior is not encapsulated in the Command object</b></font></p>
<p>The behavior of the commands is not 
encapsulated in the <b>Command</b> objects that are associated with the <b>
Displayable</b> object <i>(a <b>TextBox</b> in this case)</i>.&nbsp; Rather, the 
behavior of all of the commands is 
encapsulated in a single <b>CommandListener</b> object that is associated with the <b>
Displayable</b> object.</p>
<p>One way to think of this is that the <b>Command</b> objects simply display 
the commands on the screen, but it is the <b>CommandListener</b> object that 
performs the action when the user activates one of the commands.</p>
<p><font color="#FF0000"><b><a name="Command_class_constructors">Command class constructors</a></b></font></p>
<p>There are two overloaded constructors for the <b>Command</b> class in MIDP 
2.0.&nbsp; One of those constructors requires the following parameters:</p>
<ul>
	<li>String&nbsp;shortLabel</li>
	<li>String&nbsp;longLabel</li>
	<li>int&nbsp;commandType</li>
	<li>int&nbsp;priority</li>
</ul>
<p>The other constructor eliminates the <b>longLabel</b>, thus requiring only 
three parameters.</p>
<p><font color="#FF0000"><b>The purpose of the parameters</b></font></p>
<p>Here is part of what Sun has to say about the four constructor parameters:</p>
<blockquote>
	<p><i>&quot;A command contains four pieces of information: a short label, an optional 
long label, a type, and a priority. One of the labels is used for the visual 
representation of the command, whereas the type and the priority indicate the 
semantics of the command.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>The shortLabel parameter</b></font></p>
<p>With the following exception, the <b>shortLabel</b> parameter results in the command 
label that appears on 
the cell phone emulator screen in Figure 2.</p>
<p>Sun tells us:</p>
<blockquote>
	<p><i>For command types other than SCREEN, the labels provided may be 
	overridden by a system-specific label that is more appropriate for this 
	command on this device. The contents of the label strings are otherwise not 
	interpreted by the implementation.&quot;</i></p>
</blockquote>
<p>I believe this means that for some devices, the command label specified by 
the programmer may not be the actual command label that is displayed by the device.&nbsp; 
However, that doesn't seem to be the case for the Sun cell phone emulator.&nbsp; 
The command label displayed by the emulator seems to match the <b>shortLabel</b> 
provided by the programmer.</p>
<p><font color="#FF0000"><b>The commandType parameter</b></font></p>
<p>As the name implies, the <b>commandType</b> suggests something about the 
intended behavior of the command.&nbsp; There are eight allowable command types.&nbsp; 
These eight command types are shown in Figure 2 <i>(not including the Menu command)</i>.&nbsp; 
A major purpose of this lesson is to illustrate and help you to understand the 
intended purpose of the different command types.</p>
<p><b><font color="#FF0000">The priority parameter</font></b></p>
<p>The purpose of the <b>priority</b> 
parameter is somewhat controversial.&nbsp; Here is part of what Sun has to say about the command priority:</p>
<blockquote>
	<p><i>&quot;The application uses the priority value to describe the importance of this 
command relative to other commands on the same screen. Priority values are 
integers, where a lower number indicates greater importance. The actual values 
are chosen by the application. A priority value of one might indicate the most 
important command, priority values of two, three, four, and so on indicate 
commands of lesser importance. </i></p>
	<p><i>Typically, the implementation first chooses the placement of a command based 
on the type of command and then places similar commands based on a priority 
order. This could mean that the command with the highest priority is placed so 
that user can trigger it directly and that commands with lower priority are 
placed on a menu. It is not an error for there to be commands on the same screen 
with the same priorities and types. If this occurs, the implementation will 
choose the order in which they are presented.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>A somewhat opposing view</b></font></p>
<p>Vikram Goyal <i>(see <a href="#Resources">Resources</a>)</i> would have us 
believe that the priority value determines how the commands are placed on the 
screen.&nbsp; He states:</p>
<blockquote>
	<p><i>&quot;By specifying a priority, you tell the AMS running the MIDlet where 
	and how to show the command. A lower value for the priority is of higher 
	importance, and therefore indicates a command that the user should be able 
	to invoke directly. For example, you would probably always have an exit 
	command visible to the user and give it a priority of 1. Since the screen 
	space is limited, the device then bundles less-important commands into a 
	menu.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>A view from the other extreme</b></font></p>
<p>The book <i>Wireless J2ME Platform Programming</i>&nbsp;By Vartan Piroumian
tells us:</p>
<blockquote>
	<p><i>&quot;Finally, a few words should be said about command priority.&nbsp; 
	Note that the organization of commands -- that is, placement according to 
	their type, is very different from prioritization of event delivery.&nbsp; 
	The placement scheme has nothing to do with the Command priority attribute, 
	one of the three attributes of Command objects.&nbsp; The command priority 
	dictates the priority that the implementation gives to commands when 
	ordering their delivery to the listener.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>Two extreme views plus the middle ground</b></font></p>
<p>These three quotations pretty well cover the waterfront relative to the 
relationship between the value of the command priority and the placement of the 
command on the cell phone screen.&nbsp; Goyal and Piroumian are at the extreme 
ends with Sun being somewhere in the middle.</p>
<p><font color="#FF0000"><b>Experimental results with the Sun cell phone 
emulator</b></font></p>
<p>My experimental results with the Sun cell phone emulator seem to agree with 
Piroumian insofar as placement of the commands is concerned.&nbsp; I have been 
unable to demonstrate that the value of command priority has any relationship to 
the placement of commands on the cell phone emulator screen.&nbsp; In fact, as 
you will see later, the placement seems to defy the command priority, or at 
least to ignore the priority completely.</p>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b>MIDlet testing</b><br>
				All of the MIDlets in this lesson were tested using a Java SE 6 
				compiler, targeted at a V1.4 virtual machine, and WTK 2.5.2 
				running under Windows XP.
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<h4><a name="The_MIDlet_named_Command02">The MIDlet named Command02</a></h4>
<p>The purpose of this MIDlet is to illustrate the addition of commands to user 
interface components.&nbsp; When run on the Sun cell phone emulator, this MIDlet 
produces the output shown in Figure 2.</p>
<p>One of each of the allowable <b>Command</b> types is added to a <b>TextBox</b> 
object.&nbsp; No command listener is registered on the <b>TextBox</b>, so 
activating a command has no effect on the behavior of the MIDlet.</p>
<p>By using comment indicators to enable and disable commands, it is possible to 
determine the manner in which the Sun cell phone emulator allocates certain 
commands to the left soft key, the right soft key, and a command menu.&nbsp; 
Experimental results in this regard will be provided later.</p>
<p>The MIDlet displays a<b> TextBox </b>and allows the user 100seconds to 
experiment with it.&nbsp; Then the MIDlet enters the destroyed state.</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>A complete listing of this MIDlet is provided in Listing 16 near the end of 
the lesson.&nbsp; I will discuss and explain the MIDlet code in fragments.</p>
<p>Listing 1 shows the beginning of the class and the beginning of the 
constructor for the class.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Beginning of MIDlet class named Command02. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class <b>Command02</b> extends MIDlet{

  TextBox textBox;
  //----------------------------------------------------//
  
  public <b>Command02</b>(){//constructor
    System.out.println("Construct MIDlet");
    
    System.out.println("Create TextBox");
    textBox = new TextBox("TextBox Title",
                          "UNEDITABLE Text",
                          40,
                          TextField.UNEDITABLE);
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The constructor in Listing 1 instantiates and saves a reference to a new 
object of type <b>TextBox</b>.&nbsp; You have seen this before in an earlier 
lesson, so this shouldn't be new to you.</p>
<p><font color="#FF0000"><b>The allowable commands</b></font></p>
<p>The allowable commands are:</p>
<ul>
	<li>BACK</li>
	<li>EXIT</li>
	<li>CANCEL</li>
	<li>STOP</li>
	<li>ITEM</li>
	<li>SCREEN</li>
	<li>OK</li>
	<li>HELP</li>
</ul>
<p>Much of the following discussion is based on experimental results and not on 
Sun documentation.</p>
<p><font color="#FF0000"><b>Physical placement of the commands</b></font></p>
<p>Apparently the Sun cell phone emulator will only place the following four 
commands on the left soft key with the remaining commands being placed either on 
the right soft key if there is only one command, or in a command menu if there 
is <a name="more_than_one_command..">more than one command.</a></p>
<ul>
	<li>BACK</li>
	<li>EXIT</li>
	<li>CANCEL</li>
	<li>STOP</li>
</ul>
<p><font color="#FF0000">
<b>Add four commands to the TextBox</b></font></p>
<p>The four statements in Listing 2 add the commands indicated to the <b>TextBox</b>.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. Add four commands to the TextBox. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    textBox.addCommand(new Command("BACK",
                                    Command.BACK,3));
    textBox.addCommand(new Command("EXIT",
                                    Command.EXIT,2));
    textBox.addCommand(new Command("CANCEL",
                                   Command.CANCEL,3));
    textBox.addCommand(new Command("STOP",
                                   Command.STOP,1));</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Each of the four statements in Listing 2 calls the
Command&nbsp;class <a href="#Command_class_constructors">constructor</a> to 
instantiate one of the four commands in the above
<a href="#more_than_one_command..">list</a>.&nbsp; A reference to the <b>Command</b> 
object is passed to the <b>addCommand</b> method of the <b>TextBox</b> class to 
associate the command with the <b>TextBox</b> object.</p>
<p><font color="#FF0000"><b>Similar to adding a JButton to a JFrame</b></font></p>
<p>Adding a <b>Command</b> object to a <b>Displayable</b> object <i>(such as a
<b>TextBox</b>)</i> is somewhat akin to adding a <b>JButton</b> to a <b>JFrame</b> 
in J2SE.&nbsp; Like the <b>JButton</b>, the command becomes visible but has no 
distinct behavior associated with it.</p>
<p><font color="#FF0000"><b>Associating behavior with a JButton</b></font></p>
<p>In J2SE, there are at least two ways to associate behavior with a <b>JButton</b>:</p>
<ul>
	<li>Register one or more listener objects on the button.</li>
	<li>Enable events on the button and override methods with names like <b>
	processMouseEvent</b>.</li>
</ul>
<p><font color="#FF0000"><b><a name="Associating_behavior_with_a_Command">Associating behavior with a Command</a></b></font></p>
<p>As you will see later in this lesson, in order to associate behavior with a 
command, we must call the <b>setCommandListener</b> method on the associated <b>
Displayable</b> object, passing a reference to an object instantiated from a 
class that implements one of the following two interfaces:</p>
<ul>
	<li>CommandListener</li>
	<li>ItemCommandListener</li>
</ul>
<p>We will cover that topic in some detail later.&nbsp; The MIDlet currently 
under discussion doesn't associate any specific behavior with the commands.&nbsp; 
Rather, this MIDlet simply illustrates how to add commands to a <b>Displayable</b> 
object and how those commands are placed on the screen by the Sun cell phone 
emulator.</p>
<p><font color="#FF0000"><b>The preferred order for the left soft key</b></font></p>
<p>The order of the commands in the above <a href="#more_than_one_command..">
list</a> matches the order of preference of the Sun cell phone emulator for 
selecting a command to be placed in the left soft key position <i>(for MIDP 2.0)</i>.</p>
<p>For example, if the BACK command is added to the component <i>(as it was in 
Figure 2)</i>, it appears experimentally that it will always be placed in the 
left soft key with the remaining commands being placed in the command menu shown 
in Figure 2.&nbsp; <i>(Note that such placement is independent of the order in 
which the commands are added to the <b>TextBox</b>.)</i></p>
<p><font color="#FF0000"><b>Location of commands in the command menu</b></font></p>
<p>It also appears experimentally that when these commands are relegated to the 
command menu, they occupy the bottom positions in the menu in the same order 
that they are listed <a href="#more_than_one_command..">above</a>.</p>
<p><font color="#FF0000"><b>Remaining commands in the command menu</b></font></p>
<p>It appears experimentally that the following four commands are never placed 
in the left soft key by the Sun cell phone emulator but will always be relegated 
to a command menu if more than one of them are added to the
<a name="second_group"><b>Displayable</b> object.</a></p>
<ul>
	<li>ITEM</li>
	<li>SCREEN</li>
	<li>OK</li>
	<li>HELP</li>
</ul>
<p>Further, it appears experimentally that they will be placed in the menu in 
the order given above, and that the order in the menu is independent of the 
order in which they are added to the <b>Displayable</b> object.</p>
<p><font color="#FF0000"><b>Placing one command in each soft key</b></font></p>
<p>If there 
is only one command from the <a href="#more_than_one_command..">first group</a> 
and one command from the <a href="#second_group">second group</a>, the command 
from the first group will be placed in the left soft key and the command from 
the second group will be placed in the right soft key.</p>
<p><font color="#FF0000">
<b>Add four more commands to the TextBox</b></font></p>
<p>Listing 3 adds the remaining four commands to the <b>TextBox</b></p>
<p>
<b><a name="Listing_3">Listing 3</a>. Add four more commands to the TextBox. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    textBox.addCommand(new Command("ITEM",
                                   Command.ITEM,3));
    textBox.addCommand(new Command("SCREEN",
                                   Command.SCREEN,3));    
    textBox.addCommand(new Command("OK",
                                   Command.OK,3));
    textBox.addCommand(new Command("HELP",
                                   Command.HELP,3));

  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 3 also signals the end of the constructor.</p>
<p><font color="#FF0000"><b>Experimenting with the commands</b></font></p>
<p>I recommend that you use comment indicators to enable and disable code in 
Listing 3 and Listing 4 causing different selections from the eight available 
commands to be added to the <b>TextBox.&nbsp; </b>Also modify the priority 
values on selected commands.&nbsp; Then run the MIDlet in the Sun cell phone 
emulator and come up with your own set of ideas as to how the emulator decides 
upon the placement of the commands.</p>
<p><font color="#FF0000"><b>My interpretation of the experimental results</b></font></p>
<p>It appears to me that the placement of the commands by the Sun cell phone 
emulator:</p>
<ul>
	<li>Is independent of the priority values.</li>
	<li>Follows the rules that I described above in conjunction with the
	<a href="#more_than_one_command..">first</a> and <a href="#second_group">
	second</a> groups of commands.</li>
</ul>
<p><font color="#FF0000">
<b>Remaining code in the MIDlet named Command02</b></font></p>
<p>The remaining MIDlet code is shown in Listing 4.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Remaining code in the MIDlet named 
Command02. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public void <b>startApp</b>(){

    //Make the TextBox the current display.
    System.out.println("Display textBox");
    Display.getDisplay(this).setCurrent(textBox);

    //Sleep for 100 seconds.
    try{Thread.currentThread().sleep(100000);
    } catch(Exception e){}

    //Enter the destroyed state.
    this.destroyApp(true);
  }//end startApp
  //----------------------------------------------------//

  public void <b>pauseApp</b>(){
  }//end pauseApp
  //----------------------------------------------------//

  public void <b>destroyApp</b>(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Command02</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>If you have studied the earlier lessons in this series, there should be 
nothing in Listing 4 that you don't already understand.</p>
<h3><a name="The_CommandListener_interface">The CommandListener interface</a></h3>
<p>As I mentioned <a href="#Associating_behavior_with_a_Command">earlier</a>, in 
order to associate some particular behavior with a command, you must call the <b>setCommandListener</b> method on the associated <b>
Displayable</b> object, passing a reference to an object instantiated from a 
class that implements one of the following two interfaces:</p>
<ul>
	<li>CommandListener</li>
	<li>ItemCommandListener</li>
</ul>
<p>That being the case, we need to learn what we can about those interfaces.&nbsp; 
I will discuss and illustrate the <b>CommandListener</b> interface at this point 
in the lesson and 
defer the <b>ItemCommandListener</b> interface until later.</p>
<p><font color="#FF0000">
 <b>The commandAction method</b></font></p>
<p>The <b>CommandListener</b> interface declares the single method shown in Figure 3.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. The commandAction method. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<b>public void commandAction(Command&nbsp;c, Displayable&nbsp;d)</b> - Indicates that a 
command event has occurred on Displayable d.</td>
    </tr>
  </tbody>
</table>
</p>
<p>This is the method that will be called when a command that has been added to 
a <b>Displayable</b> object is activated.&nbsp; There isn't a lot more that can be said about this method, so I will launch 
right into a simple MIDlet that illustrates its use.</p>
<h4><a name="The_MIDlet_named_Command03">The MIDlet named Command03</a></h4>
<p>The purpose of this MIDlet is to illustrate the setting and subsequent 
processing of a <b>CommandListener</b> in one of the simplest MIDlets possible.</p>
<p>An EXIT command and a BACK command are added to a <b>TextBox</b>.&nbsp; A <b>
CommandListener</b> is set on the <b>TextBox</b>.&nbsp; When either command is 
activated, the <b>commandAction</b> method in the listener is called.&nbsp; The 
incoming command is tested to determine its type.&nbsp; If the type is BACK, the 
command is simply ignored.&nbsp; If the type is EXIT, the MIDlet enters the 
destroyed state.</p>
<p>An object of an anonymous class is used to register the <b>CommandListener</b> 
object on the <b>TextBox</b> object.</p>
<p><font color="#FF0000"><b>Output from the MIDlet</b></font></p>
<p>A screen shot of the MIDlet running in the Sun cell phone emulator is shown 
in Figure 4.</p>
<p>
 <b><a name="Figure_4">Figure 4</a>. The MIDlet named Command03 in the Sun 
	emulator. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2586a2.jpg" width="313" height="477"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The most significant thing about Figure 4 is the presence of the BACK and 
EXIT commands in the lower left and right corners of the cell phone screen.</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>I will discuss and explain this MIDlet in fragments.&nbsp; A complete listing 
of the MIDlet is provided in Listing 17 near the end of the lesson.</p>
<p>The beginning of the class and the beginning of the constructor for the 
MIDlet named <b>Commond03</b> is shown in Listing 5.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. Beginning of the class for the MIDlet 
named Commond03. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class <b>Command03</b> extends MIDlet{

  TextBox textBox;
  //----------------------------------------------------//
  
  public <b>Command03</b>(){//constructor
    System.out.println("Construct MIDlet");
    
    System.out.println("Create TextBox");
    textBox = new TextBox("TextBox Title",
                          "UNEDITABLE Text",
                          40,
                          TextField.UNEDITABLE);
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>By now you should be able to correlate the code in Listing 5 with the display 
in Figure 4.</p>
<p><font color="#FF0000">
<b>Add two commands to the TextBox</b></font></p>
<p>The code in Listing 6 adds the BACK command and the EXIT command to the <b>
TextBox</b>.&nbsp; You can see those two commands in the two soft key positions 
in Figure 4.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Add two commands to the TextBox. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    textBox.addCommand(new Command("EXIT",
                                    Command.EXIT,2));
    textBox.addCommand(new Command("BACK",
                                    Command.BACK,2));</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>There is nothing new about the code in Listing 6.</p>
<p><font color="#FF0000">
<b>Set a commandListener object on the TextBox</b></font></p>
<p>You may find the code in Listing 7 to be a little cryptic and confusing, 
particularly if you are unaccustomed to the use of anonymous classes in Java.&nbsp; 
If so, see the tutorial lesson titled <i>The Essence of OOP using Java, 
Anonymous Classes</i> in <a href="#Resources">Resources</a>.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. Set a commandListener object on the TextBox. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    textBox.<b>setCommandListener</b>(
      new <b>CommandListener</b>(){
        public void <b>commandAction</b>(Command cmd, 
                                  Displayable disp){
          System.out.println(cmd.getLabel());
          
          if(cmd.getCommandType() == Command.EXIT){
            //Enter the destroyed state.
            destroyApp(true);
          }else{
            //Ignore the BACK command
          }//end else
          
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener

  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>An anonymous class that implements a known interface</b></font></p>
<p>Basically the code in Listing 7 instantiates an object of an anonymous class 
that implements the <b>CommandListener</b> interface, and passes that object's 
reference to the method named <b>setCommandListener</b> on the <b>TextBox</b>.</p>
<p>The anonymous class defines the required method named <b>commandAction</b> in 
order to satisfy the general requirements of implementing Java interfaces.</p>
<p><font color="#FF0000"><b>Much different from JavaBeans event model</b></font></p>
<p>Even though this process includes the word <i>Listener</i>, it is radically 
different from the process of registering a <b>MouseListener</b> object on a <b>
JButton</b> in J2SE.&nbsp; The main difference is that the <b>MouseListener</b> 
interface declares the following five methods:</p>
<ul>
	<li>mouseClicked</li>
	<li>mouseEntered</li>
	<li>mouseExited</li>
	<li>mousePressed</li>
	<li>mouseReleased</li>
</ul>
<p>Each of these methods represents one of the five kinds of mouse events that 
can occur.&nbsp; When one of the methods is called as the result of a mouse 
event, you don't have to determine which kind of event it was.&nbsp; The kind of 
event dictates which method is called.</p>
<p><font color="#FF0000"><b>The commandAction method</b></font></p>
<p>On the other hand, the <b>CommandListener</b> interface declares only one 
method and it is named <b>commandAction</b>.&nbsp; The same method is called 
regardless of the type of command that was activated.&nbsp; As a result, the 
same method is called when any of the following eight types of commands are 
activated:</p>
<ul>
	<li>BACK</li>
	<li>EXIT</li>
	<li>CANCEL</li>
	<li>STOP</li>
	<li>ITEM</li>
	<li>SCREEN</li>
	<li>OK</li>
	<li>HELP</li>
</ul>
<p><font color="#FF0000"><b>Must determine the type of command</b></font></p>
<p>The code that you write in the <b>commandAction</b> method must first 
determine which type of command was activated, and then take the particular 
action that is appropriate for that type of command.</p>
<p><font color="#FF0000"><b>Two types of commands</b></font></p>
<p>Only two types of commands were added to the <b>TextBox</b> in this MIDlet:&nbsp; 
EXIT and BACK.&nbsp; Therefore, it was only necessary to distinguish between the 
two.&nbsp; However, for the case where all eight of the allowable types of 
commands are added to a <b>Displayable</b> object, it will be 
necessary for you to identify the type of command among all eight possibilities 
whenever the <b>commandAction</b> method is called.&nbsp; In that case, it will 
probably be simpler to use a <b>switch</b> statement instead of the <b>if-else</b> 
statement that I used in Listing 7.</p>
<p><font color="#FF0000"><b>MIDlet behavior</b></font></p>
<p>In Listing 7, if it is determined that the activated command was an EXIT 
command, the <b>destroyApp</b> method is called to caused the MIDlet to enter 
the destroyed state.&nbsp; On the other hand, if the activated command was a 
BACK command, the command is simply ignored.</p>
<p>What this means is that if you click the left <i>(BACK)</i> soft key in 
Figure 4, nothing will happen.&nbsp; However, if you click the right <i>(EXIT)</i> 
soft key, the MIDlet will terminate, returning the screen to that shown in 
Figure 5.</p>
<p>
 <b><a name="Figure_5">Figure 5</a>. Sun emulator screen when the MIDlet is not 
	running. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2586a3.jpg" width="312" height="478"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Note that the MIDlet named <b>Command03</b> is available to be launched in 
Figure 5, but the BACK and EXIT commands have disappeared and have been replaced 
by a single AMS generated <i>Launch</i> command.</p>
<p><font color="#FF0000">
<b>Remaining code for the MIDlet named Command03</b></font></p>
<p>The remaining code for the MIDlet is shown in Listing 8.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. Remaining code for the MIDlet named 
Command03. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public void <b>startApp</b>(){
    //Make the TextBox the current display.
    System.out.println("Display textBox");
    Display.getDisplay(this).setCurrent(textBox);
  }//end startApp
  //----------------------------------------------------//

  public void <b>pauseApp</b>(){
  }//end pauseApp
  //----------------------------------------------------//

  public void <b>destroyApp</b>(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Command03</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>There is nothing new in Listing 8, so it shouldn't require further 
explanation.</p>
<h4><a name="The_MIDlet_named_Command04">The MIDlet named Command04</a></h4>
<p>This is a much more substantive MIDlet.&nbsp; The purpose of this MIDlet is 
to illustrate the handling of seven of the eight available command types.&nbsp;
<i>(The ITEM command is not used in this MIDlet, but will be illustrated later.)</i></p>
<p>Three &quot;pages&quot; are created using <b>TextBox</b> objects.&nbsp; Commands are 
added to each page.&nbsp; <b>CommandListener</b> objects make it possible to 
navigate through the pages and also to handle the HELP, SCREEN, and STOP 
commands using <b>Alert</b> objects.</p>
<p><font color="#FF0000">
 <b>General behavior of each command type</b></font></p>
<p>The general behavior of each type of command is shown in Figure 6.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. General behavior of each command type. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li>BACK - Navigate to the previous page.</li>
	<li>EXIT - Cause the MIDlet to enter the destroyed state.</li>
	<li>CANCEL - Navigate to the first page.</li>
	<li>STOP - Stop some action that is in process.</li>
	<li>SCREEN - An action that is peculiar to the screen being displayed.</li>
	<li>NEXT - Navigate to the next screen.&nbsp; This is actually type 
	command-type OK.</li>
	<li>HELP - Provide some helpful information.</li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
 <b>Screen shot of the MIDlet in the Sun cell phone emulator</b></font></p>
<p>A screen shot of this MIDlet running in the Sun cell phone emulator with page 
1 showing is displayed in Figure 7.</p>
<p>
 <b><a name="Figure_7">Figure 7</a>. Screen shot of Command04 in the Sun cell 
	phone emulator. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2586a4.jpg" width="314" height="478"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>An interesting aspect of Figure 7 has to do with the lack of a BACK command.&nbsp; 
Because no BACK command was added to page 1, the EXIT command has automatically 
occupied the preferred position on the bottom left soft key.</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>As usual, I will discuss the MIDlet in fragments.&nbsp; A complete listing of the 
MIDlet is 
provided in Listing 18 near the end of the lesson.</p>
<p>Listing 9 shows the beginning of the class and the beginning of the 
constructor.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. Beginning of the class for the MIDlet 
named Command04. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class <b>Command04</b> extends MIDlet{

  TextBox page1;
  TextBox page2;
  TextBox page3;
  MIDlet theMIDlet;
  //----------------------------------------------------//
  
  public <b>Command04</b>(){//constructor
    System.out.println("Construct MIDlet");
    theMIDlet = this;
    
    //Construct Page 1 and add five commands.
    page1 = new TextBox("Page 1",
                          "Page 1 Text",
                          40,
                          TextField.UNEDITABLE);

    page1.addCommand(new Command("<b>EXIT</b>",Command.EXIT,2));
    page1.addCommand(new Command("<b>STOP</b>",Command.STOP,2));
    page1.addCommand(new Command("<b>SCREEN</b>",
                                 Command.SCREEN,2));
    page1.addCommand(new Command("<b>NEXT</b>",Command.OK,2));
    page1.addCommand(new Command("<b>HELP</b>",Command.HELP,2));
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Add five commands to the TextBox object</b></font></p>
<p>Listing 9 constructs the <b>TextBox</b> for page 1 and adds five commands to 
the <b>TextBox</b> object.&nbsp; There is no need for BACK and CANCEL commands 
for page 1, so they are not added to the <b>TextBox</b>.</p>
<p>Four of the five commands are shown in the command menu in Figure 7.&nbsp; 
The other <i>(EXIT)</i> command is shown on the bottom left soft key.</p>
<p>Very similar code is used to construct and add commands to the <b>TextBox</b> 
objects for pages 2 and 3.&nbsp; You can view that code in its entirety in 
Listing 18.</p>
<p><font color="#FF0000">
<b>Set <i>(register)</i> a CommandListener on the page 1 TextBox</b></font></p>
<p>Listing 10 instantiates an object of an anonymous class that implements the
<b>CommandListener</b> interface and passes that object's reference to the <b>
setCommandListener</b> method belonging to the <b>TextBox</b> object for page 1.</p>
<p>
<b><a name="Listing_10">Listing 10</a>. Set a CommandListener on the page 1 
TextBox. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    page1.<b>setCommandListener</b>(
      new <b>CommandListener</b>(){
        public void <b>commandAction</b>(Command cmd, 
                                  Displayable disp){
          <b>switch</b>(cmd.getCommandType()){
            case Command.<b>OK</b>:
              //Advance to page2
              Display.getDisplay(theMIDlet).
                                        setCurrent(page2);
              break;
            case Command.<b>HELP</b>:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("HELP",
                  "A short saying often contains much "
                  + "wisdom.",
                  null,
                  AlertType.INFO));
              break;
            case Command.<b>SCREEN</b>:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("SCREEN",
                  "Processing Page 1",
                  null,
                  AlertType.INFO));
              break;
            case Command.<b>EXIT</b>:
              destroyApp(true);
              break;
            case Command.<b>STOP</b>:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("STOP",
                  "Nothing running to be stopped.",
                  null,
                  AlertType.ERROR));
              break;
            default:
              System.out.println("Should never get here");
          }//end switch
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Use a switch statement</b></font></p>
<p>Fortunately, the different command types are identified by integer values.&nbsp; 
This makes it possible to use a <b>switch</b> statement <i>(as opposed to an 
if-else statement)</i> inside the <b>
commandAction</b> method to identify and process the different command types.</p>
<p><font color="#FF0000"><b>Three different kinds of actions</b></font></p>
<p>There are basically three different kinds of actions taken in Listing 10 
depending on the command type:</p>
<ul>
	<li>Change the display to a different page <i>(NEXT, actually OK)</i>.</li>
	<li>Display an <b>Alert</b> for a short period of time and resume the display of 
	the current page <i>(HELP, SCREEN, and STOP)</i>.</li>
	<li>Call the <b>destroyApp</b> method to cause the MIDlet to enter the 
	destroyed state <i>(EXIT)</i>.</li>
</ul>
<p>Once you understand the organization, there is nothing new in Listing 10, so 
a further explanation shouldn't be necessary.</p>
<p><b><font color="#FF0000">Similar code for pages 2 and 3</font></b></p>
<p>Very similar code is used to set a <b>CommandListener</b> on the <b>TextBox</b> 
for pages 2 and 3.&nbsp; You can view the code in Listing 18.</p>
<p>For page 2, the same three actions were taken but the number of commands was 
greater:</p>
<ul>
	<li>Change the display to a different page <i>(BACK, NEXT, and CANCEL)</i>.</li>
	<li>Display an <b>Alert</b> for a short period of time and resume the display of 
	the current page <i>(HELP, SCREEN, and STOP)</i>.</li>
	<li>Call the <b>destroyApp</b> method to cause the MIDlet to enter the 
	destroyed state <i>(EXIT)</i>.</li>
</ul>
<p>For page 3, the actions were:</p>
<ul>
	<li>Change the display to a different page <i>(BACK and CANCEL)</i>.</li>
	<li>Display an <b>Alert</b> for a short period of time and resume the display of 
	the current page <i>(HELP, SCREEN, and STOP)</i>.</li>
	<li>Call the <b>destroyApp</b> method to cause the MIDlet to enter the 
	destroyed state <i>(EXIT)</i>.</li>
</ul>
<p><font color="#FF0000">
<b>Remaining code for the MIDlet named Command04</b></font></p>
<p>The remaining code for the MIDlet is shown in Listing 11.</p>
<p>
<b><a name="Listing_11">Listing 11</a>. Remaining code for the MIDlet named 
Command04. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public void <b>startApp</b>(){

    //Make the TextBox the current display.
    Display.getDisplay(theMIDlet).setCurrent(<b>page1</b>);

  }//end startApp
  //----------------------------------------------------//

  public void <b>pauseApp</b>(){
  }//end pauseApp
  //----------------------------------------------------//

  public void <b>destroyApp</b>(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Command04</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The most significant thing about the code in Listing 11 is that the <b>
startApp</b> method causes page 1 to be showing when the MIDlet enters the 
active state and starts running.</p>
<h3><a name="The_ItemCommandListener_interface">The ItemCommandListener 
interface</a></h3>
<p>Here is some of what Sun has to say about the <b>ItemCommandListener</b> 
interface:</p>
<blockquote>
	<p><i>&quot;A listener type for receiving notification of commands that have been 
	invoked on <b>Item</b> objects. An <b>Item</b> can have <b>Commands</b> 
	associated with it. When such a command is invoked, the application is 
	notified by having the <b>commandAction()</b> method called on the <b>
	ItemCommandListener</b> that had been set on the Item with a call to <b>
	setItemCommandListener()</b>.&quot;</i></p>
</blockquote>
<p>In other words, an <b>ItemCommandListener</b> object is essentially the same 
as a <b>CommandListener</b> object except that it is used to respond to commands 
that are activated on objects of type <b>Item</b> rather than objects of type <b>
Displayable</b>.&nbsp; For example, objects of the following types are all 
objects of type <b>Item</b> <i>(see Figure 1)</i>:</p>
<ul>
	<li>ChoiceGroup</li>
	<li>CustomItem</li>
	<li>DateField</li>
	<li>Gauge</li>
	<li>ImageItem</li>
	<li>Spacer <i>(not allowed to have commands)</i></li>
	<li>StringItem</li>
	<li>TextField</li>
</ul>
<h4><a name="The_MIDlet_named_Command05">The MIDlet named Command05</a></h4>
<p>The purpose of this MIDlet is to illustrate the use of an <b>
ItemCommandListener</b> on an item in a <b>Form</b>.&nbsp; The MIDlet creates a
<b>Form</b> and populates it with the following <b>Item</b> objects:</p>
<ul>
	<li>A <b>StringItem</b>.</li>
	<li>An <b>ImageItem</b>.</li>
	<li>A <b>ChoiceGroup</b> containing three elements each of which has an image and a 
	text part.</li>
	<li>A <b>TextField</b> configured to allow for the entry of ANY text.</li>
</ul>
<p><font color="#FF0000"><b>Commands added to the Form</b></font></p>
<p>An EXIT <b>Command</b> and an associated <b>CommandListener</b> are added to 
the <b>Form</b>.&nbsp; The EXIT command is visible in the left soft key position 
during the entire period that the MIDlet is running <i>(except when the <b>Alert</b> 
has taken over the screen)</i>.</p>
<p><font color="#FF0000"><b>Commands added to the ChoiceGroup</b></font></p>
<p>An ITEM <b>Command</b> and an associated <b>ItemCommandListener</b> are added 
to the <b>ChoiceGroup</b>.&nbsp; The label on the ITEM command is <i>
GetSelection</i>.&nbsp; It is visible in the right soft key position only when 
the <b>Form</b> selector is on the <b>ChoiceGroup</b>.</p>
<p><font color="#FF0000"><b>Behavior of the EXIT and ITEM command listeners</b></font></p>
<p>When the EXIT command is activated, the MIDlet enters the destroyed state.</p>
<p>When the ITEM command is activated, an <b>Alert</b> is displayed on the 
screen.&nbsp; It contains the text and the image from the selected element in 
the <b>ChoiceGroup</b> item.</p>
<p><font color="#FF0000">
 <b>ChoiceGroup selected in Sun cell phone emulator</b></font></p>
<p>Figure 8 shows the MIDlet running in the Sun cell phone emulator with the <b>
ChoiceGroup</b> having been selected by scrolling down using the arrow key.</p>
<p>
 <b><a name="Figure_8">Figure 8</a>. ChoiceGroup selected in Sun cell phone 
	emulator. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2586a5.jpg" width="295" height="474"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>In addition to the <b>ChoiceGroup</b> having been selected, the third element 
within the <b>ChoiceGroup</b> has been selected.</p>
<p><font color="#FF0000"><b>One command in each soft key position</b></font></p>
<p>Note the EXIT command in the left soft key position and the <i>
GetSelection</i> command in the right soft key position.&nbsp; The latter is actually 
an ITEM command with the label set to &quot;GetSelection.&quot;&nbsp; This command appears 
only when the <b>ChoiceGroup</b> has been selected.</p>
<p><b><font color="#FF0000">Screen output from activating the <i>
GetSelection</i> command</font></b></p>
<p>Figure 9 shows the result of clicking the button immediately beneath 
the <i>
GetSelection</i> command.</p>
<p>
 <b><a name="Figure_9">Figure 9</a>. Result of activating the <i>
GetSelection</i> command. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2586a6.jpg" width="314" height="477"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As you will see later, activating the <i>
GetSelection</i> command causes an <b>Alert</b> to appear on the screen 
displaying the text and the image from the selected element within the <b>
ChoiceGroup</b> item.</p>
<p><font color="#FF0000"><b>Commands disappear during the Alert</b></font></p>
<p>Note that neither the EXIT command nor the <i>
GetSelection</i> command is visible while the <b>Alert</b> is on the screen.&nbsp; 
When the <b>Alert</b> relinquishes the screen, the <b>Form</b> selector reverts 
to the first item at the top of the screen and the <i>
GetSelection</i> command is no longer visible.</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>A complete listing of this MIDlet is provided in Listing 19 near the end of 
the lesson.&nbsp; The beginning of the class and the beginning of the 
constructor is shown in Listing 12.</p>
<p>
<b><a name="Listing_12">Listing 12</a>. Beginning of the class for the MIDlet 
named Command05. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class <b>Command05</b> extends MIDlet{
  Image redBallImage;
  Image greenBallImage;
  Image blueBallImage;
  Form form;
  ChoiceGroup choiceGroup;
  MIDlet theMIDlet;
  //----------------------------------------------------//
  
  public <b>Command05</b>(){//constructor
    System.out.println("Construct MIDlet");
    
    //Save a reference to the MIDlet object as an
    // instance variable so that it will be available to
    // code inside the anonymous class.
    theMIDlet = this;
    
    try{
      //Make certain that the image files specified
      // below are in the same directory as the source
      // file.
      redBallImage = Image.createImage(
                                "/Command05/redball.PNG");
      greenBallImage = Image.createImage(
                              "/Command05/greenball.PNG");
      blueBallImage = Image.createImage(
                               "/Command05/blueball.PNG");
    }catch(Exception e){
      e.printStackTrace();
    }//end catch
    
    //Create Form
    form = new Form("Form Title");

    //Add an EXIT command to the form.
    form.addCommand(new Command("EXIT",Command.EXIT,2));
                                    
    //Set a commandListener object on the form.
    form.setCommandListener(
      new CommandListener(){
        public void commandAction(Command cmd, 
                                  Displayable disp){
          if(cmd.getCommandType() == Command.EXIT){
            //Enter the destroyed state.
            <b>destroyApp(true);</b>
          }//end if
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Assuming that you have studied the earlier lessons in this series, there is 
nothing new in Listing 12.&nbsp; At the end of Listing 12, a <b>Form</b> has 
been created.&nbsp; An EXIT command and a <b>CommandListener</b> have been added 
to the <b>Form</b>.&nbsp; When the EXIT command is activated, the <b>
CommandListener</b> calls the <b>destroyApp</b> method to cause the MIDlet to 
enter the destroyed state.</p>
<p><font color="#FF0000">
<b>Append a StringItem and an ImageItem to the Form</b></font></p>
<p>Listing 13 appends the <b>StringItem</b> and <b>ImageItem</b> objects to the
<b>Form</b> as shown at the top of Figure 8.</p>
<p>
<b><a name="Listing_13">Listing 13</a>. Append a StringItem and an ImageItem to 
the Form. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    //Create and append a StringItem to the form.
    StringItem stringItem = <b>new StringItem</b>(
                                   "This is a StringItem",
                                   "StringItem text\n");
    form.append(stringItem);

    
    //Create and append an ImageItem to the form..
    ImageItem imageItem = <b>new ImageItem</b>(
                                       "ImageItem",
                                       redBallImage,
                                       Item.LAYOUT_CENTER,
                                       "Alt Text");
    form.append(imageItem);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Once again, there is nothing new about the code in Listing 13 so it shouldn't 
require further explanation.</p>
<p><font color="#FF0000">
<b>Append a ChoiceGroup object to the Form</b></font></p>
<p>Listing 14 creates a <b>ChoiceGroup</b> object and appends it to the <b>Form</b> 
as shown in Figure 8.</p>
<p>
<b><a name="Listing_14">Listing 14</a>. Append a ChoiceGroup object to the Form. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    choiceGroup = <b>new ChoiceGroup</b>("ChoiceGroup",
                                        Choice.EXCLUSIVE);
    choiceGroup.append("Zero",redBallImage);
    choiceGroup.append("One",greenBallImage);
    choiceGroup.append("Two",blueBallImage);
    form.append(choiceGroup);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 14 sets the selection mode to EXCLUSIVE.&nbsp; This object will be 
referenced inside an anonymous class.&nbsp; Therefore, the reference to the <b>
ChoiceGroup</b> object cannot be a local variable but must be an instance variable to make it accessible within the anonymous class.&nbsp; 
Once again, we haven't seen anything new yet.&nbsp; However, we will see 
something new in the next code fragment.</p>
<p><font color="#FF0000">
<b>Add an ITEM command and an ItemCommandListener to the ChoiceGroup object</b></font></p>
<p>Listing 15 begins by adding a command of type <b>Command.ITEM</b> to the <b>
ChoiceGroup</b> object.&nbsp; Note that the label that is placed on this command 
is <i>&quot;GetSelection.&quot;</i>&nbsp; This is the text that appears on the 
screen to represent the command 
in the right soft key in Figure 8.</p>
<p>
<b><a name="Listing_15">Listing 15</a>. Add an ITEM command and an 
ItemCommandListener to the ChoiceGroup object. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    //Add an ITEM command to the choiceGroup item.
    choiceGroup.addCommand(new Command("GetSelection",
                                       Command.ITEM,
                                       2));
    
    //Set an ItemCommandListener object on the
    // choiceGroup object.
    choiceGroup.<b>setItemCommandListener</b>(
      new <b>ItemCommandListener</b>(){
        public void <b>commandAction</b>(Command cmd, 
                                  Item item){
          if(cmd.getCommandType() == Command.ITEM){
            int idx = choiceGroup.getSelectedIndex();
            Display.getDisplay(theMIDlet).setCurrent(
                               new Alert("ITEM",
                               choiceGroup.getString(idx),
                               choiceGroup.getImage(idx),
                               AlertType.INFO));
          }//end if
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Set an ItemCommandListener on the ChoiceGroup</b></font></p>
<p>After adding the ITEM command to the <b>ChoiceGroup</b> object, Listing 15 
sets an <b>ItemCommandListener</b> on the object.</p>
<p>The code in the <b>commandAction</b> method of the listener object will be 
executed whenever the ITEM command shown as <i>GetSelection</i> in Figure 8 is 
activated.&nbsp; When the <b>commandAction</b> method is called, it first checks 
to confirm that the command was actually an ITEM command.&nbsp; If so, it 
creates a new <b>Alert</b> object that displays the text and the image from the 
selected element in the <b>ChoiceGroup</b> object.&nbsp; That <b>Alert</b> takes 
over the display for the default time period as shown in Figure 9.</p>
<p><font color="#FF0000"><b>The remaining code in the MIDlet named Command05</b></font></p>
<p>There is nothing new in the remaining code in this MIDlet.&nbsp; You can view 
that code in Listing 19.</p>
<p><font color="#FF0000"><b>That's a wrap!</b></font></p>
<p>That wraps up the discussion on how to program MIDlets for interactive 
behavior.&nbsp; We've covered a lot of material in this lesson, so you may want 
to go back and review it one more time to make certain that you understand it 
completely.</p>
<center>
<h2><a name="Run the program"></a>Run the programs</h2>
</center>
<p>I encourage you to copy the MIDlet code from Listings 16 through 19.&nbsp; 
Run the MIDlets in the updated MIDlet development framework named <b>
WTKFramework03</b> that I provided in the lesson titled <i>Using Alerts, Images, 
Timers, and Gauges in MIDlets (see <a href="#Resources">Resources</a>)</i>.</p>
<p>Experiment with the MIDlet code, making changes and running your modified 
MIDlets in the framework program.&nbsp; See if you can explain the 
results produced by your changes.</p>
<p>Don't forget that you will need to download and install the latest version of 
the Sun Java Wireless Toolkit for CLDC <i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; 
As of the date this lesson is being written, the latest version of the toolkit 
is WTK2.5.2.&nbsp; In addition you will need three small image files to replace the 
red, green, and blue ball images in Figure 8.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>I began by illustrating and explaining the addition of commands to a MIDlet 
and showing you how those commands are presented to the user in the Sun cell 
phone emulator.</p>
<p>Then I explained that interactive behavior of a MIDlet is achieved, not 
through commands, but rather through the use of a <b>CommandListener</b> or an
<b>ItemCommandListener</b>.&nbsp; I illustrated and explained the setting and 
subsequent processing of a <b>CommandListener</b> in one of the simplest ways 
possible.</p>
<p>Following that, I presented and explained a much more substantive MIDlet.&nbsp; 
This MIDlet illustrates the use of <b>CommandListener</b> objects to handle 
seven of the eight possible types of commands and shows how to use commands to 
navigate through the different pages of a MIDlet that is composed of several 
pages.</p>
<p>Finally, I illustrated and explained the use of an <b>ItemCommandListener</b> 
to handle an ITEM command on an item contained in a <b>Form</b>.</p>
<ul>
</ul>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>In the next lesson, you will learn how to use methods of the <b>Canvas</b> 
class along with methods of the <b>Graphics</b> class to draw text and lines on 
the cell phone screen.&nbsp; You will learn how to use anchor point coordinates to 
control the position of text that is drawn on the screen.&nbsp; You will learn how to 
handle <b>keyPressed</b> events fired by a <b>Canvas</b> object.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a href="http://java.sun.com/products/sjwtoolkit/download-2_5.html">
	Download</a> Sun Java Wireless Toolkit 2.5 for CLDC Release</li>
	<li><a href="http://en.wikipedia.org/wiki/MIDlet">MIDlet</a>: From 
	Wikipedia, the free encyclopedia</li>
	<li><a href="http://www.scmad.com/j2me-glossary1.php">MIDlet</a>: According 
	to SCMAD Certification Center</li>
	<li><a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html">J2ME 
	Tutorial, Part 1: Creating MIDlets</a> by Vikram Goyal</li>
	<li>
	<a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html?page=2#step4">
	Pre-verifying</a> MIDlet code according to Vikram Goyal</li>
	<li>
	<a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html?page=2#step7">
	Deploying</a> a MIDlet according to Vikram Goyal</li>
	<li><span class="style2">
	<a href="http://developers.sun.com/mobility/device/device;jsessionid=3F91C410E754F34B1A44DEBCE011ED18">
	The Java ME Device Table</a></span></li>
	<li><span class="style2">
	<a href="http://developers.sun.com/mobility/midp/ttips/getAppProperty/index.html">
	Retrieving MIDlet Attributes</a> by Richard Marejka</span></li>
	<li><a href="http://developers.sun.com/mobility/learn/midp/lifecycle/">
	Learning Path: MIDlet Life Cycle</a></li>
	<li><span class="style2">
	<a href="http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html?page=1">
	When Runtime.exec() won't</a> By </span>Michael C. Daconta</li>
	<li>
	<a href="http://en.wikipedia.org/wiki/Connected_Limited_Device_Configuration">
	Connected Limited Device Configuration</a> <i>(CLDC)</i> from
	<span class="style2">Wikipedia</span></li>
	<li><span class="style2">
	<a href="http://en.wikipedia.org/wiki/Mobile_Information_Device_Profile">
	Mobile Information Device Profile</a> <i>(MIDP)</i> from Wikipedia</span></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr030/">CLDC 1.0</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr139/">CLDC 1.1</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr037/">MIDP 1.0</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr118/">MIDP 2.0</a></li>
	<li><a href="http://www.pictureresize.org/online-images-converter.html">Free 
	Online Image Converter</a></li>
	<li><a href="http://www.dickbaldwin.com/java/Java062.htm">62</a>
	<font color="#000000">Event Handling in JDK 1.0.2, The Event Class</font></li>
	<li><a href="http://www.dickbaldwin.com/java/Java080.htm">80</a>
	<font color="#000000">Event Handling in JDK 1.1, A First Look, Delegation 
	Event Model</font></li>
	<li><a href="http://www.dickbaldwin.com/java/Java102.htm">102</a>
	<font color="#000000">Handling Events in Extended Components without 
	Listener Objects</font></li>
	<li><a href="http://www.developer.com/java/other/article.php/3300881">1640</a> 
	The Essence of OOP using Java, Anonymous Classes</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3719111">
	2570</a> Getting Started with MIDlets and the Sun Java Wireless Toolkit for 
	CLDC</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3721706">
	2572</a> Capturing Output Produced by Programs Running in a Child Process</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3724381">
	2574</a> Back to Basics with MIDlets and the Sun Java Wireless Toolkit for 
	CLDC</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3727396">
	2576</a> Introduction to the MIDlet User Interface, A First Look</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3730141">
	2578</a> Handling Life-Cycle Issues with the MIDlet User Interface</li>
	<li><a href="http://www.developer.com/java/j2me/article.php/3736301">2580</a> 
	Using Alerts, Images, Timers, and Gauges in MIDlets</li>
	<li><a href="http://www.developer.com/java/other/article.php/3742196">2582</a> 
	Using Lists in MIDlets</li>
	<li><a href="http://www.developer.com/java/other/article.php/3747896">2584</a> Using Forms and Items in MIDlets</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the MIDlets discussed in this lesson are shown in Listing 
16 through Listing 19 below.
<p>
<b><a name="Listing_16">Listing 16</a>. Source code for the MIDlet named Command02. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Command02.java
Copyright 2007, R.G.Baldwin

The purpose of this MIDlet is to illustrate the addition 
of commands to user interface components.

One of each of the allowable command types is added to a 
TextBox object. No command listener is registered on the 
TextBox, so activating a command has no effect on the 
program. By using comment indicators to enable and disable
commands, it is possible to determine the manner in which
the Sun cell phone emulator allocates certain commands to
the left soft key, the right soft key, and a command menu.
Experimental results in this regard are included in the
comments.

The MIDlet displays the textBox and allows the user 100
seconds to experiment with the TextBox.  Then it enters 
the destroyed state.

See the following URL for interesting comments on
the impact of a command priority relative to the 
placement of the command on a soft key or in a command
menu.

http://books.google.com/books?id=fvR4W81VTFMC&pg=
PT108&lpg=PT108&dq=j2me+command+priority&source=web&ots=
ZAjS3g1FRN&sig=w2c0LN3iM2qPz7mVT5CybhUeuko#PPT108,M1

Tested using a Java SE 6 compiler, targeted at a V1.4
virtual machine, and WTK 2.5.2 running under Windows XP.
*********************************************************/

package Command02;

import javax.microedition.lcdui.Display;
import javax.microedition.midlet.MIDlet;
import javax.microedition.lcdui.TextField;
import javax.microedition.lcdui.TextBox;
import javax.microedition.lcdui.Command;

public class Command02 extends MIDlet{

  TextBox textBox;
  //----------------------------------------------------//
  
  public Command02(){//constructor
    System.out.println("Construct MIDlet");
    
    System.out.println("Create TextBox");
    textBox = new TextBox("TextBox Title",
                          "UNEDITABLE Text",
                          40,
                          TextField.UNEDITABLE);

    //Apparently the Sun cell phone emulator will only
    // place the following four commands on the left soft
    // key with the remaining commands being placed in a
    // command menu. The order of the statements indicates
    // the order of preference of the emulator for
    // selecting a command to be placed in the soft key.
    // For example, if the BACK command is added to the
    // component, it  will always be placed in the left
    // soft key. Note however that such placement is
    // independent of the order in which the commands are
    // added to the textBox. The following statements
    // were placed in this order simply to indicate the
    // order of preference of the emulator.
    //It also appears experimentally that when these
    // commands are relegated to the command menu, they
    // occupy the bottom positions in the menu in the same
    // order that they are listed here.
    textBox.addCommand(new Command("BACK",
                                    Command.BACK,3));
    textBox.addCommand(new Command("EXIT",
                                    Command.EXIT,2));
    textBox.addCommand(new Command("CANCEL",
                                   Command.CANCEL,3));
    textBox.addCommand(new Command("STOP",
                                   Command.STOP,1));


    
    //It appears experimentally that the following four
    // commands are never placed in the left soft key by
    // the Sun cell phone emulator but will always be
    // relegated to a command menu if more than one of
    // them are added to the textBox. Further, it
    // appears experimentally that they will be placed
    // in the menu in the order given below, but the order
    // in the menu is independent of the order in which
    // they are added to the textBox. If there is only
    // one command from the above group and one command
    // from the following group, the command from above
    // will be placed in the left soft key and the
    // command from below will be placed in the right soft
    // key.
    textBox.addCommand(new Command("ITEM",
                                   Command.ITEM,3));
    textBox.addCommand(new Command("SCREEN",
                                   Command.SCREEN,3));    
    textBox.addCommand(new Command("OK",
                                   Command.OK,3));
    textBox.addCommand(new Command("HELP",
                                   Command.HELP,3));

  }//end constructor
  //----------------------------------------------------//

  public void startApp(){

    //Make the TextBox the current display.
    System.out.println("Display textBox");
    Display.getDisplay(this).setCurrent(textBox);

    //Sleep for 100 seconds.
    try{Thread.currentThread().sleep(100000);
    } catch(Exception e){}

    //Enter the destroyed state.
    this.destroyApp(true);
  }//end startApp
  //----------------------------------------------------//

  public void pauseApp(){
  }//end pauseApp
  //----------------------------------------------------//

  public void destroyApp(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Command02</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_17">Listing 17</a>. Source code for the MIDlet named Command03. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Command03.java
Copyright 2007, R.G.Baldwin

The purpose of this MIDlet is to illustrate the setting 
and subsequent processing of a CommandListener in one of 
the simplest ways possible.

An EXIT command and a BACK command are added to a TextBox.

A CommandListener is set on the TextBox. 

When either command is activated, the commandAction 
method in the listener is called.  The incoming command
is tested to determine its type. If the type is BACK, 
the command is simply ignored. If the type is EXIT, the 
MIDlet enters the destroyed state.

An object of an anonymous class is used to implement the
CommandListener.

Tested using a Java SE 6 compiler, targeted at a V1.4
virtual machine, and WTK 2.5.2 running under Windows XP.
*********************************************************/

package Command03;

import javax.microedition.lcdui.Display;
import javax.microedition.midlet.MIDlet;
import javax.microedition.lcdui.TextField;
import javax.microedition.lcdui.TextBox;
import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.CommandListener;
import javax.microedition.lcdui.Displayable;

public class Command03 extends MIDlet{

  TextBox textBox;
  //----------------------------------------------------//
  
  public Command03(){//constructor
    System.out.println("Construct MIDlet");
    
    System.out.println("Create TextBox");
    textBox = new TextBox("TextBox Title",
                          "UNEDITABLE Text",
                          40,
                          TextField.UNEDITABLE);

    //Add two commands to the textbox.
    textBox.addCommand(new Command("EXIT",
                                    Command.EXIT,2));
    textBox.addCommand(new Command("BACK",
                                    Command.BACK,2));
                                    
    //Set a commandListener object on the textBox.
    textBox.setCommandListener(
      new CommandListener(){
        public void commandAction(Command cmd, 
                                  Displayable disp){
          System.out.println(cmd.getLabel());
          if(cmd.getCommandType() == Command.EXIT){
            //Enter the destroyed state.
            destroyApp(true);
          }else{
            //Ignore the BACK command
          }//end else
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener

  }//end constructor
  //----------------------------------------------------//

  public void startApp(){

    //Make the TextBox the current display.
    System.out.println("Display textBox");
    Display.getDisplay(this).setCurrent(textBox);
  }//end startApp
  //----------------------------------------------------//

  public void pauseApp(){
  }//end pauseApp
  //----------------------------------------------------//

  public void destroyApp(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Command03</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_18">Listing 18</a>. Source code for the MIDlet named 
Command04.
</b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Command04.java
Copyright 2007, R.G.Baldwin

The purpose of this MIDlet is to illustrate the handling 
of seven of the eight available command types. The ITEM 
command is not used in this MIDlet.

Three "pages" are created using TextBox objects. Commands 
are added to the pages. CommandListener objects make it 
possible to navigate through the pages and also to handle 
the HELP, SCREEN, and STOP commands. Alert objects are 
used to handle the HELP, SCREEN, and STOP commands

Tested using a Java SE 6 compiler, targeted at a V1.4
virtual machine, and WTK 2.5.2 running under Windows XP.
*********************************************************/

package Command04;

import javax.microedition.lcdui.Display;
import javax.microedition.midlet.MIDlet;
import javax.microedition.lcdui.TextField;
import javax.microedition.lcdui.TextBox;
import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.CommandListener;
import javax.microedition.lcdui.Displayable;
import javax.microedition.lcdui.Alert;
import javax.microedition.lcdui.AlertType;

public class Command04 extends MIDlet{

  TextBox page1;
  TextBox page2;
  TextBox page3;
  MIDlet theMIDlet;
  //----------------------------------------------------//
  
  public Command04(){//constructor
    System.out.println("Construct MIDlet");
    theMIDlet = this;
    
    //Construct Page 1 and add five commands.
    page1 = new TextBox("Page 1",
                          "Page 1 Text",
                          40,
                          TextField.UNEDITABLE);

    page1.addCommand(new Command("EXIT",Command.EXIT,2));
    page1.addCommand(new Command("STOP",Command.STOP,2));
    page1.addCommand(new Command("SCREEN",
                                 Command.SCREEN,2));
    page1.addCommand(new Command("NEXT",Command.OK,2));
    page1.addCommand(new Command("HELP",Command.HELP,2));
    
    
    //Construct Page 2 and add seven commands.
    page2 = new TextBox("Page 2",
                          "Page 2 Text",
                          40,
                          TextField.UNEDITABLE);

    page2.addCommand(new Command("BACK",Command.BACK,2));
    page2.addCommand(new Command("EXIT",Command.EXIT,2));
    page2.addCommand(new Command("CANCEL",
                                 Command.CANCEL,2));
    page2.addCommand(new Command("STOP",Command.STOP,2));
    page2.addCommand(new Command("SCREEN",
                                  Command.SCREEN,2));
    page2.addCommand(new Command("NEXT",Command.OK,2));
    page2.addCommand(new Command("HELP",Command.HELP,2));
    

    //Construct Page 3 and add six commands.
    page3 = new TextBox("Page 3",
                          "Page 3 Text",
                          40,
                          TextField.UNEDITABLE);

    page3.addCommand(new Command("BACK",Command.BACK,2));
    page3.addCommand(new Command("EXIT",Command.EXIT,2));
    page3.addCommand(new Command("CANCEL",
                                 Command.CANCEL,2));
    page3.addCommand(new Command("STOP",Command.STOP,2));
    page3.addCommand(new Command("SCREEN",
                                 Command.SCREEN,2));
    page3.addCommand(new Command("HELP",Command.HELP,2));
    
    
    //Set a commandListener object on page1
    page1.setCommandListener(
      new CommandListener(){
        public void commandAction(Command cmd, 
                                  Displayable disp){
          switch(cmd.getCommandType()){
            case Command.OK:
              //Advance to page2
              Display.getDisplay(theMIDlet).
                                        setCurrent(page2);
              break;
            case Command.HELP:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("HELP",
                  "A short saying often contains much "
                  + "wisdom.",
                  null,
                  AlertType.INFO));
              break;
            case Command.SCREEN:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("SCREEN",
                  "Processing Page 1",
                  null,
                  AlertType.INFO));
              break;
            case Command.EXIT:
              destroyApp(true);
              break;
            case Command.STOP:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("STOP",
                  "Nothing running to be stopped.",
                  null,
                  AlertType.ERROR));
              break;
            default:
              System.out.println("Should never get here");
          }//end switch
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener
    
    //Set a commandListener object on page2
    page2.setCommandListener(
      new CommandListener(){
        public void commandAction(Command cmd, 
                                  Displayable disp){
          switch(cmd.getCommandType()){
            case Command.BACK:
              //Back to page1
              Display.getDisplay(theMIDlet).setCurrent(
                                                   page1);
              break;
            case Command.OK:
              //Advance to page3
              Display.getDisplay(theMIDlet).setCurrent(
                                                   page3);
              break;
            case Command.CANCEL:
              //Cancel back to page1
              Display.getDisplay(theMIDlet).setCurrent(
                                                   page1);
              break;
            case Command.HELP:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("HELP","Buy low, sell high",
                  null,
                  AlertType.INFO));
              break;
            case Command.SCREEN:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("SCREEN",
                  "Processing Page 2",
                  null,
                  AlertType.INFO));
              break;
            case Command.EXIT:
              destroyApp(true);
              break;
            case Command.STOP:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("STOP",
                  "Nothing running to be stopped.",
                  null,
                  AlertType.ERROR));
              break;
            default:
              System.out.println("Should never get here");
          }//end switch
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener
    
    //Set a commandListener object on page3
    page3.setCommandListener(
      new CommandListener(){
        public void commandAction(Command cmd, 
                                  Displayable disp){
          switch(cmd.getCommandType()){
            case Command.BACK:
            //Back to page2.
              Display.getDisplay(theMIDlet).setCurrent(
                                                   page2);
              break;
            case Command.CANCEL:
            //Cancel back to page1
              Display.getDisplay(theMIDlet).setCurrent(
                                                   page1);
              break;
            case Command.HELP:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("HELP",
                  "Wisdom is the supreme part of "
                  + "happiness.",
                  null,
                  AlertType.INFO));
              break;
            case Command.SCREEN:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("SCREEN",
                  "Processing Page 3",
                  null,
                  AlertType.INFO));
              break;
            case Command.EXIT:
              destroyApp(true);
              break;
            case Command.STOP:
              Display.getDisplay(theMIDlet).setCurrent(
                  new Alert("STOP",
                  "Nothing running to be stopped.",
                  null,
                  AlertType.ERROR));
              break;
            default:
              System.out.println("Should never get here");
          }//end switch
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener

  }//end constructor
  //----------------------------------------------------//

  public void startApp(){

    //Make the TextBox the current display.
    Display.getDisplay(theMIDlet).setCurrent(page1);

  }//end startApp
  //----------------------------------------------------//

  public void pauseApp(){
  }//end pauseApp
  //----------------------------------------------------//

  public void destroyApp(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Command04
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_19">Listing 19</a>. Source code for the MIDlet named 
Command05. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Command05.java
Copyright 2007, R.G.Baldwin

The purpose of this MIDlet is to illustrate the use of an
ItemCommandListener on an item in a Form.

The MIDlet creates a Form and populates it with the 
following Item objects:

A StringItem.

An ImageItem.

A ChoiceGroup containing three elements each of which has
an image and a text part.

A TextField configured to allow for the entry of ANY text.

An EXIT command and an associated CommandListener are 
added to the Form. The EXIT command is visible in the
left soft key position during the entire period that the
MIDlet is running.

An ITEM command and an associated ItemCommandListener are
added to the ChoiceGroup. The label on the ITEM command
is GetSelection. It is visible in the right soft key
position only when the Form selector is on the 
ChoiceGroup.

When the EXIT command is activated, the MIDlet enters the
destroyed state.

When the ITEM command is activated, an Alert is displayed
on the screen. It contains the text and the image from the
selected element in the ChoiceGroup item.

Tested using a Java SE 6 compiler, targeted at a V1.4
virtual machine, and WTK 2.5.2 running under Windows XP.
*********************************************************/

package Command05;

import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.Form;
import javax.microedition.midlet.MIDlet;
import javax.microedition.lcdui.Item;
import javax.microedition.lcdui.Image;
import javax.microedition.lcdui.ImageItem;
import javax.microedition.lcdui.Choice;
import javax.microedition.lcdui.ChoiceGroup;
import javax.microedition.lcdui.StringItem;
import javax.microedition.lcdui.TextField;
import javax.microedition.lcdui.Command;
import javax.microedition.lcdui.CommandListener;
import javax.microedition.lcdui.ItemCommandListener;
import javax.microedition.lcdui.Displayable;
import javax.microedition.lcdui.Alert;
import javax.microedition.lcdui.AlertType;

public class Command05 extends MIDlet{
  Image redBallImage;
  Image greenBallImage;
  Image blueBallImage;
  Form form;
  ChoiceGroup choiceGroup;
  MIDlet theMIDlet;
  //----------------------------------------------------//
  
  public Command05(){//constructor
    System.out.println("Construct MIDlet");
    
    //Save a reference to the MIDlet object as an
    // instance variable so that it will be available to
    // code inside the anonymous class.
    theMIDlet = this;
    
    try{
      //Make certain that the image files specified
      // below are in the same directory as the source
      // file.
      redBallImage = Image.createImage(
                                "/Command05/redball.PNG");
      greenBallImage = Image.createImage(
                              "/Command05/greenball.PNG");
      blueBallImage = Image.createImage(
                               "/Command05/blueball.PNG");
    }catch(Exception e){
      e.printStackTrace();
    }//end catch
    
    //Create Form
    form = new Form("Form Title");

    //Add an EXIT command to the form.
    form.addCommand(new Command("EXIT",Command.EXIT,2));
                                    
    //Set a commandListener object on the form.
    form.setCommandListener(
      new CommandListener(){
        public void commandAction(Command cmd, 
                                  Displayable disp){
          if(cmd.getCommandType() == Command.EXIT){
            //Enter the destroyed state.
            destroyApp(true);
          }//end if
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener

    //Now populate the form.
    //Create and append a StringItem to the form.
    StringItem stringItem = new StringItem(
                                   "This is a StringItem",
                                   "StringItem text\n");
    form.append(stringItem);

    
    //Create and append an ImageItem to the form..
    ImageItem imageItem = new ImageItem(
                                       "ImageItem",
                                       redBallImage,
                                       Item.LAYOUT_CENTER,
                                       "Alt Text");
    form.append(imageItem);
    
    //Create a ChoiceGroup and append it to the Form.
    // This is like an embedded List. Set the
    // selection mode to EXCLUSIVE. The reference must be
    // an instance variable to make it accessible within
    // the anonymous class.
    choiceGroup = new ChoiceGroup("ChoiceGroup",
                                        Choice.EXCLUSIVE);
    choiceGroup.append("Zero",redBallImage);
    choiceGroup.append("One",greenBallImage);
    choiceGroup.append("Two",blueBallImage);
    form.append(choiceGroup);
    
    //Add an ITEM command to the choiceGroup item. Label
    // the command GetSelection.
    choiceGroup.addCommand(new Command("GetSelection",
                                       Command.ITEM,
                                       2));
    
    //Set an ItemCommandListener object on the
    // choiceGroup object.
    choiceGroup.setItemCommandListener(
      new ItemCommandListener(){
        public void commandAction(Command cmd, 
                                  Item item){
          if(cmd.getCommandType() == Command.ITEM){
            int idx = choiceGroup.getSelectedIndex();
            Display.getDisplay(theMIDlet).setCurrent(
                               new Alert("ITEM",
                               choiceGroup.getString(idx),
                               choiceGroup.getImage(idx),
                               AlertType.INFO));
          }//end if
        }//end commandAction
      }//end new CommandListener
    );//end setCommandListener
       
    //Create a TextField and append it to the form.This
    // is similar to a TextBox embedded in a Form.
    TextField textField = new TextField("TextField",
                                        "Initial Text",
                                        30,
                                        TextField.ANY);
    form.append(textField);
  }//end constructor
  //----------------------------------------------------//

  public void startApp(){

    //Make the Form the current display.
    Display.getDisplay(this).setCurrent(form);

  }//end startApp
  //----------------------------------------------------//

  public void pauseApp(){
  }//end pauseApp
  //----------------------------------------------------//

  public void destroyApp(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Command05</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2008, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
java J2ME MIDlet &quot;cell phone emulator&quot; &quot;wireless toolkit&quot; WTK MIDP CLDC 
Displayable TextBox Ticker TextField Alerts Images Timers Gauges Lists Forms 
Items String StringItem ImageItem ChoiceGroup DateField Command CommandListener 
ItemCommandListener</p>
<p>-end- </p>
</body>
</html>
