<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">The show Method and the PictureFrame Class</h2>
<i>Learn how the show() method of the Picture class causes the image contained 
in a Picture object to be displayed on the screen in a JFrame object.&nbsp; Also 
learn about the PictureFrame class, which serves as an intermediary between 
the Picture object and the JFrame object.</i><p><b>Published:</b>&nbsp; March 
18, 2009<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 356</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#What_you_have_learned_so_far">What you have learned so far</a></li>
		<li><a href="#SimplePicture_is_a_large_and_complex_class">SimplePicture 
		is a large and complex class</a></li>
		<li><a href="#What_you_will_learn_in_this_lesson">What you will learn in 
		this lesson</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#A_multimedia_class_library">A multimedia class library</a></li>
	<li><a href="#Software_installation_and_testing">Software installation and 
	testing</a></li>
</ul>
	</li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#The_sample_program_named_Java356a">The sample program named 
	Java356a</a></li>
	<li><a href="#The_show_method">The show method of the SimplePicture class</a></li>
	<li><a href="#The_PictureFrame_class">The PictureFrame class</a><ul>
	<li><a href="#Instance_variables_of_the_PictureFrame_class">Instance 
	variables of the PictureFrame class</a></li>
	<li><a href="#Case_with_no_existing_PictureFrame_object">Case with no 
	existing PictureFrame object</a></li>
	<li><a href="#Case_with_an_existing_PictureFrame_object">Case with an 
	existing PictureFrame object</a></li>
	<li><a href="#More_methods_of_the_PictureFrame_class">More methods of the 
	PictureFrame class</a></li>
</ul></li>
</ul>
	</li>
	<li><a href="#Run%20the%20program">Run the programs</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p>This lesson is the next in a series <i>(see <a href="#Resources">Resources</a>)</i> 
designed to teach you how to write Java programs to do things like:</p>
<ul>
	<li>Remove <i>redeye</i> from a photographic image.</li>
	<li>Distort the human voice <i>(as in secret witness interviews on TV)</i>.</li>
	<li>Display one image inside another image.</li>
	<li>Do edge detection, blurring, and other filtering operations on images.</li>
	<li>Insert animated cartoon characters into videos of live humans.</li>
</ul>
<p>If you have ever wondered how to do these things, you've come to the right 
place.</p>
<h3><a name="What_you_have_learned_so_far">What you have learned so far</a></h3>
<p> If you have studied all of the earlier lessons in 
this series <i>(see <a href="#Resources">Resources</a>)</i>, you have learned about the <b>Turtle</b> class, its superclass named <b>
SimpleTurtle</b>, and the classes from which a turtle's contained objects are 
instantiated <i>(<b>Pen</b> and <b>PathSegment</b>)</i>.&nbsp; You have learned 
how to instantiate new <b>Turtle</b> objects, placing them in either a
<b>World</b> object or a <b>Picture</b> object.&nbsp; You have learned how to 
manipulate the <b>Turtle</b> objects once you place them in their environment.&nbsp; 
You have also learned about the <b>World</b> class and objects of that class.</p>
<p> <b><font color="#FF0000">Methods of the DigitalPicture interface</font></b></p>
<p> In the previous lesson titled <i>The DigitalPicture Interface:&nbsp; 
Multimedia Programming with Java (see <a href="#Resources">Resources</a>)</i>, 
you learned about the thirteen methods of the <b>Picture</b> class and its 
superclass named <b>SimplePicture</b> that are declared in the <b>DigitalPicture</b> 
interface.&nbsp; You also learned about other methods of the <b>
SimplePicture</b> 
class that are called by those thirteen methods.</p>
<h3> <a name="SimplePicture_is_a_large_and_complex_class">SimplePicture is a 
large and complex class</a></h3>
<p> The <b>SimplePicture</b> class is a large and complex class that 
defines almost forty methods and several constructors.&nbsp; You have some distance to go before you will 
understand all of the methods and constructors that are defined in the <b>SimplePicture</b> 
class.</p>
<p> <font color="#FF0000"><b>Dispose of the easy methods and constructors</b></font></p>
<p> Before getting into the <a href="#What_you_will_learn_in_this_lesson">main thrust</a> of this lesson, I am going to dispose of 
some of the constructors and methods of the <b>SimplePicture</b> class that 
should be easy for you to understand without an explanation from me.</p>
<p> The following is a list of constructors and methods which do not contain 
complicated code, and which you should have no difficulty understanding if you 
understood the explanations of constructors and methods in the previous lesson
<i>(see <a href="#Resources">
Resources</a>)</i>.&nbsp; Because of their simplicity, I won't bore you by 
providing a detailed explanation.&nbsp; You can view the source code for all of 
these constructors and methods in Listing 13 near the end of the lesson.</p>
<ul>
	<li><b>SimplePicture()</b> - A constructor that takes no parameters and 
	constructs a <b>SimplePicture</b> object with dimensions of 200x100 pixels.</li>
	<li><b>SimplePicture(int width,int height,Color theColor)</b> - Constructs a
	<b>SimplePicture</b> object with the specified dimensions and color.</li>
	<li><b>String getExtension()</b> - Returns the file-name extension of the file from 
	which the <b>SimplePicture</b> object's image was extracted.</li>
	<li><b>Graphics getGraphics()</b> - Returns the <i>graphics 
	context</i> for the <b>BufferedImage</b> object <i>(as type <b>Graphics</b>)</i> owned by this <b>
	SimplePicture</b> object.</li>
	<li><b>Graphics2D createGraphics()</b> - Returns a reference to a <b>
	Graphics2D</b> object that can be used to call methods of the <b>Graphics2D</b> 
	class on the <b>BufferedImage</b> object that belongs to the <b>
	SimplePicture</b> object. </li>
	<li><b>void setFileName(String name)</b> - Stores a reference to a <b>String</b> 
	object in the <b>SimplePicture</b> object's <b>fileName</b> variable.</li>
	<li><b>PictureFrame getPictureFrame()</b> - Returns a reference to the <b>
	PictureFrame</b> object belonging to the <b>SimplePicture</b> object.</li>
	<li><b>void setPictureFrame(PictureFrame pictureFrame)</b> - Stores a <b>
	PictureFrame</b> object's reference in the <b>SimplePicture</b> variable 
	named <b>pictureFrame</b>.</li>
	<li><b>void hide()</b> - Sets the visible property belonging to the <b>
	PictureFrame</b> object to <i>false</i> causing the picture to disappear from the 
	screen.</li>
	<li><b>void setVisible(boolean flag)</b> - Causes the <b>SimplePicture</b> 
	object to be visible or invisible depending on the value of the parameter.</li>
	<li><b><a name="void_repaint">void repaint</a>()</b> - Forces the <b>SimplePicture</b> object to 
	repaint itself on the screen.</li>
	<li><b>boolean loadImage(String fileName)</b> - Simply calls the <b>load</b> 
	method explained in the previous lesson.</li>
	<li><b>static void setMediaPath(String directory)</b> - Sets the name and 
	path of the directory from which media files will be read.</li>
	<li><b>static String getMediaPath(String fileName)</b> - Returns the name 
	and path of the directory from which media files are currently being read.</li>
	<li><b>String toString()</b> - Overridden <b>toString</b> method that 
	returns information about the <b>SimplePicture</b> object.&nbsp; Note that 
	this method is overridden again in the <b>Picture</b> class.</li>
</ul>
<p> <font color="#FF0000"><b>Methods that I probably will explain later</b></font></p>
<p> Click <a href="#Whats Next">here</a> for a list of constructors and methods 
of the <b>SimplePicture</b> class that are sufficiently interesting or complicated that I will probably explain 
them in detail in future lessons.</p>
<h3> <a name="What_you_will_learn_in_this_lesson">What you will learn in this 
lesson</a></h3>
<p> Two of the most frequently used methods of the <b>SimplePicture</b> class are the 
methods named <b>show</b> and <b>explore</b>.&nbsp; These two methods are used 
to display <b>Picture</b> objects in the formats shown in Figure 1 and Figure 2 
respectively.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Output format from the show method. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java356a.jpg" width="350" height="285"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>

<p>
 <b><a name="Figure_2">Figure 2</a>. Output format from the explore method. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java356b.jpg" width="353" height="385"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p> In this lesson, you will learn about the <b>show</b> method of the <b>Picture</b> class, 
along with a related class named <b>PictureFrame</b>, <i>(which you must understand before 
you can fully understand the <b>show</b> method)</i>.</p>
<p> <font color="#FF0000"><b>A sample program</b></font></p>
<p> I will also present and explain a sample program that illustrates one way to 
take a photograph of a physical object and then superimpose it on another 
photograph.&nbsp; I confess that this doesn't have a much to do with the <b>show</b> method.&nbsp; However, I didn't want to 
pass up the opportunity to provide another interesting example of image 
manipulation using Ericson's multimedia library.</p>
<p> <font color="#FF0000"><b>The explore method</b></font></p>
<p> You will learn about the <b>explore</b> method, along with a related class 
named <b>PictureExplorer</b>, <i>(which you must understand before you can 
understand the <b>explore</b> method)</i>, in a future lesson.</p>
<p> <font color="#FF0000"><b>Source code listings</b></font></p>
<p> A complete listing of Ericson's <b>Picture</b> class is provided in 
Listing 12  near the end of the lesson, and a listing of Ericson's <b>SimplePicture</b> class is provided in 
Listing 13.&nbsp; A listing of Ericson's <b>DigitalPicture</b> interface is provided 
in Listing 14, and a listing of Ericson's <b>PictureFrame</b> class is provided 
in Listing 15.&nbsp; A listing of the sample program named Java356a is provided 
in Listing 16.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>.
 Output format from the show method. 
	</li>
	<li><a href="#Figure_2">Figure 2</a>. Output format from the explore 
	method. </li>
	<li><a href="#Figure_3">Figure 3</a>. Picture of the chair covered by a 
	towel. </li>
	<li><a href="#Figure_4">Figure 4</a>. Picture of the tiger on the chair. </li>
	<li><a href="#Figure_5">Figure 5</a>. The beach scene. </li>
	<li><a href="#Figure_6">Figure 6</a>. The tiger superimposed on the beach 
	scene.<b> </b></li>
	<li><a href="#Figure_7">Figure 7</a>. Partial description of a JLabel from 
	Sun. </li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Background color for the SimplePicture 
	class. </li>
	<li><a href="#Listing_2">Listing 2</a>. Background color for the 
	PictureFrame class. </li>
	<li><a href="#Listing_3">Listing 3</a>. Background color for Baldwin's 
	code.<b> </b>&nbsp;</li>
	<li><a href="#Listing_4">Listing 4</a>. Beginning of the program named 
	Java356a. </li>
	<li><a href="#Listing_5">Listing 5</a>. Beginning of the Runner class and 
	the run method. </li>
	<li><a href="#Listing_6">Listing 6</a>. The remainder of the program code 
	for the program named Java356a. </li>
	<li><a href="#Listing_7">Listing 7</a>. The show method of the SimplePicture 
	class. </li>
	<li><a href="#Listing_8">Listing 8</a>. One of two overloaded constructors 
	for the PictureFrame class.</li>
	<li><a href="#Listing_9">Listing 9</a>. The initFrame method of the 
	PictureFrame class. </li>
	<li><a href="#Listing_10">Listing 10</a>. The updateImage method of the 
	PictureFrame class. </li>
	<li><a href="#Listing_11">Listing 11</a>. The updateImageAndShowIt method of 
	the PictureFrame class. </li>
	<li><a href="#Listing_12">Listing 12 </a>. Source code for Ericson's Picture 
	class.</li>
	<li><a href="#Listing_13.">Listing 13</a>. Source code for Ericson's 
	SimplePicture class.</li>
	<li><a href="#Listing_14">Listing 14</a>. Source code for Ericson's 
	DigitalPicture interface. </li>
	<li><a href="#Listing_15">Listing 15</a>.
Source code for Ericson's PictureFrame class</li>
	<li><a href="#Listing_16">Listing 16</a>. Source code for the program named 
	Java356a. </li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="A_multimedia_class_library">A multimedia class library</a></h3>
<p>In this series of lessons, I will present and explain many of the classes and 
methods in 
a multimedia class library that was developed and released under a <b>Creative 
Commons Attribution 3.0 United States License</b> <i>(see <a href="#Resources">
Resources</a>) </i>by Mark Guzdial and Barbara Ericson at Georgia Institute of 
Technology.&nbsp; In doing this, I will also present some interesting sample programs 
that use the library.</p>
<h3><a name="Software_installation_and_testing">Software installation and 
testing</a></h3>
<p>I explained how to download, install, and test the multimedia class library 
in an earlier lesson titled <i>Multimedia Programming with Java, Getting Started 
(see <a href="#Resources">Resources</a>)</i>.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p dir="ltr">As I mentioned earlier, I will explain the <b>show</b> method of the <b>Picture</b> class 
in this lesson.&nbsp; In addition, I will explain the methods of a related class named <b>PictureFrame</b>, which you must understand before you can fully understand the
<b>show</b> method.</p>
<p dir="ltr"><font color="#FF0000"><b>A sample program</b></font></p>
<p dir="ltr">As mentioned earlier, I will also present and explain a sample 
program that illustrates one way to take a photograph of a physical object and 
then superimpose it on another photograph.</p>
<p dir="ltr"><font color="#FF0000"><b>Reducing the confusion</b></font></p>
<p dir="ltr">Because I 
will be switching back and forth among code fragments extracted from Ericson's
<b>SimplePicture</b> class, code fragments extracted from Ericson's <b>
PictureFrame</b> class, and code fragments extracted from my sample program, 
things can get confusing.</p>
<p dir="ltr">In an effort to reduce the confusion, I will 
present code fragments from Ericson's <b>SimplePicture</b> class against the 
background color shown in Listing 1.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Background color for the SimplePicture class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>I will present code fragments from the SimplePicture class
against this background color.</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Similarly, I will present code fragments from Ericson's <b>PictureFrame</b> 
class against the 
background color shown in Listing 2.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. Background color for the PictureFrame 
class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffeeff">
  <tbody>
    <tr>
      <td>
      <pre>I will present code fragments from the PictureFrame class
against this background color.</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Finally, I will present code fragments from my sample program against the 
background color shown in Listing 3.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Background color for Baldwin's code. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>I will present code fragments from my sample programs
with this background color.</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><span style="font-weight: 400"><a name="The_sample_program_named_Java356a">
The sample program named Java356a</a></span></h3>
<p>The purpose of this program is to illustrate one way to take a digital 
photograph of a physical object and then superimpose it on another digital 
photograph.</p>
<p><font color="#FF0000"><b>The physical setup</b></font></p>
<p>A desk chair was placed in front of a bookcase and a blue bed sheet was hung 
on the bookcase to provide a relatively solid color background.&nbsp; A green 
towel was placed on the chair to hide the texture in the upholstery.&nbsp; The 
lighting consisted of ambient room light, a fluorescent desk lamp tilted upward 
to shine directly on the chair and the tiger, and the light emitted by the dual 
screens on my computer. </p>
<p>A digital photograph of the chair was taken, using the camera that is built 
into my laptop computer, producing the image shown in 
Figure 3.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. Picture of the chair covered by a towel. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java356c.jpg" width="350" height="285"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Now add the tiger</b></font></p>
<p>Then a stuffed tiger was placed on the back of the chair <i>(being careful to 
avoid moving the chair)</i> and another 
digital photograph was taken, producing the image shown in Figure 4.&nbsp; <i>(I 
just now realized that it might have worked better to also cover the chair with 
the sheet instead of covering it with a towel of a different color.)</i></p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Picture of the tiger on the chair. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java356d.jpg" width="350" height="285"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Note the shadow of the tiger on the blue background just to the right of the tiger's head.&nbsp; 
This will become important later.</p>
<p><font color="#FF0000"><b>Instantiate four Picture objects</b></font></p>
<p><b>Picture</b> objects were instantiated from each of the digital photographs 
described above.&nbsp; Another
<b>Picture</b> object was instantiated from an image file <i>(taken from Ericson's 
media library)</i> showing 
a beach scene.&nbsp; This image has the same dimensions as each of the two digital photographs.&nbsp; The 
beach scene is shown in Figure 5.</p>
<p>
 <b><a name="Figure_5">Figure 5</a>. The beach scene. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java356e.jpg" width="350" height="285"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>An all-white Picture object</b></font></p>
<p>The overall objective was to process the images in such a way as to 
superimpose the tiger on the beach scene.&nbsp; </p>
<p>A fourth <b>Picture</b> object was instantiated with the same dimensions and an all-white image 
to accommodate this objective.&nbsp; This <b>Picture</b> object was used to 
produce the final image shown in Figure 4.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Color distance</b><br />
<font size="3" face="arial">
	I explained the concept of <i>color distance</i> in the 
earlier lesson titled <i>3D Displays, Color Distance, and Edge Detection:&nbsp; 
Multimedia Programming with Java (see <a href="#Resources">Resources</a>)</i>.</font>
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b><a name="Process_the_images">Process the images</a></b></font></p>
<p>Methods of the 
<b>SimplePicture</b> 
class and the <b>Pixel</b> class were used in a pair of nested <b>for</b> loops to 
compute the 
<i>color distance</i> between corresponding pixels in the two photographs and to 
compare that distance to a specified distance threshold.</p>
<p>When the color distance between two corresponding pixels, <i>(one from each 
photograph)</i>, exceeded a <a name="specified_threshold">specified threshold</a>, the color of the pixel from the <b>Picture</b> object containing the 
tiger was copied to the all-white <b>Picture</b> object, replacing a white 
pixel.</p>
<p>Otherwise, the color of the pixel from the <b>Picture</b> object 
containing the beach scene was copied to the 
all-white <b>Picture</b> object.&nbsp; This had the effect of replacing the bed 
sheet and towel background behind the tiger with the image from the beach scene 
as a new background .</p>
<p><font color="#FF0000"><b>The final product</b></font></p>
<p>The final product is shown in Figure 6.&nbsp; As you can see, the results were 
reasonably good.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. The tiger superimposed on the beach scene. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java356f.jpg" width="350" height="285"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Attribution</b><br />
  <font size="3" face="arial">
		The idea and some of the methodology for this program came directly 
from the book titled <i>Introduction to Computing and Programming with Java: A 
Multimedia Approach (see <a href="#Resources">Resources</a>)</i> by Guzdial and Ericson.</font>
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Factors that affect&nbsp; the quality</b></font></p>
<p>The quality of the final product depends heavily on the value of the
<a href="#specified_threshold">threshold</a> mentioned above.&nbsp; </p>
<p>Lighting is also very critical.&nbsp; I make no claims of being a 
photographer and I didn't do anything special to control the lighting.&nbsp; As a result, 
the shadow of the tiger that was barely noticeable on the dark blue bed sheet in 
Figure 4 is very 
noticeable against the light blue background in the final product shown in 
Figure 6.</p>
<p><font color="#FF0000"><b>Enough talk, let's see some code</b></font></p>
<p>A complete listing of this program is provided in Listing 16 near the end of 
the lesson.&nbsp; As is my custom, I will present and explain this program in 
fragments.&nbsp; The program begins in Listing 4.&nbsp; <i>(Remember, the 
background color in Listing 4 indicates that the code fragment was extracted 
from my sample program.)</i></p>
<p>
<b><a name="Listing_4">Listing 4</a>. Beginning of the program named Java356a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff"     >
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.Color;
      
public class Main{
  public static void main(String[] args){
    new Runner().run();
  }//end main method
}//end class Main</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The <b>main</b> method in Listing 4 instantiates a new object of the <b>
Runner</b> class and calls the <b>run</b> method on the object.&nbsp; When the
<b>run</b> method returns, the <b>main</b> method and the program terminate.</p>
<p><font color="#FF0000">
<b>Beginning of the Runner class and the run method</b></font></p>
<p>The <b>runner</b> class and its <b>run</b> method begin in Listing 5.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. Beginning of the Runner class and the run 
method. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff"     >
  <tbody>
    <tr>
      <td>
      <pre>class Runner{
  void run(){
    //Construct three new 341x256 Picture objects by
    // providing the names of image files as parameters
    // to the Picture constructor.
    Picture pic1 = new Picture("ScaledBeach.jpg");
    Picture pic2 = new Picture("WithTiger.jpg");
    Picture pic3 = new Picture("WithoutTiger.jpg");
    
    //Construct an all-white 341x256 Picture object.
    Picture pic4 = new Picture(341,256);
    
    //Display all three Picture objects in the show
    // format.
    pic1.show();
    pic2.show();
    pic3.show();</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>None of the code in Listing 5 should be new to you by now.&nbsp; The last 
three statements in Listing 5 call the <b>show</b> method of the <b>Picture</b> 
class to provide screen displays in the format shown in Figure 3.&nbsp; <i>(I 
will have a great deal more to say about the <b>show</b> method later in this 
lesson.)</i></p>
<p><font color="#FF0000">
<b>The remainder of the program code</b></font></p>
<p>The remainder of the program code is shown in Listing 6.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. The remainder of the program code for the 
program named Java356a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff"     >
  <tbody>
    <tr>
      <td>
      <pre>    //Replace pixel colors in the all-white Picture object
    // with the colors from either the beach image or the 
    // tiger image.
    Pixel pixA;
    Pixel pixB;
    Pixel pixC;
    Pixel pixD;
    for(int row = 0;row &lt; pic1.getHeight() - 1;row++){
      for(int col = 0;col &lt; pic1.getWidth() - 1;col++){
        pixA = pic1.getPixel(col,row);
        pixB = pic2.getPixel(col,row);
        pixC = pic3.getPixel(col,row);
        pixD = pic4.getPixel(col,row);

        if(pixB.colorDistance(pixC.getColor()) &gt; 50){
          //Replace white pixel with the pixel color from 
          // the tiger image.
          pixD.setColor(pixB.getColor());
        }else{
          //Replace the white pixel with pixel color from 
          // the beach image.
          pixD.setColor(pixA.getColor());
        }//end else
      }//end inner for loop
    }//end outer for loop

    //Display the final product using the show format.
    pic4.setTitle("Tiger on beach scene");
    pic4.show();
  }//end run
}//end class Runner</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>None of this code is new</b></font></p>
<p>Once again, none of the code in Listing 6 should be new to you by now.&nbsp; 
The code in Listing 6 compares corresponding pixels from the two digital 
pictures and modifies the colors of the pixels in the all-white <b>pic4</b> as 
described <a href="#Process_the_images">earlier</a>.</p>
<p>Then Listing 6 sets the title for <b>pic4</b> to that shown in Figure 6 and 
calls the <b>show</b> method on <b>pic4</b> producing the screen output shown in 
Figure 6.&nbsp; <i>(You may not want to go swimming on that beach with a tiger 
on the loose.)</i></p>
<h3><a name="The_show_method">The show method</a> of the SimplePicture class</h3>
<p>The show method is shown in its entirety in Listing 7.&nbsp; <i>(Remember, 
the background color in Listing 7 indicates that the code fragment was extracted 
from Ericson's <b>SimplePicture</b> class.)</i></p>
<p>
<b><a name="Listing_7">Listing 7</a>. The show method of the SimplePicture 
class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb"     >
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to show the picture in a picture frame
  */
 public void show(){
    // if there is a current picture frame then use it
   if (pictureFrame != null)
     pictureFrame.updateImageAndShowIt();

   // else create a new picture frame with this picture
   else
     pictureFrame = new PictureFrame(this);
 }//end show method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Instantiating objects of the PictureFrame class</b></font></p>
<p>There are only two locations in the <b>SimplePicture</b> class where a new 
object of the <b>PictureFrame</b> class is instantiated.&nbsp; One of those 
locations is in the <b>show</b> method shown in Listing 7.&nbsp; The other 
location is in the <a href="#void_repaint">repaint</a> method.&nbsp; Therefore, there is a 
strong possibility that the contents of the variable named <b>pictureFrame</b> will be null <i>
(indicating there is no existing<b>
PictureFrame</b> object)</i> the first time that the <b>show</b> method is called.</p>
<p>Listing 7 begins by checking to see if the instance variable named <b>
pictureFrame</b> contains null.&nbsp; If so a new <b>PictureFrame</b> 
object that encapsulates a reference to the current <b>SimplePicture</b> object 
is instantiated and its reference is assigned to the instance variable named <b>
pictureFrame</b>.</p>
<h3><a name="The_PictureFrame_class">The PictureFrame class</a></h3>
<p>That brings us to the need to understand the class named <b>PictureFrame</b>.&nbsp; 
I will begin by walking you through the code that is executed for the case where 
the <b>show</b> method is called and there is no existing <b>PictureFrame</b> 
object assigned to the variable named <b>pictureFrame</b>.&nbsp; Then I will 
come back and walk you through the code that is executed if the <b>PictureFrame</b> 
object already exists when the <b>show</b> method is called.</p>
<h4><a name="Instance_variables_of_the_PictureFrame_class">Instance variables of 
the PictureFrame class</a></h4>
<p>Before getting into that, however, I will list and briefly describe the 
instance variables belonging to objects of the <b>PictureFrame</b> class.&nbsp; I will be 
referring back to these instance variables later.</p>
<ul>
	<li>JFrame <b>frame</b> = new JFrame() - <i>Main window used to display the 
	image from the Picture object.</i></li>
<li>ImageIcon <b>imageIcon</b> = new ImageIcon() - <i>ImageIcon object used to display 
the picture in a label.</i></li>
	<li>JLabel <b>label</b> = new JLabel(imageIcon) - <i>Label used to 
display the picture.</i></li>
	<li>DigitalPicture <b>picture</b> - <i>The Picture object to display.</i></li>
</ul>
<p><font color="#FF0000"><b>A new JFrame object</b></font></p>
<p>Note that when a new <b>PictureFrame</b> object is constructed, a new <b>
JFrame</b> object is also constructed and its reference is stored in the 
instance variable named <b>frame</b>.&nbsp; This <b>JFrame</b> object provides 
the visual container in which the <b>Picture</b> object's image is displayed.</p>
<p>A complete listing of the <b>PictureFrame</b> class is provided in Listing 15 
near the end of the lesson.</p>
<h4><a name="Case_with_no_existing_PictureFrame_object">Case with no existing 
PictureFrame object</a></h4>
When the <b>show</b> method in Listing 7 is called and the <b>pictureFrame</b> 
variable contains null, the <b>PictureFrame</b> constructor shown in Listing 8 
is called to construct a new <b>PictureFrame</b> object.&nbsp; <i>(Remember, the 
background color in Listing 8 indicates that the code fragment was extracted 
from the <b>PictureFrame</b> class.)</i><p>
<b><a name="Listing_8">Listing 8</a>. One of two overloaded constructors 
for the PictureFrame class.</b><table border="1" cols="1" width="477" bgcolor="#ffeeff"     >
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * A constructor that takes a picture to display
   * @param picture  the digital picture to display in the
   * picture frame
   */
  public PictureFrame(DigitalPicture picture){
    // set the current object's picture to the passed in
    // picture
    this.picture = picture;

    // set up the frame
    initFrame();
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This constructor saves the incoming reference to the <b>SimplePicture</b> 
object in an <a href="#Instance_variables_of_the_PictureFrame_class">instance 
variable</a> named <b>picture</b>.&nbsp; <i>(Recall that the <b>SimplePicture</b> 
class implements the <b>DigitalPicture</b> interface.)</i></p>
<p>Then the constructor calls the method named <b>initFrame</b> <i>(see Listing 
9)</i> on the new <b>PictureFrame</b> object that is being constructed.</p>
<p><font color="#FF0000">
<b>The initFrame method of the PictureFrame class</b></font></p>
<p>The <b>initFrame</b> method is shown in its entirety in Listing 9.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. The initFrame method of the PictureFrame 
class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffeeff"     >
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * A method to initialize the picture frame
   */
  private void initFrame(){
    // set the image for the picture frame
    updateImage();

    // add the label to the frame
    frame.getContentPane().add(label);

    // pack the frame (set the size to as big as it needs
    // to be)
    frame.pack();

    // make the frame visible
    frame.setVisible(true);
  }//end initFrame method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The <b>initFrame</b> method immediately calls the <b>updateImage</b> method 
shown in Listing 10.&nbsp; <i>(I will put the explanation of the <b>initFrame</b> 
method on the back burner for now and return to it later.)</i></p>
<p><font color="#FF0000">
<b>The updateImage method of the PictureFrame class</b></font></p>
<p>Code in the <b>updateImage</b> method is executed only if a reference to a <b>
Picture</b> object is stored in the instance variable named <b>picture</b>.</p>
<p>
<b><a name="Listing_10">Listing 10</a>. The updateImage method of the 
PictureFrame class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffeeff"     >
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * A method to update the picture frame image with the
   * image in the picture
   */
  public void updateImage(){
    // only do this if there is a picture
    if (picture != null){
      // set the image for the image icon from the picture
      imageIcon.setImage(picture.getImage());

      // set the title of the frame to the title of the
      // picture
      frame.setTitle(picture.getTitle());
    }//end if
  }//end updateImage method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>An ImageIcon object</b></font></p>
<p>As you saw earlier in the
<a href="#Instance_variables_of_the_PictureFrame_class">list</a> of instance 
variables, a new object of the <b>ImageIcon</b> class is instantiated when a new 
object of the <b>PictureFrame</b> class is constructed.&nbsp; The object's 
reference is stored in the instance variable named <b>imageIcon</b>.</p>
<p><font color="#FF0000"><b>Get the image from the Picture object</b></font></p>
<p>Listing 10 calls the <b>getImage</b> method on the reference to the <b>
Picture</b> object to get a reference to the <b>BufferedImage</b> object that 
belongs to the <b>Picture</b> object.&nbsp; <i>(The <b>getImage</b> method 
contains a single line of code that returns the value of an instance variable 
named <b>bufferedImage</b> so I won't show that code here.)</i></p>
<p><font color="#FF0000"><b>Set the image in the ImageIcon object</b></font></p>
<p>Then Listing 10 calls the <b>setImage</b> method on the <b>ImageIcon</b> 
object to <i>&quot;Set the image displayed by the icon,&quot; passing the reference 
to the Picture object's image as a parameter.</i></p>
<p>At this point, an
<b>ImageIcon</b> object has been instantiated that holds a reference to the <b>
BufferedImage</b> object that belongs to the <b>Picture</b> object.&nbsp; 
Whenever the <b>ImageIcon</b> object is displayed, the image belonging to the <b>
Picture </b>object will also be displayed.</p>
<p>Because the <b>ImageIcon</b> object and the <b>Picture</b> object refer to 
the same <b>BufferedImage</b> object, modifications to the pixels in the <b>
Picture</b> object's image will be reflected on the screen the next time the <b>
ImageIcon</b> 
object is displayed.</p>
<p><font color="#FF0000"><b>Set the title on the JFrame object</b></font></p>
<p>Then Listing 10 gets a reference to the <b>Picture</b> object's title, and 
calls the <b>setTitle</b> method on the <b>JFrame</b> object, causing the <b>
JFrame</b> object and the <b>Picture</b> object to both refer to the same <b>
String</b> object as a title.</p>
<p><font color="#FF0000"><b>Modifications to the Picture object's image or title</b></font></p>
<p>If the <b>BufferedImage</b> or the <b>String</b> title belonging to the <b>
Picture</b> object is modified and then the <b>PictureFrame</b> object's <b>
updateImage</b> method is called, the image referred to by the <b>ImageIcon</b> 
object 
and the title referred to by the <b>JFrame</b> object will reflect the changes.</p>
<p><font color="#FF0000"><b>That's a wrap on the updateImage method</b></font></p>
<p>That concludes the explanation of the <b>updateImage</b> method shown in 
Listing 10.&nbsp; Now we will return to the explanation of the <b>initFrame</b> 
method shown in Listing 9.</p>
<p><font color="#FF0000"><b>A new JLabel object</b></font></p>
<p>As you saw earlier in the
<a href="#Instance_variables_of_the_PictureFrame_class">list</a> of instance 
variables, whenever a new <b>PictureFrame</b> object is constructed, a new 
object of the <b>JLabel</b> class is instantiated and its reference is stored in 
the instance variable named <b>label</b>.&nbsp; Furthermore, a reference to the
<b>ImageIcon</b> object is passed to the constructor when the <b>JLabel</b> 
object is instantiated.</p>
<p><font color="#FF0000">
 <b>Partial description of a JLabel from Sun</b></font></p>
<p>Figure 7 contains a partial description of the <b>JLabel</b> class from the 
Sun documentation.</p>
<p>
 <b><a name="Figure_7">Figure 7</a>. Partial description of a JLabel from Sun. </b>
<table border="1" cols="1" width="477" bgcolor="#EFE9B8" >
  <tbody>
    <tr>
      <td>
      A <b>JLabel</b> object can display either text, an image, or both...<p>By 
		default, labels are vertically centered in their display area. Text-only 
		labels are leading edge aligned, by default; image-only labels are 
		horizontally centered, by default.
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Instantiate a JLabel object with an ImageIcon 
object's reference</b></font></p>
<p>If you instantiate a new <b>JLabel</b> object, passing only a reference to an
<b>ImageIcon</b> object as a parameter to the constructor, this will create <i>
&quot;a <b>JLabel</b> instance with the specified image. The label is centered 
vertically and horizontally in its display area.&quot;</i> </p>
<p><font color="#FF0000"><b>Where is this all going?</b></font></p>
<p>By now, you should be starting to see where this is all going.&nbsp; The 
objective is to display the image belonging to the <b>Picture</b> object in a <b>
JFrame</b> object.&nbsp; One way to do this is by encapsulating a reference to the 
image in a <b>JLabel</b> object and placing the <b>JLabel</b> object in the 
center of the <b>JFrame</b> object.</p>
<p><font color="#FF0000"><b>Only two types of encapsulated references are 
allowed</b></font></p>
<p>However, only two types of object references can be encapsulated in a <b>JLabel</b> 
object:</p>
<ul>
	<li><b>String</b> objects</li>
<li><b>ImageIcon</b> objects</li>
</ul>
<p>There is no constructor for a <b>JLabel</b> object that will accept a 
reference to a <b>BufferedImage</b> object as a parameter.</p>
<p>Therefore, in order to cause a reference to the <b>Picture</b> object's <b>
BufferedImage</b> to be encapsulated in the <b>JLabel</b> object, we must first 
encapsulate the <b>BufferedImage</b> object's reference in an <b>ImageIcon</b> 
object and then encapsulate that object in the <b>JLabel</b> object.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>The content pane</b><br />
<font size="3" face="arial">
	If you are unfamiliar with the content pane, see the lesson titled <i>Swing 
	from A to Z, Some Simple Components</i> in <a href="#Resources">Resources</a>.</font>
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Add the JLabel object to the content pane</b></font></p>
<p>When the call to the <b>updateImage</b> method returns, the code in Listing 9 
adds the <b>JLabel</b> object to the content pane of the <b>JFrame</b> object.</p>
<p><font color="#FF0000"><b>Pack the JFrame object</b></font></p>
<p>Then Listing 9 calls the <b>pack</b> method on the <b>JFrame</b> object to 
set the size of the <b>JFrame</b> object.&nbsp; </p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Pluggable Look and Feel</b><br />
<font size="3" face="arial">
	If you are unfamiliar with Swing's Pluggable Look and Feel, see the lesson 
	titled <i>The Swing Package, A Preview of Pluggable Look and Feel</i> in
	<a href="#Resources">Resources</a>.</font>
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>What does the pack method do?</b></font></p>
<p>To make a long story short, the call to the <b>pack</b> method 
causes the size of the display area of the <b>JFrame</b> object <i>(see Figure 
1)</i> to match the size of the picture's <b>BufferedImage</b> object.&nbsp; The 
overall size of the resulting <b>JFrame</b> object will be somewhat larger <i>
(depending on the pluggable look and feel in use)</i> due to the border around the image 
and the banner at the top.</p>
<p><font color="#FF0000"><b>Make the JFrame object visible</b></font>&nbsp; </p>
<p>Finally, the code in Listing 9 sets the <b>visible</b> property belonging to 
the <b>JFrame</b> object to true.&nbsp; This causes the <b>JFrame</b> object, 
along with all of the components <i>(including the <b>JLabel</b> object and the
<b>ImageIcon</b> object)</i> contained within the <b>JFrame</b> object to become 
visible on the computer screen.</p>
<p>When the <b>ImageIcon</b> object becomes visible, it is really the <b>Picture</b> 
object's <b>BufferedImage</b> object, whose reference is held by the <b>
ImageIcon</b> object, that becomes visible inside the <b>JFrame</b> object.&nbsp;
<i>(See Figure 1.)</i></p>
<h4><a name="Case_with_an_existing_PictureFrame_object">Case with an existing 
PictureFrame object</a></h4>
<p>Please return your attention to the <b>if-else</b> statement in the <b>show</b> method in 
Listing 7.&nbsp; If a <b>PictureFrame</b> object already exists, the <b>show</b> 
method calls the <b>updateImageAndShowIt</b> method on the <b>PictureFrame</b> object.</p>
<p><font color="#FF0000">
<b>The updateImageAndShowIt method of the PictureFrame class</b></font></p>
<p>This method is shown in its entirety in Listing 11.</p>
<p>
<b><a name="Listing_11">Listing 11</a>. The updateImageAndShowIt method of the 
PictureFrame class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffeeff"     >
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * A method to update the picture frame image with the
   * image in the picture and show it
   */
  public void updateImageAndShowIt(){
    // first update the image
    updateImage();

    // now make sure it is shown
    frame.setVisible(true);
  }//end updateImageAndShowIt method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 11 begins by calling the <b>updateImage</b> method that I explained 
in conjunction with Listing 10.&nbsp; As I explained at that time, if the <b>
BufferedImage</b> pixels or the <b>String</b> title text belonging to the <b>
Picture</b> object have been modified, the call to the <b>updateImage</b> method 
will cause those changes to be reflected in a subsequent screen display of the 
<b>Picture</b> object.</p>
<p><font color="#FF0000"><b>Display the updated picture</b></font></p>
<p>Then Listing 11 calls the <b>setVisible</b> method on the <b>JFrame</b> 
object, forcing the object to repaint itself <i>(and all of its children)</i> on the screen.&nbsp; 
The new screen image will reflect 
any changes that may have been made to the pixels in the image or the text in 
the title.</p>
<p><font color="#FF0000"><b>Return of the show method</b></font></p>
<p>When the <b>setVisible</b> method returns, the
<b>updateImageAndShowIt</b> method terminates, returning control to the <b>show</b> 
method in Listing 7.</p>
<p>The <b>show</b> method has nothing else to do, so it 
terminates and returns control to the code from which it was originally called, such as the 
code in Listing 6 for example.</p>
<p><font color="#FF0000"><b>The Picture object will have been displayed</b></font></p>
<p>When the <b>show</b> method terminates, the
<b>Picture</b> object on which it was called will have been displayed in a <b>
JFrame</b> object as shown in Figure 6.</p>
<p>If the <b>show</b> method is 
called on more than one <b>Picture</b> object, the resulting images will overlay 
one another in the upper-left corner of the screen.</p>
<p>That concludes the explanation of the <b>show</b> method of the <b>Picture</b> 
class.</p>
<h4><a name="More_methods_of_the_PictureFrame_class">More methods of the 
PictureFrame class</a></h4>
<p>The <b>PictureFrame</b> class provides several other methods that could prove 
to be useful in more complex programs.&nbsp; 
The signatures and the behaviors of each of those methods are described below:</p>
<ul>
	<li><b>void setPicture(Picture picture) </b>- sets the picture that will be 
	displayed in the <b>JFrame</b> object <i>(the frame)</i>.</li>
	<li><b>void displayImage()</b> - Makes sure that the frame is displayed.</li>
	<li><b>void hide()</b> - Hides the frame.</li>
	<li><b>void setVisible(boolean flag)</b> - Sets the visible flag on the 
	frame.</li>
	<li><b>void close()</b> - Closes and disposes of the <b>JFrame</b> object <i>
	(more permanent than simply hiding the frame)</i>.</li>
	<li><b>void setTitle(String title)</b> - Sets the title for the frame.</li>
	<li><b>void repaint()</b> - Forces the frame to repaint itself.</li>
</ul>
<p>The <b>PictureFrame</b> class also provides a constructor that takes no 
parameters.</p>
<p><font color="#FF0000"><b>None of the code is complicated</b></font></p>
<p>Neither the constructor nor any of the methods in the above 
<a href="#More_methods_of_the_PictureFrame_class">list</a> contain complicated code.&nbsp; If you understood the earlier explanations 
of the <b>initFrame</b> and <b>updateImage</b> methods, you should have no 
difficulty understand the code in the additional constructor and methods.&nbsp; 
You can view the code for the constructor and the methods in Listing 15 near the 
end of the lesson.</p>
<p>Therefore, that also concludes the explanation of the <b>PictureFrame</b> class.</p>
<center>
<h2><a name="Run the program"></a>Run the programs</h2>
</center>
<p>I encourage you to copy the code from Listing 16, compile 
the code, and execute it.&nbsp; Experiment with the code, making changes, and 
observing the results of your changes.&nbsp; Make certain that you can explain why 
your changes behave as they do.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I explained the <b>show</b> method of the <b>Picture</b> 
class that causes the image contained in a <b>Picture</b> object to be displayed 
on the screen in a <b>JFrame</b> object as shown in Figure 1.</p>
<p>Along the way, I also explained the <b>PictureFrame</b> class, which serves as an 
intermediary between the <b>Picture</b> object and the <b>JFrame</b> object.</p>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>In the next lesson, you will learn how to use three different methods, which in turn use affine 
transforms, to <i>scale</i>, <i>rotate</i>, and <i>translate</i> <b>Picture</b> objects.</p>
<p>I will explain and illustrate the following three methods and one overloaded constructor 
from the <b>SimplePicture</b> class:</p>
<ul>
	<li>Picture <b>scale</b>(double xFactor, double yFactor)</li>
	<li>Rectangle2D <b>getTransformEnclosingRect</b>(AffineTransform trans</li>
	<li>void <b>copyPicture</b>(SimplePicture sourcePicture)</li>
	<li><b>SimplePicture</b>(SimplePicture copyPicture)</li>
</ul>
<p>The first two methods in the above list involve the application of affine 
transforms to <b>Picture</b> objects.</p>
<p>I will also develop and explain two additional methods that are patterned 
after the <b>scale</b> method.&nbsp; These two methods apply rotation and 
translation transforms to <b>Picture</b> 
objects.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li>
	<a rel="license" target="new" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a target="new" href="http://coweb.cc.gatech.edu/mediaComp-plan/101">
	Media Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a target="new" href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a target="new" href="http://drjava.sourceforge.net/">DrJava</a> 
	download site</li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, 
	the JavaPLT group at Rice University</a></li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava 
	Open Source License</a></li>
	<li>
	<a target="new" href="http://www.developer.com/java/article.php/1440571">The 
	Essence of OOP using Java, The this and super Keywords</a></li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java058.htm">
	Threads of Control</a></li>
	<li>
	<a target="new" href="http://java.sun.com/products/jfc/tsc/articles/painting/">
	Painting in AWT and Sw<font size="-1" face="Verdana, Arial, Helvetica">ing</font></a></li>
	<li><a target="new" href="http://en.wikipedia.org/wiki/Turtle_graphics/">
	Wikipedia Turtle Graphics</a></li>
	<li><a target="new" href="http://www.devx.com/tips/Tip/5809">IsA or HasA</a></li>
	<li>
	<a target="new" href="http://www.vectorcad3d.com/support/lathetutorial.htm">
	Vector Cad-Cam XI Lathe Tutorial</a></li>
	<li>
	<a target="new" href="http://local.wasp.uwa.edu.au/~pbourke/geometry/classification/">
	Classification of 3D to 2D projections</a></li>
	<li>
	<a href="http://en.wikipedia.org/wiki/Color_model">Color model</a> from 
Wikipedia</li>
	<li>
	<a href="../Light%20and%20color:%20%20an%20introduction">Light and color:&nbsp; 
an introduction</a> by Norman Koren</li>
	<li>
<a href="http://www.ncsu.edu/scivis/lessons/colormodels/color_models2.html#(HSV)">
Color Principles - Hue, Saturation, and Value</a></li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java200.htm">200</a> 
	Implementing the Model-View-Controller Paradigm using Observer and 
	Observable</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java300.htm">300</a> 
	Java 2D Graphics, Nested Top-Level Classes and Interfaces</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java302.htm">302</a> 
	Java 2D Graphics, The Point2D Class</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java304.htm">304</a> 
	Java 2D Graphics, The Graphics2D Class</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java306.htm">306</a> 
	Java 2D Graphics, Simple Affine Transforms</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java308.htm">308</a> 
	Java 2D Graphics, The Shape Interface, Part 1</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java310.htm">310</a> 
	Java 2D Graphics, The Shape Interface, Part 2</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java312.htm">312</a> 
	Java 2D Graphics, Solid Color Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java314.htm">314</a> 
	Java 2D Graphics, Gradient Color Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java316.htm">316</a> 
	Java 2D Graphics, Texture Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java318.htm">318</a> 
	Java 2D Graphics, The Stroke Interface</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java320.htm">320</a> 
	Java 2D Graphics, The Composite Interface and Transparency</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java322.htm">322</a> 
	Java 2D Graphics, The Composite Interface, GradientPaint, and Transparency</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java324.htm">324</a> 
	Java 2D Graphics, The Color Constructors and Transparency</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3403921">
	400</a> Processing Image Pixels using Java, Getting Started<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3423661">
	402</a> Processing Image Pixels using Java, Creating a Spotlight<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3441391">
	404</a> Processing Image Pixels Using Java: Controlling Contrast and 
	Brightness<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3512456">
	406</a> Processing Image Pixels, Color Intensity, Color Filtering, and Color 
	Inversion <br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3522711">
	408</a> Processing Image Pixels, Performing Convolution on Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3579206">
	410</a> Processing Image Pixels, Understanding Image Convolution in Java<br>
	<a target="new" href="http://www.developer.com/java/ent/article.php/3590351">
	412</a> Processing Image Pixels,<font size="-1" face="Verdana, Arial, Helvetica"> 
	Applying Image Convolution in Java, Part 1 <br>
	</font>
	<a target="new" href="http://www.developer.com/java/other/article.php/3596351">
	414</a> Processing Image Pixels, Applying Image Convolution in Java, Part 2<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3640776">
	416</a> Processing Image Pixels, An Improved Image-Processing Framework in 
	Java<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3650011">
	418</a> Processing Image Pixels, Creating Visible Watermarks in Java<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3645761">
	450</a> A Framework for Experimenting with Java 2D Image-Processing Filters<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3654171">
	452</a> Using the Java 2D LookupOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3670696">
	454</a> Using the Java 2D AffineTransformOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3681466">
	456</a> Using the Java 2D LookupOp Filter Class to Scramble and Unscramble 
	Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3686856">
	458</a> Using the Java 2D BandCombineOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3696676">
	460</a> Using the Java 2D ConvolveOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3698981">
	462</a> Using the Java 2D ColorConvertOp and RescaleOp Filter Classes to 
	Process Images</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java506.htm">506</a> 
	JavaBeans, Introspection</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/2114451">
	2100</a> Understanding Properties in Java and C#</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3495121">
	2300</a> Generics in J2SE, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3782471">
	340</a> Multimedia Programming with Java, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3788086">
	342</a> Getting Started with the Turtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3791291">
	344</a> Continuing with the SimpleTurtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3793401">
	346</a> Wrapping Up the SimpleTurtle Class: Multimedia Programming with Java</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java348.htm">348</a> 
	The Pen and PathSegment Classes: Multimedia Programming with Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3795761">
	349</a> A Pixel Editor Program in Java: Multimedia Programming with Java</li>
	<li>
	<a new href="http://www.developer.com/java/other/article.php/3798646%20target=">
	350</a> 3D Displays, Color Distance, and Edge Detection</li>
	<li><a href="http://www.developer.com/java/other/article.php/3801671">351</a> 
	A Slider-Controlled Softening Program for Digital Photos</li>
	<li><a href="http://www.developer.com/java/other/article.php/3806156">352</a> 
	Adding Animated Movement to Your Java Application</li>
	<li><a href="http://www.dickbaldwin.com/java/Java353.htm">353</a> A Slider-Controlled Sharpening Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java354.htm">354</a> The DigitalPicture Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java355.htm">355</a> The HSB Color Model</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the programs discussed in this lesson are provided in
Listing 12  through Listing 16 below.
<p>
<b><a name="Listing_12">Listing 12 </a>. Source code for Ericson's Picture class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;

/**
 * A class that represents a picture.  This class inherits
 * from SimplePicture and allows the student to add 
 * functionality to the Picture class.
 *
 * Copyright Georgia Institute of Technology 2004-2005
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
  ///////////////////// constructors /////////////////////

  /**
   * Constructor that takes no arguments
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit
     * call to super()
     * child constructors always call a parent constructor
     */
    super();
  }

  /**
   * Constructor that takes a file name and creates the 
   * picture
   * @param fileName the name of the file to create the 
   * picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }

  /**
   * Constructor that takes the width and height
   * @param width the width of the desired picture
   * @param height the height of the desired picture
   */
  public Picture(int width, int height)
  {
    // let the parent class handle this width and height
    super(width,height);
  }

  /**
   * Constructor that takes a picture and creates a
   * copy of that picture
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }

  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }

  ////////////////////// methods /////////////////////////

  /**
   * Method to return a string with information about this
   * picture.
   * @return a string with information about the picture 
   * such as fileName, height and width.
   */
  public String toString()
  {
    String output = 
      "Picture, filename " + getFileName() +
      " height " + getHeight()
      + " width " + getWidth();
    return output;

  }

} // this } is the end of class Picture, put all new 
  // methods before this</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_13.">Listing 13.</a> Source code for Ericson's SimplePicture class.</b><table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import java.awt.*;
import java.io.*;
import java.awt.geom.*;

/**
 * A class that represents a simple picture.  A simple
 * picture may have an associated file name and a title.
 * A simple picture has pixels, width, and height.  A
 * simple picture uses a BufferedImage to hold the pixels.
 * You can show a simple picture in a PictureFrame (a
 * JFrame).
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class SimplePicture implements DigitalPicture
{

  /////////////////////// Fields /////////////////////////

  /**
   * the file name associated with the simple picture
   */
  private String fileName;

  /**
   * the title of the simple picture
   */
  private String title;

  /**
   * buffered image to hold pixels for the simple picture
   */
  private BufferedImage bufferedImage;

  /**
   * frame used to display the simple picture
   */
  private PictureFrame pictureFrame;

  /**
   * extension for this file (jpg or bmp)
   */
  private String extension;


 /////////////////////// Constructors ////////////////////

 /**
  * A Constructor that takes no arguments.  All fields
  * will be null. A no-argument constructor must be given
  * in order for a class to be able to be subclassed.  By
  * default all subclasses will implicitly call this in
  * their parent's no argument constructor unless a
  * different call to super() is explicitly made as the
  * first line of code in a constructor.
  */
 public SimplePicture()
 {this(200,100);}

 /**
  * A Constructor that takes a file name and uses the
  * file to create a picture
  * @param fileName the file name to use in creating the
  * picture
  */
 public SimplePicture(String fileName)
 {

   // load the picture into the buffered image
   load(fileName);

 }

 /**
  * A constructor that takes the width and height desired
  * for a picture and creates a buffered image of that
  * size.  This constructor doesn't  show the picture.
  * @param width the desired width
  * @param height the desired height
  */
 public  SimplePicture(int width, int height)
 {
   bufferedImage = new BufferedImage(
               width, height, BufferedImage.TYPE_INT_RGB);
   title = "None";
   fileName = "None";
   extension = "jpg";
   setAllPixelsToAColor(Color.white);
 }

 /**
  * A constructor that takes the width and height desired
  * for a picture and creates a buffered image of that
  * size.  It also takes the color to use for the
  * background of the picture.
  * @param width the desired width
  * @param height the desired height
  * @param theColor the background color for the picture
  */
 public  SimplePicture(
                    int width, int height, Color theColor)
 {
   this(width,height);
   setAllPixelsToAColor(theColor);
 }

 /**
  * A Constructor that takes a picture to copy
  * information from
  * @param copyPicture the picture to copy from
  */
 public SimplePicture(SimplePicture copyPicture)
 {
   if (copyPicture.fileName != null)
   {
      this.fileName = new String(copyPicture.fileName);
      this.extension = copyPicture.extension;
   }
   if (copyPicture.title != null)
      this.title = new String(copyPicture.title);
   if (copyPicture.bufferedImage != null)
   {
     this.bufferedImage =
                 new BufferedImage(copyPicture.getWidth(),
                                  copyPicture.getHeight(),
                              BufferedImage.TYPE_INT_RGB);
     this.copyPicture(copyPicture);
   }
 }

 /**
  * A constructor that takes a buffered image
  * @param image the buffered image
  */
 public SimplePicture(BufferedImage image)
 {
   this.bufferedImage = image;
   title = "None";
   fileName = "None";
   extension = "jpg";
 }

 ////////////////////////// Methods //////////////////////

 /**
  * Method to get the extension for this picture
  * @return the extendsion (jpg or bmp)
  */
 public String getExtension() { return extension; }


 /**
  * Method that will copy all of the passed source
  * picture into the current picture object
  * @param sourcePicture  the picture object to copy
  */
 public void copyPicture(SimplePicture sourcePicture)
 {
   Pixel sourcePixel = null;
   Pixel targetPixel = null;

   // loop through the columns
   for (int sourceX = 0, targetX = 0;
        sourceX &LT; sourcePicture.getWidth() &&
        targetX &LT; this.getWidth();
        sourceX++, targetX++)
   {
     // loop through the rows
     for (int sourceY = 0, targetY = 0;
          sourceY &LT; sourcePicture.getHeight() &&
          targetY &LT; this.getHeight();
          sourceY++, targetY++)
     {
       sourcePixel =
                  sourcePicture.getPixel(sourceX,sourceY);
       targetPixel = this.getPixel(targetX,targetY);
       targetPixel.setColor(sourcePixel.getColor());
     }
   }

 }

 /**
  * Method to set the color in the picture to the passed
  * color
  * @param color the color to set to
  */
 public void setAllPixelsToAColor(Color color)
 {
   // loop through all x
   for (int x = 0; x &LT; this.getWidth(); x++)
   {
     // loop through all y
     for (int y = 0; y &LT; this.getHeight(); y++)
     {
       getPixel(x,y).setColor(color);
     }
   }
 }

 /**
  * Method to get the buffered image
  * @return the buffered image
  */
 public BufferedImage getBufferedImage()
 {
    return bufferedImage;
 }

 /**
  * Method to get a graphics object for this picture to
  * use to draw on
  * @return a graphics object to use for drawing
  */
 public Graphics getGraphics()
 {
   return bufferedImage.getGraphics();
 }

 /**
  * Method to get a Graphics2D object for this picture
  * which can be used to do 2D drawing on the picture
  */
 public Graphics2D createGraphics()
 {
   return bufferedImage.createGraphics();
 }

 /**
  * Method to get the file name associated with the
  * picture
  * @return  the file name associated with the picture
  */
 public String getFileName() { return fileName; }

 /**
  * Method to set the file name
  * @param name the full pathname of the file
  */
 public void setFileName(String name)
 {
   fileName = name;
 }

 /**
  * Method to get the title of the picture
  * @return the title of the picture
  */
 public String getTitle()
 { return title; }

 /**
  * Method to set the title for the picture
  * @param title the title to use for the picture
  */
 public void setTitle(String title)
 {
   this.title = title;
   if (pictureFrame != null)
       pictureFrame.setTitle(title);
 }

 /**
  * Method to get the width of the picture in pixels
  * @return the width of the picture in pixels
  */
 public int getWidth(){ return bufferedImage.getWidth(); }

 /**
  * Method to get the height of the picture in pixels
  * @return  the height of the picture in pixels
  */
 public int getHeight(){
  return bufferedImage.getHeight();
 }

 /**
  * Method to get the picture frame for the picture
  * @return the picture frame associated with this
  * picture (it may be null)
  */
 public PictureFrame getPictureFrame()
                                  { return pictureFrame; }

 /**
  * Method to set the picture frame for this picture
  * @param pictureFrame the picture frame to use
  */
 public void setPictureFrame(PictureFrame pictureFrame)
 {
   // set this picture objects' picture frame to the
   // passed one
   this.pictureFrame = pictureFrame;
 }

 /**
  * Method to get an image from the picture
  * @return  the buffered image since it is an image
  */
 public Image getImage()
 {
   return bufferedImage;
 }

 /**
  * Method to return the pixel value as an int for the
  * given x and y location
  * @param x the x coordinate of the pixel
  * @param y the y coordinate of the pixel
  * @return the pixel value as an integer (alpha, red,
  * green, blue)
  */
 public int getBasicPixel(int x, int y)
 {
    return bufferedImage.getRGB(x,y);
 }

 /**
  * Method to set the value of a pixel in the picture
  * from an int
  * @param x the x coordinate of the pixel
  * @param y the y coordinate of the pixel
  * @param rgb the new rgb value of the pixel (alpha, red,
  * green, blue)
  */
 public void setBasicPixel(int x, int y, int rgb)
 {
   bufferedImage.setRGB(x,y,rgb);
 }

 /**
  * Method to get a pixel object for the given x and y
  * location
  * @param x  the x location of the pixel in the picture
  * @param y  the y location of the pixel in the picture
  * @return a Pixel object for this location
  */
 public Pixel getPixel(int x, int y)
 {
   // create the pixel object for this picture and the
   // given x and y location
   Pixel pixel = new Pixel(this,x,y);
   return pixel;
 }

 /**
  * Method to get a one-dimensional array of Pixels for
  * this simple picture
  * @return a one-dimensional array of Pixel objects
  * starting with y=0
  * to y=height-1 and x=0 to x=width-1.
  */
 public Pixel[] getPixels()
 {
   int width = getWidth();
   int height = getHeight();
   Pixel[] pixelArray = new Pixel[width * height];

   // loop through height rows from top to bottom
   for (int row = 0; row &LT; height; row++)
     for (int col = 0; col &LT; width; col++)
       pixelArray[row * width + col] =
                                  new Pixel(this,col,row);

   return pixelArray;
 }



 /**
  * Method to load the buffered image with the passed
  * image
  * @param image  the image to use
  */
 public void load(Image image)
 {
   // get a graphics context to use to draw on the
   // buffered image
   Graphics2D graphics2d = bufferedImage.createGraphics();

   // draw the image on the buffered image starting
   // at 0,0
   graphics2d.drawImage(image,0,0,null);

   // show the new image
   show();
 }

 /**
  * Method to show the picture in a picture frame
  */
 public void show()
 {
    // if there is a current picture frame then use it
   if (pictureFrame != null)
     pictureFrame.updateImageAndShowIt();

   // else create a new picture frame with this picture
   else
     pictureFrame = new PictureFrame(this);
 }

 /**
  * Method to hide the picture
  */
 public void hide()
 {
   if (pictureFrame != null)
     pictureFrame.setVisible(false);
 }

 /**
  * Method to make this picture visible or not
  * @param flag true if you want it visible else false
  */
 public void setVisible(boolean flag)
 {
   if (flag)
     this.show();
   else
     this.hide();
 }

 /**
  * Method to open a picture explorer on a copy of this
  * simple picture
  */
 public void explore()
 {
   // create a copy of the current picture and explore it
   new PictureExplorer(new SimplePicture(this));
 }

 /**
  * Method to force the picture to redraw itself.  This is
  * very useful after you have changed the pixels in a
  * picture.
  */
 public void repaint()
 {
   // if there is a picture frame tell it to repaint
   if (pictureFrame != null)
     pictureFrame.repaint();

   // else create a new picture frame
   else
     pictureFrame = new PictureFrame(this);
 }

 /**
  * Method to load the picture from the passed file name
  * @param fileName the file name to use to load the
  * picture from
  */
 public void loadOrFail(
                       String fileName) throws IOException
 {
    // set the current picture's file name
   this.fileName = fileName;

   // set the extension
   int posDot = fileName.indexOf('.');
   if (posDot &gt;= 0)
     this.extension = fileName.substring(posDot + 1);

   // if the current title is null use the file name
   if (title == null)
     title = fileName;

   File file = new File(this.fileName);

   if (!file.canRead())
   {
     // try adding the media path
     file = new File(
                 FileChooser.getMediaPath(this.fileName));
     if (!file.canRead())
     {
       throw new IOException(this.fileName + " could not"
       + " be opened. Check that you specified the path");
     }
   }

   bufferedImage = ImageIO.read(file);
 }


 /**
  * Method to write the contents of the picture to a file
  * with the passed name without throwing errors
  * (THIS MAY NOT BE A VALID DESCRIPTION - RGB)
  * @param fileName the name of the file to write the
  * picture to
  * @return true if success else false
  */
 public boolean load(String fileName)
 {
     try {
         this.loadOrFail(fileName);
         return true;

     } catch (Exception ex) {
         System.out.println("There was an error trying"
                                + " to open " + fileName);
         bufferedImage = new BufferedImage(600,200,
                              BufferedImage.TYPE_INT_RGB);
         addMessage("Couldn't load " + fileName,5,100);
         return false;
     }

 }


 /**
  * Method to load the picture from the passed file name
  * this just calls load(fileName) and is for name
  * compatibility
  * @param fileName the file name to use to load the
  * picture from
  * @return true if success else false
  */
 public boolean loadImage(String fileName)
 {
     return load(fileName);
}

 /**
  * Method to draw a message as a string on the buffered
  * image
  * @param message the message to draw on the buffered
  * image
  * @param xPos  the leftmost point of the string in x
  * @param yPos  the bottom of the string in y
  */
 public void addMessage(
                       String message, int xPos, int yPos)
 {
   // get a graphics context to use to draw on the
   // buffered image
   Graphics2D graphics2d = bufferedImage.createGraphics();

   // set the color to white
   graphics2d.setPaint(Color.white);

   // set the font to Helvetica bold style and size 16
   graphics2d.setFont(new Font("Helvetica",Font.BOLD,16));

   // draw the message
   graphics2d.drawString(message,xPos,yPos);

 }

 /**
  * Method to draw a string at the given location on the
  * picture
  * @param text the text to draw
  * @param xPos the left x for the text
  * @param yPos the top y for the text
  */
 public void drawString(String text, int xPos, int yPos)
 {
   addMessage(text,xPos,yPos);
 }

 /**
   * Method to create a new picture by scaling the
   * current picture by the given x and y factors
   * @param xFactor the amount to scale in x
   * @param yFactor the amount to scale in y
   * @return the resulting picture
   */
  public Picture scale(double xFactor, double yFactor)
  {
    // set up the scale tranform
    AffineTransform scaleTransform =
                                    new AffineTransform();
    scaleTransform.scale(xFactor,yFactor);

    // create a new picture object that is the right size
    Picture result = new Picture(
                           (int) (getWidth() * xFactor),
                           (int) (getHeight() * yFactor));

    // get the graphics 2d object to draw on the result
    Graphics graphics = result.getGraphics();
    Graphics2D g2 = (Graphics2D) graphics;

    // draw the current image onto the result image
    // scaled
    g2.drawImage(this.getImage(),scaleTransform,null);

    return result;
  }

  /**
   * Method to create a new picture of the passed width.
   * The aspect ratio of the width and height will stay
   * the same.
   * @param width the desired width
   * @return the resulting picture
   */
  public Picture getPictureWithWidth(int width)
  {
    // set up the scale tranform
    double xFactor = (double) width / this.getWidth();
    Picture result = scale(xFactor,xFactor);
    return result;
  }

  /**
   * Method to create a new picture of the passed height.
   * The aspect ratio of the width and height will stay
   * the same.
   * @param height the desired height
   * @return the resulting picture
   */
  public Picture getPictureWithHeight(int height)
  {
    // set up the scale tranform
    double yFactor = (double) height / this.getHeight();
    Picture result = scale(yFactor,yFactor);
    return result;
  }

 /**
  * Method to load a picture from a file name and show it
  * in a picture frame
  * @param fileName the file name to load the picture
  * from
  * @return true if success else false
  */
 public boolean loadPictureAndShowIt(String fileName)
 {
   boolean result = true;// the default is that it worked

   // try to load the picture into the buffered image from
   // the file name
   result = load(fileName);

   // show the picture in a picture frame
   show();

   return result;
 }

 /**
  * Method to write the contents of the picture to a file
  * with the passed name
  * @param fileName the name of the file to write the
  * picture to
  */
 public void writeOrFail(String fileName)
                                        throws IOException
 {
   //the default is current
   String extension = this.extension;

   // create the file object
   File file = new File(fileName);
   File fileLoc = file.getParentFile();

   // canWrite is true only when the file exists
   // already! (alexr)
   if (!fileLoc.canWrite()) {
       // System.err.println(
       // "can't write the file but trying anyway? ...");
        throw new IOException(fileName +
        " could not be opened. Check to see if you can"
        + " write to the directory.");
   }

   // get the extension
   int posDot = fileName.indexOf('.');
   if (posDot &gt;= 0)
       extension = fileName.substring(posDot + 1);

   //write the contents of the buffered image to the file
   // as jpeg
   ImageIO.write(bufferedImage, extension, file);

 }

 /**
  * Method to write the contents of the picture to a file
  * with the passed name without throwing errors
  * @param fileName the name of the file to write the
  * picture to
  * @return true if success else false
  */
 public boolean write(String fileName)
 {
     try {
         this.writeOrFail(fileName);
         return true;
     } catch (Exception ex) {
         System.out.println(
                     "There was an error trying to write "
                     + fileName);
         return false;
     }

 }

 /**
  * Method to set the media path by setting the directory
  * to use
  * @param directory the directory to use for the media
  * path
  */
 public static void setMediaPath(String directory) {
   FileChooser.setMediaPath(directory);
 }

 /**
  * Method to get the directory for the media
  * @param fileName the base file name to use
  * @return the full path name by appending
  * the file name to the media directory
  */
 public static String getMediaPath(String fileName) {
   return FileChooser.getMediaPath(fileName);
 }

  /**
   * Method to get the coordinates of the enclosing
   * rectangle after this transformation is applied to
   * the current picture
   * @return the enclosing rectangle
   */
  public Rectangle2D getTransformEnclosingRect(
                                    AffineTransform trans)
  {
    int width = getWidth();
    int height = getHeight();
    double maxX = width - 1;
    double maxY = height - 1;
    double minX, minY;
    Point2D.Double p1 = new Point2D.Double(0,0);
    Point2D.Double p2 = new Point2D.Double(maxX,0);
    Point2D.Double p3 = new Point2D.Double(maxX,maxY);
    Point2D.Double p4 = new Point2D.Double(0,maxY);
    Point2D.Double result = new Point2D.Double(0,0);
    Rectangle2D.Double rect = null;

    // get the new points and min x and y and max x and y
    trans.deltaTransform(p1,result);
    minX = result.getX();
    maxX = result.getX();
    minY = result.getY();
    maxY = result.getY();
    trans.deltaTransform(p2,result);
    minX = Math.min(minX,result.getX());
    maxX = Math.max(maxX,result.getX());
    minY = Math.min(minY,result.getY());
    maxY = Math.max(maxY,result.getY());
    trans.deltaTransform(p3,result);
    minX = Math.min(minX,result.getX());
    maxX = Math.max(maxX,result.getX());
    minY = Math.min(minY,result.getY());
    maxY = Math.max(maxY,result.getY());
    trans.deltaTransform(p4,result);
    minX = Math.min(minX,result.getX());
    maxX = Math.max(maxX,result.getX());
    minY = Math.min(minY,result.getY());
    maxY = Math.max(maxY,result.getY());

    // create the bounding rectangle to return
    rect = new Rectangle2D.Double(
              minX,minY,maxX - minX + 1, maxY - minY + 1);
    return rect;
  }

 /**
  * Method to return a string with information about this
  * picture
  * @return a string with information about the picture
  */
 public String toString()
 {
   String output =
     "Simple Picture, filename " + fileName +
     " height " + getHeight() + " width " + getWidth();
   return output;
 }

} // end of SimplePicture class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_14">Listing 14</a>. Source code for Ericson's DigitalPicture interface.
</b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.Image;
import java.awt.image.BufferedImage;

/**
 * Interface to describe a digital picture.  A digital
 * picture can have a associated file name.  It can have
 * a title.  It has pixels associated with it and you can
 * get and set the pixels.  You can get an Image from a
 * picture or a BufferedImage.  You can load it from a
 * file name or image.  You can show a picture.  You can 
 * create a new image for it.
 * 
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public interface DigitalPicture 
{
 // get the file name that the picture came from  
 public String getFileName(); 
 
 // get the title of the picture 
 public String getTitle(); 

 // set the title of the picture
 public void setTitle(String title); 

 // get the width of the picture in pixels
 public int getWidth(); 

 // get the height of the picture in pixels
 public int getHeight(); 

 // get the image from the picture
 public Image getImage(); 

 // get the buffered image
 public BufferedImage getBufferedImage(); 

 // get the pixel information as an int   
 public int getBasicPixel(int x, int y); 

 // set the pixel information
 public void setBasicPixel(int x, int y, int rgb); 

 // get the pixel information as an object
 public Pixel getPixel(int x, int y); 

 // load the image into the picture
 public void load(Image image); 

 // load the picture from a file
 public boolean load(String fileName); 

 // show the picture 
 public void show(); 
}</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_15">Listing 15</a>. Source code for Ericson's PictureFrame 
class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffeeff">
  <tbody>
    <tr>
      <td>
      <pre>import javax.swing.*;
import java.awt.*;

/**
 * Class that holds a digital picture and displays it.
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson
 */
public class PictureFrame
{

  ////////////////// fields ////////////////////////////

  /**
   * Main window used as the frame
   */
  JFrame frame = new JFrame();

  /**
   * ImageIcon used to display the picture in the label
   */
  ImageIcon imageIcon = new ImageIcon();

  /**
   * Label used to display the picture
   */
  private JLabel label = new JLabel(imageIcon);

  /**
   * Digital Picture to display
   */
  private DigitalPicture picture;

  ///////////////// constructors ////////////////////////

  /**
   * A constructor that takes no arguments.  This is
   * needed for subclasses of this class
   */
  public PictureFrame()
  {
    // set up the frame
    initFrame();
  }

  /**
   * A constructor that takes a picture to display
   * @param picture  the digital picture to display in the
   * picture frame
   */
  public PictureFrame(DigitalPicture picture)
  {
    // set the current object's picture to the passed in
    // picture
    this.picture = picture;

    // set up the frame
    initFrame();
  }

  ///////////////////////// methods //////////////////////

  /**
   * Method to set the picture to show in this picture
   * frame
   * @param picture the new picture to use
   */
  public void setPicture(Picture picture)
  {
    this.picture = picture;
    imageIcon.setImage(picture.getImage());
    frame.pack();
    frame.repaint();
  }

  /**
   * A method to update the picture frame image with the
   * image in the picture
   */
  public void updateImage()
  {
    // only do this if there is a picture
    if (picture != null)
    {
      // set the image for the image icon from the picture
      imageIcon.setImage(picture.getImage());

      // set the title of the frame to the title of the
      // picture
      frame.setTitle(picture.getTitle());

    }
  }

  /**
   * A method to update the picture frame image with the
   * image in the picture and show it
   */
  public void updateImageAndShowIt()
  {
    // first update the image
    updateImage();

    // now make sure it is shown
    frame.setVisible(true);
  }

  /**
   * A method to make sure the frame is displayed
   */
  public void displayImage()
  {
    frame.setVisible(true);
  }

  /**
   * A method to hide the frame
   */
  public void hide()
  {
    frame.setVisible(false);
  }

  /**
   * A method to set the visible flag on the frame
   * @param flag the flag to use
   */
  public void setVisible(boolean flag)
  {
    frame.setVisible(flag);
  }

  /**
   * A method to close a picture frame
   */
  public void close()
  {
    frame.setVisible(false);
    frame.dispose();
  }

  /**
   * Method to set the title for the picture frame
   * @param title the title to use
   */
  public void setTitle(String title)
  {
    frame.setTitle(title);
  }

  /**
   * Method to force the picture frame to repaint (redraw)
   */
  public void repaint()
  {

    // make it visible
    frame.setVisible(true);

    // update the image from the picture
    updateImage();

    // tell the JFrame to handle the repaint
    frame.repaint();
  }

  /**
   * A method to initialize the picture frame
   */
  private void initFrame()
  {

    // set the image for the picture frame
    updateImage();

    // add the label to the frame
    frame.getContentPane().add(label);

    // pack the frame (set the size to as big as it needs
    // to be)
    frame.pack();

    // make the frame visible
    frame.setVisible(true);
  }

}</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_16">Listing 16</a>. Source code for the program named 
Java356a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>/*Program Java356a
Copyright R.G.Baldwin 2009

The purpose of this program is to illustrate one way to 
take a photograph of a physical object and then 
superimpose it on another photograph.

A desk chair was placed in front of a bookcase. A blue 
sheet was hung on the bookcase to provide a relatively 
solid color background. A green towel was placed on the 
chair to hide the texture in the upholstry. A digital 
photograph of the chair was taken. Then a stuffed tiger 
was placed on the back of the chair and another digital 
photograph was taken.

Picture objects were instantiated from each of the 
photographs. Another Picture object was instantiated from 
an image file showing a beach scene with the same
dimensions. A fourth Picture object was instantiated with 
the same dimensions and an all-white image.

Methods of the SimplePicture class and the Pixel class 
were used in a pair of nested for loops to compare the 
color distance between corresponding pixels in the two 
photographs to within a specified tolerance. When the 
color distance between the two pixels exceeded a specified
threshold, the color of the pixel from the photograph
containing the tiger was copied to the all-white Picture 
object, replacing a white pixel. Otherwise, the color of 
the pixel from the beach image was copied to the all-white
Picture object.

The results were moderately good. However, lighting is 
critical and I didn't do anything special to control the 
lighting. As a result, a shadow of the tiger that was
barely noticeable on the blue sheet is very noticeable in 
the final product.

Note:  The idea for this program came directly from the 
book titled Introduction to Computing and Programming with
Java: A Multimedia Approach by Guzdial and Ericson. 

Tested using Windows Vista Premium Home edition and
Ericson's multimedia library.
*********************************************************/
import java.awt.Color;
public class Main{
  public static void main(String[] args){
    new Runner().run();
  }//end main method
}//end class Main
//------------------------------------------------------//

class Runner{
  void run(){
    //Construct three new 341x256 Picture objects by
    // providing the names of image files as parameters
    // to the Pictue constructor.
    Picture pic1 = new Picture("ScaledBeach.jpg");
    Picture pic2 = new Picture("WithTiger.jpg");
    Picture pic3 = new Picture("WithoutTiger.jpg");
    
    //Construct an all-white 341x256 Picture object.
    Picture pic4 = new Picture(341,256);
    
    //Display all three Picture objects in the show
    // format.
    pic1.show();
    pic2.show();
    pic3.show();

    //Replace pixel colors in the all-white Picture object
    // with the colors from either the beach image or the 
    // tiger image.
    Pixel pixA;
    Pixel pixB;
    Pixel pixC;
    Pixel pixD;
    for(int row = 0;row &lt; pic1.getHeight() - 1;row++){
      for(int col = 0;col &lt; pic1.getWidth() - 1;col++){
        pixA = pic1.getPixel(col,row);
        pixB = pic2.getPixel(col,row);
        pixC = pic3.getPixel(col,row);
        pixD = pic4.getPixel(col,row);

        if(pixB.colorDistance(pixC.getColor()) &gt; 50){
          //Replace white pixel with the pixel color from 
          // the tiger image.
          pixD.setColor(pixB.getColor());
        }else{
          //Replace the white pixel with pixel color from 
          // the beach image.
          pixD.setColor(pixA.getColor());
        }//end else
      }//end inner for loop
    }//end outer for loop

    //Display the final product using the show format.
    pic4.setTitle("Tiger on beach scene");
    pic4.show();
  }//end run
}//end class Runner</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2009, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
