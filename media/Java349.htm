<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">A Pixel Editor Program in Java:&nbsp; Multimedia Programming with 
Java</h2>
<i>Examine a new program written entirely in Java that you can use to edit the pixels in 
your digital photos on a pixel-by-pixel basis.</i>
<p><b>Published:</b>&nbsp; January 13, 2009<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 349</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#A_multimedia_class_library">A multimedia class library</a></li>
	<li><a href="#Software_installation_and_testing">Software installation and 
	testing</a></li>
</ul>
	</li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Program_code">Program code</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion</a></li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p>This lesson is the next in a series <i>(see <a href="#Resources">Resources</a>)</i> 
designed to teach you how to write Java programs to do things like:</p>
<ul>
	<li>Remove <i>redeye</i> from a photographic image.</li>
	<li>Distort the human voice.</li>
	<li>Display one image inside another image.</li>
	<li>Do edge detection, blurring, and other filtering operations on images.</li>
	<li>Insert animated cartoon characters into videos of live humans.</li>
</ul>
<p>If you have ever wondered how to do these things, you've come to the right 
place.</p>
<h3><a name="What_you_have_learned_so_far">What you have learned from earlier 
lessons</a></h3>
<p>If you have studied the <a href="#Resources">earlier lessons</a> in this 
series, you have learned:</p>
<ul>
	<li>How to download, install, and test a Java multimedia library from 
	Georgia Institute of Technology.</li>
	<li>How to download, install, and test a lightweight Java IDE named DrJava, 
	which has the ability to interactively evaluate Java code.</li>
	<li>About the behavior of the <b>Turtle</b> class and its superclass named
	<b>SimpleTurtle</b>.</li>
	<li>How the <b>World</b> class and the <b>Turtle</b> class implement a 
	practical version of the <i>Model-View-Control</i> programming paradigm.</li>
	<li>The differences between placing a turtle in a world and placing a turtle 
	in a picture.</li>
	<li>About the <b>Pen</b> and <b>PathSegment</b> classes which are critical 
	to maintaining a complete history of the turtle's movements.</li>
</ul>
<h3><a name="What_you_will_learn_in_this_lesson">What you will learn in this 
lesson</a></h3>
<p>You will learn how to edit the pixels in an image on a pixel-by-pixel basis 
using a program written entirely in Java.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Input and output from the program 
	named PixelEditor01. </li>
	<li><a href="#Figure_2">Figure 2</a>. The program GUI at startup. </li>
	<li><a href="#Figure_3">Figure 3</a>. A PictureExplorer object and the Program 
	GUI. </li>
	<li><a href="#Figure_4">Figure 4</a>. Zoomed view of sequins before 
	modification. </li>
	<li><a href="#Figure_5">Figure 5</a>. Zoomed view of sequins after 
	modification.</li>
	<li><a href="#Figure_6">Figure 6</a>. Skater's left ear without the diamond 
	stud. </li>
	<li><a href="#Figure_7">Figure 7</a>. Skater's left ear after insertion of 
	the diamond stud. </li>
	<li><a href="#Figure_8">Figure 8</a>. Illustration of the Get Color button 
	behavior. </li>
	<li><a href="#Figure_9">Figure 9</a>. Result of entering values into the New 
	Pixel Color fields. </li>
	<li><a href="#Figure_10">Figure 10</a>. Result of brightening eyeball 
	highlights. </li>
	<li><a href="#Figure_11">Figure 11</a>. A standard Java color-chooser 
	dialog. </li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Source code for the program named 
	PixelEditor01. </li>
	<li><a href="#Listing_2">Listing 2</a>. Source code for the PictureExplorer 
	class. </li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="A_multimedia_class_library">A multimedia class library</a></h3>
<p>In this series of lessons, I will present and explain many of the classes in 
a multimedia class library that was developed and released under a <b>Creative 
Commons Attribution 3.0 United States License</b> <i>(see <a href="#Resources">
Resources</a>) </i>by Mark Guzdial and Barbara Ericson at Georgia Institute of 
Technology.&nbsp; In doing this, I will also present some interesting sample programs 
that use the library.</p>
<h3><a name="Software_installation_and_testing">Software installation and 
testing</a></h3>
<p>I explained how to download, install, and test the multimedia class library 
in an earlier lesson titled <i>Multimedia Programming with Java, Getting Started 
(see <a href="#Resources">Resources</a>)</i>.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>Normally, I provide and explain the code in relatively simple programs in 
order to teach you about specific programming concepts.&nbsp; However, I am 
going to depart from my normal approach in this lesson.&nbsp; In this lesson, I 
will present a relatively complex program designed to edit individual pixels in 
an image.&nbsp; I will explain how to use the program for that purpose, but I 
won't explain the code.&nbsp; You will have to wait for future lessons to learn 
about the programming concepts behind the program code.</p>
<p><font color="#FF0000"><b>A single-pixel editor program</b></font></p>
<p>Sometimes it is useful to be able to edit the colors in an image on a 
pixel-by-pixel basis.&nbsp; Figure 1 shows the result of such an editing process, 
but you may have to look closely to identify the pixels that were edited.</p>
<p>
 <b><a name="Figure_1">Figure 1</a></b>. Input and output from the program 
	named PixelEditor01.
<table bgcolor="#FEFFF0"  border="1" cols="1">
<tr><td><img border="0" src="java349a.jpg" width="397" height="251"></td></tr>
<tr><td><img border="0" src="java349b.bmp" width="397" height="251"></td></tr>
</table></p>

<p><font color="#FF0000"><b>A red sequin and a diamond ear stud</b></font></p>
<p>If you look closely at the top image in Figure 1, you will see that the upper 
portion of the skater's costume is adorned with sequins.&nbsp; Each sequin is 
represented by a very small number of very light colored pixels.&nbsp; In order 
to demonstrate what you can do with this program, I changed the color of one of 
the sequins to red.&nbsp; You should be able to spot the red sequin in the 
bottom image in Figure 1.</p>
<p>In addition, I placed a diamond stud in the skater's left earlobe that isn't 
there in the original image.&nbsp; You should be able to see it in the bottom 
image but not in the top image.</p>
<h2 align="center"><a name="Program_code">Program code</a></h2>
<p>The source code for this program is provided in Listing 1 and Listing 2 
near the end of the lesson.</p>
<p>Listing 1 provides the source code for my original program named PixelEditor01.</p>
<p>Listing 2 is my modified version of the class named <b>PictureExplorer</b> 
from Ericson's multimedia library.&nbsp; I added 
several public accessor methods to the class to make it possible for objects 
instantiated from other classes to access certain private instance variables 
from a <b>PictureExplorer</b> object.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion</font></h2>
</center>
<p>This program capitalizes on the availability of the <b>PictureExplorer</b> 
class, making it possible to edit the color of individual pixels in an 
image.</p>
<p>More specifically, Ericson's <b>PictureExplorer</b> class was modified to 
make certain instance variables of <b>PictureExplorer</b> objects accessible to 
objects instantiated from other classes.</p>
<p>Then a Java GUI was written that makes it possible to open an image file in a
<b>PictureExplorer</b> object and edit the colors of the individual pixels in 
the image using the GUI.</p>
<p><font color="#FF0000"><b>Operational</b></font><b><font color="#FF0000"> information</font></b></p>
<p>The program starts with a GUI in the upper-left corner of the screen as shown 
in Figure 2.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. The program GUI at startup.&nbsp; </b>
<table border="0" cols="1" bgcolor="#fefff0"
 >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349c.jpg" width="473" height="229"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>At that point, all of the user-input components are disabled except for the 
field at the bottom of the GUI where the user enters the name of the image file 
to be processed.</p>
<p><font color="#FF0000"><b>Enter the name of an image file</b></font></p><p>
When the user identifies an image file in the text field labeled <b>Enter file 
name here</b>, the 
image is opened in a <b>PictureExplorer</b> object in the upper-left corner of 
the screen and the GUI is moved to a location immediately below the <b>
PictureExplorer</b> object as shown in Figure 3.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. A PictureExplorer object and the Program 
	GUI.</b><table border="0" cols="1" bgcolor="#fefff0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349d.jpg" width="472" height="610"></pre></td></tr></tbody></table></p><p>
<font color="#FF0000"><b>Specifying the image file name</b></font></p><p>You can 
specify an input image file using only the file name and extension if the file 
is in the current directory.&nbsp; If it is not in the current directory, you 
must enter the full path to the file.</p>
<p><font color="#FF0000"><b>JPEG, PNG, and BMP files</b></font></p>
<p>The program has been tested for use with jpg files, png files, and bmp files as input 
files.&nbsp; Because the JPEG compression scheme can do strange things with 
colors, the output file is a bmp file written into the same directory as the 
input file.</p>
<p>The output file name is the same as the input file name except that the letters BAK 
are inserted immediately ahead of the extension, and the extension is always 
bmp.&nbsp; The input file is not modified.</p><p><font color="#FF0000">
<b>Editing pixels</b></font></p>
<p>Once you reach the point shown in Figure 3, you can begin editing pixels.&nbsp; 
You select a pixel by clicking on it in the explorer window, or by using the 
controls in the upper portion of the explorer window.</p>
<p>You can zoom in or out on the image in the explorer window to see the pixels in more or less detail.&nbsp; For 
example, Figure 4 shows the image from Figure 1 zoomed by 500% to show the sequin that was 
converted to red in more detail.&nbsp; <i>(Note that the crosshair cursor 
appears at the upper-left corner of the selected pixel.)</i></p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Zoomed view of sequins before modification. </b>
<table border="0" cols="1" bgcolor="#FEFFF0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349e.jpg" width="409" height="382"></pre></td></tr></tbody></table></p><p>
<font color="#FF0000"><b>The sequin is approximately 3 pixels by 5 pixels in 
size</b></font></p>
<p>
As you can see, that sequin is about three pixels wide and two pixels high.</p>
<p>
Figure 5 shows the zoomed view after I changed the color of the sequin to red.</p><p>
 <b><a name="Figure_5">Figure 5</a>. Zoomed view of sequins after modification. </b>
<table border="0" cols="1" bgcolor="#FEFFF0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349f.jpg" width="409" height="382"></pre></td></tr></tbody></table></p><p>
<font color="#FF0000"><b>Two different shades of red</b></font></p>
<p>
I used two different shades of red to create the red sequin.&nbsp; 
The lower-right portion of the red sequin is darker than the upper-left portion.&nbsp; 
<i>(In retrospect, it probably would have been better if I had also made the left and 
top edges of the sequin darker than the middle of the sequin.)</i></p>
<p><font color="#FF0000"><b>A zoomed earlobe</b></font></p>
<p>In a similar vein, Figure 6 shows the skater's left ear before I inserted the 
diamond stud in her left earlobe.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. Skater's left ear without the diamond stud. </b>
<table border="0" cols="1" bgcolor="#FEFFF0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349g.jpg" width="409" height="382"></pre></td></tr></tbody></table></p><p>
Figure 7 shows her left ear after I inserted the diamond stud.</p><p>
 <b><a name="Figure_7">Figure 7</a>. Skater's left ear after insertion of the 
	diamond stud. </b>
<table border="0" cols="1" bgcolor="#FEFFF0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349h.jpg" width="409" height="382"></pre></td></tr></tbody></table></p><p>
<font color="#FF0000"><b>Suitable for very intricate work</b></font></p>
<p>
This program makes it possible to do very intricate work insofar 
as editing an image is concerned.&nbsp; For example, the&nbsp; program could easily be used to 
remove a mole, pimple, or similar blemish from a digital photograph of someone's face.&nbsp; 
You could do that by replacing the pixels that define 
the mole with pixels having the color of neighboring pixels from unblemished skin.</p>
<p><font color="#FF0000"><b>Edit pixels using buttons and text fields</b></font></p>
<p>Once the image is loaded into the <b>PictureExplorer</b> object, you can edit 
any of the pixels in the image using the buttons and text fields in the GUI 
along with the user controls in the explorer window.</p>
<p>I will start at the top of the GUI and work my way down, describing the 
purpose of the buttons and the text fields as I go.</p>
<p><font color="#FF0000"><b>The Old Pixel Color data and the Get Color button</b></font></p>
<p>The text fields in the red panel in Figure 3 are for display of 
numeric data only.&nbsp; <i>(They are always disabled insofar as data entry is 
concerned.)</i>&nbsp; <a name="If_you_place_the_cursor">If you place the cursor</a> at a particular location in the 
explorer window and click the <b>Get Color</b> button in the GUI, the numeric 
values for the color under the explorer cursor will be displayed in these three 
text fields.&nbsp; Also, the small square immediately to the right of the text 
fields in the red panel will show the color under the explorer cursor.</p>
<p><font color="#FF0000"><b>The skater has brown hair</b></font></p>
<p>For 
example, Figure 8 shows the result of clicking the <b>Get Color</b> button in 
the GUI while the 
explorer cursor <i>(crosshair)</i> is in the skater's hair.</p><p>
 <b><a name="Figure_8">Figure 8</a>. Illustration of the Get Color button 
	behavior. </b>
<table border="0" cols="1" bgcolor="#FEFFF0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349i.jpg" width="473" height="610"></pre></td></tr></tbody></table></p><p>
<font color="#FF0000"><b>Information matches between the two displays</b></font></p>
<p>
As you would expect, the color values shown in the text fields in the red panel 
in the GUI and the color 
of the square to their right match the information in the upper portion of the 
explorer window.</p>
<p>
<font color="#FF0000"><b>The New Pixel Color values</b></font></p>
<p>The color of a pixel in the image is changed <i>(or at least re-written)</i> 
by clicking the button labeled <b>Update Color</b> in the GUI.</p>
<p>The three text fields in the green panel in the GUI are used to store the 
red, green, and blue color values that will be deposited into the 
currently-selected pixel in the explorer window when the user clicks the <b>
Update Color</b> button in the GUI.</p>
<p><font color="#FF0000"><b>
<a name="Several_ways_to_establish_new_color_values">Several ways to establish 
new color values</a></b></font></p>
<p>There are several ways that the values in these three text fields can be 
established.&nbsp; For example, the user can simply type numeric values into the 
text fields as shown in Figure 9.</p><p>
 <b><a name="Figure_9">Figure 9</a>. Result of entering values into the New 
	Pixel Color fields. </b>
<table border="0" cols="1" bgcolor="#FEFFF0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349j.jpg" width="473" height="229"></pre></td></tr></tbody></table></p><p>
I manually entered the values 255, 51, and 204 into the three text fields in the 
green panel in Figure 9.&nbsp; This caused the square immediately to the right 
of the text fields to take on the color specified by the RGB values.&nbsp; 
If I were to click the <b>Update Color</b> button at this point, the pixel under 
the cursor in the explorer window would be changed to the color shown.</p>
<p><font color="#FF0000"><b>The Copy Color button</b></font></p>
<p>Another way to establish <b>New Pixel Color</b> values in the text fields in 
the green GUI panel is by clicking the <b>Copy Color</b> button.</p>
<p>I showed you <a href="#If_you_place_the_cursor">earlier</a> that clicking the <b>Get Color</b> button causes the 
color under the explorer cursor to be deposited into the text fields in the red 
panel in the GUI.&nbsp; Clicking the <b>Copy Color</b> button causes those 
values to be copied into the three text fields in the green panel.</p>
<p><font color="#FF0000"><b>Modify color but stay within the same family of 
colors</b></font></p>
<p>This capability is 
useful for modifying the color of a pixel in the explorer window while staying 
within the same family of colors.</p>
<p>For example, that there is a blue highlight in each eye in Figure 8.&nbsp; 
Suppose we wanted to make those highlights a brighter shade of blue.&nbsp; Four 
pixels make up the highlights, two in each eye.&nbsp; We could accomplish this by 
clicking the following sequence of buttons once for 
<a name="each_of_the_four_pixels:">each of the four pixels:</a></p>
<ul>
	<li>Get Color</li>
	<li>Copy Color</li>
	<li>Brighter Color</li>
	<li>Update Color</li>
</ul>
<p>The results of doing this are shown in Figure 10.</p>
<p>
 <b><a name="Figure_10">Figure 10</a>. Result of brightening eyeball highlights. </b>
<table border="0
" cols="1" bgcolor="#FEFFF0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349k.jpg" width="409" height="382"></pre></td></tr></tbody></table></p><p>
<font color="#FF0000"><b>Compare Figure 10 with Figure 8</b></font></p>
<p>
If you compare Figure 10 with Figure 8, you should see that the 
blue highlights in the skater's eyes in Figure 10 are a brighter shade of blue 
than in Figure 8.</p>
<p><font color="#FF0000"><b>Removal of moles, pimples, and other blemishes</b></font></p>
<p>Another good use for the <b>Copy Color</b> button would be in the removal of 
moles, pimples, and other skin blemishes from photographs.&nbsp; In this case, 
you could position the explorer cursor on neighboring unblemished skin and click 
the following buttons in sequence:</p>
<ul>
	<li>Get Color</li>
	<li>Copy Color</li>
</ul>
<p>Then you could use the controls in the explorer window to position the cursor 
in the blemished portion of skin and click the <b>Update Color</b> button in the 
GUI.&nbsp; 
Using this approach, you could <i>&quot;paint over&quot;</i> a skin blemish, one 
pixel at a time, using the 
color of the nearest patch of unblemished skin.</p>
<p><font color="#FF0000"><b>The Write File button</b></font></p>
<p>You already know what the button labeled <b>Update Color</b> is used for, so 
I will move along to the button labeled <b>Write File</b>.</p>
<p>When the program first starts running, it copies the input image 
file into an output file of type bmp as described earlier.&nbsp; When you 
terminate the program, the final state of the image is written into that output 
file.&nbsp; At any point during the editing process, you can click the <b>Write 
File</b> button to cause the current state of the image to be written into the 
output file.&nbsp; For example, if you would like to save an intermediate 
version of the image, click the <b>Write File</b> button.&nbsp; Then use 
operating system features to make a copy of the file in its current state.</p>
<p><font color="#FF0000"><b>The Quit button</b></font></p>
<p>Clicking the large X in the upper-right corner of the explorer window has no effect because one of the modifications that I made to the <b>
PictureExplorer</b> class was to disable that button.</p>
<p>However, clicking the large X in the upper-right corner of the GUI, or 
clicking the button labeled <b>Quit</b>, causes the current state of the 
image to be written into the output file described earlier and causes the program to terminate.</p>
<p><font color="#FF0000"><b>Buttons on the yellow panel</b></font></p>
<p>As I mentioned <a href="#Several_ways_to_establish_new_color_values">earlier</a>, there are 
several different ways to cause color 
component values to be entered into the text fields on the green panel.&nbsp; If 
you click any of the five buttons labeled <b>Red</b>, <b>Green</b>, <b>Blue</b>,
<b>White</b>, and <b>Black</b> on the yellow panel, the color values for the 
corresponding color will be written into the three text fields on the green 
panel.&nbsp; For 
example, if you want to change the color of a pixel underneath the cursor in the 
explorer window to blue, just click the following two buttons in sequence:</p>
<ul>
	<li>Blue</li>
	<li>Update Color</li>
</ul>
<p><font color="#FF0000"><b>The button labeled Choose a Color</b></font></p>
<p>Most of us don't have the color component values for very many different 
colors stored in our heads.&nbsp; Therefore, we need some help in choosing a 
color and getting the color component values for that color.&nbsp; That is the 
purpose of the button labeled <b>Choose a Color</b>.</p>
<p>When you click the button labeled <b>Choose a Color</b>, a standard Java 
color-chooser dialog opens as shown in Figure 11.</p><p>
 <b><a name="Figure_11">Figure 11</a>. A standard Java color-chooser dialog. </b>
<table border="0" cols="1" bgcolor="#FEFFF0" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java349l.jpg" width="438" height="409"></pre></td></tr></tbody></table></p><p>
<font color="#FF0000"><b>A pre-selected color</b></font></p>
<p>
When the color-chooser dialog opens, the color defined by the text fields in the red panel of 
the GUI has been selected.&nbsp; For example, the dialog shown in Figure 11 
corresponds to the state of the image and the GUI in Figure 8.&nbsp; As a 
result, the dialog has opened with the color of the skater's hair already 
selected.</p>
<p><font color="#FF0000"><b>Different ways to select a color</b></font></p>
<p>The color-chooser dialog provides three tabs, each of which provides a 
different way to select a color.&nbsp; When the user clicks the OK button in the 
dialog, the 
color component values for the selected color are deposited into the text fields 
in the green panel of the GUI, ready to be deposited under the explorer cursor.&nbsp; 
This provides a different way to begin with the color of a pixel and use that 
color to select a new related color for the pixel.</p>
<p><font color="#FF0000"><b>The Darker Color and Brighter Color buttons</b></font></p>
<p>The <b>Color</b> class of the standard Java library provides two methods 
named <b>darker</b> and <b>brighter</b> that can be used to create darker and 
brighter versions of a specified color.&nbsp; Clicking the <b>Darker Color</b> 
button or the <b>Brighter Color</b> button causes the corresponding method of 
the <b>Color</b> class to be applied to the color component values in the text 
fields in the green panel.&nbsp; That is why I used the <b>Brighter Color</b> 
button <a href="#each_of_the_four_pixels:">earlier</a> to replace the blue highlights in the skater's eyes with a 
brighter shade of blue.</p><center>
<h2><a name="Run the program"></a>Run the program</h2></center><p>I encourage you to copy the code from 
Listing 1 
and Listing 2, compile 
the code, and execute it.&nbsp; Make certain that the compiled version of the <b>
PictureExplorer</b> class is either in the directory with your other class 
files, or at least is on the classpath ahead of the corresponding class file in 
Ericson's multimedia library.</p>
<p>Experiment with the code, making changes, and 
observing the results of your changes.&nbsp; Think of ways to improve the 
usefulness of the program.&nbsp; Make certain that you can explain why 
your changes behave as they do.</p><h2 align="center"><a name="Summary">Summary</a></h2><p>
In this program, I introduced you to a new Java program that can be used to edit 
the pixels in an image on a pixel-by-pixel basis.</p>
<h2 align="center"><a name="Whats Next">What's next?</a></h2><p>In the next 
lesson, you will learn about color distance, projecting 3D coordinates onto a 2D display plane, 
and edge detection. Understanding these concepts will help you to better understand modern 
image processing.</p><h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a href="http://coweb.cc.gatech.edu/mediaComp-plan/101">Media 
	Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a href="http://drjava.sourceforge.net/">DrJava</a> download site</li>
	<li><a href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, the JavaPLT 
	group at Rice University</a></li>
	<li><a href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava Open Source 
	License</a></li>
	<li><a href="http://www.developer.com/java/article.php/1440571">The Essence 
	of OOP using Java, The this and super Keywords</a></li>
	<li><font color="#000000">
	<a href="http://www.dickbaldwin.com/java/Java058.htm">Threads of Control</a></font></li>
	<li><a href="http://java.sun.com/products/jfc/tsc/articles/painting/">
	Painting in AWT and Swing</a></li>
	<li><a href="http://en.wikipedia.org/wiki/Turtle_graphics/">Wikipedia Turtle 
	Graphics</a></li>
	<li><a href="http://www.devx.com/tips/Tip/5809">IsA or HasA</a></li>
	<li><a href="http://www.vectorcad3d.com/support/lathetutorial.htm">Vector 
	Cad-Cam XI Lathe Tutorial</a></li>
	<li><a href="http://www.dickbaldwin.com/java/Java200.htm">200000</a> 
	Implementing the Model-View-Controller Paradigm using Observer and 
	Observable&nbsp; </li>
	<li><a href="http://www.dickbaldwin.com/java/Java300.htm">300</a> Java 2D 
	Graphics, Nested Top-Level Classes and Interfaces</li>
	<li><a href="http://www.dickbaldwin.com/java/Java302.htm">302</a> Java 2D 
	Graphics, The Point2D Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java304.htm">304</a> Java 2D 
	Graphics, The Graphics2D Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java306.htm">306</a> Java 2D 
	Graphics, Simple Affine Transforms</li>
	<li><a href="http://www.dickbaldwin.com/java/Java308.htm">308</a> Java 2D 
	Graphics, The Shape Interface, Part 1</li>
	<li><a href="http://www.dickbaldwin.com/java/Java310.htm">310</a> Java 2D 
	Graphics, The Shape Interface, Part 2</li>
	<li><a href="http://www.dickbaldwin.com/java/Java312.htm">312</a> Java 2D 
	Graphics, Solid Color Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java314.htm">314</a> Java 2D 
	Graphics, Gradient Color Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java316.htm">316</a> Java 2D 
	Graphics, Texture Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java318.htm">318</a> Java 2D 
	Graphics, The Stroke Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java320.htm">320</a> Java 2D 
	Graphics, The Composite Interface and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java322.htm">322</a> Java 2D 
	Graphics, The Composite Interface, GradientPaint, and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java324.htm">324</a> Java 2D 
	Graphics, The Color Constructors and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java506.htm">506</a> JavaBeans, 
	Introspection</li>
	<li><a href="http://www.developer.com/java/other/article.php/2114451">2100</a> 
	Understanding Properties in Java and C#</li>
	<li><a href="http://www.developer.com/java/other/article.php/3495121">2300</a> 
	Generics in J2SE, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3782471">
	340</a> Multimedia Programming with Java, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3788086">
	342</a> Getting Started with the Turtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3791291">
	344</a> Continuing with the SimpleTurtle Class: Multimedia Programming with 
	Java</li>
	<li><a href="http://www.developer.com/java/other/article.php/3793401">346</a> 
	Wrapping Up the SimpleTurtle Class:&nbsp; Multimedia Programming with Java</li>
	<li><a href="http://www.dickbaldwin.com/java/Java348.htm">348</a> The Pen and PathSegment Classes:&nbsp; Multimedia Programming with Java</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2></center>Complete listings of the programs discussed in this lesson are 
provided in
Listing 1 and Listing 2 below.
<p>
<b><a name="Listing_1">Listing 1</a>. Source code for the program named 
PixelEditor01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File PixelEditor01 Copyright 2009 R.G.Baldwin

This program capitalizes on the availability of the
PictureExplorer class released under a Creative Commons
Attribution 3.0 United States License by Barb Ericson
at Georgia Institute of Technology. The program makes it
possible to edit the color of individual pixels in an
image.

More specifically, Ericson's PictureExplorer class was
modified to make certain internals of PictureExplorer
objects accessible to objects instantiated from other
classes. Then a Java GUI was written that makes it
possible to open an image file in a PictureExplorer
object and edit the colors of the individual pixels
in the image using the GUI.

Specify an input image file using only the file name and
extension if the file is in the current directory.
Specify the full path to the file if it is not in the
current directory.

Both jpg and bmp file types are supported as input files.
The output file is a bmp file with the letters BAK
inserted in the file name. It is written in the same
directory as the input file. The input file is not
modified.

The program starts with a GUI in the upper-left corner of
the screen. When the user enters the name of the input
image file, the image is opened in a PictureExplorer
object in the upper-left corner of the screen and the GUI
is moved to a location immediately below the
PictureExplorer object.

From that point on, the user can edit pixels in the image
using the buttons and text fields in the GUI. A Write
button is provided to allow the user to save intermediate
versions of the edited image. Note, however, that each
time the Write button is clicked, the previously written
output file is overwritten. The user should manually save
the intermediate versions if they will be needed later.

The final edited version of the image is automatically
written to the disk when the user clicks the Quit button
or clicks the X in the upper-right corner of the GUI.

Tested using Windows Vista Premium Home Edition,
Java v1.6, and the version of Ericson's multimedia library
contained in bookClasses10-1-07.zip.
*********************************************************/

import java.awt.event.MouseEvent;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowListener;
import java.awt.event.WindowEvent;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JLabel;
import javax.swing.JColorChooser;
import javax.swing.WindowConstants;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;
import javax.swing.border.LineBorder;
import java.awt.Color;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.io.File;

public class PixelEditor01 extends JFrame{

  public static void main(String[] args){
    new PixelEditor01();
  }//end main method
//------------------------------------------------------//

  //Declare a large number of working variables.
  // Initialize some of them.
  PixelEditor01 thisObj = null;
  JFrame explorerFrame = null;
  PictureExplorer explorer = null;
  Picture pix;

  JPanel controlPanel = new JPanel();
  JPanel topPanel = new JPanel();
  JPanel bottomPanel = new JPanel();

  JPanel oldColorPanel = new JPanel();
  JPanel newColorPanel = new JPanel();
  JPanel buttonPanel = new JPanel();

  JPanel swatchPanel = new JPanel();
  JPanel choosePanel = new JPanel();
  JPanel fileNamePanel = new JPanel();

  JPanel oldColorIndicatorPanel = new JPanel();
  JPanel newColorIndicatorPanel = new JPanel();


  JTextField oldRedField = new JTextField("000000");
  JTextField oldGreenField = new JTextField("000000");
  JTextField oldBlueField = new JTextField("000000");

  JTextField newRedField = new JTextField("000");
  JTextField newGreenField = new JTextField("000");
  JTextField newBlueField = new JTextField("000");

  //Pre-load the input file name field with the name of
  // a specific test file.
  JTextField inputFileNameField = new JTextField(
                                  "PixelEditor01.jpg",20);


  JButton getColorButton = new JButton("Get Color");
  JButton copyColorButton = new JButton("Copy Color");
  JButton updateColorButton = new JButton("Update Color");
  JButton writeButton = new JButton("Write File");
  JButton quitButton = new JButton("Quit");

  JButton redButton = new JButton("Red");
  JButton greenButton = new JButton("Green");
  JButton blueButton = new JButton("Blue");
  JButton whiteButton = new JButton("White");
  JButton blackButton = new JButton("Black");
  JButton chooseButton = new JButton("Choose Color");
  JButton darkerButton = new JButton("Darker Color");
  JButton brighterButton = new JButton("Brighter Color");


  //Integer representations of old and new colors
  int oldRedInt = 0;
  int oldGreenInt = 0;
  int oldBlueInt = 0;

  int newRedInt = 0;
  int newGreenInt = 0;
  int newBlueInt = 0;

  //Copies of properties of the PictureExplorer object
  int xIndex = 0;
  int yIndex = 0;
  double zoomFactor = 0;

  String fileName = "no file specified";
  String outputPath = null;
  //----------------------------------------------------//

  public PixelEditor01(){//constructor
    //Construct the GUI.
    controlPanel.setLayout(new BorderLayout());
    controlPanel.add(topPanel,BorderLayout.NORTH);
    controlPanel.add(bottomPanel,BorderLayout.SOUTH);

    topPanel.setLayout(new BorderLayout());
    topPanel.add(oldColorPanel,BorderLayout.NORTH);
    topPanel.add(newColorPanel,BorderLayout.CENTER);
    topPanel.add(buttonPanel,BorderLayout.SOUTH);

    bottomPanel.setLayout(new BorderLayout());
    bottomPanel.add(swatchPanel,BorderLayout.NORTH);
    bottomPanel.add(choosePanel,BorderLayout.CENTER);
    bottomPanel.add(fileNamePanel,BorderLayout.SOUTH);

    oldColorPanel.setBackground(Color.RED);
    oldColorPanel.add(new JLabel("Old Pixel Color"));
    oldColorPanel.add(oldRedField);
    oldColorPanel.add(oldGreenField);
    oldColorPanel.add(oldBlueField);
    oldColorPanel.add(oldColorIndicatorPanel);

    newColorPanel.setBackground(Color.GREEN);
    newColorPanel.add(new JLabel("New Pixel Color"));
    newColorPanel.add(newRedField);
    newColorPanel.add(newGreenField);
    newColorPanel.add(newBlueField);
    newColorPanel.add(newColorIndicatorPanel);

    buttonPanel.setBackground(Color.BLUE);
    buttonPanel.add(getColorButton);
    buttonPanel.add(copyColorButton);
    buttonPanel.add(updateColorButton);
    buttonPanel.add(writeButton);
    buttonPanel.add(quitButton);


    swatchPanel.setBackground(Color.YELLOW);
    swatchPanel.add(redButton);
    swatchPanel.add(greenButton);
    swatchPanel.add(blueButton);
    swatchPanel.add(whiteButton);
    swatchPanel.add(blackButton);


    choosePanel.setBackground(Color.CYAN);
    choosePanel.add(chooseButton);
    choosePanel.add(darkerButton);
    choosePanel.add(brighterButton);


    fileNamePanel.add(new JLabel(
                               "Enter file name here: "));
    fileNamePanel.add(inputFileNameField);


    oldColorIndicatorPanel.setBorder(new LineBorder(
                                          Color.black,1));
    oldColorIndicatorPanel.setPreferredSize(
                                    new Dimension(20,20));


    newColorIndicatorPanel.setBorder(new LineBorder(
                                          Color.black,1));
    newColorIndicatorPanel.setPreferredSize(
                                    new Dimension(20,20));
    paintNewColorIndicator();


    redButton.setBackground(Color.RED);
    greenButton.setBackground(Color.GREEN);
    blueButton.setForeground(Color.YELLOW);
    blueButton.setBackground(Color.BLUE);
    whiteButton.setBackground(Color.WHITE);
    blackButton.setForeground(Color.WHITE);
    blackButton.setBackground(Color.BLACK);


    //Add the controlPanel to the content pane, adjust to
    // the correct size, and set the title.
    getContentPane().add(controlPanel);
    pack();
    setTitle("Copyright 2008,R.G.Baldwin");

    //Disable all user controls except for the text field
    // where the user enters the name of the input file.
    //The user controls will be enabled when the user
    // enters the name of the input file.
    getColorButton.setEnabled(false);
    copyColorButton.setEnabled(false);
    updateColorButton.setEnabled(false);
    writeButton.setEnabled(false);
    quitButton.setEnabled(false);

    redButton.setEnabled(false);
    greenButton.setEnabled(false);
    blueButton.setEnabled(false);
    whiteButton.setEnabled(false);
    blackButton.setEnabled(false);
    chooseButton.setEnabled(false);
    darkerButton.setEnabled(false);
    brighterButton.setEnabled(false);

    oldRedField.setEnabled(false);
    oldGreenField.setEnabled(false);
    oldBlueField.setEnabled(false);

    newRedField.setEnabled(false);
    newGreenField.setEnabled(false);
    newBlueField.setEnabled(false);


    //Make the GUI visible, set the focus, and establish a
    // reference to the GUI object.
    setVisible(true);
    inputFileNameField.requestFocus();
    thisObj = this;

    //--------------------------------------------------//
    //Register listeners on the user input components.
    //--------------------------------------------------//
    getColorButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          oldRedField.setText(explorer.getRValue());
          oldGreenField.setText(explorer.getGValue());
          oldBlueField.setText(explorer.getBValue());

          String oldRedString = oldRedField.getText();
          String oldGreenString = oldGreenField.getText();
          String oldBlueString = oldBlueField.getText();
          oldRedInt = goParseInt(oldRedString.substring(
                            oldRedString.indexOf(':')+2));
          oldGreenInt = goParseInt(
                        oldGreenString.substring(
                          oldGreenString.indexOf(':')+2));
          oldBlueInt = goParseInt(oldBlueString.substring(
                           oldBlueString.indexOf(':')+2));

          oldColorIndicatorPanel.setBackground(
             new Color(oldRedInt,oldGreenInt,oldBlueInt));
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    copyColorButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          newRedField.setText("" + oldRedInt);
          newGreenField.setText("" + oldGreenInt);
          newBlueField.setText("" + oldBlueInt);
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    updateColorButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){

          xIndex = explorer.getXIndex();
          yIndex = explorer.getYIndex();
          zoomFactor = explorer.getZoomFactor();
          String zoomString = "100%";
          if(zoomFactor == 0.25){
            zoomString = "25%";
          }else if(zoomFactor == 0.50){
            zoomString = "50%";
          }else if(zoomFactor == 0.75){
            zoomString = "75%";
          }else if(zoomFactor == 1.0){
            zoomString = "100%";
          }else if(zoomFactor == 1.5){
            zoomString = "150%";
          }else if(zoomFactor == 2.0){
            zoomString = "200%";
          }else if(zoomFactor == 5.0){
            zoomString = "500%";
          }else{
            zoomString = "100%";//in case no match
          }//end else

          int newRedInt = goParseInt(
                                   newRedField.getText());
          int newGreenInt = goParseInt(
                                 newGreenField.getText());
          int newBlueInt = goParseInt(
                                  newBlueField.getText());

          if(!((newRedInt &gt;= 0) && (newRedInt &lt;= 255))){
            newRedInt = 0;
            newRedField.setText("Err");
          }//end if

          Color newColor = new Color(
                        newRedInt,newGreenInt,newBlueInt);
          pix.getPixel(xIndex,yIndex).setColor(newColor);

          //Dispose of the existing explorer and create a
          // new one.
          explorerFrame.dispose();

          explorer = new PictureExplorer(
                                        new Picture(pix));
          //Get ref to the new frame
          explorerFrame = explorer.getFrame();
          explorerFrame.setDefaultCloseOperation(
                     WindowConstants.DO_NOTHING_ON_CLOSE);

          //Now set the state of the new explorer.
          //Simulate a mouse pressed event in the picture
          // to set the cursor and the text in the
          // coordinate fields.
          explorer.mousePressed(new MouseEvent(
                           new JButton("dummy component"),
                           MouseEvent.MOUSE_PRESSED,
                           (long)0,
                           0,
                           xIndex,
                           yIndex,
                           0,
                           false));

          //Simulate an action event on the zoom menu to
          // set the zoom.
          explorer.actionPerformed(new ActionEvent(
                             explorer,
                             ActionEvent.ACTION_PERFORMED,
                             zoomString));


        }//end actionPerformed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    redButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          newRedField.setText("255");
          newGreenField.setText("000");
          newBlueField.setText("000");
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    greenButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          newRedField.setText("000");
          newGreenField.setText("255");
          newBlueField.setText("000");
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    blueButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          newRedField.setText("000");
          newGreenField.setText("000");
          newBlueField.setText("255");
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    whiteButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          newRedField.setText("255");
          newGreenField.setText("255");
          newBlueField.setText("255");
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    blackButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          newRedField.setText("000");
          newGreenField.setText("000");
          newBlueField.setText("000");
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    chooseButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          Color selColor = JColorChooser.showDialog(
                    chooseButton,"Choose color",new Color(
                       oldRedInt,oldGreenInt,oldBlueInt));
          if(selColor != null){
            //Don't change the color if the user cancels
            // out.
            newRedField.setText("" + selColor.getRed());
            newGreenField.setText(
                                "" + selColor.getGreen());
            newBlueField.setText("" + selColor.getBlue());
          }//end if
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    writeButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
            pix.write(outputPath);
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    darkerButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          Color color = new Color(
               newRedInt,newGreenInt,newBlueInt).darker();
          newRedField.setText("" + color.getRed());
          newGreenField.setText("" + color.getGreen());
          newBlueField.setText("" + color.getBlue());
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    brighterButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          Color color = new Color(
             newRedInt,newGreenInt,newBlueInt).brighter();
          newRedField.setText("" + color.getRed());
          newGreenField.setText("" + color.getGreen());
          newBlueField.setText("" + color.getBlue());
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    //Note that the Quit button and the JFrame close
    // button are designed to behave the same way: save
    // the file and terminate the program.
    quitButton.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          pix.write(outputPath);
          System.exit(0);
        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    thisObj.addWindowListener(
      new WindowAdapter(){
        public void windowClosing(WindowEvent e){
          pix.write(outputPath);
          System.exit(0);
        }//end windowClosing
      }//end new WindowAdapter
    );//end addWindowListener
    //--------------------------------------------------//

    inputFileNameField.addActionListener(
      new ActionListener(){
        public void actionPerformed(ActionEvent e){
          fileName = inputFileNameField.getText();

          pix = new Picture(fileName);

          //Because color corruption can occur when
          // writing jpg files in Java, the following code
          // makes a copy of the input file as a bmp file.
          // All further processing and writing is done in
          // bmp format. The characters BAK are
          // inserted in the output file immediately
          // before the extension. The final output is a
          // bmp file, which can be converted back to a
          // jpg file using an image-utility program such
          // as Lview.
          String inputPath = new File(fileName).
                                        getAbsolutePath();
          int posDot = inputPath.lastIndexOf('.');
          outputPath = inputPath.substring(0,posDot)
                                              + "BAK.bmp";
          pix.write(outputPath);

          explorer =
                    new PictureExplorer(new Picture(pix));
          explorerFrame = explorer.getFrame();
          explorerFrame.setDefaultCloseOperation(
                     WindowConstants.DO_NOTHING_ON_CLOSE);
          thisObj.setDefaultCloseOperation(
                     WindowConstants.DO_NOTHING_ON_CLOSE);

          //Cause the GUI to be located immediately below
          // the PictureExplorer object.
          setLocation(0,explorerFrame.getHeight());

          getColorButton.setEnabled(true);
          copyColorButton.setEnabled(true);
          updateColorButton.setEnabled(true);
          writeButton.setEnabled(true);
          quitButton.setEnabled(true);

          redButton.setEnabled(true);
          greenButton.setEnabled(true);
          blueButton.setEnabled(true);
          whiteButton.setEnabled(true);
          blackButton.setEnabled(true);
          chooseButton.setEnabled(true);
          darkerButton.setEnabled(true);
          brighterButton.setEnabled(true);

          oldRedField.setEnabled(true);
          oldGreenField.setEnabled(true);
          oldBlueField.setEnabled(true);

          newRedField.setEnabled(true);
          newGreenField.setEnabled(true);
          newBlueField.setEnabled(true);

        }//end action performed
      }//end newActionListener
    );//end addActionListener
    //--------------------------------------------------//

    newRedField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){}

        public void removeUpdate(DocumentEvent e){
          try{
            newRedInt = Integer.parseInt(
                                   newRedField.getText());
            if((newRedInt &gt;= 0) && (newRedInt &lt;= 255)){
              paintNewColorIndicator();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            newRedInt = Integer.parseInt(
                                   newRedField.getText());
            if((newRedInt &gt;= 0) && (newRedInt &lt;= 255)){
              paintNewColorIndicator();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//

    newGreenField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){}

        public void removeUpdate(DocumentEvent e){
          try{
            newGreenInt = Integer.parseInt(
                                 newGreenField.getText());
            if((newGreenInt &gt;= 0) && (newGreenInt &lt;= 255))
            {
              paintNewColorIndicator();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            newGreenInt = Integer.parseInt(
                                 newGreenField.getText());
            if((newGreenInt &gt;= 0) && (newGreenInt &lt;= 255))
            {
              paintNewColorIndicator();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//
    newBlueField.getDocument().addDocumentListener(
      new DocumentListener(){
        public void changedUpdate(DocumentEvent e){}

        public void removeUpdate(DocumentEvent e){
          try{
            newBlueInt = Integer.parseInt(
                                  newBlueField.getText());
            if((newBlueInt &gt;= 0) && (newBlueInt &lt;= 255)){
              paintNewColorIndicator();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end removeUpdate

        public void insertUpdate(DocumentEvent e){
          try{
            newBlueInt = Integer.parseInt(
                                  newBlueField.getText());
            if((newBlueInt &gt;= 0) && (newBlueInt &lt;= 255)){
              paintNewColorIndicator();
            }//end if
          }catch(Exception ex){
            //do nothing on exception
          }//end catch
        }//end insertUpdate

      }//end new DocumentListener
    );//end addDocumentListener
    //--------------------------------------------------//
  }//end constructor
  //----------------------------------------------------//

  //The purpose of this method is to color a swatch next
  // to the new RGB values.
  void paintNewColorIndicator(){
    newColorIndicatorPanel.setBackground(
             new Color(newRedInt,newGreenInt,newBlueInt));
  }//end paintNewColorIndicator

  //----------------------------------------------------//

  //The purpose of this method is to absorb exceptions
  // that may be thrown by the parseInt method. In the
  // event that an exception is thrown, this method simply
  // returns an int value of 0;
  private int goParseInt(String string){
    int result = 0;
    try{
      result = Integer.parseInt(string);
    }catch(Exception e){
      result = 0;
    }//end catch
    return result;
  }//end goParseInt
  //----------------------------------------------------//

}//end class PixelEditor01</pre></td></tr></tbody></table></p><p>&nbsp;</p><p>
<b><a name="Listing_2">Listing 2</a>. Source code for the PictureExplorer class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.image.*;
import javax.swing.border.*;

/**
 * Displays a picture and lets you explore the picture by
 * displaying the x, y, red, green, and blue values of the
 * pixel at the cursor when you click a mouse button or
 * press and hold a mouse button while moving the cursor.
 * It also lets you zoom in or out.  You can also type in
 * a x and y value to see the color at that location.
 *
 * Originally created for the Jython Environment for
 * Students (JES).
 * Modified to work with DrJava by Barbara Ericson
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Keith McDermottt, gte047w@cc.gatech.edu
 * @author Barb Ericson ericson@cc.gatech.edu
 */

/*
12/24/08 Modified by Baldwin to add get methods to cause
the following values to be accessible from outside the
object:

int xIndex
int yIndex
String rValue text
String gValue text
String bValue text
double zoomFactor
JFrame pictureFrame

Also disabled the call to setDefaultCloseOperation
Also made minor formatting changes to force the code to
fit within the width of this narrow publication format.
*/

public class PictureExplorer implements
       MouseMotionListener, ActionListener, MouseListener{

 // current x and y index
 private int xIndex = 0;
 private int yIndex = 0;

 //Main gui variables
 private JFrame pictureFrame;
 private JScrollPane scrollPane;

 //information bar variables
 private JLabel xLabel;
 private JButton xPrevButton;
 private JButton yPrevButton;
 private JButton xNextButton;
 private JButton yNextButton;
 private JLabel yLabel;
 private JTextField xValue;
 private JTextField yValue;
 private JLabel rValue;
 private JLabel gValue;
 private JLabel bValue;
 private JLabel colorLabel;
 private JPanel colorPanel;

 // menu components
 private JMenuBar menuBar;
 private JMenu zoomMenu;
 private JMenuItem twentyFive;
 private JMenuItem fifty;
 private JMenuItem seventyFive;
 private JMenuItem hundred;
 private JMenuItem hundredFifty;
 private JMenuItem twoHundred;
 private JMenuItem fiveHundred;

 /** The picture being explored */
 private DigitalPicture picture;

 /** The image icon used to display the picture */
 private ImageIcon scrollImageIcon;

 /** The image display */
 private ImageDisplay imageDisplay;

 /** the zoom factor (amount to zoom) */
 private double zoomFactor;

 /** the number system to use, 0 means starting at 0,
  *1 means starting at 1 */
 private int numberBase=0;

 /**
  * Public constructor
  * @param picture the picture to explore
  */
 public PictureExplorer(DigitalPicture picture)
 {
   // set the fields
   this.picture=picture;
   zoomFactor=1;

   // create the window and set things up
   createWindow();
 }

//===Methods added by Baldwin on 12/24/08===============//
  /**
   *Method to get the xIndex value.
   */
  public int getXIndex(){
    return xIndex;
  }//end getXIndex

  /**
   *Method to get the yIndex value.
   */
  public int getYIndex(){
    return yIndex;
  }//end getYIndex

  /**
   *Method to get the rValue text.
   */
  public String getRValue(){
    return rValue.getText();
  }//end getRValue

  /**
   *Method to get the gValue text.
   */
  public String getGValue(){
    return gValue.getText();
  }//end getGValue

  /**
   *Method to get the brValue text.
   */
  public String getBValue(){
    return bValue.getText();
  }//end getBValue

  /**
   *Method to get the zoomFactor value.
   */
  public double getZoomFactor(){
    return zoomFactor;
  }//end getZoomFactor

  /**
   *Method to get a reference to the frame
   */
  public JFrame getFrame(){
    return pictureFrame;
  }//end getFrame()

//===End methods added by Baldwin on 12/24/08===========//

 /**
  * Changes the number system to start at one
  */
 public void changeToBaseOne()
 {
   numberBase=1;
 }

 /**
  * Set the title of the frame
  *@param title the title to use in the JFrame
  */
 public void setTitle(String title)
 {
   pictureFrame.setTitle(title);
 }

 /**
  * Method to create and initialize the picture frame
  */
 private void createAndInitPictureFrame()
 {
   pictureFrame = new JFrame(); // create the JFrame
   // allow the user to resize it
   pictureFrame.setResizable(true);
   pictureFrame.getContentPane().setLayout(
                 new BorderLayout()); // use border layout
// pictureFrame.setDefaultCloseOperation(
//  JFrame.DISPOSE_ON_CLOSE); // when close stop
   pictureFrame.setTitle(picture.getTitle());
   PictureExplorerFocusTraversalPolicy newPolicy =
                new PictureExplorerFocusTraversalPolicy();
   pictureFrame.setFocusTraversalPolicy(newPolicy);

 }

 /**
  * Method to create the menu bar, menus, and menu items
  */
 private void setUpMenuBar()
 {
   //create menu
   menuBar = new JMenuBar();
   zoomMenu = new JMenu("Zoom");
   twentyFive = new JMenuItem("25%");
   fifty = new JMenuItem("50%");
   seventyFive = new JMenuItem("75%");
   hundred = new JMenuItem("100%");
   hundred.setEnabled(false);
   hundredFifty = new JMenuItem("150%");
   twoHundred = new JMenuItem("200%");
   fiveHundred = new JMenuItem("500%");

   // add the action listeners
   twentyFive.addActionListener(this);
   fifty.addActionListener(this);
   seventyFive.addActionListener(this);
   hundred.addActionListener(this);
   hundredFifty.addActionListener(this);
   twoHundred.addActionListener(this);
   fiveHundred.addActionListener(this);

   // add the menu items to the menus
   zoomMenu.add(twentyFive);
   zoomMenu.add(fifty);
   zoomMenu.add(seventyFive);
   zoomMenu.add(hundred);
   zoomMenu.add(hundredFifty);
   zoomMenu.add(twoHundred);
   zoomMenu.add(fiveHundred);
   menuBar.add(zoomMenu);

   // set the menu bar to this menu
   pictureFrame.setJMenuBar(menuBar);
 }

 /**
  * Create and initialize the scrolling image
  */
 private void createAndInitScrollingImage()
 {
   scrollPane = new JScrollPane();

   BufferedImage bimg = picture.getBufferedImage();
   imageDisplay = new ImageDisplay(bimg);
   imageDisplay.addMouseMotionListener(this);
   imageDisplay.addMouseListener(this);
   imageDisplay.setToolTipText("Click a mouse button on"
               + " a pixel to see the pixel information");
   scrollPane.setViewportView(imageDisplay);
   pictureFrame.getContentPane().add(
                         scrollPane, BorderLayout.CENTER);
 }

 /**
  * Creates the JFrame and sets everything up
  */
 private void createWindow()
 {
   // create the picture frame and initialize it
   createAndInitPictureFrame();

   // set up the menu bar
   setUpMenuBar();

   //create the information panel
   createInfoPanel();

   //creates the scrollpane for the picture
   createAndInitScrollingImage();

   // show the picture in the frame at the size it needs
   // to be
   pictureFrame.pack();
   pictureFrame.setVisible(true);
 }

 /**
  * Method to set up the next and previous buttons for the
  * pixel location information
  */
 private void setUpNextAndPreviousButtons()
 {
   // create the image icons for the buttons
   Icon prevIcon = new ImageIcon(
         SoundExplorer.class.getResource("leftArrow.gif"),
                                 "previous index");
   Icon nextIcon = new ImageIcon(
        SoundExplorer.class.getResource("rightArrow.gif"),
                                 "next index");
   // create the arrow buttons
   xPrevButton = new JButton(prevIcon);
   xNextButton = new JButton(nextIcon);
   yPrevButton = new JButton(prevIcon);
   yNextButton = new JButton(nextIcon);

   // set the tool tip text
   xNextButton.setToolTipText(
                       "Click to go to the next x value");
   xPrevButton.setToolTipText(
                   "Click to go to the previous x value");
   yNextButton.setToolTipText(
                       "Click to go to the next y value");
   yPrevButton.setToolTipText(
                   "Click to go to the previous y value");

   // set the sizes of the buttons
   int prevWidth = prevIcon.getIconWidth() + 2;
   int nextWidth = nextIcon.getIconWidth() + 2;
   int prevHeight = prevIcon.getIconHeight() + 2;
   int nextHeight = nextIcon.getIconHeight() + 2;
   Dimension prevDimension =
                      new Dimension(prevWidth,prevHeight);
   Dimension nextDimension =
                     new Dimension(nextWidth, nextHeight);
   xPrevButton.setPreferredSize(prevDimension);
   yPrevButton.setPreferredSize(prevDimension);
   xNextButton.setPreferredSize(nextDimension);
   yNextButton.setPreferredSize(nextDimension);

   // handle previous x button press
   xPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex--;
       if (xIndex &lt; 0)
         xIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle previous y button press
   yPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex--;
       if (yIndex &lt; 0)
         yIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next x button press
   xNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex++;
       if (xIndex &gt;= picture.getWidth())
         xIndex = picture.getWidth() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next y button press
   yNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex++;
       if (yIndex &gt;= picture.getHeight())
         yIndex = picture.getHeight() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });
 }

 /**
  * Create the pixel location panel
  * @param labelFont the font for the labels
  * @return the location panel
  */
 public JPanel createLocationPanel(Font labelFont) {

   // create a location panel
   JPanel locationPanel = new JPanel();
   locationPanel.setLayout(new FlowLayout());
   Box hBox = Box.createHorizontalBox();

   // create the labels
   xLabel = new JLabel("X:");
   yLabel = new JLabel("Y:");

   // create the text fields
   xValue = new JTextField(
                 Integer.toString(xIndex + numberBase),6);
   xValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
       displayPixelInformation(
                       xValue.getText(),yValue.getText());
     }
   });
   yValue = new JTextField(
                 Integer.toString(yIndex + numberBase),6);
   yValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
      displayPixelInformation(
                       xValue.getText(),yValue.getText());
     }
   });

   // set up the next and previous buttons
   setUpNextAndPreviousButtons();

   // set up the font for the labels
   xLabel.setFont(labelFont);
   yLabel.setFont(labelFont);
   xValue.setFont(labelFont);
   yValue.setFont(labelFont);

   // add the items to the vertical box and the box to the
   // panel
   hBox.add(Box.createHorizontalGlue());
   hBox.add(xLabel);
   hBox.add(xPrevButton);
   hBox.add(xValue);
   hBox.add(xNextButton);
   hBox.add(Box.createHorizontalStrut(10));
   hBox.add(yLabel);
   hBox.add(yPrevButton);
   hBox.add(yValue);
   hBox.add(yNextButton);
   locationPanel.add(hBox);
   hBox.add(Box.createHorizontalGlue());

   return locationPanel;
 }

 /**
  * Create the color information panel
  * @param labelFont the font to use for labels
  * @return the color information panel
  */
 private JPanel createColorInfoPanel(Font labelFont)
 {
   // create a color info panel
   JPanel colorInfoPanel = new JPanel();
   colorInfoPanel.setLayout(new FlowLayout());

   // get the pixel at the x and y
   Pixel pixel = new Pixel(picture,xIndex,yIndex);

   // create the labels
   rValue = new JLabel("R: " + pixel.getRed());
   gValue = new JLabel("G: " + pixel.getGreen());
   bValue = new JLabel("B: " + pixel.getBlue());

   // create the sample color panel and label
   colorLabel = new JLabel("Color at location: ");
   colorPanel = new JPanel();
   colorPanel.setBorder(new LineBorder(Color.black,1));

   // set the color sample to the pixel color
   colorPanel.setBackground(pixel.getColor());

   // set the font
   rValue.setFont(labelFont);
   gValue.setFont(labelFont);
   bValue.setFont(labelFont);
   colorLabel.setFont(labelFont);
   colorPanel.setPreferredSize(new Dimension(25,25));

   // add items to the color information panel
   colorInfoPanel.add(rValue);
   colorInfoPanel.add(gValue);
   colorInfoPanel.add(bValue);
   colorInfoPanel.add(colorLabel);
   colorInfoPanel.add(colorPanel);

   return colorInfoPanel;
 }

 /**
  * Creates the North JPanel with all the pixel location
  * and color information
  */
 private void createInfoPanel()
 {
   // create the info panel and set the layout
   JPanel infoPanel = new JPanel();
   infoPanel.setLayout(new BorderLayout());

   // create the font
   Font largerFont = new Font(
                       infoPanel.getFont().getName(),
                       infoPanel.getFont().getStyle(),14);

   // create the pixel location panel
   JPanel locationPanel = createLocationPanel(largerFont);

   // create the color informaiton panel
   JPanel colorInfoPanel =
                         createColorInfoPanel(largerFont);

   // add the panels to the info panel
   infoPanel.add(BorderLayout.NORTH,locationPanel);
   infoPanel.add(BorderLayout.SOUTH,colorInfoPanel);

   // add the info panel
   pictureFrame.getContentPane().add(
                            BorderLayout.NORTH,infoPanel);
 }

 /**
  * Method to check that the current position is in the
  * viewing area and if not scroll to center the current
  * position if possible
  */
 public void checkScroll()
 {
   // get the x and y position in pixels
   int xPos = (int) (xIndex * zoomFactor);
   int yPos = (int) (yIndex * zoomFactor);

   // only do this if the image is larger than normal
   if (zoomFactor &gt; 1) {

     // get the rectangle that defines the current view
     JViewport viewport = scrollPane.getViewport();
     Rectangle rect = viewport.getViewRect();
     int rectMinX = (int) rect.getX();
     int rectWidth = (int) rect.getWidth();
     int rectMaxX = rectMinX + rectWidth - 1;
     int rectMinY = (int) rect.getY();
     int rectHeight = (int) rect.getHeight();
     int rectMaxY = rectMinY + rectHeight - 1;

     // get the maximum possible x and y index
     int maxIndexX = (int) (picture.getWidth()
                            * zoomFactor) - rectWidth - 1;
     int maxIndexY = (int) (picture.getHeight()
                           * zoomFactor) - rectHeight - 1;

     // calculate how to position the current position in
     // the middle of the viewing area
     int viewX = xPos - (int) (rectWidth / 2);
     int viewY = yPos - (int) (rectHeight / 2);

     // reposition the viewX and viewY if outside allowed
     // values
     if (viewX &lt; 0)
       viewX = 0;
     else if (viewX &gt; maxIndexX)
       viewX = maxIndexX;
     if (viewY &lt; 0)
       viewY = 0;
     else if (viewY &gt; maxIndexY)
       viewY = maxIndexY;

     // move the viewport upper left point
     viewport.scrollRectToVisible(
         new Rectangle(viewX,viewY,rectWidth,rectHeight));
   }
 }

 /**
  * Zooms in the on picture by scaling the image.
  * It is extremely memory intensive.
  * @param factor the amount to zoom by
  */
 public void zoom(double factor)
 {
   // save the current zoom factor
   zoomFactor = factor;

   // calculate the new width and height and get an image
   // that size
   int width = (int) (picture.getWidth()*zoomFactor);
   int height = (int) (picture.getHeight()*zoomFactor);
   BufferedImage bimg = picture.getBufferedImage();

   // set the scroll image icon to the new image
   imageDisplay.setImage(bimg.getScaledInstance(
                     width, height, Image.SCALE_DEFAULT));
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
   imageDisplay.revalidate();
   checkScroll();  // check if need to reposition scroll
 }

 /**
  * Repaints the image on the scrollpane.
  */
 public void repaint()
 {
   pictureFrame.repaint();
 }

 //****************************************//
 //               Event Listeners          //
 //****************************************//

 /**
  * Called when the mouse is dragged (button held down and
  * moved)
  * @param e the mouse event
  */
 public void mouseDragged(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method to check if the given x and y are in the
  * picture
  * @param x the horiztonal value
  * @param y the vertical value
  * @return true if the x and y are in the picture and
  * false otherwise
  */
 private boolean isLocationInPicture(int x, int y)
 {
   boolean result = false; // the default is false
   if (x &gt;= 0 && x &lt; picture.getWidth() &&
       y &gt;= 0 && y &lt; picture.getHeight())
     result = true;

   return result;
 }

 /**
  * Method to display the pixel information from the
  * passed x and y but also converts x and y from strings
  * @param xString the x value as a string from the user
  * @param yString the y value as a string from the user
  */
 public void displayPixelInformation(
                           String xString, String yString)
 {
   int x = -1;
   int y = -1;
   try {
     x = Integer.parseInt(xString);
     x = x - numberBase;
     y = Integer.parseInt(yString);
     y = y - numberBase;
   } catch (Exception ex) {
   }

   if (x &gt;= 0 && y &gt;= 0) {
     displayPixelInformation(x,y);
   }
 }

 /**
  * Method to display pixel information for the passed x
  * and y
  * @param pictureX the x value in the picture
  * @param pictureY the y value in the picture
  */
 private void displayPixelInformation(
                               int pictureX, int pictureY)
 {
   // check that this x and y is in range
   if (isLocationInPicture(pictureX, pictureY))
   {
     // save the current x and y index
     xIndex = pictureX;
     yIndex = pictureY;

     // get the pixel at the x and y
     Pixel pixel = new Pixel(picture,xIndex,yIndex);

     // set the values based on the pixel
     xValue.setText(Integer.toString(xIndex+numberBase));
     yValue.setText(Integer.toString(yIndex+numberBase));
     rValue.setText("R: " + pixel.getRed());
     gValue.setText("G: " + pixel.getGreen());
     bValue.setText("B: " + pixel.getBlue());
     colorPanel.setBackground(new Color(pixel.getRed(),
                                        pixel.getGreen(),
                                        pixel.getBlue()));

   }
   else
   {
     clearInformation();
   }

   // notify the image display of the current x and y
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
 }

 /**
  * Method to display pixel information based on a mouse
  * event
  * @param e a mouse event
  */
 private void displayPixelInformation(MouseEvent e)
 {

   // get the cursor x and y
   int cursorX = e.getX();
   int cursorY = e.getY();

   // get the x and y in the original (not scaled image)
   int pictureX = (int) (cursorX / zoomFactor+numberBase);
   int pictureY = (int) (cursorY / zoomFactor+numberBase);

   // display the information for this x and y
   displayPixelInformation(pictureX,pictureY);

 }

 /**
  * Method to clear the labels and current color and reset
  * the current index to -1
  */
 private void clearInformation()
 {
   xValue.setText("N/A");
   yValue.setText("N/A");
   rValue.setText("R: N/A");
   gValue.setText("G: N/A");
   bValue.setText("B: N/A");
   colorPanel.setBackground(Color.black);
   xIndex = -1;
   yIndex = -1;
 }

 /**
  * Method called when the mouse is moved with no buttons
  * down
  * @param e the mouse event
  */
 public void mouseMoved(MouseEvent e)
 {}

 /**
  * Method called when the mouse is clicked
  * @param e the mouse event
  */
 public void mouseClicked(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method called when the mouse button is pushed down
  * @param e the mouse event
  */
 public void mousePressed(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method called when the mouse button is released
  * @param e the mouse event
  */
 public void mouseReleased(MouseEvent e)
 {
 }

 /**
  * Method called when the component is entered (mouse
  * moves over it)
  * @param e the mouse event
  */
 public void mouseEntered(MouseEvent e)
 {
 }

 /**
  * Method called when the mouse moves over the component
  * @param e the mouse event
  */
 public void mouseExited(MouseEvent e)
 {
 }

 /**
  * Method to enable all menu commands
  */
 private void enableZoomItems()
 {
   twentyFive.setEnabled(true);
   fifty.setEnabled(true);
   seventyFive.setEnabled(true);
   hundred.setEnabled(true);
   hundredFifty.setEnabled(true);
   twoHundred.setEnabled(true);
   fiveHundred.setEnabled(true);
 }

 /**
  * Controls the zoom menu bar
  *
  * @param a the ActionEvent
  */
 public void actionPerformed(ActionEvent a)
 {

   if(a.getActionCommand().equals("Update"))
   {
     this.repaint();
   }

   if(a.getActionCommand().equals("25%"))
   {
     this.zoom(.25);
     enableZoomItems();
     twentyFive.setEnabled(false);
   }

   if(a.getActionCommand().equals("50%"))
   {
     this.zoom(.50);
     enableZoomItems();
     fifty.setEnabled(false);
   }

   if(a.getActionCommand().equals("75%"))
   {
     this.zoom(.75);
     enableZoomItems();
     seventyFive.setEnabled(false);
   }

   if(a.getActionCommand().equals("100%"))
   {
     this.zoom(1.0);
     enableZoomItems();
     hundred.setEnabled(false);
   }

   if(a.getActionCommand().equals("150%"))
   {
     this.zoom(1.5);
     enableZoomItems();
     hundredFifty.setEnabled(false);
   }

   if(a.getActionCommand().equals("200%"))
   {
     this.zoom(2.0);
     enableZoomItems();
     twoHundred.setEnabled(false);
   }

   if(a.getActionCommand().equals("500%"))
   {
     this.zoom(5.0);
     enableZoomItems();
     fiveHundred.setEnabled(false);
   }
 }

 /**
  * Test Main.  It will ask you to pick a file and then
  * show it
  */
 public static void main( String args[])
 {
   Picture p = new Picture(FileChooser.pickAFile());
   PictureExplorer test = new PictureExplorer(p);

 }

 /**
  * Class for establishing the focus for the textfields
  */
 private class PictureExplorerFocusTraversalPolicy
                 extends FocusTraversalPolicy {

        /**
         * Method to get the next component for focus
         */
        public Component getComponentAfter(
                                 Container focusCycleRoot,
                                 Component aComponent) {
            if (aComponent.equals(xValue))
              return yValue;
            else
              return xValue;
        }

        /**
         * Method to get the previous component for focus
         */
         public Component getComponentBefore(
                                 Container focusCycleRoot,
                                 Component aComponent) {
            if (aComponent.equals(xValue))
              return yValue;
            else
              return xValue;
         }

         public Component getDefaultComponent(
                               Container focusCycleRoot) {
            return xValue;
        }

        public Component getLastComponent(
                               Container focusCycleRoot) {
            return yValue;
        }

        public Component getFirstComponent(
                               Container focusCycleRoot) {
            return xValue;
        }
    }

}</pre></td></tr></tbody></table></p><p> &nbsp;</p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2><p>Copyright 2009, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2><b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
