<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Enterprise JavaBeans(TM)</h2></center>

<center>
<h2>
<font color="#000000">Java 2 Platform, Enterprise Edition (J2EE)</font>,
Part 3</h2></center>
<b>By <a href="#BaldwinBio">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1307
<p>October 30, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<font color="#000000"><a href="#Java 2 platform, Enterprise Edition">Java
2 Platform, Enterprise Edition</a></font></li>

<li>
<font color="#000000"><a href="#Summary">Summary</a></font></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is one in a series of lessons designed to teach you about Sun's Enterprise
JavaBeans(TM) technology, often referred to simply as EJB.&nbsp; <i>Enterprise
JavaBeans(TM)</i> is a trademark of Sun.
<p>This lesson, along with <a href="Java1305.htm">Part 1</a> and <a href="Java1306.htm">Part
2</a>, constitute a three-part miniseries designed to provide background
information, and to explain where EJB fits in the grand scheme of things
at Sun.
<p>Subsequent lessons will show you how to write, deploy, and execute Enterprise
JavaBeans(TM).
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">Preview</font></b>
<p><font color="#000000">In this lesson, I will continue the discussion
of the Java 2 Platform Enterprise Edition (J2EE), and will further justify
the need for standardization in multi-tier systems.</font><font color="#000000"></font>
<p><font color="#000000">I will introduce the need for standard services
by providing a very simple example involving your saving account and your
checking account.&nbsp; Hopefully, those two accounts are protected by
a standard service commonly referred to as transaction processing.</font><font color="#000000"></font>
<p><font color="#000000">I will discuss the fact that with multi-tier systems,
it is not necessary for the application programmer to be an expert in the
programming of standard services.&nbsp; Rather, the responsibility for
programming such services is shifted to the programmers who do this sort
of thing on a daily basis in the development of multi-tier server products.</font><font color="#000000"></font>
<p><font color="#000000">I will introduce the topic of deployment, which
is a topic that will consume a lot of time, effort, and discussion in future
lessons.</font><font color="#000000"></font>
<p><font color="#000000">Many of the future lessons that provide workable
code will make use of the J2EE Reference Implementation for a variety of
reasons, not the least of which is the fact that it is available free of
charge for academic research and other non-commercial use.</font>
<p><b><font color="#FF0000">A clarification</font></b>
<p><font color="#000000">Because of the likelihood of confusion regarding
the use of the term <i>beans</i>, I will begin by telling you that an EJB
is not a <i>JavaBean Component(TM)</i>, as discussed in my series of <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">tutorial
lessons</a> beginning with lesson number 500.</font>
<p><b><font color="#FF0000">What is an EJB?</font></b>
<p><font color="#000000"><i>Enterprise JavaBeans(TM)</i> consist of reusable
compiled code that is designed to be installed inside a special application
server that is compliant with the <i>Java 2 Platform Enterprise Edition</i>.</font>
<p><b><font color="#FF0000">Use of Bean in this lesson</font></b>
<p><font color="#000000">In this lesson, when I refer to <i>beans</i>,
I will be referring to Enterprise JavaBeans(TM).</font>
<center>
<h2>
<a NAME="Java 2 platform, Enterprise Edition"></a><font color="#000000">Java
2 Platform, Enterprise Edition</font></h2></center>
<font color="#000000">Enterprise JavaBeans(TM) technology is part of a
larger overall software development technology from Sun known as the Java
2 Platform, Enterprise Edition (J2EE).</font>
<p><b><font color="#FF0000">J2EE is a high-productivity, multi-tier system</font></b>
<p><font color="#000000">One of the main goals of J2EE is to allow the
enterprise software developer to reduce development cost and reduce time-to-market
response time.</font>
<p><font color="#000000">Systems for delivering large-scale data processing
services often include a thin-client tier, a back-end data storage tier,
and one or more tiers in the middle to implement business logic and processes.</font>
<p><font color="#000000">J2EE is designed specifically to accommodate the
need to productively develop and upgrade the software in the middle tier
of a multi-tier system.</font>
<p><b><font color="#FF0000">How does a multi-tier system work?</font></b>
<p><font color="#000000">In the three-tier (or multi-tier) model, a thin
client communicates with a middle tier, which provides a data processing
bridge between the thin client and back-end persistent data storage.</font>
<p><b><font color="#FF0000">The need for standardization</font></b>
<p><font color="#000000">Standardization makes it possible to build applications
from standardized components and to deploy a single application on a wide
variety of platforms.&nbsp; Standardization also makes it possible to readily
scale applications to meet changing business conditions.</font>
<p><font color="#000000">Sun has recognized and responded to the need for
standardization with J2EE.&nbsp; For example, Enterprise JavaBeans(TM)
that you develop to implement your business logic can be deployed on any
server that is fully compliant with the J2EE specifications, regardless
of the server vendor.</font>
<p><b><font color="#FF0000">Your bank account and transaction processing</font></b>
<p><font color="#000000">Consider a simple example.&nbsp; You decide to
transfer $10,000 from your savings account into your checking account.&nbsp;
How happy would you be if there was a computer failure at the bank after
the funds had been removed from the database that represents your savings
account and before they had been posted into the database that represents
your savings account?</font>
<p><font color="#000000">You probably wouldn't be very happy!</font>
<p><b><font color="#FF0000">Transaction processing</font></b>
<p><font color="#000000">This scenario falls in a programming technology
area commonly referred to as <i>transaction processing</i>.&nbsp; Transaction
processing is only one several essential services provided by a J2EE platform-compliant
server.</font>
<p><b><font color="#FF0000">Transaction expertise required</font></b>
<p><font color="#000000">The bottom line is, neither operation in the above
example should be allowed unless both operations are successful.&nbsp;
The ability to write programs that reliably perform such transactions is
not something that a programmer learns overnight.&nbsp; The programmers
who write and test the code for such transactions typically require quite
a lot of specialized experience.</font>
<p><b><font color="#FF0000">Business logic is easier</font></b>
<p><font color="#000000">On the other hand, the code to extract $10,000
from one database and add a like amount to another database isn't very
complicated.&nbsp; This is what is commonly referred to as business logic.</font>
<p><b><font color="#FF0000">Separation of responsibility</font></b>
<p><font color="#000000">J2EE makes it possible to separate the code required
to perform business logic from the code required to implement the required
infrastructure such as transaction processing.</font>
<p><b><font color="#FF0000">Do what you do best</font></b>
<p><font color="#000000">The development of business logic can be assigned
to programmers who understand the business and who know how to program
in Java.&nbsp; Although they must know how to interface their code with
the infrastructure provided by the J2EE server, they don't have to know
how to reliably implement such infrastructure.</font>
<p><b><font color="#FF0000">Infrastructure programmers needed</font></b>
<p><font color="#000000">The development of the required infrastructure
of services is assigned to the programmers who develop the application
server product.&nbsp; They, in turn, don't need to understand the business
for which the server will be used.&nbsp; Their requirement is that the
server that they develop will comply with the specifications of J2EE, however
they choose to implement it.</font>
<p><b><font color="#FF0000">Write once, run anywhere</font></b>
<p><font color="#000000">According to Sun, <i>"The J2EE application model
provides the benefits of Write Once, Run Anywhere portability and scalability
for multi-tier applications. This standard model minimizes the cost of
developer training while providing the enterprise with a broad choice of
J2EE servers and development tools."</i></font>
<p><font color="#000000">Also, according to Sun, <i>"The J2EE application
model is a major step forward in simplifying and expediting application
development, by minimizing the complexity of building multi-tier applications."</i></font>
<p><b><font color="#FF0000">The client tier</font></b>
<p><font color="#000000">J2EE is designed to support different implementations
of client software including web browsers, applets, applications, RMI objects,
CORBA objects, etc.</font>
<p><font color="#000000">Because the primary thrust of this series of lessons
is to teach you how to write beans that properly interface with a J2EE
platform-compliant server, most of the early lessons in this series will
use relatively simple Java applications to implement the client tier.</font>
<p><font color="#000000">Later in the series, I may illustrate some of
the other approaches to implementing the client tier as well.</font>
<p><b><font color="#FF0000">Shifting responsibility</font></b>
<p><font color="#000000">One of the goals of J2EE is to minimize the requirements
and difficulty of application programming.&nbsp; One way to accomplish
this is to shift as many common tasks as possible to the infrastructure
services provided by the server.&nbsp; Such common tasks might include:</font>
<ul>
<li>
<font color="#000000">Enforcing an application's security roles.</font></li>

<li>
<font color="#000000">Implementing its transaction semantics.</font></li>

<li>
<font color="#000000">Linking its components to the resources and other
components they require.</font></li>
</ul>
<b><font color="#FF0000">J2EE application assembly and deployment</font></b>
<p><font color="#000000">J2EE provides a mechanism for separating these
behaviors from component code.&nbsp; Declarations specifying these behaviors
are stored in a deployment descriptor, which is an XML document.&nbsp;
The XML document is stored in a <i>jar</i> file along with all of the component
parts of the application.</font>
<p><font color="#000000">According to Sun, <i>"A J2EE application is packaged
into one or more standard units for deployment to any J2EE platform-compliant
system. Each unit contains a functional component or components (enterprise
beans, JSP page, servlet, applet, etc.), a standard deployment descriptor
that describes its content, and the J2EE declarations which have been specified
by the application developer and assembler."</i></font>
<p><b><font color="#FF0000">Deployment</font></b>
<p><font color="#000000">Servers that meet the J2EE compatibility specifications
provide software tools that are used to deploy the application.&nbsp; These
deployment tools know how to read the deployment descriptor and how to
modify the behavior of the application accordingly without any requirement
to modify the class files that constitute the components of the application.</font>
<p><font color="#000000">The deployment tools can also be used to specify
location-specific information such as a list of local users that can access
it, or the name of a local database.</font>
<p><b><font color="#FF0000">Vendor specific deployment tool</font></b>
<p><font color="#000000">The deployment information provided by the component
developer should be the same regardless of the server vendor.&nbsp; However,
the manner in which the deployment tool is implemented, as well as its
user interface, will likely vary from one vendor to the next.</font>
<p><font color="#000000">Most of the lessons in this series will be illustrated
using the deployment tool that can be downloaded from Sun in its reference
implementation of J2EE.</font>
<p><b><font color="#FF0000">J2EE Reference Implementation</font></b>
<p><font color="#000000">The reference implementation is a J2EE platform-compliant
server that can be downloaded from Sun to fulfill several roles.</font>
<p><font color="#000000">According to Sun, <i>"Its primary role is as an
operational</i></font>
<br><i><font color="#000000">definition of the J2EE platform. In this role,
it is used by vendors as the J2EE platform's "gold standard" to determine
what their implementation must do under a particular set of application
circumstances. It is also used by developers to verify the portability
of an application. Most importantly, it is used as the standard platform
for running the J2EE Compatibility Test Suite."</font></i>
<p><b><font color="#FF0000">The role for this series of lessons</font></b>
<p><font color="#000000">In this series of lessons, the J2EE Reference
Implementation will be used as a J2EE platform-compliant server that is
available free of charge.&nbsp; It can be used to test and illustrate the
variety of programming opportunities provided by the use of Enterprise
JavaBeans(TM).</font>
<p><font color="#000000">Sun describes this role as follows:&nbsp; <i>"A
secondary, but more visible, role for the reference implementation is as
a freely available platform for popularizing Java 2 platform, Enterprise
Edition. Although it is not a commercial product and its licensing terms
will prohibit its commercial use, it will be freely available in binary
form for demonstrations, prototyping and academic research."</i></font>
<p><b><font color="#FF0000">A word of gratitude</font></b>
<p><font color="#000000">As a college professor, teaching at a publicly
supported college, whose academic software budget must survive the whims
of the government bureaucracy, I am particularly pleased that Sun has made
this reference implementation available.&nbsp; This will make it possible
for me to teach EJB to my students, and possibly to you as well.&nbsp;
This would not be possible if it were necessary for me to pay the price
of a full-scale EJB-compliant application server from one of the major
vendors.</font>
<p><b><font color="#FF0000">A plug for another vendor</font></b>
<p><font color="#000000">I also want to mention the <a href="http://www.ewavecommerce.com/index.htm">Unify</a>
eWave product.&nbsp; This is another EJB compliant product that is also
available for restricted use at no cost, I will probably also make use
of the eWave product for deploying and testing some of the beans that I
develop for teaching purposes.</font>
<center>
<h2>
<a NAME="Summary"></a><font color="#000000">Summary</font></h2></center>
<font color="#000000">In this lesson, I have continued the discussion of
the Java 2 Platform Enterprise Edition (J2EE).&nbsp; I have further justified
the need for standardization in multi-tier systems, and have presented
J2EE as the answer to the need for standardization.</font><font color="#000000"></font>
<p><font color="#000000">I gave a very simple example involving your saving
account and your checking account as an example of the need for transaction
processing.&nbsp; I mentioned that enterprise applications require a variety
of standard services, of which transaction processing is only one.</font><font color="#000000"></font>
<p><font color="#000000">I discussed the fact that with multi-tier systems,
it is not necessary for the application programmer to be an expert in the
programming of standard services, such as transaction processing.&nbsp;
Rather, the responsibility for programming standard services is shifted
to the experts who do this sort of thing on a daily basis in the development
of multi-tier server products.</font><font color="#000000"></font>
<p><font color="#000000">The standardization of multi-tier systems provided
by Sun's J2EE extends the benefits of Write Once, Run Anywhere to multi-tier
enterprise applications, making it possible for application programmers
to develop software for a variety of brands and models of multi-tier servers
without having to learn the peculiarities of each.</font><font color="#000000"></font>
<p><font color="#000000">I introduced the topic of deployment, which is
a topic that will consume a lot of time, effort, and discussion in future
lessons.</font><font color="#000000"></font>
<p><font color="#000000">I explained that many of the future lessons that
provide workable code will make use of the J2EE Reference Implementation
for a variety of reasons, not the least of which is the fact that it is
available free of charge for academic research and other non-commercial
use.</font>
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
This and the previous two lessons have been very general in nature, concentrating
primarily on a discussion of the J2EE platform.
<p>The next lesson will become more specific with the discussion centered
on Enterprise JavaBeans(TM).
<br>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="BaldwinBio"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
