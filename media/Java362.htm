<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">Getting Started with the PictureExplorer Class</h2>
<p><i>Learn about a picture explorer class that allows you to determine the 
numeric color values for any pixel in a picture by placing a cursor on the 
pixel.&nbsp; The pixel position is controlled by clicking or dragging the mouse 
within the picture, clicking buttons, or typing coordinate values.&nbsp; You can 
also zoom in and out to view the pixel in more or less detail, and you can see 
the actual color of the pixel in a large square.</i></p>
<p><b>Published:</b>&nbsp; March 19, 2009<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 362</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#What_you_have_learned_so_far">What you have learned from 
		earlier lessons</a></li>
		<li><a href="#What_you_will_learn_in_this_lesson">What you will learn in 
		this lesson</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#A_multimedia_class_library">A multimedia class library</a></li>
	<li><a href="#Software_installation_and_testing">Software installation and 
	testing</a></li>
</ul>
	</li>
	<li><a href="#Preview">Preview</a><ul>
	<li><a href="#Purpose_of_the_PictureExplorer_class">The purpose of the 
	PictureExplorer class</a></li>
	<li><a href="#Reducing_the_confusion">Reducing the confusion</a></li>
</ul>
	</li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#The_sample_program_named_Java362a">The sample program named 
	Java362a</a></li>
	<li><a href="#The_big_picture_view_of_the_GUI">The big picture view of the 
	GUI</a></li>
	<li><a href="#The_PictureExplorer_class">The PictureExplorer class</a><ul>
	<li><a href="#The_constructor">The constructor</a></li>
	<li><a href="#The_createWindow_method">The createWindow method</a></li>
	<li><a href="#The_createAndInitPictureFrame_method">The 
	createAndInitPictureFrame method</a></li>
	<li><a href="#The_setUpMenuBar_method">The setUpMenuBar method</a></li>
</ul>
	</li>
</ul>
	</li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p>This lesson is the next in a series <i>(see <a href="#Resources">Resources</a>)</i> 
designed to teach you how to write Java programs to do things like:</p>
<ul>
	<li>Remove <i>redeye</i> from a photographic image.</li>
	<li>Distort the human voice.</li>
	<li>Display one image inside another image.</li>
	<li>Do edge detection, blurring, and other filtering operations on images.</li>
	<li>Insert animated cartoon characters into videos of live humans.</li>
</ul>
<p>If you have ever wondered how to do these things, you've come to the right 
place.</p>
<h3><a name="What_you_have_learned_so_far">What you have learned from earlier 
lessons</a></h3>
<p> If you have studied the <a href="#Resources">earlier lessons</a> in this 
series, you have learned about <b>Turtle</b> objects and their ability to move 
around in a world or a picture and to draw lines as they are moving.&nbsp; You 
have learned all about the <b>World</b> class, the <b>Picture</b> class and its 
superclass named <b>SimplePicture</b>.</p>
<p> By learning about the 
constructors and methods of the <b>SimplePicture</b> class, you have learned that objects of the <b>Picture</b> 
class are useful for much more than simply serving as living quarters for 
turtles.&nbsp; They are also useful for manipulating images in interesting and 
complex ways.</p>
<h3> <a name="What_you_will_learn_in_this_lesson">What you will learn in this 
lesson</a></h3>
<p> Near the end of the previous lesson, I told you that there remained only 
one significant method of the <b>SimplePicture</b> class that I had not yet 
explained:&nbsp; the <b>explore</b> method.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b><font size="3" face="arial">Pixel Editor Program</font></b><br />
  See the lesson titled <font size="3" face="arial"><i>A Pixel Editor Program in 
	Java:&nbsp; Multimedia Programming with Java</i> in <a href="#Resources">
	Resources</a> for a non-trivial application of a <b>PictureExplorer</b> 
	object.</font></td></tr></table>
</td>
</tr>
</table>
<p><b><font color="#ff0000">The explore method and the PictureExplorer class</font></b></p>
<p>The <b>explore</b> method consists of a single statement that creates an 
object of the <b>PictureExplorer</b> class.&nbsp; The PictureExplorer class is a large and complex class.&nbsp; From an educational viewpoint, 
the <b>PictureExplorer</b> class is a very significant class because it provides 
an event-driven graphical user interface <i>(GUI)</i>, which is an extremely 
important Java programming topic.&nbsp; It also incorporates objects of 
anonymous inner classes as listener objects, which is also a very important Java 
topic.</p>
<p>I will begin my explanation of the <b>PictureExplorer</b> class in this 
lesson. </p>
<p><font color="#ff0000"><b>Source code listings</b></font></p>
<p>A complete listing of Ericson's <b>PictureExplorer</b> class is provided in 
Listing 13 near the end of the lesson.&nbsp; A complete listing of a very simple program 
named Java362a that I will use to illustrate the behavior of the <b>PictureExplorer</b> 
class is provided in Listing 14.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Screen output produced by the show 
	method. </li>
	<li><a href="#Figure_2">Figure 2</a>. Screen output produced by the explore 
	method. </li>
	<li><a href="#Figure_3">Figure 3</a>. Resized PictureExplorer GUI with Zoom 
	menu exposed. </li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Background color for the 
	PictureExplorer class. </li>
	<li><a href="#Listing_2">Listing 2</a>. Background color for other Ericson 
	classes.</li>
	<li><a href="#Listing_3">Listing 3</a>. Background color for the program 
	named Java362a. </li>
	<li><a href="#Listing_4">Listing 4</a>. Source code for the program named 
	Java362a. </li>
	<li><a href="#Listing_5">Listing 5</a>. Beginning of the PictureExplorer 
	class. </li>
	<li><a href="#Listing_6">Listing 6</a>. Private instance variables of the 
	PictureExplorer class. </li>
	<li><a href="#Listing_7">Listing 7</a>. The constructor for the 
	PictureExplorer class. </li>
	<li><a href="#Listing_8">Listing 8</a>. The createWindow method. </li>
	<li><a href="#Listing_9">Listing 9</a>. The createAndInitPictureFrame 
	method. </li>
	<li><a href="#Listing_10">Listing 10</a>. Beginning of the setUpMenuBar 
	method. </li>
	<li><a href="#Listing_11">Listing 11</a>. Register an action listener on the 
	menu items. </li>
	<li><a href="#Listing_12">Listing 12</a>. Complete the construction of the 
	menu.</li>
	<li><a href="#Listing_13">Listing 13</a>. Source code for Ericson's 
	PictureExplorer class.</li>
	<li><a href="#Listing_14">Listing 14</a>. Source code for the program named 
	Java362a.<b> </b></li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="A_multimedia_class_library">A multimedia class library</a></h3>
<p>In this series of lessons, I will present and explain many of the classes in 
a multimedia class library that was developed and released under a <b>Creative 
Commons Attribution 3.0 United States License</b> <i>(see <a href="#Resources">
Resources</a>) </i>by Mark Guzdial and Barbara Ericson at Georgia Institute of 
Technology.&nbsp; In doing this, I will also present some interesting sample programs 
that use the library.</p>
<h3><a name="Software_installation_and_testing">Software installation and 
testing</a></h3>
<p>I explained how to download, install, and test the multimedia class library 
in an earlier lesson titled <i>Multimedia Programming with Java, Getting Started 
(see <a href="#Resources">Resources</a>)</i>.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>In this and the lessons that follow, you will learn about the <b>
PictureExplorer</b> class, which allows you to determine the numeric color 
values for any pixel in a picture by placing a cursor on the pixel.&nbsp; The 
pixel position is controlled by clicking or dragging the mouse within the 
picture, clicking buttons, or typing coordinate values.&nbsp; You can also zoom 
in and out to view the pixel in more or less detail and you can see the actual 
color of the pixel in a large square.</p>
<p>I will use a very simple sample program to illustrate the creation of an 
object of the <b>PictureExplorer</b> class.</p>
<p>The program named Java362a begins by creating a new <b>Picture</b> object with known 
dimensions using input from an image file in the current directory.&nbsp; Then it calls the <b>show</b> method on the object to produce 
the screen output shown in Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Screen output produced by the show method. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <img border="0" src="java362a.jpg" width="469" height="374"></td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Call the explore method</b></font></p>
<p>After that, the program calls the <b>explore</b> method on the <b>Picture</b> 
object to produce the screen output shown in Figure 2.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Screen output produced by the explore 
	method. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <img border="0" src="java362b.jpg" width="472" height="473"></td>
    </tr>
  </tbody>
</table>
</p>
<p>You learned all about the <b>show</b> method of the <b>SimplePicture</b> 
class in earlier lessons <i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; 
We will be mainly interested in <b>explore</b> method and the <b>PictureExplorer</b> class in this and the 
next few lessons.</p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Attribution</b><br />
  <font size="3" face="arial">
	The PictureExplorer class was originally created for the <i>Jython 
	Environment for Students (JES)</i>. It was modified to work with DrJava by 
	Barbara Ericson.&nbsp; Copyright Georgia Institute of Technology 2004.</font>
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>The explore method</b></font></p>
<p>The <b>explore</b> method of the <b>SimplePicture</b> class contains a single 
statement, which instantiates an object of the <b>PictureExplorer</b> class.&nbsp; 
As soon as that object is instantiated, the GUI shown in Figure 2 appears on the 
screen.</p>
<p>


<h3><a name="Purpose_of_the_PictureExplorer_class">The purpose of the 
PictureExplorer class</a></h3>
<p>The purpose of an object of the <b>PictureExplorer</b> class is to allow you 
to determine the numeric color values for any pixel in a picture by placing a 
cursor on the pixel.&nbsp; The pixel position is controlled by clicking or 
dragging the mouse within the picture, clicking buttons, or typing coordinate 
values.&nbsp; You can also zoom in and out to view the pixel in more or less 
detail and you can see the actual color of the pixel in a large square.</p>
<p>More specifically, an object of the <b>PictureExplorer</b> class will:</p>
<ul>
	<li>Display a <b>Picture</b> object in the format shown in Figure 2.</li>
<li>Let you explore the picture by displaying the x, y, red, green, and blue 
values of the pixel at the cursor:<ul>
		<li>When you click a mouse button within the picture, or </li>
		<li>When you press and hold a mouse button while moving the cursor within the 
		picture.</li>
	</ul>
	</li>
	<li>Let you zoom in or out, showing the individual pixels in more or less 
	detail.</li>
<li>Let you type in x and y coordinate values to see the color at that location.</li>
	<li>Let you adjust the location of the cursor one pixel at a time by 
	clicking<i> previous</i> and <i>next</i> buttons to specify a new pair of 
	x and y coordinate values.</li>
	<li>Let you view the color of the pixel at the cursor in a large colored 
	square.&nbsp; <i>(See the nearly black square in Figure 2.)</i></li>
</ul>
<p>An object of the <b>PictureExplorer</b> class is a powerful tool for 
examining pixel colors in a picture.</p>
<p><font color="#FF0000"><b>An excellent educational example</b></font></p>
<p>As I mentioned earlier, and as indicated by the behavior described
<a href="#Purpose_of_the_PictureExplorer_class">above</a>, the <b>
PictureExplorer</b> class is a large and 
complex class containing a significant amount of event-driven GUI code.&nbsp; 
It even instantiates event-listener objects from anonymous classes, which is a 
very important Java programming topic.&nbsp; Therefore, the <b>
PictureExplorer</b> class is an excellent class to be studied for an understanding of the 
use of event-driven GUI programming in the real world.</p>

<h3 dir="ltr"><a name="Reducing_the_confusion">Reducing the confusion</a></h3>
<p dir="ltr">The <b>PictureExplorer</b> class contains a private inner class 
named <b>PictureExplorerFocusTraversalPolicy</b>, which I will also explain at 
some point in this series of lessons.&nbsp; It also makes heavy use of a class 
named <b>ImageDisplay</b> from Ericson's library.</p>
<p dir="ltr">Because I 
will be switching back and forth among code fragments extracted from Ericson's 
<b>PictureExplorer</b> class, code fragments extracted from other classes in 
Ericson's library, and code fragments extracted from my sample programs, 
things can get confusing.</p>
<p dir="ltr"><font color="#FF0000">
<b>Background color for the PictureExplorer class</b></font></p>
<p dir="ltr">In an attempt to reduce the confusion, I will 
present code fragments extracted from Ericson's  <b>PictureExplorer</b> class against the 
background color shown in Listing 1.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Background color for the PictureExplorer class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>I will present code fragments from the PictureExplorer
class against this background color.</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Background color for other Ericson classes</b></font></p>
<p>Similarly, I will present code fragments extracted from other classes in Ericson's 
library against the background color shown in Listing 2.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. Background color for other Ericson 
classes.</b><table border="1" cols="1" width="477" bgcolor="#ffeeff">
  <tbody>
    <tr>
      <td>
      <pre>I will present code fragments from other Ericson classes
against this background color.</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Background color for my sample programs</b></font></p>
<p>Finally, I will present code fragments extracted from my sample programs against the 
background color shown in Listing 3.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Background color for the program named 
Java362a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>I will present code fragments from my sample programs
against this background color.</pre>
      </td>
    </tr>
  </tbody>
</table>
<p align="left"> In the event that I need to distinguish among more than three 
classes in the same lesson, I will come up with a fourth color and explain its 
use at the time.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><a name="The_sample_program_named_Java362a">The sample program named 
Java362a</a></h3>
<p>The purpose of this simple program is to support an explanation of the <b>
PictureExplorer</b> class.</p>
<p>Normally, I break programs down and explain them in fragments.&nbsp; However, 
this program is so short and so simple that the program is shown in its entirety 
in Listing 4.&nbsp; <i>(It is also provided in Listing 14 near the end of the 
lesson for easy reference.)</i></p>
<p>
<b><a name="Listing_4">Listing 4</a>. Source code for the program named 
Java362a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>public class Main{
  public static void main(String[] args){
    //Construct a new 460x345 Picture object.
    Picture pix1 = new Picture("ScaledBeach460x345.jpg");
    pix1.show();//display the picture in the show format
    //Display the picture again in the explore format.
    pix1.explore();
  }//end main method
}//end class Main</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Create a Picture object and display it with the show 
method</b></font></p>
<p>A <b>Picture</b> object having dimensions of 450x345 pixels is created by 
reading an image file in the current directory.&nbsp; Then the 
<b>show</b> 
method is called on the <b>Picture</b> object producing the screen output shown in Figure 1.</p>
<p>Following that, the <b>explore</b> method is called on the object, producing 
the screen output shown in Figure 2.</p>
<p>As I mentioned earlier, the <b>explore</b> method simply creates a new object of 
the <b>PictureExplorer</b> class.&nbsp; The GUI shown in Figure 2 appears on the 
screen as soon as that object is created.&nbsp; Figure 3 shows another view of 
the GUI with the <b>Zoom</b> menu pulled down and the GUI resized to a smaller 
size with scrollbars showing.</p>
<h3><a name="The_big_picture_view_of_the_GUI">The big picture view of the GUI</a></h3>
<p>Because things are going to become progressively more complicated, it will 
probably be worthwhile for us to step back and take a big-picture look at the GUI 
shown in Figure 3.</p>
<p><font color="#FF0000"><b>A JFrame object</b></font></p>
<p>The onscreen window that you see in Figure 3 is the visual manifestation of a
<b>JFrame</b> object.&nbsp; Basically, a <b>JFrame</b> object consists of the 
following parts:</p>
<ul>
	<li>A banner at the top containing some built-in control components <i>
	(three buttons on the right and a menu on the left)</i> and optionally 
	containing a <b>
	String</b> title.</li>
	<li>A rectangular area under the banner that can contain one or more menu 
	labels side-by-side.&nbsp; This 
	area is collapsed if you elect not to provide menus.</li>
	<li>A content area underneath the menu area.</li>
	<li>A border around the outer edges.</li>
</ul>
<p><font color="#FF0000"><b>The menu</b></font></p>
<p>A <b>JMenuBar</b> object has been 
placed in the menu area for the <b>JFrame</b> object shown in Figure 3.&nbsp; A single <b>JMenu</b> object has been added to 
the menu bar with a label of <b>Zoom</b>.&nbsp; Seven <b>JMenuItem</b> objects have been added to the <b>JMenu</b> 
object.</p>
<p><font color="#FF0000"><b>The content area</b></font></p>
<p>The content area <i>(immediately below the menu area)</i> has a default <b>BorderLayout</b> object as the layout 
manager.&nbsp; This layout manager makes it possible to place one component in 
the CENTER and four additional components in the NORTH, SOUTH, EAST, and WEST 
locations.&nbsp; In this case, there is one component in the CENTER and one 
component in the NORTH location.&nbsp; There are no components in the EAST, 
SOUTH, and WEST locations.&nbsp; <i>(Keep in mind that each of the five 
allowable components can themselves contain other components.)</i></p>
<p><font color="#FF0000"><b>A JScrollPane object in the CENTER location</b></font></p>
<p>The component in the CENTER is an object of the <b>JScrollPane</b> class.&nbsp; 
Without getting into the details at this point, the scroll pane makes it 
possible to view and scroll an object of Ericson's <b>ImageDisplay</b> class.&nbsp; <b>
ImageDisplay</b> is a subclass of the <b>JPanel</b> class with the ability to render and display an <b>Image</b> object.</p>
<p>You will learn more about the detailed structure of the component in the 
CENTER later, including the details of the <i>mouse</i> and <i>mouse motion</i> 
listener objects registered on the component.</p>
<p><font color="#FF0000"><b>A JPanel object in the NORTH location</b></font></p>
<p>The component in the NORTH location of the <b>JFrame</b> object's content 
area is a <b>JPanel</b> object with the layout manager also set to <b>
BorderLayout</b>.&nbsp; This <b>JPanel</b> object contains two smaller <b>JPanel</b> 
objects, one in its NORTH location and one in its SOUTH location.&nbsp; There 
are no components in the CENTER, EAST, or WEST locations of the <b>JPanel</b> 
object.</p>
<p>A <b>JPanel</b> object is also a container that can contain other components.&nbsp; 
However, there is no <a href="#The_getContentPane_method">content pane</a> associated with a <b>JPanel</b> 
object.&nbsp; Other components are added directly to the <b>JPanel</b> object.</p>
<p><font color="#FF0000"><b>The locationPanel and the colorInfoPanel</b></font></p>
<p>The <b>JPanel</b> object in the NORTH location <i>(of the <b>JPanel</b> 
object in 
the NORTH location of the content pane)</i> is referred to in this class as the <b>
locationPanel</b>.&nbsp; The construction of this panel is very complex with 
numerous components and numerous registered listener objects.</p>
<p>The <b>JPanel</b> object in the SOUTH location of that 
same panel is referred to as the <b>colorInfoPanel</b>.&nbsp; The construction 
of this panel is less complex than the construction of the <b>locationPanel</b>.&nbsp; 
Among other things, this panel is completely passive with no registered listener 
objects.</p>
<p><font color="#FF0000"><b>The locationPanel and the FlowLayout manager</b></font></p>
<p>The layout manager for the <b>locationPanel</b> is an object of the <b>
FlowLayout</b> class.&nbsp; With this layout manager, you can add any number 
of components to the container component and they will position themselves in horizontal 
rows.&nbsp; If there are too many components to fit on one row, some will 
spill over to the next row.&nbsp; You can cause the components on the rows to be 
aligned to the left, right, or center.</p>
<p><font color="#FF0000"><b>The population of the locationPanel</b></font></p>
<p>The <b>locationPanel</b> is primarily populated with the following 
components:</p>
<ul>
	<li>A <b>Box</b> object (<i>I will explain this at the appropriate 
	time.)</i></li>
	<li>Some <b>JLabel</b> objects.</li>
	<li>Some <b>JTextField</b> objects.</li>
	<li>Some <b>ImageIcon</b> objects that are used to put the triangle images on the <i>next</i> and 
	<i>previous</i> buttons on the left and right ends of the text fields.</li>
	<li>Some <b>JButton</b> objects that serve as the next and previous buttons.</li>
</ul>
<p>There are lots of event handlers registered on various components in the <b>
locationPanel</b>.</p>
<p>You will learn how all of the components are put together and how they behave later when we dig 
into the code for the <b>locationPanel</b> in detail.</p>
<p><font color="#FF0000"><b>The colorInfoPanel</b></font></p>
<p>The <b>colorInfoPanel</b> is also a <b>JPanel</b> object, and the layout manager for 
the <b>colorInfoPanel</b> is also an object of the <b>FlowLayout</b> class.</p>
<p>As I mentioned earlier, the <b>colorInfoPanel</b> is much simpler than the <b>locationPanel</b> and is 
primarily populated with the following components:</p>
<ul>
	<li>Some <b>JLabel</b> objects.</li>
	<li>Another <b>JPanel</b> object <i>(the small nearly black square in Figure 
	3)</i>.</li>
</ul>
<p>There are no listener objects registered on components on the <b>
colorInfoPanel</b>.</p>
<p>Once again, you will learn how these components are put together and how they 
behave later when 
we dig into the programming details for the <b>colorInfoPanel</b>.</p>
<h3><a name="The_PictureExplorer_class">The PictureExplorer class</a></h3>
<p>A complete listing of the <b>PictureExplorer</b> class is provided in Listing 
13 near the end of the lesson.&nbsp; I will break the class down and explain it 
in fragments.&nbsp; The beginning of the class is shown in Listing 5.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. Beginning of the PictureExplorer class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.image.*;
import javax.swing.border.*;

public class PictureExplorer implements
       MouseMotionListener, ActionListener, MouseListener{</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The class implements three listener interfaces</b></font></p>
<p>The most significant thing about Listing 5 is that the class implements the 
following listener interfaces:</p>
<ul>
	<li><a name="MouseMotionListener">MouseMotionListener</a></li>
	<li>ActionListener</li>
<li>MouseListenener</li>
</ul>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>A listener on itself</b><br />
  If you are unfamiliar with the concept that an object of a class can be a 
	listener on itself, see my earlier lesson titled <i>Component Events</i> in
	<a href="#Resources">Resources</a>.
</td></tr></table>
</td>
</tr>
</table>
<p>This means, among other things, that an object of the class is a listener for 
a variety of event types fired by components that it owns.&nbsp; In other words, 
it is a listener on itself.&nbsp; This, in turn, 
means that the class must provide concrete definitions for all of the 
event-handler methods declared in the three interfaces listed 
<a href="#MouseMotionListener">above</a>.</p>
<p><font color="#FF0000"><b>A quick look ahead</b></font></p>
<p>For example, a quick look ahead indicates that the object of the <b>
PictureExplorer</b> class is registered to listen for action events fired by 
the seven different menu items on the <i>Zoom</i> menu.&nbsp; <i>(See the 
upper-left corner of Figure 3, for the Zoom menu.)</i>&nbsp; Also, the same object of the <b>PictureExplorer</b> class is registered to listen for 
<i>mouse</i> events and <i>mouse 
motion</i> events on the image display in the center of the <b>JFrame</b>.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Anonymous classes</b><br />
  For more information on anonymous classes, see lessons 1636 through 1642 in
	<a href="#Resources">Resources</a>.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Anonymous classes</b></font></p>
<p>In addition, action listener objects instantiated from <i>anonymous classes</i> are 
registered to listen for events fired by the left and right arrow buttons on 
either side of the text fields and on the text fields themselves.</p>
<p><font color="#FF0000">
<b>Private instance variables of the PictureExplorer class</b></font></p>
<p>The <b>PictureExplorer</b> class declares a large number of private instance 
variables and initializes a couple of them.&nbsp; They are shown in Listing 
6 for later reference.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Private instance variables of the 
PictureExplorer class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> // current x and y index
 private int xIndex = 0;
 private int yIndex = 0;

 //Main gui variables
 private JFrame pictureFrame;
 private JScrollPane scrollPane;

 //information bar variables
 private JLabel xLabel;
 private JButton xPrevButton;
 private JButton yPrevButton;
 private JButton xNextButton;
 private JButton yNextButton;
 private JLabel yLabel;
 private JTextField xValue;
 private JTextField yValue;
 private JLabel rValue;
 private JLabel gValue;
 private JLabel bValue;
 private JLabel colorLabel;
 private JPanel colorPanel;

 // menu components
 private JMenuBar menuBar;
 private JMenu zoomMenu;
 private JMenuItem twentyFive;
 private JMenuItem fifty;
 private JMenuItem seventyFive;
 private JMenuItem hundred;
 private JMenuItem hundredFifty;
 private JMenuItem twoHundred;
 private JMenuItem fiveHundred;

 /** The picture being explored */
 private DigitalPicture picture;

 /** The image icon used to display the picture */
 private ImageIcon scrollImageIcon;

 /** The image display */
 private ImageDisplay imageDisplay;

 /** the zoom factor (amount to zoom) */
 private double zoomFactor;

 /** the number system to use, 0 means starting at 0,
  *  1 means starting at 1 */
 private int numberBase=0;</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>There's not much to be said about the instance variables at this point.&nbsp; 
We will be referring back to them as the explanation of the class progresses.</p>
<h4><a name="The_constructor">The constructor</a></h4>
<p>The <b>PictureExplorer</b> class provides only one constructor and it is 
shown in its entirety in Listing 7.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. The constructor for the PictureExplorer</b>
<b>class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Public constructor
  * @param picture the picture to explore
  */
 public PictureExplorer(DigitalPicture picture){
   // set the fields
   this.picture=picture;
   zoomFactor=1;

   // create the window and set things up
   createWindow();
 }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Save the incoming parameter</b></font></p>
<p>The constructor receives a reference to the <b>Picture</b> object that is to 
be displayed as the 
interface type <b>DigitalPicture</b>.&nbsp; <i>(Recall from an earlier lesson that 
the <b>Picture</b> class implements the <b>DigitalPicture</b> interface.&nbsp; See the 
earlier lesson titled The DigitalPicture Interface:&nbsp; Multimedia Programming with 
Java in <a href="#Resources">Resources</a> for more information.)</i></p>
<p>The incoming reference is stored in the instance variable named <b>picture</b> 
that was declared in Listing 6.</p>
<p><font color="#FF0000"><b>Set the zoom factor</b></font></p>
<p>Then the constructor sets the value of the instance variable named <b>
zoomFactor</b> to 1.&nbsp; This instance variable is used&nbsp; at startup to cause the picture to be 
displayed at its natural size when the GUI first appears on the screen.&nbsp; <i>
(The user can modify this later using the Zoom menu in the upper-left corner of 
Figure 3.)</i></p>
<p><font color="#FF0000"><b>Create the GUI window</b></font></p>
<p>Finally, the constructor in Listing 7 calls the <b>createWindow</b> method to begin the 
overall construction process.&nbsp; When the <b>createWindow</b> method returns, 
the constructor returns the new <b>PictureExplorer</b> object's 
reference to 
the <b>explore</b> method of the <b>SimplePicture</b> class.&nbsp; However, the
<b>explore</b> method doesn't save the reference in a named reference variable.&nbsp; 
Therefore, the <b>PictureExplorer</b> object is an anonymous object that 
will remain on the screen until the user clicks the 
<a href="#Set_the_default_close_operation">X-button</a> in the upper-right 
corner of Figure 3.</p>
<h4><a name="The_createWindow_method">The createWindow method</a></h4>
<p>The createWindow method that is called by the constructor is shown in its entirety in Listing 8.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. The createWindow method. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Creates the JFrame and sets everything up
  */
 private void createWindow(){
   // create the picture frame and initialize it
   createAndInitPictureFrame();

   // set up the menu bar
   setUpMenuBar();

   //create the information panel
   createInfoPanel();

   //creates the scrollpane for the picture
   createAndInitScrollingImage();

   // show the picture in the frame at the size it needs
   // to be
   pictureFrame.pack();
   pictureFrame.setVisible(true);
 }//end createWindow method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A sequence of method calls</b></font></p>
<p>As you can see, the code in the <b>createWindow</b> method consists of:</p>
<ul>
	<li>A sequence of four 
calls to other methods to construct various parts of the <b>PictureExplorer</b> 
object.</li>
	<li>A call to the <b>pack</b> method to set the <b>JFrame</b> to 
the correct size.</li>
	<li>A call to the <b>setVisible</b> method to cause 
the <b>JFrame</b> object to become visible on the screen.</li>
</ul>
<p>I will explain each of those methods in sequence.</p>
<h4><a name="The_createAndInitPictureFrame_method">The createAndInitPictureFrame 
method</a></h4>
<p>You have seen the term <b>PictureFrame</b> used in earlier lessons in this series
<i>(see 
<a href="#Resources">Resources</a>)</i>.&nbsp; However, although the general 
intent is the same, the implementation of the picture frame in this class is 
different from the implementation that you learned about in conjunction with the
<b>show</b> method <i>(see 
<a href="#Resources">Resources</a>)</i>.</p>
<p>As you learned in an earlier lesson, the <b>SimplePicture</b> 
class has a private instance variable named <b>pictureFrame</b>, which is of type <b>
PictureFrame</b>.&nbsp; This instance variable holds a reference to an object instantiated from 
Ericson's class 
named <b>PictureFrame</b>.</p>
<p>The <b>PictureExplorer</b> class also has a private instance variable named <b>
pictureFrame</b> <i>(see Listing 6)</i>, but it is of type <b>JFrame</b>.&nbsp; 
It holds a reference to 
an object of the <b>JFrame</b> class <i>(not the <b>PictureFrame</b> class)</i>.</p>
<h4><font color="#FF0000">The JFrame object</font></h4>
<p>That <b>JFrame</b> object is 
instantiated and its reference is assigned to the instance variable named <b>
pictureFrame</b> at the 
beginning of the method shown in Listing 9.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. The createAndInitPictureFrame method. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to create and initialize the picture frame
  */
 private void createAndInitPictureFrame(){
   pictureFrame = new JFrame(); // create the JFrame
   //allow the user to resize it
   pictureFrame.setResizable(true);
    // use border layout
   pictureFrame.getContentPane().setLayout(
                                      new BorderLayout());
    // when close stop
   pictureFrame.setDefaultCloseOperation(
                                 JFrame.DISPOSE_ON_CLOSE);
   pictureFrame.setTitle(picture.getTitle());
   PictureExplorerFocusTraversalPolicy newPolicy =
                new PictureExplorerFocusTraversalPolicy();
   pictureFrame.setFocusTraversalPolicy(newPolicy);

 }//end createAndInitPictureFrame method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Swing components...</b></font></p>
<p>If you are familiar with the use of Swing components such as <b>JFrame</b> 
objects, you probably won't find anything in Listing 9 that you don't understand
<i>(with the possible exception of the focus traversal material)</i>.</p>
<p><font color="#FF0000"><b>Why setResizable?</b></font></p>
<p>Having created the <b>JFrame</b> object, Listing 9 calls the <b>setResizable</b> 
method on the object to make it possible for the user to resize the GUI by 
dragging the edges.</p>
<p>I'm not sure why Ericson included this statement, since a <b>JFrame</b> 
object is resizable by default.&nbsp; <i>(Perhaps she just wanted to make the 
code more self-documenting.)</i></p>
<p>It is beneficial for the GUI to be resizable.&nbsp; If you zoom up to show 
the pixels in more detail, the overall size of the image increases.&nbsp; You 
can then manually resize the GUI to make it possible to view the entire larger 
image without the use of scroll bars <i>(assuming that your screen is large 
enough to accommodate the larger image.)</i>.</p>
<p><font color="#FF0000">
 <b>Resized PictureExplorer GUI with Zoom menu exposed</b></font></p>
<p>Figure 3 shows the result of resizing the GUI to make it 
smaller and pulling down the Zoom menu to expose the seven zoom options.</p>

<p>
 <b><a name="Figure_3">Figure 3</a>. Resized PictureExplorer GUI with Zoom menu 
	exposed. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <img border="0" src="java362c.jpg" width="394" height="353"></td>
    </tr>
  </tbody>
</table>
</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b><a name="The_getContentPane_method">The getContentPane method</a></b><br />
  If you are unfamiliar with the <i>content pane</i> concept, see my earlier lesson 
	titled
<font size="3" face="arial">
	<i>Swing 
	from A to Z, Some Simple Components</i> in <a href="#Resources">Resources</a>.</font></td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Set the layout manager</b></font></p>
<p>Then Listing 9 sets the layout manager on the <b>ContentPane</b> to <b>
BorderLayout</b>.&nbsp; Again, I'm not sure why because <b>BorderLayout</b> is 
the <a href="http://java.sun.com/docs/books/tutorial/uiswing/layout/using.html">
default</a> for the <b>ContentPane</b>.&nbsp; In any event, <b>BorderLayout</b> 
works nicely because the image can be displayed in the CENTER position and a 
panel containing the text fields, navigation buttons, etc., can be placed in the NORTH 
position as shown in Figure 3.</p>
<p><font color="#FF0000"><b><a name="Set_the_default_close_operation">Set the default close operation</a></b></font></p>
<p>In case you are not familiar with this procedure, see the lesson titled <i>
Swing from A to Z: Analyzing Swing Components, Part 3, Construction</i> in
<a href="#Resources">Resources</a>.</p>
<p>Calling the <b>
setDefaultCloseOperation</b> method and passing an acceptable numeric constant as a 
parameter specifies the required behavior when the user clicks the X-button in 
the upper-right corner of Figure 2.</p>
<p>According to the Sun documentation, the behavior specified by the constant 
named <b>DISPOSE_ON_CLOSE</b> is as follows:</p>
<blockquote>
	<p><i>&quot;Releases all of the native screen resources used by this Window, its 
	subcomponents, and all of its owned children. That is, the resources for 
	these Components will be destroyed, any memory they consume will be returned 
	to the OS, and they will be marked as undisplayable.&quot;</i></p>
</blockquote>
<p>In short, this causes the GUI to go away, releasing all supporting resources 
in the process.&nbsp; <i>(This is not the default close operation, which is to 
simply hide the <b>JFrame</b>.)</i></p>
<p><font color="#FF0000"><b>Set the title</b></font></p>
<p>After setting the close operation, Listing 9 gets the <b>String</b> title 
belonging to the picture that was received as a parameter and sets that as the 
title for the <b>JFrame</b>.</p>
<p><font color="#FF0000"><b>Set the focus traversal policy</b></font></p>
<p>To make a long and complicated story short, instantiating a new object of the
<b>PictureExplorerFocusTraversalPolicy</b> <i>(which is a private inner class of 
the <b>PictureExplorer</b> class)</i> and passing its reference to the <b>
setFocusTraversalPolicy</b> method specifies how the focus moves from one 
component to the next when the user presses the tab key.</p>
<p>This is a fairly complex topic, and I am going to defer an explanation until 
later when I explain the private inner class named <b>
PictureExplorerFocusTraversalPolicy</b>.</p>
<p>When the <b>setFocusTraversalPolicy</b> method returns, the <b>
createAndInitPictureFrame </b>method shown in Listing 9 will terminate, 
returning control to the <b>createWindow</b> method shown in Listing 8.</p>
<p><font color="#FF0000"><b>Setting up the menu bar</b></font></p>
<p>The next method call in Listing 8 is a call to the <b>setUpMenuBar</b> 
method.&nbsp; As you might conclude from the name, this method sets up the Zoom 
menu shown in Figure 3.</p>
<p>Creating menus on a Java GUI isn't conceptually difficult, but it can 
require a great deal of tedious work.</p>
<p>Let's start by taking another look at the instance variables shown in Listing 
6.&nbsp; Near the middle of that listing, you will find nine instance variables 
under a comment that reads <b>menu components</b>.</p>
<p>The last seven of those nine instance variables with names like <b>twentyFive</b> 
and <b>fiveHundred</b> are all of type <b>JMenuItem</b>.&nbsp; They will be used 
to represent the seven menu items shown in the Zoom menu in the upper-left 
corner of Figure 3.&nbsp; Later on, an action listener will be registered on 
each menu item to provide the required behavior when the user selects a 
menu item.</p>
<p>The two instance variables in Listing 6 named <b>zoomMenu</b> and <b>menuBar</b> 
will be used to construct the menu and attach it to the <b>JFrame</b> object as 
shown in Figure 3.</p>
<h4><a name="The_setUpMenuBar_method">The setUpMenuBar method</a></h4>

<p>The <b>setUpMenuBar</b> method, which is called by the <b>createWindow</b> 
method in Listing 8, begins in Listing 10.</p>
<p>
<b><a name="Listing_10">Listing 10</a>. Beginning of the setUpMenuBar method. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to create the menu bar, menus, and menu items
  */
 private void setUpMenuBar(){
   //create menu
   menuBar = new JMenuBar();
   zoomMenu = new JMenu("Zoom");
   twentyFive = new JMenuItem("25%");
   fifty = new JMenuItem("50%");
   seventyFive = new JMenuItem("75%");
<font color="#FF0000"><b>   hundred = new JMenuItem("100%");
   hundred.setEnabled(false);</b></font>
   hundredFifty = new JMenuItem("150%");
   twoHundred = new JMenuItem("200%");
   fiveHundred = new JMenuItem("500%");
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A disabled menu item</b></font></p>
<p>Take another look at Figure 3 and you will see that the menu item labeled <b>
100%</b> is disabled.&nbsp; This is because that is the default zoom factor at 
startup and I didn't select any other zoom factor from the menu before capturing 
the screen shot shown in Figure 3.&nbsp; The menu item is disabled because it is 
already in effect.</p>
<p>We will see later that when we select other zoom factors from the menu, the 
selected zoom factor will become disabled as soon as it takes effect.</p>
<p><font color="#FF0000"><b>Instantiate a new JMenuItem object for 100%</b></font></p>
<p>There is a statement near the middle of the code in Listing 10 that 
instantiates a new <b>JMenuItem</b> object with a label of <b>100%</b> and 
assigns that object's reference to the instance variable named <b>hundred</b>.&nbsp;
<i>(I colored that statement and the one following in red in Listing 10 to make it easy for you to find.&nbsp; 
Of course there is no color associated with Java source code.)</i></p>
<p>Immediately below the assignment of the object's reference to the instance 
variable named <b>hundred</b>, there is a call to the <b>setEnabled</b> method 
on that reference, passing <i>false</i> as a parameter.&nbsp; This is one way 
that menu 
items <i>(and some other GUI components as well)</i> are enabled and disabled in 
Java.&nbsp; <i>(For another approach, see the lesson titled Understanding Action 
Objects in Java in <a href="#Resources">Resources</a>.)</i></p>
<p>The remaining eight statements in Listing 10 simply instantiate new objects 
<i>(of the correct type with the correct labels)</i> and assign the object's references to 
the corresponding instance variables.&nbsp; <i>(Note that a <b>JMenuBar</b> 
object doesn't have a label.)</i></p>
<p><font color="#FF0000">
<b>Register an action listener on the menu items</b></font></p>
<p>Remember that I told you earlier that the structure of this program is such 
that the object of the <b>PictureExplorer</b> class serves as a listener 
object on certain components that belong to the object.</p>
<p>Listing 11 calls the <b>addActionListener</b> method seven times in 
succession to register the <b>PictureExplorer</b> object as an action listener 
on each of the menu items.&nbsp; <i>(If you are unfamiliar with the registration 
of listener objects on event sources, see the lesson titled
<font color="#000000">Event Handling in JDK 1.1, A First Look, Delegation Event 
Model</font> in <a href="#Resources">Resources</a>.)</i></p>
<p>
<b><a name="Listing_11">Listing 11</a>. Register an action listener on the menu 
items. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>   // add the action listeners
   twentyFive.addActionListener(this);
   fifty.addActionListener(this);
   seventyFive.addActionListener(this);
   hundred.addActionListener(this);
   hundredFifty.addActionListener(this);
   twoHundred.addActionListener(this);
   fiveHundred.addActionListener(this);
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Only one of many ways</b></font></p>
<p>There are many ways to structure code for an event-driven GUI in Java, each of which 
has advantages and disadvantages depending on the application.&nbsp; The fact 
that the same listener object <i>(this object)</i> is being registered on all of 
the menu items means that the <b>actionPerformed</b> method of the <b>
PictureExplorer</b> class, <i>(which will be defined later)</i>, must identify which menu 
item was selected by the user and then take the required action for that 
particular menu item.</p>
<p><font color="#FF0000"><b>Complete the construction of the menu</b></font></p>
<p>The required code for completing the construction of the menu and attaching 
it to the <b>JFrame</b> object is shown in Listing 12.</p>
<p>
<b><a name="Listing_12">Listing 12</a>. Complete the construction of the menu.</b><table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>   // add the menu items to the menus
   zoomMenu.add(twentyFive);
   zoomMenu.add(fifty);
   zoomMenu.add(seventyFive);
   zoomMenu.add(hundred);
   zoomMenu.add(hundredFifty);
   zoomMenu.add(twoHundred);
   zoomMenu.add(fiveHundred);
   
   menuBar.add(zoomMenu);

   // set the menu bar to this menu
   pictureFrame.setJMenuBar(menuBar);
 }// end setUpMenuBar method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>What is a JMenu object?</b></font></p>
<p>The instance variable named <b>zoomMenu</b> contains a reference to an object 
of the <b>JMenu</b> class <i>(see Listing 10)</i>.&nbsp; Briefly, Sun describes such an object as:</p>
<blockquote>
	<p><i>&quot;An implementation of a menu -- a popup window containing JMenuItems 
	that is displayed when the user selects an item on the JMenuBar. In addition 
	to JMenuItems, a JMenu can also contain JSeparators. </i></p>
	<p><i>In essence, a menu is a button with an associated JPopupMenu. When the 
	&quot;button&quot; is pressed, the JPopupMenu appears. If the &quot;button&quot; is on the 
	JMenuBar, the menu is a top-level window. If the &quot;button&quot; is another menu 
	item, then the JPopupMenu is a &quot;pull-right&quot; menu.&quot;</i></p>
</blockquote>
<p>Stated differently, a <b>JMenu</b> object is a container that can contain 
multiple <b>JMenuItem</b> and <b>JSeparator</b> objects as shown in 
Figure 3.&nbsp; <i>(There are no <b>JSeparator</b> objects in Figure 3.)</i>&nbsp; </p>
<p><font color="#FF0000"><b>JMenuItem objects fire action events</b></font></p>
<p><b>JSeparator</b> objects are mainly used for cosmetic purposes 
to separate the menu items into groups and they do not fire events.&nbsp; However, the <b>JMenuItem</b> 
objects are active sources of action events.&nbsp; When the user selects a <b>
JMenuItem</b> object, it will fire an action event.</p>
<p><font color="#FF0000"><b>If an action listener has been registered...</b></font></p>
<p>If an action listener object has been registered on the menu item <i>(as in 
Listing 11)</i>, the firing of the action event will cause the method named <b>actionPerformed</b> 
belonging to the listener object to be called.&nbsp; The behavior of the <b>
actionPerformed</b> method will be the response to the event.</p>
<p><font color="#FF0000"><b>If a tree falls in the woods and there is no one to 
hear it...</b></font></p>
<p>The event is fired when the user selects the menu item regardless of whether 
or not there are any registered listeners.&nbsp; If there are no registered 
listeners, there simply is no programmatic response to the event.</p>
<p><font color="#FF0000"><b>Construct the menu</b></font></p>
<p>The first seven statements in Listing 12 add the <b>JMenuItem</b> objects to 
the <b>JMenu</b> object, producing the menu that you see in Figure 3.</p>
<p><font color="#FF0000"><b>An object of the JMenuBar class</b></font></p>
<p>The instance variable named <b>menuBar</b> contains a reference to an object 
of the <b>JMenuBar </b>class.&nbsp; Briefly, Sun has this to say about an object 
of the <b>JMenuBar</b> class:</p>
<blockquote>
	<p><i>&quot;An implementation of a menu bar. You add <b>JMenu</b> objects to the 
	menu bar to construct a menu. When the user selects a <b>JMenu</b> object, 
	its associated <b>JPopupMenu</b> is displayed, allowing the user to select 
	one of the <b>JMenuItem</b> objects on it.&quot;</i></p>
</blockquote>
<p>Stated differently, a <b>JMenuBar</b> object is a container, which can 
contain multiple <b>JMenu</b> objects.&nbsp; However, in this class, we are placing only 
one <b>JMenu</b> object <i>(labeled Zoom)</i> in the container.&nbsp; We accomplish that by calling the <b>add</b> method on the
<b>JMenuBar</b> object and passing the <b>JMenu</b> object's reference as a 
parameter&nbsp;<i>to the <b>add</b> method (see Listing 12)</i>.</p>
<p><font color="#FF0000"><b>The behavior of the JMenu object</b></font></p>
<p>In Figure 3, the component with the label <b>Zoom</b> is the <b>JMenu</b> 
object and it has been added to a horizontal <b>JMenuBar</b> object at this 
point.&nbsp; <i>
(JMenuBar objects don't have labels, but the one in Figure 3 can be seen if you 
look closely enough.)</i></p>
<p>When the user selects one of the <b>JMenu</b> 
objects <i>(in this case, there is only one)</i>, the menu opens to expose the
<b>JMenuItem</b> objects without any help from the programmer.</p>
<p><font color="#FF0000"><b>Attach the JMenuBar object to the JFrame object</b></font></p>
<p>Finally, the code in Listing 12 attaches the <b>JMenuBar</b> object to the <b>
JFrame</b> object by calling the <b>setJMenuBar</b> method on the reference to 
the <b>JFrame</b> object and passing the <b>JMenuBar</b> object's reference 
as a parameter.</p>
<p><font color="#FF0000"><b>Significantly different from adding components</b></font></p>
<p>Note that this is significantly different from adding GUI components to a <b>
JFrame</b> object.&nbsp; When you add GUI components to a
<b>JFrame</b> object, you must add them to the <b>JFrame</b> object's 
content pane, <i>(which is a topic that is far too complex to explain in this 
lesson)</i>.&nbsp; You cannot add components directly to the <b>JFrame</b> 
object.</p>
<p>However, when you call the <b>setJMenuBar</b> method to 
attach the menu bar to the <b>JFrame</b>, you call the method directly on the 
reference to the <b>JFrame</b> object and the content pane is not involved.</p>
<p><font color="#FF0000"><b>When the setJMenuBar method returns...</b></font></p>
<p>When the call to the <b>setJMenuBar</b> method returns in Listing 12, the <b>
setUpMenuBar</b> method, <i>(which began in Listing 10)</i>, terminates and 
returns control to the <b>createWindow</b> method in Listing 8.</p>
<p>At this 
point, the menu is ready for use with one major exception.&nbsp; The required 
behavior associated with the selection of each menu item hasn't been established 
yet.</p>
<p>The required behavior for each menu item will be established later through the definition of the
<b>actionPerformed</b> method of the <b>PictureExplorer</b> class.</p>
<center>
<h2><a name="Run the program"></a>Run the program</h2>
</center>
<p><font color="#FF0000"><b>It's time to take a break</b></font></p>
<p>We have a long way to go before we can fully understand the <b>PictureExplorer</b> 
class.&nbsp; However, you have been working hard if you have made it to this 
point.&nbsp; It's time to take a break, drink some coffee, eat a doughnut <i>(or 
maybe some tofu if you prefer that)</i> and let what you have learned so 
far sink in.</p>
<p><font color="#FF0000"><b>Experiment</b></font></p>
<p>Although the sample program doesn't amount to much, I encourage you to copy 
the code from Listing 14, compile 
the code, and execute it using an image file of your choice.&nbsp; Experiment with the code, making changes, and 
observing the results of your changes.&nbsp; Make certain that you can explain why 
your changes behave as they do.</p>
<p>Also experiment with the GUI that is produced when the program calls the <b>
explore</b> method on your <b>Picture</b> object.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>The purpose of an object of the <b>PictureExplorer</b> class is to allow you 
to determine the numeric color values for any pixel in a picture by placing a 
cursor on the pixel.&nbsp; The pixel position is controlled by clicking or 
dragging the mouse within the picture, clicking buttons, or typing coordinate 
values.&nbsp; You can also zoom in and out to view the pixel in more or less 
detail and you can see the actual color of the pixel in a large square.</p>
<p>So far, we have been concentrating on the construction of the graphical user 
interface that appears when you call the <b>explore</b> method on a <b>Picture</b> 
object.</p>
<p>You have learned how the GUI is constructed from a big-picture 
viewpoint.</p>
<p>You have learned that the GUI window is the visual manifestation of a <b>
JFrame</b> object, and you have learned how the <b>JFrame</b> object is 
configured.</p>
<p>You have learned how the Zoom menu is constructed and how an action listener 
object is registered on the items in that menu.</p>
<p>We have yet to get into the behavior that is programmed into the various 
event handlers that are registered on components in the GUI.&nbsp; We 
will get to that later.</p>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>The next lesson will begin with an explanation of the method named <b>createInfoPanel</b>, 
which is called by the <b>createWindow </b>method in Listing 8 during the 
construction of the GUI.</p>
<p>The <b>createInfoPanel </b>method is probably the most challenging part of the entire <b>PictureExplorer</b> class
<i>(with the possible exception of the focus-traversal material)</i>.</p>
<p>After that, we will continue with the sequence of methods that are called in the 
method named <b>createWindow</b>, which is at the core of constructing the GUI.</p>

<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li>
	<a rel="license" target="new" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a target="new" href="http://coweb.cc.gatech.edu/mediaComp-plan/101">
	Media Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a target="new" href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a target="new" href="http://drjava.sourceforge.net/">DrJava</a> 
	download site</li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, 
	the JavaPLT group at Rice University</a></li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava 
	Open Source License</a></li>
	<li>
	<a target="new" href="http://www.developer.com/java/article.php/1440571">The 
	Essence of OOP using Java, The this and super Keywords</a></li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java058.htm">
	Threads of Control</a></li>
	<li>
	<a target="new" href="http://java.sun.com/products/jfc/tsc/articles/painting/">
	Painting in AWT and Sw<font size="-1" face="Verdana, Arial, Helvetica">ing</font></a></li>
	<li><a target="new" href="http://en.wikipedia.org/wiki/Turtle_graphics/">
	Wikipedia Turtle Graphics</a></li>
	<li><a target="new" href="http://www.devx.com/tips/Tip/5809">IsA or HasA</a></li>
	<li>
	<a target="new" href="http://www.vectorcad3d.com/support/lathetutorial.htm">
	Vector Cad-Cam XI Lathe Tutorial</a></li>
	<li>
	<a target="new" href="http://local.wasp.uwa.edu.au/~pbourke/geometry/classification/">
	Classification of 3D to 2D projections</a></li>
	<li>
	<a href="http://en.wikipedia.org/wiki/Color_model">Color model</a> from 
Wikipedia</li>
	<li>
	<a href="../Light%20and%20color:%20%20an%20introduction">Light and color:&nbsp; 
an introduction</a> by Norman Koren</li>
	<li>
<a href="http://www.ncsu.edu/scivis/lessons/colormodels/color_models2.html#(HSV)">
Color Principles - Hue, Saturation, and Value</a></li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java200.htm">200</a> 
	Implementing the Model-View-Controller Paradigm using Observer and 
	Observable</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java300.htm">300</a> 
	Java 2D Graphics, Nested Top-Level Classes and Interfaces</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java302.htm">302</a> 
	Java 2D Graphics, The Point2D Class</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java304.htm">304</a> 
	Java 2D Graphics, The Graphics2D Class</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java306.htm">306</a> 
	Java 2D Graphics, Simple Affine Transforms</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java308.htm">308</a> 
	Java 2D Graphics, The Shape Interface, Part 1</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java310.htm">310</a> 
	Java 2D Graphics, The Shape Interface, Part 2</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java312.htm">312</a> 
	Java 2D Graphics, Solid Color Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java314.htm">314</a> 
	Java 2D Graphics, Gradient Color Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java316.htm">316</a> 
	Java 2D Graphics, Texture Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java318.htm">318</a> 
	Java 2D Graphics, The Stroke Interface</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java320.htm">320</a> 
	Java 2D Graphics, The Composite Interface and Transparency</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java322.htm">322</a> 
	Java 2D Graphics, The Composite Interface, GradientPaint, and Transparency</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java324.htm">324</a> 
	Java 2D Graphics, The Color Constructors and Transparency</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3403921">
	400</a> Processing Image Pixels using Java, Getting Started<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3423661">
	402</a> Processing Image Pixels using Java, Creating a Spotlight<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3441391">
	404</a> Processing Image Pixels Using Java: Controlling Contrast and 
	Brightness<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3512456">
	406</a> Processing Image Pixels, Color Intensity, Color Filtering, and Color 
	Inversion <br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3522711">
	408</a> Processing Image Pixels, Performing Convolution on Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3579206">
	410</a> Processing Image Pixels, Understanding Image Convolution in Java<br>
	<a target="new" href="http://www.developer.com/java/ent/article.php/3590351">
	412</a> Processing Image Pixels,<font size="-1" face="Verdana, Arial, Helvetica"> 
	Applying Image Convolution in Java, Part 1 <br>
	</font>
	<a target="new" href="http://www.developer.com/java/other/article.php/3596351">
	414</a> Processing Image Pixels, Applying Image Convolution in Java, Part 2<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3640776">
	416</a> Processing Image Pixels, An Improved Image-Processing Framework in 
	Java<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3650011">
	418</a> Processing Image Pixels, Creating Visible Watermarks in Java<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3645761">
	450</a> A Framework for Experimenting with Java 2D Image-Processing Filters<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3654171">
	452</a> Using the Java 2D LookupOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3670696">
	454</a> Using the Java 2D AffineTransformOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3681466">
	456</a> Using the Java 2D LookupOp Filter Class to Scramble and Unscramble 
	Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3686856">
	458</a> Using the Java 2D BandCombineOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3696676">
	460</a> Using the Java 2D ConvolveOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3698981">
	462</a> Using the Java 2D ColorConvertOp and RescaleOp Filter Classes to 
	Process Images</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java506.htm">506</a> 
	JavaBeans, Introspection</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/2114451">
	2100</a> Understanding Properties in Java and C#</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3495121">
	2300</a> Generics in J2SE, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3782471">
	340</a> Multimedia Programming with Java, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3788086">
	342</a> Getting Started with the Turtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3791291">
	344</a> Continuing with the SimpleTurtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3793401">
	346</a> Wrapping Up the SimpleTurtle Class: Multimedia Programming with Java</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java348.htm">348</a> 
	The Pen and PathSegment Classes: Multimedia Programming with Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3795761">
	349</a> A Pixel Editor Program in Java: Multimedia Programming with Java</li>
	<li>
	<a new href="http://www.developer.com/java/other/article.php/3798646%20target=">
	350</a> 3D Displays, Color Distance, and Edge Detection</li>
	<li><a href="http://www.developer.com/java/other/article.php/3801671">351</a> 
	A Slider-Controlled Softening Program for Digital Photos</li>
	<li><a href="http://www.developer.com/java/other/article.php/3806156">352</a> 
	Adding Animated Movement to Your Java Application</li>
	<li><a href="http://www.dickbaldwin.com/java/Java353.htm">353</a> A Slider-Controlled Sharpening Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java354.htm">354</a> The DigitalPicture Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java355.htm">355</a> The HSB Color Model</li>
	<li><a href="http://www.dickbaldwin.com/java/Java356.htm">356</a> The show Method and the PictureFrame Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java357.htm">357</a> An HSB 
	Color-Editing Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java358.htm">358</a> Applying 
	Affine Transforms to Picture Objects</li>
	<li><a href="http://www.dickbaldwin.com/java/Java359.htm">359</a> Creating a 
	lasso for editing digital photos in Java</li>
	<li><a href="http://www.dickbaldwin.com/java/Java360.htm">360</a> Wrapping 
	Up the SimplePicture Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java361.htm">361</a> A 
	Temperature and Tint Editing Program for Digital Photos</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the programs discussed in this lesson are shown in Listing 
13 and Listing 14 below.
<p>
<b><a name="Listing_13">Listing 13</a>. Source code for Ericson's PictureExplorer class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.image.*;
import javax.swing.border.*;
/**
 * Displays a picture and lets you explore the picture by
 * displaying the x, y, red, green, and blue values of the
 * pixel at the cursor when you click a mouse button or
 * press and hold a mouse button while moving the cursor.
 * It also lets you zoom in or out.  You can also type in
 * a x and y value to see the color at that location.
 *
 * Originally created for the Jython Environment for
 * Students (JES).
 * Modified to work with DrJava by Barbara Ericson
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Keith McDermottt, gte047w@cc.gatech.edu
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class PictureExplorer implements
       MouseMotionListener, ActionListener, MouseListener{

 // current x and y index
 private int xIndex = 0;
 private int yIndex = 0;

 //Main gui variables
 private JFrame pictureFrame;
 private JScrollPane scrollPane;

 //information bar variables
 private JLabel xLabel;
 private JButton xPrevButton;
 private JButton yPrevButton;
 private JButton xNextButton;
 private JButton yNextButton;
 private JLabel yLabel;
 private JTextField xValue;
 private JTextField yValue;
 private JLabel rValue;
 private JLabel gValue;
 private JLabel bValue;
 private JLabel colorLabel;
 private JPanel colorPanel;

 // menu components
 private JMenuBar menuBar;
 private JMenu zoomMenu;
 private JMenuItem twentyFive;
 private JMenuItem fifty;
 private JMenuItem seventyFive;
 private JMenuItem hundred;
 private JMenuItem hundredFifty;
 private JMenuItem twoHundred;
 private JMenuItem fiveHundred;

 /** The picture being explored */
 private DigitalPicture picture;

 /** The image icon used to display the picture */
 private ImageIcon scrollImageIcon;

 /** The image display */
 private ImageDisplay imageDisplay;

 /** the zoom factor (amount to zoom) */
 private double zoomFactor;

 /** the number system to use, 0 means starting at 0,
  *  1 means starting at 1 */
 private int numberBase=0;

 /**
  * Public constructor
  * @param picture the picture to explore
  */
 public PictureExplorer(DigitalPicture picture)
 {
   // set the fields
   this.picture=picture;
   zoomFactor=1;

   // create the window and set things up
   createWindow();
 }

 /**
  * Changes the number system to start at one
  */
 public void changeToBaseOne()
 {
   numberBase=1;
 }

 /**
  * Set the title of the frame
  *@param title the title to use in the JFrame
  */
 public void setTitle(String title)
 {
   pictureFrame.setTitle(title);
 }

 /**
  * Method to create and initialize the picture frame
  */
 private void createAndInitPictureFrame()
 {
   pictureFrame = new JFrame(); // create the JFrame
   //allow the user to resize it
   pictureFrame.setResizable(true);
    // use border layout
   pictureFrame.getContentPane().setLayout(
                                      new BorderLayout());
    // when close stop
   pictureFrame.setDefaultCloseOperation(
                                 JFrame.DISPOSE_ON_CLOSE);
   pictureFrame.setTitle(picture.getTitle());
   PictureExplorerFocusTraversalPolicy newPolicy =
                new PictureExplorerFocusTraversalPolicy();
   pictureFrame.setFocusTraversalPolicy(newPolicy);

 }

 /**
  * Method to create the menu bar, menus, and menu items
  */
 private void setUpMenuBar()
 {
   //create menu
   menuBar = new JMenuBar();
   zoomMenu = new JMenu("Zoom");
   twentyFive = new JMenuItem("25%");
   fifty = new JMenuItem("50%");
   seventyFive = new JMenuItem("75%");
   hundred = new JMenuItem("100%");
   hundred.setEnabled(false);
   hundredFifty = new JMenuItem("150%");
   twoHundred = new JMenuItem("200%");
   fiveHundred = new JMenuItem("500%");

   // add the action listeners
   twentyFive.addActionListener(this);
   fifty.addActionListener(this);
   seventyFive.addActionListener(this);
   hundred.addActionListener(this);
   hundredFifty.addActionListener(this);
   twoHundred.addActionListener(this);
   fiveHundred.addActionListener(this);

   // add the menu items to the menus
   zoomMenu.add(twentyFive);
   zoomMenu.add(fifty);
   zoomMenu.add(seventyFive);
   zoomMenu.add(hundred);
   zoomMenu.add(hundredFifty);
   zoomMenu.add(twoHundred);
   zoomMenu.add(fiveHundred);
   menuBar.add(zoomMenu);

   // set the menu bar to this menu
   pictureFrame.setJMenuBar(menuBar);
 }

 /**
  * Create and initialize the scrolling image
  */
 private void createAndInitScrollingImage()
 {
   scrollPane = new JScrollPane();

   BufferedImage bimg = picture.getBufferedImage();
   imageDisplay = new ImageDisplay(bimg);
   imageDisplay.addMouseMotionListener(this);
   imageDisplay.addMouseListener(this);
   imageDisplay.setToolTipText("Click a mouse button on "
                + "a pixel to see the pixel information");
   scrollPane.setViewportView(imageDisplay);
   pictureFrame.getContentPane().add(
                         scrollPane, BorderLayout.CENTER);
 }

 /**
  * Creates the JFrame and sets everything up
  */
 private void createWindow()
 {
   // create the picture frame and initialize it
   createAndInitPictureFrame();

   // set up the menu bar
   setUpMenuBar();

   //create the information panel
   createInfoPanel();

   //creates the scrollpane for the picture
   createAndInitScrollingImage();

   // show the picture in the frame at the size it needs
   // to be
   pictureFrame.pack();
   pictureFrame.setVisible(true);
 }

 /**
  * Method to set up the next and previous buttons for the
  * pixel location information
  */
 private void setUpNextAndPreviousButtons()
 {
   // create the image icons for the buttons
   Icon prevIcon = new ImageIcon(
         SoundExplorer.class.getResource("leftArrow.gif"),
                                        "previous index");
   Icon nextIcon = new ImageIcon(
        SoundExplorer.class.getResource("rightArrow.gif"),
                                            "next index");
   // create the arrow buttons
   xPrevButton = new JButton(prevIcon);
   xNextButton = new JButton(nextIcon);
   yPrevButton = new JButton(prevIcon);
   yNextButton = new JButton(nextIcon);

   // set the tool tip text
   xNextButton.setToolTipText(
                       "Click to go to the next x value");
   xPrevButton.setToolTipText(
                   "Click to go to the previous x value");
   yNextButton.setToolTipText(
                       "Click to go to the next y value");
   yPrevButton.setToolTipText(
                   "Click to go to the previous y value");

   // set the sizes of the buttons
   int prevWidth = prevIcon.getIconWidth() + 2;
   int nextWidth = nextIcon.getIconWidth() + 2;
   int prevHeight = prevIcon.getIconHeight() + 2;
   int nextHeight = nextIcon.getIconHeight() + 2;
   Dimension prevDimension =
                      new Dimension(prevWidth,prevHeight);
   Dimension nextDimension =
                     new Dimension(nextWidth, nextHeight);
   xPrevButton.setPreferredSize(prevDimension);
   yPrevButton.setPreferredSize(prevDimension);
   xNextButton.setPreferredSize(nextDimension);
   yNextButton.setPreferredSize(nextDimension);

   // handle previous x button press
   xPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex--;
       if (xIndex &lt; 0)
         xIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle previous y button press
   yPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex--;
       if (yIndex &lt; 0)
         yIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next x button press
   xNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex++;
       if (xIndex &gt;= picture.getWidth())
         xIndex = picture.getWidth() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next y button press
   yNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex++;
       if (yIndex &gt;= picture.getHeight())
         yIndex = picture.getHeight() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });
 }

 /**
  * Create the pixel location panel
  * @param labelFont the font for the labels
  * @return the location panel
  */
 public JPanel createLocationPanel(Font labelFont) {

   // create a location panel
   JPanel locationPanel = new JPanel();
   locationPanel.setLayout(new FlowLayout());
   Box hBox = Box.createHorizontalBox();

   // create the labels
   xLabel = new JLabel("X:");
   yLabel = new JLabel("Y:");

   // create the text fields
   xValue = new JTextField(
                 Integer.toString(xIndex + numberBase),6);
   xValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
       displayPixelInformation(
                       xValue.getText(),yValue.getText());
     }
   });
   yValue = new JTextField(
                 Integer.toString(yIndex + numberBase),6);
   yValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
      displayPixelInformation(
                       xValue.getText(),yValue.getText());
     }
   });

   // set up the next and previous buttons
   setUpNextAndPreviousButtons();

   // set up the font for the labels
   xLabel.setFont(labelFont);
   yLabel.setFont(labelFont);
   xValue.setFont(labelFont);
   yValue.setFont(labelFont);

   // add the items to the vertical box and the box to
   // the panel
   hBox.add(Box.createHorizontalGlue());
   hBox.add(xLabel);
   hBox.add(xPrevButton);
   hBox.add(xValue);
   hBox.add(xNextButton);
   hBox.add(Box.createHorizontalStrut(10));
   hBox.add(yLabel);
   hBox.add(yPrevButton);
   hBox.add(yValue);
   hBox.add(yNextButton);
   locationPanel.add(hBox);
   hBox.add(Box.createHorizontalGlue());

   return locationPanel;
 }

 /**
  * Create the color information panel
  * @param labelFont the font to use for labels
  * @return the color information panel
  */
 private JPanel createColorInfoPanel(Font labelFont)
 {
   // create a color info panel
   JPanel colorInfoPanel = new JPanel();
   colorInfoPanel.setLayout(new FlowLayout());

   // get the pixel at the x and y
   Pixel pixel = new Pixel(picture,xIndex,yIndex);

   // create the labels
   rValue = new JLabel("R: " + pixel.getRed());
   gValue = new JLabel("G: " + pixel.getGreen());
   bValue = new JLabel("B: " + pixel.getBlue());

   // create the sample color panel and label
   colorLabel = new JLabel("Color at location: ");
   colorPanel = new JPanel();
   colorPanel.setBorder(new LineBorder(Color.black,1));

   // set the color sample to the pixel color
   colorPanel.setBackground(pixel.getColor());

   // set the font
   rValue.setFont(labelFont);
   gValue.setFont(labelFont);
   bValue.setFont(labelFont);
   colorLabel.setFont(labelFont);
   colorPanel.setPreferredSize(new Dimension(25,25));

   // add items to the color information panel
   colorInfoPanel.add(rValue);
   colorInfoPanel.add(gValue);
   colorInfoPanel.add(bValue);
   colorInfoPanel.add(colorLabel);
   colorInfoPanel.add(colorPanel);

   return colorInfoPanel;
 }

 /**
  * Creates the North JPanel with all the pixel location
  * and color information
  */
 private void createInfoPanel()
 {
   // create the info panel and set the layout
   JPanel infoPanel = new JPanel();
   infoPanel.setLayout(new BorderLayout());

   // create the font
   Font largerFont =
                   new Font(infoPanel.getFont().getName(),
                       infoPanel.getFont().getStyle(),14);

   // create the pixel location panel
   JPanel locationPanel = createLocationPanel(largerFont);

   // create the color informaiton panel
   JPanel colorInfoPanel =
                         createColorInfoPanel(largerFont);

   // add the panels to the info panel
   infoPanel.add(BorderLayout.NORTH,locationPanel);
   infoPanel.add(BorderLayout.SOUTH,colorInfoPanel);

   // add the info panel
   pictureFrame.getContentPane().add(
                            BorderLayout.NORTH,infoPanel);
 }

 /**
  * Method to check that the current position is in the
  * viewing area and if not scroll to center the current
  * position if possible
  */
 public void checkScroll()
 {
   // get the x and y position in pixels
   int xPos = (int) (xIndex * zoomFactor);
   int yPos = (int) (yIndex * zoomFactor);

   // only do this if the image is larger than normal
   if (zoomFactor &gt; 1) {

     // get the rectangle that defines the current view
     JViewport viewport = scrollPane.getViewport();
     Rectangle rect = viewport.getViewRect();
     int rectMinX = (int) rect.getX();
     int rectWidth = (int) rect.getWidth();
     int rectMaxX = rectMinX + rectWidth - 1;
     int rectMinY = (int) rect.getY();
     int rectHeight = (int) rect.getHeight();
     int rectMaxY = rectMinY + rectHeight - 1;

     // get the maximum possible x and y index
     int maxIndexX = (int)(picture.getWidth()*zoomFactor)
                           - rectWidth - 1;
     int maxIndexY = (int)(picture.getHeight()*zoomFactor)
                           - rectHeight - 1;

     // calculate how to position the current position in
     // the middle of the viewing area
     int viewX = xPos - (int) (rectWidth / 2);
     int viewY = yPos - (int) (rectHeight / 2);

     // reposition the viewX and viewY if outside allowed
     // values
     if (viewX &lt; 0)
       viewX = 0;
     else if (viewX &gt; maxIndexX)
       viewX = maxIndexX;
     if (viewY &lt; 0)
       viewY = 0;
     else if (viewY &gt; maxIndexY)
       viewY = maxIndexY;

     // move the viewport upper left point
     viewport.scrollRectToVisible(
         new Rectangle(viewX,viewY,rectWidth,rectHeight));
   }
 }

 /**
  * Zooms in the on picture by scaling the image.
  * It is extremely memory intensive.
  * @param factor the amount to zoom by
  */
 public void zoom(double factor)
 {
   // save the current zoom factor
   zoomFactor = factor;

   // calculate the new width and height and get an image
   // that size
   int width = (int) (picture.getWidth()*zoomFactor);
   int height = (int) (picture.getHeight()*zoomFactor);
   BufferedImage bimg = picture.getBufferedImage();

   // set the scroll image icon to the new image
   imageDisplay.setImage(bimg.getScaledInstance(width,
                           height, Image.SCALE_DEFAULT));
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
   imageDisplay.revalidate();
   checkScroll();  // check if need to reposition scroll
 }

 /**
  * Repaints the image on the scrollpane.
  */
 public void repaint()
 {
   pictureFrame.repaint();
 }

 //****************************************//
 //               Event Listeners          //
 //****************************************//

 /**
  * Called when the mouse is dragged (button held down and
  * moved)
  * @param e the mouse event
  */
 public void mouseDragged(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method to check if the given x and y are in the
  * picture
  * @param x the horiztonal value
  * @param y the vertical value
  * @return true if the x and y are in the picture and
  * false otherwise
  */
 private boolean isLocationInPicture(int x, int y)
 {
   boolean result = false; // the default is false
   if (x &gt;= 0 && x &lt; picture.getWidth() &&
       y &gt;= 0 && y &lt; picture.getHeight())
     result = true;

   return result;
 }

 /**
  * Method to display the pixel information from the
  * passed x and y but also converts x and y from strings
  * @param xString the x value as a string from the user
  * @param yString the y value as a string from the user
  */
 public void displayPixelInformation(
                           String xString, String yString)
 {
   int x = -1;
   int y = -1;
   try {
     x = Integer.parseInt(xString);
     x = x - numberBase;
     y = Integer.parseInt(yString);
     y = y - numberBase;
   } catch (Exception ex) {
   }

   if (x &gt;= 0 && y &gt;= 0) {
     displayPixelInformation(x,y);
   }
 }

 /**
  * Method to display pixel information for the passed x
  * and y
  * @param pictureX the x value in the picture
  * @param pictureY the y value in the picture
  */
 private void displayPixelInformation(
                               int pictureX, int pictureY)
 {
   // check that this x and y is in range
   if (isLocationInPicture(pictureX, pictureY))
   {
     // save the current x and y index
     xIndex = pictureX;
     yIndex = pictureY;

     // get the pixel at the x and y
     Pixel pixel = new Pixel(picture,xIndex,yIndex);

     // set the values based on the pixel
     xValue.setText(Integer.toString(
                                   xIndex  + numberBase));
     yValue.setText(Integer.toString(
                                    yIndex + numberBase));
     rValue.setText("R: " + pixel.getRed());
     gValue.setText("G: " + pixel.getGreen());
     bValue.setText("B: " + pixel.getBlue());
     colorPanel.setBackground(new Color(pixel.getRed(),
                                        pixel.getGreen(),
                                        pixel.getBlue()));

   }
   else
   {
     clearInformation();
   }

   // notify the image display of the current x and y
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
 }

 /**
  * Method to display pixel information based on a mouse
  * event
  * @param e a mouse event
  */
 private void displayPixelInformation(MouseEvent e)
 {

   // get the cursor x and y
   int cursorX = e.getX();
   int cursorY = e.getY();

   // get the x and y in the original (not scaled image)
   int pictureX = (int)(cursorX/zoomFactor + numberBase);
   int pictureY = (int)(cursorY/zoomFactor + numberBase);

   // display the information for this x and y
   displayPixelInformation(pictureX,pictureY);

 }

 /**
  * Method to clear the labels and current color and
  * reset the  current index to -1
  */
 private void clearInformation()
 {
   xValue.setText("N/A");
   yValue.setText("N/A");
   rValue.setText("R: N/A");
   gValue.setText("G: N/A");
   bValue.setText("B: N/A");
   colorPanel.setBackground(Color.black);
   xIndex = -1;
   yIndex = -1;
 }

 /**
  * Method called when the mouse is moved with no buttons
  * down
  * @param e the mouse event
  */
 public void mouseMoved(MouseEvent e)
 {}

 /**
  * Method called when the mouse is clicked
  * @param e the mouse event
  */
 public void mouseClicked(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method called when the mouse button is pushed down
  * @param e the mouse event
  */
 public void mousePressed(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method called when the mouse button is released
  * @param e the mouse event
  */
 public void mouseReleased(MouseEvent e)
 {
 }

 /**
  * Method called when the component is entered (mouse
  * moves over it)
  * @param e the mouse event
  */
 public void mouseEntered(MouseEvent e)
 {
 }

 /**
  * Method called when the mouse moves over the component
  * @param e the mouse event
  */
 public void mouseExited(MouseEvent e)
 {
 }

 /**
  * Method to enable all menu commands
  */
 private void enableZoomItems()
 {
   twentyFive.setEnabled(true);
   fifty.setEnabled(true);
   seventyFive.setEnabled(true);
   hundred.setEnabled(true);
   hundredFifty.setEnabled(true);
   twoHundred.setEnabled(true);
   fiveHundred.setEnabled(true);
 }

 /**
  * Controls the zoom menu bar
  *
  * @param a the ActionEvent
  */
 public void actionPerformed(ActionEvent a)
 {

   if(a.getActionCommand().equals("Update"))
   {
     this.repaint();
   }

   if(a.getActionCommand().equals("25%"))
   {
     this.zoom(.25);
     enableZoomItems();
     twentyFive.setEnabled(false);
   }

   if(a.getActionCommand().equals("50%"))
   {
     this.zoom(.50);
     enableZoomItems();
     fifty.setEnabled(false);
   }

   if(a.getActionCommand().equals("75%"))
   {
     this.zoom(.75);
     enableZoomItems();
     seventyFive.setEnabled(false);
   }

   if(a.getActionCommand().equals("100%"))
   {
     this.zoom(1.0);
     enableZoomItems();
     hundred.setEnabled(false);
   }

   if(a.getActionCommand().equals("150%"))
   {
     this.zoom(1.5);
     enableZoomItems();
     hundredFifty.setEnabled(false);
   }

   if(a.getActionCommand().equals("200%"))
   {
     this.zoom(2.0);
     enableZoomItems();
     twoHundred.setEnabled(false);
   }

   if(a.getActionCommand().equals("500%"))
   {
     this.zoom(5.0);
     enableZoomItems();
     fiveHundred.setEnabled(false);
   }
 }

 /**
  * Test Main.  It will ask you to pick a file and then
  * show it
  */
 public static void main( String args[])
 {
   Picture p = new Picture(FileChooser.pickAFile());
   PictureExplorer test = new PictureExplorer(p);

 }

 /**
  * Class for establishing the focus for the textfields
  */
 private class PictureExplorerFocusTraversalPolicy
                 extends FocusTraversalPolicy {

        /**
         * Method to get the next component for focus
         */
        public Component getComponentAfter(
                                 Container focusCycleRoot,
                                 Component aComponent) {
            if (aComponent.equals(xValue))
              return yValue;
            else
              return xValue;
        }

        /**
         * Method to get the previous component for focus
         */
         public Component getComponentBefore(
                                 Container focusCycleRoot,
                                 Component aComponent) {
            if (aComponent.equals(xValue))
              return yValue;
            else
              return xValue;
         }

         public Component getDefaultComponent(
                               Container focusCycleRoot) {
            return xValue;
        }

        public Component getLastComponent(
                               Container focusCycleRoot) {
            return yValue;
        }

        public Component getFirstComponent(
                               Container focusCycleRoot) {
            return xValue;
        }
    }//end PictureExplorerFocusTraversalPolicy inner class

}//end PictureExplorer class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_14">Listing 14</a>. Source code for the program named Java362a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>/*Program Java362a
Copyright R.G.Baldwin 2009

The purpose of this program is to support an explanation 
of the PictureExplorer class.

A Picture object having dimensions of 450x345 pixels is 
created. The the show method and the explore method are 
called on the object to produce two different screen 
displays of the picture.

The explore method simply creates a new object of the
PictureExplorer class.

Tested using Windows Vista Premium Home edition and
Ericso's multimedia library.
*********************************************************/

public class Main{
  public static void main(String[] args){
    //Construct a new 460x345 Picture object.
    Picture pix1 = new Picture(&quot;ScaledBeach460x345.jpg&quot;);
    pix1.show();//display the picture in the show format
    //Display the picture again in the explore format.
    pix1.explore();
  }//end main method
}//end class Main</pre>
      </td>
    </tr>
  </tbody>
</table>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2009, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
