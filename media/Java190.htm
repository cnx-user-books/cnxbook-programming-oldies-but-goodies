<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MSOFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Swing, Creating and Using Trees<!--endTitle--></H2>
<P>Java Programming, Lecture Notes # 190, Revised 08/22/99. </P>

<UL>
<LI><A HREF="#Preface">Preface</A> </LI>
<LI><A HREF="#Introduction">Introduction</A> </LI>
<LI><A HREF="#Overview">Overview</A> </LI>
<LI><A HREF="#Sample_Program">Sample Program</A> </LI>

<UL>
<LI><A HREF="#Interesting_Code_Fragments">Interesting Code Fragments</A> </LI>
<LI><A HREF="#Program_Listing">Program Listing</A> </LI></UL>
</UL>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Advanced Java Programming</B></U> classes at ACC will be responsible for knowing and understanding all of the material in this lesson beginning with the spring semester of 1999. </P>
<P>This lesson was originally written on October 8, 1998, using the JDK 1.1.6 download package along with Swing 1.0.3. The purpose of this lesson is to illustrate the use of the <B>JTree</B> class and associated classes for creating and using simple trees. </P>
<P>On 3/10/99, the import directives in the sample program were modified for JDK 1.2 compatibility. The name of the modified program is Tree07A.java. The modified program was confirmed to compile and run properly under JDK 1.2.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Introduction"></A>Introduction</H2>
</FONT><P>Swing makes it possible to create tree structures similar to Windows Explorer.&nbsp; The tree can be collapsed and expanded to hide or expose inner nodes in the tree.&nbsp; The <I>look</I> of the tree is subject to Swing's <I>pluggable look and feel</I>.&nbsp; The sample program in this lesson uses a Motif look and feel. It can easily be changed by modifying only one statement. </P>
<P>A tree can be, but doesn't have to be, a very complex structure.&nbsp; It is possible for the programmer to provide the data model that maintains the data for the tree in a Model-View-Controller sense.&nbsp; However, a simple default model is readily available and it isn't necessary to provide your own model.&nbsp; A series of subsequent lessons on using the <B>JList</B> class discuss these possibilities in detail.&nbsp; (<B>JList</B> and <B>JTree</B> are very similar from a programming viewpoint.) </P>
<P>It is also possible, but not necessary, for the programmer to define how the individual nodes in the tree are to be rendered when it is necessary to redraw the tree.&nbsp; This capability is also discussed in detail in subsequent lessons on both trees and lists. </P>
<P>The nodes in the sample program in this lesson are rendered using a default capability to label each node with a <B>String</B> object, specified as a parameter to the node constructor. </P>
<P>Several different types of events can be generated and handled when the user performs various actions on a Swing tree.&nbsp; The sample program in this lesson uses this event capability to extract and display information about a leaf whenever the user selects the leaf.&nbsp; When the user selects a node that is not a leaf, the event is ignored. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Overview"></A>Overview</H2>
</FONT><P>Swing implements a modified form of the Model-View-Controller (MVC) paradigm.&nbsp; As of October 1998, most of the current literature on Swing trees presents them in this paradigm.&nbsp; While in some cases, the MVC paradigm probably leads to better program design, it also leads to additional programming complexity and requires a much higher level of skill and understanding on the part of the programmer. </P>
<P>It is often possible to use Swing components in your programs without getting explicitly involved in the MVC paradigm.&nbsp; This lesson shows you how to create and use Swing trees in an effective manner without any consideration of MVC. </P>
<P>Swing also makes it possible for the programmer to provide rendering specifications for the individual nodes of the tree involving, for example, mixtures of images and text.&nbsp; This also leads to considerable programming complexity.&nbsp; However, if you are satisfied with using simple text strings to render the nodes in accordance with a specified Programmable Look and Feel, you can avoid this complexity as well.&nbsp; In fact, reduced to this level, creating and using a tree isn't much more difficult than placing a bunch of <B>JButton</B> objects in a container, giving them labels, and responding to action events on the buttons.&nbsp; At this level, creating and using a tree is possibly simpler than creating and using a typical Swing menu structure. </P>
<P>In addition to the use of trees and selection listener objects, this lesson also illustrates the use of scroll panes. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Sample_Program"></A>Sample Program</H2>
</FONT><P>This program illustrates the creation and use of a very simple but also very useful <B>JTree</B> structure. </P>
<P>The values of the nodes, including the leaves, are hard coded by passing a <B>String</B> as a parameter when the nodes are instantiated.&nbsp; The parent-child relationships among the nodes are also hard coded when the tree is instantiated. </P>
<P>A hashtable is used to associate the values of the leaves with information about the leaves.&nbsp; The values of the leaves are the keys in the hashtable.&nbsp; The items of information about the leaves are the values in the hashtable.&nbsp; Although it isn't illustrated by the program, it would be very easy to modify the values in the hashtable at runtime and therefore modify the information about the leaves at runtime. </P>
<P>The hashtable is where you would put the information that your&nbsp; program would use to invoke some particular action when&nbsp; the user selects a leaf.&nbsp; In this sample program, the information is simply displayed.&nbsp; However, the action can be just about anything that you want it to be as long as the information extracted from the hashtable is sufficient to support that action. </P>
<P>The program was tested using JDK 1.1.6 and Swing 1.0.3 under Win95. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Interesting_Code_Fragments"></A>Interesting Code Fragments</H3>
</FONT><P>The program is written as a single class, containing several inner classes and several instance variables.&nbsp; The first code fragments shows some of the instance variables so that you will recognize them when you see them being used later.&nbsp; The comments pretty well explain the purpose of each of the instance variables so I won't elaborate on that here. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>public class Tree07 extends JFrame{
//public class Tree07{

&nbsp; //The following hashtable is used to associate tree leaf
&nbsp; // values with information about the leaf.&nbsp;&nbsp;
&nbsp; Hashtable <B>theHashtable</B> = new Hashtable();

&nbsp; //Absolute coordinate info in pixels.
&nbsp; int <B>frameWidth</B> = 350;
&nbsp; int <B>frameHeight</B> = 350;
&nbsp;&nbsp;
&nbsp; //The number of rows in the tree when it is fully
&nbsp; // expanded
&nbsp; int <B>numberRows</B> = 19;

&nbsp; //Reference to the JTree object
&nbsp; JTree <B>tree</B>;
&nbsp;&nbsp;&nbsp;
&nbsp; //The following is a reference to a panel which contains
&nbsp; // the tree.
&nbsp; JPanel <B>treePanel</B>;
&nbsp;&nbsp;
&nbsp; //The following is a reference to a class which is used
&nbsp; // to cause the look &amp; feel of the program to emulate
&nbsp; // Motif.
&nbsp; String <B>plafClassName</B>&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //For future reference, three available plaf&nbsp;
&nbsp; // implementations are:
&nbsp; //com.sun.java.swing.plaf.metal.MetalLookAndFeel
&nbsp; //com.sun.java.swing.plaf.motif.MotifLookAndFeel
&nbsp; //com.sun.java.swing.plaf.windows.WindowsLookAndFeel&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; JLabel <B>display</B>;//selections are displayed here</PRE></TD>
</TR>
</TABLE>

<P>The following fragment is a simple <B>main()</B> method that can be used to test this program on a stand-alone basis. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public static void <B>main</B>(String args[]) {
&nbsp;&nbsp;&nbsp; <B>new Tree07()</B>;
&nbsp; }//end main</PRE></TD>
</TR>
</TABLE>

<P>The following fragment shows the beginning of the constructor.&nbsp; It also shows two of the thirteen statements that are used to populate the hashtable with leaf values and information about the leaves.&nbsp; You can view the entire set of statements used to populate the hashtable in the complete listing of the program that follows later. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public Tree07 () {//constructor
&nbsp;&nbsp;&nbsp; theHashtable.<B>put</B>("Cabbage","Good in slaw");
&nbsp;&nbsp;&nbsp; theHashtable.<B>put</B>("Squash","The yellow variety");
&nbsp;&nbsp;&nbsp; //Remaining hashtable population statements omitted
&nbsp;&nbsp;&nbsp; // for brevity</PRE></TD>
</TR>
</TABLE>

<P>A little later, I will instantiate a node object for every node in the tree.&nbsp; I need a set of reference variables to refer to those nodes.&nbsp; The following fragment instantiates an array of reference variables of type <B>DefaultMutableTreeNode,</B> which is the class from which tree nodes are instantiated.&nbsp; The elements in this array will be used to refer to the nodes in the tree. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; <B>DefaultMutableTreeNode</B>[] theTreeNodes =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode[numberRows];</PRE></TD>
</TR>
</TABLE>

<P>The <B>DefaultMutableTreeNode</B> class provides three constructors.&nbsp; A description of the constructor that I elected to use is shown below. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P><B>DefaultMutableTreeNode</B>(java.lang.Object userObject)&nbsp; </P>
<BLOCKQUOTE>Creates a tree node with no parent and&nbsp; no children, but which allows children, and initializes it with the specified user object.</BLOCKQUOTE></TD>
</TR>
</TABLE>

<P>As you can see, this constructor allows the programmer to specify any object to be used as the value for the node.&nbsp; I elected to use simple <B>String</B> objects for the values of the nodes.&nbsp; You might want to experiment with other types of objects as parameters to this constructor just to see what you get. </P>
<P>The following fragment shows three of nineteen similar statements used to instantiate the nodes for the tree.&nbsp; Each of these statements instantiates a new node object, gives it a <B>String</B> for a value, and assigns it to one if the reference variables in the array that was instantiated earlier.&nbsp; You can view the omitted statements in the complete listing of the program later. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; theTreeNodes[0] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>new DefaultMutableTreeNode("Sample Tree")</B>;
&nbsp;&nbsp;&nbsp; theTreeNodes[1] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Vegetables");
&nbsp;&nbsp;&nbsp; theTreeNodes[2] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Cabbage");
&nbsp;&nbsp;&nbsp; //Repetitive statements omitted for brevity</PRE></TD>
</TR>
</TABLE>

<P>The next fragment is quite possibly the most complicated part of the entire program.&nbsp; These statements define the parent-child relationship among the nodes.&nbsp; The <B>add()</B> method is used to cause one node to become a child of another node.&nbsp; I didn't omit any of the statements from this group.&nbsp; I suggest that you use a pencil and paper and see if you can sketch out the structure of the tree based on this information.&nbsp; That will help you to understand how to do it yourself later. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=474>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; theTreeNodes[0].<B>add</B>(theTreeNodes[1]);
&nbsp;&nbsp;&nbsp; theTreeNodes[1].add(theTreeNodes[2]);
&nbsp;&nbsp;&nbsp; theTreeNodes[1].add(theTreeNodes[3]);
&nbsp;&nbsp;&nbsp; theTreeNodes[1].add(theTreeNodes[4]);
&nbsp;&nbsp;&nbsp; theTreeNodes[0].add(theTreeNodes[5]);
&nbsp;&nbsp;&nbsp; theTreeNodes[5].add(theTreeNodes[6]);
&nbsp;&nbsp;&nbsp; theTreeNodes[6].add(theTreeNodes[7]);
&nbsp;&nbsp;&nbsp; theTreeNodes[6].add(theTreeNodes[8]);
&nbsp;&nbsp;&nbsp; theTreeNodes[6].add(theTreeNodes[9]);
&nbsp;&nbsp;&nbsp; theTreeNodes[5].add(theTreeNodes[10]);
&nbsp;&nbsp;&nbsp; theTreeNodes[10].add(theTreeNodes[11]);
&nbsp;&nbsp;&nbsp; theTreeNodes[10].add(theTreeNodes[12]);
&nbsp;&nbsp;&nbsp; theTreeNodes[10].add(theTreeNodes[13]);
&nbsp;&nbsp;&nbsp; theTreeNodes[0].add(theTreeNodes[14]);
&nbsp;&nbsp;&nbsp; theTreeNodes[14].add(theTreeNodes[15]);
&nbsp;&nbsp;&nbsp; theTreeNodes[14].add(theTreeNodes[16]);
&nbsp;&nbsp;&nbsp; theTreeNodes[14].add(theTreeNodes[17]);
&nbsp;&nbsp;&nbsp; theTreeNodes[14].add(theTreeNodes[18]);</PRE></TD>
</TR>
</TABLE>

<P>A little later, I will discuss the root node of the tree.&nbsp; If you sketched this tree properly, you will have seen that the node referenced by <B>theTreeNodes[0]</B> is the root of this tree.&nbsp; All other nodes are descendants of this node. </P>
<P>As you will see shortly when I discuss the <B>TreePanel</B> class, this program instantiates a <B>JTree</B> object which constitutes the tree, places that object in a <B>JScrollPane</B> object to provide scrolling capability, and places the scroll pane in a <B>JPanel</B> object.&nbsp; This results in an encapsulated tree object of type <B>TreePanel</B> that can be placed in any container that will accommodate a <B>JPanel</B>&nbsp; In this case, the <B>TreePanel</B> is simply placed in the outer <B>JFrame</B>. </P>
<P>The next fragment shows the instantiation of the <B>TreePanel</B> object.&nbsp; Note that the root node of the tree is passed as a parameter to the constructor.&nbsp; You will see why later when I discuss the constructor for <B>TreePanel</B>. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; treePanel = new <B>TreePanel</B>(<B>theTreeNodes[0]</B>);</PRE></TD>
</TR>
</TABLE>

<P>A tree wouldn't be worth much if you couldn't cause some action to happen by selecting one of its nodes.&nbsp; The following fragment instantiates a <B>TreeSelectionListener</B> object and registers it on the tree.&nbsp; </P>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=480>
<TR><TD VALIGN="TOP" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; tree.addTreeSelectionListener(new MyTreeListener());</PRE></TD>
</TR>
</TABLE>

<P>This is standard <I>Delegation Event Model</I> material.&nbsp; The listener defines the <B>valueChanged()</B> method of the <B>TreeSelectionListener</B> interface which is invoked whenever a different node is selected using the mouse or an arrow key.&nbsp; We will see the definition of the listener class a little later. </P>
<P>I'm going to skip some code that:</P>

<UL>
<LI>Places the <B>TreePanel</B> object in the content pane of the frame, </LI>
<LI>Puts a <B>JLabel</B> object at the bottom of the frame to display selection information, </LI>
<LI>Sets the size of the frame, </LI>
<LI>Gives it a title, </LI>
<LI>Makes it visible, and </LI>
<LI>Registers an anonymous listener object to terminate the program when the user closes the frame. </LI></UL>

<P>The next fragment contains the definition of the listener class used earlier to instantiate a <B>TreeSelectionListener</B> object and register it on the tree. </P>
<P>The code uses methods of the <B>TreeSelectionEvent</B> object to identify the node that was selected. </P>
<P>If the node is not a leaf, the selection is ignored.&nbsp; If it is a leaf, the value of the node is obtained and used as the key to extract a data value from the hashtable.&nbsp; This value is then displayed in a <B>JLabel</B> object at the bottom of the frame (that we skipped over earlier). </P>
<P>As I mentioned, this is all pretty standard event handling material.&nbsp; All that is required is to search the documentation until you find the methods that you need to accomplish your objectives. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; class MyTreeListener <B>implements TreeSelectionListener</B>{
&nbsp;&nbsp;&nbsp; public void <B>valueChanged</B>(<B>TreeSelectionEvent</B> e) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DefaultMutableTreeNode theNode =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (DefaultMutableTreeNode)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>(e.getPath().getLastPathComponent()</B>);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (theNode.<B>isLeaf</B>()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display.setText((String)theHashtable.<B>get</B>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>theNode.getUserObject()</B>));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; }//end valueChanged() method
&nbsp; }//end inner class MyTreeListener</PRE></TD>
</TR>
</TABLE>

<P>That brings us to the most important fragment of all:&nbsp; the one that is used to instantiate the tree.&nbsp; When used in this simple manner, it turns out to be surprisingly easy.&nbsp; Earlier I instantiated an array of references to the nodes of the tree.&nbsp; Then I used the <B>add()</B> method to add children to their parent and establish the structure of the tree.&nbsp; One of the nodes must be the root, which is an ancestor of all other nodes. </P>
<P>All the <B>JTree</B> constructor needs to construct a tree is a reference to that root node.&nbsp; Once you instantiate a tree based on the root node, the behavior of the tree that involves the ability to collapse and expand the tree or sub-trees within the tree becomes available with no additional programming effort on your part.&nbsp; All you have to do at that point is to package the tree in a way that is suitable for your user. </P>
<P>The constructor for this class receives the root node as a parameter.&nbsp; This root node is passed to a <B>JTree</B> constructor to construct a <B>JTree</B> object that is the actual tree.&nbsp; The tree is placed in a <B>JScrollPane</B> object to provide vertical and horizontal scrolling capability.&nbsp; The scroll pane is added to a <B>JPanel</B> object that can then be placed in any container that will accommodate a <B>JPanel</B> as a component. </P>
<P>For example, if you had some reason to do so, you could place the <B>TreePanel</B> object in a <B>JButton</B>. I've tried it, and it really works. </P>
<P>The Pluggable Look and Feel variable initialized earlier is used to set the look and feel of the tree to Motif.&nbsp; I also provided two other possibilities earlier in the code that you can use to experiment with the look and feel by editing one statement in the code. </P>
<P>Finally, the code makes certain that the tree is fully expanded before terminating the constructor. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=474>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; class <B>TreePanel</B> <B>extends JPanel</B>{
&nbsp;&nbsp;&nbsp; public <B>TreePanel</B>(TreeNode <B>root</B>){//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setLayout(new BorderLayout());

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create tree
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<B> tree = new JTree(root);

</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Put the tree in a scrollable pane and add the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // scrollable pane to the JPanel container.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JScrollPane sp = <B>new JScrollPane(tree)</B>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>add</B>(sp, BorderLayout.CENTER);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //<B>Set the look and feel</B> to emulate something
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIManager.setLookAndFeel(plafClassName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception ex){System.out.println(ex);}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SwingUtilities.updateComponentTreeUI(this);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Expand the tree
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; numberRows; cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tree.<B>expandRow</B>(cnt);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp; }//end inner class TreePanel
&nbsp; //=====================================================//
}//end class Tree07</PRE></TD>
</TR>
</TABLE>

<P>That's really all there is to creating and using simple trees in Swing.&nbsp; </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Program_Listing"></A>Program Listing</H3>
</FONT><P>This section contains a complete listing of the program and you can view any code in that listing that was omitted from the above fragments. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=477>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Tree07.java
Revised 10/08/98

This program illustrates the creation of a very simple but
also very useful JTree structure.

The values of the nodes, including the leaves are hard
coded when the nodes are instantiated.&nbsp; The parent-child
relationships among the nodes are also hard coded when
the tree is instantiated.

A hashtable is used to associate the values of the leaves
with information about the leaves.&nbsp; The values of the
leaves are the keys in the hashtable.&nbsp; The items of&nbsp;
information about the leaves are the values in the&nbsp;
hashtable.&nbsp; Although the program doesn't illustrate it,
it would be very practical to modify the values in the
hashtable at runtime and therefore modify the information
about the leaves at runtime.&nbsp;&nbsp;

This is where you would put the information that your&nbsp;
program would use to invoke some particular action when&nbsp;
the user selects a leaf.&nbsp; In this sample program, the
information is simply displayed.&nbsp; However, the action
could be just about anything that you wanted as long as
the information in the value object in the hashtable
were sufficient to support that action.

Tested using JDK 1.1.6 and Swing 1.0.3 under Win95.
**********************************************************/

import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import com.sun.java.swing.*;
import com.sun.java.swing.tree.*;
import com.sun.java.swing.event.*;

//=======================================================//
public class Tree07 extends JFrame{
//public class Tree07{

&nbsp; //The following hashtable is used to associate tree leaf
&nbsp; // values with information about the leaf.&nbsp;&nbsp;
&nbsp; Hashtable theHashtable = new Hashtable();

&nbsp; //Absolute coordinate info in pixels.
&nbsp; int frameWidth = 350;
&nbsp; int frameHeight = 350;
&nbsp;&nbsp;
&nbsp; //The number of rows in the tree when it is fully
&nbsp; // expanded
&nbsp; int numberRows = 19;

&nbsp; //Reference to the JTree object
&nbsp; JTree tree;
&nbsp;&nbsp;
&nbsp;
&nbsp; //The following is a reference to a panel which contains
&nbsp; // the tree.
&nbsp; //TreePanel treePanel;
&nbsp; JPanel treePanel;
&nbsp;&nbsp;
&nbsp; //The following is a reference to a class which is used
&nbsp; // to cause the look &amp; feel of the program to emulate
&nbsp; // Motif.
&nbsp; String plafClassName&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = "com.sun.java.swing.plaf.motif.MotifLookAndFeel";
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; /*
&nbsp; For future reference, the three plaf implementations are:
&nbsp;&nbsp;
&nbsp; com.sun.java.swing.plaf.metal.MetalLookAndFeel
&nbsp; com.sun.java.swing.plaf.motif.MotifLookAndFeel
&nbsp; com.sun.java.swing.plaf.windows.WindowsLookAndFeel&nbsp;&nbsp;
&nbsp; */
&nbsp;&nbsp;
&nbsp; JLabel display;//selections are displayed here
&nbsp; //-----------------------------------------------------//

&nbsp; //The following main method can be used to test this&nbsp;
&nbsp; // class on a stand-alone basis.
&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp; //Instantiate the top-level JFrame object.
&nbsp;&nbsp;&nbsp; new Tree07();
&nbsp; }//end main
&nbsp; //-----------------------------------------------------//

&nbsp; public Tree07 () {//constructor
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Association of leaf values with leaf information
&nbsp;&nbsp;&nbsp; theHashtable.put("Cabbage","Good in slaw");
&nbsp;&nbsp;&nbsp; theHashtable.put("Squash","The yellow variety");
&nbsp;&nbsp;&nbsp; theHashtable.put("Onion","Not too hot");
&nbsp;&nbsp;&nbsp; theHashtable.put("Squirrel","Likes to store nuts");
&nbsp;&nbsp;&nbsp; theHashtable.put("Rabbit","Runs fast");
&nbsp;&nbsp;&nbsp; theHashtable.put("Fox","Crazy like a ...");
&nbsp;&nbsp;&nbsp; theHashtable.put("Horse","Fun to ride");
&nbsp;&nbsp;&nbsp; theHashtable.put("Pig","Lives in mud");
&nbsp;&nbsp;&nbsp; theHashtable.put("Cow","Gives us milk");
&nbsp;&nbsp;&nbsp; theHashtable.put("Peach","From Georgia");
&nbsp;&nbsp;&nbsp; theHashtable.put("Grape","Saueeze into wine");
&nbsp;&nbsp;&nbsp; theHashtable.put("Apple","Red delicious");
&nbsp;&nbsp;&nbsp; theHashtable.put("Orange","Very juicy");


&nbsp;&nbsp;&nbsp; //Create an array of references to tree node
&nbsp;&nbsp;&nbsp; // references.
&nbsp;&nbsp;&nbsp; DefaultMutableTreeNode[] theTreeNodes =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode[numberRows];

&nbsp;&nbsp;&nbsp; //The following code instantiates the actual nodes,
&nbsp;&nbsp;&nbsp; // gives them a String value, and assigns them to
&nbsp;&nbsp;&nbsp; // the reference variables in the array of node
&nbsp;&nbsp;&nbsp; // references.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; theTreeNodes[0] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Sample Tree");
&nbsp;&nbsp;&nbsp; theTreeNodes[1] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Vegetables");
&nbsp;&nbsp;&nbsp; theTreeNodes[2] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Cabbage");
&nbsp;&nbsp;&nbsp; theTreeNodes[3] = new DefaultMutableTreeNode("Squash");
&nbsp;&nbsp;&nbsp; theTreeNodes[4] = new DefaultMutableTreeNode("Onion");
&nbsp;&nbsp;&nbsp; theTreeNodes[5] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Animals");
&nbsp;&nbsp;&nbsp; theTreeNodes[6] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Forrest");
&nbsp;&nbsp;&nbsp; theTreeNodes[7] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Squirrel");
&nbsp;&nbsp;&nbsp; theTreeNodes[8] = new DefaultMutableTreeNode("Rabbit");
&nbsp;&nbsp;&nbsp; theTreeNodes[9] = new DefaultMutableTreeNode("Fox");
&nbsp;&nbsp;&nbsp; theTreeNodes[10] = new DefaultMutableTreeNode("Farm");
&nbsp;&nbsp;&nbsp; theTreeNodes[11] = new DefaultMutableTreeNode("Horse");
&nbsp;&nbsp;&nbsp; theTreeNodes[12] = new DefaultMutableTreeNode("Pig");
&nbsp;&nbsp;&nbsp; theTreeNodes[13] = new DefaultMutableTreeNode("Cow");
&nbsp;&nbsp;&nbsp; theTreeNodes[14] = new DefaultMutableTreeNode("Fruit");
&nbsp;&nbsp;&nbsp; theTreeNodes[15] = new DefaultMutableTreeNode("Peach");
&nbsp;&nbsp;&nbsp; theTreeNodes[16] = new DefaultMutableTreeNode("Grape");
&nbsp;&nbsp;&nbsp; theTreeNodes[17] = new DefaultMutableTreeNode("Apple");
&nbsp;&nbsp;&nbsp; theTreeNodes[18] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DefaultMutableTreeNode("Orange");

&nbsp;&nbsp;&nbsp; //Construct the tree using the nodes created above.
&nbsp;&nbsp;&nbsp; // These statements establish ParentChild relationships
&nbsp;&nbsp;&nbsp; // among the nodes.&nbsp; Children are added to their
&nbsp;&nbsp;&nbsp; // parents.
&nbsp;&nbsp;&nbsp; theTreeNodes[0].add(theTreeNodes[1]);
&nbsp;&nbsp;&nbsp; theTreeNodes[1].add(theTreeNodes[2]);
&nbsp;&nbsp;&nbsp; theTreeNodes[1].add(theTreeNodes[3]);
&nbsp;&nbsp;&nbsp; theTreeNodes[1].add(theTreeNodes[4]);
&nbsp;&nbsp;&nbsp; theTreeNodes[0].add(theTreeNodes[5]);
&nbsp;&nbsp;&nbsp; theTreeNodes[5].add(theTreeNodes[6]);
&nbsp;&nbsp;&nbsp; theTreeNodes[6].add(theTreeNodes[7]);
&nbsp;&nbsp;&nbsp; theTreeNodes[6].add(theTreeNodes[8]);
&nbsp;&nbsp;&nbsp; theTreeNodes[6].add(theTreeNodes[9]);
&nbsp;&nbsp;&nbsp; theTreeNodes[5].add(theTreeNodes[10]);
&nbsp;&nbsp;&nbsp; theTreeNodes[10].add(theTreeNodes[11]);
&nbsp;&nbsp;&nbsp; theTreeNodes[10].add(theTreeNodes[12]);
&nbsp;&nbsp;&nbsp; theTreeNodes[10].add(theTreeNodes[13]);
&nbsp;&nbsp;&nbsp; theTreeNodes[0].add(theTreeNodes[14]);
&nbsp;&nbsp;&nbsp; theTreeNodes[14].add(theTreeNodes[15]);
&nbsp;&nbsp;&nbsp; theTreeNodes[14].add(theTreeNodes[16]);
&nbsp;&nbsp;&nbsp; theTreeNodes[14].add(theTreeNodes[17]);
&nbsp;&nbsp;&nbsp; theTreeNodes[14].add(theTreeNodes[18]);

&nbsp;&nbsp;&nbsp; treePanel = new TreePanel(theTreeNodes[0]);

&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a TreeSelectionListener object and&nbsp;
&nbsp;&nbsp;&nbsp; // register it to listen for events caused by the user
&nbsp;&nbsp;&nbsp; // selecting a node in the tree with the mouse or the&nbsp;
&nbsp;&nbsp;&nbsp; // arrow keys.&nbsp; The listener implements the&nbsp;
&nbsp;&nbsp;&nbsp; // valueChanged() method, and an event is processed&nbsp;
&nbsp;&nbsp;&nbsp; // each time the user selects a different node.
&nbsp;&nbsp;&nbsp; tree.addTreeSelectionListener(new MyTreeListener());
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Display the TreePanel object in the top-level frame.
&nbsp;&nbsp;&nbsp; Container content = getContentPane();
&nbsp;&nbsp;&nbsp; content.add(treePanel,BorderLayout.CENTER);

&nbsp;&nbsp;&nbsp; //Create a JLabel object for display and put in at
&nbsp;&nbsp;&nbsp; // the bottom of the frame.
&nbsp;&nbsp;&nbsp; display = new JLabel("Display Selection Here");
&nbsp;&nbsp;&nbsp; content.add(display,BorderLayout.SOUTH);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set the size of the frame and make it visible.
&nbsp;&nbsp;&nbsp; setSize(frameWidth, frameHeight);
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1998, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //An anonymous inner class to terminate the program
&nbsp;&nbsp;&nbsp; // when the user clicks the close button on the frame.&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new WindowAdapter() {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);}//terminate the program
&nbsp;&nbsp;&nbsp; });
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
&nbsp; //=====================================================//

&nbsp; //This inner class is used to instantiate a&nbsp;
&nbsp; // TreeSelectionListener object for registration on the
&nbsp; // JTree object.&nbsp; The method in this object is invoked
&nbsp; // whenever the user selects a different node in the&nbsp;
&nbsp; // tree.

&nbsp; class MyTreeListener implements TreeSelectionListener{
&nbsp;&nbsp;&nbsp; public void valueChanged(TreeSelectionEvent e) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get the node that was selected.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DefaultMutableTreeNode theNode =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (DefaultMutableTreeNode)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (e.getPath().getLastPathComponent());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //If the node is a leaf,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (theNode.isLeaf()) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //This is the place to insert any code that should
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // be executed when the user selects a node.&nbsp; In
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // this sample program, the action is to simply to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // display information about the node in a JLabel
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // at the bottom of the frame.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display.setText((String)theHashtable.get(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theNode.getUserObject()));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%//
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; }//end valueChanged() method
&nbsp; }//end inner class MyTreeListener
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //This inner class is used to instantiate the actual
&nbsp; // JTree object and place it in a scrollable pane in a
&nbsp; // JPanel container.&nbsp; The JPanel can then be placed in&nbsp;
&nbsp; // any other container.

&nbsp; class TreePanel extends JPanel {
&nbsp;&nbsp;&nbsp; public TreePanel(TreeNode root){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setLayout(new BorderLayout());

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create tree
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tree = new JTree(root);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Put the tree in a scrollable pane and add the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // scrollable pane to the JPanel container.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JScrollPane sp = new JScrollPane(tree);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(sp, BorderLayout.CENTER);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the look and feel to emulate something
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIManager.setLookAndFeel(plafClassName);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception ex){System.out.println(ex);}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SwingUtilities.updateComponentTreeUI(this);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Expand the tree
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; numberRows; cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tree.expandRow(cnt);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp; }//end inner class TreePanel
&nbsp; //=====================================================//
}//end class Tree07</PRE></TD>
</TR>
</TABLE>

<P>-end- <!--end--></P></BODY>
</HTML>
