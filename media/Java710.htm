<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Security, Introduction to Message Digests <!--endtitle--></H2>
<P>Java Programming, Lecture Notes # 710, Revised 5/14/99. </P>

<UL>
<LI><A HREF="#Preface">Preface</A> </LI>
<LI><A HREF="#Disclaimer">Disclaimer</A> </LI>
<LI><A HREF="#Introduction">Introduction</A> </LI>
<LI><A HREF="#Discussion">Discussion</A> </LI>
<LI><A HREF="#SampleProgram">Sample Program</A> </LI>
<LI><A HREF="#InterestingCodeFragments">Interesting Code Fragments</A> </LI>
<LI><A HREF="#ProgramListing">Program Listing</A></LI></UL>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Preface">Preface</A></H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Advanced Java Programming</B></U> classes at ACC will be responsible for knowing and understanding all of the material in this lesson beginning with the spring semester of 1999. </P>
<P>This lesson was originally written on April 16, 1999 and has been updated several times since. </P>
<P>The programs in this lesson were tested using JDK 1.2 under Win95</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Disclaimer">Disclaimer</A></H2>
</FONT><P>I claim absolutely no expertise in the area of security. I am simply a college professor attempting to gather information about Java on one hand and present it to my students on the other. I disclaim any responsibility for any security problems that may occur as a result of anyone using any of the material in any of my tutorial lessons.</P>
<P>You are responsible for your own actions. With regard to security, you should study not only the material that I will present, but also material provided by others who possess expertise in the security area. Hopefully my material will be useful in getting you started in that direction.</P>
<P>Two good books on security published by O'Reilly &amp; Associates are:</P>

<UL>
<U><LI>Java Security</U> by Scott Oaks </LI>
<U><LI>Java Cryptography</U> by Jonathan Knudsen</LI></UL>

<P>I highly recommend both of these books.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Introduction">Introduction</A></H2>
<B><P>The three legs of the security stool</P>
</B></FONT><P>An earlier lesson suggested that when exchanging data electronically, the parties to the communication might be interested in the following three aspects of that communication:</P>

<UL>
<B><LI>Authentication</B>: Confirming the identities of the parties involved. </LI>
<B><LI>Confidentiality</B>: Making certain that only authorized parties can understand the communication, even if it is intercepted by unauthorized parties. </LI>
<B><LI>Integrity</B>: Confirming that the content of the communication wasn't modified during transmission.</LI></UL>

<P>This lesson deals primarily with the third item, <I>integrity</I>.</P>
<B><FONT COLOR="#ff0000"><P>Message digests</P>
</B></FONT><P>The lesson introduces you to message digests. This is a good place to begin leaning about the JDK 1.2 security APIs. </P>
<P>Message digests </P>

<UL>
<LI>Are extremely useful </LI>
<LI>Easy to understand </LI>
<LI>Provide a good introduction to the overall methodology of the security and cryptography APIs.</LI></UL>

<B><FONT COLOR="#ff0000"><P>What is a message digest?</P>
</B></FONT><P>A message digest is a value consisting of a <U>fixed number of bytes</U> that represents a message of arbitrary length. </P>
<P>It is often referred to as the <I>fingerprint</I> of the message. </P>
<P>When computed two or more times using the same algorithm, the same message will always produce the same digest value.</P>
<B><FONT COLOR="#ff0000"><P>What about duplicate fingerprints?</P>
</B></FONT><P>It is extremely unlikely that two different messages will produce the same digest value, even if the two messages are almost identical. </P>
<P>One prominent author states that you are <U>more likely to win the lottery</U> than you are to discover two different messages that will produce the same digest value.</P>
<B><FONT COLOR="#ff0000"><P>What is the message digest good for?</P>
</B></FONT><P>Under proper security management (when <I>authentication</I> is achieved), a digest can be used to confirm that a message <U>has not been modified</U> electronically since the digest value was computed. Thus the digest is a tool that can be used to confirm message <I>integrity</I>. </P>
<B><FONT COLOR="#ff0000"><P>How is authentication achieved?</P>
</B></FONT><P>Sometimes, achieving <I>authentication</I> is no more difficult than calling the sender of the message and asking the sender to read off the characters that make up the original digest value. </P>
<P>The printed version of a digest value is reasonably short making this a practical approach to <I>authentication</I>. (It is much more difficult for a hacker to gain control over a person's telephone than it is for the same hacker to intercept and modify an electronic message.)</P>
<B><FONT COLOR="#ff0000"><P>How do you verify against the digest?</P>
</B></FONT><P>If you have a copy of the message and a copy of the digest that was originally computed for that message, you can re-compute the digest and compare your version of the digest with the original version of the digest. If they are the same, you can have a very high level of confidence that the message was not modified after the original digest was computed.</P>
<B><FONT COLOR="#ff0000"><P>What about switching message digests?</P>
</B></FONT><P>Of course, you must be confident that someone didn't switch digests when they modified the message, and the telephone call described above isn't always practical. </P>
<B><FONT COLOR="#ff0000"><P>Digital signatures and certificates</P>
</B></FONT><P>This leads to the topics of <I>digital signatures</I> and <I>digital certificates</I>, which are primary tools for network security. I will be discussing signatures and certificates in detail in subsequent lessons.</P>
<P>Message digests are used for digital signatures and digital certificates. Therefore, they form the basis for some of the most important security tools that exist on the Internet today.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Discussion">Discussion</A></H2>
</FONT><P>According to Sun</P>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=486>
<TR><TD VALIGN="TOP" BGCOLOR="#00ffff">
<P>The <B>MessageDigest</B> class provides the functionality of a message digest algorithm, such as <I>MD5</I> or <I>SHA</I>. Message digests are secure one-way hash functions that take arbitrary-sized data and output a fixed-length hash value.</TD>
</TR>
</TABLE>

<B><FONT COLOR="#ff0000"><P>Alphabet soup</P>
</B></FONT><P>So, what are <I>MD5</I> and <I>SHA?</I> </P>
<P>This is a good starting point for your introduction to the JDK security and cryptographic APIs. There are several aspects of these two APIs that depend on the application of specific algorithms to your data. For example, <I>MD5</I> is a specific algorithm for computing message digests. As of 4/16/99, you can learn more about the algorithm at <A HREF="http://www.sw.com.sg/CIE/RFC/1321/index.htm">http://www.sw.com.sg/CIE/RFC/1321/index.htm</A>.</P>
<P>SHA-1 is another specific algorithm that is used to compute message digests and as of 4/16/99, you can learn more about it at <A HREF="http://w3c1.inria.fr/TR/1998/PR-DSig-label-19980403/SHA1-1_0">http://w3c1.inria.fr/TR/1998/PR-DSig-label-19980403/SHA1-1_0</A>.</P>
<B><FONT COLOR="#ff0000"><P>The SHA-1 algorithm</P>
</B></FONT><P>Here is what Knudsen (<U>Java Cryptography</U> from O'Reilly) has to say about the SHA-1 algorithm. </P>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=486>
<TR><TD VALIGN="TOP" BGCOLOR="#00ffff">
<P>"SHA-1 stands for Secure Hash algorithm. It was developed by the NIST (National Institute of Standards and Technology) in conjunction with NSA. ..."</TD>
</TR>
</TABLE>

<B><FONT COLOR="#ff0000"><P>What is the NSA?</P>
</B></FONT><P>The term NSA stands for National Security Agency, which is an agency of the United States Federal government. It was described in at least one TV program as an agency that is very interested in the electronic communications of others. (I knew that all those hours spent watching the <I>Discovery</I> channel and <I>The Learning Channel</I> on cable TV would pay off someday.)</P>
<P>Knudsen goes on to discuss the pros and cons of the algorithm in comparison with other algorithms such as MD5, MD4, SHA, and SHA-0.</P>
<B><FONT COLOR="#ff0000"><P>A little information about security providers</P>
</B></FONT><P>This raises an important point about the APIs. For a variety of reasons, you may prefer to use algorithms developed by one <I>provider</I> rather than the same algorithms developed by a different <I>provider</I>. </P>
<P>Also some of the algorithms that you need may not be available from a single provider. </P>
<P>Although the APIs include a number of algorithms developed by Sun, the API is structured to make it possible for you to install algorithms developed by other providers as well. </P>
<P>Hopefully I will have time in some future lesson to discuss the mechanics of installing new providers.</P>
<B><FONT COLOR="#ff0000"><P>Using a MessageDigest object</P>
</B></FONT><P>A <B>MessageDigest</B> object is initialized and ready for use when it is made available to your program. </P>
<P>The message is processed through the <B>MessageDigest</B> object by repeatedly invoking the <B>update()</B> method on the object and passing successive portions of the message to the method one byte at a time or as arrays of bytes. </P>
<P>When all of the message data has been fed into the <B>update()</B> method, you invoke the <B>digest()</B> method on the <B>MessageDigest</B> object to <U>finish the job</U> and to get the digest value as an array of bytes.</P>
<B><FONT COLOR="#ff0000"><P>Very typical operation</P>
</B></FONT><P>The reason that I am discussing this in such detail at this time is because this is <U>typical of the operations</U> that you will be performing throughout the security and cryptographic APIs. </P>
<P>There are many different situations where some specific data needs to be processed using some specific algorithm. Generally in those cases, you will do the following:</P>

<UL>
<LI>Get an object capable of applying the overall algorithmic process (such as digestion). This usually involves invoking a factory method named <B>getInstance()</B> on the class of the object. </LI>
<LI>Initialize the object to specify a specific version of the algorithm and possibly a specific provider as well. This normally involves invoking a method named <B>init()</B> on the object passing parameters as appropriate. </LI>
<LI>Feed all of the data into the object by repeatedly invoking a specific method on the object (such as <B>update()</B>) passing the data in chunks as a parameter to the method. </LI>
<LI>When all of the data has been fed to the object, invoke a different method (such as <B>digest()</B>) to finish the task.</LI></UL>

<B><FONT COLOR="#ff0000"><P>MessageDigest doesn't require separate initialization</P>
</B></FONT><P>In the case of the <B>MessageDigest</B> object, the separate initialization step is not required. </P>
<P>The necessary initialization is accomplished by <U>passing parameters to the factory method</U> that you call to get an object of the class.</P>
<B><FONT COLOR="#ff0000"><P>Using the reset() method of MessageDigest class</P>
</B></FONT><P>Another characteristic of the <B>MessageDigest</B> class that is <U>common throughout the API</U> is that the <B>reset()</B> method can be called on the object to re-initialize it and get it ready to process another message. </P>
<P>Also, calling the <B>digest()</B> method on the object re-initializes it and makes it ready to process another message. Thus, both <B>reset()</B> and <B>digest() </B>reset the object to its initialized state.</P>
<B><FONT COLOR="#ff0000"><P>Two important aspects of security</P>
</B></FONT><P>There are two major aspects of Java and security on the Internet:</P>

<UL>
<LI>The <U>mechanics</U> of using Java tools and the Java API. </LI>
<U><LI>Overall security procedures</U> that make use of the Java tools and the Java API.</LI></UL>

<P>What do I mean by <I>overall security procedures</I>? One obvious example is that you should not allow your secret cryptographic keys to be compromised to the enemy (hackers, crackers, virus writers, etc.). However, there are many less obvious and more subtle operational procedures that are very important to overall security. These procedures require a great deal of thought about who can do what to you and how can they do it (probably bad grammar). </P>
<B><FONT COLOR="#ff0000"><P>Will concentrate on mechanics</P>
</B></FONT><P>For the most part, my tutorial lessons will concentrate on the mechanics of using the Java tools and the Java API. I won't attempt to give advice on overall security procedures. Rather, I will leave that to others who have given a great deal of thought to the topic of who can do what to you and how can they do it.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="SampleProgram">Sample Program</A></H2>
</FONT><P>This program, named <B>Security06</B>, provides an introduction to the use of the <B>MessageDigest</B> class in Java.</P>
<B><FONT COLOR="#ff0000"><P>What does the program do?</P>
</B></FONT><P>The program creates and displays the digest values for three short strings. Two of the strings are the same. The third string differs from the other two in only one character</P>
<P>The program demonstrates that the digest value differs significantly for two strings that are almost identical. </P>
<P>It also shows that the digest value that is computed for a given string is the same when re-computed using the same algorithm</P>
<P>The digest values are displayed in Base 64 format, which I will explain later.</P>
<B><FONT COLOR="#ff0000"><P>Program output</P>
</B></FONT><P>The program was tested using JDK 1.2 and Win95. It produces the following output, showing the digest value for the two different input string values. Note that the latter two input strings are the same as the first string, except for the addition of the 'H' character on the end of the string.</P>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=486>
<TR><TD VALIGN="TOP" BGCOLOR="#00ffff">
<PRE>ABCDEFG
k75GEsQdI68YkdrF/Q1TVzb/xOM=

ABCDEFGH
Zdt/hoQdVTax8nL1MO5w/TY9guw=

ABCDEFGH
Zdt/hoQdVTax8nL1MO5w/TY9guw=</PRE></TD>
</TR>
</TABLE>

<P>The <U>length</U> of the digest value for a given algorithm is <U>always the same</U> regardless of the length of the message. </P>
<P>As you can see, the digest values are sufficiently short that they could easily be confirmed over the telephone.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="InterestingCodeFragments">Interesting Code Fragments</A></H2>
</FONT><P><A NAME="ProgramSecurity05A">The first fragment shows the beginning of the controlling class and the beginning of the main method. This fragment:</P>

<UL>
<LI>Creates a simple byte array containing the data for the characters <B>ABCDEFG </LI>
</B><LI>Displays the contents of the array in conventional string format. </LI>
<LI>Calls the <B>digestIt()</B> method to get the digest value of the byte array. </LI>
<LI>Calls the <B>displayBase64()</B> method to display the digest value.</LI></UL>

<P>The method named <B>digestIt()</B> is the key to the entire program. I will discuss <B>digestIt()</B> and <B>displayBase64() </B>later.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>class Security06 {
  public static void <B>main</B>(String[] args) {
    byte[] dataBuffer = "<B>ABCDEFG</B>".getBytes();
    System.out.println(new String(dataBuffer));
    byte[] theDigest = <B>digestIt</B>(dataBuffer);
    <B>displayBase64</B>(theDigest);</PRE></TD>
</TR>
</TABLE>

<B><FONT COLOR="#ff0000"><P>Do it two more times</P>
</B></FONT><P>The next fragment completes the <B>main()</B> method for the program. </P>
<P>This fragment simply repeats the process using the <U>same string value twice</U>. Note that the string value differs from the previous fragment. It has an 'H' character appended onto the end of the string.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>
    //Do it again for a slightly different byte array
    dataBuffer = "<B>ABCDEFGH</B>".getBytes();
    System.out.println(new String(dataBuffer));
    theDigest = digestIt(dataBuffer);
    displayBase64(digestIt(theDigest));
    
    //Do it one more time for the same byte array
    dataBuffer = "<B>ABCDEFGH</B>".getBytes();
    System.out.println(new String(dataBuffer));
    theDigest = digestIt(dataBuffer);
    displayBase64(digestIt(theDigest));

  }//end main</PRE></TD>
</TR>
</TABLE>

<B><FONT COLOR="#ff0000"><P>The digestIt() method</P>
</B></FONT><P>The next fragment shows the beginning of the method named <B>digestIt()</B> that <U>computes and returns the <I>digest</I> value</U> for an incoming array of bytes. </P>
<B><FONT COLOR="#ff0000"><P>Getting a MessageDigest object, factory methods, etc.</P>
</B></FONT><P>The interesting code in this fragment is the statement that calls the <B>getInstance()</B> factory method on the <B>MessageDigest</B> class to <U>get an initialized object</U> of the <B>MessageDigest</B> class.</P>
<B><FONT COLOR="#ff0000"><P>SHA and SUN</P>
</B></FONT><P>The parameters (<I>SHA</I> and <I>SUN</I>) that are passed to the factory method cause the object to be initialized to perform the <I>SHA</I> message digest algorithm as provided by <I>SUN</I> on byte data that is later passed to the <B>update()</B> method of the object. </P>
<P>This is where initialization takes place for the <B>MessageDigest</B> class.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>  static byte[] <B>digestIt</B>(byte[] dataIn){
    byte[] <B>theDigest</B> = null;
    try{
      MessageDigest messageDigest = 
                   MessageDigest.<B>getInstance</B>("SHA", "SUN");</PRE></TD>
</TR>
</TABLE>

<B><FONT COLOR="#ff0000"><P>Feeding a hungry update() method</P>
</B></FONT><P>The next fragment feeds the byte array data to the <B>update()</B> method of the object. </P>
<P>Although this method <U>can accommodate repetitive calls</U> passing new data with each call, <U>only one call was needed</U> in this simple program because all of the message data was contained in a single byte array.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>      messageDigest.<B>update</B>(dataIn);</PRE></TD>
</TR>
</TABLE>

<B><FONT COLOR="#ff0000"><P>Completing the digestion, the digest() method</P>
</B></FONT><P>The next fragment </P>

<UL>
<LI>Completes the computation of the digest value by invoking the <B>digest()</B> method on the <B>MessageDigest</B> object. </LI>
<LI>Saves the digest value for the byte array in an array referred to by <B>theDigest</B> from a previous fragment. </LI>
<LI>Returns the reference to the array containing the digest value to the calling method.</LI></UL>

<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>      theDigest = messageDigest.<B>digest</B>();
    }catch(Exception e){System.out.println(e);}
    <B>return</B> theDigest;
  }//end digestIt()</PRE></TD>
</TR>
</TABLE>

<B><FONT COLOR="#ff0000"><P>Another version of the digest() method</P>
</B></FONT><P>There is another version of the <B>digest()</B> method, which, during a single call will</P>

<UL>
<LI>Accept an array of bytes. </LI>
<LI>Compute the digest value. </LI>
<LI>Return the digest value in an array of bytes. </LI></UL>

<B><FONT COLOR="#ff0000"><P>Could have done it differently</P>
</B></FONT><P>Therefore, for this simple case, where the entire message was available in a single array of bytes, I <U>could have used that version</U> of the <B>digest()</B> method, and could have skipped the use of the <B>update()</B> method altogether. </P>
<P>However, I didn't do that because I wanted to use this simple program to <U>introduce</U> you to <U>the general API structure</U> involving a <U>pair of cooperating methods</U> that work together to produce the desired result. </P>
<P>The first method in the pair <U>can be called repeatedly</U> to apply the algorithm to the data in chunks, and the second method can be called only once to complete the task.</P>
<B><FONT COLOR="#ff0000"><P>What is Base 64 format?</P>
</B></FONT><P>Base 64 is a system for representing an array of eight-bit bytes as seven-bit ASCII characters instead of eight-bit bytes. </P>
<P>Basically, it hooks a group of 8-bit bytes together end-to-end, and then moves through them extracting the bits seven bits at a time. </P>
<P>The reverse process hooks the seven-bit groups together end-to-end and then extracts the bits, eight bits at a time.</P>
<B><FONT COLOR="#ff0000"><P>Why Base 64 format?</P>
</B></FONT><P>This is useful for passing data through a system that can only accommodate seven-bit ASCII data. </P>
<P>It is also useful for displaying byte data because not all of the possible bit combinations in an eight-bit byte have a display rendering that we like to see. </P>
<P>This is a useful way to display a digest value if you are going to discuss it with someone over the telephone. With the Base 64 representation, only characters having common, well-known names appear. This isn't true if you display the raw eight-bit data. If you need to display and discuss the raw eight-bit data, you will probably need to display it in hexadecimal format.</P>
<P>As of 4/16/99, you can learn more about Base 64 at <A HREF="http://rfc.fh-koeln.de/rfc/html/rfc1521.html">http://rfc.fh-koeln.de/rfc/html/rfc1521.html</A>.</P>
<B><FONT COLOR="#ff0000"><P>The encodeBuffer() method</P>
</B></FONT><P>The next fragment illustrates the use of the <B>encodeBuffer()</B> method of the <B>sun.misc.BASE64Encoder</B> class to encode an array of bytes into Base 64 format and to display the result. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>  static void <B>displayBase64</B>(byte[] data){
    <B>BASE64Encoder</B> encoder = new BASE64Encoder();
    String encoded = encoder.<B>encodeBuffer</B>(data);
    System.out.println(encoded);
  }//end base64Display()</PRE></TD>
</TR>
</TABLE>

<P>The class also has a <B>decodeBuffer()</B> method that can be used to <U>reverse the process</U>.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="ProgramListing">Program Listing</A></H2>
</FONT><P>A complete listing of the program is contained in this section.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE></A>/*File Security06.java Copyright 1999, R.G.Baldwin
Rev 4/16/99

This program provides an introduction to the use of the
MessageDigest class in Java.

The program creates and displays the digests for three
short strings.  Two of the strings are the same.

The program shows that the digest differs significantly
for two strings that are different in only one character.
It also shows that the digest that is computed for a given
string is always the same.

The results are displayed in Base 64 format.

Tested using JDK 1.2 and Win95.

This program produces the following output:
  
ABCDEFG
k75GEsQdI68YkdrF/Q1TVzb/xOM=

ABCDEFGH
Zdt/hoQdVTax8nL1MO5w/TY9guw=

ABCDEFGH
Zdt/hoQdVTax8nL1MO5w/TY9guw=
**********************************************************/

import java.io.*;
import java.security.*;
import sun.misc.*;

class Security06 {

  public static void main(String[] args) {
    //Create a simple byte array containing data
    byte[] dataBuffer = "ABCDEFG".getBytes();
    //Display the contents of the byte array
    System.out.println(new String(dataBuffer));
    //Get a digest for the byte array
    byte[] theDigest = digestIt(dataBuffer);
    //Display the digest in Base64 format
    displayBase64(theDigest);

    //Do it again for a slightly different byte array
    dataBuffer = "ABCDEFGH".getBytes();
    System.out.println(new String(dataBuffer));
    theDigest = digestIt(dataBuffer);
    displayBase64(digestIt(theDigest));
    
    //Do it one more time for the same byte array
    dataBuffer = "ABCDEFGH".getBytes();
    System.out.println(new String(dataBuffer));
    theDigest = digestIt(dataBuffer);
    displayBase64(digestIt(theDigest));

  }//end main
  //-----------------------------------------------------//

  //This method generates and returns a digest for an
  // incoming array of bytes.
  static byte[] digestIt(byte[] dataIn){
    byte[] theDigest = null;
    try{
      //Create a MessageDigest object implementing
      // the SHA algorithm, as supplied by SUN
      MessageDigest messageDigest = 
                   MessageDigest.getInstance("SHA", "SUN");
      //Feed the byte array to the digester.  Can 
      // accommodate multiple calls if needed
      messageDigest.update(dataIn);
      //Complete the digestion and save the result
      theDigest = messageDigest.digest();
    }catch(Exception e){System.out.println(e);}
    //Return the digest value to the calling method 
    return theDigest;
  }//end digestIt()
  //-----------------------------------------------------//

  //Method to display an array of bytes in base 64 format
  static void displayBase64(byte[] data){
    BASE64Encoder encoder = new BASE64Encoder();
    String encoded = encoder.encodeBuffer(data);
    System.out.println(encoded);
  }//end base64Display()
  //-----------------------------------------------------//
}//end class Security06</PRE></TD>
</TR>
</TABLE>

<P>-end-<!--end--></P></BODY>
</HTML>
