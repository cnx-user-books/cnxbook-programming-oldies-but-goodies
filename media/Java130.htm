<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, The Container, Panel, Window, and Frame Classes<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 130, Revised 01/05/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#arranging components in containers">Arranging Components in Containers</a></li>

<li><a href="#the container classes">The Container Classes</a></li>

<ul><li><a href="#the container class">The Container Class</a></li>

<li><a href="#the panel class">The Panel Class</a></li>

<ul><li><a href="#sample program for panels">Sample Program for Panels</a></li>

<li><a href="#interesting code fragments for sample panel">Interesting Code
Fragments for Sample Panel Program</a></li>

<li><a href="#program listing for sample panel program">Program Listing for
Sample Panel Program</a></li></ul>

<li><a href="#the window class">The Window Class</a></li>

<li><a href="#the frame class">The Frame Class</a></li>

<ul><li><a href="#sample program for frame class">Sample Program for Frame Class</a></li>

<li><a href="#interesting code fragments from sample program for">Interesting
Code Fragments from Sample Program for Frame Class</a></li>

<li><a href="#program listing for sample program for frame class">Program Listing
for Sample Program for Frame Class</a></li></ul></ul>

<li><a href="#review">Review</a></li>


<p><hr width="100%"></ul>

<center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.

<p>This lesson, and the next several lessons will concentrate on the use
of the GUI components available in the JDK 1.1.x release. You should also
be aware that an entirely new set of <i>lightweight </i>GUI components,
known collectively as the <i>Swing</i> set, are in the pre-beta evaluation
stage at JavaSoft as of January 1998.

<p>It is rumored that JDK 1.2 (or perhaps 2.0) will be released in the
first or second quarter of 1998, and that the <i>Swing </i>components will
be part of that release.

<p>The <i>Swing</i> components are not intended to replace the AWT components
from JDK 1.1, but rather are intended to supplement those components with
a set of components that provide a consistent <i>look and feel</i> across
all platforms. In addition to providing a consistent look and feel, several
components (such as progress bars) are included in the <i>Swing</i> set
that are not included in the JDK 1.1 AWT.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This series of lessons is concentrating on package <b>java.awt </b>where
most of the functionality exists for providing the user interface to your
application or applet.

<p>We have learned how to handle events in both JDK 1.0.2 and JDK 1.1.
We have learned how to use the layout managers in JDK 1.1. These two topics
form the basis for the design and implementation of a Graphical User Interface.

<p>The next step is to take a look at the variety of components that are
available to combine with layout and event handling to produce an effective
Graphical User Interface.

<p>The available components are defined by classes in the package <b>java.awt</b>.
Our approach will be to group those classes into categories and study the
material on a category basis. As of this writing, it looks as if the categories
will be:
<ul><li>
The Container Classes</li>

<li>
The Non-Text Input Classes</li>

<li>
Text Input and Output Classes</li>

<li>
The Scrollbar Classes</li>

<li>
The Dialog Class</li>

<li>
The Canvas Class</li>

<li>
Menus</li>

<li>
Graphics - Shapes, Fonts, Images</li>

<li>
The PrintJob Class</li>

<li>
The Toolkit Class</li></ul>
However, as things develop, I may find it necessary to modify these groupings.

<p>This lesson will concentrate on the <i>Container </i>classes.
<center><h2><a name="arranging components in containers"></a><font color="#ff0000">Arranging
Components in Containers</font></h2></center>
We have learned that we can place our components in their containers using
absolute position coordinates, or we can use any of several different layout
managers to do the job. Using layout managers is considered by many to
be the safer approach because this approach tends to automatically compensate
for differences in screen resolution and component appearance between platforms.

<p>In our previous studies of layout managers, we made extensive use of
<i>Container </i>classes. However, since our emphasis was on layout, we
simply took the containers for granted and didn't provide much in the way
of discussion relative to the containers themselves.

<p>We will rectify that situation in this lesson and learn more about the
<i>Container </i>classes.
<center><h2><a name="the container classes"></a><font color="#ff0000">The Container
Classes</font></h2></center>
The following hierarchy diagram shows where the <i>Container </i>classes
<b>Panel, Window, </b>and <b>Frame</b> fit into the overall inheritance
hierarchy. We will discuss these three classes as a group, and also discuss
their relationship with their superclasses <b>Container, Component, </b>and
<b>Object.</b><table border bgcolor="#80ffff" ><tr><td><pre>java.lang.Object&nbsp;
&nbsp;&nbsp; |&nbsp;
&nbsp;&nbsp; +----java.awt.Component&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.Container
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.<b>Panel&nbsp;
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.<b>Window&nbsp;
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.<b>Frame</b></pre></td></tr></table>
Generally, the <i>Container </i>classes are used to contain components
or instances of other classes.
<center><h3><a name="the container class"></a><font color="#ff0000">The Container Class</font></h3></center>
As indicated in the hierarchy diagram above, the <b>Container </b>class
extends the <b>Component </b>class, which in turn extends the <b>Object
</b>class. We will discuss these three starting with the <b>Object </b>class
and working our way down to the <b>Container </b>class.
<h4><font color="#ff0000">The Object Class</font></h4>
We have discussed the <b>Object </b>class and the <b>Component </b>class
in previous lessons. The <b>Object </b>class is a member of the <b>java.lang</b>
package, and is the root of the class hierarchy. Every class has <b>Object
</b>as a superclass.

<p>All objects, including arrays, implement the methods of the <b>Object
</b>class. In keeping with the general concepts of inheritance in <i>Object-Oriented
Programming</i>, the methods provided by the <b>Object </b>class are general-purpose
in nature.

<p>As of 3/9/97, there are no <i>fields </i>and there are eleven <i>methods
</i>in the <b>Object </b>class, including such general-purpose methods
as the familiar <b>toString()</b> and <b>finalize()</b> methods.
<h4><font color="#ff0000">The Component Class</font></h4>
The <b>Component </b>class extends the <b>Object </b>class, and is the
superclass of many of the classes used to produce <i>Graphical User Interfaces</i>.

<p><b>Component </b>has no <b>public </b>constructors so it <u>cannot be
instantiated</u>. However, it can be extended which provides a new capability
of JDK 1.1 known as <i>Lightweight Components</i> which will be the topic
of a subsequent lesson.

<p>As of 3/9/97, <b>Component </b>has six <i>fields </i>which are inherited
by its subclasses. Also as of 3/9/97, Component has more than 100 <i>methods</i>.
Thus, many of the methods used by the different classes used to produce
GUIs are inherited from the <b>Component </b>class.
<h4><font color="#ff0000">The Container Class</font></h4>
The <b>Container </b>class extends <b>Component</b>. As with <b>Component</b>,
there are no <b>public</b> constructors for the class. Therefore, you <u>cannot
instantiate</u> objects of the <b>Container </b>class. However, you can
extend the class giving rise to <i>Lightweight Components</i> as mentioned
earlier.

<p>As we will see, the <b>Panel </b>class, the <b>Window </b>class, and
the <b>Frame </b>class are subclasses of <b>Container </b>and inherit the
methods defined in <b>Container</b>.

<p>During our studies of layout managers, we saw sample programs which
used the <b>add()</b> method of the <b>Container </b>class to place other
components into objects subclassed from <b>Container</b>.

<p>According to the JDK 1.1 documentation:
<table border bgcolor="#80ffff" ><tr><td>"Components added to a container are tracked in a list. The order of
the list will define the components' front-to-back stacking order within
the container. If no index is specified when adding a component to a container,
it will be added to the end of the list (and hence to the bottom of the
stacking order)."</td></tr></table>
As of 3/9/97, <b>Container </b>has no <i>fields </i>and more than forty
<i>methods</i>. However, many of these are <i>deprecated</i> methods held
over from JDK 1.0, and might be expected to disappear from some future
version of the JDK.

<p>The list of methods includes <u>five overloaded versions</u> of the
<b>add()</b> method. During our studies of the layout managers, we learned
that the different layout managers require the use of different versions
of the <b>add()</b> method for placing components into container objects.

<p>The <b>Container </b>class is also the home of the <b>setLayout()</b>
method which is used to specify the layout manager for a particular container
and the <b>validate()</b> method which is used to cause changes to a layout
to take effect. We have used these two methods in numerous sample programs
in previous lessons.
<center><h3><a name="the panel class"></a><font color="#ff0000">The Panel Class</font></h3></center>
The <b>Panel </b>class inherits from the <b>Container </b>class and can
be used to produce a completely <u>generic</u> container. As of 3/9/97,
it has no <i>fields </i>and <u>two</u> public <i>constructors</i>. The
constructors are:
<ul><li><b>Panel()</b> -- Creates a new panel with a default <b>FlowLayout</b>
manager.</li>

<li><b>Panel(LayoutManager)</b> -- Creates a new panel with the specified layout
manager.</li></ul>
The default layout manager for a Panel object is <b>FlowLayout. </b>It
is also possible to specify a different layout manger for the object when
it is instantiated, and it is possible to accept the default initially
and change it later using the <b>setLayout()</b> method.

<p>As of 3/9/97, <b>Panel </b>has only one <i>method</i>: <b>addNotify()</b>,
which is used to creates the Panel's peer. Briefly, the peer is the platform-dependent
manifestation of the platform-independent object.

<p>Normally a panel has <u>no visual manifestation</u> in its own right..
However, it is possible to make a panel visible by setting its background
color to something other than the default. The following sample program
causes three <b>Panel </b>objects to have background colors of <i>yellow</i>,
<i>red</i>, and <i>blue </i>in order to make them visible for purposes
of illustration.
<center><h4><a name="sample program for panels"></a><font color="#ff0000">Sample Program
for Panels</font></h4></center>
This sample program is designed to be compiled and run under JDK 1.1

<p>This program illustrates the use of <b>Panel </b>objects to create a
composite top-level <i>Graphical User Interface</i> object. Three <b>Panel
</b>objects are added to a <b>Frame </b>object using the <b>add()</b> method.

<p>The layout manager for the <b>Frame </b>object is specified to be <b>FlowLayout
</b>using the <b>setLayout()</b> method.

<p>The background colors of the three panels are set to yellow, red, and
blue so that they will be visible in the <b>Frame </b>object.

<p>One component is placed on each of the <b>Panel </b>objects using the
<b>add()</b> method.
<ul><li>
A <b>TextField </b>object is placed on the yellow <b>Panel </b>object.</li>

<li>
A <b>Label </b>object is placed on the red <b>Panel </b>object.</li>

<li>
A <b>Button </b>object is placed on the blue <b>Panel </b>object.</li></ul>
None of these components are active, meaning that event <i>Listener </i>objects
are not instantiated and registered for the components. For example, clicking
the button does not result in the processing of an event and nothing happens
other than the default visual effect of pressing a button.

<p>If you compile and run this program (and make certain that the <b>Frame
</b>is sufficiently wide) you should see three <b>Panel </b>objects lined
up across the top of the <b>Frame </b>object. The color of the panels going
from left to right should be yellow, red, and blue. The yellow panel should
contain a <b>TextField </b>object, the red panel should contain a <b>Label
</b>object, and the blue panel should contain a <b>Button </b>object.

<p>If the <b>Frame </b>object is not sufficiently wide to accommodate the
three panels across the top, they will automatically rearrange themselves
in the standard fashion for a <b>FlowLayout </b>manager.

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h4><a name="interesting code fragments for sample panel"></a><font color="#ff0000">Interesting
Code Fragments for Sample Panel Program</font></h4></center>
The following code fragment is typical of that used to instantiate each
of the three <b>Panel </b>objects, set the background color of the <b>Panel
</b>objects, and add another component to the <b>Panel </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Panel leftPanel = new Panel();
&nbsp;&nbsp;&nbsp; leftPanel.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; leftPanel.add(new TextField("Left Panel is Yellow"));</pre></td></tr></table>
The following code fragment instantiates a <b>Frame </b>object and adds
the three panels constructed above to that object.
<table border bgcolor="#ffff80" ><tr><td><pre>Frame myFrame = new Frame("Copyright 1997, R.G.Baldwin");
myFrame.setLayout(new FlowLayout());

myFrame.add(leftPanel);
myFrame.add(middlePanel);
myFrame.add(rightPanel);&nbsp;</pre></td></tr></table>
This code produces the top-level user-interface object for the application.
<center><h4><a name="program listing for sample panel program"></a><font color="#ff0000">Program
Listing for Sample Panel Program</font></h4></center>
A complete listing of the program follows. See an operational description
of the program in an earlier section.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Container01.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

This program illustrates the use of Panel objects to&nbsp;
create a composite top-level Graphical User Interface&nbsp;
object.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class Container01 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Container01
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Build three Panels with colored backgrounds each
&nbsp;&nbsp;&nbsp; // containing a non-active component.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel leftPanel = new Panel();
&nbsp;&nbsp;&nbsp; leftPanel.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; leftPanel.add(new TextField("Left Panel is Yellow"));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel middlePanel = new Panel();
&nbsp;&nbsp;&nbsp; middlePanel.setBackground(Color.red);
&nbsp;&nbsp;&nbsp; middlePanel.add(new Label("Middle Panel is Red"));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel rightPanel = new Panel();
&nbsp;&nbsp;&nbsp; rightPanel.setBackground(Color.blue);
&nbsp;&nbsp;&nbsp; rightPanel.add(new Button("Right Panel is Blue"));

&nbsp;&nbsp;&nbsp; //Instantiate a Frame object using a FlowLayout manager
&nbsp;&nbsp;&nbsp; // and place the three Panel objects on the Frame

&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());

&nbsp;&nbsp;&nbsp; myFrame.add(leftPanel);
&nbsp;&nbsp;&nbsp; myFrame.add(middlePanel);
&nbsp;&nbsp;&nbsp; myFrame.add(rightPanel);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.setSize(500,200);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate</pre></td></tr></table>
Next we will turn our attention to the <b>Window </b>class which also extends
the <b>Container </b>class.
<center><h3><a name="the window class"></a><font color="#ff0000">The Window Class</font></h3></center>
As shown in the earlier hierarchy diagram, the <b>Window </b>class extends
the <b>Container </b>class. It is a top-level window with no borders and
no menubar. The JDK documentation indicates that it could be used, for
example, to implement a pop-up menu.

<p>The default layout for a <b>Window </b>object is <b>BorderLayout</b>.
Windows are capable of generating the following window events:
<ul><li>
WindowOpened,</li>

<li>
WindowClosed.</li></ul>
As of 3/9/97, the <b>Window </b>class has no <i>fields</i>, one public
<i>constructor</i>, and about fifteen <i>methods</i>. Some of the methods
are <i>deprecated </i>methods left over from JDK 1.0.

<p>The definition of the constructor is as follows:
<table border bgcolor="#80ffff" ><tr><td>public Window(Frame parent)&nbsp;
<ul><li>
Constructs a new Window initialized to an invisible state. It behaves as
a modal dialog in that it will block input to other windows when shown.&nbsp;</li>


<p>Parameters: parent - the owner of the dialog&nbsp;</ul></td></tr></table>
Now, having given you that information, let me tell you that of the approximately
twenty books on Java programming that I currently own, <u>all but about
three are silent</u> on the topic of the <b>Window </b>class. Let me share
with you what those books that are not silent have to say on the matter.
<table border bgcolor="#80ffff" ><tr><td>"<b>Window</b> is rarely used directly; its subclasses <b>Frame</b>
and <b>Dialog</b> are more commonly useful." -- <u>Java in a Nutshell</u>,
by David Flanagan.</td></tr></table>
.
<table border bgcolor="#80ffff" ><tr><td>"Generally you won't create <b>Window</b> objects directly. Instead,
you will use a subclass of <b>Window</b> called <b>Frame, </b>described
next." -- <u>Java, the Complete Reference</u>, by Herbert Schildt and Patrick
Naughton.</td></tr></table>
.
<table border bgcolor="#80ffff" ><tr><td>"The <b>Window</b> class is a lot like <b>Panel</b> except that it
creates its own top-level window, as opposed to being contained by any
other <b>Panel</b>. Most users of the <b>Window</b> class will more than
likely use the <b>Frame</b> subclass, described below, which has several
convenience methods to deal with resizing, window titles, cursors, and
menu bars. That said, let's skip ahead to the <b>Frame</b> class." -- <u>The
Java Handbook</u>, by Patrick Naughton.</td></tr></table>
With all that good advice, let's take Mr. Naughton's advice specifically,
and skip ahead to the <b>Frame</b> class which is our next topic of discussion.
<center><h3><a name="the frame class"></a><font color="#ff0000">The Frame Class</font></h3></center>
Unless you just started reading these lessons at this paragraph, you will
not be a stranger to the use of the <b>Frame </b>class. That is the class
that I have primarily been using for most of my sample programs for about
the past ten to fifteen lessons.

<p>I particularly like to use the <b>Frame </b>class for sample programs
because it is <u>easy to instantiate</u>, and equally important, it is
<u>easy to terminate</u>.

<p>The <b>Frame </b>class extends the <b>Window </b>class. A <b>Frame </b>object
is an (optionally) resizable top-level window with
<ul><li>
a title,</li>

<li>
a minimize box,</li>

<li>
a maximize box,</li>

<li>
a close box, and</li>

<li>
a control box.</li></ul>
The default layout for a <b>Frame </b>object is <b>BorderLayout</b>.

<p>Frames are capable of generating the following types of window events:
<ul><li>
WindowOpened</li>

<li><b>WindowClosing</b></li>

<li>
WindowClosed</li>

<li>
WindowIconified</li>

<li>
WindowDeiconified</li>

<li>
WindowActivated</li>

<li>
WindowDeactivated</li></ul>
The <b>WindowClosing </b>event, highlighted in the earlier program, is
the event that we have used to terminate many sample programs. This event
occurs whenever the user clicks the <i>close</i> box on the <b>Frame </b>object.

<p>As of 3/9/97, the <b>Frame </b>class had fourteen <i>fields</i>, all
of which are used in dealing with the appearance of the cursor.

<p>Also, as of that date, it had two overloaded public <i>constructors</i>:
<ul><li><b>Frame()</b> -- Constructs a new Frame that is initially invisible.</li>

<li><b>Frame(String)</b> -- Constructs a new, initially invisible Frame with
the specified title.</li></ul>
You will recall that all of our sample programs have used the <b>setVisible(true)</b>
method to cause the initially invisible <b>Frame </b>object become visible.

<p>In addition, on 3/9/97, the <b>Frame </b>class had more than a dozen
<i>methods</i>, a couple of which were <i>deprecated </i>methods left over
from JDK 1.0.2. Some of the deprecated methods have to do with getting
and setting the cursor. From the specifications, it appears that those
methods have been moved up the hierarchy to the <b>Component </b>class.
<center><h4><a name="sample program for frame class"></a><font color="#ff0000">Sample
Program for Frame Class</font></h4></center>
This program is designed to be compiled and run under JDK 1.1

<p>This program illustrates use of the <b>Frame </b>class and some of its
methods. The program instantiates a <b>Frame </b>object with three buttons
labeled:
<ul><li>
Get Title</li>

<li>
Hand Cursor</li>

<li>
Default Cursor</li></ul>
When the user clicks the <i>Get Title</i> button, the title of the <b>Frame
</b>object is retrieved using the <b>getTitle()</b> method of the <b>Frame
</b>class and displayed on the screen using a <b>System.out.println</b>
statement.

<p>When the user clicks the <i>Hand Cursor</i> button, the shape of the
cursor is changed to the familiar hand-shaped cursor using the <b>setCursor()</b>
method.

<p>When the user clicks the <i>Default Cursor</i>, the shape of the cursor
is changed back to the default cursor for the system.

<p>Note that in the two latter cases, you must move the mouse pointer away
from the button to see the change in the cursor take place.

<p>This is an extremely simple program in comparison with other programs
already studied in these lessons.

<p>To prevent the program from being boring, I decided to use this opportunity
to review the <u>abbreviated syntax</u> of <i>Inner Classes</i> (a topic
covered in an earlier lesson).

<p>All of the event Listener objects are instantiated and registered on
the three <b>Button </b>objects and the <i>"close" </i>box using the abbreviated
syntax of Inner Classes. If this looks foreign to you, you might want to
go back and review that lesson.

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h4><a name="interesting code fragments from sample program for"></a><font color="#ff0000">Interesting
Code Fragments from Sample Program for Frame Class</font></h4></center>
The following statement is typical of those used to instantiate the <b>Button
</b>objects in the program.
<table border bgcolor="#ffff80" ><tr><td><pre>Button titleButton = new Button("GetTitle");</pre></td></tr></table>
The following code is typical of that used to
<ul><li>
instantiate the <b>Frame </b>object,</li>

<li>
set the layout manager to <b>FlowLayout</b>, and</li>

<li><u>add</u> the three buttons to the Frame object.</li></ul>
.
<table border bgcolor="#ffff80" ><tr><td><pre>myFrame = new Frame("Copyright 1997, R.G.Baldwin");
myFrame.setLayout(new FlowLayout());

myFrame.add(titleButton);</pre></td></tr></table>
The following code fragment is typical of that used to <u>instantiate and
register</u> <b>ActionListener </b>objects on the three <b>Button </b>objects
using the abbreviated syntax for <i>Inner Classes</i>.
<table border bgcolor="#ffff80" ><tr><td><pre>titleButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(myFrame.getTitle());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener()</pre></td></tr></table>
The following code was used to <u>instantiate and register</u> a <b>WindowListener
</b>object on the <b>Frame </b>object to terminate the program when the
user clicks the "close" box on the <b>Frame </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>myFrame.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addWindowListener</pre></td></tr></table>
.
<center><h4><a name="program listing for sample program for frame class"></a><font color="#ff0000">Program
Listing for Sample Program for Frame Class</font></h4></center>
A complete listing of the program follows:
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Container02.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

This program illustrates use of the Frame class and some
of its methods.


The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
import java.util.*;
//=======================================================//
public class Container02 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Container02
//=======================================================//

class GUI {
&nbsp; Frame myFrame;
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate three Button objects with the&nbsp;
&nbsp;&nbsp;&nbsp; // labels shown
&nbsp;&nbsp;&nbsp; Button titleButton = new Button("GetTitle");
&nbsp;&nbsp;&nbsp; Button handCursorButton = new Button("Hand Cursor");
&nbsp;&nbsp;&nbsp; Button defaultCursorButton = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Default Cursor");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Frame object with title shown.&nbsp;
&nbsp;&nbsp;&nbsp; // Specify FlowLayout mgr.
&nbsp;&nbsp;&nbsp; myFrame = new Frame("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the three Button objects to the Frame object.
&nbsp;&nbsp;&nbsp; myFrame.add(titleButton);
&nbsp;&nbsp;&nbsp; myFrame.add(handCursorButton);
&nbsp;&nbsp;&nbsp; myFrame.add(defaultCursorButton);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set the Frame size and make it visible
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,200);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; //Instantiate and register ActionListener objects on
&nbsp;&nbsp;&nbsp; // the three Button objects using the abbreviated&nbsp;
&nbsp;&nbsp;&nbsp; // syntax for Inner Classes.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; titleButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(myFrame.getTitle());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener()
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; handCursorButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setCursor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Cursor(Cursor.HAND_CURSOR));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener()
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; defaultCursorButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setCursor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Cursor(Cursor.DEFAULT_CURSOR));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener()
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//

&nbsp;&nbsp;&nbsp; //Instantiate and register a WindowListener object&nbsp;
&nbsp;&nbsp;&nbsp; // on the Frame object to terminate the program when
&nbsp;&nbsp;&nbsp; // the user clicks the "close" box on the Frame object.
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addWindowListener

&nbsp; }//end constructor
}//end class GUI definition</pre></td></tr></table>
.
<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Write a Java program that meets the following specifications.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File SampProg146.java Copyright 1997, R.G.Baldwin
From lesson 130.

Without viewing the solution that follows, write a Java
program that meets the following specifications.

When the program starts, a 500x100 Frame object appears
on the screen with your name in the top banner.

The Frame contains a yellow rectangle that fills most of
the white client area of the Frame.

The yellow rectangle contains two objects which are not
necessarily the same size.&nbsp; On the left is a TextField&nbsp;
containing the text "Left Panel is Yellow". On the&nbsp;
right is a red rectangle.

The red rectangle contains two objects which are&nbsp;
approximately the same size.&nbsp; On the left is a green
rectangle containing the text "Middle Panel is Red".
On the right is a blue rectangle.

The blue rectangle contains a button with the caption
"Right Panel is Blue".

When you click the close button on the Frame, the program
terminates and returns control to the operating system.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class SampProg146 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg146
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Build three Panels with colored backgrounds each
&nbsp;&nbsp;&nbsp; // containing a non-active component.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel leftPanel = new Panel();
&nbsp;&nbsp;&nbsp; leftPanel.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; leftPanel.add(new TextField("Left Panel is Yellow"));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel middlePanel = new Panel();
&nbsp;&nbsp;&nbsp; middlePanel.setBackground(Color.red);
&nbsp;&nbsp;&nbsp; Label myLabel = new Label("Middle Panel is Red");
&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; middlePanel.add(myLabel);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel rightPanel = new Panel();
&nbsp;&nbsp;&nbsp; rightPanel.setBackground(Color.blue);
&nbsp;&nbsp;&nbsp; rightPanel.add(new Button("Right Panel is Blue"));

&nbsp;&nbsp;&nbsp; //Instantiate a Frame object using a FlowLayout&nbsp;
&nbsp;&nbsp;&nbsp; // manager and place the three Panel objects on the&nbsp;
&nbsp;&nbsp;&nbsp; // Frame in a nested fashion

&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; middlePanel.add(rightPanel);
&nbsp;&nbsp;&nbsp; leftPanel.add(middlePanel);
&nbsp;&nbsp;&nbsp; myFrame.add(leftPanel);
&nbsp;&nbsp;&nbsp; myFrame.setSize(500,100);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
.

<p>Q - Write a Java program that meets the following specifications.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File SampProg147.java Copyright 1997, R.G.Baldwin
From lesson 130

Without viewing the following solution, write a Java
program that replicates the functionality of the program
named Container02.java with the following differences.

1.&nbsp; Use a crosshair cursor in place of a hand cursor
2.&nbsp; Don't use an abbreviated inner-class for the action
&nbsp;&nbsp;&nbsp; listener on the getTitle button.&nbsp; Use an ordinary
&nbsp;&nbsp;&nbsp; inner-class instead.


The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
import java.util.*;
//=======================================================//
public class SampProg147 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg147
//=======================================================//

class GUI {
&nbsp; Frame myFrame;
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate three Button objects with the&nbsp;
&nbsp;&nbsp;&nbsp; // labels shown
&nbsp;&nbsp;&nbsp; Button titleButton = new Button("GetTitle");
&nbsp;&nbsp;&nbsp; Button crosshairCursorButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Crosshair Cursor");
&nbsp;&nbsp;&nbsp; Button defaultCursorButton = new Button(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Default Cursor");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Frame object with title shown.&nbsp;
&nbsp;&nbsp;&nbsp; // Specify FlowLayout mgr.
&nbsp;&nbsp;&nbsp; myFrame = new Frame("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the three Button objects to the Frame object.
&nbsp;&nbsp;&nbsp; myFrame.add(titleButton);
&nbsp;&nbsp;&nbsp; myFrame.add(crosshairCursorButton);
&nbsp;&nbsp;&nbsp; myFrame.add(defaultCursorButton);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set the Frame size and make it visible
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,200);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; //Instantiate and register ActionListener objects on
&nbsp;&nbsp;&nbsp; // the three Button objects using the abbreviated&nbsp;
&nbsp;&nbsp;&nbsp; // syntax for Inner Classes.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//

&nbsp;&nbsp;&nbsp; class MyActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(myFrame.getTitle());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp; }//end class MyActionListener
&nbsp;&nbsp;&nbsp; titleButton.addActionListener(new MyActionListener());
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; crosshairCursorButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setCursor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Cursor(Cursor.CROSSHAIR_CURSOR));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener()
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; defaultCursorButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setCursor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Cursor(Cursor.DEFAULT_CURSOR));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener()
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//

&nbsp;&nbsp;&nbsp; //Instantiate and register a WindowListener object&nbsp;
&nbsp;&nbsp;&nbsp; // on the Frame object to terminate the program when
&nbsp;&nbsp;&nbsp; // the user clicks the "close" box on the Frame object.
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addWindowListener

&nbsp; }//end constructor
}//end class GUI definition</pre></td></tr></table>
-end-<!--end--></body></html>