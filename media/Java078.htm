<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Callbacks - II<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 78, Revised 01/04/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#summary">Summary</a></li>

<li><a href="#program listing">Program Listing</a></li></ul></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
This is the second in a series of three consecutive lessons on Callbacks
in Java. The three lessons are named Callbacks - I, Callbacks - II, and
Callbacks - III.

<p>Students in Prof. Baldwin's <b><u>Intermediate Java Programming</u></b>
classes at ACC are responsible for knowing and understanding all of the
material in this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
Many processes in the standard Java API make use of a mechanism that in
other programming environments might be referred to as a <i>callback</i>
mechanism.

<p>Basically, this is a mechanism where a method in one object asks a method
in another object to <i>"call me back"</i> or <i>"notify me"</i> when an
interesting event happens.

<p>For example, an <u>interesting event</u> might be that the price of
a specified stock goes above its previous high value, or the toaster finishes
toasting the bread.

<p>A previous lesson introduced you to the basic Java callback mechanism
using interfaces, and walked you through the development of a set of classes
that implement a simple multicast form of callback. In that lesson, the
definition of the <b>CallBack</b> interface was limited to a single method
declaration.

<p>In a real program involving callbacks, <u>many different objects</u>
may ask <u>one object</u> to notify them when <u>any interesting event</u>
in a <u>family of interesting events</u> happens, and to <u>identify the
specific event</u> that actually happened along with the <u>notification</u>.

<p>This lesson will enhance our previous program to accommodate this possibility.

<p>As mentioned in the earlier lesson, it is usually easier to understand
abstract concepts if they are explained in terms of a meaningful scenario.
For that reason, we have conjured up a scenario in which to develop and
explain our callback programs.

<p>Our scenario consists of a <i>teacher </i>and some <i>students</i>.
In the beginning there was only one student. Then we expanded the scenario
to include many students and some animals in the classroom as well.

<p>The students (and the animals) register themselves on the teachers rollbook
to be notified of interesting events. Initially the interesting event was
simply the teacher taking the roll. In this lesson, we expand that scenario
to include notification that it is <i>either </i>time for recess, <i>or
</i>it is time for lunch.

<p>Initially, only one student received notification of one type of event.
In this lesson, all of the students and all of the animals receive notification
of both types of event (recess or lunch) but some of those who are notified
choose to ignore the notification.

<p>Without further discussion, let's look at some code.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
In case you just started reading at this point, this is an enhanced version
of the program named Callback02. You should familiarize yourself with the
earlier program before trying to understand this program.

<p>The previous version of the program defined two different classes that
implemented the <b>CallBack</b> interface. In order to give us more to
work with, this version defines <u>three different classes</u> named <b>Student</b>,
<b>Dog</b>, and <b>Cat </b>that <i>implement </i>the <b>CallBack </b>interface.
<u>Mixed objects</u> of those three types are registered and maintained
on a list and notified at callback time.

<p>As before, this program defines a <b>CallBack </b>interface. However,
this version of the interface declares <u>two different methods</u> that
can be invoked as callback methods instead of just one.

<p>In other words, in this case, the objects register to be notified whenever
an interesting event from a family of interesting events occurs (the family
has two members). When notified, the objects also need to be advised as
to which interesting event actually happened.

<p>The methodology for differentiating between the two different kinds
of interesting events is to invoke one callback method in the case of one
event, and to invoke the other callback method in the case of the other
event.

<p>All classes that implement the <b>CallBack</b> interface must define
both methods, but it is allowable to define the method as an empty method.
The net effect of defining a callback method as an empty method is to simply
ignore the callback associated with that method. Note however, there there
is some overhead associated with the invocation of an empty method.

<p>(Although we haven't discussed the topic yet, I believe that this overhead
is the reason that JavaSoft chose to separate the <b>MouseListener </b>and
<b>MouseMotionListener </b>interfaces. Perhaps someone will remember to
remind me to discuss that when we get to the topic of <b>MouseMotionListener</b>
interface in the classroom lecture.)

<p>One of the callback methods in this version of our program is named
<b>recess()</b> and the other callback method is named <b>lunch()</b>.
Thus, registered objects can be notified <i>either </i>of a <b>recess()</b>
event, <i>or </i>of a <b>lunch()</b> event.

<p>The <b>Dog </b>class ignores the <b>recess()</b> callback by defining
an empty <b>recess()</b> method, and the <b>Cat </b>class ignores the <b>lunch()</b>
callback by defining an empty <b>lunch()</b> method. The <b>Student </b>class
responds to both types of callbacks with fully- defined methods.

<p>The program defines a <b>Teacher </b>class that has the ability to create
and maintain a list of objects of the interface type, and to notify those
objects that something interesting has happened by invoking <i>either </i>the
<b>recess()</b> method <i>or </i>the <b>lunch()</b> method on all the objects
on the list.

<p>It is important to note that every object on the list <u>will be notified
of both types of callbacks</u>, although as mentioned above, a particular
type of callback can be ignored by a class simply by leaving the callback
method empty when it is defined.

<p>As before, objects can be added to the list and then removed from the
list. However, removal of objects from the list was demonstrated in the
previous program, so removal is not demonstrated in this program.

<p>Notification takes the form of invoking either the <b>recess()</b> method
or the <b>lunch()</b> method on all the objects on the list.

<p>Finally, the program defines a controlling class that ties all the pieces
together and exercises them.

<p>The program was tested using JDK 1.1.3 under Win95.

<p>The output from the program is shown later.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
First we define an interface named <b>CallBack</b> that will create a new
type and that declares two generic methods that can be used to callback
any object that is of a class that implements the interface.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>interface <b>CallBack</b>{
&nbsp; public void <b>recess</b>();
&nbsp; public void <b>lunch</b>();
}//end interface CallBack</pre></td></tr></table>
Next we define a class whose objects can maintain a list of registered
objects (registration is the process of placing an object on the list)
of type <b>CallBack </b>and can notify all the objects on that list when
something interesting happens. This class differs form the one in the previous
version of the program in that it has the ability to notify for <u>two
different types of callbacks</u>, <b>recess()</b> and <b>lunch()</b>. The
name of this class is <b>Teacher</b>.

<p>The code to construct the <b>Teacher</b> object, add objects to the
list, and remove objects from the list hasn't changed in a significant
way, so we are going to skip over that code and go straight to the code
that is new and different.

<p>Basically what we now have is two different methods in place of one.
One of the methods is named <b>callRecess()</b> and the other is named
<b>callLunch()</b>. Except for their names, these methods are almost identical
to the single method named <b>callTheRoll()</b> in the previous version
of the program, so a lot of discussion isn't needed.

<p>The code in the method makes a copy of the list and then uses a <b>for</b>
loop along with some <b>Vector</b> methods to access each object reference.
Then the callback method is invoked on each object reference.

<p>We will show one of the methods below for reference.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; void <b>callRecess</b>(){
&nbsp;&nbsp;&nbsp; Vector tempList;//save a temporary copy of list here
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //<b>Make a copy of the list</b>.
&nbsp;&nbsp;&nbsp; synchronized(this){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempList = <b>(Vector)objList.clone()</b>;
&nbsp;&nbsp;&nbsp; }//end synchronized block
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //<b>Invoke the recess() method</b> on each object on
&nbsp;&nbsp;&nbsp; // the list.
&nbsp;&nbsp;&nbsp; <b>for</b>(int cnt = 0; cnt &lt; tempList.size(); cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>((CallBack)tempList.elementAt(cnt)).recess()</b>;
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end callRecess()</pre></td></tr></table>
That concludes the discussion of the class named <b>Teacher</b>. This is
followed by three class definitions that implement the <b>CallBack</b>
interface: <b>Student, Dog</b>, and <b>Cat. </b>These class definitions
differ from the ones in the previous version of the program in that they
<u>define two callback methods</u> instead of just one: <b>recess()</b>
and <b>lunch()</b>.

<p>Recall that I said that a class can ignore a particular type of callback
simply by defining the callback method as an empty method. Recall also
that I said that the <b>Dog</b> class ignores the <b>recess()</b> callback
in just this way.

<p>Because of the similarity of these three classes, I am only going to
show one of them below. I will show the <b>Dog</b> class to illustrate
how it defines an empty method to ignore the <b>recess()</b> callback.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>Dog implements CallBack</b>{
&nbsp; String name; //store name here for later ID
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; <b>Dog(String name)</b>{//constructor
&nbsp;&nbsp;&nbsp; this.name = name; //save the name to identify the obj
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

<b>&nbsp; public void recess(){
&nbsp;&nbsp;&nbsp; //ignore this callback with an empty method
&nbsp; }//end recess()
</b>&nbsp; //-----------------------------------------------------//

&nbsp; public void <b>lunch()</b>{//announce lunch
&nbsp;&nbsp;&nbsp; System.out.println(name + " lunch");
&nbsp; }//end overridden lunch()
}//end class Dog</pre></td></tr></table>
That brings us to the controlling class that ties all the pieces together
and exercises them. Except for the fact that the <b>main()</b> method triggers
two callbacks instead of just one, and the code to remove an object from
the list was deleted for brevity, this code is essentially the same as
in the previous program. Therefore, I am going to delete some of the redundant
code from this fragment and primarily show only the new code.

<p>The code in the <b>main()</b> method of the controlling class instantiates
a <b>Teacher</b> object named <b>missJones</b>, and then instantiates some
objects of the three types: <b>Student, Dog</b>, and <b>Cat</b>. These
objects are registered for callback by invoking the <b>register()</b> method
on the <b>Teacher</b> object.

<p>Then the code triggers a <b>recess()</b> callback and a <b>lunch()</b>
callback.

<p>The output produced by this program is shown following the listing of
this code fragment.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>Callback03</b>{
&nbsp; public static void <b>main</b>(String[] args){
&nbsp;&nbsp;&nbsp; //Instantiate Teacher object
&nbsp;&nbsp;&nbsp; Teacher <b>missJones = new Teacher()</b>;

&nbsp;&nbsp;&nbsp; //Instantiate some Student objects
&nbsp;&nbsp;&nbsp; //... code deleted
&nbsp;&nbsp;&nbsp; //Instantiate some Dog objects.
&nbsp;&nbsp;&nbsp; //... code deleted
&nbsp;&nbsp;&nbsp; //Instantiate some Cat objects
&nbsp;&nbsp;&nbsp; //... code deleted
&nbsp;
&nbsp;&nbsp;&nbsp; //<b>Register </b>some Student, Dog, and Cat <b>objects </b>with&nbsp;
&nbsp;&nbsp;&nbsp; // the Teacher object.
&nbsp;&nbsp;&nbsp; missJones.<b>register</b>(tom);
&nbsp;&nbsp;&nbsp; missJones.register(spot);
&nbsp;&nbsp;&nbsp; missJones.register(sue);
&nbsp;&nbsp;&nbsp; missJones.register(cleo);
&nbsp;&nbsp;&nbsp; missJones.register(fido);
&nbsp;&nbsp;&nbsp; missJones.register(peg);
&nbsp;&nbsp;&nbsp; missJones.register(kitty);
&nbsp;&nbsp;&nbsp; missJones.register(bob);
&nbsp;&nbsp;&nbsp; missJones.register(brownie);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Cause the Teacher object to <b>call recess</b> and <b>lunch
</b>&nbsp;&nbsp;&nbsp; // on all the objects on the list.
&nbsp;&nbsp;&nbsp; <b>missJones.callRecess()</b>;
&nbsp;&nbsp;&nbsp; <b>missJones.callLunch()</b>;
&nbsp; }//end main()
}//end class Callback03</pre></td></tr></table>
The output from running this program follows. Note that the objects of
the <b>Student</b> class respond to both the <b>recess</b> and the <b>lunch</b>
callbacks. However, the objects of the <b>Cat</b> class respond only to
the <b>recess</b> callbacks, and the objects of the <b>Dog</b> class respond
only to the <b>lunch</b> callbacks.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>Tom recess
Sue recess
CleoCat recess
Peg recess
KittyKat recess
Bob recess
Tom lunch
SpotDog lunch
Sue lunch
FidoDog lunch
Peg lunch
Bob lunch
BrownieDog lunch</pre></td></tr></table>

<center><h3><a name="summary"></a><font color="#ff0000">Summary</font></h3></center>
In summary then, we have objects of different classes registered on a common
callback list where every object on the list receives a callback for every
different type of callback event associated with the list.

<p>The different types of callbacks are established by the method declarations
in the <b>CallBack</b> interface.

<p>Each class of object that registers for callbacks can either respond
to all of the different types of callbacks by providing full definitions
for all of the callback methods, or can selectively ignore some types of
callbacks by defining those callback methods as empty methods.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
A full listing of the program follows so that you can view the code fragments
in context.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File <b>Callback03</b>.java Copyright 1997, R.G.Baldwin
The purpose of this program is to develop a callback
capability using Interfaces.&nbsp;&nbsp;

This is an enhanced version of the program named&nbsp;
Callback02. You should familiarize yourself with
the earlier program before getting into this program.

This version defines three different classes named
Student, Dog, and Cat that implement the CallBack&nbsp;
interface.&nbsp; Mixed objects of those three types are&nbsp;
maintained on a list and notified at CallBack time.

Tested using JDK 1.1.3 under Win95.

The output from the program was:

Tom recess
Sue recess
CleoCat recess
Peg recess
KittyKat recess
Bob recess
Tom lunch
SpotDog lunch
Sue lunch
FidoDog lunch
Peg lunch
Bob lunch
BrownieDog lunch
**********************************************************/
import java.util.*;

//First we define an interface that will create a new type
// and declare two generic methods that can be used to&nbsp;
// callback any object that is of a class that implements
// the interface.
interface CallBack{
&nbsp; public void recess();
&nbsp; public void lunch();
}//end interface CallBack
//=======================================================//

//Next we need a class whose objects can maintain a&nbsp;
// registered list of objects of type CallBack and can&nbsp;
// notify all the objects on that list when something
// interesting happens. This class has the ability to
// notify of two different types of callbacks, recess()
// and lunch().&nbsp;&nbsp;

class Teacher{
&nbsp; Vector objList; //list of objects of type CallBack
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Teacher(){//constructor
&nbsp;&nbsp;&nbsp; //Instantiate a Vector object to contain the list
&nbsp;&nbsp;&nbsp; // of registered objects.
&nbsp;&nbsp;&nbsp; objList = new Vector();
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Method to add objects to the list.
&nbsp; synchronized void register(CallBack obj){
&nbsp;&nbsp;&nbsp; this.objList.addElement(obj);
&nbsp; }//end register()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Method to remove objects from the list.
&nbsp; synchronized void unRegister(CallBack obj){
&nbsp;&nbsp;&nbsp; if(this.objList.removeElement(obj))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj + " removed");
&nbsp;&nbsp;&nbsp; else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj + " not in the list");
&nbsp; }//end register()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Method to notify all objects on the list that&nbsp;
&nbsp; // something interesting has happened regarding recess.&nbsp;&nbsp;
&nbsp; void callRecess(){
&nbsp;&nbsp;&nbsp; Vector tempList;//save a temporary copy of list here
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Make a copy of the list.
&nbsp;&nbsp;&nbsp; synchronized(this){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempList = (Vector)objList.clone();
&nbsp;&nbsp;&nbsp; }//end synchronized block
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Invoke the recess() method on each object on
&nbsp;&nbsp;&nbsp; // the list.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempList.size(); cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((CallBack)tempList.elementAt(cnt)).recess();
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end callRecess()
&nbsp; //-----------------------------------------------------//
&nbsp; //Method to notify all objects on the list that&nbsp;
&nbsp; // something interesting has happened regarding lunch.&nbsp;&nbsp;
&nbsp; void callLunch(){
&nbsp;&nbsp;&nbsp; Vector tempList;//save a temporary copy of list here
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Make a copy of the list.
&nbsp;&nbsp;&nbsp; synchronized(this){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempList = (Vector)objList.clone();
&nbsp;&nbsp;&nbsp; }//end synchronized block
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Invoke the lunch() method on each object on
&nbsp;&nbsp;&nbsp; // the list.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempList.size(); cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((CallBack)tempList.elementAt(cnt)).lunch();
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end callRecess()
&nbsp; //-----------------------------------------------------//
}//end class Teacher
//=======================================================//

//Class that implements the CallBack interface.&nbsp; Objects
// of this class can be registered on the list maintained
// by an object of the Teacher class, and will be notified
// whenever that object invokes either the recess() method
// or the lunch() method on the registered objects on&nbsp;
// the list.&nbsp; This method provides a full definition for
// both methods.

class Student implements CallBack{
&nbsp; String name; //store the object name here for later ID
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Student(String name){//constructor
&nbsp;&nbsp;&nbsp; this.name = name;&nbsp; //save the name to identify the obj
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can invoke this method
&nbsp; // as a callback mechanism.
&nbsp; public void recess(){//announce recess
&nbsp;&nbsp;&nbsp; System.out.println(name + " recess");
&nbsp; }//end overridden recess()
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can also invoke this&nbsp;
&nbsp; // method as a callback mechanism.
&nbsp; public void lunch(){//announce recess
&nbsp;&nbsp;&nbsp; System.out.println(name + " lunch");
&nbsp; }//end overridden lunch()

}//end class Student

//=======================================================//

//Another Class that implements the CallBack interface.&nbsp;&nbsp;
// See description above. This class defines the recess()
// method as an empty method.

class Dog implements CallBack{
&nbsp; String name; //store name here for later ID
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Dog(String name){//constructor
&nbsp;&nbsp;&nbsp; this.name = name; //save the name to identify the obj
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can invoke this method
&nbsp; // as the callback mechanism.
&nbsp;&nbsp;
&nbsp; public void recess(){//announce recess
&nbsp;&nbsp;&nbsp; //ignore this callback with an empty method
&nbsp; }//end overridden recess()
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can also invoke this&nbsp;
&nbsp; // method as a callback mechanism.
&nbsp; public void lunch(){//announce recess
&nbsp;&nbsp;&nbsp; System.out.println(name + " lunch");
&nbsp; }//end overridden lunch()
}//end class Dog
//=======================================================//

//A third Class that implements the CallBack interface,
// similar to the other two classes.&nbsp; This class defines
// the lunch() method as an empty method.

class Cat implements CallBack{
&nbsp; String name; //store name here for later ID
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Cat(String name){//constructor
&nbsp;&nbsp;&nbsp; this.name = name; //save the name to identify the obj
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can invoke this method
&nbsp; // as the callback mechanism.
&nbsp;&nbsp;
&nbsp; public void recess(){//announce recess
&nbsp;&nbsp;&nbsp; System.out.println(name + " recess");
&nbsp; }//end overridden recess()
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can also invoke this&nbsp;
&nbsp; // method as a callback mechanism.
&nbsp; public void lunch(){//announce recess
&nbsp;&nbsp;&nbsp; //ignore this callback with an empty method
&nbsp; }//end overridden lunch()
}//end class Cat
//=======================================================//

//Controlling class that ties all the pieces together and
// exercises them.
class Callback03{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //Instantiate Teacher object
&nbsp;&nbsp;&nbsp; Teacher missJones = new Teacher();

&nbsp;&nbsp;&nbsp; //Instantiate some Student objects
&nbsp;&nbsp;&nbsp; Student tom = new Student("Tom");
&nbsp;&nbsp;&nbsp; Student sue = new Student("Sue");
&nbsp;&nbsp;&nbsp; Student peg = new Student("Peg");
&nbsp;&nbsp;&nbsp; Student bob = new Student("Bob");
&nbsp;&nbsp;&nbsp; Student joe = new Student("Joe");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate some Dog objects.
&nbsp;&nbsp;&nbsp; Dog spot = new Dog("SpotDog");
&nbsp;&nbsp;&nbsp; Dog fido = new Dog("FidoDog");
&nbsp;&nbsp;&nbsp; Dog brownie = new Dog("BrownieDog");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate some Cat objects
&nbsp;&nbsp;&nbsp; Cat cleo = new Cat("CleoCat");
&nbsp;&nbsp;&nbsp; Cat kitty = new Cat("KittyKat");

&nbsp;&nbsp;&nbsp; //Register some Student, Dog, and Cat objects with&nbsp;
&nbsp;&nbsp;&nbsp; // the Teacher object.
&nbsp;&nbsp;&nbsp; missJones.register(tom);
&nbsp;&nbsp;&nbsp; missJones.register(spot);
&nbsp;&nbsp;&nbsp; missJones.register(sue);
&nbsp;&nbsp;&nbsp; missJones.register(cleo);
&nbsp;&nbsp;&nbsp; missJones.register(fido);
&nbsp;&nbsp;&nbsp; missJones.register(peg);
&nbsp;&nbsp;&nbsp; missJones.register(kitty);
&nbsp;&nbsp;&nbsp; missJones.register(bob);
&nbsp;&nbsp;&nbsp; missJones.register(brownie);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Cause the Teacher object to call recess on all
&nbsp;&nbsp;&nbsp; // the objects on the list.
&nbsp;&nbsp;&nbsp; missJones.callRecess();
&nbsp;&nbsp;&nbsp; //Cause the Teacher object to call lunch on all
&nbsp;&nbsp;&nbsp; // the objects on the list.
&nbsp;&nbsp;&nbsp; missJones.callLunch();
&nbsp; }//end main()
}//end class Callback03
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>