<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JDK 1.1, Preserving Default Key Behavior<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 902, Revised 3/20/97.
<ul><li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li></ul>

<hr width="100%"><center><h2><a name="introduction"></a><b><font color="#ff0000">Introduction</font></b></h2></center>
This is one in a planned series of documents which will be written in response
to questions posted on the various Java newsgroups.

<p>In most cases, the response will be in the form of a sample program.
In most cases, the programs will be written using JDK 1.1 unless there
is some special reason to backtrack to JDK 1.0.2.

<p>Also, in most cases, there will be very little discussion other than
the comments contained in the program.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center><font color="#000000">This program was written in response to a request
from a poster for code which "propagates key events in JDK 1.1 up the container
hierarchy."</font>

<p><hr width="100%"><pre>/*File news003.java Copyright 1997, R.G.Baldwin
Designed to be compiled and run under JDK 1.1.
Written and tested using JDK 1.1 under Win95.

This program was written in response to a newsgroup poster who
asked how to propagate events up the hierarchy in JDK 1.1 in&nbsp;
order to <font color="#ff0000">preserve default behavior of certain keystrokes</font>.

The poster's explanation for needing to propagate events up the
hierarchy was as follows:

"The main reason that I asked for event propagation is different.&nbsp; Let&nbsp;
me clearly explain my situation.&nbsp; I have developed DateTextField for&nbsp;
my own use.&nbsp; This field validates and completes the date if necessary.&nbsp;&nbsp;
But I am not handling all the keyDown events.&nbsp; For example HOME,&nbsp;
END etc.... For these I have been depending on the default behavior.&nbsp; In&nbsp;
this case I have to "return false" so that the default behavior is invoked&nbsp;
and get the work done.&nbsp; I strongly believe that there may be a way to&nbsp;
propagate event, because this is one of the reported bugs to JavaSoft.&nbsp;&nbsp;
If you see where I am getting at, and if you know the answer (I am&nbsp;
pretty sure you do) PLEASE HELP ME."

<b>DateTextField </b>does not appear in the JDK 1.1 documentation index so we&nbsp;
might assume that is the name of a class or object defined and created&nbsp;
by the poster, and that it is based on the <b>TextField </b>component.

This program places an editible TextArea object in the bottom of a Frame
and an editible TextField object in the top of an object.&nbsp; The program
writes 99 lines of text into the TextArea object and writes a single
line of text into the TextField object.

Two low-level KeyEvent handlers are instantiated and registered to listen
for keyTyped() events on the two Text objects.&nbsp; The action of the event&nbsp;
handler is simply to display the key that is typed on the console.

<b><font color="#0000ff">The important point is that without making any special effort to preserve
default handling, the Delete, Home, End, Arrow, and Backspace keys&nbsp;
behave as would be expected on both Text objects.&nbsp; The PageUP and&nbsp;
PageDown keys behave as would be expected on the TextArea object and&nbsp;
have no meaning on the TextField object since it contains only one line&nbsp;
of text.&nbsp; The behavior of the Tab key is a little strange.&nbsp; It shifts&nbsp;
the focus when the TextField has the focus, but inserts blank space when&nbsp;
the TextArea has the focus.
</font></b>*/

import java.awt.*;
import java.awt.event.*;
//===================================================================
class news003{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI(); //instantiate a user interface object
&nbsp; }//end main()
}//end class001
//===================================================================
class GUI{
&nbsp; GUI(){//constructor
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; TextArea myTextArea = new TextArea("Text Line 0\n");
&nbsp;&nbsp;&nbsp; TextField myTextField = new TextField("Copyright 1997, R.G.Baldwin");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; for(int cnt = 1; cnt &lt;100; cnt++)//add 98 more lines of text
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myTextArea.append("Text Line " + cnt + "");
&nbsp;&nbsp;&nbsp; myFrame.add("South",myTextArea);//place test area in the Frame
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add("North",myTextField);

&nbsp;&nbsp;&nbsp; myFrame.setSize(300,300);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //Instantiate and register a KeyEvent listener object for the&nbsp;
&nbsp;&nbsp;&nbsp; // TextArea object and the TextField object.
&nbsp;&nbsp;&nbsp; myTextArea.addKeyListener(new MyKeyListener());
&nbsp;&nbsp;&nbsp; myTextField.addKeyListener(new MyKeyListener());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register program termination object.
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class GUI
//==========================================================

//Objects of this class listen for keyTyped() events and display
// the character on the console.
class MyKeyListener extends KeyAdapter{
&nbsp; public void keyTyped(KeyEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(e.getKeyChar());
&nbsp; }//end keyTyped()
}//end MyKeyListener

//==========================================================

//Terminates program when the user closes the Frame object.
class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class Terminate



//==========================================================</pre>
-end-<!--end--></body></html>