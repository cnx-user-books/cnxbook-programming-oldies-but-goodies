<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JavaBeans, Overview<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 500, Revised 02/14/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#the beans interface">The Beans Interface</a></li>

<li><a href="#properties">Properties</a></li>

<li><a href="#methods">Methods</a></li>

<li><a href="#events">Events</a></li>

<li><a href="#introspection">Introspection</a></li>

<li><a href="#customization">Customization</a></li>

<li><a href="#persistence">Persistence</a></li>

<li><a href="#the beanbox">The Beanbox</a></li></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
A <b><i>Java Bean </i></b>is the name trademarked by Sun and given to a
Java class that adheres to a specific and well-defined set of <i>interface
specifications</i>.

<p>According to JavaSoft,
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>"A Java Bean is a reusable software component that can be manipulated
visually in a builder tool."</td></tr></table>
The purpose of a Bean is to be installed in the toolbox of a visual builder
tool (<b>VBT)</b> so that it can be incorporated into new applications
and applets with <u>no requirement</u> to recompile the code for the Bean.

<p>Furthermore, two or more Beans should be able to be installed in such
a toolbox and caused to communicate with one another without the requirement
to recompile either of them.

<p>Depending on the capability of the VBT, it may be possible for the programmer
to combine two or more Beans into a working application or applet without
the requirement to write any new code (although the VBT will usually write
new code on behalf of the programmer).

<p>For example, the <i>BeanBox </i>that we will discuss later allows Beans
to be wired together strictly using mouse actions on the Beans themselves
and on menus.

<p>Once a new application is created by combining individual Beans, it
should be possible to save the new application or applet for later use.
This includes saving the current state of all the Beans incorporated into
the application.

<p>If you are familiar with Microsoft's <i>Visual Basic</i> or Borland's
<i>Delphi</i>, then you are familiar with reusable components similar to
Java Beans. The VBX files and OCX files used in these two builder tools
serve a purpose similar to that served by Java Beans in Java builder tools.
<center><h2><a name="the beans interface"></a><font color="#ff0000">The Beans Interface</font></h2></center>
The following five attributes are common to Beans.
<ul><li><b>Properties</b></li>

<li>
Customization</li>

<li>
Persistence</li>

<li><b>Events</b></li>

<li>
Introspection</li></ul>
When we speak of the <i>interface </i>to a class in the context of a Bean,
we are usually referring to the <u>following three attributes</u> of the
class:
<ul><li><b>Properties</b></li>

<li>
Methods</li>

<li><b>Events</b></li></ul>
As you can see, with the exception of <i>Methods</i>, these two lists overlap.
We will briefly discuss all five of these attributes in addition to <b>methods
</b>in the sections which follow. We will discuss them all in detail in
subsequent lessons.
<center><h2><a name="properties"></a><font color="#ff0000">Properties</font></h2></center>
In the simplest case, a property of a Bean consists of an instance variable
whose value can be manipulated using a pair of <i>set</i> and <i>get</i>
methods. For example, the following pair of methods, in conjunction with
the instance variable to which they refer, constitute a property.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><tt>public void <b>setDelay</b>(int delayIn){<b>myDelay </b>= delayIn;}</tt>&nbsp;
<pre><tt>public int <b>getDelay</b>(){return <b>myDelay</b>;}</tt></pre></td></tr></table>
(Some OOD books would refer to <b>setDelay()</b> as a <i>mutator</i> and
would refer to <b>getDelay()</b> as a <i>field accessor</i>, or possibly
simply as an <i>accessor</i>.)

<p>In this case, according to Beans <i>design patterns,</i> the name of
the property is <b>delay </b>and the name of the instance variable used
to maintain the property is <b>myDelay</b>. In this case, the methodology
used to establish that this is a property is based on <i>design patterns
</i>(which will be explained in more detail later).

<p>If the <i>set</i> method exists without a corresponding <i>get</i> method,
then the property is a <i>write-only</i> property. Similarly, if the <i>get</i>
method exists without a corresponding <i>set</i> method, then the property
is a <i>read-only</i> property. (This is probably the more common of these
two special cases.)

<p>It is also possible to forego <i>design patterns</i> and provide explicit
information regarding various aspects of the interface.

<p>Note that the above methods are declared <b>public</b>. Common jargon
has it that this property has been <i>exposed</i> to the builder tool.

<p>Another design pattern used to identify properties has to do with <b>boolean
</b>properties. If the underlying instance variable type is <b>boolean</b>,
an <i>accessor </i>method of the form
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><tt>public boolean <b>is</b>&lt;PropertyName>()</tt></pre></td></tr></table>
would expose the property as a <b>boolean</b> property to a VBT.

<p>There are four kinds of properties:
<ul><li>
Simple</li>

<li>
Indexed</li>

<li>
Bound</li>

<li>
Constrained</li></ul>
We will discuss the four types in detail in subsequent lessons.
<center><h2><a name="methods"></a><font color="#ff0000">Methods</font></h2></center>
All <b>public </b>methods are automatically exposed to the VBT, unless
the Bean's methods are explicitly identified as described above.

<p>Exposure of the methods means that the facilities of the VBT can link
events generated by other Beans to those methods. Stated differently, this
means that those methods can be invoked by the code generated by the VBT
as a result of some event possibly involving that Bean or another Bean.

<p>In the general case, if necessary to provide <i>thread-safe</i> operation,
methods in a Bean should be <i>synchronized</i> to prevent them from being
invoked from two or more threads at the same time.
<center><h2><a name="events"></a><font color="#ff0000">Events</font></h2></center>
Java Beans use the <i>Delegation Event Model </i>of JDK 1.1 that we learned
about in earlier lessons.

<p>By default, a Bean can generate any type of event supported by its parent
class.

<p>In addition, a Bean can expose the fact that it can generate events
in a <i>multicast </i>sense by providing a pair of public methods similar
to the following (this pair of methods represents another <i>design pattern</i>):
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><tt>public synchronized void <b>addMouseListener</b>(MouseListener
e){...}</tt>&nbsp;
<pre><tt>public synchronized void <b>removeMouseListener</b>(MouseListener ml)
&nbsp; {...}</tt></pre></td></tr></table>
We have seen methods similar to these in previous lessons discussing event
handling in JDK 1.1. The body of these two methods must be capable of maintaining
a list of <i>Listener </i>objects which are to be notified whenever an
event of the specified type occurs. Generally notification will involve
invoking a specific method on each <i>Listener </i>object in the list and
passing an object containing a description of the event as a parameter.
We will see examples in subsequent lessons.

<p>In keeping with the terminology of the JDK 1.1 Delegation Event Model,
the Bean that maintains the list is the <i>Source</i> Bean and the objects
added to the list (registered) are the <i>Listener</i> objects.

<p>In this case, a VBT might have the ability to cause other Bean objects
to be added to the list of registered <i>Listener </i>objects so that they
would be automatically notified whenever an event of the specified type
occurs on the <i>Source </i>object.
<center><h2><a name="introspection"></a><font color="#ff0000">Introspection</font></h2></center>
The JavaBeans APIs include the following class:
<ul><li><b>java.beans.Introspector</b>.</li></ul>
This class provides a standard way for VBTs to learn about the <u>properties</u>,
<u>events</u>, and <u>methods</u> of a target Bean's class.

<p>The <b>Introspector </b>class contains methods that can be used to analyze
the target Bean's class and superclasses looking either for explicit or
implicit information. The information discovered is used to build and return
an object of type <b>BeanInfo </b>that describes the target Bean.

<p>As mentioned earlier, the programmer
<ul><li>
can provide explicit information about a Bean,</li>

<li>
can rely on the recognition of <i>design patterns</i>, or</li>

<li>
some combination of the two.</li></ul>
Both approaches will be discussed in detail in a subsequent lesson.

<p>The methods of the <b>Introspector</b> class use low-level <i>reflection
</i>techniques in the analysis of the Bean. Low-level reflection techniques
were studied in an earlier lesson.

<p>The primary method of the <b>Introspector </b>class used to analyze
a Bean is the <b>getBeanInfo() </b>method. Simply put, this method takes
a target <b>Class </b>object as a parameter and returns a <b>BeanInfo </b>object
containing information about the target class. The <b>BeanInfo </b>class
contains a number of methods that can be used to extract the different
elements of information from the <b>BeanInfo </b>object.

<p>There are two versions of the <b>getBeanInfo()</b> method. The method
which accepts only one parameter returns information about the target class
and <u>all</u> its superclasses.

<p>Another version accepts a second <b>Class </b>object as a parameter
and uses that class as a ceiling for introspection up the inheritance hierarchy.
For example, if this second class is the direct superclass of the primary
target class, only information about the primary target class is returned.
<center><h2><a name="customization"></a><font color="#ff0000">Customization</font></h2></center>
Customization is the ability of the VBT to modify the appearance or behavior
of the Bean while integrating it into a larger overall application. Generally
this is accomplished by modifying properties at design time. Most VBTs
will provide a <i>property editor</i> as a part of the development environment
for this purpose.

<p>Sometimes it is also desirable for the bean to provide its own <i>property
editor</i> to enable a VBT to modify properties whose type is otherwise
unknown to the VBT.

<p>Also, in some cases, the Bean may simply be too complex for the default
tools in the VBT to handle. In those cases, the Bean can provide a <i>customizer</i>.
<center><h2><a name="persistence"></a><font color="#ff0000">Persistence</font></h2></center>
Often it is necessary for the current state of a bean to be distributed
in serialized form, or to be saved and later retrieved. This goes under
the name <i>Persistence</i>. In order to accomplish this, classes for Beans
must implement the <b>Serializable </b>interface so that the capabilities
of <i>Object Serialization</i> can be used. <i>Object Serialization</i>
was discussed in an earlier lesson.
<center><h2><a name="the beanbox"></a><font color="#ff0000">The Beanbox</font></h2></center>
As of the original date of this writing (April 1997), the APIs needed to
develop Beans were available for downloading from JavaSoft in the form
of the Beans Development Kit (BDK). When you download the BDK, you also
receive a Java application known as the <i>BeanBox</i>. The <i>BeanBox
</i>is an application written in Java that can be used to test your Java
Beans.

<p>The BeanBox is not intended to be a Visual Builder Tool. However, it
does resemble VBTs in that it presents a <i>toolbox</i>, a <i>property
inspector</i>, and a <i>main form</i> for assembling an application. It
also provides menus which allow you to hook Beans together and also to
allow you to apply introspection and report on a Bean.

<p>In order to place a new Bean in the toolbox for the BeanBox, you need
to create a Java Archive Tool (JAR) file and store that file in a specific
directory. Subsequent lessons will contain discussions regarding the use
of the BeanBox for testing Beans as well as procedures for creating JAR
files and installing them in the toolbox.

<p>-end-<!--end--></body></html>