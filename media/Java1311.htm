<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Enterprise JavaBeans(TM)</h2></center>

<center>
<h2>
Getting Started with EJB, Part 2</h2></center>
<b>By <a href="#BaldwinBio">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1311
<p>November 27, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Bean Program">Sample Bean Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Sample Remote and Home Interfaces">Sample Remote and Home Interfaces</a></li>

<li>
<a href="#The Compilation Batch File">The Compilation Batch File</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is one in a series of lessons designed to teach you about Sun's Enterprise
JavaBeans(TM) (EJB).
<p><b><font color="#FF0000">Second in a miniseries</font></b>
<p>This lesson is also the second lesson in a miniseries of several lessons
intended to get you up and running with Sun's Enterprise JavaBeans(TM)
very quickly.
<p><b><font color="#FF0000">First you learn to step, then you learn to
run</font></b>
<p>The lessons in this miniseries will show you the steps involved in writing,
compiling, deploying and executing a simple bean.&nbsp; However, the miniseries
won't spend much effort explaining why you need to take those steps.
<p><b><font color="#FF0000">More details in subsequent lessons</font></b>
<p>Subsequent lessons will come back and fill in the gaps to give you a
better understanding of the steps.
<p>Subsequent lessons will also teach you about the different kinds of
beans and how to use those beans in different situations.
<p><b><font color="#FF0000">Steps in this lesson</font></b>
<p><font color="#000000">The previous lesson entitled <a href="Java1310.htm">Getting
Started with EJB, Part 1</a> contained a list of the required steps involved
in </font>writing, compiling, deploying and executing a simple bean.
<p><b><font color="#FF0000">Download and Install</font></b>
<p>The first two steps involved downloading and installing the JDK and
the J2EE.&nbsp; I will assume that you have completed those two steps.
<p><b><font color="#FF0000">Preview</font></b>
<p>Now I will move on to the third, fourth, fifth, and sixth steps, which
read as follows (note that the wording for these steps is somewhat more
brief than the original version in the previous lesson):
<ul>
<li>
Write the bean class and any helper classes that the bean may need.</li>

<li>
Write two interfaces, known as the <i>home</i> and <i>remote</i> interfaces.</li>

<li>
Write a batch file to control the compilation process for the bean and
the interface files.</li>

<li>
Use the batch file to compile the bean class, any helper classes, and the
two interfaces.</li>
</ul>
This lesson will show you how to accomplish these four steps.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the listings while you are reading about them.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is strongly recommended that you study the previous lesson entitled
<a href="Java1310.htm">Enterprise
JavaBeans(TM), Getting Started with EJB, Part 1</a> before embarking on
this lesson.
<p>Additional supplementary material that I have written is available at
<a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan</a>.&nbsp;
A consolidated index to that material is available at
<i>Baldwin's Java
Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">A clarification</font></b>
<p><font color="#000000">Because of the likelihood of confusion regarding
the use of the term <i>beans</i>, and just in case you are reading this
lesson without having read the earlier lessons in this series, I will tell
you that an enterprise bean is not the same thing as a <i>JavaBean Component(TM)</i>,
as discussed in my series of <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">tutorial
lessons</a> beginning with lesson number 500.</font>
<p><b><font color="#FF0000">Purposes, goals, etc.</font></b>
<p><font color="#000000">I explained what an enterprise bean is in the
previous lesson.&nbsp; I also explained the purpose and goals of enterprise
beans in that lesson.</font>
<p><font color="#000000">I gave a brief explanation as to how the goal
is achieved by freeing the application programmer from the requirement
to write the code for complex services such as concurrency, transactions,
persistence, distributed objects, naming, and security.</font>
<p><font color="#000000">I explained that to be of any use, a bean must
be deployed in a server that is compliant with Sun's <i>Java 2 Platform
Enterprise Edition</i>.</font>
<p><b><font color="#FF0000">My approach</font></b>
<p><font color="#000000">I also explained that I intend to show you how
to deploy beans in Sun's <i>Java 2 Platform Reference Implementation.</i>&nbsp;
It is my expectation that having learned how to deploy and use beans in
that implementation, you will be able to expand that knowledge and apply
it to servers of other brands from other vendors.</font>
<center>
<h2>
<a NAME="Sample Bean Program"></a><font color="#000000">Sample Bean Program</font></h2></center>
<font color="#000000">If you are familiar with any of my earlier <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">tutorial
lessons</a>, you will know that I usually provide and discuss a sample
program in each lesson in order to reinforce a specific programming concept.&nbsp;
This lesson will follow that tried-and-true format.</font>
<p><b><font color="#FF0000">Writing EJB doesn't have to be complicated</font></b>
<p><font color="#000000">The concept that I want to reinforce in this lesson
is that writing Enterprise JavaBeans(TM) doesn't have to be complicated.</font>
<p><font color="#000000">Unfortunately, I can't say the same thing about
deploying enterprise beans.&nbsp; Deploying beans can be very complicated,
and I will address that complexity in subsequent lessons.</font>
<p><b><font color="#FF0000">Minimum programming requirement for a bean</font></b>
<p><font color="#000000">The minimum programming requirement for an enterprise
bean consists of:</font>
<ul>
<li>
<font color="#000000">One class definition</font></li>

<li>
<font color="#000000">Two interface definitions</font></li>
</ul>
<font color="#000000">In this lesson, I will develop and briefly discuss
the elements of a simple bean, including the class and the two required
interface definitions.&nbsp; I will discuss the bean's class definition
and the interface definitions in much more detail in subsequent lessons.</font>
<p><b><font color="#FF0000">The "hello Professor Baldwin" bean</font></b>
<p><font color="#000000">The name of the source file containing the bean
class is <b>HelloBean.java</b>.&nbsp; This is a typical "hello world" bean.&nbsp;
It has one business method.&nbsp; (I will also discuss business methods
in more detail in subsequent lessons.)</font>
<p><b><font color="#FF0000">How does it behave?</font></b>
<p><font color="#000000">The one business method of the bean receives a
string as an incoming parameter and returns that string along with a greeting
to the user of the bean.</font>
<p><b><font color="#FF0000">The bean's life cycle</font></b>
<p><font color="#000000">The bean also displays information about where
it is in its life cycle.&nbsp; (I will also discuss the life cycle of a
bean in detail in subsequent lessons.)</font>
<p><font color="#000000">The life cycle information is displayed on the
console where the server containing the bean is running.&nbsp; Optionally,
that output can be redirected to a log file when the J2EE server is started.</font>
<p><b><font color="#FF0000">Stateless vs. stateful beans</font></b>
<p><font color="#000000">The bean in the example will be a <i>stateless</i>
<i>session
</i>bean.&nbsp; I will have a lot more to say about <i>session</i>
beans, of both the <i>stateless</i> and <i>stateful</i> variety, in subsequent
lessons.</font>
<p><font color="#000000">This bean was tested using the J2EE server and
JDK 1.3 under WinNT workstation 4.0.</font>
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
My normal approach is to break a program down into fragments and to discuss
the fragments individually.&nbsp; Then I provide a listing of the entire
program near the end of the lesson.&nbsp; I will follow that approach in
this lesson.&nbsp; Therefore, you will find a complete listing of the bean
program near the end of this lesson.
<p><b><font color="#FF0000">A very brief discussion</font></b>
<p>This will be a very brief discussion, intended to give you a view of
a bean from 50,000 feet.&nbsp; Please don't be dismayed by the lack of
details.&nbsp; Details will be forthcoming in subsequent lessons.
<p><b><font color="#FF0000">The bean class</font></b>
<p>Listing 1 shows the beginning of the bean class along with a couple
of import directives.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>import
javax.ejb.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import java.util.Date;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public <b>class HelloBean
implements SessionBean</b>{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; <b>SessionContext</b>
ctx;</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 1</font></font></b></td>
</tr>
</table>

<p>A session bean must implement the <b>SessionBean</b> interface.&nbsp;
This is illustrated in Listing 1.
<p><b><font color="#FF0000">The SessionContext variable</font></b>
<p>Listing 1 also shows the declaration of an instance variable of the
type
<b>SessionContext</b>.&nbsp; This variable will be populated by one
of the methods that I will mention later.&nbsp; I will also have a lot
more to say about the <b>SessionContext</b> in subsequent lessons.
<p><b><font color="#FF0000">Import directives</font></b>
<p>Note that the <b>javax.ejb</b> package that is imported in Listing 1
is contained in the class library that you receive when you download J2EE
from Sun.
<p>Since this package is not part of the standard JDK 1.3, but comes with
J2EE, I assume that it is the responsibility of the vendor of the J2EE
package-compliant server to provide it.
<p><b><font color="#FF0000">Creating the bean</font></b>
<p>Listing 2 shows a method named <b>ejbCreate()</b> that is invoked when
the bean is created.&nbsp; The bean class can define overloaded versions
of this method name.&nbsp; The home interface that I will present and discuss
later must declare a <i>create</i> method corresponding to each overloaded
version of <b>ejbCreate()</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>&nbsp;
public void <b>ejbCreate</b>(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Created "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbCreate()</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 2</font></font></b></td>
</tr>
</table>

<p>The client causes one of the overloaded versions of the <b>ejbCreate()</b>
method to be invoked when it invokes a method that causes the bean to be
created.&nbsp; Note, however, that the client <b>does not invoke this method
directly</b>.&nbsp; In a subsequent lesson, I will show you a client program
that can create and use this bean.
<p><b><font color="#FF0000">Used for initialization</font></b>
<p>The <b>ejbCreate()</b> method is intended to be used for initialization
purposes, much like a parameterized constructor is used in an ordinary
non-bean class.
<p><b><font color="#FF0000">Business methods</font></b>
<p>The business methods of a bean are exposed to the client through the
remote interface (to be discussed later) and can be indirectly invoked
by the client.
<p>The intent is that the client will invoke the business methods to accomplish
the business purposes of the bean.&nbsp; Since this is a "hello" bean,
we would expect its single business method to do something involving the
word hello.
<p><b><font color="#FF0000">aBusinessMethod()</font></b>
<p>This bean contains only one business method.&nbsp; That method, named
<b>aBusinessMethod()</b>
is shown in Listing 3.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>&nbsp;
public String <b>aBusinessMethod</b>(String str){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; return
"Hello " + str;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end aBusinessMethod()</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 3</font></font></b></td>
</tr>
</table>

<p>As you can see, this is a very simple business method.&nbsp; The method
receives a reference to a <b>String</b> object and returns the string representation
of that object concatenated to the string "Hello".&nbsp; In other words,
the method says hello to the client when it is invoked.
<p><b><font color="#FF0000">Method output</font></b>
<p>When this business method is invoked on the bean, passing a reference
to a <b>String</b> object containing my name, the following string is returned
to the client by the method:
<p><b><font face="Courier New,Courier"><font size=-1>Hello Professor Baldwin</font></font></b>
<p><b><font color="#FF0000">Callback methods</font></b>
<p>The three methods shown in Listing 4, along with the <b>setSessionContext()</b>
method shown in Listing 5, are callback methods.&nbsp; They are invoked
by the server and its associated container when certain critical events
occur during the lifetime of the bean.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>&nbsp;
public void <b>ejbRemove</b>(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Removed "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbRemove()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void <b>ejbActivate</b>(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Activated "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbActivate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void <b>ejbPassivate</b>(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Passivated "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbPassivate()</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 4</font></font></b></td>
</tr>
</table>

<p><b><font color="#FF0000">No registration required</font></b>
<p>However, unlike many other callback methods in Java, it isn't necessary
for the programmer to register these callback methods on a source.&nbsp;
They are automatically registered on the container (to which the beans
belongs) when the bean becomes operational.
<p><b><font color="#FF0000">Purpose of callback methods</font></b>
<p>You write code in the body of the callback methods to deal with the
needs of the bean at the critical points in its life when the callback
methods are invoked by the server.
<p>In this example, I have simply caused the methods to report that they
have been invoked along with the date and time that they were invoked.&nbsp;
I will discuss the use of these methods in more detail in a subsequent
lesson.
<p><b><font color="#FF0000">Session context</font></b>
<p>Listing 1 showed the declaration of an instance variable of the type
<b>SessionContext</b>.&nbsp;
Listing 5 shows how this instance variable is populated by the method named
<b>setSessionContext()</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>&nbsp;
public void <b>setSessionContext</b>(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SessionContext <b>ctx</b>){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; <b>this.ctx
= ctx;</b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"HelloBean got SessionContext "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end setSessionContext()</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 5</font></font></b></td>
</tr>
</table>

<p>According to the excellent book entitled <u>Enterprise JavaBeans</u>,
by Tom Valesky, (Addison Wesley), the <b>setSessionContext()</b>&nbsp;
method is invoked on the bean <i>"at the very beginning of a Session bean's
life."</i>
<p>Valesky goes on to say,&nbsp;<i> "The container passes the Session bean
an object that implements the SessionContext interface.&nbsp; The bean
stores this object in an object variable, and can then use the SessionContext
to interact with container-provided services such as security and transaction
management."</i>
<p><b><font color="#FF0000">The <i>noarg</i> constructor</font></b>
<p>Finally, the bean class ends with an empty public constructor having
no arguments as shown in Listing 6.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>&nbsp;
public HelloBean(){}//public constructor</font></font>
<p><font face="Courier New,Courier"><font size=-2>}//end class HelloBean</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 6</font></font></b></td>
</tr>
</table>

<p><b><font color="#FF0000">The output</font></b>
<p>When this bean is created and later removed by a client, the following
output appears on the server console or in the server log file (note that
newline characters were manually inserted to force the text to fit in this
narrow format):
<p><b><font face="Courier New,Courier"><font size=-1>HelloBean got SessionContext
Sat Sep 16</font></font></b>
<br><b><font face="Courier New,Courier"><font size=-1>&nbsp; 08:13:41 CDT
2000</font></font></b>
<br><b><font face="Courier New,Courier"><font size=-1>HelloBean Created
Sat Sep</font></font></b>
<br><b><font face="Courier New,Courier"><font size=-1>&nbsp; 16 08:13:41
CDT 2000</font></font></b>
<br><b><font face="Courier New,Courier"><font size=-1>HelloBean Removed
Sat Sep</font></font></b>
<br><b><font face="Courier New,Courier"><font size=-1>&nbsp; 16 08:13:41
CDT 2000</font></font></b>
<p>Note also that additional output could appear if the server decided
to <i>passivate</i> and <i>activate</i> the bean during its lifetime.&nbsp;
I will have more to say on this subject in a subsequent lesson.
<p><b><font color="#FF0000">End of the bean class</font></b>
<p>That is the end of the bean class.&nbsp; All that is necessary now is
to compile it, along with the two interfaces mentioned earlier, and to
deploy it into a J2EE platform-compliant server .&nbsp; Then it can be
used by a client of the server.
<p>A complete listing of the bean program is shown near the end of this
lesson.
<center>
<h2>
<a NAME="Sample Remote and Home Interfaces"></a>Sample Remote and Home
Interfaces</h2></center>
I'm simply going to show you the code for the two required interfaces without
making any attempt to explain them in at this point in time.&nbsp; I will
explain them in detail in a subsequent lesson.&nbsp; Suffice it at this
point to say that they expose various aspects of the bean to the client
program.
<p><b><font color="#FF0000">The home interface</font></b>
<p>If you have already guessed that the <b>create()</b> method declared
in this interface has some relationship with the <b>ejbCreate()</b> method
mentioned earlier, you are correct.&nbsp; I will discuss that relationship
in detail later.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File HelloHome.java&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public interface HelloHome
extends EJBHome{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; public Hello
<b>create()</b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws java.rmi.RemoteException,&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
javax.ejb.CreateException;</font></font>
<br><font face="Courier New,Courier"><font size=-2>}//end interface</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 7</font></font></b></td>
</tr>
</table>

<p><b><font color="#FF0000">The remote interface</font></b>
<p>You will note that this interface declares a method named <b>aBusinessMethod()</b>
that matches the signature of the method having the same name in the bean
class.
<p>All business methods of a bean are exposed to the client program through
the remote interface.&nbsp; I will also have a lot more to say about this
in a subsequent lesson.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File Hello.java</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import java.rmi.*;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public interface Hello
extends EJBObject{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; String <b>aBusinessMethod(String
s)</b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws RemoteException;</font></font>
<br><font face="Courier New,Courier"><font size=-2>}//end interface</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 8</font></font></b></td>
</tr>
</table>

<center>
<h2>
<a NAME="The Compilation Batch File"></a>The Compilation Batch File</h2></center>
The following Windows batch file can be used to compile the bean and the
two interfaces.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>set
J2EE_HOME=d:\progfile\j2sdkee1.2.1</font></font>
<br><font face="Courier New,Courier"><font size=-2>set CPATH=.;%J2EE_HOME%\lib\j2ee.jar</font></font>
<p><font face="Courier New,Courier"><font size=-2>javac -classpath %CPATH%&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
HelloBean.java HelloHome.java Hello.java</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 9</font></font></b></td>
</tr>
</table>

<p>The first line creates an environment variable named J2EE_HOME and points
it to the directory where the J2EE is installed.
<p>The second line creates an environment variable named CPATH representing
a classpath containing the current directory (.) and the path to a jar
file provided with J2EE that contains the class libraries for J2EE.
<p>The third line invokes the <b>javac</b> compiler on three separate source
files after adjusting the classpath to include the environment variable
named CPATH created earlier.&nbsp; (Note that in order to get the third
line to fit in this narrow format, it was necessary for me to manually
insert a newline.&nbsp; You will need to remove that newline before attempting
to execute this batch file.)
<p><b><font color="#FF0000">Compiling the bean</font></b>
<p>To compile the bean, copy the two source files given above into some
directory on your hard drive.&nbsp; Make certain that the names of the
files match the class and interface names.&nbsp; Copy this batch file into
the same directory.&nbsp; Then execute the batch file.
<p>Once you have successfully executed this batch file, your bean should
have been compiled, and should be ready for deployment into the J2EE.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<b><font color="#FF0000">Four steps</font></b>
<p>This lesson has shown you how to accomplish the following four steps
along your journey towards an operational session bean running in J2EE.
<ul>
<li>
Write the bean class and any helper classes that the bean may need.&nbsp;
(No helper classes were needed for this simple bean.)</li>

<li>
Write two interfaces known as the <i>home</i> and <i>remote</i> interfaces.</li>

<li>
Write a batch file to control the compilation process for the bean and
the interface files.</li>

<li>
Use the batch file to compile the bean class and the two interfaces.</li>
</ul>
<b><font color="#FF0000">Minimum programming requirement</font></b>
<p>I explained that the minimum programming requirement for a bean is the
bean class plus two interfaces.
<p><b><font color="#FF0000">A simple hello bean</font></b>
<p>I developed and provided the source code for a simple bean that greets
a client with the word hello concatenated to a string provided by the client.
<p><b><font color="#FF0000">Life cycle and callback methods</font></b>
<p>I talked a little about the life cycle of a bean and the callback methods
that the bean uses to monitor that life cycle.
<p><b><font color="#FF0000">The session context, bean creation, and the
ejb package</font></b>
<p>I mentioned session context and <b>ejbCreate()</b>.
<p>I explained where to find the package named <b>javax.ejb</b>.
<p><b><font color="#FF0000">Business methods</font></b>
<p>I gave a brief explanation the concept of business methods, and how
they are exposed to the client via the remote interface.
<p><b><font color="#FF0000">Required interfaces</font></b>
<p>I developed and showed the source code for the <i>remote</i> and <i>home</i>
interfaces that must be compiled and provided along with the bean class
for deployment into J2EE.
<p><b><font color="#FF0000">Compilation of the bean</font></b>
<p>I developed and showed a batch file that can be used to control the
classpath variable during compilation of the bean and the two interfaces.
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
I am assuming that you will copy the source files given in this lesson
and then use the batch file to compile them.
<p>In the next lesson, I will begin walking you through the detailed steps
required to deploy the bean into J2EE and to make it available to a client
program.
<p>In a lesson following that one, I will develop and discuss a client
program that can link to the server and access the hello bean developed
in this lesson.
<p>After that, I will start explaining the different types of beans and
how they can be used in different situations.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the bean program is shown in Listing 10 below.&nbsp;
Complete listings of the remote and home interfaces along with the batch
file were shown earlier in Listings 7, 8 and 9.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File HelloBean.java</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<p><font face="Courier New,Courier"><font size=-2>This bean receives and
returns a String object</font></font>
<br><font face="Courier New,Courier"><font size=-2>via a single business
method.&nbsp; It also displays</font></font>
<br><font face="Courier New,Courier"><font size=-2>information about its
life cycle in the&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>System.out log file
or on the system console</font></font>
<br><font face="Courier New,Courier"><font size=-2>depending on whether
or not System.out has been</font></font>
<br><font face="Courier New,Courier"><font size=-2>directed to the log
files.</font></font>
<p><font face="Courier New,Courier"><font size=-2>This is a stateless session
bean.&nbsp; According to</font></font>
<br><font face="Courier New,Courier"><font size=-2>Sun, a session bean
must meet the following</font></font>
<br><font face="Courier New,Courier"><font size=-2>requirements:</font></font>
<p><font face="Courier New,Courier"><font size=-2>Implement the SessionBean
interface.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Class is defined as
public.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Class cannot be defined
as abstract or final.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Implements one or more
ejbCreate methods.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Implements the business
methods.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Contains a public constructor
with no&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; parameters.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Must not define the
finalize method.</font></font>
<p><font face="Courier New,Courier"><font size=-2>Tested using Sun j2ee
and JDK 1.3 under&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>WinNT 4.0 workstation.</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import java.util.Date;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public class HelloBean
implements SessionBean{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; SessionContext
ctx;</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbCreate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Created "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbCreate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public String
aBusinessMethod(String str){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; return
"Hello " + str;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end aBusinessMethod()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbRemove(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Removed "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbRemove()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbActivate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Activated "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbActivate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbPassivate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Passivated "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//ejbPassivate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void setSessionContext(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SessionContext ctx){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; this.ctx
= ctx;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"HelloBean got SessionContext "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//setSessionContext()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public HelloBean(){}//public
constructor</font></font>
<p><font face="Courier New,Courier"><font size=-2>}//end class HelloBean</font></font>
<br>&nbsp;
<p><b><font face="Courier New,Courier"><font size=-2>Listing 10</font></font></b></td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="BaldwinBio"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
