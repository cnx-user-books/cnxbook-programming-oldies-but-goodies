<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="author" content="richard g. baldwin">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">
<!--start-->
<center>
<h2>
<!--title-->JavaServer Pages, Comments, Declaration, and Expressions</h2></center>
<b><i>by Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 752
<p>April 18, 2000
<ul>
<li>
<a href="#_Introduction">Introduction</a></li>

<li>
<a href="#_Comments">Comments</a></li>

<ul>
<li>
<a href="#_Output_Comments">Output Comments</a></li>

<li>
<a href="#_Hidden_Comments">Hidden Comments</a></li>
</ul>

<li>
<a href="#_Declarations">Declarations</a></li>

<li>
<a href="#_Expressions">Expressions</a></li>

<li>
<a href="#_JSP_Syntax_Summary">JSP Syntax Summary</a></li>
</ul>

<center>
<hr size=3 width="100%" align=center></center>

<center>
<h2>
<a NAME="_Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">What is JSP?</font></b>
<p>See the <a href="Java750.htm">Lesson #750</a> for a description of JSP.
<p><b><font color="#FF0000">Is JSP difficult to use</font></b>
<p>JSP requires you to combine Java programming syntax with special HTML
syntax, and consequently, the coding effort can be fraught with details.
<p>While learning the details may not be much fun, you can't write the
code without knowing the syntax.
<p>This lesson will provide syntax details (with examples) for
<ul>
<li>
<b>comments</b></li>

<li>
<b>declarations</b></li>

<li>
<b>expressions</b></li>
</ul>
Syntax and examples for other elements of a JSP page will be provided in
future lessons.
<center>
<h2>
<a NAME="_Comments"></a>Comments</h2></center>
Knowing how to document your code using comments is always important.&nbsp;
Therefore, I will begin with a discussion of comments.
<p><b><font color="#FF0000">Two kinds of comments</font></b>
<p>There are two kinds of comments in JSP
<ul>
<li>
Comments intended for output to the HTML source</li>

<li>
Hidden comments</li>
</ul>

<center>
<h3>
<a NAME="_Output_Comments"></a>Output Comments</h3></center>
The following syntax generates a comment that can be viewed in the HTML
file that is produced by the JSP.
<p>Note that the syntax of an output comment can contain an optional JSP
expression (terms enclosed in square brackets are optional).
<p>Expressions are discussed in detail later in this lesson.
<p><b>&lt;!-- comment&nbsp;<br>
&nbsp; [ &lt;%= expression %> ] --></b>
<p><b><font color="#FF0000">Looks sort of like an HTML comment</font></b>
<p>If you are already familiar with HTML, you will recognize that, except
for the ability to include an expression, this is an ordinary HTML comment.&nbsp;
However, the inclusion of the expression makes it very special.
<p>The JSP engine returns the comment as part of the HTML output that it
sends to the client.&nbsp; The browser doesn't render HTML comments in
the standard browser window.&nbsp; Therefore, you must view the HTML source
via your browser to see the comment and the output from any embedded expressions.
<p><b><font color="#FF0000">A sample JSP page</font></b>
<p><a href="Java752-fig01.htm">Figure 1</a> shows a JSP page that contains
several output comments, both with and without embedded expressions.
<p><b><font color="#FF0000">Must view HTML source</font></b>
<p>Note that in this case, the output (date and time) produced by the expression
embedded in the comment is also not visible in the standard browser output
window.&nbsp; You must view the HTML source via your browser to see the
date and time output from the expression.
<p><b><font color="#FF0000">The HTML source</font></b>
<p><a href="Java752-fig02.htm">Figure 2</a> shows the HTML source produced
by the above JSP page and sent back to the browser.
<p>As you can see, the date and time produced by the expression in the
comment appears as part of the corresponding comment in the HTML source.
<p><b><font color="#FF0000">Dynamic comments</font></b>
<p>An expression that is included in a comment is dynamic.&nbsp; It is
evaluated when the Web browser first requests the page or reloads the page.
<p>This can be demonstrated using the sample JSP page shown in <a href="Java752-fig01.htm">Figure
1</a>.&nbsp; Loading this page and then reloading the page will cause the
time value produced by the expression in the comment to have a different
value with each reload.
<center>
<h3>
<a NAME="_Hidden_Comments"></a>Hidden Comments</h3></center>
A hidden comment is used to document the JSP page without the comment being
included in the HTML source sent to the client.&nbsp; The syntax for a
hidden comment is as follows.
<p><b>&lt;%-- hidden comment --%></b>
<p><b><font color="#FF0000">Lots of percent characters</font></b>
<p>Note the use of the percent character (<b>%</b>) in the tag.&nbsp; We
will be seeing lots of percent characters in our discussion of JSP.
<p>Sometimes on my screen with a small font, the percent character looks
a lot like the joining of two numeric characters, 96, so don't let that
confuse you if you experience the same thing.
<p><b><font color="#FF0000">Hidden comments are ignored</font></b>
<p>The JSP engine ignores hidden comments.&nbsp; Further, it doesn't process
any Java code that is within the hidden comment tags.&nbsp; This makes
hidden comments useful for using the age-old technique of “commenting out”
code during debugging.
<p><a href="Java752-fig01.htm">Figure 1</a> also contains some hidden comments.
<p><b><font color="#FF0000">Hidden comments not visible at the browser</font></b>
<p>Because the JSP engine ignores a hidden comment, it is not sent to the
client.&nbsp; Therefore, it is not visible either in the material displayed
by the browser in the standard browser window, or in the material that
you see when you view the HTML source via your browser.
<p>An examination of <a href="Java752-fig02.htm">Figure 2</a> shows that
the hidden comments did not appear in the HTML source sent to the browser.&nbsp;
Instead, there were blank lines where the hidden comments would otherwise
appear.
<p><b><font color="#FF0000">An escape character</font></b>
<p>Obviously, the body of your comment may not include the following four
characters in sequence because the sequence would signal the end of the
comment.
<p><b>--%></b>
<p>If you need to include this sequence of characters in the body of the
comment, you will need to use the backslash as an escape character as follows:
<p><b>--%\></b>
<center>
<h2>
<a NAME="_Declarations"></a>Declarations</h2></center>
A JSP declaration is used to declare a variable or a method for use later
in the JSP source file.
<p><b><font color="#FF0000">Declaration syntax</font></b>
<p>The syntax of a JSP declaration is as follows (note the exclamation
mark following the percent character on the left):
<p><b>&lt;%! declarations %></b>
<p>Here are some examples of JSP declarations:

<p><b>&lt;%! int a = 100,
b = 2; %></b>

<p><b>&lt;%! java.util.Date
myDate = new java.util.Date(); %></b>
<p><b><font color="#FF0000">Some rules</font></b>
<p>According to Sun, here are some of the rules governing JSP declarations:
<ul>
<li>
A declaration must contain at least one complete declarative statement.</li>

<li>
You can declare any number of variables or methods within one declaration
tag, provided that they are separated by semicolons.</li>

<li>
The declaration must be valid in the scripting language used in the JSP
file. (In JSP 1.0, you must use the Java programming language for scripting,
and declarations must conform to the Java Language Specification.)</li>

<li>
You must end the declaration with a semicolon (the same rule as for a <i>Scriptlet</i>,
but different from an Expression).&nbsp; (Scriptlets will be discussed
in a future lesson.)</li>

<li>
You must declare the variable or method before you use it in the JSP file.</li>

<li>
You can already use variables or methods that are declared in packages
imported by the <i>Page Directive</i>, so there is no need to declare them.&nbsp;
(The Page Directive will also be discussed in a future lesson.)</li>
</ul>

<p><br><b><font color="#FF0000">Scope</font></b>
<p>A declaration has page scope.&nbsp; It is valid in scriptlets, expressions,
and other declarations within the same JSP source file.
<p><b><font color="#FF0000">Include directives</font></b>
<p>A JSP file can include other JSP files using the <i>Include Directive</i>
that will be discussed in a future lesson.
<p>If the JSP file does include other files, the rules regarding scope
are more complex.
<p>Here are the rules of scope as defined by Sun:
<ul>
<li>
If the JSP source file does not include any other files, declarations have
page scope.</li>

<li>
If the JSP source file includes a dynamic file with <i>&lt;jsp:include></i>,
declarations have page scope.&nbsp; I will discuss &lt;jsp:include> in
a future lesson.</li>

<li>
If the JSP source file includes static files with <i>&lt;jsp:include> </i>or
the Include Directive, declarations have <i>translation unit scope</i>.
A translation unit is the JSP source file plus all of its static include
files, but without any dynamic include files.</li>
</ul>

<p><br>I will provide a sample JSP page that makes use of declarations
after I discuss expressions in the next section.
<center>
<h2>
<a NAME="_Expressions"></a>Expressions</h2></center>
<b><font color="#FF0000">Syntax</font></b>
<p>The syntax for an expression tag is as follows (note the equal character
following the percent character on the left):
<p><b>&lt;%= expression %></b>
<p>The expression contained within the tag is
<ul>
<li>
Evaluated</li>

<li>
Converted to a String</li>

<li>
Inserted into the HTML text where the expression appears in the JSP file</li>
</ul>

<p><br><b><font color="#FF0000">An expression produces text</font></b>
<p>You can use an expression as part of the HTML text in a JSP file, because
the result of evaluating the expression is always converted to a <b>String</b>.
<p><b><font color="#FF0000">Some more rules</font></b>
<p>According to Sun, here are some of the rules that govern the use of
expressions:
<ul>
<li>
You cannot use a semicolon to end an expression in an expression tag (however,
the same expression within scriptlet tags requires the semicolon).</li>

<li>
The expression tag can contain any expression that is valid according to
the Java Language Specification.</li>

<li>
You can sometimes use expressions as attribute values in JSP tags.</li>

<li>
If an expression has more than one part, the parts are evaluated in left-to-right
order as they appear in the tag.</li>
</ul>

<p><br><a href="Java752-fig03.htm">Figure 3</a> is a JSP page that contains
some declarations and some expressions embedded in normal HTML text.
<p>Note that the declarations contain semicolons, and the expressions don't
contain semicolons.
<p><a href="Java752-fig04.htm">Figure 4</a> shows what my browser displays
when I cause this JSP file to be loaded.
<p>As you can see, the result of evaluating each of the expressions is
converted to a String and concatenated onto the normal HTML text in which
it is embedded.
<center>
<h2>
<a NAME="_JSP_Syntax_Summary"></a>JSP Syntax Summary</h2></center>
In this lesson, we have learned about the following JSP syntax:
<p>Output comments:
<br><b>&lt;!-- comment&nbsp;<br>
&nbsp; [ &lt;%= expression %> ] --></b>
<p>Hidden comments:
<br><b>&lt;%-- hidden comment --%></b>
<p>Declarations:
<br><b>&lt;%! declarations %></b>
<p>Expressions:
<br><b>&lt;%= expression %></b>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-<!--end-->
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
