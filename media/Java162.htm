<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>&nbsp;Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, Graphics and Colors - An Overview<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 162, Revised 02/06/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#the graphics class">The Graphics Class</a></li>

<ul><li><a href="#constructors">Constructors</a></li>

<li><a href="java162.htm#methods of the graphics class">Methods of the Graphics
Class</a></li>

<ul><li><a href="#utility methods for graphics">Utility Methods for Graphics</a></li>

<li><a href="#drawing and filling shapes">Drawing and Filling Shapes</a></li>

<li><a href="#drawing text">Drawing Text</a></li>

<li><a href="#clipping">Clipping</a></li>

<li><a href="#drawing images">Drawing Images</a></li></ul></ul>

<li><a href="#the color class">The Color Class</a></li>

<ul><li><a href="#constructors">Constructors</a></li>

<li><a href="#variables">Variables</a></li>

<li><a href="java162.htm#methods of the color class">Methods of the Color Class</a></li>

<ul><li><a href="#utility methods for colors">Utility Methods for Colors</a></li>

<li><a href="#investigate a color object">Investigate a Color Object</a></li>

<li><a href="#create a color object">Create a Color Object</a></li>

<li><a href="#for use with system properties">For use with System Properties</a></li>

<li><a href="#hsb methods">HSB Methods</a></li></ul></ul>

<li><a href="java162.htm#summary">Summary</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
A previous lesson provided some sample programs which make use of the features
of the <b>Graphics</b> class and the <b>Color</b> class without much in
the way of explanation. The purpose of this lesson is to present an overview
of the <b>Graphics</b> class and the <b>Color</b> class. Subsequent lessons
will explore many aspects of these classes in depth.
<center><h2><a name="the graphics class"></a><font color="#ff0000">The Graphics Class</font></h2></center>
The <b>Graphics</b> class is a large and complex class. It is the abstract
base class that provides all, or at least most, of the functionality for
an application to draw onto components and onto off-screen images as well.

<p>A <b>Graphics</b> object encapsulates the following state information
that is needed for basic rendering operations.
<ul><li>
The object of type <b>Component</b> on which to draw.</li>

<li>
A translation origin for rendering and clipping coordinates.</li>

<li>
The current clipped region.</li>

<li>
The current color.</li>

<li>
The current font.</li>

<li>
The current logical pixel operation function (XOR or Paint).</li>

<li>
The current XOR alternation color.</li></ul>
So, what happens when you use one of the <b>Graphics</b> methods to draw
a line or a figure on a <b>Component</b>? Here are some of the facts according
to the JavaSoft documentation from JDK 1.1.3:
<table border bgcolor="#00ffff" ><tr><td>"Coordinates are infinitely thin and lie between the pixels of the
output device.&nbsp;

<p>Operations which draw the outline of a figure operate by traversing
an infinitely thin path between pixels with a pixel-sized pen that hangs
<u>down and to the right</u> of the anchor point on the path.&nbsp;

<p>Operations which fill a figure operate by filling the interior of that
infinitely thin path.&nbsp;

<p>Operations which render horizontal text render the ascending portion
of character glyphs entirely above the baseline coordinate."</td></tr></table>
The fact that the graphics pen hangs <u>down and to the right</u> has some
important implications:

<p>If you draw a figure that covers a given rectangle, that figure occupies
one extra row of pixels on the right and bottom edges as compared to filling
a figure that is bounded by that same rectangle. We saw an example of this
in a previous lesson where we drew a rectangle with the same dimensions
as the <b>Canvas</b> object on which it was drawn, and discovered that
the right and bottom borders of the rectangle hung off the edge of the
object and were not visible.

<p>Another implication is that if you draw a horizontal line along the
same Y-coordinate as the baseline of a line of text, that line will be
drawn entirely below the text, except for any descenders.

<p>When you pass coordinates to the methods of a <b>Graphics</b> object,
they are considered relative to the translation origin of the <b>Graphics</b>
object prior to the invocation of the method.

<p>A <b>Graphics</b> object describes a graphics context. A graphics context
has a <b>current clip</b>. Any rendering operation that you perform will
modify only those pixels which lie within the area bounded by the <b>current
clip</b> of the graphics context and the component that was used to create
the <b>Graphics</b> object.

<p>When you draw or write, that drawing or writing is done in the <b>current
color</b> using the <b>current paint mode</b> in the <b>current font</b>.

<p>Numerous other classes, such as the <b>Rectangle</b> class and the <b>Polygon</b>
class are used in support of operations involving the <b>Graphics</b> class.
<center><h3><a name="constructors"></a><font color="#ff0000">Constructors</font></h3></center>
The <b>Graphics</b> class has a single constructor that takes no arguments.
However, <b>Graphics</b> is an <b>abstract</b> class so your applications
cannot call the constructor directly. You can obtain a <b>Graphics</b>
context from another <b>Graphics</b> context by calling <b>getGraphics()</b>
on a component.

<p>You also receive a <b>Graphics</b> context as a parameter whenever you
override either the <b>paint()</b> or <b>update()</b> methods.
<center><h3><a name="methods of the graphics class"></a><font color="#ff0000">Methods
of the Graphics Class</font></h3></center>
The <b>Graphics</b> class has many methods. The following sections contain
a representative sampling of those methods. I have attempted to group them
into meaningful categories. A complete listing of the methods along with
a description of each is contained in the JavaSoft documentation for the
AWT.
<center><h4><a name="utility methods for graphics"></a><font color="#ff0000">Utility
Methods for Graphics</font></h4></center><b>clearRect</b>(int, int, int, int) - Clears the specified rectangle by
filling it with the background color of the current drawing surface.

<p><b>copyArea</b>(int, int, int, int, int, int) - Copies an area of the
component specified by the first four parameters to another location on
the graphics context at a distance specified by the last two parameters.

<p><b>create</b>() - Creates a new <b>Graphics</b> object that is a copy
of the <b>Graphics</b> object on which it is invoked.

<p><b>dispose</b>() - Disposes of the graphics context on which it is invoked
and releases any system resources that it is using. This includes system
resources <u>other than memory</u>. A Graphics object cannot be used after
dispose has been called. It is important that you manually dispose of your
<b>Graphics</b> objects (created directly from a component or other <b>Graphics</b>
object) when you no longer need them rather than to wait for finalization.

<p><b>finalize</b>() - Disposes of this graphics context once it is no
longer referenced.

<p><b>getColor</b>() - Gets this graphics context's current color.

<p><b>setColor</b>(Color) - Sets this graphics context's current color
to the specified color. Subsequent graphics operations using this graphics
context use this specified color.

<p><b>setPaintMode</b>() - Sets the paint mode of this graphics context
to overwrite the destination with this graphics context's current color
(as opposed to XORMODE). Subsequent rendering operations will overwrite
the destination with the current color.

<p><b>setXORMode</b>(Color) - Sets the paint mode of this graphics context
to alternate between this graphics context's current color and the new
specified color.

<p><b>toString</b>() - Returns a <b>String </b>object representing this
<b>Graphics</b> object's value.

<p><b>translate</b>(int, int) - Translates the origin of the graphics context
to the point (<i>x</i>, <i>y</i>) in the current coordinate system.
<center><h4><a name="drawing and filling shapes"></a><font color="#ff0000">Drawing
and Filling Shapes</font></h4></center><b>drawLine</b>(int, int, int, int) - Draws a line, using the current color,
between two points in this graphics context's coordinate system.

<p><b>drawPolyline</b>(int[], int[], int) - Draws a sequence of connected
lines defined by arrays of <i>x</i> and <i>y</i> coordinates. The figure
will not be closed if the first point differs from the last point.

<p><b>drawRect</b>(int, int, int, int) - Draws the outline of the specified
rectangle using the current color of the graphics context..

<p><b>fillRect</b>(int, int, int, int) - Fills the specified rectangle
with the context's current color. Be sure to check the documentation regarding
the coordinates of the right edge and bottom edge of the rectangle before
using. This comment applies to all the fill methods.

<p><b>drawRoundRect</b>(int, int, int, int, int, int) - Draws an outlined
round-cornered rectangle using this graphics context's current color. You
might need to look at a book containing a diagram to learn how to specify
how the corners are rounded.

<p><b>fillRoundRect</b>(int, int, int, int, int, int) - Fills the specified
rounded corner rectangle with the current color.

<p><b>draw3DRect</b>(int, int, int, int, boolean) - Draws a 3-D highlighted
outline of the specified rectangle. The edges of the rectangle are highlighted
so that they appear to be beveled and lit from the upper left corner. The
boolean parameter determines whether the rectangle appears to be raised
above the surface or sunk into the surface. It is raised when the parameter
is true.

<p><b>fill3DRect</b>(int, int, int, int, boolean) - Paints a 3-D highlighted
rectangle filled with the current color.

<p><b>drawOval</b>(int, int, int, int) - Draws the outline of an oval in
the current color. When the last two parameters are equal, this method
draws a circle.

<p><b>fillOval</b>(int, int, int, int) - Fills an oval bounded by the specified
rectangle with the current color. As with drawOval(), when the last two
parameters are equal, the method fills a circle.

<p><b>drawArc</b>(int, int, int, int, int, int) - Draws the outline of
a circular or elliptical arc covering the specified rectangle. You will
probably need to examine the documentation to figure out how to specify
the parameters for this method as well as the fillArc() method.

<p><b>fillArc</b>(int, int, int, int, int, int) - Fills a circular or elliptical
arc covering the specified rectangle.

<p><b>drawPolygon</b>(Polygon) - Draws the outline of a polygon defined
by the specified <b>Polygon</b> object. Another overloaded version is available
that accepts a list of coordinate values to specify the polygon. The following
description of a <b>Polygon</b> object was taken from the JavaSoft documentation
for JDK 1.1.3.
<table border bgcolor="#80ffff" ><tr><td>"The Polygon class encapsulates a description of a closed, two-dimensional
region within a coordinate space. This region is bounded by an arbitrary
number of line segments, each of which is one side of the polygon. Internally,
a polygon comprises of a list of (x, y) coordinate pairs, where each pair
defines a vertex of the polygon, and two successive pairs are the endpoints
of a line that is a side of the polygon. The first and final pairs of (x,
y) points are joined by a line segment that closes the polygon."</td></tr></table><b>fillPolygon</b>(Polygon) - Fills the polygon defined by the specified
Polygon object with the graphics context's current color. Another overloaded
version is available that accepts a list of coordinate values to specify
the polygon.
<center><h4><a name="drawing text"></a><font color="#ff0000">Drawing Text</font></h4></center><b>drawString</b>(String, int, int) - Draws the text given by the specified
string, using this graphics context's current font and color.

<p><b>drawChars</b>(char[], int, int, int, int) - Draws the text given
by the specified character array, using this graphics context's current
font and color. Another version lets you pass an array of bytes to represent
the characters to be drawn.

<p><b>getFont</b>() - Gets the current font and returns an object of type
<b>Font </b>which describes the context's current font.

<p><b>getFontMetrics</b>() - Gets the font metrics of the current font.
Returns an object of type <b>FontMetrics</b>. Methods of the <b>FontMetrics</b>
class can be used to obtain metrics information (size, etc.) about the
font to which the <b>getFontMetrics()</b> method is applied.

<p><b>getFontMetrics</b>(Font) - Gets the font metrics for the specified
font.

<p><b>setFont</b>(Font) - Sets this graphics context's font to the specified
font.
<center><h4><a name="clipping"></a><font color="#ff0000">Clipping</font></h4></center>
Clipping is the process of defining a region of the <b>Graphics</b> context
inside of which the pixels may be modified in some subsequent rendering
process. Pixels outside the clip area are immune from modification.

<p><b>clipRect</b>(int, int, int, int) - Intersects the current clip with
the specified rectangle. This results in a clipping area that is the intersection
of the current clipping area and the specified rectangle. Future rendering
operations have no effect outside of the clipping area. This method can
only be used to reduce the size of the clipping area. It cannot be used
to increase the size of the clipping area.

<p><b>getClip</b>() - Gets the current clipping area and returns it as
an object of type <b>Shape</b>. Note that <b>Shape</b> is an interface.
The following information and <u>caution</u> regarding the <b>Shape</b>
interface was taken from the JavaSoft documentation for JDK 1.1.3:
<table border bgcolor="#80ffff" ><tr><td>Shape: The interface for objects which represent some form of geometric
shape.&nbsp;

<p>This interface will be revised in the upcoming Java2D project. It is
meant to provide a common interface for various existing geometric AWT
classes and methods which operate on them. Since it may be superseded or
expanded in the future, developers should avoid implementing this interface
in their own classes until it is completed in a later release.</td></tr></table><b>getClipBounds</b>() - Returns the bounding rectangle of the current
clipping area.

<p><b>setClip</b>(int, int, int, int) - Sets the current clip to the rectangle
specified by the given coordinates.
<center><h4><a name="drawing images"></a><font color="#ff0000">Drawing Images</font></h4></center>
There are about six different <b>drawImage()</b> methods, differing primarily
by the features of the method and the parameters passed in to support the
features of that particular method. The following method is one of the
more complex ones and is representative of the group. We will deal with
the features of the methods and the associated parameters in the lessons
on "Working with Images".

<p><b>drawImage</b>(Image, int, int, int, int, int, int, int, int, Color,
ImageObserver) - Draws as much of the specified area of the specified image
as is currently available, scaling it on the fly to fit inside the specified
area of the destination drawable surface.
<center><h2><a name="the color class"></a><font color="#ff0000">The Color Class</font></h2></center>
The <b>Color</b> class is reasonably simple to understand and use. It encapsulates
colors using the <b>RGB </b>format. This is a format in which a particular
color is created by adding contributions from the primary colors: red,
green, and blue.

<p>In <b>RGB </b>format, the red, green, and blue components of a color
are each represented by an integer in the range 0-255.

<p>The value 0 indicates no contribution from the associated primary color.
A value of 255 indicates the maximum intensity of the primary color component.

<p>There is another color model called the <b>HSB </b>model (hue, saturation,
and brightness). The <b>Color</b> class provides a set of convenience methods
for converting between <b>RGB </b>and <b>HSB </b>colors.
<center><h3><a name="variables"></a><font color="#ff0000">Variables</font></h3></center>
The <b>Color</b> class provides a set of <i>static final</i> variables
which make it convenient to specify any one of thirteen predefined colors.

<p>All that is required to use these variables for the specification of
a color is to reference the color by variable name as illustrated in the
following code fragment:
<table border bgcolor="#ffff80" ><tr><td><pre>object.setBackground(<b>Color.red</b>);</pre></td></tr></table>
The list of predefined color values in the class is:
<ul><li>
black</li>

<li>
blue</li>

<li>
cyan</li>

<li>
darkGray</li>

<li>
gray</li>

<li>
green</li>

<li>
lightGray</li>

<li>
magenta</li>

<li>
orange</li>

<li>
pink</li>

<li>
red</li>

<li>
white</li>

<li>
yellow</li></ul>

<center><h3><a name="constructors"></a><font color="#ff0000">Constructors</font></h3></center>
There are three constructors that you can use to instantiate a <b>Color</b>
object. Two allow you to specify the contributions of red, green, and blue
respectively as parameters. These two constructors instantiate a new <b>Color</b>
object of the proper color.

<p>One of these two constructors allows you to specify the contributions
of red, green, and blue with integer values ranging between 0 and 255 where
0 represents no contribution of a particular primary color and 255 represents
a maximum contribution of the primary color. The description of this constructor
is:
<table border bgcolor="#ffff80" ><tr><td><b>Color</b>(int, int, int) - Creates a color with the specified RGB
components.</td></tr></table>
The other constructor in this category allows you to specify the contributions
of the three primary colors using <b>float</b> values ranging between 0.0
and 1.0. The description of this constructor is:
<table border bgcolor="#ffff80" ><tr><td><b>Color</b>(float, float, float) - Creates a color with the specified
red, green, and blue values, where each of the values is in the range 0.0-1.0.</td></tr></table>
Finally, you can also construct your own <b>int</b> color value and pass
it as a parameter to one of the three overloaded constructors. In this
case, the format of the <b>int</b> must be as defined below:
<table border bgcolor="#ffff80" ><tr><td><b>Color</b>(int) - Creates a color with the specified <b>RGB </b>value,
where the red component is in bits 16-23 of the argument, the green component
is in bits 8-15 of the argument, and the blue component is in bits 0-7.</td></tr></table>

<center><h3><a name="methods of the color class"></a><font color="#ff0000">Methods
of the Color Class</font></h3></center>
As of JDK 1.1.3, the following methods are available for use with colors.
I have attempted to group these methods into meaningful categories. A complete
listing of the methods along with a description of each is contained in
the JavaSoft documentation for the AWT.
<center><h4><a name="utility methods for colors"></a><font color="#ff0000">Utility
Methods for Colors</font></h4></center><b>equals</b>(Object) - Determines whether another object is equal to this
color.

<p><b>hashCode</b>() - Computes the hash code for this color.

<p><b>toString</b>() - Creates a string that represents this color and
indicates the values of its RGB components.
<center><h4><a name="investigate a color object"></a><font color="#ff0000">Investigate
a Color Object</font></h4></center>
These methods return an integer that represents the composite RGB value
of a particular <b>Color</b> object.

<p><b>getRed</b>() - Gets the red component of this color as an integer
in the range 0 to 255.

<p><b>getGreen</b>() - Gets the green component of this color as an integer
in the range 0 to 255.

<p><b>getBlue</b>() - Gets the blue component of this color as an integer
in the range of 0 to 255.

<p><b>getRGB</b>() - Gets the RGB value representing the color. The red,
green, and blue components of the color are each scaled to be a value between
0 and 255. Bits 24-31 of the returned integer are 0xff, bits 16-23 are
the red value, bit 8-15 are the green value, and bits 0-7 are the blue
value.
<center><h4><a name="create a color object"></a><font color="#ff0000">Create a Color
Object</font></h4></center>
These methods return a <b>Color</b> object.

<p><b>brighter</b>() - Creates a brighter version of this color. This method
was used in an earlier lesson where I created a fake button and used this
method to provide highlighting on the edges.

<p><b>darker</b>() - Creates a darker version of this color. This method
was used in an earlier lesson where I created a fake button and used this
method to provide shadows on the edges.

<p><b>decode</b>(String) - Converts a string to an integer and returns
the specified color.
<center><h4><a name="for use with system properties"></a><font color="#ff0000">For
use with System Properties</font></h4></center>
These methods also return a <b>Color</b> object, but they are specialized
to work with the System Properties.

<p><b>getColor</b>(String) - Finds a color in the system properties. The
<b>String</b> object is used as the <i>key</i> value in the <i>key/value</i>
scheme used to describe properties in Java. The <i>value</i> is then used
to return a <b>Color</b> object.

<p><b>getColor</b>(String, Color) - Finds a color in the system properties.
Same as the previous method except that the second parameter is returned
if the first parameter doesn't result in a valid <b>Color</b> object.

<p><b>getColor</b>(String, int) - Finds a color in the system properties.
Similar to the previous method except that the second parameter is used
to instantiate and return a <b>Color</b> object.
<center><h4><a name="hsb methods"></a><font color="#ff0000">HSB Methods</font></h4></center>
These methods are used to convert between the <b>RGB </b>color model and
the <b>HSB </b>color model.

<p><b>getHSBColor</b>(float, float, float) - Creates a <b>Color</b> object
based on values supplied for the HSB color model.

<p><b>HSBtoRGB</b>(float, float, float) - Converts the components of a
color, as specified by the HSB model, to an equivalent set of values for
the RGB model.

<p><b>RGBtoHSB</b>(int, int, int, float[]) - Converts the components of
a color, as specified by the RGB model, to an equivalent set of values
for hue, saturation, and brightness, the three components of the HSB model.
<center><h2><a name="summary"></a><font color="#ff0000">Summary</font></h2></center>
This lesson has presented an overview of the <b>Graphics</b> class and
the <b>Color</b> class. Several subsequent lessons will be dedicated to
expanding on the material presented here.

<p>One lesson will be dedicated to working with some of the utility methods
in the <b>Graphics</b> class, and specific lessons will be dedicated to
working with shapes, text, clipping, and images.

<p>In addition, the utility methods of the <b>Graphics</b> class and the
methods and variables of the <b>Color</b> class will be used throughout
those lessons.

<p>-end-<!--end--></body></html>