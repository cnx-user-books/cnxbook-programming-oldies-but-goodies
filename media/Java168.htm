<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MSOFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->The AWT Package, Graphics- Working with Fonts<!--endtitle--></H2>
<P>Java Programming, Lecture Notes # 168, Revised 03/02/99. </P>

<UL>
<LI><A HREF="#preface">Preface</A> </LI>
<LI><A HREF="#introduction">Introduction</A> </LI>
<LI><A HREF="#the_toolkit_class">The Toolkit Class</A> </LI>
<LI><A HREF="#the_font_class">The Font Class</A> </LI>
<LI><A HREF="#the_fontmetrics_class">The FontMetrics Class</A> </LI>
<LI><A HREF="#sample_program">Sample Program</A></LI></UL>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B>Advanced Java Programming</B> classes at ACC are responsible for knowing and understanding all of the material in this lesson. </P>
<P>3/2/99 Note: The sample program in this lesson named Graphics08.java does not compile and run properly under JDK 1.2.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="introduction"></A>Introduction</H2>
</FONT><P>An earlier lesson provided an overview of the <B>Graphics</B> class, and grouped the methods of that class into several different categories. This lesson will explore some of the methods in the category of <B>Drawing Text</B>. </P>
<P>To review, the following methods were put into this category in the earlier lesson. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">

<UL>
<LI><B>drawString</B>(String, int, int) - Draws the text given by the specified string, using this graphics context's current font and color.&nbsp; </LI>
<B><LI>drawChars</B>(char[], int, int, int, int) - Draws the text given by the specified character array, using this graphics context's current font and color. Another version lets you pass an array of bytes to represent the characters to be drawn.&nbsp; </LI>
<B><LI>getFont</B>() - Gets the current font and returns an object of type <B>Font </B>which describes the context's current font.&nbsp; </LI>
<B><LI>getFontMetrics</B>() - Gets the font metrics of the current font. Returns an object of type <B>FontMetrics</B>. Methods of the <B>FontMetrics</B> class can be used to obtain metrics information (size, etc.) about the font to which the <B>getFontMetrics()</B> method is applied.&nbsp; </LI>
<B><LI>getFontMetrics</B>(Font) - Gets the font metrics for the specified font.&nbsp; </LI>
<B><LI>setFont</B>(Font) - Sets this graphics context's font to the specified font.&nbsp;</UL>
</TD>
</TR>
</TABLE>

<P>As is often the case when programming in Java, what you see in the above list represents only the controls in the cockpit. The real power lies "under the hood." </P>
<P>To understand what is "under the hood", you must examine the classes for the objects required as parameters by the above methods and the classes for the objects returned by the above methods. </P>
<P>A quick examination of the list indicates that you need to understand the following classes, as a minimum, in order to understand how to draw text on the screen. This list includes an additional item (<B>Toolkit)</B> that isn't obvious from examining the above list. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">

<UL>
<LI>String&nbsp; </LI>
<LI>Font&nbsp; </LI>
<LI>FontMetrics&nbsp; </LI>
<LI>Toolkit&nbsp;</UL>
</TD>
</TR>
</TABLE>

<P>Hopefully, you already know about the <B>Sting</B> class. The following sections will provide a non-exhaustive discussion of the <B>Font, FontMetrics</B>, and <B>Toolkit </B>classes. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="the_toolkit_class"></A>The Toolkit Class</H3>
</FONT><P>We will begin with the toolkit class because it is needed to obtain some fundamental information about the available fonts. </P>
<P>The following description of the <B>Toolkit</B> class was extracted from the JavaSoft documentation for JDK 1.1.3. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>This class is the abstract superclass of all actual implementations of the Abstract Window Toolkit. Subclasses of Toolkit are used to bind the various components to particular native toolkit implementations.&nbsp; </P>
<P>Most applications should not call any of the methods in this class directly. The methods defined by Toolkit are the "glue" that joins the platform-independent classes in the java.awt package with their counterparts in java.awt.peer. Some methods defined by Toolkit query the native operating system directly.</TD>
</TR>
</TABLE>

<P>A complete discussion of the <B>Toolkit</B> class is beyond the scope of this lesson. However, there is one method of this class that is necessary for the effective use of fonts in Java. A description of that method follows: <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P><B>public static synchronized Toolkit getDefaultToolkit()</B>&nbsp; </P>
<P>Gets the default toolkit.&nbsp; </P>
<P>If there is a system property named "awt.toolkit", that property is treated as the name of a class that is a subclass of <B>Toolkit</B>.&nbsp; </P>
<P>If the system property does not exist, then the default toolkit used is the class named "sun.awt.motif.MToolkit", which is a motif implementation of the Abstract Window Toolkit.&nbsp; </P>
<P>Returns: the default toolkit.&nbsp; </P>
<P>Throws: AWTError if a toolkit could not be found, or if one could not be accessed or instantiated.</TD>
</TR>
</TABLE>

<P>To bring this rather abstract discussion to a close, we will be executing the following statement in our sample program to obtain the list of fonts available on the platform that we are using. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>String[] fonts = Toolkit.getDefaultToolkit().<B>getFontList</B>();</PRE></TD>
</TR>
</TABLE>

<P>As of 11/26/97, the list of fonts on my system running JDK 1.1.3 under Win95, as reported by the <B>getFontList()</B> method was: <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<PRE>Dialog
SansSerif
Serif
Monospaced
Helvetica
TimesRoman
Courier
DialogInput
ZapfDingbats</PRE></TD>
</TR>
</TABLE>

<P>I won't provide any further discussion about the availability of the different fonts. However, John Zukowski's book entitled <U>Java AWT Reference</U> contains an excellent discussion of how fonts are included on a particular system, where the names come from, and how it is possible to create an alias for a font name in the System Properties. </P>
<P>There are some important concepts described in John's book, including how to write Java programs in which the user has the ability to tailor the application by specifying fonts and making them persist from one invocation of the application to the next. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="the_font_class"></A>The Font Class</H3>
</FONT><P>The <B>Font</B> class provides the following symbolic constants that are used to establish the <I>style</I> of an instantiated <B>Font</B> object. <BR>
&nbsp; </P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 WIDTH=139>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">

<UL>
<LI>PLAIN&nbsp; </LI>
<LI>BOLD&nbsp; </LI>
<LI>ITALIC&nbsp;</UL>
</TD>
</TR>
</TABLE>
</CENTER></P>

<P ALIGN="CENTER">The names of these constants should make it obvious what they are used for. They can be mixed where appropriate using the bitwise <B>or</B> operator in their specification. Note that <I>underline</I> is not available as one of the <I>style</I> constants. If you want your text to be underlined, you will have to take care of that yourself, probably using the <B>drawLine()</B> method of the <B>Graphics</B> class. </P>
<P>The <B>Font</B> class provides a single constructor as shown below. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P><B>Font(String, int, int)</B> - Creates a new font object with the specified name, style and point size where the name is provided by the <B>String</B> parameter, and the style and point size are provided by the two <B>int</B> parameters.</TD>
</TR>
</TABLE>

<P>The <B>Font</B> class contains many methods. The following list of methods was extracted from the JDK 1.1.3 documentation. We will use some of these methods in the sample program that we will present later. The purpose of most of these methods should be obvious from the name of the method. You may need to refer to the JavaSoft documentation for those that aren't obvious. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<DL>
<DT><B>decode</B>(String) - Gets the specified font using the name passed in.&nbsp;</DT>
<B><DT>equals</B>(Object) - Compares this object to the specified object.&nbsp;</DT>
<B><DT>getFamily</B>() - Gets the platform specific family name of the font.&nbsp;</DT>
<B><DT>getFont</B>(String) - Gets a font from the system properties list.&nbsp;</DT>
<B><DT>getFont</B>(String, Font) - Gets the specified font from the system properties list.&nbsp;</DT>
<B><DT>getName</B>() - Gets the logical name of the font.&nbsp;</DT>
<B><DT>getPeer</B>() - Gets the peer of the font.&nbsp;</DT>
<B><DT>getSize</B>() - Gets the point size of the font.&nbsp;</DT>
<B><DT>getStyle</B>() - Gets the style of the font.&nbsp;</DT>
<B><DT>hashCode</B>() - Returns a hashcode for this font.&nbsp;</DT>
<B><DT>isBold</B>() - Indicates whether the font's style is bold.&nbsp;</DT>
<B><DT>isItalic</B>() - Indicates whether the font's style is italic.&nbsp;</DT>
<B><DT>isPlain</B>() - Indicates whether the font's style is plain.&nbsp;</DT>
<B><DT>toString</B>() Converts this object to a String representation.&nbsp;</DT>
</DL></TD>
</TR>
</TABLE>

<P>. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="the_fontmetrics_class"></A>The FontMetrics Class</H3>
</FONT><P>A <B>FontMetrics</B> object provides information about the rendering of a particular font on a particular platform. </P>
<P>There is a lot involved in the design of a font and the placement of that font on the screen. A lot of information about a particular font can be obtained from a <B>FontMetrics</B> object instantiated for that particular font. This includes information about the <I>baseline, ascent, descent, advance width, </I>and<I> leading</I> which are all attributes of a particular font. </P>
<P>It is also possible to obtain information about the total size requirements of a string object when rendered in a given font. </P>
<P>Quite a lot of information about fonts in general, and information about these methods is provided in the JDK documentation for the <B>FontMetrics</B> class. You are referred to that documentation for a full understanding of what makes up a font, and what information does the <B>FontMetrics</B> class provide about a font. </P>
<P>In this lesson, we will confine our interest to the total size requirements (height and width) of a string rendered in a particular font, and leave the other attributes that describe a particular font for those persons interested in such matters. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="sample_program"></A>Sample Program</H2>
</FONT><P>The following program illustrates the drawing of text using methods primarily of the <B>Graphics</B>, <B>Font</B>, and <B>FontMetrics </B>classes. The <B>Toolkit</B> class is also used to obtain a list of fonts available on the machine at the time the program was run. </P>
<P>A variety of methods are illustrated along with a variety of font types, styles, sizes, and colors. </P>
<P>As mentioned earlier, the list of available fonts reported by the <B>getFontList()</B> method was as shown below. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">

<UL>
<LI>Dialog&nbsp; </LI>
<LI>SansSerif&nbsp; </LI>
<LI>Serif&nbsp; </LI>
<LI>Monospaced&nbsp; </LI>
<LI>Helvetica&nbsp; </LI>
<LI>TimesRoman&nbsp; </LI>
<LI>Courier&nbsp; </LI>
<LI>DialogInput&nbsp; </LI>
<LI>ZapfDingbats&nbsp;</UL>
</TD>
</TR>
</TABLE>

<P>An array of strings was created containing the names of each of these fonts, and subsequent code caused the name of each font to be displayed in the font identified by the name. </P>
<P>The size of each line of output (containing the name of a font) was increased as each successive font was displayed and the vertical spacing was made appropriate for each font. The horizontal size of each string was determined and used to center each string in the output. </P>
<P>According to John Zukowski in <U>Java AWT Reference</U>: <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>"The <B>ZapfDingbats </B>font name has been dropped completely because the characters in this font have official Unicode mappings in the range \u2700 to \u27ff."</TD>
</TR>
</TABLE>

<P>As shown above, the <B>ZapfDingbats</B> font name still appears on my Win95 system as of JDK 1.1.3. However, an attempt to draw text using the <B>ZapfDingbats </B>font resulted in a series of identical rectangular boxes being drawn, one for each character in the text. Therefore, no attempt was made to demonstrate or draw text using the font associated with this name in this program. </P>
<P>This program was tested using JDK 1.1.3 under Win95. </P>
<P>If you will compile and run this program, and observe the output while walking through the source code (keeping your JDK documentation close at hand as you go), you should have no difficulty understanding how to use the text-drawing methods of the <B>Graphics</B> class, as well as a number of methods in the <B>Font</B> and <B>FontMetrics</B> classes. The extensive comments provided in the text should help you to develop this understanding. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Graphics08.java
Copyright 1997, R.G.Baldwin

This program illustrates the drawing of text using methods
primarily of the Graphics, Font, and FontMetrics classes.&nbsp;&nbsp;

This program was tested using JDK 1.1.3 under Win95.

**********************************************************/
import java.awt.*;
import java.awt.event.*;

class <B>Graphics08 extends Frame</B>{ //controlling class
&nbsp; //Override the paint method
&nbsp; public void <B>paint</B>(Graphics g){
<B>&nbsp;&nbsp;&nbsp; g.setColor(Color.red);</B>//set the drawing color to red
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Translate the 0,0 coordinate of the graphics context
&nbsp;&nbsp;&nbsp; // to the upper left-hand corner of the client area of
&nbsp;&nbsp;&nbsp; // the Frame object.
&nbsp;&nbsp;&nbsp; g.<B>translate</B>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.getInsets().left,this.getInsets().top);

&nbsp;&nbsp;&nbsp; //Get list of fonts on the system
&nbsp;&nbsp;&nbsp; String[] fonts =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>Toolkit.getDefaultToolkit().getFontList()</B>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set the font to the fifth one in the list.&nbsp; Set the
&nbsp;&nbsp;&nbsp; // style to BOLD.&nbsp; Set the size to 20-point.
&nbsp;<B>&nbsp;&nbsp; g.setFont(new Font(fonts[4],Font.BOLD,20));
</B>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Get the height attribute for the selected font
&nbsp;&nbsp;&nbsp; int height = <B>g.getFontMetrics().getHeight();
</B>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set the initial y coordinate using the height&nbsp;
&nbsp;&nbsp;&nbsp; // attribute.
&nbsp;&nbsp;&nbsp; int y = height;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Display a title using the selected font at the&nbsp;
&nbsp;&nbsp;&nbsp; // specified y-coordinate in red.&nbsp; Center the title&nbsp;
&nbsp;&nbsp;&nbsp; // around an x-ccordinate value of 200 pixels.
&nbsp;&nbsp;&nbsp; String msg = "The list of available fonts follows:";
&nbsp;&nbsp;&nbsp; <B>g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; msg,200 - (g.getFontMetrics().stringWidth(msg))/2,y);

</B>&nbsp;&nbsp;&nbsp; //Set drawing color to green
&nbsp;&nbsp;&nbsp; g.setColor(Color.green);

&nbsp;&nbsp;&nbsp; //Display the list of available fonts in green except&nbsp;
&nbsp;&nbsp;&nbsp; // don't try to display ZapfDingbats because it is&nbsp;
&nbsp;&nbsp;&nbsp; // used to represent characters beyond the first 256.
&nbsp;&nbsp;&nbsp; // Display the name of each font in the font that
&nbsp;&nbsp;&nbsp; // matches the name.&nbsp; Center around a value of 200
&nbsp;&nbsp;&nbsp; // pixels.&nbsp; Increase the size of the font for each
&nbsp;&nbsp;&nbsp; // line of output by adding the loop count to a base
&nbsp;&nbsp;&nbsp; // size of 17 points.&nbsp; Adjust the vertical spacing
&nbsp;&nbsp;&nbsp; // between lines of output appropriately as the size
&nbsp;&nbsp;&nbsp; // of the font increases. Set the style to BOLD ITALIC.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; fonts.length-1; cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.<B>setFont</B>(new Font(fonts[cnt],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Font.BOLD | Font.ITALIC,17+cnt));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; height = g.<B>getFontMetrics</B>().getHeight();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>g.drawString(fonts[cnt],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 200-(g.getFontMetrics().stringWidth(fonts[cnt]))/2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y+=height);
</B>&nbsp;&nbsp;&nbsp; }//end for loop

&nbsp;&nbsp;&nbsp; //Set drawing color to blue
&nbsp;&nbsp;&nbsp; g.setColor(Color.blue);

&nbsp;&nbsp;&nbsp; //Set the font to the first one in the list of fonts.
&nbsp;&nbsp;&nbsp; // Set the style to PLAIN.&nbsp; Make it 17-point size.
&nbsp;&nbsp;&nbsp; g.<B>setFont</B>(new Font(fonts[0],Font.PLAIN,17));
&nbsp;&nbsp;&nbsp; height = <B>g.getFontMetrics().getHeight();</B>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Display another title
&nbsp;&nbsp;&nbsp; y += height;
&nbsp;&nbsp;&nbsp; g.<B>drawString</B>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "INFORMATION ABOUT THE SELECTED FONT FOLLOWS: ",5,y);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Display information about the current font&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; y += height;
&nbsp;&nbsp;&nbsp; <B>g.drawString("" + g.getFont(),5,y);
</B>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Display another title
&nbsp;&nbsp;&nbsp; y += 2*height;
&nbsp;&nbsp;&nbsp; g.<B>drawString</B>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "PART OF THE AUTHOR'S NAME FOLLOWS: ",5,y);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a character array and display part of it&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; char myData[] =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {'D','i','c','k',' ','B','a','l','d','w','i','n',};
&nbsp;&nbsp;&nbsp; y += height;
&nbsp;&nbsp;&nbsp; //Display the data in the array, skipping the first&nbsp;
&nbsp;&nbsp;&nbsp; // and last characters in the array
&nbsp;&nbsp;&nbsp; <B>g.drawChars(myData,1,10,5,y);
</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end paint()

&nbsp; public Graphics08(){//constructor
&nbsp;&nbsp;&nbsp; this.setTitle(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Shape Samples,Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setSize(500,400);
&nbsp;&nbsp;&nbsp; this.setVisible(true);

&nbsp;&nbsp;&nbsp; //Anonymous inner-class listener to terminate program
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Graphics08();//instantiate this object
&nbsp; }//end main
}//end Graphics08 class
//=======================================================//</PRE></TD>
</TR>
</TABLE>

<P>-end-<!--end--></P></BODY>
</HTML>
