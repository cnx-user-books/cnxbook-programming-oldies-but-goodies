<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 16,
The toArray Method, Part 2</h2>
<p>
<i><font color="#000000">Baldwin shows you how to use the more-complex
version of the toArray method declared in the Collection interface.&nbsp;
He discusses issues regarding the type of the array and the types of the
objects referred to by the elements in the collection.&nbsp; He also discusses
issues regarding the relative sizes of the array and the collection.&nbsp;
Finally, he reaffirms that you need to exercise caution when using the
elements stored in the array, to avoid corrupting the state of the objects
referred to by the elements in the collection.</font></i></p>
&nbsp;<b>Published:</b>&nbsp; September 24, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1380
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">A miniseries</font></b>
<p>This lesson is part of a miniseries on Java data structures and the
Java<i> Collections Framework.</i>&nbsp; The first lesson in the miniseries
was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1378.htm">Data Structures in Java: Part 15, The
toArray Method, Part 1</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p><b><font color="#FF0000">A sub-series</font></b>
<p>This is also the second <i>(and last)</i> lesson in a sub-series on
the <b>toArray</b> method.&nbsp; The primary purpose of the lessons in
this sub-series is to teach you how to use the overloaded versions of the
<b>toArray</b>
method, which are declared in the <b>Collection</b> interface.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">The <b>Collection</b> interface declares the following
two overloaded versions of the <b>toArray</b> method:</font>
<p><b><tt><font color="#000000">public Object[] toArray()</font></tt></b>
<br><b><tt><font color="#000000">public Object[] toArray(Object[] a)</font></tt></b>
<p><font color="#000000">In the previous lesson, I taught you how to use
the first <i>(simpler)</i> of the two methods.&nbsp; I also discussed the
need to exercise care when using the elements stored in the returned array
to avoid corrupting the state of the objects referred to by elements in
the collection.</font>
<p><font color="#000000">In this lesson, I will teach you how to use the
second <i>(more-complex)</i> version of the <b>toArray</b> method declared
in the <b>Collection</b> interface.&nbsp; I will discuss issues regarding
the type of the array and the types of the objects referred to by the elements
in the collection.&nbsp; I will also discuss issues regarding the relative
sizes of the array and the collection.</font>
<p><font color="#000000">Finally, I will reaffirm that you need to exercise
care when using the elements stored in the array, to avoid corrupting the
state of the objects referred to by the elements in the collection.</font>
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Program</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>As has been the case in the last few lessons, let's begin with a little
quiz to test your prior knowledge of the Collections Framework.&nbsp; To
take this quiz, examine the program shown in Listing 1 and write down the
output produced by that program.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File ToArray02.java
//Copyright 2001, R.G.Baldwin
import java.util.*;
import javax.swing.*;

public class ToArray02{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class ToArray02
//===================================//

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create, populate, and display
&nbsp;&nbsp;&nbsp; // the contents of an array
&nbsp;&nbsp;&nbsp; JComponent[] array =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JComponent[8];
&nbsp;&nbsp;&nbsp; for(int cnt=0;cnt&lt;8;cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array[cnt] = new JButton();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array[cnt].setToolTipText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "" + (cnt+10));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp;&nbsp;&nbsp; showArray(array,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Original array contents");


&nbsp;&nbsp;&nbsp; //Create, populate, and display the
&nbsp;&nbsp;&nbsp; // contents of a collection
&nbsp;&nbsp;&nbsp; ref = new LinkedList();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; showCollection(ref,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection contents");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Get collection contents into the
&nbsp;&nbsp;&nbsp; // array and display the new
&nbsp;&nbsp;&nbsp; // contents of the array.
&nbsp;&nbsp;&nbsp; array = (JComponent[])ref.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toArray(array);
&nbsp;&nbsp;&nbsp; showArray(array,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "New array contents");

&nbsp;&nbsp;&nbsp; //Modify a property of an object
&nbsp;&nbsp;&nbsp; // referred to by one of the
&nbsp;&nbsp;&nbsp; // elements in the array. Display
&nbsp;&nbsp;&nbsp; // array contents after&nbsp;
&nbsp;&nbsp;&nbsp; // modification
&nbsp;&nbsp;&nbsp; ((JComponent)array[0]).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setToolTipText("XX");
&nbsp;&nbsp;&nbsp; showArray(array,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Modified array contents");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Display the contents of the
&nbsp;&nbsp;&nbsp; // collection
&nbsp;&nbsp;&nbsp; showCollection(ref,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection contents");
&nbsp; }//end doIt()
//-----------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //Utility method for displaying
&nbsp; // array contents
&nbsp; void showArray(Object[] array,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String title){
&nbsp;&nbsp;&nbsp; System.out.println(title);
&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt; array.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(array[i] == null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print("null ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JComponent)array[i]).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getToolTipText() + " ");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end showArray()
//-----------------------------------//

&nbsp; //Utility method for displaying
&nbsp; // collection contents
&nbsp; void showCollection(Collection ref,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String title){
&nbsp;&nbsp;&nbsp; System.out.println(title);
&nbsp;&nbsp;&nbsp; Iterator iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((JComponent)iter.next()).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getToolTipText() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end showCollection
}// end class Worker
//===================================//

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JLabel());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JLabel());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Iterator iter = ref.iterator();
&nbsp;&nbsp;&nbsp; int cnt = 0;
&nbsp;&nbsp;&nbsp; JComponent refVar;
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar = (JComponent)iter.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(refVar instanceof JButton){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar.setToolTipText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "B"+cnt++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar.setToolTipText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "L" + cnt++);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end fillIt()
}//end class Populator

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">And the answer is ...</font></b>
<p>The correct answer to the quiz is the program output shown below:
<p><b><tt>Original array contents</tt></b>
<br><b><tt>10 11 12 13 14 15 16 17</tt></b>
<br><b><tt>Collection contents</tt></b>
<br><b><tt>B0 B1 L2 B3 B4 L5</tt></b>
<br><b><tt>New array contents</tt></b>
<br><b><tt>B0 B1 L2 B3 B4 L5 null 17</tt></b>
<br><b><tt>Modified array contents</tt></b>
<br><b><tt>XX B1 L2 B3 B4 L5 null 17</tt></b>
<br><b><tt>Collection contents</tt></b>
<br><b><tt>XX B1 L2 B3 B4 L5</tt></b>
<p>If that was your answer, you probably already understand most of the
material covered in this lesson.&nbsp; In that case, you might consider
skipping this lesson and moving on to the next lesson.&nbsp; If that wasn't
your answer, you should probably continue with your study of this lesson.
<p><b><font color="#FF0000">Similar to previous program</font></b>
<p>Except for the use of a different version of the <b>toArray</b> method,
the overall structure of the program in Listing 1 is similar to the program
in the previous lesson.&nbsp; Therefore, I will concentrate on those aspects
of this program that differentiate it from the program in the previous
lesson.
<p><b><font color="#FF0000">A populated array</font></b>
<p>Unlike the program in the previous lesson, the code in Listing 2 creates
and populates an eight-element array of type <b>JComponent</b>.&nbsp; This
is the array that will be re-populated by the <b>toArray</b> method later
in the program.&nbsp; The array is populated with a set of initial element
values at this point to make it obvious when it is re-populated <i>(overwritten
elements)</i> by the <b>toArray</b> method later.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; JComponent[] <b>array</b> =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>new JComponent[8]</b>;

&nbsp;&nbsp;&nbsp; for(int cnt=0;cnt&lt;8;cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array[cnt] = new JButton();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array[cnt].setToolTipText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "" + (cnt+10));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp;&nbsp;&nbsp; <b>showArray</b>(array,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Original array contents");

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p>The <b>JButton</b> class, the <b>JLabel</b> class, and the <b>setToolTipText</b>
method were discussed in detail in the previous lesson, so I won't repeat
that discussion here.
<p><b><font color="#FF0000">Display the array contents</font></b>
<p>After the array is populated by the code in Listing 2, a reference to
the array object is passed to the <b>showArray</b> method <i>(also in Listing
2)</i> to display the contents of the array.
<p>With the exception of some minor changes implemented in this program
to make the use of the <b>showArray</b> method more compact, this is the
same <b>showArray</b> method used in the previous lesson.&nbsp; Therefore,
I won't discuss that method further in this lesson.&nbsp; The output produced
by the code in Listing 2 is as follows:
<p><b><tt>Original array contents</tt></b>
<br><b><tt>10 11 12 13 14 15 16 17</tt></b>
<p>As you can see, each of the eight elements in the array was initialized
with an easily-recognizable and unique value, (<i>which may be overwritten
by the toArray method later).</i>
<p><b><font color="#FF0000">A new LinkedList collection</font></b>
<p>The code in Listing 3 creates and populates a new <b>LinkedList</b>
collection.&nbsp; The collection is populated by passing the <b>LinkedList</b>
object's reference to a method named <b>fillIt</b>.
<p>The code in Listing 2 also displays the contents of the <b>LinkedList</b>
collection after it has been populated.&nbsp; The list is displayed by
passing the
<b>LinkedList</b> object's reference to a method named <b>showCollection</b>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; ref = new <b>LinkedList</b>();
&nbsp;&nbsp;&nbsp; Populator.<b>fillIt</b>(ref);
&nbsp;&nbsp;&nbsp; <b>showCollection</b>(ref,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection contents");

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p>Except for a couple of minor changes to the <b>showCollection</b> method,
the code to create, populate, and display the collection is the same as
the code in the previous lesson.
<p><b><font color="#FF0000">Populating the LinkedList collection</font></b>
<p>A couple of points regarding the <b>fillIt</b> method <i>(shown in Listing
4)</i> are worthy of note.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; <b>ref.add(new JButton())</b>;
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; <b>ref.add(new JLabel())</b>;
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JButton());
&nbsp;&nbsp;&nbsp; ref.add(new JLabel());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Iterator iter = ref.iterator();
&nbsp;&nbsp;&nbsp; int cnt = 0;
&nbsp;&nbsp;&nbsp; JComponent refVar;
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar = (JComponent)iter.next();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(refVar instanceof JButton){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar.<b>setToolTipText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "B"+cnt++</b>);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refVar.<b>setToolTipText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "L" + cnt++)</b>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end fillIt()

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p>The <b>fillIt</b> method begins by invoking the
<b>add</b> method six
times in succession, passing references to new anonymous objects <i>(of
types JButton and JLabel)</i> as a parameter to the <b>add</b> method.
<p><b><font color="#FF0000">Four buttons and two labels</font></b>
<p>Four of the objects are instantiated from the class named <b>JButton</b>.&nbsp;
The other two objects are instantiated from the class named <b>JLabel</b>.
<p>Both <b>JButton</b> and <b>JLabel</b> belong to the <b>javax.swing</b>
package.&nbsp; Further, both are subclasses of the class named <b>JComponent</b>.
<p><b><font color="#FF0000">The toolTipText property</font></b>
<p>Finally, both classes have a property named <b>toolTipText</b>, which
can be set and accessed by invoking the following methods on a reference
to the object:
<p><b><tt>void setToolTipText(String text)</tt></b>
<br><b><tt>String getToolTipText()</tt></b>
<p><b><font color="#FF0000">JButton and JLabel</font></b>
<p>I chose to use objects of these two classes for illustration purposes
simply because they possess the characteristics that I need for this lesson.&nbsp;
Those characteristics are:
<ul>
<li>
Both classes subclass the class named JComponent <i>(a common superclass
below the Object class).</i></li>

<li>
Both classes inherit a property <i>(toolTipText)</i> that can be used to
identify them later.</li>
</ul>
<b><font color="#FF0000">Making the objects distinguishable</font></b>
<p>After adding the objects' references to the collection, the code in
Listing 4 uses the
<b>setToolTipText</b> method to store a unique <b>String
</b>value
in the
<b>toolTipText</b> property of the object referred to by each of
the elements in the collection.
<p><b><font color="#FF0000">Identifying the buttons and labels</font></b>
<p>In addition to storing a unique value in the <b>toolTipText</b> property
of the object referred to by each element, the code in Listing 4 also makes
it possible to distinguish between the <b>JButton</b> objects and the <b>JLabel</b>
objects.&nbsp; This is accomplished by including an upper-case "B" in the
property value for each <b>JButton</b>, and including an upper-case "L"
in the property value for each <b>JLabel</b> button.
<p><b><font color="#FF0000">Display the collection</font></b>
<p>The code in Listing 3 above invokes the <b>showCollection</b> method
to display the contents of the populated <b>LinkedList</b> collection.&nbsp;
The output produced by the code in Listing 3 is shown below:
<p><b><tt>Collection contents</tt></b>
<br><b><tt>B0 B1 L2 B3 B4 L5</tt></b>
<p>Each term in the output is the <b>String</b> value of the <b>toolTipText</b>
property for a particular object.&nbsp; Hence, there are six terms in the
output, one for each element in the collection.
<p><b><font color="#FF0000">Copy collection elements into an array</font></b>
<p>We have now reached the point that is the main thrust of this lesson.
<p>The code in Listing 5 shows how to use the more-complex version of the
<b>toArray</b>
method to copy the elements in the collection into an array.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; array = (JComponent[])ref.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>toArray</b>(array);
&nbsp;&nbsp;&nbsp; showArray(array,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "New array contents");

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p>The code in Listing 5 also causes the contents of the array to be displayed
after it receives the elements from the collection.
<p>The first statement in Listing 5 causes the first seven elements in
the array to be overwritten with element values from the collection <i>(plus
one null value).</i>
<p>The second statement in Listing 5 causes the contents of the array to
be displayed.
<p><b><font color="#FF0000">The toArray method</font></b>
<p>The most important thing to note about Listing 5 is that a reference
to an array object is passed as a parameter to the <b>toArray</b> method.
<i>(The simpler version of the toArray method, discussed in the previous
lesson, doesn't take any parameters.)</i>
<p><b><font color="#FF0000">The essential difference</font></b>
<p>The essential difference between the two overloaded versions of the
<b>toArray</b>
method has to do with the origin of the array into which the <b>toArray</b>
method copies the elements from the collection.
<p>With the simpler version of the <b>toArray</b> method that takes no
parameters, the <b>toArray</b> method creates a new array object of type
<b>Object</b>,
populates it, and returns that object's reference as type
<b>Object</b>.
<p><b><font color="#FF0000">Type is not an issue for the simpler version</font></b>
<p>Since the new array object is of type <b>Object</b>, there are no issues
regarding type compatibility between the type of the array and the types
of the elements stored in the collection.&nbsp; A reference to an object
of any type can be stored in an array of the generic type <b>Object[]</b>.
<p><b><font color="#FF0000">Size is not an issue for the simpler version</font></b>
<p>Also, since the array is created when it is needed by the simpler version
of the <b>toArray</b> method, there are also no size issues.&nbsp; The
array is created to be of exactly the correct size to contain copies of
all of the elements in the collection.
<p><b><font color="#FF0000">More-complex version presents some issues</font></b>
<p>With the more-complex version of the <b>toArray</b> method<i> (shown
in Listing 5)</i>, the programmer must provide the array object that will
be populated by the <b>toArray</b> method.&nbsp; In this situation, there
are size issues as well as type issues to be dealt with.
<p><b><font color="#FF0000">The type issue</font></b>
<p>Here is some of what the Sun documentation for the <b>LinkedList</b>
class has to say about the type issue for this version of the <b>toArray</b>
method:
<blockquote><i>"Returns an array containing all of the elements in this
list in the correct order. The runtime type of the returned array is that
of the specified array. ...&nbsp; Throws:&nbsp; ArrayStoreException - if
the runtime type of (the specified array) is not a supertype of the runtime
type of every element in this list.</i></blockquote>
In other words, the type of the array passed as a parameter to the <b>toArray</b>
method must be a superclass of the classes from which all of the objects
being managed by the collection were instantiated.
<p><b><font color="#FF0000">Two types of objects in this collection</font></b>
<p>In this program, the collection is managing objects of the types <b>JButton</b>
and <b>JLabel</b>.&nbsp; Each of these types is a subclass of the class
named <b>JComponent</b>.&nbsp; For that reason, the type of array that
I instantiated and passed to the <b>toArray</b> method is <b>JComponent[]</b>.
<p><b><font color="#FF0000">The size issue</font></b>
<p>Here is some of what the Sun documentation for the <b>LinkedList</b>
class has to say about the size issue for this version of the <b>toArray</b>
method.
<blockquote><i>"If the list fits in the specified array, it is returned
therein. Otherwise, a new array is allocated with the runtime type of the
specified array and the size of this list.</i>
<p><i>If the list fits in the specified array with room to spare (i.e.,
the array has more elements than the list), the element in the array immediately
following the end of the collection is set to null. This is useful in determining
the length of the list only if the caller knows that the list does not
contain any null elements."</i></blockquote>
<b><font color="#FF0000">So, what did I do?</font></b>
<p>Knowing all of this in advance, I purposely caused the size of the <b>JComponent</b>
array to be larger <i>(by two elements)</i> than the number of elements
in the collection.&nbsp; Therefore, the array that I passed to the <b>toArray</b>
method was populated and a reference to that populated array was returned.
<p><i>(Had my array been smaller than the number of elements in the collection,
the toArray method would have created and populated a new array of type
JComponent and would have returned a reference to that new array object.&nbsp;
In that case, my array would have been used by the toArray method only
for the purpose of determining the runtime type of my array.)"</i>
<p><b><font color="#FF0000">More information from Sun</font></b>
<p>Here is some additional information about the <b>toArray</b> method
provided by the Sun documentation for the <b>Collection</b> interface:
<blockquote><i>"If this collection makes any guarantees as to what order
its elements are returned by its iterator, this method must return the
elements in the same order."</i></blockquote>
Because the iterator for a <b>LinkedList</b> object returns the elements
in increasing index order, the <b>toArray</b> method, in this case, copies
the element at each index position in the collection into the element at
the same index position in the array.&nbsp; Thus, reference values are
copied from each element in the collection into the first six elements
in the array.
<p><b><font color="#FF0000">The output</font></b>
<p>The output produced by the code in Listing 5 is shown below:
<p><b><tt>New array contents</tt></b>
<br><b><tt>B0 B1 L2 B3 B4 L5 null 17</tt></b>
<p>You will note that the first six elements in the array match the six
elements in the collection <i>(the initial values placed in the array earlier
when the array was instantiated have been overwritten).</i>
<p>You will also note that the value of the seventh element in the array
<i>(index
value 6)</i> has been overwritten with a null reference.
<p><b><font color="#FF0000">Demonstrates same array was used</font></b>
<p>Note finally that the last element in the array was not overwritten.&nbsp;
It still contains the value placed there when the array object was instantiated.&nbsp;
This demonstrates that the array that I passed to the <b>toArray</b> method
was populated with the collection data, and a reference to that array was
returned by the <b>toArray</b> method.
<p><b><font color="#FF0000">What if the array was too small?</font></b>
<p>Had my array been too small, it would have been discarded by the <b>toArray</b>
method.&nbsp; The <b>toArray</b> method would have created and populated
a new array object of the correct size and runtime type, and would have
returned a reference to that new array.
<p><b><font color="#FF0000">Not difficult to demonstrate</font></b>
<p>Although this is not demonstrated by this program, it is easy to modify
the program to demonstrate this feature.
<p>A <b>String</b> representation of the array object can be displayed
using a <b>System.out.println(array) </b>statement before and after the
array is passed to the <b>toArray</b> method.
<p><b><font color="#FF0000">Array as large as or larger than collection</font></b>
<p>For the cases where my array contained six, seven, or eight elements,
and the collection contained six elements, the <b>String</b> representations
of the array object before and after the invocation of the <b>toArray</b>
method were the same.&nbsp; For one case, those <b>String</b> representations
were as follows:
<p><b><tt>[Ljavax.swing.JComponent;@49ba38</tt></b>
<br><b><tt>[Ljavax.swing.JComponent;@49ba38</tt></b>
<p>In other words, the reference variable named <b>array </b>referred to
the same array object before and after the invocation of the <b>toArray</b>
method.
<p><b><font color="#FF0000">Array smaller than the collection</font></b>
<p>When I reduced the size of the array to five elements, keeping the size
of the collection at six elements, the before and after <b>String</b> representations
of the array object were as follows:
<p><b><tt>[Ljavax.swing.JComponent;@506411</tt></b>
<br><b><tt>[Ljavax.swing.JComponent;@21807c</tt></b>
<p>In this case, the reference to the array object returned by the <b>toArray</b>
method was different from the reference that was passed to the <b>toArray</b>
method.&nbsp; In other words, the returned reference referred to a different
array object than was referred to by the reference that was passed to the
<b>toArray</b>
method.
<p><b><font color="#FF0000">Modify an object</font></b>
<p>The code shown in Listing 6 modifies the value of the <b>toolTipText</b>
property of the object whose reference is stored in index 0 of the array.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; ((JComponent)array[0]).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>setToolTipText</b>("XX");
&nbsp;&nbsp;&nbsp; showArray(array,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Modified array contents");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; showCollection(ref,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection contents");


<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p>The code in Listing 6 also displays the contents of the array and the
contents of the collection after the modification is made.
<p>The output produced by the code in Listing 6 is shown below:
<p><b><tt>Modified array contents</tt></b>
<br><b><tt>XX B1 L2 B3 B4 L5 null 17</tt></b>
<br><b><tt>Collection contents</tt></b>
<br><b><tt>XX B1 L2 B3 B4 L5</tt></b>
<p><b><font color="#FF0000">Now for the caution</font></b>
<p>Note that the value of the <b>toolTipText</b> property of the object
referred to by the reference at index 0 of the array, and the same property
of the object referred to by the reference at index 0 of the collection
was overwritten by "XX".&nbsp; <i>(This is true because both references
refer to the same object.)</i>
<p>This is the case regardless of which version of the <b>toArray</b> method
is used.&nbsp; Therefore, the same cautions discussed in the previous lesson
apply here as well.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I taught you how to use the more-complex
version of the two overloaded versions of the <b>toArray</b> method, declared
in the
<b>Collection</b> interface, to copy the elements from a collection
into an array of type
<b>JComponent</b>.</font>
<p><font color="#000000">I discussed issues regarding the type of the array
and the type of the objects referred to by the elements in the container.&nbsp;
I also discussed issues regarding the size of the array as compared to
the number of elements in the collection.</font>
<p><font color="#000000">Finally, I reaffirmed that you need to exercise
care when using the elements stored in the array, to avoid corrupting the
state of the objects referred to by the elements in the collection.</font>
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
The next several lessons will teach you how to use the <b>Map</b> and <b>SortedMap
</b>interfaces,
and the concrete class implementations of those interfaces.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
