<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<h2>
Swing from A to Z:&nbsp; Demystifying Glue and Struts, Part 2</h2>
<b>Published</b>&nbsp; December 18, 2000
<br><b>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1035
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures and listings while you are reading about
them.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In the lesson entitled <i>Alignment Properties and BoxLayout, Part 1</i>,
I recommended a list of Swing tutorials for you to study prior to embarking
on a study of this set of lessons.
<p>The lessons identified on that list will introduce you to the use of
Swing while avoiding much of the detail included in this series.
<p><b><font color="#FF0000">Where are they located?</font></b>
<p>You will find those lessons published at <a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes my lessons are difficult
to locate there.&nbsp; You will find a consolidated index at
<i>Baldwin's
Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><font color="#000000">The index on my site provides links to the lessons
at Gamelan.com.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
In this lesson, I will develop three convenience methods that can be used
as alternatives to the factory methods of the <b>Box</b> class to produce
components that fulfill the functionality of glue and struts.
<p>These methods will differ from the factory methods in several important
respects.
<p>One of the methods will make it possible to produce an elastic spacer
component (glue) with an upper limit on how far the component will stretch.
<p>Another method will return a reference to an object that provides the
functionality of glue and struts in a single object.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">The BoxLayout manager</font></b>
<p><font color="#000000">In the lesson entitled <i>Alignment Properties
and BoxLayout, Part 1</i>, I introduced you to the <b>BoxLayout</b> manager.&nbsp;
I will use <b>BoxLayout</b> in the sample program in this lesson.</font>
<p><b><font color="#FF0000">Glue and struts</font></b>
<p><font color="#000000">In the lesson entitled <i>Swing from A to Z, Glue,
Struts, and BoxLayout</i>, I introduced you to the use of glue and struts.
At that point in time, they were pretty mysterious.&nbsp; All we knew was
that
there were some factory methods that would return references to different
types of invisible components that exhibited the behavior of glue and struts.</font>
<p><b><font color="#FF0000">Invisible components were of type Component</font></b>
<p><font color="#000000">The references were returned as type <b>Component</b>.&nbsp;
We didn't really know the actual type of the components that were returned
by the factory methods <i>(and also didn't need to care, except out of
curiosity)</i>.</font>
<p><b><font color="#FF0000">The size properties</font></b>
<p><font color="#000000">At that point in time, we didn't have the tools
to unravel the mystery, because we hadn't yet studied the size properties
that we studied later in the lesson entitled <i>Swing from A to Z, Minimum,
Maximum, and Preferred Sizes</i>.</font>
<p><b><font color="#FF0000">My earlier promise</font></b>
<p><font color="#000000">In the previous lesson entitled <i>Swing from
A to Z: Demystifying Glue and Struts, Part 1</i>, I introduced you to the
output of a program that is designed to take the mystery out of glue and
struts.&nbsp; I showed you some screen shots produced by that program.&nbsp;
I promised that in this lesson, I would introduce you to the code from
that program.</font>
<p><b><font color="#FF0000">What are minimum, maximum, and preferred sizes?</font></b>
<p>All components that extend <b>JComponent</b> inherit the following three
properties that support the use of layout managers:
<ul>
<li>
preferredSize</li>

<li>
minimumSize</li>

<li>
maximumSize</li>
</ul>
<font color="#000000">I discussed them at length in the lesson entitled
<i>Swing
from A to Z, Minimum, Maximum, and Preferred Sizes</i>.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
This sample program, named <b>Swing20</b>, is designed to take the mystery
out of glue and struts as used with <b>BoxLayout.</b>
<p><b><font color="#FF0000">Must resize to see the effect</font></b>
<p>This program uses a <b>JFrame</b> to illustrate the use of invisible
fixed-width and elastic spacers to control the separation between components.&nbsp;
In order to see the effect of the spacers, you must manually resize the
<b>JFrame</b>
object to make it larger and smaller.
<p><b><font color="#FF0000">BoxLayout can be used with many containers</font></b>
<p>This program also demonstrates that <b>BoxLayout</b> can be used with
containers other than <b>Box</b>.&nbsp; This program uses a <b>JButton</b>
as a container.&nbsp; The layout manager for the <b>JButton</b> is set
to <b>BoxLayout.</b>
<p><b><font color="#FF0000">Some screen shots</font></b>
<p>The following three screen shots were discussed in the <font color="#000000">previous</font>
lesson entitled <i>Swing from A to Z: Demystifying Glue and Struts, Part
1</i>.&nbsp; I am presenting them again here for convenient viewing.
<p><b><font color="#FF0000">At startup</font></b>
<p><font color="#000000">The following screen shot shows the output when
you start the program.&nbsp; The large <b>JButton </b>contains three green
<b>JButton</b>
components, two yellow <b>JLabel</b> components, and several invisible
spacer components.</font>
<center>
<p><img SRC="java1035a.gif" height=65 width=236>
<p><b>Figure 1.&nbsp; A screen shot at startup</b></center>

<p><b><font color="#FF0000">When you make it narrower</font></b>
<p>Figure 2 shows the behavior of the
<b>BoxLayout</b> manager with this
set of components when the width of the container is decreased.&nbsp; The
space between the components does not decrease, and the right-most component
gets clipped at the edge of the <b>JButton</b>.
<center>
<p><img SRC="java1035c.gif" height=65 width=202>
<p><b>Figure 2.&nbsp; A screen shot after making the Frame narrower.</b></center>

<p><b><font color="#FF0000">When you make it wider</font></b>
<p>Figure 3 shows what happens when you increase the width of the <b>JFrame</b>.
<center>
<p><img SRC="java1035b.gif" height=65 width=307>
<p><b>Figure 3.&nbsp; A screen shot after making the Frame wider.</b></center>

<p><b><font color="#FF0000">Elastic spacers were used</font></b>
<p>Elastic spacers were inserted on both sides of the button labeled <b>b2</b>,
and on the left side of the button labeled <b>b3</b>.&nbsp; These spacers
have an upper limit on their elasticity, and once they reach that limit,
they won't stretch any further.&nbsp; Once they quit stretching, the layout
manager takes up the slack by inserting space at the right end of the large
<b>JButton</b>
container.
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
As mentioned earlier, the name of this program is <b>Swing20</b>.
<p>I will break this program down and discuss it in fragments.&nbsp; A
listing of the entire program is provided in <font color="#000000">Listing
5 near the end of the lesson</font>.
<p><b><font color="#FF0000">The controlling class</font></b>
<p><font color="#000000">Listing 1 shows the beginning of the controlling
class and the <b>main()</b> method.&nbsp; You have seen code like this
in several previous lessons.&nbsp; Therefore, I won't discuss it further
here.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>class <b>Swing20</b> extends JFrame{

&nbsp; public static void <b>main</b>(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing20();
&nbsp; }//end main()
&nbsp; //---------------------------------------//

<b>Listing 1</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Significant new material</font></b>
<p><font color="#000000">Listing 2 contains significant new material.&nbsp;
This is the first of three listings that show the code for methods that
return invisible spacer components of my own design.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp; Box.Filler <b>myFixedSpacer</b>(int x, int y){
&nbsp;&nbsp;&nbsp; return new <b>Box.Filler</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y));
&nbsp; }//end myFixedSpacer()

<b>Listing 2</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">A convenience method</font></b>
<p><font color="#000000">The method that is shown in Listing 2 instantiates
and returns a reference to an invisible fixed-size spacer component with
specified width and height dimensions.</font>
<p><font color="#000000">The width is specified by the incoming parameter
named <b>x</b> and the height is specified by the incoming parameter named
<b>y</b>.</font>
<p><b><font color="#FF0000">An instance of the Box.Filler class</font></b>
<p><font color="#000000">This method instantiates and returns a reference
to an object of the <b>Box.Filler</b> inner class.&nbsp; <i>(If you are
unfamiliar with inner classes, you might need to review my tutorials on
that topic.&nbsp; Those tutorials are published at Gamelan.com.&nbsp; You
will find a Table of Contents with links to those lessons at my personal
web <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">site</a>.)</i></font>
<p><b><font color="#FF0000">What is the Box.Filler inner class?</font></b>
<p><font color="#000000">Here is what Sun has to say about this class.</font>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="399" BGCOLOR="#66FFFF" >
<tr>
<td>public static class <b>Box.Filler</b>
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
extends Component
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
implements Accessible
<p>An implementation of a lightweight component that participates in layout
but has no view.&nbsp;</td>
</tr>
</table>

<p><font color="#000000">A component that "has no view" is an invisible
component.&nbsp; <i>(If you are unfamiliar with the concept of view, as
embodied in the Model View Control (MVC) paradigm, I have previously written
some tutorials on this topic as well.)</i></font>
<p><b><font color="#FF0000">Constructor for Box.Filler</font></b>
<p><font color="#000000">This class has a single constructor that is described
by Sun as follows:</font>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="399" BGCOLOR="#66FFFF" >
<tr>
<td>public Box.Filler(Dimension min,
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dimension pref,
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dimension max)
<p>Constructor to create shape with the given size ranges.
<p>Parameters:
<br>min - Minimum size
<br>pref - Preferred size
<br>max - Maximum size</td>
</tr>
</table>

<p><b><font color="#FF0000">Note the parameters</font></b>
<p><font color="#000000">Our chief interest here lies in the three parameters.&nbsp;
On the basis of your studies of the earlier lesson entitled <i>Swing from
A to Z, Minimum, Maximum, and Preferred Sizes</i>, you should recognize
that the <b>Dimension</b> objects passed as parameters to the constructor
are used to set the value of the following properties of the <b>Box.Filler</b>
object:</font>
<ul>
<li>
<font color="#000000">minimumSize</font></li>

<li>
<font color="#000000">preferredSize</font></li>

<li>
<font color="#000000">maximumSize</font></li>
</ul>
<b><font color="#FF0000">Method to change the properties</font></b>
<p><font color="#000000">Although I didn't use it in this program, there
is also a method that can be used to modify these properties for an existing
object of the <b>Box.Filler</b> class.&nbsp; That method is described below
for the sake of completeness.</font>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="399" BGCOLOR="#66FFFF" >
<tr>
<td>public void changeShape(
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dimension min,
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dimension pref,
<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Dimension max)
<p>Change the size requests for this shape. An invalidate() is propagated
upward as a result so that layout will eventually happen with using the
new sizes.
<p>Parameters:
<br>min - Value to return for getMinimumSize
<br>pref - Value to return for getPreferredSize
<br>max - Value to return for getMaximumSize</td>
</tr>
</table>

<p><b><font color="#FF0000">Now look at my code</font></b>
<p><font color="#000000">Please refer back to Listing 2.&nbsp; The method
named <b>myFixedSpacer()</b> receives a pair of
<b>int</b> values that
specify the width and height values for an invisible component.</font>
<p><b><font color="#FF0000">Set three size properties to same value</font></b>
<p><font color="#000000">The code in the method uses these two values to
set the minimum, preferred, and maximum size properties of a <b>Box.Filler</b>
object to the same size.</font>
<p><b><font color="#FF0000">How does BoxLayout behave?</font></b>
<p><font color="#000000">The behavior of the <b>BoxLayout</b> manager,
when confronted with a component having the same values for all three properties,
is to neither expand nor shrink that component during layout.</font>
<p><b><font color="#FF0000">A fixed-size invisible component</font></b>
<p><font color="#000000">Thus, the object that is returned by the method
named <b>myFixedSpacer() </b>functions as an invisible component whose
size is fixed when used with <b>BoxLayout</b>.&nbsp; This makes it useful
for insertion between two visible components to create a fixed amount of
blank space between them when used with <b>BoxLayout</b>.</font>
<p><b><font color="#FF0000">Similar to Box.createHorizontalStrut()</font></b>
<p><font color="#000000">Although I haven't investigated it down to the
source code level, I believe that this is essentially the behavior of the
factory method named <b>Box.createHorizontalStrut()</b> that was used in
the earlier lesson entitled <i>Swing from A to Z, Glue, Struts, and BoxLayout</i>
to get a <i>strut</i>.</font>
<p><font color="#000000">In that case, there are separate factory methods
provided for getting horizontal and vertical struts.&nbsp; However, I elected
to combine both capabilities into a single method.</font>
<p><b><font color="#FF0000">The mystery is solved</font></b>
<p><font color="#000000">So now, the mystery is solved.&nbsp; The factory
methods provided for obtaining struts and glue in the <b>Box</b> class
probably return references to objects of the class named <b>Box.Filler</b>.&nbsp;
If they don't, they could.&nbsp; <i>(I will leave it as an exercise for
the reader to write and test the code to confirm or deny this hypothesis.&nbsp;
A major hint on how to do that is provided later in this lesson.)</i></font>
<p><b><font color="#FF0000">What about type Component?</font></b>
<p><font color="#000000">As mentioned earlier, the factory methods return
references to the invisible components as type <b>Component</b>.</font>
<p><font color="#000000">Since <b>Box.Filler</b> extends <b>Component</b>,
and since we don't need to access any members of the objects returned by
the factory methods such as <b>Box.createHorizontalStrut()</b>, it is satisfactory
for the factory methods to return references to the struts and glue objects
as type <b>Component</b>.</font>
<p><b><font color="#FF0000">So what! you say</font></b>
<p><font color="#000000">Although I believe that I have made it clear just
what is going on with struts and glue, so far, I haven't done much to improve
on the use of the available factory methods <i>(other than to make it possible
to invoke changeShape() on the spacer object, which is not possible with
a strut unless you downcast it to type Box.Filler)</i>.</font>
<p><b><font color="#FF0000">The next method does provide improvement</font></b>
<p><font color="#000000">However, the code in Listing 3 does provide some
improvement over the factory method named <b>Box.createGlue()</b>.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp; //Creates and returns an elastic spacer
&nbsp; Box.Filler <b>myElasticSpacer</b>(int x, int y){
&nbsp;&nbsp;&nbsp; return new Box.Filler(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(0,0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(0,0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y));
&nbsp; }//end myElasticSpacer()

<b>Listing 3</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">No practical limit on stretch</font></b>
<p><font color="#000000">When you invoke that factory method, you get back
a glue object that that has no practical limit on how far it can stretch.
<i>(I'm
sure that there is a limit, but it is probably much greater than the width
or height in pixels of any display monitor being manufactured today.)</i></font>
<p><b><font color="#FF0000">Upper limit on stretch</font></b>
<p><font color="#000000">With the method named <b>myElasticSpacer()</b>
in Listing 3, you can specify the maximum distance that the spacer will
stretch in both directions.</font>
<p><b><font color="#FF0000">Uses incoming parameters to set the limit</font></b>
<p><font color="#000000">This is accomplished by using a pair of incoming
parameters to establish the width and height values in the <b>maximumSize</b>
property of the spacer object.</font>
<p><font color="#000000">The <b>BoxLayout</b> manager won't cause a component
to increase in size beyond this limit, so this provides an upper limit
on the distance that the elastic spacer can be stretched.</font>
<p><b><font color="#FF0000">Set minimum and preferred size to zero</font></b>
<p><font color="#000000">Note that this method also sets the
<b>minimumSize</b>
and <b>preferredSize</b> properties to zero.&nbsp; Therefore, the normal
behavior of the returned object is to occupy no space on the screen.</font>
<p><b><font color="#FF0000">Clarification of an earlier lesson</font></b>
<p><font color="#000000">I made the following statement in the earlier
lesson entitled <i>Swing from A to Z, Glue, Struts, and BoxLayout</i>:</font>
<blockquote><font color="#000000">"... the order in which the glue and
strut components occur relative to each other is not important.&nbsp; In
fact, they appear to occupy the same physical space regardless of the order
in which you add them to the layout.&nbsp; (This appearance is an illusion.&nbsp;
They don't really occupy the same physical space.&nbsp; I will explain
this in more detail in a subsequent lesson.) "</font></blockquote>
<b><font color="#FF0000">The time has come to explain</font></b>
<p><font color="#000000">The time has come to provide that explanation.&nbsp;
The normal size of an elastic spacer (glue) is zero.&nbsp; Therefore, when
it occupies the space on either side of a strut, there is no visible evidence
that it even exists.&nbsp; It is not until it is stretched that its existence
becomes apparent.&nbsp; At that point in time, the total space occupied
by the strut and the glue is the sum of their respective sizes.</font>
<p><b><font color="#FF0000">Another clarification</font></b>
<p><font color="#000000">That also explains why doubling the maximum size
of the elastic spacer to the left of <b>b3</b> in Figure 3 didn't completely
double the size of the space to the immediate right of <b>b2</b>.</font>
<p><font color="#000000">There were two spacers to the right of <b>b2</b>,
but there was only a single combination spacer to the left of <b>b3</b>.
<i>(A
little later, we will see that the combination spacer doesn't add the minimum
and maximum space.)</i></font>
<p><b><font color="#FF0000">The Combination Spacer</font></b>
<p>The method named <b>combinationSpacer() </b>in <font color="#000000">Listing
4</font> returns an invisible spacer of my own design that provides the
functionality of a strut and some glue in a single object.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp;
&nbsp; JLabel <b>combinationSpacer</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int xmin,int ymin,int xmax,int ymax){
&nbsp;&nbsp;&nbsp; //xmax should never be less than xmin
&nbsp;&nbsp;&nbsp; //ymax should never be less than ymin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; int tempX = (xmax &lt; xmin)?xmin:xmax;
&nbsp;&nbsp;&nbsp; int tempY = (ymax &lt; ymin)?ymin:ymax;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel temp = <b>new JLabel()</b>;
&nbsp;&nbsp;&nbsp; temp.<b>setMinimumSize</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(xmin,ymin));
&nbsp;&nbsp;&nbsp; temp.<b>setPreferredSize</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(xmin,ymin));
&nbsp;&nbsp;&nbsp; temp.<b>setMaximumSize</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(tempX,tempY));
&nbsp;&nbsp;&nbsp; return temp;
&nbsp; }//end combinationSpacer

<b>Listing 4</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Based on a transparent JLabel</font></b>
<p>A <b>JLabel</b> with no text is an invisible component as long as you
don't make it opaque.
<p>The method shown in <font color="#000000">Listing 4</font> returns a
reference to a transparent <b>JLabel</b> object.
<p><b><font color="#FF0000">Size properties control its behavior</font></b>
<p>The preferred, minimum, and maximum property values for the object are
set so as to cause it to act as a fixed size spacer on the <b>minimumSize</b>
end, and to act as an elastic spacer up to the <b>maximumSize</b> end.
<p>The <b>preferredSize</b> property is set equal to the <b>minimumSize</b>
property so that it will display at the minimum size unless it is stretched
by the layout manager.
<p><b><font color="#FF0000">Code is straightforward</font></b>
<p>The code in this method is straightforward, and shouldn't require an
explanation.&nbsp; <i>(Note that because of the behavior of BoxLayout<b>,
</b>the
values for xmax and ymax should always be as large as the values of xmin
and ymin.)</i>
<p><b><font color="#FF0000">Used for first three images</font></b>
<p>An object returned by this method was inserted immediately to the left
of <b>b3</b> in the first three images shown above.
<p>As mentioned earlier, even though the maximum stretch for this object
was twice the maximum stretch of the elastic spacer immediately to the
right of <b>b2</b>, the space produced wasn't twice as large.&nbsp; This
is because the space to the right of <b>b2</b> also included a fixed-width
spacer.
<p><b><font color="#FF0000">Use for all spacers</font></b>
<p><font color="#000000">The screen shot shown in Figure 4 was produced
using this combination method for all of the spacers <i>(rather than combining
spacers of this type with pairs of fixed and elastic spacers).</i></font>
<center>
<p><img SRC="java1035d.gif" height=65 width=292>
<p><b>Figure 4.&nbsp; A screen shot using only combination spacers.</b></center>

<p><font color="#000000">I believe that if you compare Figure 4 with Figure
3, you will see that each space in Figure 4 is more nearly double the space
to its left <i>(as it should be)</i> than is the case in Figure 3.</font>
<p><font color="#000000">This resulted from eliminating the sum of the
fixed and elastic space values in the first three spaces from Figure 3.
<i>(Just
for my records, this screen shot was produced with a program named Swing21.)</i></font>
<p><b><font color="#FF0000">An important consideration</font></b>
<p>It is important for you to understand that the rendered size of a component
in a GUI doesn't depend entirely on the size properties of the component.&nbsp;
Rather, the rendered size also depends on how the layout manager treats
the size properties.
<p><b><font color="#FF0000">Different layout managers behave differently</font></b>
<p>Different layout managers deal differently with the size properties.&nbsp;
The <b>BoxLayout</b> manager honors the size properties whereas other layout
manager may, or may not honor them.
<p><b><font color="#FF0000">Glue and struts work with BoxLayout</font></b>
<p>For that reason, glue and struts <i>(or alternatively the objects returned
by my three methods)</i> behave according to their design with <b>BoxLayout</b>.&nbsp;
They may not behave according to their design with other layout managers.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In this lesson, I have developed three convenience methods that can be
used as alternatives to the factory methods of the <b>Box</b> class to
produce components that fulfill the functionality of glue and struts.
<p><b><font color="#FF0000">Different from the factory methods</font></b>
<p>These methods differ somewhat from the factory methods.&nbsp; In particular,
one of the methods makes it possible to produce an elastic spacer component
(glue) with an upper limit on how far the component will stretch.
<p>Another one of the methods returns a reference to an object that provides
the functionality of glue and struts in a single object.&nbsp; Again, this
object allows you to specify an upper limit on how far the object can stretch.
<p><b><font color="#FF0000">Screen shots</font></b>
<p>I also showed you some screen shots of a GUI produced using these three
methods.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will show you how to use the three methods described
above to complete the program that produced the screen shots shown in this
lesson.
<p>The program will also demonstrate that <b>BoxLayout</b> is not confined
to being used with a <b>Box</b> container.&nbsp; In fact, just for fun,
I will use a <b>JButton</b> as a container with a <b>BoxLayout</b> manager.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <font color="#000000">Listing
5</font>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing20.java
Rev 8/14/00
Copyright 2000, R.G.Baldwin

Illustrates use of invisible fixed-width and
elastic spacers to control the separation&nbsp;
between components.&nbsp; In order to see the&nbsp;
effect of the elastic spacers, you must
manually resize the JFrame object to make&nbsp;
it larger and smaller.

Also demonstrates that BoxLayout can be used
with containers other than Box.

Tested using JDK 1.2.2 under WinNT 4.0 WkStn
*********************************/

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

class Swing20 extends JFrame{

&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing20();
&nbsp; }//end main()
&nbsp; //---------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following three methods create and
&nbsp; // return invisible spacer objects.
&nbsp;&nbsp;
&nbsp; //Creates and returns a fixed spacer
&nbsp; Box.Filler myFixedSpacer(int x, int y){
&nbsp;&nbsp;&nbsp; return new Box.Filler(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y));
&nbsp; }//end myFixedSpacer()

&nbsp; //Creates and returns an elastic spacer
&nbsp; Box.Filler myElasticSpacer(int x, int y){
&nbsp;&nbsp;&nbsp; return new Box.Filler(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(0,0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(0,0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y));
&nbsp; }//end myElasticSpacer()

&nbsp; //Creates and returns an elastic spacer.
&nbsp; // Another approach.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; JLabel combinationSpacer(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int xmin,int ymin,int xmax,int ymax){
&nbsp;&nbsp;&nbsp; //xmax should never be less than xmin
&nbsp;&nbsp;&nbsp; //ymax should never be less than ymin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; int tempX = (xmax &lt; xmin)?xmin:xmax;
&nbsp;&nbsp;&nbsp; int tempY = (ymax &lt; ymin)?ymin:ymax;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel temp = new JLabel();
&nbsp;&nbsp;&nbsp; temp.setMinimumSize(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(xmin,ymin));
&nbsp;&nbsp;&nbsp; temp.setPreferredSize(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(xmin,ymin));
&nbsp;&nbsp;&nbsp; temp.setMaximumSize(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(tempX,tempY));
&nbsp;&nbsp;&nbsp; return temp;
&nbsp; }//end combinationSpacer
&nbsp;&nbsp;
&nbsp; Swing20(){//constructor

&nbsp;&nbsp;&nbsp; //Just for fun, instantiate a new
&nbsp;&nbsp;&nbsp; // JButton object and use it as a
&nbsp;&nbsp;&nbsp; // container.&nbsp; Set its layout manager
&nbsp;&nbsp;&nbsp; // to BoxLayout.
&nbsp;&nbsp;&nbsp; JButton aBut = new JButton();
&nbsp;&nbsp;&nbsp; aBut.setLayout(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BoxLayout(aBut,BoxLayout.X_AXIS));

&nbsp;&nbsp;&nbsp; //Add the JButton to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBut);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three JButton objects,
&nbsp;&nbsp;&nbsp; // make them green.
&nbsp;&nbsp;&nbsp; JButton but1 = new JButton("b1");
&nbsp;&nbsp;&nbsp; but1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but2 = new JButton("b2");
&nbsp;&nbsp;&nbsp; but2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but3 = new JButton("b3");
&nbsp;&nbsp;&nbsp; but3.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two JLabel objects.Color&nbsp;
&nbsp;&nbsp;&nbsp; // them yellow.
&nbsp;&nbsp;&nbsp; JLabel lab1 = new JLabel("L1");
&nbsp;&nbsp;&nbsp; lab1.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab1.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel lab2 = new JLabel("L2");
&nbsp;&nbsp;&nbsp; lab2.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab2.setOpaque(true);

&nbsp;&nbsp;&nbsp; //Add the buttons and the labels to the
&nbsp;&nbsp;&nbsp; // Box.&nbsp; Insert spacers between them.
&nbsp;&nbsp;&nbsp; aBut.add(but1);
&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(3,0));
&nbsp;&nbsp;&nbsp; aBut.add(lab1);
&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(4,0));
&nbsp;&nbsp;&nbsp; aBut.add(myElasticSpacer(6,0));
&nbsp;&nbsp;&nbsp; aBut.add(but2);
&nbsp;&nbsp;&nbsp; aBut.add(myElasticSpacer(12,0));
&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(5,0));
&nbsp;&nbsp;&nbsp; aBut.add(lab2);
&nbsp;&nbsp;&nbsp; aBut.add(combinationSpacer(6,0,24,0));
&nbsp;&nbsp;&nbsp; aBut.add(but3);

&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");

&nbsp;&nbsp;&nbsp; //Set the look and feel.
&nbsp;&nbsp;&nbsp; // First establish the string constants
&nbsp;&nbsp;&nbsp; String metal =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.metal." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MetalLookAndFeel";
&nbsp;&nbsp;&nbsp; String motif =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.motif." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MotifLookAndFeel";
&nbsp;&nbsp;&nbsp; String windows =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.windows." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "WindowsLookAndFeel";
&nbsp;&nbsp;&nbsp; //Set the Look and Feel by enabling one&nbsp;
&nbsp;&nbsp;&nbsp; // of these
&nbsp;&nbsp;&nbsp; //String plafClassName = motif;
&nbsp;&nbsp;&nbsp; //String plafClassName = metal;
&nbsp;&nbsp;&nbsp; String plafClassName = windows;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIManager.setLookAndFeel(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plafClassName);
&nbsp;&nbsp;&nbsp; }catch(Exception ex){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(ex);}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Cause the L&amp;F to become visible.
&nbsp;&nbsp;&nbsp; SwingUtilities.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; updateComponentTreeUI(this);

&nbsp;&nbsp;&nbsp; //Pack the JFrame down around the&nbsp;
&nbsp;&nbsp;&nbsp; // components
&nbsp;&nbsp;&nbsp; pack();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
&nbsp;&nbsp;
}//end class Swing20

<b>Listing 5</b></font></font></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
