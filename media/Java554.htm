<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Network Programming - The URL Class and the URLEncoder Class<!--endtitle--></b></h2></center>
Java Programming, Lesson # 554, Revised 02/20/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#first sample program">First Sample Program</a></li>

<ul><li><a href="#code fragments from first sample program">Code Fragments from
First Sample Program</a></li>

<li><a href="#program listing for first sample program">Program Listing for
First Sample Program</a></li></ul>

<li><a href="#second sample program">Second Sample Program</a></li>

<ul><li><a href="#code fragments from second sample program">Code Fragments from
Second Sample Program</a></li>

<li><a href="#program listing for second sample program">Program Listing for
Second Sample Program</a></li></ul></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.

<p>The material in this lesson is extremely important. However, there is
simply too much material to be covered in detail during lecture periods.
Therefore, students in Prof. Baldwin's <b>Advanced Java Programming</b>
classes at ACC will be responsible for studying this material on their
own, and bringing any questions regarding the material to class for discussion.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center><b>URL </b>is an acronym for <i>Uniform Resource Locator. </i>It is also
the name of a class in Java which is the primary subject for this lesson.

<p>A <i>URL </i>is a pointer to a particular resource at a particular location
on the Internet. A <i>URL </i>specifies the following:
<ul><li>
protocol used to access the server (such as http),</li>

<li>
name of the server,</li>

<li>
port on the server (optional)</li>

<li>
path, and</li>

<li>
name of a specific file on the server (sometimes optional)</li>

<li>
anchor or reference within the file (optional)</li></ul>
Sometimes the name of the file can be omitted, in which case an HTTP server
will usually append the file name <b>index.html</b> to the specified path
and try to load that file. For example, we will write a simple HTTP server
in a subsequent lesson that will attempt to deliver a file named <b>index.html</b>
if the name of the file is omitted from the <i>URL</i>.

<p>In addition to specifying the name of the file of interest, it is also
sometimes possible to specify an <i>anchor</i> or <i>reference</i> that
has been established inside the file. An example of how to take advantage
of this capability was provided in an earlier lesson.

<p>The general syntax of a URL is:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>protocol://hostname[:port]/path/filename#ref</td></tr></table>
The <i>port </i>is optional, and is not normally required if you are accessing
a server that provides the required service on a standard port.

<p>Java provides two different ways to do network programming. The two
ways are associated with several socket classes and several <b>URL </b>classes.
The socket classes will be the subject of subsequent lessons. This lesson
is concerned primarily with the <b>URL </b>class.

<p><b>URL </b>programming occurs at a higher level than socket programming,
and in theory represents some very powerful ideas. The powerful ideas represented
by the advanced features of the <b>URL </b>class require an understanding
of the development of <i>protocol handlers</i> and <i>content handlers</i>.

<p>In theory, you can open a connection to a resource on the web, specified
as a <b>URL </b>object, and simply invoke the <b>getContent()</b> method
on that <b>URL </b>object. The content of the resource will then be downloaded
and will appear as an object on the client machine, even if it requires
an application protocol that didn't exist when you wrote the program, and
contains content that you didn't understand when you wrote the program.

<p>This description may be a bit of an overstatement, but it is pretty
close to the claims being made. This is a powerful idea, which may or may
not bear fruit in the future.

<p>A previous lesson discussed this concept in more detail, and also discussed
the extent to which it has or probably will bear fruit. We won't repeat
that discussion here. Suffice it to say that we may need to see more progress
in the area of cooperation between the major players in the Java arena
before these concepts bear much fruit for the general internet-using public.

<p>On the other hand, it should be possible to use some of these concepts
with specialized intranet application programs (rather than browsers and
applets). If these advanced concepts are of interest, take a look at a
good book on network programming, such as <u>Java Network Programming</u>
by Elliotte Rusty Harold to learn how to write protocol handlers and content
handlers.

<p>In addition to supporting the advanced concepts mentioned to above,
the <b>URL </b>class also provides a relatively mundane alternative way
to connect one computer to another and transfer data on a stream basis.
This capability is generally redundant with the capability provided by
sockets. This lesson is primarily based on this capability.
<center><h2><a name="first sample program"></a><font color="#ff0000">First Sample Program</font></h2></center>
This program exercises four of the constructors and six of the methods
of the <b>URL </b>class.

<p>The program also illustrates the use of the <b>URLEncoder </b>class
to convert a string containing spaces and other such characters into a
<i>x-www-form-urlencoded</i> string format.

<p>The program was tested using JDK 1.1.3 under Win95.

<p>The output from the program is shown below. You should view this output
while reviewing the code in the program.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>Use simple string constructor for host URL
http www2.austin.cc.tx.us -1 / null
http://www2.austin.cc.tx.us/

Use simple string constructor for host plus file
http www2.austin.cc.tx.us -1 /baldwin null
http://www2.austin.cc.tx.us/baldwin

Use strings for protocol, host, and file
http www2.austin.cc.tx.us -1 /baldwin null
http://www2.austin.cc.tx.us/baldwin

Use strings for protocol host, and file
&nbsp;and int for port
http www2.austin.cc.tx.us 80 /baldwin null
http://www2.austin.cc.tx.us:80/baldwin

Construct absolute URL from host URL and relative URL
http www2.austin.cc.tx.us -1 /baldwin/Index.html null
http://www2.austin.cc.tx.us/baldwin/Index.html

Now use URLEncoder to create&nbsp;
&nbsp;x-www-form-urlencoded String
http%3a%2f%2fspace+.tilde%7e.plus%2b.com</pre></td></tr></table>

<center><h3><a name="code fragments from first sample program"></a><font color="#ff0000">Code
Fragments from First Sample Program</font></h3></center>
The following code fragment is a method named <b>display()</b> that I wrote
to illustrate the use of some of the methods of the <b>URL</b> class, and
also to serve the practical needs of displaying information contained in
a <b>URL </b>object. This method receives a <b>URL </b>object as a parameter
and displays its component parts separated by a space. Then it uses the
overridden <b>toString()</b> method of the <b>URL </b>class to display
the contents of the <b>URL </b>object as a single <b>String</b> object.

<p>As you can see, there is a method available for extracting each of the
parts of a <i>URL </i>that were discussed earlier. There is one exception
to this statement. The <b>getFile()</b> method returns the <u>path and
the file name combined</u>. The <b>getRef()</b> method returns the information
referred to as an <i>anchor </i>or <i>reference </i>earlier.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; void display(URL url){//method to display parts of URL
&nbsp;&nbsp;&nbsp; System.out.print(url.<b>getProtocol()</b> + " ");
&nbsp;&nbsp;&nbsp; System.out.print(url.<b>getHost()</b> + " ");
&nbsp;&nbsp;&nbsp; System.out.print(url.<b>getPort()</b> + " ");
&nbsp;&nbsp;&nbsp; System.out.print(url.<b>getFile()</b> + " ");
&nbsp;&nbsp;&nbsp; System.out.println(url.<b>getRef()</b>);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Now display entire URL as a string.
&nbsp;&nbsp;&nbsp; System.out.println(url.<b>toString()</b>);
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end display</pre></td></tr></table>
Now that we know what the <b>display()</b> method does, we can examine
the code in the <b>main()</b> method of the class.

<p>The first fragment illustrates the instantiation of a <b>URL </b>object
using the version of the constructor that expects to receive the <i>URL
</i>in string format. I have removed the exception handling code from these
code fragments for brevity. You can view the exception handling code in
the program listing in the next section.

<p>All of the remaining code shown in these fragments is contained in the
<b>main()</b> method of the class.

<p>This fragment begins by instantiating an object of the controlling class
that can be used to access the <b>display()</b> method. Then it instantiates
a new <b>URL </b>object using the string-parameter version of the constructor
and passes that object to the <b>display()</b> method. As described above,
the <b>display()</b> method accesses the component parts of the <b>URL
</b>object and displays them separated by a space. The output from this
code fragment was:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>http www2.austin.cc.tx.us -1 / null
http://www2.austin.cc.tx.us/</pre></td></tr></table>
In this case, the -1 indicates that there was no <u>port specification</u>,
and the null indicates that there was <u>no file name specification</u>
in the <i>URL </i>passed to the constructor for the <b>URL </b>object.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Url002 obj = new Url002();
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Use simple string constructor for host URL");
&nbsp;&nbsp;&nbsp; obj.display(new URL("<b>http://www2.austin.cc.tx.us</b>"));</pre></td></tr></table>
The above code fragment is followed by several other code fragments which
simply construct the <b>URL </b>object using other versions of the constructor
which require the <i>URL </i>information in different formats. I am going
to skip that code and move down to a more interesting case as shown in
the following code fragment.

<p>This code fragment uses a <b>URL</b> constructor that requires two parameters:
a <b>URL </b>object and a <b>String </b>object. Here is part of the description
of this constructor as extracted directly from the documentation for JDK
1.1.3.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>public URL(URL context, String spec) throws MalformedURLException&nbsp;

<p>Creates a URL by parsing the specification spec within a specified context.
If the context argument is not null and the spec argument is a partial
URL specification, then any of the strings missing components are inherited
from the context argument.</td></tr></table>
Let me try to explain this constructor in my own words. You can use this
constructor to build an <i>absolute</i> <i>URL </i>from a <i>relative</i><i>URL</i>.

<p>Assume, for example, that you have written your own method to display
HTML files the way that they are displayed by a browser rather than simply
as a a text file. Such files often contain links to <i>relative</i> <i>URL's</i>.
In such a case, the link would be provided simply as a path and file name
under the assumption that the path and file can be found relative to the
<i>base</i> <i>URL </i>containing the HTML file.

<p>According to <u>Java Network Programming</u> by Elliotte Rusty Harold,
<ul><li>
"In this case, you use the <i>URL </i>to the document that contains the
link to provide the missing information."</li></ul>
The following code fragment constructs a base <b>URL </b>object pointing
to

<p><b>"http://www2.austin.cc.tx.us/baldwin/hello.html"</b>

<p>It then uses uses the version of the constructor currently under discussion
to combine that base <b>URL </b>object with a relative <i>URL </i>given
by

<p><b>"/baldwin/Index.html"</b>

<p>to produce the following output <b>URL</b> object.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>http www2.austin.cc.tx.us -1 /baldwin/Index.html null
http://www2.austin.cc.tx.us/baldwin/Index.html</pre></td></tr></table>
Hopefully this example will illustrate how the constructor can combine
a base <b>URL </b>object with a relative <i>URL </i>to produce a new <b>URL
</b>object that is an absolute pointer to the relative <i>URL</i>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL baseURL = <b>new URL</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http://www2.austin.cc.tx.us/baldwin/hello.html");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.display(new URL(<b>baseURL,"/baldwin/Index.html"</b>));</pre></td></tr></table>
There is one more issue that we need to examine: the <b>URLEncoder </b>class.
This class is provided to help deal with problems arising from <i>spaces,
special characters, non-alphanumeric characters, etc.</i>, that some operating
systems may allow in file names but which may not be allowed in a URL.

<p>If you need to create a <b>URL </b>object using a <i>URL </i>string
that has these problems, you should first use the <b>encode()</b> method
of the <b>URLEncoder </b>class to convert it into a proper <i>URL </i>string.

<p>This class provides a static method named <b>encode()</b> that encodes
a string representation of a <i>URL </i>into a format called <i>"x-www-form-urlencoded"</i>
format according to the following rules. This method returns a <b>String
</b>object.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td>To convert a String, each character is examined in turn:&nbsp;

<p>The ASCII characters 'a' through 'z', 'A' through 'Z', and '0' through
'9' remain the same. The space character ' ' is converted into a plus sign
'+'. All other characters are converted into the 3-character string "%xy",
where xy is the two-digit hexadecimal representation of the lower 8-bits
of the character.</td></tr></table>
The following code fragments encodes the string given into the following
<i>URL </i>string: <b>http%3a%2f%2fspace+.tilde%7e.plus%2b.com</b>.

<p>What you see here is a representation of the <i>URL </i>where the special
characters are represented by their hex value preceded by a percent character,
except that a space character is represented by a plus character and a
plus character is represented by its hexadecimal value, %2b.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(URLEncoder.encode(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>"http://space .tilde~.plus+.com"</b>));</pre></td></tr></table>
Elliotte Rusty Harold provides a <b>URLDecoder </b>class in his <u>Java
Network Programming</u> book that takes a <i>URL </i>string in the format
shown above and converts it back to its <b>String </b>representation. He
gives us permission to include his class in our code, and I started to
include it in this tutorial. However, I decided that the writing of such
a class would make a good exercise for the student, so I decided to leave
it out of the tutorial and let you write it on your own.
<center><h3><a name="program listing for first sample program"></a><font color="#ff0000">Program
Listing for First Sample Program</font></h3></center>
A complete listing of the program follows.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File&nbsp; Url002.java Copyright 1998, R.G.Baldwin
Revised 01/19/98

This program exercises all four of the constructors and
six of the methods of the URL class.

The program also illustrates the use of the URLEncoder
class to convert a string containing spaces and other
such characters into x-www-form-urlencoded string format.

Tested using JDK 1.1.3 under Win95.

Output from the program is shown below.

Use simple string constructor for host URL
http www2.austin.cc.tx.us -1 / null
http://www2.austin.cc.tx.us/

Use simple string constructor for host plus file
http www2.austin.cc.tx.us -1 /baldwin null
http://www2.austin.cc.tx.us/baldwin

Use strings for protocol, host, and file
http www2.austin.cc.tx.us -1 /baldwin null
http://www2.austin.cc.tx.us/baldwin

Use strings for protocol host, and file
&nbsp;and int for port
http www2.austin.cc.tx.us 80 /baldwin null
http://www2.austin.cc.tx.us:80/baldwin

Construct absolute URL from host URL and relative URL
http www2.austin.cc.tx.us -1 /baldwin/Index.html null
http://www2.austin.cc.tx.us/baldwin/Index.html

Now use URLEncoder to create&nbsp;
&nbsp;x-www-form-urlencoded String
http%3a%2f%2fspace+.tilde%7e.plus%2b.com
**********************************************************/

import java.net.*;

class&nbsp; Url002{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; Url002 obj = new Url002();
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Use simple string constructor for host URL");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.display(new URL("http://www2.austin.cc.tx.us"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Use simple string constructor " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "for host plus file");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.display(new URL(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http://www2.austin.cc.tx.us/baldwin"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Use strings for protocol, host, and file");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.display(new URL(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http","www2.austin.cc.tx.us","/baldwin"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Use strings for protocol " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "host, and file\n and int for port");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.display(new URL(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http","www2.austin.cc.tx.us",80,"/baldwin"));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Construct absolute URL from " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "host URL and relative URL");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL baseURL = new URL(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http://www2.austin.cc.tx.us/baldwin/hello.html");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj.display(new URL(baseURL,"/baldwin/Index.html"));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Now use URLEncoder to create " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "\n x-www-form-urlencoded String");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(URLEncoder.encode(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http://space .tilde~.plus+.com"));
&nbsp;&nbsp;&nbsp; }catch(MalformedURLException e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(e);
&nbsp;&nbsp;&nbsp; }//end catch
&nbsp; }//end main
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; void display(URL url){//method to display parts of URL
&nbsp;&nbsp;&nbsp; System.out.print(url.getProtocol() + " ");
&nbsp;&nbsp;&nbsp; System.out.print(url.getHost() + " ");
&nbsp;&nbsp;&nbsp; System.out.print(url.getPort() + " ");
&nbsp;&nbsp;&nbsp; System.out.print(url.getFile() + " ");
&nbsp;&nbsp;&nbsp; System.out.println(url.getRef());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Now display entire URL as a string.
&nbsp;&nbsp;&nbsp; System.out.println(url.toString());
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end display
}//end class&nbsp; Url002
//=======================================================//</pre></td></tr></table>

<center><h2><a name="second sample program"></a><font color="#ff0000">Second Sample
Program</font></h2></center>
This program illustrates using a <b>URL </b>object to connect to a <i>URL
</i>and reading a file from that <i>URL </i>as an input stream. This is
<u>not a significant use</u> of the <b>URL </b>class. As we will see later,
we can and will do the same thing using sockets.

<p>Your computer must be online for this program to run properly. Otherwise,
it will throw an exception of type <b>UnknownHostException</b>.

<p>The program was tested using JDK 1.1.3 under Win95.

<p>The output from the program is a display of the contents of the file
named Test01.html in a raw text format. Thus, all of the HTML tags are
visible.

<p>As of 01/19/98, the output (with the insertion of manual line breaks)
was as shown below. However I deleted some of the lines in the middle of
the listing for brevity. I may modify the contents of this file from time
to time, so if you compile and run this program later, you may get different
results.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
&lt;HTML>
&lt;HEAD><u>Note that several lines were removed from this&nbsp;
listing for brevity</u>.

&lt;P>This test file is used to test certain network&nbsp;
programming applications.&lt;/P>

&lt;/BODY>
&lt;/HTML>&nbsp;&nbsp;</pre></td></tr></table>

<center><h3><a name="code fragments from second sample program"></a><font color="#ff0000">Code
Fragments from Second Sample Program</font></h3></center>
The entire program is contained in the <b>main()</b> method. I will ignore
the exception handling code while discussing this program. You can view
that code in the program listing in the next section.

<p>As you saw in the previous example program, the <b>URL </b>class has
several different constructors, each of which can create a new <b>URL </b>object
on the basis of <i>URL </i>information provided as parameters to the constructor.
The constructors differ in terms of how the <i>URL </i>information is provided.

<p>The first code fragment illustrates the version of the constructor that
accepts the <i>URL </i>as a string. Other versions require the individual
components of the <i>URL </i>to be passed as individual parameters.

<p>This code fragment will create a <b>URL </b>object that points to the
file named <b>Test01.html</b> in the directory named <b>baldwin </b>on
the server at Austin Community College where I teach.

<p>The URL object will <u>not contain a port specification</u> because
I didn't provide a port number. Later when we use one of the methods of
the <b>URL </b>class along with this <b>URL </b>object to <u>make a connection</u>,
the connection will, by default, be made to port 80 which is the standard
port for servers which support the HTTP protocol.

<p>In other words, when the port is not provided (the <b>URL</b> object
contains a port number of -1), the connection method of the <b>URL </b>class
will <u>use the protocol portion of the <i>URL </i>to decide which port
to connect to</u>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>URL url = <b>new URL</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http://www2.austin.cc.tx.us/baldwin/Test01.html");</pre></td></tr></table>
Once you have a <b>URL </b>object, there are a number of things that you
can do with it, some exciting, and some not so exciting.

<p>One of the things you can do with it is to open input and output streams
that will be connected to the server software that is monitoring the port
of interest. This is not particularly exciting because it essentially duplicates
a capability of the socket programming classes that we will discuss later.

<p>This code fragment opens a connection to the <i>URL </i>described by
this <b>URL </b>object and <u>returns an input stream object</u> for reading
data from the connection. This is the point where the <u>port number defaults
on the basis of the protocol</u> specification in the URL object.

<p>Be aware that <u>only the boldface portion</u> of this statement has
to to do with <i>URL </i>processing. The remainder of the statement has
to do with the more complex topic of I/O stream processing using the new
<i>reader </i>and <i>writer </i>classes of JDK 1.1..

<p>My thanks for clarifying this stream syntax go to Deitel and Deitel
and their excellent book, <u>Java How to Program, Second Edition</u>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>BufferedReader htmlPage =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BufferedReader(new InputStreamReader(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>url.openStream()</b>));</pre></td></tr></table>
The remaining code in this program is completely straightforward. Data
is read from the stream one line at a time and displayed as it is read.
The <b>readLine()</b> method returns <b>null </b>when there is no more
data to be read from the stream and the program terminates.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while((dataLine = htmlPage.<b>readLine()</b>) != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(dataLine);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end while loop</pre></td></tr></table>
As I mentioned earlier, I omitted the exception handling code from this
discussion. There are lots of opportunity for exceptions when doing network
programming, so you might want to pay attention to that part of the code
in the program listing that follows.
<center><h3><a name="program listing for second sample program"></a><font color="#ff0000">Program
Listing for Second Sample Program</font></h3></center>
A complete listing of the program follows.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Url003.java Copyright 1998, R.G.Baldwin
Revised 01/19/98

Illustrates connecting to a URL and reading a file from
that URL as an input stream.

Computer must be online for this program to run properly.
Otherwise, it will throw an exception of type&nbsp;
UnknownHostException.

Tested using JDK 1.1.3 under Win95.

The output from the program is a display of the contents
of the file named Test01.html in a text format.&nbsp; As of
01/19/98, the output (with the insertion of manual line
breaks) was:

&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
&lt;HTML>
&lt;HEAD>
&nbsp;&nbsp; &lt;TITLE>&lt;/TITLE>
&nbsp;&nbsp; &lt;META NAME="Author" CONTENT="">
&nbsp;&nbsp; &lt;META NAME="GENERATOR" CONTENT="Mozilla/3.01Gold&nbsp;
&nbsp;&nbsp; (Win95; I) [Netscape]">
&lt;/HEAD>
&lt;BODY>

&lt;P>&lt;B>&lt;I>Richard G Baldwin (512) 223-4758,&nbsp;
&lt;A HREF="mailto:baldwin@austin.cc.tx.us">
baldwin@austin.cc.tx.us&lt;/A>,
&lt;A HREF="http://www2.austin.cc.tx.us/baldwin/">
http://www2.austin.cc.tx.us/baldwin/&lt;/A>&lt;/I>&lt;/B>&lt;/P>

&lt;H3 ALIGN=CENTER>
&lt;A HREF="http://www2.austin.cc.tx.us/baldwin/">
Test File&lt;/A>&lt;/H3>

&lt;P>This test file is used to test certain network&nbsp;
programming applications.&lt;/P>

&lt;/BODY>
&lt;/HTML>&nbsp;&nbsp;
**********************************************************/

import java.net.*;
import java.io.*;

class&nbsp;&nbsp; Url003{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; String dataLine;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a URL object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; URL url = new URL(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "http://www2.austin.cc.tx.us/baldwin/Test01.html");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Open a connection to this URL and return an&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // input stream for reading from the connection.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BufferedReader htmlPage =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BufferedReader(new InputStreamReader(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url.openStream()));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Read and display file one line at a time.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while((dataLine = htmlPage.readLine()) != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(dataLine);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; }//end try
&nbsp;&nbsp;&nbsp; catch(UnknownHostException e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Must be online to run properly.");
&nbsp;&nbsp;&nbsp; }//end catch
&nbsp;&nbsp;&nbsp; catch(MalformedURLException e){System.out.println(e);}
&nbsp;&nbsp;&nbsp; catch(IOException e){System.out.println(e);}

&nbsp; }//end main
}//end class Url003
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>