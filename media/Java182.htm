<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JDK 1.1, Lightweight Components, An Anonymous Inner-Class Source/Listener
Version of the Lightweight 3D Button Class<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 182, Revised 02/19/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#constructor listing for new lightweight button class">Constructor
Listing for New Lightweight Button Class</a></li>

<li><a href="#test program listing">Test Program Listing</a></li></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.

<p>The material in this lesson is extremely important. However, there is
simply too much material to be covered in detail during lecture periods.
Therefore, students in Prof. Baldwin's <b>Advanced Java Programming</b>
classes at ACC will be responsible for studying this material on their
own, and bringing any questions regarding the material to class for discussion.

<p>This lesson was originally written on December 6, 1997 using the software
and documentation in the JDK 1.1.3 download package.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
Previous lessons developed and discussed a lightweight 3D button class
that mimics a heavyweight button in many respects. One of those lessons
developed the lightweight 3D button class using the <b>Source/Listener</b>
methodology with <u>named inner classes</u>. The name of the class that
was developed in that lesson was LWButton02.

<p>This lesson will develop a new class for the lightweight button by converting
two of the <u>named inner classes</u> to <u>anonymous inner classes</u>.

<p>All of the class definition will remain the same except for the constructor
and the removal of the two named inner classes. Therefore, all I am only
going to show you is the constructor.

<p>You can create your own version of this new class by using the new constructor,
removing the named inner classes for the <b>focus listener</b> and the
<b>key listener</b> from the class named LWButton02, and using the remainder
of the class named LWButton02.

<p>I'm not going to provide much discussion. You should already know how
to convert the named inner classes to anonymous inner classes. If you don't,
you should go back and review the lesson on inner classes.

<p>A test program is provided at the end of the lesson that can be used
to exercise this new version of the lightweight button class.

<p>Please refer to the class named <b>LWButton01 </b>in a previous lesson
for a complete functional description of the lightweight 3D button class.
<center><h2><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h2></center>
The only interesting code fragments are the two anonymous inner class definitions
which are shown below. The first is the inner class definition used to
register a key listener object and the second is the inner class definition
used to register a focus listener object.

<p>Note that when you define an anonymous inner class, you are, in effect,
implementing the listener interface. This requires that you provide a definition
for all of the methods declared in the interface. Therefore, it was necessary
for me to provide an empty function definition for the method named <b>keytyped()</b>
even though I didn't need to use that method.

<p>Also note that it wasn't possible to use an anonymous inner class for
the mouse listener. Use of an anonymous inner class implies that you are
instantiating an anonymous object. However, the functional requirements
of the program require that the methods of the key listener object invoke
methods of the mouse listener object. This requires that the mouse listener
object be a named object. You can see that in the following code which
references the <b>mousePressed()</b> and <b>mouseReleased() </b>methods
on the <b>mouseListener</b> object.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><b>&nbsp;&nbsp;&nbsp; //Register an anonymous key listener object using an&nbsp;
&nbsp;&nbsp;&nbsp; // anonymous inner class
</b>&nbsp;&nbsp;&nbsp; this.<b>addKeyListener</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new <b>KeyListener</b>(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b>keyPressed</b>(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Generate mousePressed() event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.VK_SPACE)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>mouseListener.mousePressed</b>(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis,MouseEvent.MOUSE_PRESSED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end keyPressed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b>keyReleased</b>(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Generate mouseReleased() event&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.VK_SPACE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>mouseListener.mouseReleased</b>(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis,MouseEvent.MOUSE_RELEASED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end keyReleased()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b>keyTyped</b>(KeyEvent e){}//satisfy compiler
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end KeyListener
&nbsp;&nbsp;&nbsp; );//end addKeyListener
&nbsp;&nbsp;&nbsp; //end of anonymous inner class for key listener
&nbsp;&nbsp;&nbsp;&nbsp;</pre></td></tr></table>
The next code fragment shows the registration of the anonymous focus listener
object using an anonymous inner class.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><b>&nbsp;&nbsp;&nbsp; //Register an anonymous focus listener object using an
&nbsp;&nbsp;&nbsp; // anonymous inner class.
</b>&nbsp;&nbsp;&nbsp; this.<b>addFocusListener</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new <b>FocusListener</b>(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b>focusGained</b>(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = true; //set the gotFocus flag&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.repaint();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end focusGained()&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b>focusLost</b>(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = false; //clear the gotFocus flag&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.repaint();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end focusLost()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end FocusListener
&nbsp;&nbsp;&nbsp; );//end addFocusListener
&nbsp;&nbsp;&nbsp; //end of anonymous inner class for focus listener&nbsp;&nbsp;&nbsp;&nbsp;</pre></td></tr></table>
A complete listing of the constructor as well as some of the comments from
the beginning of the program are provided in the next section.

<p>It was pointed out by a reader named Kees Kuip that the use of the <b>refToThis</b>
instance variable could lead to a memory leak, because the object has an
embedded reference to itself which could prevent it from being garbage-collected.
A solution to this potential problem was provided as an exercise for the
student in the <b>Review </b>section at the end of an earlier lesson. As
it turns out, this is not a problem. A demonstration program to that effect
was also provided in the earlier lesson. Thanks go out to Kees for pointing
out this potential problem, and also for recommending a solution.
<center><h2><a name="constructor listing for new lightweight button class"></a><font color="#ff0000">Constructor
Listing for New Lightweight Button Class</font></h2></center>
This constructor listing is followed by a listing for a program that can
be used to exercise the new version of the lightweight button.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/* File LWButton03.java Copyright 1997, R.G.Baldwin
This class replicates the functionality of the class
named LWButton01 and is a modification of the class named
LWButton02.

However, the LWButton01 class was implemented using the&nbsp;
enableEvents()--process...Event() methodology whereas this
class uses the source/listener methodology.&nbsp;&nbsp;

Two of the listener classes in this class are anonymous
inner classes while one of the listener classes is a named
inner class.&nbsp;&nbsp;

This class was tested using JDK 1.1.3 under Win95.
*/
//=======================================================//

&nbsp; //Constructor for an LWButton with a label.
&nbsp; public LWButton03(String rawLabel) {
&nbsp;&nbsp;&nbsp; this.rawLabel = rawLabel;
&nbsp;&nbsp;&nbsp; //Add spaces on either end and save it that way
&nbsp;&nbsp;&nbsp; this.label = "&nbsp; " + rawLabel + "&nbsp; ";

&nbsp;&nbsp;&nbsp; //Instantiate and register a named listener object for
&nbsp;&nbsp;&nbsp; // the mouse listener.
&nbsp;&nbsp;&nbsp; mouseListener = new MyMouseListenerClass();
&nbsp;&nbsp;&nbsp; this.addMouseListener(mouseListener);

<b>&nbsp;&nbsp;&nbsp; //Register an anonymous key listener object using an&nbsp;
&nbsp;&nbsp;&nbsp; // anonymous inner class
&nbsp;&nbsp;&nbsp; this.addKeyListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new KeyListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void keyPressed(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Generate mousePressed() event
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.VK_SPACE)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mouseListener.mousePressed(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis,MouseEvent.MOUSE_PRESSED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end keyPressed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void keyReleased(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Generate mouseReleased() event&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.VK_SPACE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mouseListener.mouseReleased(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis,MouseEvent.MOUSE_RELEASED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end keyReleased()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void keyTyped(KeyEvent e){}//satisfy compiler
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end KeyListener
&nbsp;&nbsp;&nbsp; );//end addKeyListener
&nbsp;&nbsp;&nbsp; //end of anonymous inner class for key listener
</b>&nbsp;&nbsp;&nbsp;&nbsp;
<b>&nbsp;&nbsp;&nbsp; //Register an anonymous focus listener object using an
&nbsp;&nbsp;&nbsp; // anonymous inner class.
&nbsp;&nbsp;&nbsp; this.addFocusListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FocusListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void focusGained(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = true; //set the gotFocus flag&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.repaint();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end focusGained()&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void focusLost(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = false; //clear the gotFocus flag&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.repaint();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end focusLost()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end FocusListener
&nbsp;&nbsp;&nbsp; );//end addFocusListener
&nbsp;&nbsp;&nbsp; //end of anonymous inner class for focus listener&nbsp;</b>&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Store a reference to this lightweight button object&nbsp;
&nbsp;&nbsp;&nbsp; // in an instance variable&nbsp;
&nbsp;&nbsp;&nbsp; refToThis = this;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor</pre></td></tr></table>
The next section contains the source code for a program that can be used
to exercise this lightweight button class.
<center><h2><a name="test program listing"></a><font color="#ff0000">Test Program Listing</font></h2></center>
The following test program is identical to one of the test programs in
a previous program that was used to exercise the earlier version of the
lightweight button class with a <b>BorderLayout </b>manager. Only the reference
to the lightweight button class has been changed.

<p>Please refer to the earlier lesson for a functional description of the
program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/* File Lightweight08.java Copyright 1997, R.G.Baldwin

This program was tested using JDK 1.1.3 under Win95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class Lightweight08 extends Frame{
&nbsp; Label myLabel;
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Lightweight08();//instantiate object of this type
&nbsp; }//end main

//-------------------------------------------------------//
&nbsp; public Lightweight08(){//constructor
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; //Set background to a dull yellow
&nbsp;&nbsp;&nbsp; this.setBackground(new Color(128,128,0));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a borderLayout object with gaps and apply
&nbsp;&nbsp;&nbsp; // it to the Frame object.
&nbsp;&nbsp;&nbsp; BorderLayout myLayout = new BorderLayout();
&nbsp;&nbsp;&nbsp; myLayout.setHgap(10);
&nbsp;&nbsp;&nbsp; myLayout.setVgap(10);
&nbsp;&nbsp;&nbsp; this.setLayout(myLayout);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three lightweight buttons
&nbsp;&nbsp;&nbsp; LWButton03 eastLWButton = new LWButton03("East");
&nbsp;&nbsp;&nbsp; LWButton03 northLWButton = new LWButton03("North");
&nbsp;&nbsp;&nbsp; LWButton03 centerLWButton = new LWButton03("Center");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Label object and initialize it to green
&nbsp;&nbsp;&nbsp; myLabel = new Label("Label Object");
&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a heavyweight button object
&nbsp;&nbsp;&nbsp; Button myButton = new Button("Heavyweight Button");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add all five components to the Frame object.
&nbsp;&nbsp;&nbsp; this.add(eastLWButton,"East");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.add(northLWButton,"North");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.add(centerLWButton,"Center");
&nbsp;&nbsp;&nbsp; this.add(myButton,"West");
&nbsp;&nbsp;&nbsp; this.add(myLabel,"South");

&nbsp;&nbsp;&nbsp; //Instantiate an ActionListener object
&nbsp;&nbsp;&nbsp; MyActionListener myActionListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Register the ActionListener object on all four
&nbsp;&nbsp;&nbsp; // of the buttons.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; eastLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; northLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; centerLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; myButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setSize(300,200);
&nbsp;&nbsp;&nbsp; this.setVisible(true);

&nbsp;&nbsp;&nbsp; //Anonymous inner-class listener to terminate program
&nbsp;&nbsp;&nbsp; this.addWindowListener(new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);}});//end addWindowListener
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Inner Class to respond to action events.&nbsp; Make this an
&nbsp; // inner class for easy access to myLabel.
&nbsp; class MyActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(myLabel.getBackground() == Color.green)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.red);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else myLabel.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; }//end actionPerformed
&nbsp; }//end class MyActionListener
}//end class Lightweight08
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>