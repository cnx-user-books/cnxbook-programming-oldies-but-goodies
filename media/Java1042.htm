<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Using Focus in Swing, Part 2</h2></center>
<b><i>By <a href="#About the author">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1042
<p>November 27, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the figures and listings while you are reading about them,
without losing your place.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In an earlier lesson entitled <a href="Java1030.htm">Alignment Properties
and BoxLayout, Part 1</a>, I recommended a list of my earlier Swing tutorials
for you to study prior to embarking on a study of this set of lessons.
<p><b><font color="#FF0000">Where are they located?</font></b>
<p>You will find those lessons published at Gamelan.com.&nbsp; I also maintain
a consolidated Table of Contents at
<i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a></i><font color="#000000"> that may make
it easier for you to locate specific lessons.&nbsp; The Table of Contents
on my site provides links back to each of the lessons at Gamelan.com.</font>
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">The previous lesson</font></b>
<p><font color="#000000">In a previous lesson entitled <a href="Java1040.htm">Using
Focus in Swing, Part 1</a>, I introduced you to:</font>
<ul>
<li>
<font color="#000000">The five focus properties of the <b>JComponent</b>
class that are inherited by most Swing components.</font></li>

<li>
<font color="#000000">The focus traversal cycle.</font></li>

<li>
<font color="#000000">The use of the <b>requestFocus()</b> method.</font></li>
</ul>
<b><font color="#FF0000">The focus properties</font></b>
<p><font color="#000000">The five focus properties of the <b>JComponent</b>
class that are inherited by most Swing components are repeated below for
convenient viewing.</font>
<ul>
<li>
<font color="#000000">focusCycleRoot</font></li>

<li>
<font color="#000000">focusTraversable</font></li>

<li>
<font color="#000000">managingFocus</font></li>

<li>
<font color="#000000">requestFocusEnabled</font></li>

<li>
<font color="#000000">nextFocusableComponent</font></li>
</ul>
<b><font color="#FF0000">Promises, promises...</font></b>
<p><font color="#000000">In the previous lesson, I also provided the AWT
baseline for focus traversal.&nbsp; I promised that this lesson would extend
the concept to include focus traversal in Swing, and would contrast the
two different versions of the focus traversal cycle.</font>
<p><font color="#000000">I also promised that subsequent lessons will discuss
the use of all five of the focus properties of Swing, and will show you
how to create and use your own focus manager as a replacement for the default
focus manager.</font>
<p><b><font color="#FF0000">Swing components are beans</font></b>
<p><font color="#000000">Swing components are JavaBean components, and
most extend <b>JComponent</b> either directly or indirectly.&nbsp; We are
usually interested in the <i>methods</i>,
<i>events</i>, and <i>properties</i>
of the bean.&nbsp; Most Swing components inherit the methods, events, and
properties from <b>JComponent</b> and its superclasses.</font>
<p><b><font color="#FF0000">Understanding Swing components as a group</font></b>
<p><font color="#000000">If you understand the characteristics that Swing
components inherit from <b>JComponent</b>, you already know a lot about
a Swing component even before you begin examining it individually.&nbsp;
In other words, we can learn a lot about Swing components by examining
the <b>JComponent</b> class.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
This sample program, named <b>Swing24</b>, is the second in a series of
programs designed to illustrate the use of focus in Swing.
<p>The screen shot in Figure 1 shows what the screen looks like when this
sample program starts running.
<center>
<p><img SRC="java1042a.gif" height=101 width=301>
<br><b><font face="Arial Narrow"><font size=-1>Figure 1&nbsp; A Screen
Shot of the Running Program</font></font></b></center>

<p><b><font color="#FF0000">A side trip</font></b>
<p><font color="#000000">Strictly as an aside, Figure 2 shows a screen
shot from the <a href="Java1040.htm">previous</a> lesson.</font>
<center>
<p><img SRC="java1042b.gif" height=101 width=301>
<br><b><font face="Arial Narrow"><font size=-1>Figure 2&nbsp; A Screen
Shot from the Previous Lesson</font></font></b></center>

<p><b><font color="#FF0000">What's the difference?</font></b>
<p><font color="#000000">Do you notice any difference between the two screen
shots?&nbsp; The main difference is that Figure 1 shows the Swing GUI rendered
in the Sun <i>Metal</i> look and feel, while Figure 2 shows the AWT GUI
rendered under the Windows operating system, giving it a Windows look and
feel.</font>
<p><b><font color="#FF0000">Swing provides <i>pluggable look and feel</i></font></b>
<p><font color="#000000">With the AWT, the rendering of components is determined
by the operating system.&nbsp; However, with Swing, you have the ability
to change the look and feel at runtime largely independent of the operating
system.&nbsp; <i>(See my earlier lessons to learn more about pluggable
look and feel.)</i></font>
<p><b><font color="#FF0000">Now back to the main thread</font></b>
<p>Now lets return from our side trip and get back to the business at hand.&nbsp;
The <a href="Java1040.htm">previous</a> lesson illustrated two important
aspects of AWT and Swing focus handling:
<p><b><font color="#FF0000">Order of focus traversal</font></b>
<p>First, the order of focus traversal for the AWT is the order in which
the components are placed in the container.&nbsp; This lesson will explain
the order of focus traversal for Swing, which is different from the AWT.
<p><b><font color="#FF0000">Requesting the focus</font></b>
<p>Second, it is possible, with either the AWT or Swing, to request that
the focus be shifted to a specific component by invoking the <b>requestFocus()</b>
method on that component.
<p><b><font color="#FF0000">The default starting point</font></b>
<p>With both Swing and the AWT, the default is for the first component
placed in the container to have the focus when the program starts running.&nbsp;
In this case, that would be the East Button <i>(later you will see that
the East button is the first component placed in the container).</i>
<p><b><font color="#FF0000">Overriding the default</font></b>
<p>However, a <b>ComponentEvent</b> handler in this program requests that
the focus be shifted to the North Button immediately after the GUI is made
visible.&nbsp; As shown in Figure 1, this causes the focus to reside on
the North button by the time the GUI is available to the user.
<p><b><font color="#FF0000">Focus traversal cycle</font></b>
<p>Focus traversal can be observed by repeatedly pressing the Tab key.&nbsp;
Pressing Shift-Tab will reverse the order of focus traversal.
<p><b><font color="#FF0000">What is the order of focus traversal?</font></b>
<p>If, like the AWT, the order of traversal were based on the order that
the components are placed in the container, then the order of focus traversal
for the GUI in Figure 1 would be North, Center, East, West, South, and
back to North.
<p><b><font color="#FF0000">Not like the AWT</font></b>
<p>However, with the default Swing focus manager, the order of traversal
is not based on the order that the components are placed in the container.
<p>Rather, the order of traversal proceeds from the upper left to the lower
right regardless of the order that the components are placed in the container.
<p>Therefore, for the Swing GUI shown in Figure 1, the order of traversal
is North, West, Center, East, South, and back to North.
<p><b><font color="#FF0000">Modifying the order of focus traversal</font></b>
<p>There are at least two different ways to modify the order of focus traversal
in Swing.
<p>One way is to manipulate the <font color="#000000"><b>nextFocusableComponent</b>
property.&nbsp; The second way is to replace the default focus manager
with a new focus manager of your own design.&nbsp; Both approaches will
be illustrated in subsequent lessons.</font>
<p><b><font color="#FF0000">Event handlers</font></b>
<p>There are no event handlers registered on the five buttons placed in
the <b>JFrame</b> in Figure 1.
<p>However, as mentioned earlier, a component listener is registered on
the <b>JFrame</b> to invoke <b>requestFocus()</b> on the North button when
the <b>JFrame</b> becomes visible.&nbsp; <i>(You can only request focus
on a component after it becomes visible.&nbsp; If you request focus before
the component becomes visible, the request has no effect.)</i>
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will break this program down and discuss it in fragments.&nbsp; A listing
of the entire program is provided in Listing 5.
<p><b><font color="#FF0000">The controlling class</font></b>
<p>Listing 1 shows the beginning of the controlling class named <b>Swing24</b>
along with the <b>main()</b> method.
<p>The fragment also shows the instantiation of a new <b>JButton</b> object
with a label of "North".&nbsp; A subsequent code fragment will invoke the
<b>requestFocus()</b>
method to purposely shift the focus to this <b>JButton</b> component.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing24.java Rev 8/17/00
**********************************/

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class Swing24 extends <b>JFrame</b>{
&nbsp; JButton northBtn = <b>new JButton("North");
</b>&nbsp;&nbsp;
&nbsp; public static void <b>main</b>(String args[]) {
&nbsp;&nbsp;&nbsp; <b>new Swing24();
</b>&nbsp; }//end main()

<b>Listing 1</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The controlling class extends JFrame</font></b>
<p>Note that the controlling class extends the <b>JFrame</b> class. <b>JFrame</b>
is one of the top-level classes in Swing.&nbsp; Therefore the instance
of the controlling class created in the <b>main()</b> method appears on
the screen as a GUI.
<p><b><font color="#FF0000">The constructor</font></b>
<p>Listing 2 shows the beginning of the constructor.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;
&nbsp; Swing24(){//Constructor
&nbsp;&nbsp;&nbsp; <b>getContentPane().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new JButton("East"),"East");
&nbsp;&nbsp;&nbsp; getContentPane().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new JButton("West"),"West");
&nbsp;&nbsp;&nbsp; getContentPane().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new JButton("South"),"South");
&nbsp;&nbsp;&nbsp; getContentPane().add(northBtn,"North");
&nbsp;&nbsp;&nbsp; getContentPane().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new JButton("Center"),"Center");
</b>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setSize(300,100);


<b>Listing 2</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The layout manager</font></b>
<p>Hopefully by now, you are familiar with the use of <b>getContentPane()</b>
in Swing.&nbsp; According to Sun, <i>"The default contentPane() will have
a BorderLayout manager set on it."</i>
<p><b><font color="#FF0000">Place components in the JFrame</font></b>
<p>The first five statements in the constructor (highlighted in boldface)
instantiate four anonymous <b>JButton</b> objects and place them, along
with the <b>JButton</b> object instantiated earlier, in the East, West,
South, North, and Center locations of the <b>JFrame</b> component.
<p><b><font color="#FF0000">First component is placed in the East</font></b>
<p>Note in particular that the first component is placed in the east position.&nbsp;
By default, this is the button that would have the focus when the GUI first
appears on the screen.&nbsp; However, the <b>requestFocus()</b> method
will be used to prevent this button from having the focus when the GUI
becomes available to the user.
<p><b><font color="#FF0000">Traversal doesn't match order of placement</font></b>
<p>As explained earlier, unlike the AWT, the focus traversal order of components
in a Swing container does not match the order in which the components are
placed in the container.&nbsp; If it did, this would cause the focus traversal
order among the buttons to be:&nbsp; East, West, South, North, Center,
and back to East.
<p><b><font color="#FF0000">The actual focus traversal cycle</font></b>
<p>However, the focus traversal order provided by the default Swing focus
manager is from left to right, top to bottom.&nbsp; Therefore, the actual
focus traversal order of this GUI is North, West, Center, East, South,
and back to North.
<p><b><font color="#FF0000">Set title and size properties</font></b>
<p>The remaining code in Listing 2 simply sets the title property and the
size property of the <b>JFrame</b>.&nbsp; There's nothing exciting or unusual
about that.
<p><b><font color="#FF0000">An anonymous ComponentEvent listener</font></b>
<p>Listing 3 is an anonymous <b>ComponentEvent</b> listener class that
is used to cause the focus to reside on the North button when the GUI becomes
available to the user.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; //Register component listener to request
&nbsp;&nbsp;&nbsp; // focus on the north JButton after the
&nbsp;&nbsp;&nbsp; // JFrame becomes visible.
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; this.addComponentListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ComponentAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b>componentShown(
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ComponentEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>northBtn.requestFocus();
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end componentShown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ComponentAdapter
&nbsp;&nbsp;&nbsp; );//end addComponentListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp;&nbsp;&nbsp; //Make the JFrame visible
&nbsp;&nbsp;&nbsp; setVisible(true);


<b>Listing 3</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">What does this code do?</font></b>
<p>This code invokes the <b>requestFocus()</b> method on the reference
to the North button.&nbsp; This causes the focus to shift to that button
<i>(after
the GUI becomes visible on the screen).</i>
<p>This is essentially the same code that was explained in the <a href="Java1040.htm">previous</a>
lesson.&nbsp; Therefore, I won't discuss it further here.
<p><b><font color="#FF0000">Make the JFrame visible</font></b>
<p>The remaining code in Listing 3 sets the visible property to true, causing
the <b>JFrame</b> to become visible on the screen.&nbsp; This is what actually
triggers the <b>componentShown()</b> event that the earlier code in Listing
3 is listening for.
<p><b><font color="#FF0000">The terminator...</font></b>
<p>The code in Listing 4 registers an anonymous object that causes the
program to terminate when the user clicks the <i>close</i> button on the
<b>JFrame</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
}//end class Swing24


<b>Listing 4</b></font></font></pre>
</td>
</tr>
</table>

<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In the previous lesson, I introduced you to:
<ul>
<li>
The five focus properties of the <b>JComponent</b> class that are inherited
by most Swing components.</li>

<li>
The focus traversal cycle.</li>

<li>
The use of the <b>requestFocus()</b> method.</li>
</ul>
In that lesson, I also provided the AWT baseline for focus traversal.
<p>In this lesson, I have extended the concept to include focus traversal
in Swing, and I have contrasted the two different versions of the focus
traversal cycle.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will show you how to control the <i>focus root cycle</i>
in Swing.
<p>What I mean by focus root cycle is, when you create a composite GUI
consisting of nested containers, you have the choice of allowing the focus
to traverse smoothly into and out of a nested container, or of causing
the focus to continually cycle within a nested container once it enters
that container.
<p>This will be accomplished using the <b>isFocusCycleRoot()</b> method
and the <b>focusCycleRoot</b> property.
<p>The lessons in this miniseries will discuss the use of all five of the
focus properties of Swing, and will also show you how to create and use
your own focus manager as a replacement for the default focus manager.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in Listing 5.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing24.java Rev 8/17/00
Copyright 2000, R.G.Baldwin

This is one in a series of programs designed&nbsp;
to illustrate the use of focus in Swing.

This lesson illustrates how the focus
traverses its cycle among Swing components.&nbsp;&nbsp;
This will be contrasted with the manner in
which the focus traverses its cycle in the
AWT.

Illustrates two important aspects of Swing
focus handling:
&nbsp;&nbsp;
First, unlike the AWT, the order of focus&nbsp;
traversal in Swing is left to right, top to&nbsp;
bottom, regardless of the order in which the
components are placed in the container.

Second, it is possible to request that focus
be moved to a specific component by invoking
the requestFocus() method on that component.
Like the AWT, the default is for the first&nbsp;
component placed in the container to have&nbsp;
the focus when the program starts running.&nbsp;&nbsp;
In this case, that would be the East JButton.
A ComponentEvent handler requests focus on&nbsp;
the North JButton immediately after the GUI&nbsp;
is made visible which causes the focus to&nbsp;
reside on the North JButton by the time the&nbsp;
GUI is available to the user.

Thus, the order of focus traversal is&nbsp;
North, West, Center, East, South, and back
to North.&nbsp; Focus traversal can be observed
by repeatedly pressing the Tab key.&nbsp;&nbsp;
Repeatedly pressing Shift-Tab will reverse
the order of focus traversal among the
components.

There are no event handlers registered on&nbsp;
the five JButtons placed in the JFrame.&nbsp;&nbsp;
However, a component listener is registered
on the JFrame to invoke requestFocus() on the
North JButton when the JFrame becomes&nbsp;
visible.&nbsp; (You can only request focus on a&nbsp;
component after it becomes visible.)

Tested using JDK 1.2.2 under WinNT 4.0 WkStn
**********************************/

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class Swing24 extends JFrame{
&nbsp; JButton northBtn = new JButton("North");
&nbsp;&nbsp;
&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp; new Swing24();
&nbsp; }//end main()
&nbsp; //---------------------------------------//
&nbsp;&nbsp;
&nbsp; Swing24(){//Constructor
&nbsp;&nbsp;&nbsp; getContentPane().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new JButton("East"),"East");
&nbsp;&nbsp;&nbsp; getContentPane().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new JButton("West"),"West");
&nbsp;&nbsp;&nbsp; getContentPane().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new JButton("South"),"South");
&nbsp;&nbsp;&nbsp; getContentPane().add(northBtn,"North");
&nbsp;&nbsp;&nbsp; getContentPane().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; add(new JButton("Center"),"Center");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setSize(300,100);

&nbsp;&nbsp;&nbsp; //Register component listener to request
&nbsp;&nbsp;&nbsp; // focus on the north JButton after the
&nbsp;&nbsp;&nbsp; // JFrame becomes visible.
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; this.addComponentListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ComponentAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void componentShown(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ComponentEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; northBtn.requestFocus();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end componentShown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ComponentAdapter
&nbsp;&nbsp;&nbsp; );//end addComponentListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp;&nbsp;&nbsp; //Make the JFrame visible
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
}//end class Swing24


<b>Listing 5</b></font></font></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
