<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 9, The Comparator Interface, Part 1</h2>
<p><i><font color="#000000">Baldwin discusses and illustrates the use of the
Comparator interface.&nbsp; The sorting order established by a Comparator
may be different or may be the same as the natural order.&nbsp; A Comparator
can be used to establish a sorting order for objects that don't have a
natural ordering.&nbsp; The use of a Comparator is an alternative to the
implementation of the Comparable interface.</font></i></p>
<b>Published:</b>&nbsp; August 6, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1366
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">A miniseries</font></b>
<p>This is the ninth lesson in a miniseries on Java data structures and
the Java<i> Collections Framework.</i>&nbsp; The first lesson in the miniseries
was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1364.htm">Data Structures in Java: Part 8, The
Comparable Interface, Part 2</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p><b><font color="#FF0000">A sub-series</font></b>
<p>This is also the first lesson in a sub-series on the <b>Comparator</b>
interface.&nbsp; The purpose of the lessons in this sub-series is to teach
you about the interactions between the <b>Comparator</b> interface and
the Collections Framework<i>,</i> particularly with respect to the
<b>Set</b>,
<b>SortedSet</b>,
and <b>SortedMap</b> interfaces of the Collections Framework.&nbsp; This
lesson discusses <b>Set</b> and <b>SortedSet</b>.&nbsp; A discussion of
<b>SortedMap</b>
will be deferred for inclusion in a subsequent lesson.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">Previous lessons have discussed the use of the <b>Comparable</b>
interface.&nbsp; This lesson discusses and illustrates the use of the <b>Comparator</b>
interface.</font>
<p><font color="#000000">The <b>Comparable</b> interface establishes <i>natural
ordering.</i>&nbsp; The sorting order established by a <b>Comparator</b>
may be different or may be the same as the <i>natural order.</i></font>
<p><font color="#000000">A <b>Comparator</b> can be used to establish a
sorting order for objects that don't have a <i>natural ordering</i>.</font>
<p><font color="#000000">The use of a <b>Comparator</b> is an alternative
to the implementation of the <b>Comparable</b> interface.&nbsp; A <b>TreeSet</b>
object instantiated with the benefit of a <b>Comparator</b> object doesn't
require the objects in its collection to implement <b>Comparable</b>.</font>
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Program</font></h2></center>
<b><font color="#FF0000">The Comparable interface</font></b>
<p>Several previous lessons have discussed the use of the <b>Comparable</b>
interface to establish the <i>natural ordering</i> of elements in a sorted
set.&nbsp; Although the name of the <b>Comparable</b> interface is similar
to the name of the <b>Comparator</b> interface, they are different interfaces.&nbsp;
Don't be confused by the similarity of the names.
<p><b><font color="#FF0000">The Comparator interface</font></b>
<p>This lesson will begin the discussion of an alternative approach to
sorting, using the <b>Comparator</b> interface to establish sorting order.
<p>The sorting order established by a <b>Comparator</b> may be different
from the <i>natural ordering</i>.&nbsp; The <b>Comparator</b> interface
can also be used to establish sorting order for objects that do not implement
the <b>Comparable</b> interface and therefore do not have a <i>natural
ordering</i>.
<p><b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Let's begin with a little quiz to test your prior knowledge of the Collections
Framework.
<p>What output is produced by the program shown in Listing 1?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; 44321</li>

<li>
D.&nbsp; 4321</li>

<li>
E.&nbsp; 1234</li>

<li>
F.&nbsp; 12344</li>

<li>
G.&nbsp; None of the above.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparator02.java
//Copyright 2001, R.G.Baldwin
import java.util.*;
import java.io.Serializable;

public class Comparator02{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparator02

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ref = new TreeSet(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new TheComparator());
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next());
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();

&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(3));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(2));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(1));
&nbsp; }//end fillIt()
}//end class Populator

class MyClass{
&nbsp; int data;
&nbsp;&nbsp;
&nbsp; MyClass(){
&nbsp;&nbsp;&nbsp; data = 0;
&nbsp; }//end noarg constructor
&nbsp;&nbsp;
&nbsp; MyClass(int data){
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end parameterized constructor
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return "" + data;
&nbsp; }//end overridden toString()

}//end MyClass

class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements Comparator,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int compare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof MyClass))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof MyClass))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(((MyClass)o1).data&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt; ((MyClass)o2).data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1;
&nbsp;&nbsp;&nbsp; if(((MyClass)o1).data&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; > ((MyClass)o2).data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;
&nbsp;&nbsp;&nbsp; else return 0;
&nbsp; }//end compare()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public boolean equals(Object o){
&nbsp;&nbsp;&nbsp; if(!(o instanceof TheComparator))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
&nbsp;&nbsp;&nbsp; else return true;
&nbsp; }//end overridden equals()
}//end class TheComparator

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p>If your answer was <b>E.&nbsp; 1234</b>, then you are correct.
<p><b><font color="#FF0000">Eligibility for inclusion in a TreeSet</font></b>
<p>The <b>TreeSet</b> class implements the <b>SortedSet</b> interface.
<p>In an earlier lesson, I told you that in order to be eligible for inclusion
in a <b>TreeSet</b> collection, an object must be instantiated from a class
that implements the <b>Comparable</b> interface.
<p>At that time, I also told you that it is possible to instantiate a new
<b>TreeSet</b>
object using a constructor that receives an incoming reference to a <b>Comparator</b>
object, in which case it is not necessary for the objects in the collection
to implement the <b>Comparable</b> interface.
<p><b><font color="#FF0000">Using a Comparator object</font></b>
<p>The program in Listing 1 takes this latter approach.&nbsp; The main
purpose of this program is to illustrate the use of a <b>Comparator</b>
object as an alternative to implementation of the <b>Comparable</b> interface.
<p><b><font color="#FF0000">Passing Comparator to TreeSet constructor</font></b>
<p>The code fragment in Listing 2 shows the instantiation of a new <b>TreeSet</b>
object, passing an anonymous object of type <b>TheComparator</b> as a parameter
to the constructor for <b>TreeSet</b>.&nbsp; Shortly, we will see that
the class named <b>TheComparator</b> implements the <b>Comparator</b> interface.&nbsp;
Therefore, an object instantiated from that class is a <b>Comparator</b>
object.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp; ref = new <b>TreeSet</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new <b>TheComparator</b>());
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Passing the TreeSet to a populator method</font></b>
<p>The code fragment in Listing 2 also shows the reference to the <b>TreeSet</b>
object being stored in a reference variable of the interface type <b>Collection</b>.
The reference to the <b>TreeSet</b> object is passed as type <b>Collection</b>
to a method named <b>fillIt</b>.
<p>The purpose of the <b>fillIt</b> method is to instantiate some objects
of type <b>MyClass</b>, and to store those object references in the <b>TreeSet</b>
collection.
<p><b><font color="#FF0000">The fillIt method</font></b>
<p>The code fragment in Listing 3 shows the entire method named <b>fillIt</b>.&nbsp;
This method instantiates five objects from the class named <b>MyClass</b>
and adds the references to those objects to the <b>TreeSet</b> collection.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(3));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(2));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(1));
&nbsp; }//end fillIt()
}//end class populator

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Similar to previous program</font></b>
<p>This is essentially the same code that we saw in a sample program in
a previous lesson.&nbsp; In that lesson, we saw that it was necessary for
the class named <b>MyClass</b> to implement the <b>Comparable</b> interface.&nbsp;
Otherwise, the <b>add</b> method would throw a runtime exception.
<p><b><font color="#FF0000">MyClass does not implement Comparable</font></b>
<p>In that program, however, the <b>TreeSet</b> object was instantiated
without benefit of a <b>Comparator</b> object.
<p>As you can see in the code fragment in Listing 4, the class named <b>MyClass</b>
does not implement the <b>Comparable</b> interface.
<p><b><font color="#FF0000">Comparator eliminates requirement for Comparable</font></b>
<p>Furthermore, the <b>add</b> method in Listing 3 does not throw a runtime
exception.&nbsp; That is because the <b>TreeSet</b> object was instantiated
with the benefit of a <b>Comparator</b> object.
<p>The use of a <b>Comparator</b> object in the instantiation of the <b>TreeSet</b>
object eliminates the requirement for objects stored in the <b>TreeSet</b>
collection to implement the <b>Comparable</b> interface.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class MyClass{
&nbsp; int data;
&nbsp;&nbsp;
&nbsp; MyClass(){
&nbsp;&nbsp;&nbsp; data = 0;
&nbsp; }//end noarg constructor
&nbsp;&nbsp;
&nbsp; MyClass(int data){
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end parameterized constructor
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return "" + data;
&nbsp; }//end overridden toString()
}//end MyClass

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The class named TheComparator</font></b>
<p>That brings us to the class named <b>TheComparator</b> from which the
<b>Comparator</b>
object was instantiated and passed to the constructor for the <b>TreeSet</b>
object.&nbsp; The declaration for the class is shown in Listing 5.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements Comparator,Serializable{

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p>As you can see, the class named <b>TheComparator</b> implements both
the <b>Comparator</b> interface and the <b>Serializable</b> interface.
<p><b><font color="#FF0000">Implementing the Comparator interface</font></b>
<p>By implementing the <b>Comparator</b> interface, an object instantiated
from the class is eligible for being passed to the constructor for a <b>TreeSet</b>
object, which requires an incoming parameter of type <b>Comparator</b>.
<p><b><font color="#FF0000">Implementing the Serializable interface</font></b>
<p>Here is what Sun has to say about implementing the <b>Serializable</b>
interface:
<blockquote><i>"Note: It is generally a good idea for comparators to implement
java.io.Serializable, as they may be used as ordering methods in serializable
data structures (like TreeSet, TreeMap). In order for the data structure
to serialize successfully, the comparator (if provided) must implement
Serializable."</i></blockquote>
Since the <b>Serializable</b> interface doesn't declare any methods, implementing
the interface simply requires a declaration that the interface is being
implemented.
<p><b><font color="#FF0000">Methods of the Comparator interface</font></b>
<p>The <b>Comparator</b> interface declares the two methods listed below:
<p>public int <b>compare</b>(Object o1, Object o2)
<br>public boolean <b>equals</b>(Object obj)
<p>As is always the case when implementing interfaces, a class that implements
the <b>Comparator</b> interface must provide concrete definitions for both
of these methods.
<p><b><font color="#FF0000">The compare method</font></b>
<p>The code fragment in Listing 6 shows the beginning of the <b>compare</b>
method.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int <b>compare</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof MyClass))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof MyClass))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p>The purpose of a <b>Comparator</b> is to compare the values stored in
the instance variables of two objects and to return a value indicating
which object is <i>greater</i>.
<p><b><font color="#FF0000">Specialization is required</font></b>
<p>Generally speaking, therefore, a <b>Comparator</b> object must be specialized
to deal with a particular type of object.&nbsp; That type could be
<ul>
<li>
A specific class from which the object is instantiated,</li>

<li>
A specific interface implemented by the class from which the object is
instantiated, or perhaps</li>

<li>
A specific superclass of the class from which the object is instantiated.</li>
</ul>
<b><font color="#FF0000">Must gain access to instance variables</font></b>
<p>Regardless of how the type is established, the code in the <b>compare</b>
method of the <b>Comparator</b> object must gain access to the instance
variables of the two objects passed to the <b>compare</b> method as type
<b>Object</b>.&nbsp;
This normally requires that a downcast be performed on the incoming object
references.
<p><b><font color="#FF0000">Specialized for type MyClass</font></b>
<p>This <b>Comparator</b> is specialized to compare two objects of the
class named <b>MyClass</b>.&nbsp; The first two statements in Listing 6
above confirm that both of the incoming objects are of type <b>MyClass</b>.&nbsp;
If either object is not of that type, an exception is thrown.
<p><b><font color="#FF0000">General behavior of compare method</font></b>
<p>The general description of the behavior of the <b>compare</b> method
as provided by Sun is shown below:
<blockquote><i>"Compares its two arguments for order. Returns a negative
integer, zero, or a positive integer as the first argument is less than,
equal to, or greater than the second."</i></blockquote>
<b><font color="#FF0000">Implementation of required behavior</font></b>
<p>This behavior is accomplished by the code shown in Listing 7.&nbsp;
In this case, the comparison is based solely on the values of the instance
variable named <b>data</b> in each of the two objects.
<p>Depending on which object contains the larger value in its instance
variable, a value of 1 or -1 is returned.&nbsp; If the two values are equal,
a value of 0 is returned.&nbsp; <i>(Note that it is up to the author of
the <b>compare</b> method to decide what constitutes larger.&nbsp; This
gives the author of the method a great deal of control over the results
of a sorting operation.)</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; if(((MyClass)o1).data&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt; ((MyClass)o2).data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -1;
&nbsp;&nbsp;&nbsp; if(((MyClass)o1).data&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; > ((MyClass)o2).data)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 1;
&nbsp;&nbsp;&nbsp; else return 0;
&nbsp; }//end compare()

<b><font face="Courier New,Courier">Listing 7</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Other stipulations</font></b>
<p>The documentation for the <b>compare</b> method contains several other
stipulations regarding the behavior of the method.&nbsp; While I believe
that this version of the <b>compare</b> method meets all of those stipulations,
I haven't taken the time to test it fully.&nbsp; Therefore, it is possible
that it may not meet all of the stipulations in terms of its behavior.
<p><b><font color="#FF0000">The equals method</font></b>
<p>Every new class inherits a default version of the <b>equals</b> method
from the class named <b>Object.&nbsp; </b>Therefore, a new class that implements
the <b>Comparator</b> interface already has such a method.&nbsp; The new
class is free to override the inherited version, or to simply make use
of the inherited version.&nbsp; Here is what Sun has to say on the subject:
<blockquote><i>"Note that it is always safe not to override Object.equals(Object).
However, overriding this method may, in some cases, improve performance
by allowing programs to determine that two distinct Comparators impose
the same order."</i></blockquote>
<b><font color="#FF0000">Overridden equals method</font></b>
<p>I decided, for purposes of illustration, to go ahead and override the
<b>equals</b>
method.&nbsp; However, my overridden version, as shown in Listing 8 isn't
very significant.&nbsp; It simply confirms that an object being compared
for equality to a <b>Comparator</b> object is instantiated from the same
class.
<p>Since the <b>Comparator</b> object doesn't contain any instance variables,
there isn't much more to be tested for equality.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public boolean equals(Object o){
&nbsp;&nbsp;&nbsp; if(!(o instanceof TheComparator))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
&nbsp;&nbsp;&nbsp; else return true;
&nbsp; }//end overridden equals()
}//end class TheComparator

<b><font face="Courier New,Courier">Listing 8</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The program output</font></b>
<p>Finally, the code shown in Listing 9 is used with an <b>Iterator</b>
to display the contents of the populated <b>TreeSet</b> object.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next());
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 9</font></b></pre>
</td>
</tr>
</table>

<p>The output produced by this code fragment is shown below.
<p><b>1234</b>
<p>As you can see, the duplicate elements having the value 4 were eliminated
as would be expected for a <b>Set</b> object.&nbsp; In addition, the <b>Comparator</b>
was used to accomplish the following contract of a <b>SortedSet</b> object:
<blockquote><i>"A set that further guarantees that its iterator will traverse
the set in ascending element order, sorted according to the natural ordering
of its elements (see Comparable), or by a Comparator provided at sorted
set creation time."</i></blockquote>
In this case, the sorted order was controlled by the <b>Comparator</b>
object, and not by the <i>natural ordering</i> of the elements.&nbsp; The
<i>natural
ordering</i> is controlled by implementation of the <b>Comparable</b> interface,
and the elements in this collection did not implement the <b>Comparable</b>
interface.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">This lesson has discussed and illustrated the use
of the <b>Comparator</b> interface.</font>
<p><font color="#000000">The sorting order established by a <b>Comparator</b>
may be different or may be the same as the <i>natural ordering</i> for
a collection of objects<i>.</i></font>
<p><font color="#000000">A <b>Comparator</b> can be used to establish a
sorting order for objects that don't have a <i>natural ordering</i>.</font>
<p><font color="#000000">The use of a <b>Comparator</b> is an alternative
to the implementation of the <b>Comparable</b> interface.</font>
<p><font color="#000000">A <b>TreeSet</b> object instantiated with the
benefit of a <b>Comparator</b> object doesn't require the objects in its
collection to implement <b>Comparable</b>.</font>
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will illustrate the use of a <b>Comparator</b> to
eliminate the effect of case when sorting <b>String</b> objects.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
