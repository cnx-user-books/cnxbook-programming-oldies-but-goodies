<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Properties, Events, and Methods</h2></center>
<b><i>By Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 1010
<p>August 7, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#JavaBean Component Design Patterns">JavaBean Component Design
Patterns</a></li>

<li>
<a href="#JComponent Properties">JComponent Properties</a></li>

<li>
<a href="#Container and Component Properties">Container and Component Properties</a></li>

<li>
<a href="#Property Names">Property Names</a></li>

<li>
<a href="#JComponent Events">JComponent Events</a></li>

<li>
<a href="#Container and Component Events">Container and Component Events</a></li>

<li>
<a href="#Exposed Methods of JComponent">Exposed Methods of JComponent</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to really understand what
Swing is all about.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is recommended that in addition to studying this set of lessons,
you also study my earlier lessons on Swing.&nbsp; A list of some of my
Swing lessons can be found in an earlier <a href="Java1005.htm#titles">lesson</a>
in this series.&nbsp; Links to the lessons themselves can be found at
<i>Baldwin's
Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p>The earlier lessons will introduce you to the use of Swing while avoiding
much of the detail included in this series.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<font color="#000000">One of the most important things that we can do to
understand all of Swing is to learn about the <i>properties</i>, <i>events</i>,
and
<i>methods</i> that Swing components inherit from the class named <b>JComponent</b>
and its superclasses, <b>Container</b>, <b>Component</b>, and <b>Object</b>.</font>
<p><b><font color="#FF0000">Apply to Swing components as a group</font></b>
<p><font color="#000000">This is important because most Swing components
extend <b>JComponent</b> either directly or indirectly.&nbsp; Thus, these
properties, events, and methods apply to most of the components in Swing.&nbsp;
We can learn about them as a group instead of having to learn about them
on an individual component basis.</font>
<p><b><font color="#FF0000">Each component can have other properties, events,
and methods</font></b>
<p><font color="#000000">In addition, individual Swing components can have
other properties, events, and methods defined in subclasses of <b>JComponent</b>.&nbsp;
We will deal with those properties, events, and methods on an individual
component basis later in this series of lessons.</font>
<p><b><font color="#FF0000">Lesson will identify properties, events, and
methods</font></b>
<p><font color="#000000">This lesson will identify the properties, events,
and methods that Swing components inherit from <b>JComponent</b> and its
superclasses.&nbsp; Subsequent lessons will discuss and illustrate many
of them.</font>
<center>
<h2>
<a NAME="JavaBean Component Design Patterns"></a><font color="#000000">JavaBean
Component Design Patterns</font></h2></center>
<font color="#000000">We can use JavaBean Component <i>design patterns</i>
to identify properties, events, and methods of Swing components because
Swing components are JavaBean Components.</font>
<p><b><font color="#FF0000">Explained design patterns in earlier lessons</font></b>
<p><font color="#000000">I'm not going to explain design patterns here,
because my earlier lessons on JavaBeans provide a complete explanation
of design patterns.&nbsp; Rather, I am simply going to use design patterns
to identify and list the properties, events, and methods of <b>JComponent</b>
and its superclasses.</font>
<p><font color="#000000">If you are not familiar with Design Patterns in
JavaBeans, see my earlier lessons on beans, which you will find at </font><i>Baldwin's
Java Programming Tutorials</i><font color="#000000">.</font>
<center>
<h2>
<a NAME="JComponent Properties"></a><font color="#000000">JComponent Properties</font></h2></center>
<font color="#000000">The properties defined in the <b>JComponent</b> class
and its superclasses are important because they define the <i>default behavior
and appearance</i> of most Swing components.</font>
<p><font color="#000000"><a href="Java1010-fig01.htm">Figure 1</a> shows
the accessor methods for the properties that are defined in the <b>JComponent</b>
class.</font>
<p><b><font color="#FF0000">Inherited by most Swing components</font></b>
<p><font color="#000000">The properties in <a href="Java1010-fig01.htm">Figure
1</a> are inherited by most Swing components.</font>
<p><b><font color="#FF0000">Some are shown in red</font></b>
<p><font color="#000000">A few of the properties are shown in red in <a href="Java1010-fig01.htm">Figure
1</a>.&nbsp; The properties shown in red are not defined in <b>JComponent</b>,
but rather are inherited from the <b>Component</b> class.&nbsp; They are
included in <a href="Java1010-fig01.htm">Figure 1</a> for completeness.&nbsp;
In each case, they form the other half of a <i>setter-getter</i> method
pair.&nbsp; (See my earlier lessons on JavaBeans if the <i>setter-getter</i>
terminology is new to you.)</font>
<center>
<h2>
<a NAME="Container and Component Properties"></a><font color="#000000">Container
and Component Properties</font></h2></center>
<a href="Java1010-fig02.htm">Figure 2</a> shows the accessor methods for
the properties defined in the <b>Container</b> and <b>Component</b> classes
that are not overridden in the <b>JComponent</b> class.&nbsp; <b>Container</b>
properties are shown in blue.&nbsp; <b>Component</b> properties are shown
in red.
<p><b><font color="#FF0000">Also inherited by Swing components</font></b>
<p>Because <b>JComponent</b> extends <b>Container</b>, which extends <b>Component</b>,
most of the Swing components inherit these properties as well.&nbsp; Hence,
these properties also <font color="#000000">define the default behavior
and appearance of most Swing components.</font>
<center>
<h2>
<a NAME="Property Names"></a><font color="#000000">Property Names</font></h2></center>
<font color="#000000">Although this isn't too important for this context,
it might be useful for you to know how JavaBean design patterns define
the names of properties.</font>
<p><b><font color="#FF0000">Name is based on name of method</font></b>
<p><font color="#000000">The official name of a property is that portion
of the name of the accessor method following <i>set</i>, <i>get</i>, or
<i>is</i>,
with the case of the first character changed to lower case.&nbsp; (There
are also some special cases involving upper case and lower case that I
won't discuss here.)</font>
<p><b><font color="#FF0000">A property named <i>visible</i></font></b>
<p><font color="#000000">For example, the following two accessor methods
refer to a property named <b>visible</b>.</font>
<ul>
<li>
<font face="Arial Narrow"><font color="#000000"><font size=-1>boolean <b>isVisible</b>()</font></font></font></li>

<li>
<font face="Arial Narrow"><font color="#000000"><font size=-1>void <b>setVisible</b>(boolean
aFlag)</font></font></font></li>
</ul>
<font color="#000000">You can call the first method to read the current
value of the property, and you can call the second method to write a new
value into the property.</font>
<center>
<h2>
<a NAME="JComponent Events"></a><font color="#000000">JComponent Events</font></h2></center>
<font color="#000000">Another important aspect of the default behavior
of most swing components is the set of standard event types that they can
multicast.</font>
<p><b><font color="#FF0000">Default event types identified in JComponent
and its superclasses</font></b>
<p><font color="#000000">The default event types are defined by the <b>JComponent</b>,
<b>Container</b>,
and <b>Component</b> classes.&nbsp; Other event types that are specific
to individual Swing components may be defined in subclasses of <b>JComponent</b>.</font>
<p><b><font color="#FF0000">Event types match registration methods</font></b>
<p><font color="#000000">We can identify the default event types by identifying
the event registration methods in the <b>JComponent</b>, <b>Container</b>,
and <b>Component</b> classes.&nbsp; These registration methods are inherited
by most Swing components.</font>
<p><b><font color="#FF0000">Registration method names</font></b>
<p><font color="#000000">According to JavaBean design patterns, the type
of the event can be identified by the word(s) appearing between <i>add
</i>and
<i>Listener</i>
in the name of the registration method.</font>
<p><b><font color="#FF0000">A PropertyChange event</font></b>
<p><font color="#000000">For example, the existence of a registration method
named <b><i>add</i>PropertyChange<i>Listener()</i></b> indicates the ability
to multicast an event of the <b>PropertyChangeEvent</b> class.</font>
<p><font color="#000000">The method name also indicates the availability
of an interface named <b>PropertyChangeListener</b>.&nbsp; This interface
must be implemented by classes from which listener objects for this type
of event are instantiated.</font>
<p><b><font color="#FF0000">JComponent events</font></b>
<p><font color="#000000"><a href="Java1010-fig03.htm">Figure 3</a> shows
the event registration methods that are defined in the <b>JComponent</b>
class.</font>
<p><font color="#000000">Because most Swing components extend this class,
they are able to multicast events of these types.</font>
<center>
<h2>
<a NAME="Container and Component Events"></a><font color="#000000">Container
and Component Events</font></h2></center>
<font color="#000000"><a href="Java1010-fig04.htm">Figure 4</a> shows the
event types for which registration methods are defined in the <b>Container</b>
and <b>Component</b> classes.</font>
<p><font color="#000000">Because most Swing components extend these classes
indirectly, they are able to multicast events of these types also.</font>
<p><font color="#000000">Events defined in the <b>Container</b> class are
shown in blue.&nbsp; Events defined in the <b>Component</b> class are shown
in red.</font>
<p><b><font color="#FF0000">Events familiar to AWT programmers</font></b>
<p><font color="#000000">If you are already familiar with the use of event-driven
programming using the Delegation Event Model and the AWT, you should already
be familiar with all but one of these event types.&nbsp; (If not, see my
tutorial lessons on the <i>Delegation Event Model</i>.)</font>
<p><b><font color="#FF0000">One new event type</font></b>
<p><font color="#000000">The one event type that may not be familiar to
you is the <b>InputMethod</b> event.</font>
<p><font color="#000000">According to one of my favorite authors, David
Flanagan, <i>"Application-level code should never have to use this class."</i></font>
<p><font color="#000000">He also states <i>"Application-level code should
never have to use or implement this interface."</i></font>
<p><font color="#000000">If you would like to know more about his reasoning,
see his book entitled <i>Java Foundation Classes in a Nutshell</i>, published
by O'Reilly.</font>
<center>
<h2>
<a NAME="Exposed Methods of JComponent"></a><font color="#000000">Exposed
Methods of JComponent</font></h2></center>
<font color="#000000">In addition to the default behavior provided by properties
and events, default behavior for many swing components is also established
by the public methods of the <b>JComponent</b> class and its superclasses.</font>
<p><b><font color="#FF0000">Swing components have this behavior unless
they override</font></b>
<p><font color="#000000">All Swing components that extend <b>JComponent</b>
either directly or indirectly will exhibit this default behavior unless
they override the methods to provide behavior that is more appropriate
for those components.</font>
<p><font color="#000000"><a href="Java1010-fig05.htm">Figure 5</a> lists
the <b>public</b> methods of the class <b>JComponent</b> that are not included
in one of the previous lists.&nbsp; These are the public methods of the
<b>JComponent</b>
class that are not accessor methods for properties, and are not registration
methods for events.</font>
<p><b><font color="#FF0000">Exposed methods</font></b>
<p><font color="#000000">Many Swing components expose the methods in <a href="Java1010-fig05.htm">Figure
5</a> to the outside world as a result of extending the <b>JComponent</b>
class.</font>
<p><b><font color="#FF0000">JavaBean introspection</font></b>
<p><font color="#000000">For example, these are the methods that a JavaBeans
<i>introspection</i>
process (based on <i>design patterns</i>) would consider available for
invocation by other beans.</font>
<p><b><font color="#FF0000">Some are overridden methods</font></b>
<p><font color="#000000">Some of the methods in <a href="Java1010-fig05.htm">Figure
5</a> are overridden versions of methods originally defined in <b>Container</b>,
<b>Component</b>,
or <b>Object</b>.&nbsp;&nbsp; They have been overridden to cause their
behavior to be more appropriate for Swing components.</font>
<p><b><font color="#FF0000">Others are new methods</font></b>
<p><font color="#000000">Other methods in <a href="Java1010-fig05.htm">Figure
5</a> are new methods designed to provide new behavior for Swing components.</font>
<p><b><font color="#FF0000">Some will be overridden later</font></b>
<p><font color="#000000">Some of the methods in <a href="Java1010-fig05.htm">Figure
5</a> are overridden further down the inheritance hierarchy in the classes
from which specific Swing components are instantiated.&nbsp; In those cases,
they are overridden to make the behavior more appropriate for those specific
components.</font>
<p><b><font color="#FF0000">Those not overridden define default behavior</font></b>
<p><font color="#000000">However, many of them are not overridden, and
those that are not overridden define default behavior for many Swing components.</font>
<p><b><font color="#FF0000">Numerous other methods are inherited also</font></b>
<p><font color="#000000">There are numerous other methods that Swing components
inherit from <b>Container</b>, <b>Component</b>, and <b>Object</b> and
expose to the outside world.&nbsp; However, since they are not specific
to Swing, I haven't listed them here.</font>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
The primary purpose of this lesson has been to provide reference information
in summary form on Swing <i>properties</i>, <i>events</i>, and <i>methods</i>.
<p><b><font color="#FF0000">Will use in subsequent lessons</font></b>
<p>This information will be used in subsequent lessons that discuss appearance
and behavior that is common to many Swing components.
<p><b><font color="#FF0000">Useful to understand common behavior</font></b>
<p>It is useful to understand the appearance and behavior that is common
to many Swing components before getting into the details of appearance
and behavior that are specific to individual components.
<p>Learning the common behaviors first can greatly accelerate the learning
process.
<p><b><font color="#FF0000">Sun documentation is the final authority</font></b>
<p>Please note that all of this information was extracted from the documentation
for JDK 1.2.2 from Sun.
<p>Extracting the information was a tedious process, and it is possible
that I may have made some mistakes.
<p>In the event of any conflict between what I have presented here and
the Sun documentation, you should consider the Sun documentation to be
the final authority.
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
The next several lessons will discuss and illustrate some of the common
Swing properties, events, and methods listed above.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
