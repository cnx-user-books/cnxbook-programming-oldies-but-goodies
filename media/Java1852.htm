<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#dd0000" vlink="#0000ff" alink="#ff0000" lang="EN-US">
<h2>
Programmatic Focus Traversal in Java V1.4</h2>
<i>Baldwin shows you three different ways to control the focus
programmatically with Java V1.4.</i>
<p><b>Published:</b>&nbsp; October 7, 2003<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 1852</p>
<ul>
  <li>
    <a href="#Preface">Preface</a></li>
  <li>
    <a href="#Preview">Preview</a></li>
  <li>
    <a href="#Discussion%20and%20Sample%20Programs">Discussion and
Sample Code</a></li>
  <li>
    <a href="#Run%20the%20program">Run the Program</a></li>
  <li>
    <a href="#Summary">Summary</a></li>
  <li>
    <a href="#Whats%20Next">What's Next?</a></li>
  <li>
    <a href="#Complete%20Program%20Listings">Complete Program Listing</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2><a name="Preface"></a>Preface</h2>
</center>
<p>
<b><font color="#ff0000">New features in SDK Version 1.4.0</font></b> </p>
<p>The recently released Java<sup>TM</sup> 2 SDK, Standard Edition
Version 1.4 contains a large number of new features, including many
changes and additions to the focus subsystem.&nbsp; This lesson is part
of a series of lessons designed to teach you how to use the new
features of the focus subsystem in Java Version 1.4 and later.</p>
<p>The first lesson in the series was entitled <a
 href="http://www.developer.com/java/other/article.php/2198221">Focus
Traversal Policies in Java Version 1.4</a>.&nbsp; The previous lesson
was entitled <a
 href="http://www.developer.com/java/other/article.php/2244591">Changing
Focus Traversal Keys in Java V1.4</a>.</p>
<p><font color="#ff0000"><b>Previous topics</b></font></p>
<p>Previous lessons have dealt with several aspects of the new focus
subsystem, including:</p>
<ul>
  <li>Defining new focus traversal keys</li>
  <li>How to control focusability at runtime.</li>
  <li>The ability to query for the currently focused Component.</li>
  <li>The default Focus Traversal Policy.</li>
  <li>How to establish a focus traversal policy and modify it at
runtime.</li>
</ul>
<p>This lesson deals with writing program code to control the
focus.&nbsp; </p>
<p>
<b><font color="#ff0000">Viewing tip</font></b>
</p>
<p>You may find it useful to open another copy of this lesson in a
separate
browser window.&nbsp; That will make it easier for you to scroll back
and
forth among the different listings and figures while you are reading
about
them.
</p>
<p><b><font color="#ff0000">Supplementary material</font></b>
</p>
<p>I recommend that you also study the other lessons in my extensive
collection
of online Java tutorials.&nbsp; You will find those lessons published
at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a
consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at <font
 color="#000000">
<a href="http://www.DickBaldwin.com">www.DickBaldwin.com</a>.</font> </p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>In this lesson, I will show you three different ways to control the
focus programmatically.&nbsp; One way will cause the focus to traverse
components according to the focus traversal policy, relative to the
current focus owner.</p>
<p>The second way will cause the focus to traverse components according
to the focus traversal policy, but relative to a specified
component.&nbsp; I will show you two different ways to accomplish this.</p>
<p>The third way will cause a specified component to gain the focus.</p>
<center>
<h2><a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Code</font></h2>
</center>
<p><font color="#ff0000"><b>Focus traversal</b></font></p>
<p>Sun defines focus traversal as <i>"the user's ability to change the
"focus owner" without moving the cursor."</i></p>
<p>Focus traversal can normally be either <i>forward</i> to the next
component, or <i>backward</i> to the previous component.</p>
<p><font color="#ff0000"><b>Traversal typically uses keys</b></font></p>
<p>Typically, focus traversal is accomplished using one or more keys on
the keyboard.&nbsp; For example, it is very common for the TAB key to
be used to move the focus along its traversal path in the <i>forward</i>
direction, and for the Shift-TAB key combination to be used to move the
focus along its traversal path in the<i> backward </i>direction.</p>
<p><font color="#ff0000"><b>Keyboard is not required</b></font></p>
<p>However, keyboard action isn't always required.&nbsp; It is also
possible for program code to initiate traversal through the execution
of program instructions.&nbsp; That is the primary topic of this lesson.</p>
<p><font color="#ff0000"><b>FocusTraversalPolicy</b></font></p>
<p>The AWT focus
implementation determines which component to focus next based on the <b>FocusTraversalPolicy</b>
of the focus owner's focus cycle root.&nbsp; <i>(The <b>FocusTraversalPolicy</b>
was the subject of a previous lesson.)</i></p>
<p><font color="#ff0000"><b>Description of the program</b></font></p>
<p>This lesson presents a program named <b>FocusTraversal02</b> that
illustrates three different ways to control the focus programmatically.</p>
<p><font color="#ff0000"><b>The graphical user interface</b></font></p>
<p>The program displays the graphical user interface (GUI) shown in
Figure 1.</p>
<p align="center"><img border="0" src="java1852a.gif" width="251"
 height="101"></p>
<p align="center">Figure 1.&nbsp; Sample program user interface.</p>
<p><font color="#ff0000"><b>The numbers on a clock</b></font></p>
<p>
A single <b>JFrame</b> object appears on the screen.&nbsp; Four <b>JButton</b>
objects appear at the North, South, East, and West locations in the
frame.&nbsp; The buttons display the captions 03, 06, 09, and 12.</p>
<blockquote>
  <p><i>&nbsp;(The positions of the buttons with their captions mimic
four of the numbers on a clock.)</i></p>
</blockquote>
<p>
<font color="#ff0000"><b>Three JLabel objects</b></font></p>
<p>Three <b>JLabel</b> objects with labels A, B, and C appear in the
center of the frame.</p>
<p><font color="#ff0000"><b>Keyboard-generated focus traversal</b></font></p>
<p>When the program first starts running, the button with the caption
12 has the focus.</p>
<p>Successively pressing the TAB key causes the focus to traverse the
buttons in a clockwise direction:&nbsp; 12, 03, 06, 09 and back to 12.</p>
<p>Holding down the Shift key and successively pressing the TAB key
causes the focus to traverse the buttons in a counter-clockwise
direction:&nbsp; 12, 09, 06, 03, and back to 12.</p>
<blockquote>
  <p><i>(The traversal path described above illustrates the use of a
custom focus traversal policy, which was discussed in an earlier
lesson.)</i></p>
</blockquote>
<p>
<font color="#ff0000"><b>Programmatic focus traversal</b></font></p>
<p>This program also supports programmatic focus traversal based on
mouse clicks.&nbsp; Successively clicking the A in the center of the
frame <i>(see Figure 1)</i> causes the same traversal result as
successively pressing the TAB key.</p>
<p>Holding down the Shift key and successively clicking the A causes
the same result as holding down the Shift key and successively pressing
the TAB key.</p>
<p>In other words, the result of clicking the letter A replicates the
pressing of the TAB key.&nbsp; This illustrates programmatic focus
traversal.</p>
<p><font color="#ff0000"><b>Moving the focus to a specific component</b></font></p>
<p>Clicking the letter B causes the button with the 12 to gain the
focus.</p>
<p><font color="#ff0000"><b>Traversal relative to a specific component</b></font></p>
<p>The result of clicking the letter C is somewhat more difficult to
explain.&nbsp; This causes the next component following the button with
the 12 in the focus traversal policy
<i>(the button with the 03)</i> to gain the focus.</p>
<p>Holding down the Shift key and clicking the letter C causes the
previous component before the button with the 12 in the focus traversal
policy
<i>(the button with the 09)</i> to gain the focus.</p>
<p>In other words, clicking the letter C causes the same behavior that
would occur from pressing the TAB key when the button with the 12
already has the focus.</p>
<p><font color="#ff0000"><b>Requires Version 1.4 or later</b></font></p>
<p>This program requires SDK V1.4 or later.&nbsp; It was tested using
SDK 1.4.1 under WinXP</p>
<p><font color="#ff0000"><b>Will discuss sample program in fragments</b></font></p>
<p>As is my habit, I will discuss the program in fragments.&nbsp; A
complete listing of the program is provided in Listing 12 near the end
of the lesson.</p>
<p><font color="#ff0000"><b>Get a GUI object</b></font></p>
<p>Listing 1 shows the <b>main</b> method, which simply instantiates a
new object of the GUI class.&nbsp; The graphical user interface shown
in Figure 1 is a visual manifestation of that object.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>public class <b>FocusTraversal02</b> {<br>  public static void <b>main</b>(String[] args){<br>    new <b>GUI</b>();<br>  }//end main<br>}//end class FocusTraversal02<br><br><b><font
 face="Courier New,Courier">Listing 1</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>
<font color="#ff0000"><b>The GUI class</b></font></p>
<p>Listing 2 shows the beginning of the <b>GUI</b> class, including
the declaration of several instance variables.&nbsp; The purpose of
these instance variables will be become clear as the discussion
progresses.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>class GUI extends JFrame{<br>  JLabel labelA = new JLabel(" A ");<br>  JLabel labelB = new JLabel(" B ");<br>  JLabel labelC = new JLabel(" C ");<br>  JPanel panel = new JPanel();<br>  JButton button12 = new JButton("12");<br>  JButton button03 = new JButton("03");<br>  JButton button06 = new JButton("06");<br>  JButton button09 = new JButton("09");<br>  JFrame frame = this;<br><br><b><font
 face="Courier New,Courier">Listing 2</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#ff0000"><b>The constructor</b></font></p>
<p>
Listing 3 shows the beginning of the constructor for the <b>GUI</b>
class.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  public GUI(){//constructor<br>    setSize(250,100);<br>    setTitle("Copyright 2003, R.G.Baldwin");<br>    setDefaultCloseOperation(<br>                           JFrame.EXIT_ON_CLOSE);<br><br>    getContentPane().add(button12,"North");<br>    getContentPane().add(button03,"East");<br>    getContentPane().add(button06,"South");<br>    getContentPane().add(button09,"West");<br>    panel.add(labelA);<br>    panel.add(labelB);<br>    panel.add(labelC);<br>    getContentPane().add(panel);<br><br><b><font
 face="Courier New,Courier">Listing 3</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>
All of the code in Listing 3 is straightforward, so I won't discuss it
further.&nbsp; If you are unfamiliar with this code, see the other
lessons on my
<a href="http://www.dickbaldwin.com">web site</a>.</p>
<p><font color="#ff0000"><b>The focus traversal policy</b></font></p>
<p>Listing 4 shows an abbreviated version of an inner class from which
a <b>FocusTraversalPolicy</b> object will be instantiated to control
the focus traversal policy for the frame.
<i>(You can view this class definition in its entirety in Listing 12
near the end of this lesson.)</i></p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    class TrvslPolicy<br>                    extends FocusTraversalPolicy{<br><br>      //code deleted for brevity<br><br>    }//end TrvslPolicy<br><br><b><font
 face="Courier New,Courier">Listing 4</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>
I discussed a class very similar to this one in the lesson entitled
entitled <a
 href="http://www.developer.com/java/other/article.php/2198221">Focus
Traversal Policies in Java Version 1.4</a>, so I won't discuss this
class further in this lesson.</p>
<p>A focus traversal policy based on this class causes the focus to
traverse the buttons in Figure 1 in a clockwise manner.</p>
<p><font color="#ff0000"><b>Set the focus traversal policy</b></font></p>
<p>Continuing with the constructor, the code in Listing 5 uses the
inner class defined above to establish the focus traversal policy for
the frame.&nbsp; The code in Listing 5 also makes the frame visible.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    final TrvslPolicy policy = new TrvslPolicy();<br>    frame.setFocusTraversalPolicy(policy);<br><br>    frame.setVisible(true);<br><br><b><font
 face="Courier New,Courier">Listing 5</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Now for the new and interesting material</b></font></p>
<p>The next several code fragments will register mouse listeners on the
labels showing A, B, and C in the center of Figure 1, to provide the
programmatic focus traversal behavior described earlier.</p>
<p>
<font color="#ff0000"><b>A mouse listener on the label with an A</b></font></p>
<p>
The code in Listing 6 uses an anonymous inner class to define,
instantiate, and register a mouse listener on the label showing the A
in the center of the frame in Figure 1.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    labelA.addMouseListener(<br>      new MouseAdapter(){<br>        public void <b>mousePressed</b>(MouseEvent e){<br>          int <b>shift</b> = e.getModifiersEx() &amp;<br>                      InputEvent.SHIFT_DOWN_MASK;<br><br><b><font
 face="Courier New,Courier">Listing 6</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>
The purpose of this mouse listener is to replicate the focus traversal
behavior of the TAB key when the user clicks on the A.&nbsp; </p>
<blockquote>
  <p><i>(Recall that the focus traversal behavior of the TAB key
depends or whether or not the user is holding down the Shift key when
the TAB key is pressed.)</i></p>
</blockquote>
<p>
<font color="#ff0000"><b>Get the Shift key state</b></font></p>
<p>Listing 6 shows the beginning of the definition of the <b>mousePressed</b>
event handler method.&nbsp; The code in Listing 6 gets and saves an <b>int</b>
value that can be used to determine if the Shift key was being held
down when the user clicked the label with the A.</p>
<blockquote>
  <p><i>(If the Shift key was not being held down, the value of <b>shift</b>
in Listing 6 will be zero.&nbsp; If the Shift key was being held down,
the value of
  <b>shift</b> will not be zero.)</i></p>
</blockquote>
<p>
<font color="#ff0000"><b>Focus next component</b></font></p>
<p>If the Shift key was not being held down, the code in Listing 7
causes the focus to move to the <b>next</b> component <i>(relative to
the current focus owner)</i> as specified by the focus traversal policy.</p>
<blockquote>
  <p><i>(This replicates the behavior of pressing the TAB key without
holding down the Shift key.)</i></p>
</blockquote>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>          if(shift == 0){<br>            KeyboardFocusManager.<br>                getCurrentKeyboardFocusManager().<br>                            <b>focusNextComponent()</b>;<br><br><b><font
 face="Courier New,Courier">Listing 7</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>
<font color="#ff0000"><b>The focusNextComponent method</b></font></p>
<p>This is accomplished by invoking the <b>focusNextComponent</b>
method of the <b>
KeyboardFocusManager</b> class.&nbsp; However, there is a little more
to it than that.&nbsp; This is not a <b>static</b> method.&nbsp;
Therefore, it is necessary to get access to the <b>KeyboardFocusManager</b>
object currently in effect.</p>
<p><font color="#ff0000"><b>What is the KeyboardFocusManager?</b></font></p>
<p>Here is part of what Sun has to say about the <b>KeyboardFocusManager</b>
class.</p>
<blockquote>
  <p><i>"The KeyboardFocusManager is responsible for managing the
active and focused Windows, and the current focus owner. The focus
owner is defined as the Component in an application that will typically
receive all KeyEvents generated by the user. ...</i></p>
  <p><i>The KeyboardFocusManager is both a centralized location for
client code to query for the focus owner and initiate focus changes,
and an event dispatcher for all FocusEvents, WindowEvents related to
focus, and KeyEvents."</i></p>
</blockquote>
<p>
<font color="#ff0000"><b>KeyboardFocusManager is an abstract class</b></font></p>
<p>You cannot instantiate an object of the <b>KeyboardFocusManager</b>
class because it is abstract.&nbsp; You probably wouldn't want to
anyway, because you wouldn't know how to assign the responsibilities
described in the above quotation to the new object.</p>
<p><font color="#ff0000"><b>The getCurrentKeyboardFocusManager method</b></font></p>
<p>However, the <b>KeyboardFocusManager</b> class provides a <b>static</b>
method named <b>getCurrentKeyboardFocusManager</b>, which, according
to Sun,</p>
<blockquote>
  <p><i>"Returns the current KeyboardFocusManager instance for the
calling thread's context."</i></p>
</blockquote>
<p>
<font color="#ff0000"><b>Focus next component</b></font></p>
<p>As you can see in Listing 7, this is what we need in order to invoke
the <b>
focusNextComponent</b> method and move the focus to the next component
specified by the focus traversal policy.</p>
<p><font color="#ff0000"><b>Focus previous component</b></font></p>
<p>Listing 8 shows the <b>else</b> clause of the <b>if-else</b>
statement that was begun in Listing 7.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>          }else{<br>            KeyboardFocusManager.<br>                getCurrentKeyboardFocusManager().<br>                        <b>focusPreviousComponent</b>();<br>          }//end else<br>        }//end mousePressed<br>      }//end new MouseAdapter<br>    );//end addMouseListener<br><br><b><font
 face="Courier New,Courier">Listing 8</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>
The code in Listing 8 is executed if the user was holding down the
Shift key when the label with the A was clicked.</p>
<p>In this case, the method named <b>focusPreviousComponent</b> is
invoked on the current keyboard focus manager.&nbsp; This causes the
focus to move to the component that appears before the current focus
owner in the focus traversal policy.</p>
<p>Again, this replicates the focus traversal behavior of holding down
the Shift key and pressing the TAB key.</p>
<p><font color="#ff0000"><b>The requestFocus method</b></font></p>
<p>Java has had a method named <b>requestFocus</b> since long before
the release of V1.4.&nbsp; However, here is part of what Sun has to say
about that method in the documentation for V1.4.</p>
<blockquote>
  <p><i>"Requests that this Component get the input focus, and that
this Component's top-level ancestor become the focused Window. ...</i></p>
  <p><i>Because the focus behavior of this method is
platform-dependent, developers are strongly encouraged to use <b>requestFocusInWindow</b>
when possible."</i></p>
</blockquote>
<p>
<font color="#ff0000"><b>The requestFocusInWindow method</b></font></p>
<p>
Here is part of what Sun has to say about the <b>requestFocusInWindow</b>
method.</p>
<blockquote>
  <p><i>"Requests that this Component get the input focus, if this
Component's top-level ancestor is already the focused Window. ...</i></p>
  <p><i>The focus behavior of this method can be implemented uniformly
across platforms, and thus developers are strongly encouraged to use
this method over <b>requestFocus</b> when possible."</i></p>
</blockquote>
<p>
<font color="#ff0000"><b>Request focus on the button with the 12</b></font></p>
<p>
The code in Listing 9 registers a mouse listener on the label showing
the B.&nbsp; The purpose of this listener is to move the focus to the
button in the twelve o'clock position in Figure 1 whenever the user
clicks on the label with the B.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    labelB.addMouseListener(<br>      new MouseAdapter(){<br>        public void mousePressed(MouseEvent e){<br>          button12.<b>requestFocusInWindow</b>();<br>        }//end mousePressed<br>      }//end new MouseAdapter<br>    );//end addMouseListener<br><br><b><font
 face="Courier New,Courier">Listing 9</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>
As you can see, the change in focus is accomplished by invoking the <b>
requestFocusInWindow</b> method on that button's reference whenever the
<b>
mousePressed</b> event handler method is executed.</p>
<p><font color="#ff0000"><b>Focus relative to a specified component</b></font></p>
<p>In addition to providing programmatic focus traversal relative to
the current focus owner, V1.4 also provides programmatic focus
traversal relative to a specified component, as though that component
were the current focus owner.</p>
<p>This is accomplished by invoking the following methods of the <b>
KeyboardFocusManager</b> class and specifying a component as a
parameter to the method.</p>
<ul>
  <li><span style="background-color: rgb(255, 255, 255);">focusNextComponent(Component)
    </span></li>
  <li><span style="background-color: rgb(255, 255, 255);">focusPreviousComponent(Component)
    </span></li>
</ul>
<p> <span style="background-color: rgb(255, 255, 255);">These methods
differ from the methods used in Listings 7 and 8 in that each of these
methods accepts a reference to a component as an incoming parameter.</span></p>
<p> <span style="background-color: rgb(255, 255, 255);">Each of these
methods initiates the traversal operation with the
specified component rather than with the current focus owner. The
traversal occurs as though the specified component is the current focus
owner.&nbsp; However, the specified component need not be the current
focus owner.</span></p>
<p><span style="background-color: rgb(255, 255, 255);"><font
 color="#ff0000">
<span style="font-weight: 700;">An alternative approach</span></font></span></p>
<p>
<span style="background-color: rgb(255, 255, 255);">The following
alternate but equivalent methods are defined in the <b>Component </b>class.</span></p>
<ul>
  <li><span style="background-color: rgb(255, 255, 255);">transferFocus()
    </span> </li>
  <li><span style="background-color: rgb(255, 255, 255);">transferFocusBackward()
    </span> </li>
</ul>
<p><span style="background-color: rgb(255, 255, 255);">As with the
methods of the <b>KeyboardFocusManager</b> class, each of these
methods
initiates the traversal operation as though the component on which the
method is invoked is the focus owner.&nbsp; Again, it is not necessary
that the component be the focus owner.</span></p>
<p><span style="background-color: rgb(255, 255, 255);">As you will see
in the upcoming fragments, these two methods require a little less
typing than the equivalent versions discussed above.</span></p>
<p>
<font color="#ff0000"><b>Focus relative to the label with the C</b></font></p>
<p>Listing 10 registers a mouse listener on the label with the C in the
center of the frame in Figure 1.&nbsp; This event handler initiates a
focus traversal operation relative to the button in the twelve o'clock
position in Figure 1, regardless of the current focus owner.</p>
<blockquote>
  <p><i>(The code in Listing 12 also shows the alternative, but
equivalent method that can be used to accomplish the focus traversal.)</i></p>
</blockquote>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    labelC.addMouseListener(<br>      new MouseAdapter(){<br>        public void mousePressed(MouseEvent e){<br>          int shift = e.getModifiersEx() &amp;<br>                      InputEvent.SHIFT_DOWN_MASK;<br>          if(shift == 0){<br>            KeyboardFocusManager.<br>                getCurrentKeyboardFocusManager().<br>                    <b>focusNextComponent(button12)</b>;<br>            //This is an alternative method<br><b>//          button12.transferFocus();</b>

<b><font face="Courier New,Courier">Listing 10</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>
<font color="#ff0000"><b>Shift key not being held down</b></font></p>
<p>The code in Listing 10 is executed whenever the user clicks on the
label with the C while not holding down the Shift key.&nbsp; This code
invokes the <b>
focusNextComponent(Component)</b> method of the <b>KeyboardFocusManager</b>
class, passing a reference to the button in the twelve o'clock position
as a parameter.</p>
<p>This causes the focus to move to the next component following that
button in the focus traversal policy <i>(the button at the three
o'clock position in Figure 1).</i></p>
<p><font color="#ff0000"><b>The alternative method</b></font></p>
<p>The alternative method for accomplishing the same thing is shown by
the last line in Listing 10, which has been turned into a
comment.&nbsp; Note that the alternative method requires considerably
less typing than the method that was actually used in Listing 10.</p>
<p><font color="#ff0000"><b>Shift key being held down</b></font></p>
<p>Listing 11 shows the code that is executed if the Shift key is being
held down when the user clicks the label with the C in the center of
the frame in Figure 1.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>          }else{<br>            //This is an alternative method<br>//          KeyboardFocusManager.<br>//              getCurrentKeyboardFocusManager().<br>//              focusPreviousComponent(button12);<br>            <b>button12.transferFocusBackward();</b>
          }//end else
        }//end mousePressed
      }//end new MouseAdapter
    );//end addMouseListener

  }//end constructor
}//end GUI


<b><font face="Courier New,Courier">Listing 11</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Both alternative methods are shown</b></font></p>
<p>Again, both of the alternative methods are shown in Listing
11.&nbsp; In this case, however the simpler method from the <b>Component</b>
class is used, and the method from the <b>KeyboardFocusManager</b>
class is turned into a comment.</p>
<p>In this case, the <b>transferFocusBackward</b> method is invoked on
the reference to the button at the twelve o'clock position in Figure
1.&nbsp; This causes the button immediately before the button at the
twelve o'clock position in the focus traversal policy <i>(the button
in the nine o'clock position in Figure 1)</i> to gain the focus.&nbsp; </p>
<p><font color="#ff0000"><b>End of constructor and class</b></font></p>
<p>The code in Listing 11 also signals the end of the constructor and
the end of the definition of the class named GUI.</p>
<center>
<h2><a name="Run the program"></a>Run the Program</h2>
</center>
<p>If you haven't already done so, I encourage you to copy the code
from Listing 12 into your text editor, compile it, and execute
it.&nbsp; Experiment with it, pressing buttons and keys, and observing
the results of your actions.<br>
</p>
<p>Remember, however, that you must be running Java version 1.4 or
later
to compile and execute this program.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I have taught you three different ways to implement
programmatic focus traversal in Java V1.4 or later.</p>
<h2 align="center"><a name="Whats Next">What's Next?</a></h2>
<p>Future lessons will discuss new focus features of version 1.4
including the following:</p>
<ul>
  <li>The KeyEventDispatcher interface</li>
  <li>The KeyEventPostProcessor interface</li>
  <li>FocusEvent and WindowEvent</li>
  <li>Event delivery</li>
  <li>Opposite components</li>
  <li>Temporary focus events</li>
  <li>Focus and PropertyChangeListener</li>
  <li>Focus and VetoableChangeListener </li>
</ul>
<center>
<h2><a name="Complete Program Listings"></a>Complete Program Listing</h2>
</center>
A complete listing of the program discussed in this lesson is shown in
Listing 12.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File FocusTraversal02.java<br>Copyright 2003 R.G.Baldwin<br><br>This program illustrates programmatic focus<br>traversal and control.<br><br>The behavior of this program is as follows:<br><br>A single JFrame object appears on the screen.<br>Four JButton objects appear at the North, South,<br>East, and West locations in the frame.  The<br>buttons display the captions 03, 06, 09, and 12.<br>(The positions of the buttons with their captions<br>mimic four of the numbers on a clock.)<br><br>Three JLabel objects with labels A, B, and C<br>appear in the center of the frame.<br><br>When the program first starts running, the<br>button with the caption 12 has the focus.<br><br>Successively pressing the TAB key causes the<br>focus to traverse the buttons in a clockwise<br>direction:  12, 03, 06, 09 and back to 12.<br><br>Holding down the Shift key and successively<br>pressing the TAB key causes the focus to traverse<br>the buttons in a counter-clockwise direction:<br>12, 09, 06, 03, and back to 12.<br><br>The above results illustrate the use of a custom<br>focus traversal policy.<br><br>Successively clicking the label with the A causes<br>the same result as successively pressing the TAB<br>key.<br><br>Holding down the Shift key and successively<br>clicking the label with the A causes the same<br>result as holding down the Shift key and<br>successively pressing the TAB key.<br><br>In other words, the result of clicking the label<br>with the letter A replicates the pressing of the<br>TAB key.  This illustrates programmatic focus<br>traversal.<br><br>Clicking the label with the letter B causes the<br>button with the 12 to gain the focus.<br><br>Clicking the label with the letter C causes the<br>next component following the button with the 12<br>in the focus traversal policy (the button with<br>the 03) to gain the focus.<br><br>Holding down the Shift key and clicking the label<br>with the letter C causes the previous component<br>before the button with the 12 in the focus<br>traversal policy (the button with the 09) to gain<br>the focus.<br><br>In other words, clicking the label with the C<br>causes the same behavior that would occur from<br>pressing the TAB key when the button with the 12<br>has the focus.<br><br>Requires SDK V1.4 or later.  Tested using<br>SDK 1.4.1 under WinXP<br>************************************************/<br><br>import java.awt.*;<br>import java.awt.event.*;<br>import javax.swing.*;<br><br>public class FocusTraversal02 {<br>  public static void main(String[] args){<br>    new GUI();<br>  }//end main<br>}//end class FocusTraversal02<br>//---------------------------------------------//<br><br>class GUI extends JFrame{<br>  JLabel labelA = new JLabel(" A ");<br>  JLabel labelB = new JLabel(" B ");<br>  JLabel labelC = new JLabel(" C ");<br>  JPanel panel = new JPanel();<br>  JButton button12 = new JButton("12");<br>  JButton button03 = new JButton("03");<br>  JButton button06 = new JButton("06");<br>  JButton button09 = new JButton("09");<br>  JFrame frame = this;<br><br>  public GUI(){//constructor<br>    setSize(250,100);<br>    setTitle("Copyright 2003, R.G.Baldwin");<br>    setDefaultCloseOperation(<br>                           JFrame.EXIT_ON_CLOSE);<br><br>    getContentPane().add(button12,"North");<br>    getContentPane().add(button03,"East");<br>    getContentPane().add(button06,"South");<br>    getContentPane().add(button09,"West");<br>    panel.add(labelA);<br>    panel.add(labelB);<br>    panel.add(labelC);<br>    getContentPane().add(panel);<br><br>    //Inner class for traversal policy<br>    class TrvslPolicy<br>                    extends FocusTraversalPolicy{<br><br>      public Component getDefaultComponent(<br>                       Container focusCycleRoot){<br>        return button12;<br>      }//end getDefaultComponent<br>      //---------------------------------------//<br><br>      public Component getFirstComponent(<br>                       Container focusCycleRoot){<br>        return button09;<br>      }//end getFirstComponent<br>      //---------------------------------------//<br><br>      public Component getLastComponent(<br>                       Container focusCycleRoot){<br>        return button06;<br>      }//end getLastComponent<br>      //---------------------------------------//<br><br>      public Component getComponentAfter(<br>                        Container focusCycleRoot,<br>                        Component aComponent){<br>        if(aComponent == button12){<br>          return button03;<br>        }else if(aComponent == button03){<br>          return button06;<br>        }else if(aComponent == button06){<br>          return button09;<br>        }else if(aComponent == button09){<br>          return button12;<br>        }//end else<br>        return button12;//make compiler happy<br>      }//end getComponentAfter<br>      //---------------------------------------//<br><br>      public Component getComponentBefore(<br>                        Container focusCycleRoot,<br>                        Component aComponent){<br>        if(aComponent == button12){<br>          return button09;<br>        }else if(aComponent == button09){<br>          return button06;<br>        }else if(aComponent == button06){<br>          return button03;<br>        }else if(aComponent == button03){<br>          return button12;<br>        }//end else<br>        return button12;//make compiler happy<br>      }//end getComponentBefore<br><br>    }//end TrvslPolicy<br>    //=========================================//<br><br>    //Local variables must be final for access<br>    // within inner class<br>    final TrvslPolicy policy = new TrvslPolicy();<br><br>    //Set startup traversal policy<br>    frame.setFocusTraversalPolicy(policy);<br>    frame.setVisible(true);<br><br>    //Register mouse listeners on the JLabels<br>    labelA.addMouseListener(<br>      new MouseAdapter(){<br>        public void mousePressed(MouseEvent e){<br>          //Replicates focus traversal behavior<br>          // of the TAB key<br>          int shift = e.getModifiersEx() &amp;<br>                      InputEvent.SHIFT_DOWN_MASK;<br>          if(shift == 0){<br>            KeyboardFocusManager.<br>                getCurrentKeyboardFocusManager().<br>                            focusNextComponent();<br>          }else{<br>            KeyboardFocusManager.<br>                getCurrentKeyboardFocusManager().<br>                        focusPreviousComponent();<br>          }//end else<br>        }//end mousePressed<br>      }//end new MouseAdapter<br>    );//end addMouseListener<br><br>    labelB.addMouseListener(<br>      new MouseAdapter(){<br>        public void mousePressed(MouseEvent e){<br>          //Move focus to button12<br>          button12.requestFocusInWindow();<br>        }//end mousePressed<br>      }//end new MouseAdapter<br>    );//end addMouseListener<br><br>    labelC.addMouseListener(<br>      new MouseAdapter(){<br>        public void mousePressed(MouseEvent e){<br>          //Focuses relative to button12.<br>          // Illustrates alternative methods for<br>          // accomplishing same purpose.<br>          int shift = e.getModifiersEx() &amp;<br>                      InputEvent.SHIFT_DOWN_MASK;<br>          if(shift == 0){<br>            KeyboardFocusManager.<br>                getCurrentKeyboardFocusManager().<br>                    focusNextComponent(button12);<br>            //This is an alternative method<br>//          button12.transferFocus();<br>          }else{<br>            //This is an alternative method<br>//          KeyboardFocusManager.<br>//              getCurrentKeyboardFocusManager().<br>//              focusPreviousComponent(button12);<br>            button12.transferFocusBackward();<br>          }//end else<br>        }//end mousePressed<br>      }//end new MouseAdapter<br>    );//end addMouseListener<br><br>  }//end constructor<br>}//end GUI<br><br><b><font
 face="Courier New,Courier">Listing 12</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<hr size="3" width="100%" align="center">
<p>Copyright 2003, Richard G. Baldwin.&nbsp; Reproduction in whole or
in
part in any form or medium without express written permission from
Richard
Baldwin is prohibited. </p>
<h4><a name="About the author"></a>About the author</h4>
<i><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a> is a
college professor (at Austin Community College in Austin, TX) and
private consultant whose primary focus is a combination of Java, C#,
and XML. In addition to the many platform and/or language independent
benefits of Java and C# applications, he believes that a combination of
Java, C#, and XML will become the primary driving force in the delivery
of structured information on the Web.</i><br>
<p><i>Richard has participated in numerous consulting projects, and he
frequently provides onsite training at the high-tech companies located
in and around Austin, Texas.&nbsp; He is the author of Baldwin's
Programming <a href="http://www.DickBaldwin.com">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring
programmers.
He has also published articles in JavaPro magazine.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University
and
has many years of experience in the application of computer technology
to real-world problems.</i> </p>
<p><i><a href="mailto:Baldwin@DickBaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</body>
</html>
