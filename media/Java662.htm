<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2>Using JDBC with MySQL, Getting Started</h2>
<i>Baldwin shows you how to download, install, and prepare a MySQL database as a 
localhost server on a Windows platform for use with JDBC.&nbsp; Then he shows 
you how to write JDBC programs to administer the database server and to 
manipulate data stored on the MySQL database server.</i><p><b>Published:</b>&nbsp; 
October 5, 2004<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 662</p>
<ul>
  <li> <a href="#Preface">Preface</a></li>
  <li> <a href="#Preview">Preview</a></li>
	<li> <a href="#Installation_and_Preparation_of_MySQL">Installation and 
	Preparation of MySQL</a></li>
  <li> <a href="#Discussion%20and%20Sample%20Programs">Discussion and
Sample Code for JDBC Programs</a></li>
  <li> <a href="#Run%20the%20program">Run the Programs</a></li>
  <li> <a href="#Summary">Summary</a></li>
  <li> <a href="#Complete%20Program%20Listings">Complete Program
Listings</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p> <font color="#FF0000"><b>Purpose</b></font></p>
<p> The purpose of this lesson is to get you beyond the initial hurdles involved 
in:</p>
<ul>
	<li>Downloading and installing a MySQL database server.</li>
	<li>Preparing that database for use with JDBC.</li>
	<li>Writing and testing your first JDBC programs to administer the database 
	and to manipulate the data stored in 
	the MySQL database.</li>
</ul>
<p> <font color="#FF0000"><b>What is JDBC?</b></font></p>
<p> JDBC technology is an API <i>(included in both J2SE and J2EE)</i> 
that provides cross-DBMS connectivity to a wide range of SQL databases and 
access to other tabular data sources, such as spreadsheets or flat files.</p>
<p> <font color="#FF0000"><b>What is MySQL?</b></font></p>
<p> The <a href="http://www.mysql.com/">MySQL</a> database server is probably 
the world's most popular open source database software, with more than five 
million active installations as of September 2004.</p>
<p> The database server software from
<a href="http://dev.mysql.com/downloads/index.html">MySQL</a> is available under 
a <i>&quot;dual licensing&quot;</i> model. Under this model, users may choose to use MySQL 
products under the
<a href="http://www.mysql.com/company/legal/licensing/opensource-license.html">
free software/open source GNU General Public License</a> <i>(commonly known as 
the &quot;GPL&quot;)</i> or under a
<a href="http://www.mysql.com/company/legal/licensing/commercial-license.html">
commercial license</a>.&nbsp; </p>
<p> <font color="#FF0000"><b>A powerful combination</b></font></p>
<p> Simply stated, JDBC makes it possible to write platform independent Java 
programs that can be used to manipulate the data in a wide range of SQL 
databases without the requirement to modify and/or recompile the Java programs when moving from 
platform to platform or from DBMS to DBMS.</p>
<p> MySQL is available for a wide variety of platforms.</p>
<p> Since both JDBC and MySQL are freely available for many purposes, the 
combination of JDBC and MySQL is a powerful combination that should be of 
interest for a wide variety of applications.</p>
<p> <b><font color="#ff0000">Viewing tip</font></b> </p>
<p>You may find it useful to open another copy of this lesson in a
separate browser window.&nbsp; That will make it easier for you to
scroll back
and forth among the different listings and figures while you are
reading
about them. </p>
<p><b><font color="#ff0000">Supplementary material</font></b> </p>
<p>I recommend that you also study the other lessons in my extensive
collection of online Java tutorials.&nbsp; You will find those lessons
published
at <a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a
consolidated index of my Java tutorial lessons, and sometimes they are
difficult to locate there.&nbsp; You will find a consolidated index at <font
 color="#000000"> <a href="http://www.dickbaldwin.com/">www.DickBaldwin.com</a>.</font>
</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p><font color="#FF0000"><b>Download, install, and prepare the database server</b></font></p>
<p>It is often possible to use the same Java program to manipulate the data in a 
wide variety of SQL databases without a requirement to modify and/or recompile the Java program.</p>
<p>However, the installation and preparation procedures for different SQL databases 
vary widely.&nbsp; A large part of the battle in using JDBC with a particular 
database is getting the database installed and properly prepared for use with 
JDBC.</p>
<p>In this lesson, I will show you how to download, install, and prepare a MySQL 
database as a <i>localhost</i> server on a Windows platform for use with JDBC.&nbsp; 
Then I will show you how to write three simple JDBC programs to administer the 
database server and to manipulate data stored on the database server after it is installed.</p>
<blockquote>
	<p><i>(I will assume that you already have Java SDK v1.4.2 or later, which 
	includes JDBC, installed on your computer.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>URLs and version numbers for downloading</b></font></p>
<p>I will provide specific URLs and version numbers for downloading MySQL 
software and documentation as of September 2004.&nbsp; The version numbers will 
certainly change over time as new versions of the software are released.&nbsp; 
Hopefully, the folks at MySQL will preserve the integrity of the URLs.</p>
<p>At least one URL, <a href="http://www.mysql.com/">http://www.mysql.com/</a> 
should remain constant over time.&nbsp; If the other links to MySQL in this 
lesson become broken with time, you should revert to the main MySQL URL given 
above and begin your search for the software and documentation from that point.</p>
<p><font color="#FF0000"><b>Saving time</b></font></p>
<p>If you are a newcomer to the installation of database server 
software and the preparation of that software for use with JDBC, the information 
that I will provide in this lesson should save you several days of 
effort in pouring through documentation trying to figure out how to download, 
install, and tie 
everything together.</p>
<p>Even if you are experienced in these matters, this information should save 
you several hours of effort.</p>
<h2 align="center"><font color="#000000">
<a name="Installation_and_Preparation_of_MySQL">Installation and Preparation of 
MySQL</a></font></h2>
<p><font color="#FF0000"><b>Getting things up and running</b></font></p>
<p>As a minimum, getting up and running with MySQL and JDBC involves at least 
the following steps:</p>
<ul>
	<li>Download and install the appropriate release of the MySQL database 
	server software <i>
	(several different releases are available).</i></li>
	<li>Download and install the MySQL Connector/J -- for connecting to a MySQL 
	database server from Java.</li>
	<li>Download and install the documentation for the MySQL database server.</li>
	<li>Download and install the documentation for the Connector, 
	which is a separate documentation package from the database server 
	documentation.</li>
	<li>Write and test one or more JDBC programs that will act as a database administrator, creating one or more users and 
	possibly one or more 
	databases on the database server.&nbsp; <i>(I will show you three different 
	ways to accomplish this.)</i></li>
	<li>Write and test a JDBC program that will log in as a user and 
	manipulate data stored in one of those databases.</li>
</ul>
<p><font color="#FF0000"><b>Additional MySQL software</b></font></p>
<p>Beyond the minimum, there are a variety of additional software packages, <i>
(such as GUI administrator packages)</i> that can be downloaded from MySQL and 
installed on your computer.&nbsp; </p>
<p>Since the main thrust of this lesson 
has to do with JDBC rather than database administration, I won't get into that.&nbsp; 
Rather, I will show you how to use a command-line monitor program that is 
included with the MySQL database software to perform the minimal database administrative 
tasks required to satisfy the objectives of this lesson.</p>
<h3>Documentation</h3>
<p>I will begin with a discussion of the available documentation for both the MySQL 
database server and the MySQL Connector/J.</p>
<p><b><font color="#FF0000">MySQL database server documentation</font></b></p>
<p>The MySQL Reference Manual can be downloaded from
<a href="http://dev.mysql.com/doc/">http://dev.mysql.com/doc/</a>.&nbsp; In 
addition, there is an online searchable version of the Reference Manual available at
<a href="http://dev.mysql.com/doc/mysql/en/Reference.html">
http://dev.mysql.com/doc/mysql/en/Reference.html</a>.</p>
<p>The downloadable version is available in several different formats, including:</p>

					<ul>
						<li>
						<a href="http://dev.mysql.com/get/Downloads/Manual/manual-split.zip/from/pick">
						HTML, one page per chapter, ZIP</a> 
						</li>
						<li>
						<a href="http://dev.mysql.com/get/Downloads/Manual/manual.zip/from/pick">
						HTML, all on one page, ZIP</a> </li>
					</ul>
<p>You would probably do well to have both of these formats locally available on 
your computer if you have sufficient disk space.</p>
<p><font color="#FF0000"><b>The one-page-per-chapter formatted manual</b></font></p>
<p>The first format in the above list consists of a large number of HTML files.&nbsp; 
There is one HTML file for the table of contents plus about thirty-three additional files 
containing the text of the reference manual.</p>
<p>This format has a major advantage over the second format in terms of speed.&nbsp; 
It is relatively fast to click on a hyperlink in the table of contents and to 
see that material appear in the browser window.</p>
<p>There are a couple of downsides to this format, however.&nbsp; One downside 
is that this format is not very useful for searching the entire manual for 
keywords, <i>(using your browser)</i> because it is broken down into a large 
number of separate HTML files.</p>
<p>A second downside is that even though MySQL 4.0 is the recommended release in 
September of 2004, this manual contains information up through version 
5.0.1-alpha.&nbsp; Sometimes information about the newer versions tends to 
obscure information about version 4.0.</p>
<p><font color="#FF0000"><b>Installing the one-page-per-chapter formatted manual</b></font></p>
<p>All that you need to do to install the database server documentation in this format is to 
download the zip file and extract the various HTML files into a folder on your 
disk.&nbsp; Then open the file named <b>manual_toc.html</b> in your browser to 
view the manual.</p>
<p>For convenience, I created a desktop icon that links to the table of contents 
file.</p>
<p><font color="#FF0000"><b>The all-on-one-page formatted manual</b></font></p>
<p>This format is very useful for searching <i>(using your browser)</i> because 
all of the text is in a single HTML file.</p>
<blockquote>
	<p><i>(There are actually two HTML 
files.&nbsp; One file contains a hyperlinked table of contents.&nbsp; The second 
file contains the text of the entire manual.)</i></p>
</blockquote>
<p>The primary downside to this format is speed, or lack thereof.&nbsp; The HTML 
file containing the text of the manual is about four megabytes in size.&nbsp; On 
my machine, navigating this manual in a browser is a very slow process.</p>
<p>The downloadable version in this format also contains information up through 
version 5.0.1-alpha, resulting in the same disadvantage mentioned earlier.</p>
<p><font color="#FF0000"><b>Included in the software distribution</b></font></p>
<p>When you download and install the currently recommended version of 
MySQL, <i>(which is version 4.0.21),</i> the Docs folder in the installation 
tree structure will contain a copy of the manual in the all-on-one-page format that purports to 
be for version 4.0.21.&nbsp; Thus, you don't need to download this format 
separately.&nbsp; You will get it when you download the software.</p>
<blockquote>
	<p><i>(Even though this version purports to be for version 4.0.21, it also 
	contains a lot of information about later versions.&nbsp; It may be exactly 
	the same as the version that can be downloaded separately except that the 
	title page is different.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>Installation of the all-on-one-page formatted manual</b></font></p>
<p>As mentioned above, you don't need to do anything special to install this 
format of the manual.&nbsp; It will be installed automatically when you install 
the MySQL 4.0.21 version of the database.</p>
<blockquote>
	<p><i>(Presumably, later versions of the software will also contain a copy 
	of the current manual in this format.)</i></p>
</blockquote>
<p>Once you have installed the database, the Docs folder of the installation 
tree will contain the files named <b>manual_toc.html</b> and <b>manual.html</b>.&nbsp; 
The first file contains a hyperlinked table of contents, and the second file 
contains the entire text of the manual.&nbsp; </p>
<p>Once again, for convenience, I 
created a desktop icon linked to the table of contents file to make it 
convenient to open in my browser.</p>
<p><font color="#FF0000"><b>Using both formats</b></font></p>
<p>Because I have plenty of space on my disk, I have both formats installed on 
my computer with an icon on the desktop for each.&nbsp; I occasionally open the 
version that contains the entire manual in a single HTML file when I need to 
search the entire document for something.&nbsp; Most of the time, however, I 
open and use the multi-file version due to its increased speed.</p>
<p><font color="#FF0000"><b>MySQL Connector/J documentation</b></font></p>
<p>I did not find a separate downloadable version of the connector documentation at the MySQL site.&nbsp; 
However, I did find an online version at
<a href="http://dev.mysql.com/doc/connector/j/en/index.html">
http://dev.mysql.com/doc/connector/j/en/index.html</a>.&nbsp; I was able to 
save the connector documentation locally by selecting the<i> Save Page As... </i>item on 
the <i>File</i> menu of my Netscape 7.2 browser.</p>
<blockquote>
	<p><i>(I was unable to save the page locally using Internet Explorer version 
	6 for some reason.&nbsp; However, I also discovered later that essentially the same 
	documentation is contained in the downloadable zip file for the connector 
	software in a file named mysql-connector-java-3.0.15-ga\docs\index.html.)</i></p>
</blockquote>
<p>Saving the page in Netscape 7.2 resulted in a local file named <b>index.html</b> 
and an associated folder named <b>index_files</b>.&nbsp; The file contains the 
text of the connector documentation.&nbsp; The folder contains style sheets and other 
related material.</p>
<p>Installation of the connector documentation consisted simply of saving this 
material locally and creating a desktop icon linked to the file named <b>
index.html</b>.</p>
<h3>Downloading the MySQL Database Server</h3>
<p><font color="#FF0000"><b>The download page</b></font></p>
<p>The main download page for both the database server and the connector as of 
September 2004 is <a href="http://dev.mysql.com/downloads/">
http://dev.mysql.com/downloads/</a>.&nbsp; Hopefully, this URL will also remain 
intact as MySQL releases later versions of the software.</p>
<p>Several different versions of the 
database server are available for downloading as of September 2004, including:</p>
<ul>
	<li><a href="http://dev.mysql.com/downloads/mysql/4.0.html">MySQL 4.0</a> -- 
	Generally Available <i>(GA)</i> release (recommended)</li>
	<li><a href="http://dev.mysql.com/downloads/mysql/4.1.html">MySQL 4.1</a> -- 
	Gamma release <i>(use this for new development)</i></li>
	<li><a href="http://dev.mysql.com/downloads/mysql/5.0.html">MySQL 5.0</a> -- 
	Alpha release <i>(use this for previewing and testing new features)</i></li>
	<li><a href="http://dev.mysql.com/downloads/mysql/5.0.1-snapshot.html">MySQL 
	5.0.1</a> -- Snapshot release <i>(use this for previewing and testing new 
	features)</i></li>
	<li><a href="http://downloads.mysql.com/archives.php">Older releases</a> -- 
	older releases <i>(only recommended for special needs)</i></li>
	<li><a href="http://downloads.mysql.com/snapshots.php">Snapshots</a> -- 
	source code snapshots of the development trees</li>
</ul>
<p>This list can be expected to change over time as new versions of 
the database server are released.&nbsp; Thus, the links in the above list will become obsolete.&nbsp; 
When that happens, you should revert back to the download page at
<a href="http://dev.mysql.com/downloads/">http://dev.mysql.com/downloads/</a> 
and download the version that best suits your needs at that time.</p>
<p><font color="#FF0000"><b>The different versions of the database server</b></font></p>
<p>As of September 2004, the database server documentation has this to say about these different 
versions:</p>
<ul>
	<li>MySQL 5.0 is the newest development release series and is under very 
	active development for new features. Alpha releases have been issued to 
	allow more widespread testing. </li>
	<li>MySQL 4.1 is in gamma status, soon moving to production status. </li>
	<li>MySQL 4.0 is the current stable <i>(production-quality)</i> release 
	series. New releases are issued for bugfixes. No new features are added that 
	could diminish the code stability. </li>
	<li>MySQL 3.23 is the old stable <i>(production-quality)</i> release series. 
	This series is retired, so new releases are issued only to fix critical 
	bugs.

	</li>
</ul>
<p><font color="#FF0000"><b>I elected MySQL 4.0</b></font></p>
<p>I elected to download MySQL 4.0 since it is the stable production quality 
version as of September 2004.&nbsp; This resulted in the downloading of a 
distribution file named <b>mysql-4.0.21-win.zip</b>.</p>
<blockquote>
	<p><i>(The distribution file name is likely to be different for future 
	versions of the MySQL database server.)</i></p>
</blockquote>
<h3>Installing MySQL Database Server</h3>
<p><font color="#FF0000"><b>Installation instructions</b></font></p>
<p>Installation instructions for the database server are provided in the 
database server documentation, Section 2, entitled <i>Installing MySQL.</i></p>
<p>Since I was installing on Windows XP and had no desire to deal with source 
code, I quickly skipped down to Section 2.2.1.2 entitled <i>Installing a Windows 
Binary Distribution.</i>&nbsp;&nbsp; </p>
<p><font color="#FF0000"><b>In my case, installation was easy</b></font></p>
<p>Because I did not have an earlier version of MySQL installed and I was logged 
onto Windows as an administrator, all that I needed to do was to execute the 
following instructions from the database server documentation to install the MySQL 
database server on my computer.</p>
<ul>
	<li>Unzip the distribution file to a temporary directory. </li>
	<li>Run the <b>setup.exe</b> program to begin the installation process. <i>
	If you want to install MySQL into a location other than the default 
	directory (`C:\mysql'), use the Browse button to specify your preferred 
	directory. If you do not install MySQL into the default location, you will 
	need to specify the location whenever you start the server. The easiest way 
	to do this is to use an option file, as described in Section 2.2.1.3 
	Preparing the Windows MySQL Environment. </i></li>
</ul>
<p>Because I didn't want to deal with option files, I elected to allow the 
software to be installed in the default directory, C:\mysql.</p>
<p><font color="#FF0000"><b>Testing the installation</b></font></p>
<p>After completing the installation, I performed some of the procedures shown in the 
database server documentation, Section 2.4.1 entitled <i>Windows Post-Installation Procedures.</i>&nbsp; 
Although I didn't get exactly the same results as those shown in the documentation, my 
results were close enough to convince me that the MySQL database server was 
correctly installed on my computer.</p>
<blockquote>
	<p><i>(The reason that I didn't get exactly the same results was that I 
	didn't log in with administrator privileges.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>Not installed as a Windows service</b></font></p>
<p>Section 2.2.1.7 of the database server documentation entitled <i>Starting MySQL as a Windows Service</i> contains 
the following:</p>
<blockquote>
	<p><i>&quot;On the NT family (Windows NT, 2000, or XP), the recommended way to 
	run MySQL is to install it as a Windows service. Then Windows starts and 
	stops the MySQL server automatically when Windows starts and stops.&quot;</i></p>
</blockquote>
<p>I have no desire for the MySQL database server to start running every time I 
start Windows running.&nbsp; I already waste enough time waiting for Windows XP 
to become ready for use on my laptop each time I start it.</p>
<p>Therefore, I did not install the database server as a service.&nbsp; I will 
explain how I manually <i>start</i> and <i>stop</i> the database server whenever I need to use 
it later in this lesson.</p>
<h3>Downloading MySQL Connector/J</h3>
<p><b><font color="#FF0000">What is MySQL Connector/J?</font></b></p>
<p>For those who don't know, let me begin by explaining the purpose of MySQL 
Connector/J.</p>
<p>The JDBC API is designed to make it possible for you to write a single Java 
program and to use it to manipulate the data in a variety of different SQL database servers 
without a requirement to modify and/or recompile the program.&nbsp; 
In order to do this, it is necessary for you to:</p>
<ul>
	<li>Inform the Java program as to the URL of the database server.&nbsp; You 
	can accomplish this with input data when you start the program.</li>
	<li>Provide the Java program with a programming interface to the specific 
	database server that you intend to use.&nbsp; Assuming that the programming 
	interface has been installed on your computer, you can also accomplish this 
	with input data when you run the program.</li>
</ul>
<p><font color="#FF0000"><b>The programming interface</b></font></p>
<p>The programming interface deals with the interface peculiarities of the 
different database servers.</p>
<p>Sun refers to the process of providing this information to the program as registering the 
database server with the Java program.&nbsp; You will see how this is done in 
the sample programs later in this lesson.</p>
<p><font color="#FF0000"><b>The connector download page</b></font></p>
<p>The download page for MySQL Connector/J is
<a href="http://dev.mysql.com/downloads/index.html">
http://dev.mysql.com/downloads/index.html</a>.&nbsp; As of September 2004, the 
following versions are available for downloading from this page:</p>
<ul>
	<li><a href="http://dev.mysql.com/downloads/connector/j/3.1.html">MySQL 
Connector/J 3.1</a> -- development release</li>
	<li><a href="http://dev.mysql.com/downloads/connector/j/3.0.html">MySQL 
Connector/J 3.0</a> -- production release</li>
	<li><a href="http://downloads.mysql.com/archives.php">Older releases</a> -- older 
releases <i>(only recommended for special needs)</i></li>
	<li><a href="http://downloads.mysql.com/snapshots.php">Snapshots</a> -- source 
code snapshots of the development trees</li>
</ul>
<p>As with the MySQL database server software, these individual links are likely 
to become obsolete as new versions of the software are released.&nbsp; Hopefully 
the link to
<a href="http://dev.mysql.com/downloads/index.html">
http://dev.mysql.com/downloads/index.html</a> will remain intact.</p>
<p><font color="#FF0000"><b>The MySQL Connector/J 3.0 distribution file</b></font></p>
<p>Because I was very interested in stability, I elected to download and install
<b>MySQL Connector/J 3.0</b>, identified above as the production release.&nbsp; 
This resulted in the download of a file named <b>
mysql-connector-java-3.0.15-ga.zip</b>.</p>
<p>This zip file encapsulates 194 individual files in different folders 
including source code files, class files, pdf files, xml files, jar files, 
license files, files with no extensions, a manifest file, HTML files, and other file types 
not listed here.&nbsp; </p>
<p>The zip file also contains several java programs in a folder named <b>
testsuite</b> that can be used to test your installation.&nbsp;&nbsp;&nbsp; You 
may find them useful for that purpose.&nbsp; In addition, these programs 
illustrate a variety of database operations using JDBC, so you may find them 
useful as example programs as well.</p>
<p>Fortunately, as I will explain below, all but one of these files can be 
ignored insofar as installation of the connector software is concerned.</p>
<h3>Installing MySQL Connector/J</h3>
<p><font color="#FF0000"><b>General installation instructions</b></font></p>
<p>The following statement appears in the connector documentation Section 
2.2.1.&nbsp;entitled <i>Setting the CLASSPATH (For Standalone Use).</i></p>
<blockquote>
	<p><i>&quot;Once you have un-archived the distribution archive, you can install 
	the driver in one of two ways: Either copy the &quot;com&quot; and &quot;org&quot; 
	subdirectories and all of their contents to anywhere you like, and put the 
	directory holding the &quot;com&quot; and &quot;org&quot; subdirectories in your classpath, or 
	put mysql-connector-java-[version]-bin.jar in your classpath, either by 
	adding the FULL path to it to your CLASSPATH environment variable, or by 
	copying the .jar file to $JAVA_HOME/jre/lib/ext.</i>&quot;</p>
</blockquote>
<p><font color="#FF0000"><b>My installation</b></font></p>
<p>Actually, the above quotation describes three options instead of just two.&nbsp; To make a long story short, I elected 
the third option.&nbsp; I extracted 
the jar file named <b>mysql-connector-java-3.0.15-ga-bin.jar</b> from the zip 
file and copied it into the folder named <b>c:\j2sdk1.4.2\jre\lib\ext</b>, which 
is the installation directory tree for the currently installed version of Java 
on my computer.</p>
<p>The advantage of doing it this way was that I didn't have to modify the 
classpath environment variable.&nbsp; The disadvantage is that the next time I 
upgrade to a new version of Java, I must remember to save the MySQL connector 
jar file and copy it into the directory tree for my new Java installation.</p>
<p><font color="#FF0000"><b>Your installation</b></font></p>
<p>If you prefer the first option, the connector documentation contains a wealth 
of information to help you perform the necessary steps to modify the classpath, 
etc.</p>
<p><font color="#FF0000"><b>Testing the installation</b></font></p>
<p>I didn't use any of the test programs mentioned above in the folder named <b>
testsuite</b>.&nbsp; Rather, I tested my installation using JDBC programs that I 
had developed earlier using a different SQL database server.</p>
<p>You can use the test programs mentioned earlier in the <b>testsuite </b>
folder to test your installation.&nbsp; Also, I will provide and explain three 
sample JDBC programs later in this lesson that you can use to test your 
installation.&nbsp; Before you can test the installation, however, you must 
start the MySQL database server running.</p>
<p><font color="#FF0000"><b>Starting the database server</b></font></p>
<p>At this point, all of the software necessary to use the database server 
in a JDBC program should be installed on your computer ready for use.&nbsp; The next step is to 
confirm that you can start the database server running.</p>
<p><font color="#FF0000"><b>Selecting a Windows server</b></font></p>
<p>I found it necessary to pull together several pieces of information from the 
database server documentation to determine the best way to start the server from 
a command line.&nbsp; For example, the following table is found in the database 
server documentation, Section 
2.2.1.4 entitled <i>Selecting a Windows 
Server.</i></p>
<table border="1">
	<tr>
		<td><strong>Binary</strong> </td>
		<td width="263"><strong>Description</strong>
		</td>
	</tr>
	<tr>
		<td>mysqld </td>
		<td width="263">Compiled with full debugging and automatic memory 
		allocation checking, symbolic links, and InnoDB and BDB tables.
		</td>
	</tr>
	<tr>
		<td>mysqld-opt </td>
		<td width="263">Optimized binary. From version 4.0 on, InnoDB is 
		enabled. Before 4.0, this server includes no transactional table 
		support.
		</td>
	</tr>
	<tr>
		<td>mysqld-nt </td>
		<td width="263">Optimized binary for Windows NT, 2000, and XP with 
		support for named pipes.
		</td>
	</tr>
	<tr>
		<td>mysqld-max </td>
		<td width="263">Optimized binary with support for symbolic links, and 
		InnoDB and BDB tables.
		</td>
	</tr>
	<tr>
		<td>mysqld-max-nt </td>
		<td width="263">Like mysqld-max, but compiled with support for named 
		pipes.
		</td>
	</tr>
</table>
<p><font color="#FF0000"><b>Explaining the different types of servers</b></font></p>
<p>The following explanation follows the table:</p>
<blockquote>
	<p><i>&quot;We have found that the server with the most generic name (mysqld) is 
	the one that many users are likely to choose by default. However, that is 
	also the server that results in the highest memory and CPU use due to the 
	inclusion of full debugging support. The server named <b>mysqld-opt</b> is a 
	better general-use server choice to make instead if you don't need debugging 
	support and don't want the maximal feature set offered by the -max servers 
	or named pipe support offered by the -nt servers.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>Changes in MySQL 4.1.2</b></font></p>
<p>This is followed by another explanation indicating that beginning with MySQL 
4.1.2, the server names were changed eliminating the server name <b>mysqld-opt</b> 
and replacing the debug version <i>(<b>mysqld</b>)</i> with <b>mysqld-debug</b>.&nbsp; 
Therefore, if you are installing MySQL 4.1.2 or a later version, you should use the 
syntax <b>mysqld</b> instead of <b>mysqld-opt</b> to start the server running 
from an optimized binary file.</p>
<p><font color="#FF0000"><b>Starting MySQL 4.0.21</b></font></p>
<p>Since I am running MySQL 4.0.21 and need to make certain that what I am doing 
is compatible with a large number of students having different operating systems, I concluded that I should start the server 
running by using the syntax <b>mysqld-opt</b>.</p>
<p>Section <span style="font-weight: 400">2.2.1.5 of the database server 
documentation entitled <i>Starting the Server for the First Time</i> indicates 
that the following command should be used at the command prompt to start the 
server running:</span></p>
<p><span style="font-weight: 700">C:\mysql\bin\mysqld --console</span></p>
<p>As I understand it, the purpose of <b>--console</b> is to cause error messages to be displayed on 
the standard error device <i>(typically the screen)</i> rather than to be 
entered into an error log file.&nbsp; This is what I want to happen.</p>
<p>Combining the two pieces of information given above, I concluded that I 
should start the MySQL database server by entering the following command at a 
command prompt:</p>
<p><b>C:\mysql\bin\mysqld-opt --console</b></p>
<p><font color="#FF0000"><b>Encapsulated in a batch file</b></font></p>
<p>Therefore, I created a batch file named <b>MySqlStart.bat</b> and linked that 
file to an icon on the desktop for convenience.&nbsp; The batch file contains 
the two commands shown in Listing 1 and repeated later in Listing 30 near the 
end of the lesson.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>C:\mysql\bin\mysqld-opt --console
pause<br><br><b><font face="Courier New,Courier">Listing 1 Contents of MySqlStart.bat</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The startup screen output</b></font></p>
<p>Figure 1 shows the screen output following the execution of the batch file 
named <b>MySqlStart.bat</b>.</p>
<blockquote>
	<p><i>(Note that it was necessary for me to manually enter a line break 
	ahead of the word port to cause the screen output to fit in this narrow 
	publication format.)</i><br></p>
</blockquote>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre>C:\mysql&gt;C:\mysql\bin\mysqld-opt --console
040918 13:59:47 InnoDB: Started
C:\mysql\bin\mysqld-opt: ready for connections.
Version: '4.0.21' socket: '' 
port: 3306 Source distribution
<br></pre>
      <pre><b>Figure 1 MySQL database server startup sequence</b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>The process window shown in Figure 1 remains open and active until the server 
is stopped.&nbsp; It should be possible to connect to the server using JDBC 
during this period.</p>
<p><font color="#FF0000"><b>Stopping the database server</b></font></p>
<p>It is probably a good idea to shut down the server before shutting down the 
computer.&nbsp; Section 2.2.1.6 of the database server documentation entitled <i>
Starting MySQL from the Windows Command Line</i> states that you can stop the 
MySQL server by executing the following command:</p>
<p><b>C:\mysql\bin\mysqladmin -u root shutdown</b></p>
<p>Therefore, I created a batch file named <b>MySqlStop.bat</b> and linked that 
file to an icon on my desktop to make it convenient to stop the server.&nbsp; 
The batch file contains the two commands shown in Listing 2 and repeated in 
Listing 31 near the end of the lesson.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>C:\mysql\bin\mysqladmin -u root shutdown
pause<br><br><b><font face="Courier New,Courier">Listing 2 Contents of MySqlStop.bat</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The screen output at server shutdown</b></font></p>
<p>Figure 2 shows the screen output in the server process window when the file 
named <b>MySqlStop.bat</b> is executed.<br>
</p>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre>040918 14:00:02 C:\mysql\bin\mysqld-opt: 
Normal shutdown

040918 14:00:03 InnoDB: Starting shutdown...
040918 14:00:05 InnoDB: Shutdown completed
040918 14:00:05 C:\mysql\bin\mysqld-opt: 
Shutdown Complete


C:\mysql&gt;pause
Press any key to continue . . .<br></pre>
      <pre><b>Figure 2 Screen output when MySQL server is 
         stopped.</b></pre>
      </td>
    </tr>
  </tbody>
</table>
<blockquote>
	<p><i>(As before, it was necessary for me to manually enter line breaks in 
	Figure 2 to cause the screen output to fit in this narrow publication 
	format.)</i></p>
</blockquote>
Once the server is shut down, attempts to connect to the server from JDBC will 
fail.<p>
<h3>Creating a New Database using the Monitor Program</h3>
<p>Now that you know how to start the MySQL database server, it's time to learn 
how to:</p>
<ul>
	<li>Create a database that can be manipulated using JDBC in a Java program.</li>
	<li>Create a new user having the necessary privileges to manipulate the 
	database using JDBC in a Java program.</li>
</ul>
<p><font color="#FF0000"><b>Three different approaches</b></font></p>
<p>I'm going to show you three different ways to accomplish this:</p>
<ul>
	<li>Using a command-line program named <b>mysql</b> coupled with manual data 
	entry at runtime.&nbsp; <i>(I will refer to this as the <b>monitor</b> 
	program for reasons that will become self-evident later.)</i></li>
	<li>Using the monitor program coupled with data input derived from a text 
	file.</li>
	<li>Using JDBC in a Java program.</li>
</ul>
<p>I will illustrate the first approach in this and the later section entitled
<a href="#Creating_a_New_User">Creating a New User using the Monitor Program</a> 
.</p>
<p>I will illustrate the second approach in the section entitled
<a href="#Creating_a_New_Database_using_Batch_Files">Administering the Database 
Server using Text Files</a>.</p>
<p>I will illustrate the third approach in the section entitled
<a href="#Discussion and Sample Programs">Discussion and Sample Code</a>, which 
shows how to use JDBC to manage and manipulate the database server.</p>
<p><font color="#FF0000"><b>The monitor program and manual data entry</b></font></p>
<p>The monitor program is named <b>mysql.exe</b>.&nbsp; It is located in <b>
c:\mysql\bin</b>.&nbsp; This program makes it possible to log onto the database 
server and to enter commands at the command line to:</p>
<ul>
	<li>Create databases</li>
	<li>Add new users</li>
	<li>Modify databases</li>
	<li>Perform ad-hoc queries, etc.</li>
</ul>
<blockquote>
	<p><i>(Unless you really enjoy typing, the monitor program is not a lot of 
	fun to use.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>To really learn MySQL ...</b></font></p>
<p>In order to really learn how to use MySQL, you will need to study the MySQL 
database server documentation in detail and probably some good SQL books as 
well.</p>
<p>The purpose of this lesson is to teach you just enough to get you started.&nbsp; 
When you finish this lesson, you should be able to successfully write and execute simple JDBC programs that will manipulate 
database tables on the MySQL database server.</p>
<p><font color="#FF0000"><b>The default administrative user</b></font></p>
<p>As I understand it, when the MySQL database server is first installed, there 
is a default user named <b>root</b> with full administrative privileges and no 
password.&nbsp; At this point, the server is totally wide open and insecure.</p>
<blockquote>
	<p><i>(The server documentation provides various suggestions as to what you should 
	do to add security to the server.)</i></p>
</blockquote>
<p>The user named <b>root</b> has the ability to create new databases as well as 
to create new users and to register those users on the databases.</p>
<p><font color="#FF0000"><b>Existing databases at MySQL installation</b></font></p>
<p>Also, as I understand it, there are two existing databases on the server when 
it is first installed.&nbsp; There is a database named <b>test</b>, which 
is wide open with no password requirements.&nbsp; Any user can access this 
database.</p>
<p>There is also a database named <b>mysql</b>, which is apparently used to keep 
track of things such as databases, users, etc.&nbsp; I believe that this 
database is accessible only by users having administrative privileges.</p>
<p><font color="#FF0000"><b>Adding a new database using the monitor program</b></font></p>
<p>The first step in adding a new database using the monitor program is to log 
onto the database server as the administrative user named <b>root</b> with 
access to the database named <b>mysql</b>.&nbsp; Until a password is assigned to 
the <b>root</b> user, login can be accomplished by entering the following command at the 
command prompt:</p>
<p><b>c:\mysql\bin\mysql --user=root mysql</b></p>
<blockquote>
	<p><i>(In case it isn't clear on your display, the word user is preceded by 
	two minus sign characters.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>The screen output</b></font></p>
<p>Assuming that the MySQL database server is running, the screen output 
produced by entering this command is shown in Figure 3.</p>
<blockquote>
	<p><i>(Note that in Figure 3, and several of the figures that follow, it was 
	necessary for me to manually enter line breaks in the screen output to force 
	the material to fit in this narrow publication format.)</i></p>
</blockquote>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre>C:\jnk&gt;c:\mysql\bin\mysql --user=root mysql
Welcome to the MySQL monitor. Commands end with ; 
or \g.
Your MySQL connection id is 26 to server version: 
4.0.21

Type 'help;' or '\h' for help. Type '\c' to clear 
the buffer.

<b>mysql&gt;</b><br></pre>
      <pre><b>Figure 3 Monitor output for administrator login.</b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#FF0000"><b>The monitor program</b></font></p>
<p>Note that this program refers to itself as the <b>MySQL monitor</b>.&nbsp; 
That explains why I refer to it as the monitor or the monitor program.</p>
<p>The purpose of this program is to make it possible for you to enter SQL 
database commands from the keyboard.&nbsp; Note in particular the prompt shown 
in boldface at the end of Figure 3, which reads:</p>
<p><b>mysql&gt;</b></p>
<p>This is not a command-line prompt, which typically looks something like:</p>
<p><b>C:\jnk</b>&gt;</p>
<p>Rather, this is a program-generated prompt where the monitor program is 
requesting input from the user.</p>
<p><font color="#FF0000"><b>SQL command terminators</b></font></p>
<p>As indicated in Figure 3, SQL commands end with either a semicolon character 
or \g <i>(note the difference in typeface for the character g in this text 
relative to that shown in Figure 3).</i></p>
<p>SQL commands are often quite long.&nbsp; You can enter successive portions of 
SQL commands at successive program prompts.&nbsp; </p>
<blockquote>
	<p><i>(Later, we will see that the monitor program uses a different syntax 
	for continuation prompts.)</i></p>
</blockquote>
<p>It is not until you enter a semicolon character or a \g that the program 
responds to and attempts to execute the entire SQL command.</p>
<p><font color="#FF0000"><b>Terminating the monitor program</b></font></p>
<p>You can terminate the monitor program by entering a \q at the program prompt.</p>
<blockquote>
	<p><i>(Note that this is a q as in quit and is not a g as in good.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>Creating a new database named JunkDB</b></font></p>
<p>Figure 4 shows the screen output for the use of the monitor program by the 
user named <b>root</b> to create a new database named <b>JunkDB</b> and then to 
terminate the monitor program.<br>
</p>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre>C:\jnk&gt;c:\mysql\bin\mysql --user=root mysql
Welcome to the MySQL monitor. Commands end with ; 
or \g.
Your MySQL connection id is 27 to server version: 
4.0.21

Type 'help;' or '\h' for help. Type '\c' to clear 
the buffer.

<b>mysql&gt; CREATE DATABASE JunkDB;
Query OK, 1 row affected (0.13 sec)

mysql&gt; \q
Bye</b>

C:\jnk&gt;<br></pre>
      <pre><b>Figure 4 Creating database named JunkDB</b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p>The new material in Figure 4 is shown in boldface in the bottom half of the 
figure.&nbsp; The material in the top half of Figure 4 is a repeat of the 
material shown in Figure 3.</p>
<p><font color="#FF0000"><b>Using a batch file and a text file</b></font></p>
<p>Shortly, I will show you how to create a new database using a Windows batch 
file and an associated text file.&nbsp; Later on, I will show you how to create a new database using a Java 
JDBC program.</p>
<h3><a name="Creating_a_New_User">Creating a New User</a> with the Monitor 
Program</h3>
<p>Figure 5 shows the screen output for the use of the monitor program by the 
user named <b>root</b> to add a new user named <b>auser</b>.</p>
<p>The new material is shown in boldface in the lower half of the figure.<br>
</p>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre>C:\jnk&gt;c:\mysql\bin\mysql --user=root mysql
Welcome to the MySQL monitor. Commands end with ; 
or \g.
Your MySQL connection id is 30 to server version: 
4.0.21

Type 'help;' or '\h' for help. Type '\c' to clear 
the buffer.

<b>mysql&gt; GRANT SELECT,INSERT,UPDATE,
-&gt; DELETE,CREATE,DROP
-&gt; ON JunkDB.*
-&gt; TO 'auser'@'localhost'
-&gt; IDENTIFIED BY 'drowssap';
Query OK, 0 rows affected (0.01 sec)</b>

mysql&gt; \q
Bye

C:\jnk&gt;<br></pre>
      <pre><b>Figure 5 Adding new user named auser.</b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#FF0000"><b>A longer SQL command</b></font></p>
<p>This SQL command is much longer than the command used to create the new 
database.&nbsp; This command requires several continuation lines to complete to 
prevent it from exceeding the screen width.</p>
<blockquote>
	<p><i>(Note the difference in the syntax of new program prompts and 
	continuation program prompts.&nbsp; The prompts that look like an arrow are 
	the continuation prompts.)</i></p>
</blockquote>
<p>I won't try to explain the SQL command is detail.&nbsp; I will simply refer 
you to the MySQL database documentation and a good SQL book for that purpose.&nbsp; 
However, the SQL command is relatively self explanatory.</p>
<p><font color="#FF0000"><b>The meaning of the SQL command</b></font></p>
<p>This SQL command grants a list of six different privileges on the database 
named <b>JunkDB</b> to a user named <b>auser</b> who will be accessing the 
database from <b>localhost</b>.</p>
<blockquote>
	<p><i>(Granting access to the same user from a different machine on the 
	network would require a different syntax.)</i></p>
</blockquote>
<p>The user named <b>auser</b> will be allowed to access the database named <b>
JunkDB</b> using the password <b>drowssap</b>, <i>(which is password spelled 
backwards to make it easy for me to remember).</i></p>
<h3><a name="Creating_a_New_Database_using_Batch_Files">Administering the 
Database Server using Text Files</a></h3>
<p>As mentioned earlier, unless you really enjoy typing, using the monitor 
program in manual data entry mode is not a fun way to work with the database.&nbsp; 
For example, if you make a typing error, you must go back and retype the entire 
command from the beginning.</p>
<p>Fortunately, there is a better approach.&nbsp; That approach is to provide 
the commands to the monitor program using a text file as input.&nbsp; Then if 
you make an error, you can simply edit the text file and rerun the process.</p>
<p><font color="#FF0000"><b>How does it work?</b></font></p>
<p>To make a long story short, you start the monitor program by redirecting the 
input so that the input is derived from a text file instead of from the 
keyboard.&nbsp; This process is described in the database server documentation, 
Section 3.5 entitled <i>Using mysql in Batch Mode.</i></p>
<p><font color="#FF0000"><b>Creating a new database</b></font></p>
<p>There are probably several ways to set this process up.&nbsp; I elected to 
use a combination of a batch file and a text file.&nbsp; The batch file starts 
the monitor program, logging in as <b>root</b>, and redirects input to the 
associated text file.</p>
<p>For example, the files used to create a new database named <b>JunkDB</b> are 
shown in Listing 32 and Listing 33 near the end of the lesson.</p>
<p><font color="#FF0000"><b>Making a new user</b></font></p>
<p>The files used to make a new user named <b>auser</b> are shown in Listing 34 
and Listing 35.</p>
<p>Compare the contents of these two files with the manual data entry shown 
earlier in Figure 5.&nbsp; The new user is granted six different privileges on 
the database named <b>JunkDB</b> from <b>localhost</b> with a password of <b>
drowssap</b>.</p>
<p><font color="#FF0000"><b><a name="Removing_the_user_named_auser">Removing the user named auser</a></b></font></p>
<p>The files used to remove the user named <b>auser</b> are shown in Listing 36 
and Listing 37.&nbsp; The procedure for revoking a user's privileges and 
removing the user is explained near the end of Section 14.5.1.1 entitled <i>DROP 
USER Syntax</i> in the database server documentation.</p>
<p><font color="#FF0000"><b><a name="Deleting_the_database_named_JunkDB">Deleting the database named JunkDB</a></b></font></p>
<p>The files used to delete the database named <b>JunkDB</b> are shown in 
Listing 38 and Listing 39.&nbsp; The procedure for deleting a database is 
explained in the database server documentation, Section 14.2.8 entitled <i>DROP 
DATABASE Syntax.</i> </p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Code for JDBC Programs</font></h2>
</center>
With all of the above as preparation, it is now time to learn how to write JDBC 
programs to administer and manipulate the data on the MySQL database server.<p>
<font color="#FF0000"><b>Three separate programs</b></font></p>
<p>I will explain three programs.&nbsp; The first program, named <b>Jdbc11</b> 
shows how to:</p>
<ul>
	<li>Log onto the server as the administrator named <b>root</b>.</li>
	<li>Create a new database named <b>JunkDB</b>.</li>
	<li>Register a new user named <b>auser</b> on the database named <b>JunkDB
	</b>with six different privileges and a password of <b>drowssap</b>.</li>
</ul>
<p>The second program named <b>Jdbc12</b> shows how to:</p>
<ul>
	<li>Log onto the server as the administrator named <b>root</b>.</li>
	<li>Revoke the privileges of and remove the user named <b>auser</b>.</li>
	<li>Delete the database named <b>JunkDB</b>.</li>
</ul>
<p>The third program named <b>Jdbc10</b> shows how to log onto the server as 
the user named <b>auser</b> and to manipulate the database named <b>JunkDB</b> 
in a variety of ways.</p>
<p>I will break each of these programs down into fragments and discuss the 
fragments.&nbsp; Complete listings of all the programs are shown in Listings 40, 
41, and 42 
near the end of the lesson.</p>
<p><font color="#FF0000"><b>Jdbc11 - Create a database and make a new user</b></font></p>
<p>The purpose of the program named <b>Jdbc11</b> is to log onto the master 
database named <b>mysql</b> as the default administrator named <b>root</b> whose 
password is blank in order to perform the following updates on the MySQL 
database server:</p>
<ul>
	<li>Create a new database named JunkDB.</li>
	<li>Create a new user named <b>auser</b> with a password of <b>drowssap</b> 
	with six different privileges on the database named <b>JunkDB</b>.</li>
</ul>
<p><font color="#FF0000"><b>The output, or lack thereof</b></font></p>
<p>These two operations produce no visible output when successful. However, they 
produce error messages in the output when unsuccessful.</p>
<blockquote>
	<p><i>(Note, however, that print statements in the program produce several 
	lines of output that are independent of the operations being performed on 
	the database server.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>Server must be running</b></font></p>
<p>The MySQL server must be running on <b>localhost</b> before this program is 
started.&nbsp; Instructions for starting and stopping the database server were 
provided earlier <i>(see Listing 1, Figure 1, Listing 2, and Figure 2).</i></p>
<p>The program was tested using Java SDK 1.4.2 under WinXP, MySQL version 4.0.21-win, 
and JDBC connector version mysql-connector-java-3.0.15-ga.</p>
<p><font color="#FF0000"><b><a name="Critical_steps_in_using_JDBC">Critical steps in using JDBC</a></b></font></p>
<p>There are five critical steps in using JDBC to manipulate a database:</p>
<ol>
	<li>Load and register the JDBC driver classes <i>(programming interface)</i> for the database server that 
	you intend to use. </li>
	<li>Get a <b>Connection</b> object that represents a connection to the database 
	server <i>(analogous to logging onto the server).</i> </li>
	<li>Get one or more <b>Statement</b> objects for use in manipulating the database. 
	</li>
	<li>Use the <b>Statement</b> objects to manipulate the database. </li>
	<li>Close the connection to the database. </li>
</ol>

<p>I will highlight these five steps in the discussion of the sample program 
that follows.</p>
<p><font color="#FF0000"><b>Beginning of class definition for Jdbc11</b></font></p>
<p>The first program fragment for the program named <b>Jdbc11</b> is shown in Listing 3.&nbsp; The entire program is 
shown in Listing 40 near the end of the lesson.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>public class Jdbc11 {
  public static void main(String args[]){
    System.out.println(
                  "Copyright 2004, R.G.Baldwin");
    try {
      Statement stmt;
<br><b><font face="Courier New,Courier">Listing 3</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in Listing 3 is straightforward, showing the beginning of the class, 
the beginning of the <b>main</b> method, and a print statement.</p>
<p>Listing 3 also declares a local variable of type <b>Statement</b>.&nbsp; I 
will have more to say about the <b>Statement</b> interface later.</p>
<p><font color="#FF0000"><b>Register the JDBC driver for MySQL</b></font></p>
<p>Listing 4 shows the statement that implements the first
<a href="#Critical_steps_in_using_JDBC">critical step</a> listed earlier <i>
(load and register the JDBC driver classes).</i>&nbsp; 
This statement registers the MySQL driver classes with the Java program, making it possible for this program to 
manipulate data on the MySQL server.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      Class.forName("com.mysql.jdbc.Driver");
<br><b><font face="Courier New,Courier">Listing 4</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Reference to the driver class</b></font></p>
<p>The following statement appears in the MySQL Connector documentation, Section 
2.2.1.&nbsp;entitled <i>Setting the CLASSPATH (For Standalone Use).</i></p>
<blockquote>
	<p><i>&quot;If you are going to use the driver with the JDBC DriverManager, you 
	would use &quot;com.mysql.jdbc.Driver&quot; as the class that implements 
	java.sql.Driver.&quot;</i></p>
</blockquote>
<p>This information is also provided in the connector documentation in Section 
2.2.2.&nbsp;entitled <i>Driver Class Name and JDBC URL Format.</i></p>
<p><font color="#FF0000"><b>The Driver interface</b></font></p>
<p>Note the reference to the <b>Driver</b> interface in the above quotation.&nbsp; 
Here is some of what Sun has to say about the <b>Driver</b> interface:</p>
<blockquote>
	<p><i>&quot;The interface that every driver class must implement. </i></p>
	<p><i>The Java SQL framework allows for multiple database drivers. </i></p>
	<p><i>Each driver should supply a class that implements the <b>Driver</b> 
	interface. </i></p>
	<p><i>The <b>DriverManager</b> will try to load as many drivers as it can 
	find and then for any given connection request, it will ask each driver in 
	turn to try to connect to the target URL. ...</i></p>
	<p><i>When a <b>Driver</b> class is loaded, it should create an instance of 
	itself and register it with the <b>DriverManager</b>. This means that a user 
	can load and register a driver by calling </i></p>
	<p><i>Class.forName(&quot;foo.bah.Driver&quot;)&quot;</i>
&nbsp;</p>
</blockquote>
<p><font color="#FF0000"><b>The name of the driver class</b></font></p>
<p>In order to use a JDBC program with a specific database server, you must 
obtain the name of this critical driver class from the database vendor <i>(or from some 
third party that supports the database server).&nbsp; </i>You must then cause your program to load the class.</p>
<p>This is 
the class that connects the other classes in the connector package to the Java 
program.&nbsp; Without it, the Java program would be unable to communicate 
successfully with the database server.</p>
<p><font color="#FF0000"><b>Loading the driver class</b></font></p>
<p>The statement in Listing 4 causes this class to be loaded as described in the 
Sun documentation quoted above.</p>
<blockquote>
	<p><i>(If you are unfamiliar with the use of the <b>forName</b> method of 
	the class named <b>Class</b>, see
	<a href="http://www.developer.com/java/other/article.php/1025601">The 
	Essence of OOP using Java: Static Members</a> for a brief introduction to 
	the class named<b> Class</b>.&nbsp; Then open your
	<a href="http://www.google.com/advanced_search?hl=en">Google</a> search 
	engine, set the number of results to 100, and search for all of the keywords
	<b>java forname richard baldwin</b>.&nbsp; This should point you to several 
	previous lessons that I have published that discuss this topic.&nbsp; If you 
	don't find what you need there, click on the link on the bottom of the 
	last Google page that reads <b>repeat the search with the omitted results 
	included</b> to see even more lessons.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>Specification of Driver class as a String</b></font></p>
<p>There are several alternative ways to register the <b>Driver</b> class, only 
one of which is shown in Listing 4.&nbsp; The statement in Listing 4 makes it possible to specify the <b>Driver</b> class as a <b>String</b>.&nbsp; The 
primary advantage of this approach is that this string can be obtained by the 
program in a variety of ways at runtime.</p>
<p>Although the string was hard 
coded into this simple program, that is not a requirement.&nbsp; For a more 
general program intended to be used with two or more database servers, this 
string would most likely be provided as some form of user input.</p>
<p><font color="#FF0000"><b>The URL of the database server</b></font></p>
<p><strong style="font-weight: 400">MySQL and other similar database engines 
behave as servers on a network. They are identified by a URL much as other types 
of servers <i>(such as HTTP servers and FTP servers)</i> are identified. The 
next fragment defines the URL for the MySQL database server that I used in this 
sample program.</strong> </p>
<p>The code in Listing 5 defines the URL of the master database named <b>mysql</b> 
on the 
MySQL database server residing on <b>localhost</b> and servicing the default 
port number 3306.</p>
<blockquote>
	<p><i>(I could have omitted the default port number from the URL, but I 
	decided to include it to remind me to mention it.&nbsp;
	<strong style="font-weight: 400">Note that the &quot;//&quot; characters shown to the 
	right of &quot;mysql:&quot; form part of the URL. They are not comment indicators.</strong>)</i></p>
</blockquote>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      String url =
            "jdbc:mysql://localhost:3306/mysql";
<br><b><font face="Courier New,Courier">Listing 5</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The URL format is provided in the connector documentation in Section 
2.2.2.&nbsp;entitled <i>Driver Class Name and JDBC URL Format.</i>&nbsp; The URL 
format contains several optional elements.&nbsp; This URL will be referenced in the statement 
in Listing 6 for the purpose of getting a connection to the database.</p>
<p><font color="#FF0000"><b>Get a connection to the database</b></font></p>
<p>The code in Listing 6 implements the second
<a href="#Critical_steps_in_using_JDBC">critical step</a> listed earlier <i>(get 
a connection object).</i></p>
<p>Listing 6 gets a connection to the database at the specified URL <i>(mysql on 
localhost port 3306)</i> for a user named <b>root</b> with a blank password.&nbsp; 
As you are already aware, this user is the default administrator having full privileges to do anything, 
including creating new databases and registering new users on those databases. </p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>
      Connection con =
                     DriverManager.getConnection(
                                 url,"root", "");
<br><b><font face="Courier New,Courier">Listing 6</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>In effect, Listing 6 logs the JDBC program onto the MySQL database server in 
a manner that is analogous to the first line in Figures 3, 4, and 5 as well as 
the statements in the batch files shown in Listings 32, 34, 36, and 38.</p>
<p><font color="#FF0000"><b>The getConnection method</b></font></p>
<p><strong style="font-weight: 400">The </strong><strong>getConnection</strong><strong style="font-weight: 400"> 
method is a static method of the </strong><strong>DriverManager</strong><strong style="font-weight: 400"> 
class. When </strong><strong>getConnection</strong><strong style="font-weight: 400"> 
is invoked, the </strong><strong>DriverManager</strong><strong style="font-weight: 400"> 
will attempt to locate a suitable driver from among those loaded at 
initialization and those loaded explicitly using the same classloader as the 
current applet or application.</strong></p>
<p>There are several overloaded versions of the <b>getConnection</b> method.&nbsp; 
The version used in Listing 6 attempts to establish a connection to the given 
database URL for a specific user with a specific password.</p>
<p>If the attempt to get a connection to the database server is successful, the 
method returns an object of type <b>Connection</b>. In this program, a reference to the 
<b>Connection</b> object is stored in the reference variable named <b>con</b>.</p>
<p>If the attempt is not successful, an exception of type <b>SQLException</b> 
will be 
thrown.&nbsp; Information pertinent to the nature of the problem will be 
encapsulated in the <b>SQLException</b> object.</p>

<p>As you will see later, SQL statements are executed and results are returned 
within the context of a connection.</p>
<p><font color="#FF0000"><b>Display some information</b></font></p>
<p>The code in Listing 7 is not critical to the program.&nbsp; This code simply displays information about the URL and the 
connection.&nbsp; </p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      System.out.println("URL: " + url);
      System.out.println("Connection: " + con);
<br><b><font face="Courier New,Courier">Listing 7</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Get a Statement object</b></font></p>
<p>The code in Listing 8 implements the third
<a href="#Critical_steps_in_using_JDBC">critical step</a> listed earlier <i>(get 
one or more <b>Statement</b> objects).</i></p>
<p>This code invokes the<b> createStatement</b> method of the <b>
Connection</b> interface to get an object of type <b>Statement</b>.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt = con.createStatement();
<br><b><font face="Courier New,Courier">Listing 8</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><strong style="font-weight: 400">Recall that </strong><strong>con</strong><strong style="font-weight: 400"> 
is a reference to an object of type </strong><strong>Connection</strong><strong style="font-weight: 400">.&nbsp; 
A </strong><strong>Connection</strong><strong style="font-weight: 400"> object 
defines a connection <i>(session)</i> with a specific database.&nbsp; SQL 
statements are executed and results are returned within the context of a 
connection.</strong></p>
<p>According to Sun, a Statement object is:</p>
<blockquote>
	<p><i>&quot;... used for executing a static SQL statement and returning the 
	results it produces.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><strong>The results that are returned</strong></font></p>
<p><strong style="font-weight: 400">The results, if any, are returned in the 
form of a </strong><strong>ResultSet</strong><strong style="font-weight: 400"> 
object.&nbsp; I will have more to say about the </strong><strong>ResultSet</strong><strong style="font-weight: 400"> 
interface later in conjunction with the discussion of the program named </strong>
<strong>Jdbc10</strong><strong style="font-weight: 400">.</strong></p>
<blockquote>
	<p><strong style="font-style: italic; font-weight: 400">(The SQL commands 
	used in this program don't return any results.)</strong></p>
</blockquote>
<p><font color="#FF0000"><b>Methods of the Statement interface</b></font></p>
<p><strong style="font-weight: 400">The </strong><strong>Statement</strong><strong style="font-weight: 400"> 
interface declares many methods that can be used to access the database server 
and to manipulate the data in the 
database. One of those methods is </strong><strong>executeUpdate</strong><strong style="font-weight: 400">, 
which will be used in this program.</strong></p>
<p><strong style="font-weight: 400">The </strong><strong>executeUpdate </strong>
<strong style="font-weight: 400">method has a single </strong><strong>String</strong><strong style="font-weight: 400"> 
parameter.&nbsp; This parameter must be a valid SQL command. The method is used to execute SQL 
INSERT, UPDATE or DELETE statements. In addition, other SQL statements that 
return nothing can be executed using this method.</strong></p>
<p><font color="#FF0000"><b>Create the new database</b></font></p>
<p>The code in Listing 9 implements the fourth
<a href="#Critical_steps_in_using_JDBC">critical step</a> in the list provided 
earlier, <i>(use of a <b>Statement </b>object to manipulate the database)</i>.</p>
<p>Listing 9 invokes the <b>executeUpdate</b> method on the <b>Statement</b> 
object to create the new database named <b>JunkDB</b>.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt.executeUpdate(
                       "CREATE DATABASE JunkDB");
<br><b><font face="Courier New,Courier">Listing 9</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The executeUpdate method</b></font></p>
<p>Sun has this to say about the <b>executeUpdate</b> method:</p>
<blockquote>
	<p><i>&quot;public int <b>executeUpdate</b>(String&nbsp;sql) throws SQLException</i></p>
	<p><i>Executes the given SQL statement, ... </i></p>
	<p><i>Parameters: sql - an SQL INSERT, UPDATE or DELETE statement or an SQL 
	statement that returns nothing </i></p>
	<p><i>Returns: either the row count for INSERT, UPDATE or DELETE statements, 
	or 0 for SQL statements that return nothing.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>The method parameter is an SQL command</b></font></p>
<p>Note the similarity of the method parameter in Listing 9 to the interactive 
input shown in Figure 4 and the contents of the text file shown in Listing 33.</p>
<p>In all three cases, an SQL command is invoked on the database server to cause a 
new database named <b>JunkDB</b> to be created.&nbsp; This SQL command returns 
nothing, so it is suitable for use with the <b>executeUpdate</b> method 
described above.</p>
<p>In all three cases, the SQL command is invoked by the 
default administrator named <b>root</b> who has the ability to create new 
databases.</p>
<p><font color="#FF0000"><b>Make a new user</b></font></p>
<p>The code in Listing 10 also implements the fourth
<a href="#Critical_steps_in_using_JDBC">critical step</a> listed earlier, <i>
(use of a <b>Statement </b>object to manipulate the database)</i>. </p>
<p>The code in Listing 10 invokes the <b>executeUpdate</b> method once again to 
make a new user named <b>auser</b> who is capable of accessing the database named <b>
JunkDB</b> from <b>localhost</b> using the password <b>drowssap</b> with six 
different privileges.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt.executeUpdate(
          "GRANT SELECT,INSERT,UPDATE,DELETE," +
          "CREATE,DROP " +
          "ON JunkDB.* TO 'auser'@'localhost' " +
          "IDENTIFIED BY 'drowssap';");
<b><font face="Courier New,Courier">Listing 10</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Another SQL command</b></font></p>
<p>Once again, note the similarity of the <b>executeUpdate</b> 
method parameter in Listing 10 to the interactive input shown in Figure 5 and to the 
contents of the text file shown in Listing 35.</p>
<p>Figure 5, Listing 10, and Listing 35 illustrate three different ways 
for the default administrator named <b>root</b> to invoke the same SQL command 
on the database server.</p>
<p><font color="#FF0000"><b>Close the connection and terminate the program</b></font></p>
<p>Listing 11 implements the fifth <a href="#Critical_steps_in_using_JDBC">
critical step</a> listed earlier, closing the connection and terminating the program.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      con.close();
    }catch( Exception e ) {
      e.printStackTrace();
    }//end catch
  }//end main
}//end class Jdbc11<br><br><b><font face="Courier New,Courier">Listing 11</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The results of running the program named Jdbc11</b></font></p>
<p>Once this program has been run successfully, the MySQL database server contains a database 
named <b>JunkDB</b>, as well as a user named <b>auser</b>, having various 
privileges relative to that database with a password of <b>drowssap</b>.</p>
<p>At this point, it is possible to execute JDBC programs by which the user 
named <b>auser</b> manipulates the contents of the database named <b>JunkDB</b>.&nbsp; 
That will be the purpose of the program named <b>Jdbc10</b>, which I will 
explain later.</p>
<p>First, however, I am going to show you how to write a JDBC 
program to remove the user named <b>auser</b> and to delete the database named
<b>JunkDB</b> from the MySQL database server.</p>
<p><font color="#FF0000"><b>JDBC12 - Remove a user and delete a database</b></font></p>
<p>The purpose of the program named <b>Jdbc12</b> is to log onto the master 
database named <b>mysql</b> as the default administrator named <b>root</b> whose 
password is blank in order to perform the following updates on the MySQL 
database server:</p>
<ul>
	<li>Revoke the privileges of and remove a user named <b>auser</b>.</li>
	<li>Delete a database named <b>JunkDB</b>.</li>
</ul>
<p><font color="#FF0000"><b>The output</b></font></p>
<p>These two operations produce no visible output when successful. However, they 
produce error messages in the output when unsuccessful.</p>
<blockquote>
	<p><i>(Print statements in the program do produce output that is unrelated 
	to the operations listed above.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>A reversal</b></font></p>
<p>This program is the reverse of the program named <b>Jdbc11</b>, discussed 
earlier, which creates the database named <b>JunkDB</b> and registers the user 
named <b>auser</b> on that database.</p>
<p><font color="#FF0000"><b>Server must be running</b></font></p>
<p>The MySQL server must be running on <b>localhost</b> before this program is 
started.&nbsp; Instructions for starting and stopping the database server were 
provided earlier <i>(see Listing 1, Figure 1, Listing 2, and Figure 2).</i></p>
<p><font color="#FF0000"><b>Testing</b></font></p>
<p>This program was tested using Java SDK 1.4.2 under WinXP, MySQL version 
4.0.21-win, and JDBC connector version mysql-connector-java-3.0.15-ga.</p>
<p><font color="#FF0000"><b>Beginning of the Jdbc12 class</b></font></p>
<p>Listing 12 shows the beginning of the class definition and the beginning of 
the <b>main</b> method for the program named <b>Jdbc12</b>.&nbsp; A complete 
listing of the program is provided in Listing 41</p>
<p>The code in Listing 12 is the same as the code discussed earlier for the 
program named Jdbc11.&nbsp; Therefore, I won't repeat that discussion.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>public class Jdbc12 {
  public static void main(String args[]){
    System.out.println(
                  "Copyright 2004, R.G.Baldwin");
    try {
      Statement stmt;

      //Register the JDBC driver for MySQL.
      Class.forName("com.mysql.jdbc.Driver");

      //Define URL of database server for
      // database named mysql on the localhost
      // with the default port number 3306.
      String url =
            "jdbc:mysql://localhost:3306/mysql";

      //Get a connection to the database for a
      // user named root with a blank password.
      // This user is the default administrator
      // having full privileges to do anything.
      Connection con =
                     DriverManager.getConnection(
                                 url,"root", "");

      //Display URL and connection information
      System.out.println("URL: " + url);
      System.out.println("Connection: " + con);

      //Get a Statement object
      stmt = con.createStatement();
<br><b><font face="Courier New,Courier">Listing 12</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Revoke privileges and remove user named auser</b></font></p>
<p>Listing 13 invokes the <b>executeUpdate</b> method four times in succession 
to cause the database server to revoke privileges for and to remove the user 
named <b>auser</b>.&nbsp; The SQL commands required to accomplish this were 
discussed <a href="#Removing_the_user_named_auser">earlier</a> and illustrated 
in Listings 36 and 37.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt.executeUpdate(
          "REVOKE ALL PRIVILEGES ON *.* " +
          "FROM 'auser'@'localhost'");
      stmt.executeUpdate(
          "REVOKE GRANT OPTION ON *.* " +
          "FROM 'auser'@'localhost'");
      stmt.executeUpdate(
          "DELETE FROM mysql.user WHERE " +
          "User='auser' and Host='localhost'");
      stmt.executeUpdate("FLUSH PRIVILEGES");
<br><b><font face="Courier New,Courier">Listing 13</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Delete the database named JunkDB</b></font></p>
<p>Listing 14 invokes the <b>executeUpdate</b> method to delete the database 
named <b>JunkDB</b>, using an SQL command discussed
<a href="#Deleting_the_database_named_JunkDB">earlier</a> and illustrated in 
Listings 38 and 39.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt.executeUpdate(
                        "DROP DATABASE JunkDB");
<br><b><font face="Courier New,Courier">Listing 14</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Closing the connection and terminating the program</b></font></p>
<p>Listing 15 closes the connection and terminates the program.&nbsp; </p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      con.close();
    }catch( Exception e ) {
      e.printStackTrace();
    }//end catch
  }//end main
}//end class Jdbc12
<br><b><font face="Courier New,Courier">Listing 15</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Jdbc10 - Manipulating the data in the database</b></font></p>
<p>The behavior of each of the two previous programs has been in the nature of 
administering or managing the database server.&nbsp; In particular, those programs added and 
removed databases and users from the database server.</p>
<p><font color="#FF0000"><b>The user perspective</b></font></p>
<p>The purpose of the program named&nbsp; <b>Jdbc10</b> is to illustrate the 
ability to use JDBC to access a MySQL database server on <b>localhost</b> and to 
manipulate the data stored in that database.&nbsp; </p>
<p><font color="#FF0000"><b>Server must be running</b></font></p>
<p>The MySQL server must be running on localhost before the program named <b>
Jdbc10</b> is started.&nbsp; Instructions for starting and stopping the MySQL 
database server were provided earlier <i>(see Listing 1, Figure 1, Listing 2, 
and Figure 2).</i> </p>
<p><font color="#FF0000"><b>Server must be prepared</b></font></p>
<p>In addition, a database named <b>JunkDB</b> must have been created on the 
server and a user named <b>auser</b> must have been registered on that database 
with a password of <b>drowssap</b> before this program is started.</p>
<p>The user named <b>auser</b> must have privileges that allow for the creation of tables in the 
database and the insertion of data into the tables.&nbsp; In addition the user 
must be allowed to perform SELECT queries on the tables in the database.</p>
<p><font color="#FF0000"><b>Creating the database and adding the user</b></font></p>
<p>The database may have been created and the user may have been added in at 
least three different ways:</p>
<ul>
	<li>Performing manual data entry with the monitor program as illustrated in 
	Figures 4 and 5.</li>
	<li>Using the monitor program coupled with data input derived from a text 
	file as illustrated in Listings 32, 33, 34, and 35.</li>
	<li>Running the program named <b>Jdbc11</b> discussed earlier.</li>
</ul>
<p><font color="#FF0000"><b>Behavior of Jdbc10 program</b></font></p>
<p>This program:</p>
<ul>
	<li>Logs in as <b>auser</b> with a password of <b>drowssap</b>.</li>
	<li>Accesses the database named <b>JunkDB</b>.</li>
	<li>Creates a table named <b>myTable</b>.</li>
	<li>Puts five rows of data into the table named <b>myTable</b>.</li>
	<li>Accesses the data in the table named <b>myTable</b>.</li>
	<li>Displays the data.</li>
	<li>Deletes the table named <b>myTable</b>.</li>
</ul>
<p>Two different approaches are used to display the contents of the table.&nbsp; 
The first approach displays all of the data in the table.&nbsp; The second 
approach displays only the data in a specific row in the table.</p>
<p><font color="#FF0000"><b>A precaution</b></font></p>
<p>As a precaution, before attempting to create the new table, the program 
attempts to delete a table having the same name.&nbsp; If a table having the 
same name already exists as residue from a previous run, it is deleted.</p>
<p>If it doesn't already exist when the attempt is made to delete it, an 
exception is thrown. This exception is caught, displayed, and ignored.</p>
<p><font color="#FF0000"><b>The program output</b></font></p>
<p>This program produces the output shown in Figure 6 under normal conditions 
where the table named <b>myTable</b> does not exist when the program is started
<i>(the specifics regarding the Connection object may vary from one run to the 
next)</i>.<br>
</p>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre>Copyright 2004, R.G.Baldwin
URL: jdbc:mysql://localhost:3306/JunkDB
Connection: com.mysql.jdbc.Connection@1430b5c
java.sql.SQLException: Base table or view not
found message from server: &quot;Unknown table
'mytable'&quot;No existing table to delete
Display all results:
test_id= 1 str = One
test_id= 2 str = Two
test_id= 3 str = Three
test_id= 4 str = Four
test_id= 5 str = Five
Display row number 2:
test_id= 2 str = Two<br></pre>
      <pre><b>Figure 6</b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#FF0000"><b>Testing</b></font></p>
<p>This program was tested using Java SDK 1.4.2 under WinXP, MySQL version 
4.0.21-win, and JDBC connector version mysql-connector-java-3.0.15-ga.</p>
<p><font color="#FF0000"><b>Beginning of the class definition</b></font></p>
<p>The class definition begins in Listing 16.&nbsp; A complete listing of the 
program is shown in Listing 42 near the end of the lesson.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>public class Jdbc10 {
  public static void main(String args[]){
    System.out.println(
                  "Copyright 2004, R.G.Baldwin");
    try {
      Statement stmt;
      ResultSet rs;

      //Register the JDBC driver for MySQL.
      Class.forName("com.mysql.jdbc.Driver");<br><br><b><font face="Courier New,Courier">Listing 16</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Except for the declaration of a variable of type <b>ResultSet</b>, the code 
in Listing 16 is the same as the code in the two previous programs.&nbsp; I will 
have more to say about the <b>ResultSet</b> type later.</p>
<p><font color="#FF0000"><b>Define the database URL</b></font></p>
<p>Listing 17 defines the URL of the database server and the database that will 
be accessed later by this program.&nbsp; </p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      String url =
            "jdbc:mysql://localhost:3306/JunkDB";
<br><b><font face="Courier New,Courier">Listing 17</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Note that the previous two programs accessed the master database named <b>
mysql</b>, whereas this program accesses the user database named <b>JunkDB</b>.&nbsp; 
Otherwise, the code in Listing 17 is the same as in the two previous programs.</p>
<p><font color="#FF0000"><b>Get a connection to the database</b></font></p>
<p>Listing 18 gets a connection to the database.&nbsp; </p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      Connection con =
                     DriverManager.getConnection(
                        url,"auser", "drowssap");<br><br><b><font face="Courier New,Courier">Listing 18</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Recall that the code in Listing 18 is analogous to a specific user logging 
onto a specific database using a specific password.</p>
<p>The previous two programs got a connection to the master database named <b>
mysql</b> for the default administrator named <b>root</b> whose password was 
blank.</p>
<p>This program gets a connection to the database named <b>JunkDB</b> for the 
user named <b>auser</b> whose password is <b>drowssap</b>.</p>
<p><font color="#FF0000"><b>Display some information and get a statement object</b></font></p>
<p>As in the previous two programs, Listing 19 displays some information about 
the URL and the connection, and then gets a <b>Statement</b> object.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>
      //Display URL and connection information
      System.out.println("URL: " + url);
      System.out.println("Connection: " + con);

      //Get a Statement object
      stmt = con.createStatement();
<br><b><font face="Courier New,Courier">Listing 19</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Delete the table named myTable if it exists</b></font></p>
<p>A table named <b>myTable</b> may already exist in the database named <b>
JunkDB</b> for some reason such as the premature ending of a previous run of 
this program.&nbsp; If the table already exists, it will not be possible to 
create a new empty table having that name.&nbsp; A requirement of this program 
is to create an empty table named <b>myTable</b> in a particular format.</p>
<p>Therefore, as a precaution, before attempting to create the new table, the 
code in Listing 20 attempts to delete a table named <b>myTable</b>.&nbsp; If a table 
having that name already exists, it is deleted.</p>
<p>If it doesn't already exist when the attempt is made to delete it, an 
exception is thrown. This exception is simply caught, displayed, and ignored.
</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      try{
        stmt.executeUpdate("DROP TABLE myTable");
      }catch(Exception e){
        System.out.print(e);
        System.out.println(
                  "No existing table to delete");
      }//end catch
<br><b><font face="Courier New,Courier">Listing 20</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in Listing 20 invokes the <b>executeUpdate</b> method, with which 
you are already familiar.&nbsp; Only the syntax of the SQL command provided as a 
parameter to the method is new to this program.</p>
<p><font color="#FF0000"><b>Create the new table named myTable</b></font></p>
<p>The code in Listing 22 invokes the <b>executeUpdate</b> method to create a 
new table named <b>myTable</b>.&nbsp; I will refer you to an SQL book for a full 
understanding of the SQL command that is passed as a parameter to the method.</p>
<p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt.executeUpdate(
            "CREATE TABLE myTable(test_id int," +
                  "test_val char(15) not null)");<br><br><b><font face="Courier New,Courier">Listing 22</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Briefly, the new table will have two columns.&nbsp; The first column will be 
named <b>test_id</b> and will be designed to contain integer data.&nbsp; </p>
<p>The second column will be named <b>test_val</b> and will be designed to 
contain character data up<i> </i>to 15 characters in length<i> </i>(<i>in Java, 
we might refer to that as <b>String</b> data, except that there is no limit to 
the length of a <b>String</b> in Java).</i></p>
<p><font color="#FF0000"><b>Insert some values into the table</b></font>&nbsp;
</p>
<p>Listing 23 invokes the <b>executeUpdate</b> method to insert one value into 
each column of the first row in the table.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                    "test_val) VALUES(1,'One')");<br><br><b><font face="Courier New,Courier">Listing 23</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The integer value <i> <b>1</b> </i>is inserted into the column named <b>test_id</b>.&nbsp; 
The three characters, <i> <b>One</b>,</i> are inserted into the column named <b>test_val</b>.</p>
<p><font color="#FF0000"><b>Insert values into four more rows</b></font></p>
<p>Listing 24 invokes the <b>executeUpdate</b> method four more times in 
succession to insert values into the columns in rows 2 through 5.&nbsp; You 
should be able to examine the SQL commands and determine the values inserted 
into the table.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                    "test_val) VALUES(2,'Two')");
      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                  "test_val) VALUES(3,'Three')");
      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                   "test_val) VALUES(4,'Four')");
      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                   "test_val) VALUES(5,'Five')");<br><br><b><font face="Courier New,Courier">Listing 24</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The table is populated</b></font></p>
<p>At this point, the first five rows in the table named <b>myTable</b> have 
been populated with data.&nbsp; The remaining code in the program will:</p>
<ul>
	<li>Access and display all of the data in the table.</li>
	<li>Display the data in a specific row in the table.</li>
	<li>Delete the table from the database.</li>
</ul>
<p><font color="#FF0000"><b>Get another Statement object</b></font></p>
<p>The code in Listing 25 gets a different <b>Statement</b> object, initialized 
as shown by the parameters that are passed to the <b>createStatement</b> method.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt = con.createStatement(
               ResultSet.TYPE_SCROLL_INSENSITIVE,
                     ResultSet.CONCUR_READ_ONLY);<br><br><b><font face="Courier New,Courier">Listing 25</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>I won't try to explain the meaning of the initialization parameters.&nbsp; 
Rather, I will let you look them up in the Sun documentation for the <b>
ResultSet</b> interface, and then perhaps do further research in an SQL book.</p>
<p><strong style="font-weight: 400">The </strong><strong>ResultSet</strong><strong style="font-weight: 400"> 
interface provides about ten symbolic constants that can be used as parameters 
to this method. The values of the parameters exercise control over the behavior 
of the </strong><strong>
ResultSet</strong><strong style="font-weight: 400"> object returned by a 
subsequent query based on the </strong><strong>Statement</strong><strong style="font-weight: 400"> 
object.</strong>
</p>
<p><font color="#FF0000"><b>Query the database</b></font></p>
<p>All of the database operations to this point have been based on the use of 
the <b>executeUpdate</b> method of the <b>Statement</b> interface.&nbsp; Recall 
that I told you earlier that the <b>executeUpdate</b> method can be used to 
execute SQL commands that don't return anything.&nbsp;
</p>
<p>We have now reached the point where we want to execute an SQL command that 
does return something.&nbsp; For this, we will invoke the <b>executeQuery</b> 
method on the <b>Statement</b> object.</p>
<p><font color="#FF0000"><b>What does Sun have to say?</b></font></p>
<p>Here is part of what Sun has to say about this method:</p>
<blockquote>
	<p><i>&quot;public ResultSet <b>executeQuery</b>(String&nbsp;sql) throws SQLException</i></p>
	<p><i>Executes the given SQL statement, which returns a single <b>ResultSet</b> 
	object. </i></p>
	<p><i>Parameters: sql - an SQL statement to be sent to the database, 
	typically a static SQL SELECT statement </i></p>
	<p><i>Returns: a <b>ResultSet</b> object that contains the data produced by 
	the given query; never null&quot;</i></p>
</blockquote>
<p>In other words, this method will execute the SQL command on the database and 
encapsulate the returned values in an object of type <b>ResultSet</b>.&nbsp;
</p>
<p><font color="#FF0000"><strong>A ResultSet object</strong></font></p>
<p><strong style="font-weight: 400">A </strong><strong>ResultSet</strong><strong style="font-weight: 400"> 
object provides access to an encapsulated table of data.&nbsp; The object 
maintains a cursor pointing to its current row of data.&nbsp; Initially the 
cursor is positioned before the first row.&nbsp; The </strong><strong>next</strong><strong style="font-weight: 400"> 
method moves the cursor to the next row <i>(similar to an iterator or an 
enumerator in Java).</i></strong><i> </i>
</p>
<p>Once the results are encapsulated in a <b>ResultSet</b> object, the <b>
ResultSet</b> interface provides several methods that can be used to extract the 
information from the object.</p>
<p><font color="#FF0000"><b>Methods of a ResultSet object</b></font></p>
<p>The <b>get</b> methods <i>(such as <b>getString</b>)</i> retrieve column values for the 
current row. You can retrieve values using either the index number of the column 
or the name of the column. I have read that using the column index is more efficient 
but I can't give you a reference on that.</p>
<blockquote>
	<p><i>(Columns are numbered beginning with 1, not with 0.)</i></p>
</blockquote>
<p>For the <b>get</b> methods, the JDBC driver attempts to convert the underlying 
data to the specified Java type and returns a suitable Java value.</p>
<p><font color="#FF0000"><b>The life of a ResultSet object</b></font></p>
<p>A <b>ResultSet</b> object is automatically closed by the <b>Statement</b> object that generated it 
when that <b>Statement</b> object is closed, re-executed, or used to retrieve the next 
result from a sequence of multiple results. </p>

<p><font color="#FF0000"><b>Perform the query</b></font></p>
<p>Listing 26 invokes the <b>executeQuery</b> method to perform the query on the database selecting all columns in all 
rows, and sorting the results in order by the values in the column named <b>
test_id</b>.&nbsp; The results are encapsulated in the <b>ResultSet</b> object 
referred to by the reference variable named <b>rs</b>.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      rs = stmt.executeQuery("SELECT * " +
                "from myTable ORDER BY test_id");<br><br><b><font face="Courier New,Courier">Listing 26</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Display all of the results in the ResultSet object</b></font></p>
<p>Listing 27 uses a <b>while</b> loop to:</p>
<ul>
	<li>Iterate on the <b>ResultSet</b> object one row at a time.</li>
	<li>Invoke the <b>getInt</b> method to get and save the value in the column 
	named <b>test_id</b> for each row.</li>
	<li>Invoke the <b>getString</b> method to get and save the value in the 
	column named <b>test_val</b> for each row.</li>
	<li>Display the two values on a new output line on the screen.</li>
</ul>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      System.out.println(&quot;Display all results:&quot;);
      while(rs.next()){
        int theInt= rs.getInt(&quot;test_id&quot;);
        String str = rs.getString(&quot;test_val&quot;);
        System.out.println(&quot;\ttest_id= &quot; + theInt
                             + &quot;\tstr = &quot; + str);
      }//end while loop
<br><b><font face="Courier New,Courier">Listing 27</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The output</b></font></p>
<p>The output produced by the code in Listing 27 is shown in Figure 7.<br>
</p>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre>Display all results:
test_id= 1 str = One
test_id= 2 str = Two
test_id= 3 str = Three
test_id= 4 str = Four
test_id= 5 str = Five</pre>
      <pre><b>Figure 7</b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#FF0000"><b>Display the data in row number 2</b></font></p>
<p>The code in Listing 28 invokes the <b>absolute</b> method on the same <b>
ResultSet</b> object to get, save, and display the data in the two columns of 
row number 2. </p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      System.out.println(
                        "Display row number 2:");
      if( rs.absolute(2) ){
        int theInt= rs.getInt("test_id");
        String str = rs.getString("test_val");
        System.out.println("\ttest_id= " + theInt
                             + "\tstr = " + str);
      }//end if<br><br><b><font face="Courier New,Courier">Listing 28</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<blockquote>
	<p><i>(Note that row numbers begin with 1 and do not begin with 0 as would 
	be the case in most Java contexts.&nbsp; Although not demonstrated here, the 
	same is true for column numbers.&nbsp; Apparently this is the norm in 
	database work.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>The output</b></font></p>
<p>Figure 8 shows the output produced by the code in Listing 28.<br>
</p>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre>Display row number 2:
test_id= 2 str = Two<br></pre>
      <pre><b>Figure 8</b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#FF0000"><b>Delete the table, close the connection, and 
terminate</b></font></p>
<p>Listing 29 invokes the <b>executeUpdate</b> method to delete the table named
<b>myTable</b> from the database named <b>JunkDB</b>.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      stmt.executeUpdate("DROP TABLE myTable");
      con.close();
    }catch( Exception e ) {
      e.printStackTrace();
    }//end catch
  }//end main
}//end class Jdbc10<br><br><b><font face="Courier New,Courier">Listing 29</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Then Listing 29 closes the connection <i>(logs off the database)</i> and 
terminates the program.<br>
</p>
<center>
<h2><a name="Run the program"></a>Run the Programs</h2>
</center>
<p>I encourage you to download and install the MySQL database server and the 
MySQL connector as described in this lesson.</p>
<p>Then copy the code from the listings near the end of this lesson.&nbsp; 
Execute the batch files.&nbsp; Compile and execute the programs.&nbsp; Experiment with 
the files and the programs, making
changes, and observing the results of your changes. </p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>I showed you how to download, install, and prepare a MySQL database as a <i>
localhost</i> server on a Windows platform for use with JDBC.</p>
<p>Then I showed you how to write three simple JDBC programs to administer the 
database server and to manipulate data stored in a MySQL database. </p><center>
<h2> <a name="Complete Program Listings"></a>Complete Program Listings</h2>
</center>
A complete listing of each of the programs, batch files, and text files 
discussed in this lesson is shown below. <br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>C:\mysql\bin\mysqld-opt --console
pause</pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 30 Contents of MySqlStart.bat</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>C:\mysql\bin\mysqladmin -u root shutdown
pause</pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 31 Contents of MySqlStop.bat</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre><font face="Arial">c:\mysql\bin\mysql --user=root mysql &lt; MySqlCreateDatabase01.txt
pause</font></pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 32 MySqlCreateDatabase01.bat</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>CREATE DATABASE JunkDB;
\q</pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 33 MySqlCreateDatabase01.txt</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre><font face="Arial">c:\mysql\bin\mysql --user=root mysql &lt; MySqlMakeUser01.txt
pause</font></pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 34 MySqlMakeUser01.bat</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP 
ON JunkDB.* 
TO 'auser'@'localhost' 
IDENTIFIED BY 'drowssap';
\q</pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 35 MySqlMakeUser01.txt</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre><font face="Arial">c:\mysql\bin\mysql --user=root mysql &lt; MySqlRemoveUser01.txt
pause</font></pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 36 MySqlRemoveUser01.bat</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre><font face="Arial Narrow">REVOKE ALL PRIVILEGES ON *.* FROM 'auser'@'localhost';
REVOKE GRANT OPTION ON *.* FROM 'auser'@'localhost';
DELETE FROM mysql.user WHERE User='auser' and Host='localhost';
FLUSH PRIVILEGES;
\q</font></pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 37 MySqlRemoveUser01.txt</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre><font face="Arial">c:\mysql\bin\mysql --user=root mysql &lt; MySqlDropDatabase01.txt
pause</font></pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 38 MySqlDropDatabase01.bat</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>DROP DATABASE JunkDB;
\q</pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 39 MySqlDropDatabase01.txt</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File Jdbc11.java
Copyright 2004, R.G.Baldwin
Rev 09/18/04

The purpose of this program is to log onto
the master database named mysql as the default
administrator named root whose password is blank
in order to perform the following updates:

1. Create a new database named JunkDB.
2. Create a new user named auser with a password
   of drowssap with broad access to the
   database named JunkDB.

These two operations produce no visible output
when successful.  However, they produce error
messages in the output when unsuccessful.

This program is the reverse of the program named
Jdbc12, which deletes the database JunkDB and
removes the user named auser.

The MySQL server must be running on localhost
before this program is started.

It is necessary to manually start the MySQL
database server running on localhost. See the
documentation sections 2.2.1.5,Starting the
Server for the First Time and 2.2.1.4 Selecting a
Windows Server. This is accomplished by executing
the following command at the command prompt:

C:\mysql\bin\mysqld-opt --console

Similarly, it is necessary to manually stop the
MySQL database server.  See the documentation
Section 2.2.1.6 Starting MySQL from the Windows
Command Line.  This is accomplished by executing
the following command at the command prompt:

C:\mysql\bin\mysqladmin -u root shutdown

To install the JDBC interface classes, I  copied
the jar file named
mysql-connector-java-3.0.15-ga-bin.jar into the
jre\lib\ext folder of my Java installation.  I
did this to avoid having to make changes to the
classpath.

I am currently running SDK v1.4.2.  When I
upgrade to a newer version of the SDK, it will be
necessary for me to copy the JDBC jar file into
the jre\lib\ext folder for the new version of the
SDK.

This program produces the following output as
a result of a successful run:

Copyright 2004, R.G.Baldwin
URL: jdbc:mysql://localhost:3306/mysql
Connection: com.mysql.jdbc.Connection@1430b5c

Tested using SDK 1.4.2 under WinXP, MySQL
version 4.0.21-win, and JDBC connector
version mysql-connector-java-3.0.15-ga.
************************************************/
import java.sql.*;

public class Jdbc11 {
  public static void main(String args[]){
    System.out.println(
                  "Copyright 2004, R.G.Baldwin");
    try {
      Statement stmt;

      //Register the JDBC driver for MySQL.
      Class.forName("com.mysql.jdbc.Driver");

      //Define URL of database server for
      // database named mysql on the localhost
      // with the default port number 3306.
      String url =
            "jdbc:mysql://localhost:3306/mysql";

      //Get a connection to the database for a
      // user named root with a blank password.
      // This user is the default administrator
      // having full privileges to do anything.
      Connection con =
                     DriverManager.getConnection(
                                 url,"root", "");

      //Display URL and connection information
      System.out.println("URL: " + url);
      System.out.println("Connection: " + con);

      //Get a Statement object
      stmt = con.createStatement();

      //Create the new database
      stmt.executeUpdate(
                       "CREATE DATABASE JunkDB");
      //Register a new user named auser on the
      // database named JunkDB with a password
      // drowssap enabling several different
      // privileges.
      stmt.executeUpdate(
          "GRANT SELECT,INSERT,UPDATE,DELETE," +
          "CREATE,DROP " +
          "ON JunkDB.* TO 'auser'@'localhost' " +
          "IDENTIFIED BY 'drowssap';");
      con.close();
    }catch( Exception e ) {
      e.printStackTrace();
    }//end catch
  }//end main
}//end class Jdbc11</pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 40 Jdbc11.java</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File Jdbc12.java
Copyright 2004, R.G.Baldwin
Rev 09/18/04

The purpose of this program is to log onto
the master database named mysql as the default
administrator named root whose password is blank
in order to perform the following updates:

1. Remove a user named auser.
2. Delete a database named JunkDB.

These two operations produce no visible output
when successful.  However, they produce error
messages in the output when unsuccessful.

This program is the reverse of the program named
Jdbc11, which creates the database named JunkDB
and registers the user named auser on that
database.

The MySQL server must be running on localhost
before this program is started.

It is necessary to manually start the MySQL
database server running on localhost. See the
documentation sections 2.2.1.5,Starting the
Server for the First Time and 2.2.1.4 Selecting a
Windows Server. This is accomplished by executing
the following command at the command prompt:

C:\mysql\bin\mysqld-opt --console

Similarly, it is necessary to manually stop the
MySQL database server.  See the documentation
Section 2.2.1.6 Starting MySQL from the Windows
Command Line.  This is accomplished by executing
the following command at the command prompt:

C:\mysql\bin\mysqladmin -u root shutdown

To install the JDBC interface classes, I  copied
the jar file named
mysql-connector-java-3.0.15-ga-bin.jar into the
jre\lib\ext folder of my Java installation.  I
did this to avoid having to make changes to the
classpath.

I am currently running SDK v1.4.2.  When I
upgrade to a newer version of the SDK, it will be
necessary for me to copy the JDBC jar file into
the jre\lib\ext folder for the new version of the
SDK.

This program produces the following output as
a result of a successful run:

Copyright 2004, R.G.Baldwin
URL: jdbc:mysql://localhost:3306/mysql
Connection: com.mysql.jdbc.Connection@1430b5c

Tested using SDK 1.4.2 under WinXP, MySQL
version 4.0.21-win, and JDBC connector
version mysql-connector-java-3.0.15-ga.
************************************************/
import java.sql.*;

public class Jdbc12 {
  public static void main(String args[]){
    System.out.println(
                  "Copyright 2004, R.G.Baldwin");
    try {
      Statement stmt;

      //Register the JDBC driver for MySQL.
      Class.forName("com.mysql.jdbc.Driver");

      //Define URL of database server for
      // database named mysql on the localhost
      // with the default port number 3306.
      String url =
            "jdbc:mysql://localhost:3306/mysql";

      //Get a connection to the database for a
      // user named root with a blank password.
      // This user is the default administrator
      // having full privileges to do anything.
      Connection con =
                     DriverManager.getConnection(
                                 url,"root", "");

      //Display URL and connection information
      System.out.println("URL: " + url);
      System.out.println("Connection: " + con);

      //Get a Statement object
      stmt = con.createStatement();

      //Remove the user named auser
      stmt.executeUpdate(
          "REVOKE ALL PRIVILEGES ON *.* " +
          "FROM 'auser'@'localhost'");
      stmt.executeUpdate(
          "REVOKE GRANT OPTION ON *.* " +
          "FROM 'auser'@'localhost'");
      stmt.executeUpdate(
          "DELETE FROM mysql.user WHERE " +
          "User='auser' and Host='localhost'");
      stmt.executeUpdate("FLUSH PRIVILEGES");

      //Delete the database
      stmt.executeUpdate(
                       "DROP DATABASE JunkDB");

      con.close();
    }catch( Exception e ) {
      e.printStackTrace();
    }//end catch
  }//end main
}//end class Jdbc12</pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 41 Jdbc12.java</b></p>
<p>&nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File Jdbc10.java
Copyright 2004, R.G.Baldwin
Rev 09/16/04

The purpose of this program is to test the
ability to use JDBC to access a MySQL database
server on localhost.

The MySQL server must be running on localhost
before this program is started.  In addition, a
database named JunkDB must have been created and
a user named auser must have been registered on
that database with a password of drowssap before
this program is started.

It is necessary to manually start the MySQL
database server running on localhost. See the
documentation sections 2.2.1.5,Starting the
Server for the First Time and 2.2.1.4 Selecting a
Windows Server. This is accomplished by executing
the following command at the command prompt:

C:\mysql\bin\mysqld-opt --console

Similarly, it is necessary to manually stop the
MySQL database server.  See the documentation
Section 2.2.1.6 Starting MySQL from the Windows
Command Line.  This is accomplished by executing
the following command at the command prompt:

C:\mysql\bin\mysqladmin -u root shutdown

You can prepare MySQL for use in three
alternative ways:
1. Using the control program named mysql located
in folder C:\mysql\bin in interactive mode.
2. Using a batch file to start the mysql program
along with a text file to provide the input.
3. By running the Java programs named Jdbc11 and
Jdbc12.

See the MySQL documentation Section 3.5, entitled
Using mysql in Batch Mode, for an explanation of
how to access the MySQL database server using
batch files and text files.

There is one bat file and one txt file used in
each case. The bat file logs into the mysql
monitor program as root having administrator
privileges and points to the txt file, which
provides the commands that are executed by the
monitor program.

The following two files create a new database
named JunkDB. See the documentation Section 3.3,
entitled Creating and Using a Database.

MySqCreateDatabase01.bat
MySqlCreateDatabase01.txt

The following two files make a new user named
auser registered on the database named JunkDB
with a password of drowssap. This user can
access the JunkDB database, but only from
localhost. See the documentation Section 5.6.2,
entitled Adding New User Accounts to MySQL.

MySqlMakeUser01.bat
MySqlMakeUser01.txt

Another way to create the database and register
a user named auser on that database is to run
the Java program named Jdbc11.

The following two files delete the database named
JunkDB. See documentation Section 14.2.8, DROP
DATABASE Syntax.

MySqDropDatabase01.bat
MySqlDropDatabase01.txt

The following two files remove the user named
auser. See the documentation Section 5.6.3,
Removing User Accounts from MySQL.

MySqlRemoveUser01.bat
MySqlRemoveUser01.txt

Another way to delete a database named JunkDB
and remove the user named auser is to run the
program named Jdbc12.

This program:
Accesses the database named JunkDB,
Creates a table named myTable,
Puts five rows of data into the table,
Displays the data,
Deletes the table.

Two different approaches are used to display the
contents of the table. The first approach
displays all of the data in the table. The
second approach displays only the data in a
specific row in the table.

As a precaution, before attempting to create the
new table, the program attempts to delete a table
having the same name. If a table having the same
name already exists as residue from a previous
run, it is deleted. If it doesn't already exist
when the attempt is made to delete it, an
exception is thrown. This exception is simply
caught and ignored.

To install the JDBC interface classes, I copied
the jar file named
mysql-connector-java-3.0.15-ga-bin.jar into the
jre\lib\ext folder of my Java installation. I
did this to avoid having to make changes to the
classpath.

I am currently running SDK v1.4.2. When I
upgrade to a newer version of the SDK, it will be
necessary for me to copy the JDBC jar file into
the jre\lib\ext folder for the new version of the
SDK.

This program produces the following output under
normal conditions where the table named myTable
does not exist when the program is started (the
specifics regarding the Connection object may
vary from one run to the next):

Copyright 2004, R.G.Baldwin
URL: jdbc:mysql://localhost:3306/JunkDB
Connection: com.mysql.jdbc.Connection@1430b5c
java.sql.SQLException: Base table or view not
found message from server: &quot;Unknown table
'mytable'&quot;No existing table to delete
Display all results:
test_id= 1 str = One
test_id= 2 str = Two
test_id= 3 str = Three
test_id= 4 str = Four
test_id= 5 str = Five
Display row number 2:
test_id= 2 str = Two

Tested using SDK 1.4.2 under WinXP, MySQL
version 4.0.21-win, and JDBC connector
version mysql-connector-java-3.0.15-ga.
************************************************/
import java.sql.*;

public class Jdbc10 {
  public static void main(String args[]){
    System.out.println(
                  "Copyright 2004, R.G.Baldwin");
    try {
      Statement stmt;
      ResultSet rs;

      //Register the JDBC driver for MySQL.
      Class.forName("com.mysql.jdbc.Driver");

      //Define URL of database server for
      // database named JunkDB on the localhost
      // with the default port number 3306.
      String url =
            "jdbc:mysql://localhost:3306/JunkDB";

      //Get a connection to the database for a
      // user named auser with the password
      // drowssap, which is password spelled
      // backwards.
      Connection con =
                     DriverManager.getConnection(
                        url,"auser", "drowssap");

      //Display URL and connection information
      System.out.println("URL: " + url);
      System.out.println("Connection: " + con);

      //Get a Statement object
      stmt = con.createStatement();

      //As a precaution, delete myTable if it
      // already exists as residue from a
      // previous run.  Otherwise, if the table
      // already exists and an attempt is made
      // to create it, an exception will be
      // thrown.
      try{
        stmt.executeUpdate("DROP TABLE myTable");
      }catch(Exception e){
        System.out.print(e);
        System.out.println(
                  "No existing table to delete");
      }//end catch

      //Create a table in the database named
      // myTable.
      stmt.executeUpdate(
            "CREATE TABLE myTable(test_id int," +
                  "test_val char(15) not null)");

      //Insert some values into the table
      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                    "test_val) VALUES(1,'One')");
      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                    "test_val) VALUES(2,'Two')");
      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                  "test_val) VALUES(3,'Three')");
      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                   "test_val) VALUES(4,'Four')");
      stmt.executeUpdate(
                "INSERT INTO myTable(test_id, " +
                   "test_val) VALUES(5,'Five')");

      //Get another statement object initialized
      // as shown.
      stmt = con.createStatement(
               ResultSet.TYPE_SCROLL_INSENSITIVE,
                     ResultSet.CONCUR_READ_ONLY);

      //Query the database, storing the result
      // in an object of type ResultSet
      rs = stmt.executeQuery("SELECT * " +
                "from myTable ORDER BY test_id");

      //Use the methods of class ResultSet in a
      // loop to display all of the data in the
      // database.
      System.out.println("Display all results:");
      while(rs.next()){
        int theInt= rs.getInt("test_id");
        String str = rs.getString("test_val");
        System.out.println("\ttest_id= " + theInt
                             + "\tstr = " + str);
      }//end while loop

      //Display the data in a specific row using
      // the rs.absolute method.
      System.out.println(
                        "Display row number 2:");
      if( rs.absolute(2) ){
        int theInt= rs.getInt("test_id");
        String str = rs.getString("test_val");
        System.out.println("\ttest_id= " + theInt
                             + "\tstr = " + str);
      }//end if

      //Delete the table and close the connection
      // to the database
      stmt.executeUpdate("DROP TABLE myTable");
      con.close();
    }catch( Exception e ) {
      e.printStackTrace();
    }//end catch
  }//end main
}//end class Jdbc10</pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<p><b>Listing 42 Jdbc10.java</b></p>
<hr size="3" width="100%" align="center">
<p>Copyright 2004, Richard G. Baldwin.&nbsp; Reproduction in whole or
in
part in any form or medium without express written permission from
Richard
Baldwin is prohibited. </p>
<h4> <a name="About the author"></a>About the author</h4>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i>
is a college professor (at Austin Community College in Austin, TX) and
private consultant whose primary focus is a combination of Java, C#,
and
XML. In addition to the many platform and/or language independent
benefits
of Java and C# applications, he believes that a combination of Java,
C#,
and XML will become the primary driving force in the delivery of
structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects, and he
frequently provides onsite training at the high-tech companies located
in and around Austin, Texas.&nbsp; He is the author of Baldwin's
Programming <a href="http://www.dickbaldwin.com/">Tutorials</a>, which
have gained a worldwide following among experienced and aspiring
programmers. He has also published articles in JavaPro magazine.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University
and has many years of experience in the application of computer
technology
to real-world problems.</i> </p>
<p><i><a href="mailto:Baldwin@DickBaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- <br>
&nbsp; </p>
<br>
<br>
<br>
<br>
</body>
</html>
