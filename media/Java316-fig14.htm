<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
<!-- Template file for code body -->
</head>
<body>
&nbsp;
<table BORDER BGCOLOR="#FFFF99" >
<tr>
<td>
<pre><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>/*PaintTexture01.java 12/12/99
&nbsp;Copyright 1999, R.G.Baldwin
&nbsp;&nbsp;
&nbsp;Illustrates use of a TexturePaint object to fill a&nbsp;
&nbsp;relatively large circle with small tiled instances of a&nbsp;
&nbsp;BufferedImage object.
&nbsp;&nbsp;
&nbsp;The BufferedImage object has a red filled circle on
&nbsp;a square green background.
&nbsp;&nbsp;
&nbsp;Uses code to create the BufferedImage object to&nbsp;
&nbsp;avoid the need to provide an auxiliary image file.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;Draws a 4-inch by 4-inch Frame on the screen.
&nbsp;&nbsp;
&nbsp;Translates the origin to the center of the Frame.
&nbsp;&nbsp;
&nbsp;Draws a pair of X and Y-axes centered on the new
&nbsp;origin.
&nbsp;&nbsp;
&nbsp;Fills a 2-inch diameter circle with small tiled&nbsp;
&nbsp;versions of the BufferedImage object.
&nbsp;&nbsp;
&nbsp;Draws the filled 2-inch diameter circle on the&nbsp;
&nbsp;Frame, centered on the origin.
&nbsp;&nbsp;
&nbsp;Whether the dimensions in inches come out right&nbsp;
&nbsp;or not depends on whether the method&nbsp;
&nbsp;getScreenResolution() returns the correct&nbsp;
&nbsp;resolution for your screen.
&nbsp;&nbsp;
&nbsp;Tested using JDK 1.2.2, WinNT Workstation 4.0
&nbsp;*****************************************/
&nbsp;import java.awt.geom.*;
&nbsp;import java.awt.*;
&nbsp;import java.awt.event.*;
&nbsp;import java.awt.image.*;
&nbsp;&nbsp;
&nbsp;class PaintTexture01{
&nbsp;&nbsp; publicstaticvoid main(String[] args){
&nbsp;&nbsp;&nbsp;&nbsp; GUI guiObj = new GUI();
&nbsp;&nbsp; }//end main
&nbsp;}//end controlling class PaintTexture01
&nbsp;&nbsp;
&nbsp;class GUI extends Frame{
&nbsp;&nbsp; int res;//store screen resolution here
&nbsp;&nbsp; staticfinalint ds = 72;//default scale, 72 units/inch
&nbsp;&nbsp; staticfinalint hSize = 4;//horizonal size = 4 inches
&nbsp;&nbsp; staticfinalint vSize = 4;//vertical size = 4 inches
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; GUI(){//constructor
&nbsp;&nbsp;&nbsp;&nbsp; //Get screen resolution
&nbsp;&nbsp;&nbsp;&nbsp; res = Toolkit.getDefaultToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getScreenResolution();
&nbsp;&nbsp;&nbsp;&nbsp; //Set Frame size
&nbsp;&nbsp;&nbsp;&nbsp; this.setSize(hSize*res,vSize*res);
&nbsp;&nbsp;&nbsp;&nbsp; this.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1999, R.G.Baldwin");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Window listener to terminate program.
&nbsp;&nbsp;&nbsp;&nbsp; this.addWindowListener(new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; publicvoid windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);}});
&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; //Override the paint() method
&nbsp;&nbsp; publicvoid paint(Graphics g){
&nbsp;&nbsp;&nbsp;&nbsp; //Downcast the Graphics object to a&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; // Graphics2D object
&nbsp;&nbsp;&nbsp;&nbsp; Graphics2D g2 = (Graphics2D)g;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Scale device space to produce inches on the
&nbsp;&nbsp;&nbsp;&nbsp; // screen based on actual screen resolution.
&nbsp;&nbsp;&nbsp;&nbsp; g2.scale((double)res/72,(double)res/72);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Translate origin to center of Frame
&nbsp;&nbsp;&nbsp;&nbsp; g2.translate((hSize/2)*ds,(vSize/2)*ds);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Draw x-axis
&nbsp;&nbsp;&nbsp;&nbsp; g2.draw(new Line2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -1.5*ds,0.0,1.5*ds,0.0));
&nbsp;&nbsp;&nbsp;&nbsp; //Draw y-axis
&nbsp;&nbsp;&nbsp;&nbsp; g2.draw(new Line2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,-1.5*ds,0.0,1.5*ds));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Instantiate the main Shape object which is a
&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; circle
&nbsp;&nbsp;&nbsp;&nbsp; Ellipse2D.Double theMainCircle =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Ellipse2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -1.0*ds,-1.0*ds,2.0*ds,2.0*ds);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; double tileSize = 0.25;//size of tiles in the fill
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Instantiate the anchor rectangle. This&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; // determines the size of the tiles containing the
&nbsp;&nbsp;&nbsp;&nbsp; // BufferedImage when the circle is filled.
&nbsp;&nbsp;&nbsp;&nbsp; Rectangle2D.Double anchor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Rectangle2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,(int)(tileSize*ds),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(tileSize*ds));
&nbsp;&nbsp;&nbsp;&nbsp; //Instantiate the TexturePaint object and&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; // populate it with a BufferedImage object.
&nbsp;&nbsp;&nbsp;&nbsp; TexturePaint theTexturePaintObj =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new TexturePaint(getBufferedImage(),anchor);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; g2.setPaint(theTexturePaintObj);//set fill object
&nbsp;&nbsp;&nbsp;&nbsp; g2.fill(theMainCircle);//do the fill
&nbsp;&nbsp;&nbsp;&nbsp; g2.draw(theMainCircle);//draw the filled circle
&nbsp;&nbsp;
&nbsp;&nbsp; }//end overridden paint()
&nbsp;&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; //Method to create and return a BufferedImage
&nbsp;&nbsp; //&nbsp; object
&nbsp;&nbsp; //Returns a BufferedImage consisting of a filled
&nbsp;&nbsp; //&nbsp; red circle on a green square background.
&nbsp;&nbsp; BufferedImage getBufferedImage(){
&nbsp;&nbsp;&nbsp;&nbsp; //Larger images produce better quality.
&nbsp;&nbsp;&nbsp;&nbsp; double imageSize = 10.0;
&nbsp;&nbsp;&nbsp;&nbsp; BufferedImage theBufferedImage =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (BufferedImage)this.createImage(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(imageSize*ds),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(imageSize*ds));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Get a Graphics2D context on the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; BufferedImage object
&nbsp;&nbsp;&nbsp;&nbsp; Graphics2D g2dImage =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theBufferedImage.createGraphics();
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Draw a rectangle on the Graphics2d context&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; // on the BufferedImage and fill it with the color
&nbsp;&nbsp;&nbsp;&nbsp; // green.
&nbsp;&nbsp;&nbsp;&nbsp; Rectangle2D.Double theRectangle =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Rectangle2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,0.0,imageSize*ds,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imageSize*ds);
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.setPaint(new Color(0,255,0));
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.fill(theRectangle);
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.draw(theRectangle);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Draw a circle on the Graphics2d context on the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; // BufferedImage and fill it with the color red.
&nbsp;&nbsp;&nbsp;&nbsp; // This circle will cover the green rectangle.
&nbsp;&nbsp;&nbsp;&nbsp; Ellipse2D.Double circleOntheBufferedImage =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Ellipse2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,0.0,imageSize*ds,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; imageSize*ds);
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.setPaint(new Color(255,0,0));//red
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.fill(circleOntheBufferedImage);
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.draw(circleOntheBufferedImage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; return theBufferedImage;
&nbsp;&nbsp;
&nbsp;&nbsp; }//end getBuffered Image
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;}//end class GUI
&nbsp;//===============================//

</font><b><font size=-1>Figure 14</font></b></font></pre>
</td>
</tr>
</table>

</body>
</html>
