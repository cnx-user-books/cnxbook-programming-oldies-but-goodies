<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">Building the Information Panel for the PictureExplorer GUI</h2>
<i>Learn how to construct a complex panel and add it to a JFrame, including 
event registration using anonymous listener classes, BoxLayout, and resource 
loading via the Class class. </i><p><b>Published:</b>&nbsp; March 19, 2009<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 364</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#What_you_have_learned_so_far">What you have learned from 
		earlier lessons</a></li>
		<li><a href="#What_you_will_learn_in_this_lesson">What you will learn in 
		this lesson</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#A_multimedia_class_library">A multimedia class library</a></li>
	<li><a href="#Software_installation_and_testing">Software installation and 
	testing</a></li>
</ul>
	</li>
	<li><a href="#Preview">Preview</a><ul>
	<li><a href="#A_sample_program">A sample program</a></li>
	<li><a href="#Reducing_the_confusion">Reducing the confusion</a></li>
</ul>
	</li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#The_sample_program_named_Java362a">The sample program named 
	Java362a</a></li>
	<li><a href="#An_overview_of_the_GUI">An overview of the GUI</a></li>
	<li><a href="#The_PictureExplorer_class">The PictureExplorer class</a><ul>
	<li><a href="#The_constructor">The constructor</a></li>
	<li><a href="#The_createWindow_method">The createWindow method</a><ul>
	<li><a href="#The_createInfoPanel_method">The createInfoPanel method</a><ul>
	<li><a href="#The_createLocationPanel_method">The createLocationPanel method</a></li>
	<li><a href="#The_createColorInfoPanel_method">The createColorInfoPanel 
	method</a></li>
</ul>
	</li>
</ul>
	</li>
</ul>
	</li>
</ul>
	</li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p>This lesson is the next in a series <i>(see <a href="#Resources">Resources</a>)</i> 
designed to teach you how to write Java programs to do things like:</p>
<ul>
	<li>Remove <i>redeye</i> from a photographic image.</li>
	<li>Distort the human voice.</li>
	<li>Display one image inside another image.</li>
	<li>Do edge detection, blurring, and other filtering operations on images.</li>
	<li>Insert animated cartoon characters into videos of live humans.</li>
</ul>
<p>If you have ever wondered how to do these things, you've come to the right 
place.</p>
<h3><a name="What_you_have_learned_so_far">What you have learned from earlier 
lessons</a></h3>
<p> If you have studied the <a href="#Resources">earlier lessons</a> in this 
series, you have learned about turtles, worlds, and pictures.&nbsp; You have learned that objects of the <b>Picture</b> 
class are useful for much more than simply serving as living quarters for 
turtles.&nbsp; They are also useful for manipulating images in interesting and 
complex ways.</p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b><font size="3" face="arial">Pixel Editor Program</font></b><br />
  See the lesson titled <font size="3" face="arial"><i>A Pixel Editor Program in 
	Java:&nbsp; Multimedia Programming with Java</i> in <a href="#Resources">
	Resources</a> for a non-trivial application of a <b>PictureExplorer</b> 
	object.</font></td></tr></table>
</td>
</tr>
</table>
<p> <font color="#FF0000"><b>The PictureExplorer class</b></font></p>
<p> In the previous lesson, you learned that an object of the <b>PictureExplorer</b> class 
<i>(see Figure 2)</i> is a GUI that allows you to determine the numeric 
color values for any pixel in a picture by placing a cursor on the pixel.</p>
<p> The pixel position is controlled by clicking or dragging the mouse 
within the picture, clicking buttons in the upper panel, or typing coordinate values 
into text fields.&nbsp; You can zoom in and out to view the pixels in more or less detail and you 
can see the actual color of the pixel displayed in a small colored square.</p>
<p>You learned how the GUI is constructed from a big-picture viewpoint.&nbsp; 
The GUI window is the visual manifestation of a <b>JFrame</b> 
object.&nbsp; You learned how the <b>JFrame</b> object is configured, how the <b>Zoom</b> menu is constructed, and how an 
<b>ActionListener</b> object is 
registered on the items in that menu.</p>
<h3> <a name="What_you_will_learn_in_this_lesson">What you will learn in this 
lesson</a></h3>
<p>In this lesson, you will learn how to construct the <b>infoPanel</b> in the 
NORTH location of the GUI in Figure 2.&nbsp; You will also learn how 
to register event listener objects on the components in that panel making use of 
objects of anonymous classes.</p>
<p>Along the way, you will learn about some other interesting topics 
including:</p>
<ul>
	<li>The use of <b>BoxLayout</b></li>
	<li>The class file naming scheme.</li>
	<li>The use of <b>getResources</b> to get the URL of a file</li>
<li>The use of a class loader to load a resource file</li>
</ul>
<p><font color="#ff0000"><b>Source code listings</b></font></p>
<p>A complete listing of Ericson's <b>PictureExplorer</b> class is provided in 
Listing 31 near the end of the lesson.&nbsp; A complete listing of a very simple program 
named Java362a that I will use to illustrate the behavior of the <b>PictureExplorer</b> 
class is provided in Listing 32.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Screen output produced by the show 
	method. </li>
	<li><a href="#Figure_2">Figure 2</a>. Screen output produced by the explore 
	method. </li>
	<li><a href="#Figure_3">Figure 3</a>. Illustration of the effect of a 
	BoxLayout manager. </li>
	<li><a href="#Figure_4">Figure 4</a>. Class files produced by compiling the 
	PictureExplorer class.<b> </b></li>
	<li><a href="#Figure_5">Figure 5</a>. Image files in Ericson's class 
	library.</li>
	<li><a href="#Figure_6">Figure 6</a>. Another view of the GUI. </li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Background color for first-level 
	code. </li>
	<li><a href="#Listing_2">Listing 2</a>. Background color for second-level 
	code.</li>
	<li><a href="#Listing_3">Listing 3</a>. Background color for third and 
	lower-level code. </li>
	<li><a href="#Listing_4">Listing 4</a>. Private instance variables of the 
	PictureExplorer class. </li>
	<li><a href="#Listing_5">Listing 5</a>. The constructor for the 
	PictureExplorer class. </li>
	<li><a href="#Listing_6">Listing 6</a>. The createWindow method. </li>
	<li><a href="#Listing_7">Listing 7</a>. Beginning of the createInfoPanel 
	method. </li>
	<li><a href="#Listing_8">Listing 8</a>. Call the createLocationPanel method. </li>
	<li><a href="#Listing_9">Listing 9</a>. Beginning of the createLocationPanel 
	method. </li>
	<li><a href="#Listing_10">Listing 10</a>. Create two JLabel objects and one 
	JTextField object. </li>
	<li><a href="#Listing_11">Listing 11</a>. An object of an anonymous class. </li>
	<li><a href="#Listing_12">Listing 12</a>. The displayPixelInformation method</li>
	<li><a href="#Listing_13">Listing 13</a>. Beginning of another overloaded 
	version of the displayPixelInformation method</li>
	<li><a href="#Listing_14">Listing 14</a>. Set the coordinate values in the 
	text fields. </li>
	<li><a href="#Listing_15">Listing 15</a>. Use the color information from the 
	Pixel object. </li>
	<li><a href="#Listing_16">Listing 16</a>. Code executed when coordinates are 
	not in the picture. </li>
	<li><a href="#Listing_17">Listing 17</a>. Notify the image display of the 
	current x and y coordinate values.</li>
	<li><a href="#Listing_18">Listing 18</a>. Register an anonymous 
	ActionListener on the other text field.</li>
	<li><a href="#Listing_19">Listing 19</a>. Call the 
	setUpNextAndPreviousButtons method. </li>
	<li><a href="#Listing_20">Listing 20</a>. Beginning of the 
	setUpNextAndPreviousButtons method. </li>
	<li><a href="#Listing_21">Listing 21</a>. Create the arrow buttons with 
	tooltips. </li>
	<li><a href="#Listing_22">Listing 22</a>. Match the button size to the icon 
	size. </li>
	<li><a href="#Listing_23">Listing 23</a>. Register ActionListener objects on 
	all four buttons. </li>
	<li><a href="#Listing_24">Listing 24</a>. Set the font for the labels on 
	the locationPanel. </li>
	<li><a href="#Listing_25">Listing 25</a>. Create the physical layout of the 
	locationPanel. </li>
	<li><a href="#Listing_26">Listing 26</a>. Create the colorInfoPanel. </li>
	<li><a href="#Listing_27">Listing 27</a>. Beginning of the 
	createColorInfoPanel method. </li>
	<li><a href="#Listing_28">Listing 28</a>. Construct the color display panel 
	and its label. </li>
	<li><a href="#Listing_29">Listing 29</a>. Set fonts, add components to 
	colorInfoPanel, and return.&nbsp; </li>
	<li><a href="#Listing_30">Listing 30</a>. Complete the createInfoPanel 
	method.<b> </b></li>
	<li><a href="#Listing_31">Listing 31</a>. Source code for Ericson's 
	PictureExplorer class.</li>
	
	<li><a href="#Listing_32">Listing 32</a>. Source code for program named 
	Java362a. </li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="A_multimedia_class_library">A multimedia class library</a></h3>
<p>In this series of lessons, I will present and explain many of the classes in 
a multimedia class library that was developed and released under a <b>Creative 
Commons Attribution 3.0 United States License</b> <i>(see <a href="#Resources">
Resources</a>) </i>by Mark Guzdial and Barbara Ericson at Georgia Institute of 
Technology.&nbsp; In doing this, I will also present some interesting sample programs 
that use the library.</p>
<h3><a name="Software_installation_and_testing">Software installation and 
testing</a></h3>
<p>I explained how to download, install, and test the multimedia class library 
in an earlier lesson titled <i>Multimedia Programming with Java, Getting Started 
(see <a href="#Resources">Resources</a>)</i>.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<h3><a name="A_sample_program">A sample program</a></h3>
<p>I will use a very simple program to illustrate the creation of an 
object of the <b>PictureExplorer</b> class.</p>
<p>The sample program <i>(named Java362a)</i> begins by creating a new <b>Picture</b> object with known 
dimensions using input from an image file in the current directory.&nbsp; Then it calls the <b>show</b> method on the object to produce 
the screen output shown in Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Screen output produced by the show method. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <img border="0" src="java364a.jpg" width="469" height="374"></td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Call the explore method</b></font></p>
<p>After that, the program calls the <b>explore</b> method on the <b>Picture</b> 
object to produce the screen output shown in Figure 2.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Screen output produced by the explore 
	method. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <img border="0" src="java364b.jpg" width="394" height="353"></td>
    </tr>
  </tbody>
</table>
</p>
<p><i>(Note that in the screen shot in Figure 2, the GUI has been manually resized 
to make it smaller and the Zoom menu has been opened.)</i></p>
<p>You learned all about the <b>show</b> method of the <b>SimplePicture</b> 
class in earlier lessons.&nbsp; You began learning about the <b>explore</b> method and the <b>PictureExplorer</b> 
class in the previous lesson <i>(see <a href="#Resources">Resources</a>)</i>.</p>
<p><font color="#FF0000"><b>The explore method</b></font></p>
<p>The <b>explore</b> method of the <b>SimplePicture</b> class contains a single 
statement, which instantiates an object of the <b>PictureExplorer</b> class.&nbsp; 
As soon as that object is instantiated, the GUI shown in Figure 2 appears on the 
screen and it remains on the screen until the program is terminated or the user 
clicks the X-button in the upper-right corner of the GUI.</p>

<h3 dir="ltr"><a name="Reducing_the_confusion">Reducing the confusion</a></h3>
<p dir="ltr" align="left">Methods in the <b>PictureExplorer</b> class often call 
other methods that belong to the class.&nbsp; Those methods, in turn, often call 
other methods.&nbsp; Because I will be switching back and forth among code 
fragments extracted from different methods, things can get confusing.&nbsp; I 
will use color in an attempt to reduce the confusion.&nbsp; That is, when one 
method calls another and I need to put the explanation of the first method on 
hold while I explain the code in the second method, I will change the background color 
against which the code fragments are displayed.</p>

<p dir="ltr"><font color="#ff0000"><b>Background color for 
first-level classes, methods and/or constructors</b></font></p>

<p dir="ltr">For example, I will present 
code fragments extracted from Ericson's PictureExplorer class against the 
background color shown in Listing 1.</p>

<p><b><a name="Listing_1">Listing 1</a>. Background color for 
first-level code. </b>

<table bgcolor="#FFFFBB" border="1" cols="1" width="477">
	<tr>
		<td>
		<div align="left">
			<pre>Color = #FFFFBB</pre>
		</div>
		</td>
	</tr>
</table>

<p><font color="#ff0000"><b>Background color for second-level 
methods</b></font></p>

<p>Similarly, I will present code fragments extracted from 
second-level methods against the background color shown in Listing 2.</p>

<p><b><a name="Listing_2">Listing 2</a>. Background color for 
second-level code.</b>

<table bgcolor="#FFEEFF" border="1" cols="1" width="477">
	<tr>
		<td>
		<div align="left">
			<pre>Color = #FFEEFF</pre>
		</div>
		</td>
	</tr>
</table>

<p><font color="#ff0000"><b>Background color for third and lower-level methods</b></font></p>

<p>Finally, I will present code fragments extracted from third-level and 
lower-level code <i>(if any)</i> against the background colors, going from 
left to right, in Listing 3.</p>

<p><b><a name="Listing_3">Listing 3</a>. Background color for 
third and lower-level code. </b>

<table border="1" cols="1" width="477">
	<tr>
		<td bgcolor="#DDFFFF">
		<div align="left">
			<pre>3-#DDFFFF</pre>
		</div>
		</td>
		<td bgcolor="#C1C100">
		<pre>4-#C1C100</pre></td>
		<td bgcolor="#FFCC66">
		<pre>5-#FFCC66</pre></td>
		<td bgcolor="#B1C2BD">
		<pre>6-#B1C2BD</pre></td>
		<td bgcolor="#EEEEEE">
		<pre>7-#EEEEEE</pre></td>
	</tr>
</table>
<p align="left">In the event that I need to distinguish among more than seven 
levels at the same time, I will come up with another color and explain its 
use at the time.</p>
<h2 align="center"> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
</center>
</center>
</center>
</center>
</center>
</center>
</center>
</center>
</center>
</center>
</center>
<h3><a name="The_sample_program_named_Java362a">The sample program named 
Java362a</a></h3>
<p>The purpose of this program is to support an explanation of the <b>
PictureExplorer</b> class.</p>
<p>Normally, I break programs down and explain them in fragments.&nbsp; However, 
this program is short and simple and I explained it in detail in the previous 
lesson <i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; You can view a 
complete listing of the program in Listing 32 near the end of the lesson.</p>
<p><font color="#FF0000"><b>Create a Picture object and display it with the 
explore 
method</b></font></p>
<p>A <b>Picture</b> object having dimensions of 450x345 pixels is created by 
reading an image file from the current directory.&nbsp; The <b>explore</b> 
method is called on the <b>Picture</b> object producing the screen output GUI shown in Figure 
2.</p>
<p>As you learned in the previous lesson, the <b>explore</b> method simply creates a new 
object of the <b>PictureExplorer</b> class.&nbsp; The GUI shown in Figure 2 appears on the 
screen as soon as that object is created.&nbsp; <i>(Again, note that the GUI in 
Figure 2 has been manually resized to make it smaller and the Zoom menu has been 
opened.)</i></p>
<h3><a name="An_overview_of_the_GUI">An overview of the GUI</a></h3>
<p>You also learned in the previous lesson that the onscreen GUI window that you see in Figure 
2 is the visual manifestation of a
<b>JFrame</b> object.&nbsp; Basically, a <b>JFrame</b> object consists of the 
following parts:</p>
<ul>
	<li>A banner at the top containing some built-in control components <i>
	(three buttons on the right and a menu on the left)</i> and optionally a <b>
	String</b> title.</li>
	<li>A rectangular area under the banner that can contain a menu.&nbsp; This 
	area is collapsed if you elect not to provide one or more menus.</li>
	<li>A content area underneath the menu area.</li>
	<li>A border around the outer edges.</li>
</ul>
<p><font color="#FF0000"><b>The content area</b></font></p>
<p>I explained the menu area in some depth in the previous lesson.&nbsp; We will 
be primarily concerned with the content area in this lesson.</p>
<p>The content area <i>(immediately below the menu area)</i> has a default <b>BorderLayout</b> object as the layout 
manager.&nbsp; This layout manager makes it possible to place one component in 
the CENTER and four additional components in the NORTH, SOUTH, EAST, and WEST 
locations.</p>
<p>In the GUI produced by the <b>PictureExplorer</b> class, there is one component in the CENTER and one 
component in the NORTH location.&nbsp; There are no components in the EAST, 
SOUTH, and WEST locations.&nbsp; <i>(Keep in mind that each of the five 
allowable components can themselves contain other components.)</i></p>
<p><font color="#FF0000"><b>A JScrollPane object in the CENTER location</b></font></p>
<p>As I explained in the previous lesson, the component in the CENTER is an object of the <b>JScrollPane</b> class.&nbsp; 
I will have a great deal more to say about this in the next lesson.</p>
<p><font color="#FF0000"><b>A JPanel object in the NORTH location</b></font></p>
<p>The component in the NORTH location of the <b>JFrame</b> object's content 
area is a <b>JPanel</b> object with the layout manager on the panel also set to <b>
BorderLayout</b>.&nbsp; This <b>JPanel</b> object is referred to by a local 
variable named <b>infoPanel</b>.</p>
<p>The <b>infoPanel </b>contains two smaller <b>JPanel</b> 
objects, one in its NORTH location and one in its SOUTH location.&nbsp; There 
are no components in the CENTER, EAST, or WEST locations of this <b>JPanel</b> 
object.</p>
<p>A <b>JPanel</b> object is also a container that can contain other components.&nbsp; 
However, there is no <i>&quot;content pane&quot;</i> associated with a <b>JPanel</b> 
object.&nbsp; Other components are added directly to the <b>JPanel</b> object.</p>
<p><font color="#FF0000"><b>The locationPanel and the colorInfoPanel</b></font></p>
<p>The <b>JPanel</b> object in the NORTH location of the <b>infoPanel</b> is referred to in this 
class as the <b>
locationPanel</b>.&nbsp; The construction of the <b>
locationPanel </b>is very complex with 
various registered listener objects, instantiated from anonymous classes.</p>
<p>The <b>JPanel</b> object in the SOUTH location of the <b>infoPanel</b> is referred to as the <b>colorInfoPanel</b>.&nbsp; The construction 
of the <b>colorInfoPanel </b>is less complex than the construction of the <b>locationPanel</b>.&nbsp; 
Among other things, this panel is completely passive with no registered listener 
objects.&nbsp; Its sole purpose is to display pixel-color information.</p>
<p><font color="#FF0000"><b>The layout manager for the locationPanel</b></font></p>
<p>The layout manager for the <b>locationPanel</b> is an object of the <b>
FlowLayout</b> class.&nbsp; With this layout manager, you can add any number 
of components to the <b>JPanel</b> object and they will position themselves in horizontal 
rows.&nbsp; If there are too many components to fit on one row, some will 
spill over to the next row.&nbsp; You can cause the components on the rows to be 
aligned to the left, the right, or the center.</p>
<p><font color="#FF0000"><b>The population of the locationPanel</b></font></p>
<p>The <b>locationPanel</b> is populated with the following 
components:</p>
<ul>
	<li>A <b>Box</b> object (<i>I will explain this later.)</i></li>
	<li>Some <b>JLabel</b> objects.</li>
	<li>Some <b>JTextField</b> objects.</li>
	<li>Some <b>ImageIcon</b> objects used to put the triangle images on the <i>next</i> and 
	<i>previous</i> buttons on the left and right of the text fields.</li>
	<li>Some <b>JButton</b> objects that constitute the <i>next</i> and <i>previous</i> buttons.</li>
</ul>
<p>There are numerous event handlers registered on various components in the <b>
locationPanel</b>.</p>
<p>You will learn how all of the components are put together, how the event 
handlers are defined, and how they behave 
later in this lesson.</p>
<p><font color="#FF0000"><b>The colorInfoPanel</b></font></p>
<p>The <b>colorInfoPanel</b> is also a <b>JPanel</b> object, and the layout manager for 
the <b>colorInfoPanel</b> is also an object of the <b>FlowLayout</b> class.</p>
<p>As I mentioned earlier, the <b>colorInfoPanel</b> is much simpler than the <b>locationPanel</b> and is 
primarily populated with the following components:</p>
<ul>
	<li>Some <b>JLabel</b> objects.</li>
	<li>Another <b>JPanel</b> object <i>(the small almost-black square in Figure 
	2)</i>.</li>
</ul>
<p>There are no listener objects registered on components on the <b>
colorInfoPanel</b>.</p>
<p>You will also learn how these components are put together later in this lesson.</p>
<h3><a name="The_PictureExplorer_class">The PictureExplorer class</a></h3>
<p>A complete listing of the <b>PictureExplorer</b> class is provided in Listing 
31 near the end of the lesson.&nbsp; I will break the class down and explain it 
in fragments.&nbsp; I explained part of the <b>PictureExplorer</b> class in the 
previous lesson.&nbsp; In this lesson, I will begin with a code fragment 
containing 
the declaration of instance variables, which is shown in Listing 4.</p>
<p><font color="#FF0000">
<b>Private instance variables of the PictureExplorer class</b></font></p>
<p>The <b>PictureExplorer</b> class declares a large number of private instance 
variables and initializes some of them.&nbsp; They are shown in Listing 4 for 
easy reference.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Private instance variables of the 
PictureExplorer class. </b>
<table border="1" cols="1" width="477" bgcolor="#FFFFBB">
  <tbody>
    <tr>
      <td>
      <pre> // current x and y index
 private int xIndex = 0;
 private int yIndex = 0;

 //Main gui variables
 private JFrame pictureFrame;
 private JScrollPane scrollPane;

 //information bar variables
 private JLabel xLabel;
 private JButton xPrevButton;
 private JButton yPrevButton;
 private JButton xNextButton;
 private JButton yNextButton;
 private JLabel yLabel;
 private JTextField xValue;
 private JTextField yValue;
 private JLabel rValue;
 private JLabel gValue;
 private JLabel bValue;
 private JLabel colorLabel;
 private JPanel colorPanel;

 // menu components
 private JMenuBar menuBar;
 private JMenu zoomMenu;
 private JMenuItem twentyFive;
 private JMenuItem fifty;
 private JMenuItem seventyFive;
 private JMenuItem hundred;
 private JMenuItem hundredFifty;
 private JMenuItem twoHundred;
 private JMenuItem fiveHundred;

 /** The picture being explored */
 private DigitalPicture picture;

 /** The image icon used to display the picture */
 private ImageIcon scrollImageIcon;

 /** The image display */
 private ImageDisplay imageDisplay;

 /** the zoom factor (amount to zoom) */
 private double zoomFactor;

 /** the number system to use, 0 means starting at 0,
  *  1 means starting at 1 */
 private int numberBase=0;</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>There's not much to be said about the instance variables at this point.&nbsp; 
We will be referring back to them as the explanation of the <b>PictureExplorer</b> class progresses.</p>
<h4><a name="The_constructor">The constructor</a></h4>
<p>I explained the constructor for the <b>PictureExplorer</b> class in the previous lesson, but I have shown it again in 
Listing 5 for easy reference.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. The constructor for the PictureExplorer</b>
<b>class. </b>
<table border="1" cols="1" width="477" bgcolor="#FFFFBB">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Public constructor
  * @param picture the picture to explore
  */
 public PictureExplorer(DigitalPicture picture){
   // set the fields
   this.picture = picture;
   zoomFactor = 1;

   // create the window and set things up
   createWindow();
 }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Call the
createWindow method</b></font></p>
<p>The constructor saves the incoming parameter, <i>(which refers to the picture 
to be displayed in the content area of the GUI)</i> and sets a value of 1 into 
the instance variable named <b>zoomFactor</b>.&nbsp; Then it calls the <b>
createWindow</b> method where the completion of construction is accomplished.</p>
<p>When the <b>createWindow</b> method returns, 
the constructor returns the new <b>PictureExplorer</b> object's 
reference to 
the <b>explore</b> method of the <b>SimplePicture</b> class <i>(or perhaps from 
a method in a class of your own design)</i> from which the 
constructor was called.&nbsp; However, the 
<b>explore</b> method doesn't save the reference in a named reference variable.&nbsp; 
Therefore, the <b>PictureExplorer</b> object is an anonymous object that 
remains on the screen until the user clicks the X-button in the upper-right 
corner of Figure 2.</p>
<h4><a name="The_createWindow_method">The createWindow method</a></h4>
<p>The <b>createWindow</b> method of the <b>PictureExplorer</b> class is shown in its entirety in Listing 6.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. The createWindow method. </b>
<table border="1" cols="1" width="477" bgcolor="#FFFFBB">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Creates the JFrame and sets everything up
  */
 private void createWindow(){
   // create the picture frame and initialize it
   createAndInitPictureFrame();

   // set up the menu bar
   setUpMenuBar();

   //create the information panel
   createInfoPanel();

   //creates the scrollpane for the picture
   createAndInitScrollingImage();

   // show the picture in the frame at the size it needs
   // to be
   pictureFrame.pack();
   pictureFrame.setVisible(true);
 }//end createWindow method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A sequence of method calls</b></font></p>
<p>As you learned in the previous lesson, the <b>createWindow</b> method consists of:</p>
<ul>
	<li>A sequence of four 
calls to other methods to construct various parts of the <b>PictureExplorer</b> 
	object.</li>
	<li>A call to the <b>pack</b> method to set the <b>JFrame</b> to the correct 
	size.</li>
	<li>A call to the <b>setVisible</b> method to cause 
the <b>JFrame</b> object to become visible on the screen.</li>
</ul>
<p>I explained the following two methods in the previous lesson:</p>
<ul>
	<li><b>createAndInitPictureFrame</b></li>
	<li><b>setUpMenuBar</b></li>
</ul>
<p>I will explain the <b>createInfoPanel</b> method in this lesson and will 
explain the <b>createAndInitScrollingImage</b> method in the next lesson.</p>
<h4><a name="The_createInfoPanel_method">The createInfoPanel method</a></h4>
<p>The beginning of the
<b>createInfoPanel</b> method is shown in the code fragment in Listing 7.&nbsp;
<i>(Note the change in background color, indicating that the discussion has 
moved down one level in the method call stack.)</i></p>
<p>
<b><a name="Listing_7">Listing 7</a>. Beginning of the createInfoPanel method. </b>
<table border="1" cols="1" width="477" bgcolor="#FFEEFF">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Creates the North JPanel with all the pixel location
  * and color information
  */
 private void createInfoPanel(){
   // create the info panel and set the layout
   JPanel infoPanel = new JPanel();
   infoPanel.setLayout(new BorderLayout());

   // create the font
   Font largerFont =
                   new Font(infoPanel.getFont().getName(),
                       infoPanel.getFont().getStyle(),14);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A new JPanel object</b></font></p>
<p>Listing 7 begins by instantiating a new  <b>JPanel</b> object, saving its 
reference in <b>infoPanel</b>, and setting the layout manager to <b>BorderLayout</b>.&nbsp; 
This is all very straightforward code for those who are familiar with Swing GUI 
programming.</p>
<p><font color="#FF0000"><b>A new Font object</b></font></p>
<p>Then Listing 7 instantiates a new <b>Font</b> object and saves its reference 
in <b>largerFont</b>.&nbsp; This is a little more complicated.&nbsp; This 
overloaded version of the <b>Font</b> constructor requires the following 
parameters:</p>
<ul>
	<li>String nameOfTheFont</li>
	<li>int styleOfTheFont</li>
	<li>int sizeOfTheFont in points</li>
</ul>
<p>Rather than coming up with a specific font name and a specific font style, 
Ericson simply used a series of method calls to get the name and the 
style of the default font.&nbsp; Then she specified that the font size should be 
14 points, and passed these values to the constructor for the new <b>Font</b> 
object.&nbsp; That way, she was assured that the specified name and style would 
be compatible with the current operating environment.</p>
<p><font color="#FF0000">
<b>Call the createLocationPanel method</b></font></p>
<p>Then the <b>createInfoPanel</b> method calls the
<b>createLocationPanel </b>method and saves the returned value in the variable 
named <b>locationPanel</b>.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. Call the createLocationPanel method. </b>
<table border="1" cols="1" width="477" bgcolor="#FFEEFF">
  <tbody>
    <tr>
      <td>
      <pre>   JPanel locationPanel = createLocationPanel(largerFont);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This is one of those occasions where we need to put the explanation of the 
current method on hold and explain another method.&nbsp; As mentioned earlier, I 
will also change the background color against which the code fragments are 
displayed to indicate that the discussion is moving one step further down the 
method call stack.</p>
<h4><b><a name="The_createLocationPanel_method">The createLocationPanel method</a></b></h4>
<p>The<b> createLocationPanel</b> method, which is a long and complex method, 
begins in Listing 9.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. Beginning of the createLocationPanel 
method. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Create the pixel location panel
  * @param labelFont the font for the labels
  * @return the location panel
  */
 public JPanel createLocationPanel(Font labelFont){

   // create a location panel
   JPanel locationPanel = new JPanel();
   locationPanel.setLayout(new FlowLayout());
   
   Box hBox = Box.createHorizontalBox();</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The method starts out easy enough by instantiating a new <b>JPanel</b> 
object, saving its reference in the variable named <b>locationPanel</b>, and 
setting the layout manager to <b>FlowLayout</b>.</p>
<p><font color="#FF0000"><b>The FlowLayout manager</b></font></p>
<p><a name="Briefly,_FlowLayout_arranges_components">Briefly, <b>FlowLayout</b> arranges 
components</a> in a row.&nbsp; When there isn't enough room for all the components on 
the current row, the components on the right wrap <i>(much like text in a word 
processor)</i> and move down to the next row.</p>
<p>By default, this layout 
manager has a <i>centered</i> alignment causing the components on each row to be 
centered in the row.&nbsp; <i>(Other alignments such as right and left alignment are 
available.)</i></p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#EEEEEE">
  <b><a name="BoxLayout">BoxLayout</a></b><br />
  For more information on BoxLayout, see 
<font size="3" face="arial">
	<i>Swing from A to Z: Alignment Properties and BoxLayout, Part 1 and Part 2</i> in
	<a href="#Resources">Resources</a>.</font>
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>BoxLayout</b></font></p>
<p>Then the code in Listing 9 becomes somewhat more complicated when a new 
object of the <b>Box</b> class is instantiated and its reference is stored in <b>
hBox</b>.&nbsp; Sun describes the <b>Box</b> class as <i>&quot;A lightweight 
container that uses a <b>BoxLayout</b> object as its layout manager.&quot;</i></p>
<p>Sun partially describes <b>BoxLayout</b> as <i>&quot;A layout manager that allows 
multiple components to be laid out either vertically or horizontally. The 
components <a name="will_not_wrap_">will not wrap </a>so, for example, a vertical arrangement of components 
will stay vertically arranged when the frame is resized.&quot;</i>&nbsp;</p>
<p>Rather than 
trying to explain all of this, I will simply refer you to the
<a href="#Resources">sidebar</a>.&nbsp; I will also provide a screen shot that 
shows the effect of using <b>BoxLayout</b>.</p>
<p><font color="#FF0000"><b>The effect of BoxLayout</b></font></p>
<p>Compare the screen shot of the GUI in Figure 3 with the screen shot in Figure 
2.&nbsp; In Figure 3, the GUI has been resized to make it narrower than in 
Figure 2.</p>
<p>Pay particular attention to the positions of the components in 
the <b>locationPanel</b> and the <b>colorInfoPanel</b> below the menu area.&nbsp;
<i>(The <b>locationPanel</b> is the one that shows the text fields.&nbsp; It is above the <b>
colorInfoPanel</b> that shows the RGB color values.)</i></p>
<p>
 <b><a name="Figure_3">Figure 3</a>. Illustration of the effect of a BoxLayout 
	manager. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <img border="0" src="java364c.jpg" width="247" height="474"></td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The colorInfoPanel has wrapped</b></font></p>
<p>In Figure 2, the black square is at the right end of the text in the <b>
colorInfoPanel</b>.&nbsp; However, in Figure 3, after I resized the GUI and 
there was no longer room for the black square on the same row with the RGB text, 
the black square wrapped and moved down to the center of the next row.&nbsp; This is a 
characteristic of the <b>FlowLayout</b> manager.</p>
<p><font color="#FF0000"><b>No wrapping for the locationPanel</b></font></p>
<p>However, when there was no longer room for the <b>JButton</b> on the right 
side of the rightmost text field in the <b>locationPanel</b>, it simply allowed 
itself to be clipped by the right edge of the GUI.&nbsp; It
<a href="#will_not_wrap_">refused to wrap</a> and drop down to the 
next row.&nbsp; This is one of the characteristics of the <b>BoxLayout</b> 
manager.&nbsp; <i>(Note that when the code in Listing 9 finishes executing, the
<b>Box</b> object has been instantiated but it still hasn't been put to work.)</i></p>
<p><font color="#FF0000">
<b>Create two JLabel objects and one JTextField object</b></font></p>
<p>Although it doesn't show in either Figure 2 or Figure 3 <i>(for different 
reasons)</i>, there is an upper-case &quot;X:&quot; at the left end of the left text field in 
the <b>locationPanel</b>.&nbsp; <i>(It is the counterpart to the upper-case Y 
that you see in Figure 2 and Figure 3 and it is visible in Figure 6.)</i></p>
<p>Listing 10 begins by constructing two <b>JLabel</b> objects containing the 
text strings &quot;X:&quot; and 
&quot;Y:&quot;.&nbsp; They will be positioned to the left of the two <b>JButton</b> objects <i>(with triangular arrows 
that point to the left)</i> later.&nbsp; Each label serves as the label for the 
two buttons and the text field to its right.</p>
<p>
<b><a name="Listing_10">Listing 10</a>. Create two JLabel objects and one 
JTextField object. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre>   // create the labels
   xLabel = new JLabel("X:");
   yLabel = new JLabel("Y:");

   // create the text fields
   xValue = new JTextField(
                 Integer.toString(xIndex + numberBase),6);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A single JTextField object</b></font></p>
<p>Then Listing 10 instantiates a single <b>JTextField</b> object and saves its 
reference in the variable named <b>xValue</b>.</p>
<p>A <b>JTextField</b> object only 
knows how to deal with <b>String</b> data.&nbsp; It doesn't know how to deal 
with any of the numeric types.&nbsp; Therefore, if you are going to use a<b> 
JTextField</b> object to display or receive numeric data, you must convert<b>
</b>between <b>String</b> and numeric data on the way in or on the way out.</p>
<p>The 
<b> 
JTextField</b> constructor that is called in Listing 10 requires a <b>String</b> and an integer as 
incoming parameters.&nbsp; The <b>String</b> specifies the initial text that will be 
displayed in the text field.&nbsp; The integer <i>(6 in this case)</i> specifies 
the width of the text field in characters.</p>
<p><font color="#FF0000"><b>Converting an int value to a String value</b></font></p>
<p>The static <b>toString</b> method of the <b>Integer</b> class shown in 
Listing 10 converts an <b>int</b> value into a <b>String</b> value.&nbsp; The 
variable <b>xIndex</b> contains the current x-coordinate of the cursor <i>(initially 0).</i></p>
<p>The variable <b>numberBase</b> contains either a 0 or a 1 <i>(initially 0)</i>.&nbsp; 
The <b>JTextField</b> object that is instantiated in 
Listing 10 is initialized to show the text character &quot;0&quot;.</p>
<p><font color="#FF0000"><b>Compiled class file names</b></font></p>
<p>Sometimes when analyzing a Java program it is useful to examine the names of 
the class files produced when the program is compiled.&nbsp; Figure 4 shows the 
class files produced by compiling the <b>PictureExplorer</b> class. </p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Class files produced by compiling the 
	PictureExplorer class. </b>
<table border="1" cols="1" width="477
" bgcolor="#EFE9B8" >
  <tbody>
    <tr>
      <td>
      <pre>
PictureExplorer.class

PictureExplorer$PictureExplorerFocusTraversalPolicy.class

PictureExplorer$1.class
PictureExplorer$2.class
PictureExplorer$3.class
PictureExplorer$4.class
PictureExplorer$5.class
PictureExplorer$6.class
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#EEEEEE">
  <b>Top-level and inner classes</b><br />
  For more information on top-level and inner classes, see lessons 1636 through 
	1642 in <a href="#Resources">Resources</a></td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Top-level and inner classes</b></font></p>
<p>If you know the class file naming scheme, you can often tell a lot about how 
a program is organized by examining the names of the class files.&nbsp; For 
example, every class definition produces an output file with an extension of 
.class when the program is compiled.&nbsp; This not only includes <i>top-level</i> 
classes, it also includes <i>inner</i> classes as well.</p>
<p><font color="#FF0000"><b>Top-level class file names</b></font></p>
<p>For example, we know that the Java compiler does not insert dollar sign ($) 
characters into class file names for top-level classes.&nbsp; There is only one 
file name in Figure 4 that doesn't include a $.&nbsp; Therefore, that class <i>
(PictureExplorer)</i> must be a top-level class.&nbsp; <i>(We know that it is 
because that is the name of the top-level class that we are analyzing:&nbsp; <b>
PictureExplorer</b>.)</i></p>
<p><font color="#FF0000"><b>Inner class file names</b></font></p>
<p>We also know that the compiler does insert $ characters into the class file 
names for all inner classes.</p>
<p>There are several kinds of inner classes:</p>
<ul>
	<li>Member classes</li>
	<li>Local classes</li>
	<li>Anonymous classes</li>
</ul>
<p><font color="#FF0000"><b>Member classes</b></font></p>
<p>A member class is a class that is defined inside a class but not inside a 
method of the class.&nbsp; Every member class must have a name, and the name is 
reflected in the class file name following the $ character.</p>
<p>There is only 
one such class file in Figure 4 and the name following the $ is <b>
PictureExplorerFocusTraversalPolicy</b>.&nbsp; Therefore, this must be a member 
class, and we know that it is from a discussion in the previous lesson.&nbsp; It is a private member class, which is the only way that a class 
definition can be declared private.</p>
<p><font color="#FF0000"><b>Class file names for local classes and anonymous 
classes</b></font></p>
<p>The water gets a little murkier when we talk about the class file names for 
local classes and anonymous classes.&nbsp; We know that the <span lang="en-us">
</span>file names will 
always contain a $ followed by a number for both local classes and anonymous 
classes.&nbsp; However, for local classes, the class file name will also contain 
another $ followed by a class name.</p>
<p>There are no file names in Figure 4 
meeting that description, so the remaining six class files in Figure 4 must have been 
created by the compilation of six different anonymous classes.</p>
<p><font color="#FF0000">
<b>An object of an anonymous class</b></font></p>
<p>This is where things get really interesting.&nbsp; The source code for one of 
the anonymous classes identified in Figure 4 is shown in Listing 11.&nbsp; <i>
(Recall that we are still discussing the method named <b>CreateLocationPanel</b>.)</i></p>
<p>
<b><a name="Listing_11">Listing 11</a>. An object of an anonymous class. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre>   xValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
       displayPixelInformation(
                       xValue.getText(),yValue.getText());
     }
   });</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The syntax for instantiating objects of anonymous classes is extremely ugly 
but I will try to explain the meaning of the code in Listing 11.</p>
<p><font color="#FF0000"><b>Register an ActionListener object</b></font></p>
<p>To begin with, Listing 11 calls the <b>addActionListener</b> method on a 
reference to the <b>JTextField</b> object that was instantiated in Listing 10.&nbsp; 
The purpose of this method call is to register an <b>ActionListener</b> object 
on the text field to respond to action events fired by the text field.&nbsp; <i>
(For example, a <b>JTextField</b> object will fire an action event when the user 
presses the Enter key while the text field has the focus.)</i></p>
<p>A valid <b>ActionListener</b> object must be an object instantiated from a 
class that implements the <b>ActionListener</b> interface.</p>
<p>Listing 11 defines an anonymous class and instantiates an object of that 
class in the parameter list of the <b>addActionListener</b> method.&nbsp; </p>
<p><font color="#FF0000"><b>How to interpret this code - an unnamed class</b></font></p>
<p>You 
can interpret the code in Listing 11 in the following way.&nbsp; A new object is instantiated 
from an unnamed class that implements the <b>ActionListener</b> interface.&nbsp; 
That object's reference is passed as a parameter to the <b>addActionListener</b> 
method.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#EEEEEE">
  <b>The actionPerformed method</b><br />
  The only method declared in the <b>ActionListener</b> interface is the method 
	named <b>actionPerformed</b>.&nbsp; Any class that implements a method must 
	define all of the methods declared in the interface.</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Must define the actionPerformed method</b></font></p>
<p>Because the unnamed class implements the <b>ActionListener</b> interface, it 
must provide a concrete definition of the <b>action Performed</b> method, which 
it does.</p>
<p>The definition of the <b>actionPerformed</b> method is embedded 
in the middle of the code in Listing 11.&nbsp; The body of the method consists 
of a single statement, which is a call to another method named <b>
displayPixelInformation</b>.</p>
<h4><a name="An_overloaded_displayPixelInformation_method">An overloaded displayPixelInformation method</a></h4>
<p>It's time to change background colors again so that I can put the <b>
createLocationPanel</b> method on hold while I explain the call to the <b>
displayPixelInformation</b> method.</p>
<p>The <b>PictureExplorer</b> class defines three overloaded versions of methods 
named <b>displayPixelInformation</b>.&nbsp; The basic purpose of all three 
methods is to get and display red, green, and blue color data in the <b>
colorInfoPanel</b> shown below the two text fields in Figure 2.</p>
<p>The version of the <b>
displayPixelInformation</b> method that is called in 
Listing 11 is shown in its entirety in Listing 12.</p>
<p>
<b><a name="Listing_12">Listing 12</a>. The displayPixelInformation method</b><table border="1" cols="1" width="477" bgcolor="#C1C100">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to display the pixel information from the
  * passed x and y but also converts x and y from strings
  * @param xString the x value as a string from the user
  * @param yString the y value as a string from the user
  */
 public void displayPixelInformation(
                          String xString, String yString){
   int x = -1;
   int y = -1;
   try {
     x = Integer.parseInt(xString);
     x = x - numberBase;
     y = Integer.parseInt(yString);
     y = y - numberBase;
   } catch (Exception ex) {
   }

   if (x &gt;= 0 && y &gt;= 0) {
     displayPixelInformation(x,y);
   }
 }//end displayPixelInformation method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Called when the text field fires an action event</b></font></p>
<p>The <b>actionPerformed</b> method in Listing 11 is called when the user presses the Enter key 
while the left text field in Figure 2 
has the focus.&nbsp; </p>
<p>The <b>displayPixelInformation </b>method in Listing 12 is 
called by the <b>actionPerformed</b> method.&nbsp; </p>
<p>This version of the method requires two <b>String</b> references as incoming 
parameters.&nbsp; The <b>actionPerformed</b> method passes the text contents of 
both text fields when this method is called.</p>
<p>This makes it possible for the user to type a coordinate 
value into the text field, press the Enter key, and cause the <b>displayPixelInformation</b> 
method to be called to act on that data.</p>
<p><font color="#FF0000"><b>Convert the two strings to numeric coordinates</b></font></p>
<p>The purpose of the code in Listing 12 is to:</p>
<ul>
	<li>Convert the two <b>String</b> 
parameter values into integer x 
and y coordinate values.</li>
	<li>Pass the two coordinate values to another 
overloaded version of the <b>displayPixelInformation</b> method near the end of 
Listing 12.</li>
</ul>
<p><font color="#FF0000"><b>Complicated by numberBase considerations</b></font></p>
<p>The code in Listing 12 is complicated by the fact that the class is written 
to support the use of coordinate values that begin with 0, or coordinate 
values that begin with 1.&nbsp; <i>(However, the <b>numberBase</b> variable, 
which distinguishes between the two alternatives, is set to 0 when an object of 
the <b>PictureExplorer</b> class is instantiated.)</i></p>
<p>Other than the complication attributable to the number base, you should have no difficulty understanding the 
code in Listing 12 that converts the <b>String</b> values in the two text fields 
into coordinate values of type <b>int</b> and passes those coordinate values in 
a call to another overloaded version of the <b>displayPixelInformation</b> 
method.</p>
<h4><a name="Another_overloaded_displayPixelInformation_method">Another overloaded displayPixelInformation method</a></h4>
<p>Once again, it's time to change colors as I put the
<b>displayPixelInformation</b> method in Listing 12 on hold while I explain the 
call to another overloaded version of the <b>displayPixelInformation</b> method.</p>
<p>This version begins in Listing 13.&nbsp; This version is considerably more 
complex than the one in Listing 12, so I will break it down and explain it in 
fragments.</p>
<p>
<b><a name="Listing_13">Listing 13</a>. Beginning of another overloaded version of the 
displayPixelInformation method</b><table border="1" cols="1" width="477" bgcolor="#FFCC66">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to display pixel information for the passed x
  * and y
  * @param pictureX the x value in the picture
  * @param pictureY the y value in the picture
  */
 private void displayPixelInformation(
                              int pictureX, int pictureY){
   // check that this x and y is in range
   if (isLocationInPicture(pictureX, pictureY)){
     // save the current x and y index
     xIndex = pictureX;
     yIndex = pictureY;

     // get the pixel at the x and y
     Pixel pixel = new Pixel(picture,xIndex,yIndex);
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Confirm that the coordinates are in the picture</b></font></p>
<p>The method begins by calling a method named <b>isLocationInPicture</b> to 
confirm that the incoming coordinate values are actually within the height and 
width of the picture.&nbsp; The code in this method is so simple that I'm not 
going to show it here.&nbsp; You can view the method in Listing 31 near the end 
of the lesson.&nbsp; If the coordinate values are in the picture, the method 
returns true, and returns false otherwise.</p>
<p><font color="#FF0000"><b>When the coordinates are in the picture...</b></font></p>
<p>When the method returns true, the remaining code in Listing 13 is executed.</p>
<p>Listing 13 saves the coordinate values 
in a pair of instance variables named <b>xIndex</b> and <b>yIndex</b>.&nbsp; <i>
(If they are not in the picture, they are not saved.)</i></p>
<p><font color="#FF0000"><b>Get and save a reference to a Pixel object</b></font></p>
<p>Then Listing 13 calls the <b>getPixel</b> method to get and save a reference 
to a <b>Pixel</b> object that contains the red, green, and blue color values in 
the pixel at that location in the picture.&nbsp; The values will be used later, 
<i>(but not in the next code fragment)</i>.</p>
<p><font color="#FF0000">
<b>Set the coordinate values in the text fields</b></font></p>
<p>This overloaded version of the <b>displayPixelInformation</b> method is not only 
called when the user presses the Enter key while the 
text field has the focus, it is also called when the user moves the cursor within 
the picture using some other method, such as clicking the picture with the 
mouse, for example.</p>
<p><font color="#FF0000"><b>The text fields serve a dual purpose</b></font></p>
<p>In all cases, the text fields are updated to display 
the new coordinate values.&nbsp; Hence they serve a dual purpose:</p>
<ul>
	<li>They make it possible to manually enter coordinate values by typing.</li>
<li>They provide a display of coordinate values when those values are changed in 
some other manner.</li>
</ul>
<p><font color="#FF0000"><b>Update the contents of the text fields</b></font></p>
<p>The contents of the text fields are updated by the code in Listing 14, 
which converts the current coordinate values to <b>String</b> objects and uses those 
objects to set the text in the text fields.</p>
<p>
<b><a name="Listing_14">Listing 14</a>. Set the coordinate values in the text 
fields. </b>
<table border="1" cols="1" width="477" bgcolor="#FFCC66">
  <tbody>
    <tr>
      <td>
      <pre>     // set the values based on the pixel
     xValue.setText(Integer.toString(
                                   xIndex  + numberBase));
     yValue.setText(Integer.toString(
                                    yIndex + numberBase));
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Use the color information from the Pixel object</b></font></p>
<p>The code in Listing saved a reference to a <b>Pixel</b> object containing color 
information for the pixel at the location of the current coordinate values.&nbsp; Listing 15 
uses that information for two different purposes.</p>
<p>
<b><a name="Listing_15">Listing 15</a>. Use the color information from the Pixel 
object. </b>
<table border="1" cols="1" width="477" bgcolor="#FFCC66">
  <tbody>
    <tr>
      <td>
      <pre>     rValue.setText("R: " + pixel.getRed());
     gValue.setText("G: " + pixel.getGreen());
     bValue.setText("B: " + pixel.getBlue());
     
     colorPanel.setBackground(new Color(pixel.getRed(),
                                        pixel.getGreen(),
                                        pixel.getBlue()));
   }//end if</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Construct the String color values</b></font></p>
<p>The first purpose is to:</p>
<ul>
	<li>Extract the numeric values for the red, green, and 
blue color components.</li>
	<li>Use that information to construct three <b>String</b> 
objects.</li>
	<li>Store the String object's references in the instance variables named <b>rValue</b>,
	<b>gValue</b>, and <b>bValue</b>.</li>
</ul>
<p>These three strings will be used to 
display the red, green, and blue color values later when the <b>colorInfoPanel</b>, 
shown below the text fields in Figure 2, is updated.</p>
<p><font color="#FF0000"><b>Color the small square</b></font></p>
<p>The second purpose is to set the background color for the small colored square, 
shown beneath the right-most text field in Figure 2.&nbsp; The color of the 
square is set to match the color of the 
pixel at the current coordinates.</p>
<p><font color="#FF0000"><b>The end of the if statement</b></font></p>
<p>Listing 15 signals the end of the <b>if</b> statement that began in Listing 
13.&nbsp; All of the code in the <b>if</b> clause is executed if the current 
coordinates are within the bounds of the picture.</p>
<p><font color="#FF0000">
<b>Code executed when coordinates are not in the picture</b></font></p>
<p>Listing 16 shows the <b>else</b> clause that is executed when the current 
coordinates are not within the bounds of the picture.</p>
<p>
<b><a name="Listing_16">Listing 16</a>. Code executed when coordinates are not 
in the picture. </b>
<table border="1" cols="1" width="477" bgcolor="#FFCC66">
  <tbody>
    <tr>
      <td>
      <pre>
   else{
     clearInformation();
   }//end else
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 16 calls a method named <b>clearInformation</b>.&nbsp; This is 
another method that is too simple to warrant showing here.&nbsp; Once again, you 
can view the code for the <b>clearInformation</b> method in Listing 31 near the 
end of the lesson.</p>
<p>The <b>clearInformation</b> method sets the string &quot;N/A&quot; into both text 
fields and causes that same string to be set in all three color values the next 
time the <b>colorInfoPanel</b> is updated.&nbsp;</p>
<p>It sets the color of the 
colored square in Figure 2 to black and resets the current coordinate values to 
0,0.</p>
<p><font color="#FF0000"><b>Notify the image display of the current coordinates</b></font></p>
<p>Finally, Listing 17 calls two <i>set</i> methods on the image display in the 
CENTER of the <b>JFrame</b>, passing the product of the current coordinate values and 
the <b>zoomFactor</b>.&nbsp; You will see how that information is 
used in a future lesson when we examine the <b>ImageDisplay</b> class.</p>
<p>
<b><a name="Listing_17">Listing 17</a>. Notify the image display of the current x and y 
coordinate values.</b><table border="1" cols="1" width="477" bgcolor="#FFCC66">
  <tbody>
    <tr>
      <td>
      <pre>
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
 }//end displayPixelInformation method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The end of the displayPixelInformation method</b></font></p>
<p>Listing 17 also signals the end of this version of the <b>displayPixelInformation</b> 
method.&nbsp; This causes control to return to the other version of the <b>displayPixelInformation</b> 
method shown in Listing 12 from which this method is called.</p>
<p><font color="#FF0000"><b>Terminate immediately</b></font></p>
<p>The <b>displayPixelInformation</b> method shown in Listing 12 has nothing 
more to do, so it terminates immediately returning control to the <b>actionPerformed</b> 
method in the anonymous <b>ActionEvent</b> handler in Listing 11.</p>
<p><font color="#FF0000"><b>The action event handler has completed its task</b></font></p>
<p>The <b>actionPerformed</b> method also has nothing more to do, so it also terminates 
immediately.</p>
<p><font color="#FF0000"><b>Wait for the next event</b></font></p>
<p>When the <b>actionPerformed</b> method has been called and then terminates, 
the GUI essentially goes into a quiescent state, waiting for the next event to 
be fired by some component and handled by some event handler that is registered 
on that component.</p>
<p><font color="#FF0000">
<b>Register an anonymous ActionListener on the other text field</b></font></p>
<p>That brings us back to the <b>createLocationPanel</b> method, <i>(see Listing 
11)</i> which continues 
in Listing 18.</p>
<p>
<b><a name="Listing_18">Listing 18</a>. Register an anonymous ActionListener on 
the other text field. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre>   yValue = new JTextField(
                 Integer.toString(yIndex + numberBase),6);
   yValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
      displayPixelInformation(
                       xValue.getText(),yValue.getText());
     }
   });</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 18 instantiates and registers an anonymous <b>ActionListener</b> 
object on the right-most <b>JTextField</b> object shown in Figure 2.</p>
<p><font color="#FF0000"><b>Behavior almost same as before</b></font></p>
<p>The 
behavior of this listener object is essentially the same as the behavior of the listener object 
registered on the leftmost <b>JTextField</b> object, except that in this case, we 
are talking about entering a y coordinate value into the text field instead of 
an x coordinate value.</p>
<p>Note that the single statement in the <b>actionPerformed</b> method in 
Listing 18 is identical to the corresponding statement in the <b>actionPerformed</b> 
method in Listing 11.&nbsp; Therefore, it doesn't matter which <b>JTextField</b> 
object fires an action event, the behavior is the same from the point where the
<b>displayPixelInformation</b> method is called.</p>
<h4><a name="The_setUpNextAndPreviousButtons_method">The setUpNextAndPreviousButtons method</a></h4>
<p>Recall that we are still discussing the <b>createLocationPanel</b> method.&nbsp; Listing 19 makes a call to a 
method named
<b>setUpNextAndPreviousButtons</b> to prepare the four buttons located on either 
side of the two text fields in Figure 2 for use.</p>
<p>
<b><a name="Listing_19">Listing 19</a>. Call the setUpNextAndPreviousButtons 
method. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre>
   setUpNextAndPreviousButtons();</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The
<b>setUpNextAndPreviousButtons</b> method is a huge and complex method, so it's time to 
change colors again, put the <b>createLocationPanel</b> method back on hold, and 
begin explaining the method named
<b>setUpNextAndPreviousButtons</b>.</p>
<p><font color="#FF0000">
<b>Beginning of the setUpNextAndPreviousButtons method</b></font></p>
<p>The
<b>setUpNextAndPreviousButtons</b> method begins in Listing 20.</p>
<p>
<b><a name="Listing_20">Listing 20</a>. Beginning of the setUpNextAndPreviousButtons 
method. </b>
<table border="1" cols="1" width="477" bgcolor="#C1C100">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to set up the next and previous buttons for the
  * pixel location information
  */
 private void setUpNextAndPreviousButtons()
 {
   // create the image icons for the buttons
   Icon prevIcon = new ImageIcon(
         SoundExplorer.class.getResource("leftArrow.gif"),
                                        "previous index");
   Icon nextIcon = new ImageIcon(
        SoundExplorer.class.getResource("rightArrow.gif"),
                                            "next index");</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#EEEEEE">
  <b>The class named Class</b><br />
  See the lesson titled
<font size="3" face="arial">
	<i>The Essence of OOP using Java: Static Members</i> in <a href="#Resources">
	Resources</a> for more information on the class named <b>Class</b></font>.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>The class named Class</b></font></p>
<p>There is a class named <b>Class</b>, which provides methods for doing a 
number of interesting things.</p>
<p>The code in Listing 20 gets complicated very quickly with the call to 
the <b>getResources</b> method of the class named <b>Class</b>.</p>
</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#EEEEEE">
  <b>Viewer Warning</b><br />
  The next several paragraphs will discuss and attempt to explain some complex technical issues.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>We need two ImageIcon objects</b></font></p>
<p>All four of the buttons in the locationPanel in Figure 2 have triangular 
images on them that serve as arrows.&nbsp; To cause an image to be displayed on 
a <b>JButton</b> object, you need for the image to be encapsulated in an object 
of a class that implements the <b>Icon</b> interface.&nbsp; One such class is 
the <b>ImageIcon</b> class.</p>
<p>What we are going to do here is to get references to two <b>ImageIcon</b> objects 
to place on the <b>JButton</b> objects that you see on either side of the <b>
JTextField</b> objects in Figure 2.&nbsp; The <b>ImageIcon</b> objects should 
encapsulate images of arrows that point to the left and to the right.</p>
<p><font color="#FF0000"><b>Image files containing the required images</b></font></p>
<p><a name="A_pair_of_image_files">A pair of image files</a> named <b>leftArrow.gif</b> 
and <b>rightArrow.gif</b>, containing the required images, are included in Ericson's multimedia class library.&nbsp; 
Screen shots of the two images are shown in Figure 5.</p>



<p><b><a name="Figure_5">Figure 5</a>. Image files in Ericson's class 
library.</b>

<table border="1" bgcolor="#EFE9B8" >
	<tr>
		<td><img border="0" src="java364d.gif" width="27" height="27"></td>
		<td><img border="0" src="java364e.gif" width="27" height="27"></td>
	</tr>
</table>

</p>


<p>Our challenge is to find a <i>(hopefully)</i> reliable way to instantiate <b>
ImageIcon</b> objects containing those two images.</p>
<p><font color="#FF0000"><b>The ImageIcon class</b></font></p>
<p>The <b>ImageIcon</b> class contains nine overloaded constructors as of Java 
version 1.6.</p>
<p>One of those constructors requires the name of an image file as a parameter.&nbsp; 
It extracts the image from the file and encapsulates it in the <b>ImageIcon</b> 
object.&nbsp; At first blush, this seems like a reasonable approach.&nbsp; 
However, the problem with this approach for the current objective is that the 
program must know the location of the image file on the disk.</p>
<p><font color="#FF0000"><b>The image files may be anywhere</b></font></p>
<p>In our case, the two image files are located in Ericson's class library and 
the location of the class library on any particular computer is not known at the 
time the program is being written.&nbsp; All the programmer knows is that the 
class library must be somewhere on the classpath in order for other things to 
work properly.</p>
<p><font color="#FF0000"><b>Solution:&nbsp; to find image files on the classpath</b></font></p>
<p>What we need then, is a programming solution that can find the two image 
files on the classpath and then use them to create the required <b>ImageIcon</b> 
objects.&nbsp; The code in Listing 20 provides such a solution.</p>
<p><font color="#FF0000"><b>A different ImageIcon constructor</b></font></p>
<p>The <b>ImageIcon</b> constructor that is called twice in Listing 20 requires 
two incoming parameters:</p>
<ul>
	<li><b>URL location</b> - the location of an image file <i>(in the form of a 
	reference to an object of type <b>URL</b>)</i> that specifies the location 
	of the image file that will be used to instantiate the <b>ImageIcon</b> 
	object.</li>
	<li><b>String description </b> - a brief textual description of the 
	image.</li>
</ul>
<p><font color="#FF0000"><b>Our objective is clear</b></font></p>
<p>Our objective is to specify the locations <i>(in the form of references to URL 
objects)</i> for 
each of the two files listed <a href="#A_pair_of_image_files">above</a> and to 
pass the two URL references to the constructor for the <b>ImageIcon</b> class, 
once for each <b>ImageIcon</b> object being constructed.</p>
<p><font color="#FF0000"><b>The class named Class to the rescue</b></font></p>
<p>Fortunately, the class named <b>Class</b> provides a static method named <b>
getResources</b> that we can use for that purpose.&nbsp; The <b>getResources</b> 
method will search for a resource file with a specified name and return the 
location of that file as type <b>URL</b>.</p>
<p><font color="#FF0000"><b>The search procedure</b></font></p>
<p>Exactly how the <b>getResources</b> method goes about conducting the search 
is a complex issue.&nbsp; For the purposes of this lesson, suffice it to say 
that by default, directories on the classpath are included in the search and 
they are searched in the order that they appear in the classpath.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#EEEEEE">
  <b>Forcing a failure</b><br />
  The classpath on my computer causes the current directory to be searched 
	first.&nbsp; Therefore, I can force a failure by placing a dummy file named 
	leftArrow.gif in the current directory for the program that calls the <b>
	explore</b> method of the <b>Picture</b> class.</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b><a name="A_word_of_caution">A word of caution</a></b></font></p>
<p>The URL for the first file that is found with the matching name will be 
returned by the <b>getResources</b> method, even if it is not the correct file.&nbsp; 
Therefore, you must be careful not to have two or more resource files with the same 
name on the classpath, or at least the order of directories in the classpath 
must be such that the correct resource file will be found first.</p>
<p><font color="#FF0000"><b>For whatever its worth - the URL toString method 
output</b></font></p>
<p>In case you are interested, the overridden <b>toString</b> method of the URL 
class returns the following string when I use the <b>getResources</b> method to 
get the URL of the file named leftArrow.gif.</p>
<p><pre><b>file:/M:/Ericson/bookClasses/leftArrow.gif</b></pre></p>
<p>However, I have always thought of the URL as looking more like the following:</p>
<p><pre><b>file:///M:/Ericson/bookClasses/leftArrow.gif</b></pre></p>
<p><font color="#FF0000"><b>Why reference the SoundExplorer.class</b></font></p>
<p>Although I have explained the general concepts behind the code in Listing 20, 
I still haven't explained the strange syntax used in the code in Listing 20.&nbsp; 
An interesting question is, &quot;Why did Ericson make a reference to the class named
<b>SoundExplorer</b> in the <b>PictureExplorer</b> class, which has nothing to 
do with sound?&quot;</p>
<p><font color="#FF0000"><b>A speculative answer</b></font></p>
<p>My guess is that the <b>SoundExplorer</b> class was probably developed first 
and the&nbsp; <b>PictureExplorer</b> class was developed using the source code 
from the <b>SoundExplorer</b> class as a starting point.&nbsp; The reference to 
the <b>SoundExplorer</b> class may simply have been left over in that process.</p>
<p><font color="#FF0000"><b>Any Class object will do the job</b></font></p>
<p>The code works equally well if the reference to the <b>SoundExplorer</b> 
class in Listing 20 is replaced by a reference to the <b>PictureExplorer</b> 
class.&nbsp; It also works if the reference is replaced by a reference to the <b>
Picture</b> class, and there are many other possibilities as well.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#EEEEEE">
  <b>Get a reference to a Class object</b><br />
  To learn more about this topic, see the lesson titled
<font size="3" face="arial">
	<i>The Essence of OOP using Java, Array Objects, Part 3</i> in
	<a href="#Resources">Resources</a>.</font>
</td></tr></table>
</td>
</tr>
</table>
<p>The reality is that the <b>getResources</b> method can be called on a 
reference to any object of the <b>Class</b> class.&nbsp; There are several 
approaches to creating such a reference, and each approach works best in some 
particular circumstance.</p>
<p><font color="#FF0000"><b>Append .class to the end of a file name</b></font></p>
<p>One way to create such a reference is to call out the name of an accessible 
class and append &quot;.class&quot; onto the end of the name.&nbsp; This is the approach 
used in Listing 20, which references <b>SoundExplorer.class</b>.</p>
<p>This approach requires that the name of the accessible class is known when 
the program is written.</p>
<p><font color="#FF0000"><b>Use the getClass method</b></font></p>
<p>Another approach is to call the <b>getClass</b> method on any existing 
object.&nbsp; For example, a reference to <b>this.getClass()</b> could be used 
in Listing 20 in place of the reference to the <b>SoundExplorer</b> class.</p>
<p>This approach requires that the name of the reference to an existing object 
be known when the program is written.</p>
<p><font color="#FF0000"><b>Use the forName method</b></font></p>
<p>A third approach is to use a static method of the <b>Class</b> class named <b>
forName</b>.&nbsp; I will leave it as an exercise for the student to follow up 
on this approach.&nbsp; However, I will mention that this approach uses the name 
of a class specified as type <b>String</b>.&nbsp; This makes it possible to 
identify the target class at runtime using input data of type <b>String</b>.</p>
<p><font color="#FF0000"><b>Advantages of the overall approach</b></font></p>
<p>This overall approach, which is based on calling the <b>getResources</b> 
method of the <b>Class</b> class, is very useful for cases where a specific 
resource, <i>(such as a specific image file)</i> or a resource within a specific 
group of resources <i>(such as a group of sound files)</i> will always be required by the 
class.</p>
<p>Using this approach, the resource file or files can be packaged along with the 
compiled class file and will always be available to the program, unless, of 
course, duplicate file names on the classpath cause the problems described
<a href="#A_word_of_caution">earlier</a>.</p>
<p><font color="#FF0000"><b>Use long, complex, and hopefully unique resource file names</b></font></p>
<p>The problems that result from having duplicate file names on the classpath might cause the programmer to consider using long, complex, 
and <i>(hopefully)</i> unique file names for the required resource files that 
are packaged with the class files.&nbsp; <i>(The filename &quot;leftArrow.gif&quot; is not 
a long, complex, and unique file name.)</i></p>
<p><font color="#FF0000"><b>Summary of the code in listing 20</b></font></p>
<p>In summary, each of the statements in Listing 20:</p>
<ul>
	<li>Creates a reference to an object of type <b>Class</b>.</li>
	<li>Calls the <b>getResource</b> method on the <b>Class</b> object's 
	reference to get a reference to a <b>URL</b> object that specifies the 
	location of the specified file in Ericson's class library.</li>
	<li>Passes the <b>URL</b> object's reference, along with a <b>String</b> 
	description, to the constructor for the <b>ImageIcon</b> class in order to 
	instantiate an <b>ImageIcon</b> object that encapsulates the image extracted 
	from the specified image file.</li>
</ul>
<p>And that is probably more than you ever wanted to know about instantiating <b>
ImageIcon</b> objects and the <b>Class</b> class.</p>
<p><font color="#FF0000">
<b>Create the arrow buttons with tooltips</b></font></p>
<p>Listing 21 instantiates four new <b>JButton</b> objects, passing the 
reference to the appropriate <b>ImageIcon</b> object to the constructor in each case.&nbsp; This 
creates the four buttons with the arrows that appear on both sides of each of 
the text fields in Figure 2.</p>

<p>
<b><a name="Listing_21">Listing 21</a>. Create the arrow buttons with tooltips. </b>
<table border="1" cols="1" width="477" bgcolor="#C1C100">
  <tbody>
    <tr>
      <td>
      <pre>   // create the arrow buttons
   xPrevButton = new JButton(prevIcon);
   xNextButton = new JButton(nextIcon);
   yPrevButton = new JButton(prevIcon);
   yNextButton = new JButton(nextIcon);

   // set the tool tip text
   xNextButton.setToolTipText(
                       &quot;Click to go to the next x value&quot;);
   xPrevButton.setToolTipText(
                   &quot;Click to go to the previous x value&quot;);
   yNextButton.setToolTipText(
                       &quot;Click to go to the next y value&quot;);
   yPrevButton.setToolTipText(
                   &quot;Click to go to the previous y value&quot;);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Then Listing 21 calls the <b>setToolTipText</b> four times in succession to 
set tool tips on each of the buttons.&nbsp; If you run the program and allow the 
mouse pointer to hover over the buttons, the text shown in Listing 21 will be 
displayed in the tool tip format.</p>
<p><font color="#FF0000">
<b>Match the button size to the icon size</b></font></p>
<p>Listing 22 gets the width and height of the images in the <b>ImageIcon</b> 
objects <i>(see Figure 5)</i> and uses that information to set the preferred 
size of each of the buttons to the size of the icons.</p>
<p>
<b><a name="Listing_22">Listing 22</a>. Match the button size to the icon size. </b>
<table border="1" cols="1" width="477" bgcolor="#C1C100">
  <tbody>
    <tr>
      <td>
      <pre>   // set the sizes of the buttons
   int prevWidth = prevIcon.getIconWidth() + 2;
   int nextWidth = nextIcon.getIconWidth() + 2;
   int prevHeight = prevIcon.getIconHeight() + 2;
   int nextHeight = nextIcon.getIconHeight() + 2;
   
   Dimension prevDimension =
                      new Dimension(prevWidth,prevHeight);
   Dimension nextDimension =
                     new Dimension(nextWidth, nextHeight);
   xPrevButton.setPreferredSize(prevDimension);
   yPrevButton.setPreferredSize(prevDimension);
   xNextButton.setPreferredSize(nextDimension);
   yNextButton.setPreferredSize(nextDimension);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>When the <b>pack</b> method is called at the end of Listing 6, an attempt 
will be made to accommodate the preferred size of each button when computing the 
required size for the <b>JFrame</b> object to contain all of its components.</p>
<p><font color="#FF0000">
<b>Register ActionListener objects on all four buttons</b></font></p>
<p>Listing 23 instantiates four <b>ActionListener</b> objects from anonymous 
classes and registers them on the four buttons.</p>
<p>
<b><a name="Listing_23">Listing 23</a>. Register ActionListener objects on all 
four buttons. </b>
<table border="1" cols="1" width="477" bgcolor="#C1C100">
  <tbody>
    <tr>
      <td>
      <pre>   // handle previous x button press
   xPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex--;
       if (xIndex &lt; 0)
         xIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle previous y button press
   yPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex--;
       if (yIndex &lt; 0)
         yIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next x button press
   xNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex++;
       if (xIndex &gt;= picture.getWidth())
         xIndex = picture.getWidth() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next y button press
   yNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex++;
       if (yIndex &gt;= picture.getHeight())
         yIndex = picture.getHeight() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });
 }//end setUpNextAndPreviousButtons method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>You should have no difficulty with Listing 23</b></font></p>
<p>Given what you have learned about the instantiation of <b>ActionListener</b> 
objects from anonymous classes and the registration of the action listeners on 
the text fields earlier in this lesson, you should have no difficulty with the 
code in Listing 23.</p>
<p>The overall structure is the same in this case and the last.&nbsp; Of course, the 
behavior of the <b>actionPerformed</b> event handler methods that get called 
when the buttons fire action events is different from the behavior of the same 
methods when the text fields fire action events.</p>
<p><font color="#FF0000"><b>Behavior of the actionPerformed methods</b></font></p>
<p>The purpose of each of the buttons in Figure 2 is to either increment or 
decrement the x or the y coordinate value each time the button fires an action 
event.</p>
<p>Each of the <b>actionPerformed</b> methods in Listing 23 increments or 
decrements a coordinate value, being careful to make certain that the modified 
coordinate value that&nbsp;&nbsp; results is still within the bounds of the image.</p>
<p>Then the <b>actionPerformed</b> method calls the same method 
named <b>displayPixelInformation</b> that I explained in conjunction with 
Listing 13.</p>
<p><font color="#FF0000"><b>Firing an action event</b></font></p>
<p>A <b>JButton</b> object will fire an action event:</p>
<ul>
	<li>When it is clicked by the mouse.</li>
	<li>When the user presses the Enter key while the button has the focus.</li>
</ul>
<p>As you will learn in a future lesson, however, the focus traversal policy that is defined 
for the <b>PictureExplorer</b> class doesn't allow the buttons to gain the focus 
when the user presses the tab key.&nbsp; Repeated pressing of the tab key simply 
causes the focus to ping-pong back and forth between the two text fields.&nbsp; 
Therefore, in this program, the buttons are allowed to fire action events only 
when they are clicked by the mouse.</p>
<p><font color="#FF0000"><b>End of the setUpNextAndPreviousButtons method</b></font></p>
<p>Listing 23 also signals the end of the method named <b>setUpNextAndPreviousButtons</b>.</p>
<p>When all of the code in Listing 23 has been executed, the buttons are set up 
and ready for action.&nbsp; Note, however, that they still haven't been placed 
in their container.</p>
<p>When the method terminates, control returns to the statement immediately 
following the statement in Listing 19, which is contained in the method named <b>
createLocationPanel</b>.&nbsp; Therefore, it is time to change background 
colors again and resume the explanation of that method.</p>
<p><font color="#FF0000">
<b>Set the font for the labels on locationPanel</b></font></p>
<p>The code in Listing 7 instantiates a new <b>Font</b> object having the 
default name, the default style, and a size of 14 points.&nbsp; The 
reference to that <b>Font</b> object is saved in an instance variable named <b>
largerFont</b>.</p>
<p>The code in Listing 8 calls the <b>createLocationPanel</b> method to create 
the location panel as an object of type <b>JPanel</b>.&nbsp; The call passes <b>
largerFont</b> as a parameter.&nbsp; Listing 9 shows that the <b>
createLocationPanel</b> method refers locally to the <b>Font</b> object as <b>
labelFont</b>.</p>
<p>Listing 24 uses that reference to call the <b>setFont</b> method on both <b>
JLabel</b> objects and both <b>JTextField</b> objects.&nbsp; This sets the <b>
font</b> property for all four objects to the 14-point font created in Listing 
7.</p>
<p>
<b><a name="Listing_24">Listing 24</a>. Set the font for the labels on 
the locationPanel. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre>   // set up the font for the labels
   xLabel.setFont(labelFont);
   yLabel.setFont(labelFont);
   xValue.setFont(labelFont);
   yValue.setFont(labelFont);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Create the physical layout of the locationPanel</b></font></p>
<p>At this point, all of the components required for the <b>locationPanel</b> 
have been constructed and conditioned to do their jobs.&nbsp; However, they are 
still floating around in cyberspace and haven't been placed in the panel.&nbsp; 
The code in Listing 25 places each of the components in the <b>locationPanel</b> 
and arranges their physical layout at the same time.</p>
<p>
<b><a name="Listing_25">Listing 25</a>. Create the physical layout of the 
locationPanel. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre>   //Prepare the box
   hBox.add(Box.createHorizontalGlue());

   //Add the components to the box
   hBox.add(xLabel);// X:
   hBox.add(xPrevButton);// a button with left arrow
   hBox.add(xValue);// leftmost text field
   hBox.add(xNextButton);// a button with right arrow
   hBox.add(Box.createHorizontalStrut(10));// a spacer
   hBox.add(yLabel);// Y:
   hBox.add(yPrevButton);// a button with left arrow
   hBox.add(yValue);// rightmost text field
   hBox.add(yNextButton);// button with right arrow
   
   //Add the box to the panel
   locationPanel.add(hBox);
   hBox.add(Box.createHorizontalGlue());

   return locationPanel;
 }//end createLocationPanel method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Rather than explaining each statement in Listing 25, I am going to provide a 
verbal description of what Listing 25 accomplishes.&nbsp; <i>(At this point, I 
recommend that you take a look at what I have previously written about the 
use of <a href="#BoxLayout">BoxLayout</a>.)</i></p>
<p><font color="#FF0000"><b>Visual aids needed</b></font></p>
<p>In order to provide this explanation, I will need some visual aids.&nbsp; </p>
<p>Figure 6 provides another view of the GUI at the normal size of the picture 
and without the Zoom menu having been opened.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. Another view of the GUI. </b>
<table border="0" cols="1" bgcolor="#ffffff" id="table1" >
  <tbody>
    <tr>
      <td>
      <img border="0" src="java364f.jpg" width="472" height="480"></td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Eight components on the locationPanel</b></font></p>
<p>Going from left to right, you should be able to identify the following eight 
components in the <b>locationPanel</b> <a name="near_the_top_of_Figure_6">near 
the top of Figure 6</a>.</p>
<ol>
	<li>JLabel:&nbsp; &quot;X:&quot;</li>
	<li>JButton with arrow pointing left</li>
	<li>JTextField</li>
<li>JButton with arrow pointing right</li>
	<li>JLabel: &quot;Y:&quot;</li>
<li>JButton with arrow pointing left</li>
	<li>JTextField</li>
<li>JButton with arrow pointing right</li>
</ol>
<p><font color="#FF0000"><b>A JPanel object with center-aligned FlowLayout</b></font></p>
<p>The <b>locationPanel</b> is actually a <b>JPanel</b> object with a <b>
FlowLayout</b> manager, center aligned.&nbsp; Instead of placing the components 
directly in the <b>JPanel</b>, <i>(which would have some serious drawbacks)</i>, 
Listing 25 places all eight components in a horizontal <b>Box</b> object with a 
very careful arrangement and then places the box in the <b>JPanel</b> object</p>
<p>In addition to the eight components, Listing 25 also places two blobs of <b>glue</b> 
in the box along with one <b>strut</b>.</p>
<p><font color="#FF0000"><b>The box is centered in the panel</b></font></p>
<p>The box is centered in the <b>JPanel</b>, and can be though of as taking up 
all of the available horizontal space.&nbsp; In some cases, as in Figure 3, the 
box is too wide to fit in the available space.</p>
<p><font color="#FF0000"><b>What is the purpose of the strut?</b></font></p>
<p>Think of the strut as an invisible, incompressible, non-stretchable 
horizontal rod ten pixels in length.&nbsp; It is placed in the center of the box with four 
of the eight components on its left side and the other four on its right side.&nbsp; 
The <b>JLabel</b> 
on the right end of the strut and the <b>JButton</b> on the left end of the strut are effectively attached to the two ends of 
the strut.</p>
<p>No matter how hard the user may try, <i>(by resizing the <b>JFrame</b>)</i>, 
she cannot cause the <b>JLabel</b> on the right end of the strut and the <b>
JButton</b> on the left end of the strut to move any closer together than ten 
pixels.</p>
<p>Similarly, she cannot cause those two components to move any further apart 
than the length of the strut <i>(ten pixels)</i>.</p>
<p>If you examine Figure 2, Figure 3, and Figure 6, you will see that the space 
between the two components at the ends of the strut are always separated 
by the same distance regardless of the size of the <b>JFrame</b>.</p>
<p><font color="#FF0000"><b>What about the glue?</b></font></p>
<p>I like to think of the glue as being more like a coil spring, or a piece of 
elastic than a blob of sticky stuff.&nbsp; Think of the left end of such a piece of 
elastic being attached to the right side of the rightmost <b>JButton</b> object 
and think of the other end of that piece of elastic being attached to the 
rightmost end of the box.</p>
<p>Now think of the left end of another piece of elastic as being attached to the 
leftmost end of the box, and think of the other end of the elastic being 
attached to the leftmost side of the leftmost <b>JLabel</b> object.</p>
<p><font color="#FF0000"><b>The order of display</b></font></p>
<p>Listing 25 adds the eight components to the box in the order listed
<a href="#near_the_top_of_Figure_6">earlier</a>.&nbsp; They are subsequently 
displayed from left to right in the order that they are added.</p>
<p><font color="#FF0000"><b>Objects touch one another unless...</b></font></p>
<p>When objects are added to 
a horizontal box, they will touch one another unless they are separated by a 
strut.&nbsp; Furthermore, their relative positions are fixed unless some glue is 
added in between the components.</p>
<p><font color="#FF0000"><b>Where is the glue?</b></font></p>
<p>In this case, no glue was added in between the components but the ten-pixel 
strut was added between the four components on the left and the four components 
on the right.&nbsp; Because of the strut, the two groups may not move closer 
together than ten pixels and may not move further apart than ten pixels.&nbsp; 
Due to the lack of glue between the components, the four components on the left must remain 
touching and the four components on the right must also remain touching.</p>
<p>However, glue was added before the components were added and again after the 
components were added.&nbsp; Therefore a blob of glue <i>(a piece of elastic 
material)</i> exists between the rightmost and leftmost components and the 
corresponding end of the box.</p>
<p><font color="#FF0000"><b>And the bottom line is...</b></font></p>
<p>If the width of the box is increased, the group 
of eight components will remain centered as shown in Figure 2 and Figure 6.</p>
<p>On the other hand, glue does nothing to prevent components from moving closer 
together or from moving closer to the ends of the box.&nbsp; Therefore, as the 
box is made narrower, the space between the ends of the box and the components 
on the ends of each group eventually goes to zero.&nbsp; Any further narrowing 
of the GUI will simply cause the components on the left and right ends of the 
groups to disappear from view.&nbsp; This is demonstrated in Figure 3 where the rightmost button 
has disappeared and the leftmost label and part of the leftmost button has 
disappeared.</p>
<p>Also, as mentioned <a href="#Briefly,_FlowLayout_arranges_components">earlier</a>, 
the use of the <b>BoxLayout</b> doesn't allow the components to wrap 
down to the next line as is the case with simple <b>
FlowLayout</b>.</p>
<p><font color="#FF0000"><b>The end of the createLocationPanel method</b></font></p>
<p>Listing 25 signals the end of the <b>createLocationPanel</b> method.&nbsp; 
When this method terminates, control is returned to the statement immediately 
following the statement in Listing 8, which is contained in the method named <b>
createInfoPanel</b>.</p>
<p><font color="#FF0000">
<b>Create the colorInfoPanel</b></font></p>
<p>The next statement in the <b>
createInfoPanel</b> method is a call to the <b>createColorInfoPanel</b> 
method for the purpose of creating the <b>colorInfoPanel</b>.&nbsp; This 
statement is shown in Listing 
26.</p>
<p>
<b><a name="Listing_26">Listing 26</a>. Create the colorInfoPanel. </b>
<table border="1" cols="1" width="477" bgcolor="#FFEEFF">
  <tbody>
    <tr>
      <td>
      <pre>   // create the color information panel
   JPanel colorInfoPanel =
                         createColorInfoPanel(largerFont);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Recall that 
the <b>colorInfoPanel</b> appears below the text fields in Figure 6 and displays 
the color values for red, green, and blue along with the actual color in a 
square <b>JPanel</b> object.</p>
<h4><a name="The_createColorInfoPanel_method">The createColorInfoPanel method</a></h4>
<p>The
<b>createColorInfoPanel</b> method begins in Listing 27.</p>
<p>
<b><a name="Listing_27">Listing 27</a>. Beginning of the createColorInfoPanel 
method. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Create the color information panel
  * @param labelFont the font to use for labels
  * @return the color information panel
  */
 private JPanel createColorInfoPanel(Font labelFont){
   // create a color info panel
   JPanel colorInfoPanel = new JPanel();
   colorInfoPanel.setLayout(new FlowLayout());

   // get the pixel at the x and y
   Pixel pixel = new Pixel(picture,xIndex,yIndex);

   // create the labels
   rValue = new JLabel("R: " + pixel.getRed());
   gValue = new JLabel("G: " + pixel.getGreen());
   bValue = new JLabel("B: " + pixel.getBlue());</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A walk in the park</b></font></p>
<p>Compared to what you have just been through with the <b>locationPanel</b>, understanding the code in 
the
<b>createColorInfoPanell</b>  
method will be like a <i>&quot;walk in the park.&quot;</i>&nbsp; For example, all of the components in 
the panel are passive in the sense that they don't fire any events.</p>
<p>There is no <b>BoxLayout</b>.&nbsp; The layout manager is <b>FlowLayout</b> 
with default center alignment.</p>
<p><font color="#FF0000"><b>A new JPanel object</b></font></p>
<p>Listing 27 begins by instantiating a new <b>JPanel</b> object and setting its 
layout manager to <b>FlowLayout</b>.</p>
<p>Then Listing 27 gets a reference to a new <b>Pixel</b> object at the location 
specified by the current x and y coordinate values.</p>
<p>The red, green, and blue values are extracted from the <b>Pixel</b> object 
and used to construct three <b>String</b> objects that are displayed <i>(later)</i> 
immediately below the leftmost text field in Figure 6.</p>
<p><font color="#FF0000">
<b>Construct the color display panel and its label</b></font></p>
<p>The code in Listing 28 constructs the small square <b>JPanel</b> object that 
appears below the rightmost text field in Figure 6 along with the label 
immediately to the left of the colored square.</p>
<p>
<b><a name="Listing_28">Listing 28</a>. Construct the color display panel and 
its label. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre>   // create the sample color panel and label
   colorLabel = new JLabel("Color at location: ");
   colorPanel = new JPanel();
   colorPanel.setBorder(new LineBorder(Color.black,1));

   // set the color sample to the pixel color
   colorPanel.setBackground(pixel.getColor());</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>If you have done any Swing programming at all, you shouldn't have any problem 
with the code in Listing 28.&nbsp; Note that at this point, the dimensions of 
the small square panel have not yet been established.&nbsp; The dimensions will 
be established near the middle of Listing 29.</p>
<p><font color="#FF0000">
<b>Set fonts</b></font></p>
<p>Listing 29 uses a reference to a <b>Font</b> object that was received as an 
incoming parameter to set the font for all of the text that is displayed on the
<b>colorInfoPanel</b>.</p>
<p>
<b><a name="Listing_29">Listing 29</a>. Set fonts, add components to colorInfoPanel, and return. </b>
<table border="1" cols="1" width="477" bgcolor="#DDFFFF">
  <tbody>
    <tr>
      <td>
      <pre>   // set the font
   rValue.setFont(labelFont);
   gValue.setFont(labelFont);
   bValue.setFont(labelFont);
   colorLabel.setFont(labelFont);
   
   colorPanel.setPreferredSize(new Dimension(25,25));

   // add items to the color information panel
   colorInfoPanel.add(rValue);
   colorInfoPanel.add(gValue);
   colorInfoPanel.add(bValue);
   colorInfoPanel.add(colorLabel);
   colorInfoPanel.add(colorPanel);

   return colorInfoPanel;
 }//end createColorInfoPanel method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Set the preferred size</b></font></p>
<p>Then Listing 29 sets the preferred size for the small colored square shown in 
Figure 6 to be 25 pixels on each side.</p>
<p><font color="#FF0000"><b>Add the components to the colorInfoPanel and return 
it</b></font></p>
<p>Finally, Listing 29 adds the five components to the <b>JPanel</b> object.&nbsp; 
Because the layout manager is <b>FlowLayout</b> with center alignment, the 
components appear centered in the panel from left to right in the order that 
they are added to the panel.</p>
<p>Although it is possible to insert a gap of a 
specified width between the components, that wasn't done in this class.&nbsp; 
<b>JLabel</b> objects will, by default insert a reasonable amount of space on each end 
of the label to serve as margins.&nbsp; An extra space character was inserted in 
the JLabel object in Listing 28 to separate the label from the colored square 
immediately to its right.</p>
<p><b><font color="#FF0000">The end of the createColorInfoPanel method</font></b></p>
<p>Listing 28 signals the end of the <b>createColorInfoPanel</b> method.&nbsp; When the 
object's reference is returned and the method terminates, 
control is returned to the next statement in the <b>createInfoPanel</b> method immediately following 
the statement shown in Listing 26.&nbsp; That next statement is the first 
statement in Listing 30.</p>
<p><font color="#FF0000">
<b>Complete the createInfoPanel method</b></font></p>
<p>The code in Listing 30 completes the method named
<b>createInfoPanel</b>.&nbsp; <i>(Recall that this is the method that creates 
and populates the <b>JPanel</b> object shown in the NORTH position in Figure 6.)</i></p>
<p>
<b><a name="Listing_30">Listing 30</a>. Complete the createInfoPanel method. </b>
<table border="1" cols="1" width="477" bgcolor="#FFEEFF">
  <tbody>
    <tr>
      <td>
      <pre>   // add the panels to the info panel
   infoPanel.add(BorderLayout.NORTH,locationPanel);
   infoPanel.add(BorderLayout.SOUTH,colorInfoPanel);

   // add the info panel
    pictureFrame.getContentPane().add(
                            BorderLayout.NORTH,infoPanel);
 }//end createInfoPanel method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 30 begins by adding the two sub-panels <i>(<b>locationPanel</b> and
<b>colorInfoPanel</b>)</i> to the <b>JPanel</b> object <i>(<b>infoPanel</b>)</i>.</p>
<p>Then Listing 30 adds the <b>infoPanel</b> to the NORTH position of the <b>
JFrame</b> object's content pane.&nbsp; This causes the <b>infoPanel</b> to be visible in the frame when the <b>JFrame</b> object is 
visible on the screen.</p>
<p><font color="#FF0000"><b>The end of the lesson</b></font></p>
<p>When the
<b>createInfoPanel</b> method terminates, control is returned to the <b>
createWindow</b> method shown in Listing 6.&nbsp; This causes the method named
<b>createAndInitScrollingImage</b> to be called in order to continue the 
construction of the GUI shown in Figure 6.&nbsp; The
<b>createAndInitScrollingImage</b> method is the topic for 
the next lesson.</p>
<center>
<h2><a name="Run the program"></a>Run the program</h2>
</center>
<p>You still have a long way to go before you can fully understand the <b>PictureExplorer</b> 
class.&nbsp; Once again, however, you have been working hard if you have made it 
to this point.&nbsp; It's time for you to take a break and mull over what you 
have learned in this lesson and maybe do some experimenting as well.</p>
<p>I encourage you to make a copy of the source code file for the <b>
PictureExplorer</b> class.&nbsp; 
Put it in your current directory along with your program files and then 
open the file in your IDE.&nbsp; <i>(Make certain that the current directory 
appears in the classpath to the left of Ericson's media library.)</i></p>
<p>Experiment with the <b>PictureExplorer</b> code, making changes, and 
observing the results of your changes.&nbsp; Make certain that you can explain why 
your changes behave as they do.&nbsp; </p>
<p>Also experiment with the picture explorer onscreen GUI.&nbsp; Try some different image 
files and see if the color values reported by the GUI make sense to you.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In the previous lesson, you learned about the overall construction of the <b>
PictureExplorer</b> GUI shown in Figure 2.&nbsp; You also learned how to 
construct the Zoom menu and how to register event listener objects on the items 
in the menu.</p>
<p>In this lesson, you learned how to construct the <b>infoPanel</b> in the 
NORTH location of the GUI in Figure 2.&nbsp; You also learned how 
to register event listener objects on the components in that panel making use of 
objects of anonymous classes.</p>
<p>Along the way, you also learned about some other interesting topics 
including:</p>
<ul>
	<li>The use of <b>BoxLayout</b></li>
	<li>The class file naming scheme.</li>
	<li>The use of <b>getResources</b> to get the URL of a file</li>
<li>The use of a class loader to load a resource file</li>
</ul>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>The next lesson will show you how to do flood fill using Java.</p>

<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li>
	<a rel="license" target="new" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a target="new" href="http://coweb.cc.gatech.edu/mediaComp-plan/101">
	Media Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a target="new" href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a target="new" href="http://drjava.sourceforge.net/">DrJava</a> 
	download site</li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, 
	the JavaPLT group at Rice University</a></li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava 
	Open Source License</a></li>
	<li>
	<a target="new" href="http://www.developer.com/java/article.php/1440571">The 
	Essence of OOP using Java, The this and super Keywords</a></li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java058.htm">
	Threads of Control</a></li>
	<li>
	<a target="new" href="http://java.sun.com/products/jfc/tsc/articles/painting/">
	Painting in AWT and Sw<font size="-1" face="Verdana, Arial, Helvetica">ing</font></a></li>
	<li><a target="new" href="http://en.wikipedia.org/wiki/Turtle_graphics/">
	Wikipedia Turtle Graphics</a></li>
	<li><a target="new" href="http://www.devx.com/tips/Tip/5809">IsA or HasA</a></li>
	<li>
	<a target="new" href="http://www.vectorcad3d.com/support/lathetutorial.htm">
	Vector Cad-Cam XI Lathe Tutorial</a></li>
	<li>
	<a target="new" href="http://local.wasp.uwa.edu.au/~pbourke/geometry/classification/">
	Classification of 3D to 2D projections</a></li>
	<li>
	<a href="http://en.wikipedia.org/wiki/Color_model">Color model</a> from 
Wikipedia</li>
	<li>
	<a href="../Light%20and%20color:%20%20an%20introduction">Light and color:&nbsp; 
an introduction</a> by Norman Koren</li>
	<li>
<a href="http://www.ncsu.edu/scivis/lessons/colormodels/color_models2.html#(HSV)">
Color Principles - Hue, Saturation, and Value</a></li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java200.htm">200</a> 
	Implementing the Model-View-Controller Paradigm using Observer and 
	Observable</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java300.htm">300</a> 
	Java 2D Graphics, Nested Top-Level Classes and Interfaces</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java302.htm">302</a> 
	Java 2D Graphics, The Point2D Class</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java304.htm">304</a> 
	Java 2D Graphics, The Graphics2D Class</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java306.htm">306</a> 
	Java 2D Graphics, Simple Affine Transforms</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java308.htm">308</a> 
	Java 2D Graphics, The Shape Interface, Part 1</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java310.htm">310</a> 
	Java 2D Graphics, The Shape Interface, Part 2</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java312.htm">312</a> 
	Java 2D Graphics, Solid Color Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java314.htm">314</a> 
	Java 2D Graphics, Gradient Color Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java316.htm">316</a> 
	Java 2D Graphics, Texture Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java318.htm">318</a> 
	Java 2D Graphics, The Stroke Interface</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java320.htm">320</a> 
	Java 2D Graphics, The Composite Interface and Transparency</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java322.htm">322</a> 
	Java 2D Graphics, The Composite Interface, GradientPaint, and Transparency</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java324.htm">324</a> 
	Java 2D Graphics, The Color Constructors and Transparency</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3403921">
	400</a> Processing Image Pixels using Java, Getting Started<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3423661">
	402</a> Processing Image Pixels using Java, Creating a Spotlight<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3441391">
	404</a> Processing Image Pixels Using Java: Controlling Contrast and 
	Brightness<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3512456">
	406</a> Processing Image Pixels, Color Intensity, Color Filtering, and Color 
	Inversion <br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3522711">
	408</a> Processing Image Pixels, Performing Convolution on Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3579206">
	410</a> Processing Image Pixels, Understanding Image Convolution in Java<br>
	<a target="new" href="http://www.developer.com/java/ent/article.php/3590351">
	412</a> Processing Image Pixels,<font size="-1" face="Verdana, Arial, Helvetica"> 
	Applying Image Convolution in Java, Part 1 <br>
	</font>
	<a target="new" href="http://www.developer.com/java/other/article.php/3596351">
	414</a> Processing Image Pixels, Applying Image Convolution in Java, Part 2<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3640776">
	416</a> Processing Image Pixels, An Improved Image-Processing Framework in 
	Java<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3650011">
	418</a> Processing Image Pixels, Creating Visible Watermarks in Java<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3645761">
	450</a> A Framework for Experimenting with Java 2D Image-Processing Filters<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3654171">
	452</a> Using the Java 2D LookupOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3670696">
	454</a> Using the Java 2D AffineTransformOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3681466">
	456</a> Using the Java 2D LookupOp Filter Class to Scramble and Unscramble 
	Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3686856">
	458</a> Using the Java 2D BandCombineOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3696676">
	460</a> Using the Java 2D ConvolveOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3698981">
	462</a> Using the Java 2D ColorConvertOp and RescaleOp Filter Classes to 
	Process Images</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java506.htm">506</a> 
	JavaBeans, Introspection</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/2114451">
	2100</a> Understanding Properties in Java and C#</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3495121">
	2300</a> Generics in J2SE, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3782471">
	340</a> Multimedia Programming with Java, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3788086">
	342</a> Getting Started with the Turtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3791291">
	344</a> Continuing with the SimpleTurtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3793401">
	346</a> Wrapping Up the SimpleTurtle Class: Multimedia Programming with Java</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java348.htm">348</a> 
	The Pen and PathSegment Classes: Multimedia Programming with Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3795761">
	349</a> A Pixel Editor Program in Java: Multimedia Programming with Java</li>
	<li>
	<a new href="http://www.developer.com/java/other/article.php/3798646%20target=">
	350</a> 3D Displays, Color Distance, and Edge Detection</li>
	<li><a href="http://www.developer.com/java/other/article.php/3801671">351</a> 
	A Slider-Controlled Softening Program for Digital Photos</li>
	<li><a href="http://www.developer.com/java/other/article.php/3806156">352</a> 
	Adding Animated Movement to Your Java Application</li>
	<li><a href="http://www.dickbaldwin.com/java/Java353.htm">353</a> A Slider-Controlled Sharpening Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java354.htm">354</a> The DigitalPicture Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java355.htm">355</a> The HSB Color Model</li>
	<li><a href="http://www.dickbaldwin.com/java/Java356.htm">356</a> The show Method and the PictureFrame Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java357.htm">357</a> An HSB 
	Color-Editing Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java358.htm">358</a> Applying 
	Affine Transforms to Picture Objects</li>
	<li><a href="http://www.dickbaldwin.com/java/Java359.htm">359</a> Creating a 
	lasso for editing digital photos in Java</li>
	<li><a href="http://www.dickbaldwin.com/java/Java360.htm">360</a> Wrapping 
	Up the SimplePicture Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java361.htm">361</a> A 
	Temperature and Tint Editing Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java362.htm">362</a> Getting 
	Started with the PictureExplorer Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java363.htm">363</a> Redeye 
	Correction in Digital Photographs</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the programs discussed in this lesson are shown in
Listing 31 and Listing 32 below.
<p>
<b><a name="Listing_31">Listing 31</a>. Source code for Ericson's PictureExplorer class. </b>
<table border="1" cols="1" width="477" bgcolor="#FFFFBB">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.image.*;
import javax.swing.border.*;
/**
 * Displays a picture and lets you explore the picture by
 * displaying the x, y, red, green, and blue values of the
 * pixel at the cursor when you click a mouse button or
 * press and hold a mouse button while moving the cursor.
 * It also lets you zoom in or out.  You can also type in
 * a x and y value to see the color at that location.
 *
 * Originally created for the Jython Environment for
 * Students (JES).
 * Modified to work with DrJava by Barbara Ericson
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Keith McDermottt, gte047w@cc.gatech.edu
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class PictureExplorer implements
       MouseMotionListener, ActionListener, MouseListener{

 // current x and y index
 private int xIndex = 0;
 private int yIndex = 0;

 //Main gui variables
 private JFrame pictureFrame;
 private JScrollPane scrollPane;

 //information bar variables
 private JLabel xLabel;
 private JButton xPrevButton;
 private JButton yPrevButton;
 private JButton xNextButton;
 private JButton yNextButton;
 private JLabel yLabel;
 private JTextField xValue;
 private JTextField yValue;
 private JLabel rValue;
 private JLabel gValue;
 private JLabel bValue;
 private JLabel colorLabel;
 private JPanel colorPanel;

 // menu components
 private JMenuBar menuBar;
 private JMenu zoomMenu;
 private JMenuItem twentyFive;
 private JMenuItem fifty;
 private JMenuItem seventyFive;
 private JMenuItem hundred;
 private JMenuItem hundredFifty;
 private JMenuItem twoHundred;
 private JMenuItem fiveHundred;

 /** The picture being explored */
 private DigitalPicture picture;

 /** The image icon used to display the picture */
 private ImageIcon scrollImageIcon;

 /** The image display */
 private ImageDisplay imageDisplay;

 /** the zoom factor (amount to zoom) */
 private double zoomFactor;

 /** the number system to use, 0 means starting at 0,
  *  1 means starting at 1 */
 private int numberBase=0;

 /**
  * Public constructor
  * @param picture the picture to explore
  */
 public PictureExplorer(DigitalPicture picture)
 {
   // set the fields
   this.picture=picture;
   zoomFactor=1;

   // create the window and set things up
   createWindow();
 }

 /**
  * Changes the number system to start at one
  */
 public void changeToBaseOne()
 {
   numberBase=1;
 }

 /**
  * Set the title of the frame
  *@param title the title to use in the JFrame
  */
 public void setTitle(String title)
 {
   pictureFrame.setTitle(title);
 }

 /**
  * Method to create and initialize the picture frame
  */
 private void createAndInitPictureFrame()
 {
   pictureFrame = new JFrame(); // create the JFrame
   //allow the user to resize it
   pictureFrame.setResizable(true);
    // use border layout
   pictureFrame.getContentPane().setLayout(
                                      new BorderLayout());
    // when close stop
   pictureFrame.setDefaultCloseOperation(
                                 JFrame.DISPOSE_ON_CLOSE);
   pictureFrame.setTitle(picture.getTitle());
   PictureExplorerFocusTraversalPolicy newPolicy =
                new PictureExplorerFocusTraversalPolicy();
   pictureFrame.setFocusTraversalPolicy(newPolicy);

 }

 /**
  * Method to create the menu bar, menus, and menu items
  */
 private void setUpMenuBar()
 {
   //create menu
   menuBar = new JMenuBar();
   zoomMenu = new JMenu("Zoom");
   twentyFive = new JMenuItem("25%");
   fifty = new JMenuItem("50%");
   seventyFive = new JMenuItem("75%");
   hundred = new JMenuItem("100%");
   hundred.setEnabled(false);
   hundredFifty = new JMenuItem("150%");
   twoHundred = new JMenuItem("200%");
   fiveHundred = new JMenuItem("500%");

   // add the action listeners
   twentyFive.addActionListener(this);
   fifty.addActionListener(this);
   seventyFive.addActionListener(this);
   hundred.addActionListener(this);
   hundredFifty.addActionListener(this);
   twoHundred.addActionListener(this);
   fiveHundred.addActionListener(this);

   // add the menu items to the menus
   zoomMenu.add(twentyFive);
   zoomMenu.add(fifty);
   zoomMenu.add(seventyFive);
   zoomMenu.add(hundred);
   zoomMenu.add(hundredFifty);
   zoomMenu.add(twoHundred);
   zoomMenu.add(fiveHundred);
   menuBar.add(zoomMenu);

   // set the menu bar to this menu
   pictureFrame.setJMenuBar(menuBar);
 }

 /**
  * Create and initialize the scrolling image
  */
 private void createAndInitScrollingImage()
 {
   scrollPane = new JScrollPane();

   BufferedImage bimg = picture.getBufferedImage();
   imageDisplay = new ImageDisplay(bimg);
   imageDisplay.addMouseMotionListener(this);
   imageDisplay.addMouseListener(this);
   imageDisplay.setToolTipText("Click a mouse button on "
                + "a pixel to see the pixel information");
   scrollPane.setViewportView(imageDisplay);
   pictureFrame.getContentPane().add(
                         scrollPane, BorderLayout.CENTER);
 }

 /**
  * Creates the JFrame and sets everything up
  */
 private void createWindow()
 {
   // create the picture frame and initialize it
   createAndInitPictureFrame();

   // set up the menu bar
   setUpMenuBar();

   //create the information panel
   createInfoPanel();

   //creates the scrollpane for the picture
   createAndInitScrollingImage();

   // show the picture in the frame at the size it needs
   // to be
   pictureFrame.pack();
   pictureFrame.setVisible(true);
 }

 /**
  * Method to set up the next and previous buttons for the
  * pixel location information
  */
 private void setUpNextAndPreviousButtons()
 {
   // create the image icons for the buttons
   Icon prevIcon = new ImageIcon(
         SoundExplorer.class.getResource("leftArrow.gif"),
                                        "previous index");
   Icon nextIcon = new ImageIcon(
        SoundExplorer.class.getResource("rightArrow.gif"),
                                            "next index");
   // create the arrow buttons
   xPrevButton = new JButton(prevIcon);
   xNextButton = new JButton(nextIcon);
   yPrevButton = new JButton(prevIcon);
   yNextButton = new JButton(nextIcon);

   // set the tool tip text
   xNextButton.setToolTipText(
                       "Click to go to the next x value");
   xPrevButton.setToolTipText(
                   "Click to go to the previous x value");
   yNextButton.setToolTipText(
                       "Click to go to the next y value");
   yPrevButton.setToolTipText(
                   "Click to go to the previous y value");

   // set the sizes of the buttons
   int prevWidth = prevIcon.getIconWidth() + 2;
   int nextWidth = nextIcon.getIconWidth() + 2;
   int prevHeight = prevIcon.getIconHeight() + 2;
   int nextHeight = nextIcon.getIconHeight() + 2;
   Dimension prevDimension =
                      new Dimension(prevWidth,prevHeight);
   Dimension nextDimension =
                     new Dimension(nextWidth, nextHeight);
   xPrevButton.setPreferredSize(prevDimension);
   yPrevButton.setPreferredSize(prevDimension);
   xNextButton.setPreferredSize(nextDimension);
   yNextButton.setPreferredSize(nextDimension);

   // handle previous x button press
   xPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex--;
       if (xIndex &lt; 0)
         xIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle previous y button press
   yPrevButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex--;
       if (yIndex &lt; 0)
         yIndex = 0;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next x button press
   xNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       xIndex++;
       if (xIndex &gt;= picture.getWidth())
         xIndex = picture.getWidth() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });

   // handle next y button press
   yNextButton.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent evt) {
       yIndex++;
       if (yIndex &gt;= picture.getHeight())
         yIndex = picture.getHeight() - 1;
       displayPixelInformation(xIndex,yIndex);
     }
   });
 }

 /**
  * Create the pixel location panel
  * @param labelFont the font for the labels
  * @return the location panel
  */
 public JPanel createLocationPanel(Font labelFont) {

   // create a location panel
   JPanel locationPanel = new JPanel();
   locationPanel.setLayout(new FlowLayout());
   Box hBox = Box.createHorizontalBox();

   // create the labels
   xLabel = new JLabel("X:");
   yLabel = new JLabel("Y:");

   // create the text fields
   xValue = new JTextField(
                 Integer.toString(xIndex + numberBase),6);
   xValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
       displayPixelInformation(
                       xValue.getText(),yValue.getText());
     }
   });
   yValue = new JTextField(
                 Integer.toString(yIndex + numberBase),6);
   yValue.addActionListener(new ActionListener() {
     public void actionPerformed(ActionEvent e) {
      displayPixelInformation(
                       xValue.getText(),yValue.getText());
     }
   });

   // set up the next and previous buttons
   setUpNextAndPreviousButtons();

   // set up the font for the labels
   xLabel.setFont(labelFont);
   yLabel.setFont(labelFont);
   xValue.setFont(labelFont);
   yValue.setFont(labelFont);

   // add the items to the vertical box and the box to
   // the panel
   hBox.add(Box.createHorizontalGlue());
   hBox.add(xLabel);
   hBox.add(xPrevButton);
   hBox.add(xValue);
   hBox.add(xNextButton);
   hBox.add(Box.createHorizontalStrut(10));
   hBox.add(yLabel);
   hBox.add(yPrevButton);
   hBox.add(yValue);
   hBox.add(yNextButton);
   locationPanel.add(hBox);
   hBox.add(Box.createHorizontalGlue());

   return locationPanel;
 }

 /**
  * Create the color information panel
  * @param labelFont the font to use for labels
  * @return the color information panel
  */
 private JPanel createColorInfoPanel(Font labelFont)
 {
   // create a color info panel
   JPanel colorInfoPanel = new JPanel();
   colorInfoPanel.setLayout(new FlowLayout());

   // get the pixel at the x and y
   Pixel pixel = new Pixel(picture,xIndex,yIndex);

   // create the labels
   rValue = new JLabel("R: " + pixel.getRed());
   gValue = new JLabel("G: " + pixel.getGreen());
   bValue = new JLabel("B: " + pixel.getBlue());

   // create the sample color panel and label
   colorLabel = new JLabel("Color at location: ");
   colorPanel = new JPanel();
   colorPanel.setBorder(new LineBorder(Color.black,1));

   // set the color sample to the pixel color
   colorPanel.setBackground(pixel.getColor());

   // set the font
   rValue.setFont(labelFont);
   gValue.setFont(labelFont);
   bValue.setFont(labelFont);
   colorLabel.setFont(labelFont);
   colorPanel.setPreferredSize(new Dimension(25,25));

   // add items to the color information panel
   colorInfoPanel.add(rValue);
   colorInfoPanel.add(gValue);
   colorInfoPanel.add(bValue);
   colorInfoPanel.add(colorLabel);
   colorInfoPanel.add(colorPanel);

   return colorInfoPanel;
 }

 /**
  * Creates the North JPanel with all the pixel location
  * and color information
  */
 private void createInfoPanel()
 {
   // create the info panel and set the layout
   JPanel infoPanel = new JPanel();
   infoPanel.setLayout(new BorderLayout());

   // create the font
   Font largerFont =
                   new Font(infoPanel.getFont().getName(),
                       infoPanel.getFont().getStyle(),14);

   // create the pixel location panel
   JPanel locationPanel = createLocationPanel(largerFont);

   // create the color informaiton panel
   JPanel colorInfoPanel =
                         createColorInfoPanel(largerFont);

   // add the panels to the info panel
   infoPanel.add(BorderLayout.NORTH,locationPanel);
   infoPanel.add(BorderLayout.SOUTH,colorInfoPanel);

   // add the info panel
   pictureFrame.getContentPane().add(
                            BorderLayout.NORTH,infoPanel);
 }

 /**
  * Method to check that the current position is in the
  * viewing area and if not scroll to center the current
  * position if possible
  */
 public void checkScroll()
 {
   // get the x and y position in pixels
   int xPos = (int) (xIndex * zoomFactor);
   int yPos = (int) (yIndex * zoomFactor);

   // only do this if the image is larger than normal
   if (zoomFactor &gt; 1) {

     // get the rectangle that defines the current view
     JViewport viewport = scrollPane.getViewport();
     Rectangle rect = viewport.getViewRect();
     int rectMinX = (int) rect.getX();
     int rectWidth = (int) rect.getWidth();
     int rectMaxX = rectMinX + rectWidth - 1;
     int rectMinY = (int) rect.getY();
     int rectHeight = (int) rect.getHeight();
     int rectMaxY = rectMinY + rectHeight - 1;

     // get the maximum possible x and y index
     int maxIndexX = (int)(picture.getWidth()*zoomFactor)
                           - rectWidth - 1;
     int maxIndexY = (int)(picture.getHeight()*zoomFactor)
                           - rectHeight - 1;

     // calculate how to position the current position in
     // the middle of the viewing area
     int viewX = xPos - (int) (rectWidth / 2);
     int viewY = yPos - (int) (rectHeight / 2);

     // reposition the viewX and viewY if outside allowed
     // values
     if (viewX &lt; 0)
       viewX = 0;
     else if (viewX &gt; maxIndexX)
       viewX = maxIndexX;
     if (viewY &lt; 0)
       viewY = 0;
     else if (viewY &gt; maxIndexY)
       viewY = maxIndexY;

     // move the viewport upper left point
     viewport.scrollRectToVisible(
         new Rectangle(viewX,viewY,rectWidth,rectHeight));
   }
 }

 /**
  * Zooms in the on picture by scaling the image.
  * It is extremely memory intensive.
  * @param factor the amount to zoom by
  */
 public void zoom(double factor)
 {
   // save the current zoom factor
   zoomFactor = factor;

   // calculate the new width and height and get an image
   // that size
   int width = (int) (picture.getWidth()*zoomFactor);
   int height = (int) (picture.getHeight()*zoomFactor);
   BufferedImage bimg = picture.getBufferedImage();

   // set the scroll image icon to the new image
   imageDisplay.setImage(bimg.getScaledInstance(width,
                           height, Image.SCALE_DEFAULT));
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
   imageDisplay.revalidate();
   checkScroll();  // check if need to reposition scroll
 }

 /**
  * Repaints the image on the scrollpane.
  */
 public void repaint()
 {
   pictureFrame.repaint();
 }

 //****************************************//
 //               Event Listeners          //
 //****************************************//

 /**
  * Called when the mouse is dragged (button held down and
  * moved)
  * @param e the mouse event
  */
 public void mouseDragged(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method to check if the given x and y are in the
  * picture
  * @param x the horiztonal value
  * @param y the vertical value
  * @return true if the x and y are in the picture and
  * false otherwise
  */
 private boolean isLocationInPicture(int x, int y)
 {
   boolean result = false; // the default is false
   if (x &gt;= 0 && x &lt; picture.getWidth() &&
       y &gt;= 0 && y &lt; picture.getHeight())
     result = true;

   return result;
 }

 /**
  * Method to display the pixel information from the
  * passed x and y but also converts x and y from strings
  * @param xString the x value as a string from the user
  * @param yString the y value as a string from the user
  */
 public void displayPixelInformation(
                           String xString, String yString)
 {
   int x = -1;
   int y = -1;
   try {
     x = Integer.parseInt(xString);
     x = x - numberBase;
     y = Integer.parseInt(yString);
     y = y - numberBase;
   } catch (Exception ex) {
   }

   if (x &gt;= 0 && y &gt;= 0) {
     displayPixelInformation(x,y);
   }
 }

 /**
  * Method to display pixel information for the passed x
  * and y
  * @param pictureX the x value in the picture
  * @param pictureY the y value in the picture
  */
 private void displayPixelInformation(
                               int pictureX, int pictureY)
 {
   // check that this x and y is in range
   if (isLocationInPicture(pictureX, pictureY))
   {
     // save the current x and y index
     xIndex = pictureX;
     yIndex = pictureY;

     // get the pixel at the x and y
     Pixel pixel = new Pixel(picture,xIndex,yIndex);

     // set the values based on the pixel
     xValue.setText(Integer.toString(
                                   xIndex  + numberBase));
     yValue.setText(Integer.toString(
                                    yIndex + numberBase));
     rValue.setText("R: " + pixel.getRed());
     gValue.setText("G: " + pixel.getGreen());
     bValue.setText("B: " + pixel.getBlue());
     colorPanel.setBackground(new Color(pixel.getRed(),
                                        pixel.getGreen(),
                                        pixel.getBlue()));

   }
   else
   {
     clearInformation();
   }

   // notify the image display of the current x and y
   imageDisplay.setCurrentX((int) (xIndex * zoomFactor));
   imageDisplay.setCurrentY((int) (yIndex * zoomFactor));
 }

 /**
  * Method to display pixel information based on a mouse
  * event
  * @param e a mouse event
  */
 private void displayPixelInformation(MouseEvent e)
 {

   // get the cursor x and y
   int cursorX = e.getX();
   int cursorY = e.getY();

   // get the x and y in the original (not scaled image)
   int pictureX = (int)(cursorX/zoomFactor + numberBase);
   int pictureY = (int)(cursorY/zoomFactor + numberBase);

   // display the information for this x and y
   displayPixelInformation(pictureX,pictureY);

 }

 /**
  * Method to clear the labels and current color and
  * reset the  current index to -1
  */
 private void clearInformation()
 {
   xValue.setText("N/A");
   yValue.setText("N/A");
   rValue.setText("R: N/A");
   gValue.setText("G: N/A");
   bValue.setText("B: N/A");
   colorPanel.setBackground(Color.black);
   xIndex = -1;
   yIndex = -1;
 }

 /**
  * Method called when the mouse is moved with no buttons
  * down
  * @param e the mouse event
  */
 public void mouseMoved(MouseEvent e)
 {}

 /**
  * Method called when the mouse is clicked
  * @param e the mouse event
  */
 public void mouseClicked(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method called when the mouse button is pushed down
  * @param e the mouse event
  */
 public void mousePressed(MouseEvent e)
 {
   displayPixelInformation(e);
 }

 /**
  * Method called when the mouse button is released
  * @param e the mouse event
  */
 public void mouseReleased(MouseEvent e)
 {
 }

 /**
  * Method called when the component is entered (mouse
  * moves over it)
  * @param e the mouse event
  */
 public void mouseEntered(MouseEvent e)
 {
 }

 /**
  * Method called when the mouse moves over the component
  * @param e the mouse event
  */
 public void mouseExited(MouseEvent e)
 {
 }

 /**
  * Method to enable all menu commands
  */
 private void enableZoomItems()
 {
   twentyFive.setEnabled(true);
   fifty.setEnabled(true);
   seventyFive.setEnabled(true);
   hundred.setEnabled(true);
   hundredFifty.setEnabled(true);
   twoHundred.setEnabled(true);
   fiveHundred.setEnabled(true);
 }

 /**
  * Controls the zoom menu bar
  *
  * @param a the ActionEvent
  */
 public void actionPerformed(ActionEvent a)
 {

   if(a.getActionCommand().equals("Update"))
   {
     this.repaint();
   }

   if(a.getActionCommand().equals("25%"))
   {
     this.zoom(.25);
     enableZoomItems();
     twentyFive.setEnabled(false);
   }

   if(a.getActionCommand().equals("50%"))
   {
     this.zoom(.50);
     enableZoomItems();
     fifty.setEnabled(false);
   }

   if(a.getActionCommand().equals("75%"))
   {
     this.zoom(.75);
     enableZoomItems();
     seventyFive.setEnabled(false);
   }

   if(a.getActionCommand().equals("100%"))
   {
     this.zoom(1.0);
     enableZoomItems();
     hundred.setEnabled(false);
   }

   if(a.getActionCommand().equals("150%"))
   {
     this.zoom(1.5);
     enableZoomItems();
     hundredFifty.setEnabled(false);
   }

   if(a.getActionCommand().equals("200%"))
   {
     this.zoom(2.0);
     enableZoomItems();
     twoHundred.setEnabled(false);
   }

   if(a.getActionCommand().equals("500%"))
   {
     this.zoom(5.0);
     enableZoomItems();
     fiveHundred.setEnabled(false);
   }
 }

 /**
  * Test Main.  It will ask you to pick a file and then
  * show it
  */
 public static void main( String args[])
 {
   Picture p = new Picture(FileChooser.pickAFile());
   PictureExplorer test = new PictureExplorer(p);

 }

 /**
  * Class for establishing the focus for the textfields
  */
 private class PictureExplorerFocusTraversalPolicy
                 extends FocusTraversalPolicy {

        /**
         * Method to get the next component for focus
         */
        public Component getComponentAfter(
                                 Container focusCycleRoot,
                                 Component aComponent) {
            if (aComponent.equals(xValue))
              return yValue;
            else
              return xValue;
        }

        /**
         * Method to get the previous component for focus
         */
         public Component getComponentBefore(
                                 Container focusCycleRoot,
                                 Component aComponent) {
            if (aComponent.equals(xValue))
              return yValue;
            else
              return xValue;
         }

         public Component getDefaultComponent(
                               Container focusCycleRoot) {
            return xValue;
        }

        public Component getLastComponent(
                               Container focusCycleRoot) {
            return yValue;
        }

        public Component getFirstComponent(
                               Container focusCycleRoot) {
            return xValue;
        }
    }//end PictureExplorerFocusTraversalPolicy inner class

}//end PictureExplorer class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_32">Listing 32</a>. Source code for program named Java362a. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Program Java362a
Copyright R.G.Baldwin 2009

The purpose of this program is to support an explanation 
of the PictureExplorer class.

A Picture object having dimensions of 450x345 pixels is 
created. The the show method and the explore method are 
called on the object to produce two different screen 
displays of the picture.

The explore method simply creates a new object of the
PictureExplorer class.

Tested using Windows Vista Premium Home edition and
Ericso's multimedia library.
*********************************************************/

public class Main{
  public static void main(String[] args){
    //Construct a new 460x345 Picture object.
    Picture pix1 = new Picture(&quot;ScaledBeach460x345.jpg&quot;);
    pix1.show();//display the picture in the show format
    //Display the picture again in the explore format.
    pix1.explore();
  }//end main method
}//end class Main</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2009, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
