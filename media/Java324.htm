<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000FF" vlink="#0000FF" lang="EN-US">
<!--start-->
<center>
<h2>
<!--title-->Java 2D Graphics, The Color Constructors and Transparency<!--endtitle--></h2></center>
<i>by Richard G. Baldwin</i>
<br><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i>
<p>Java Programming, Lecture Notes # 324
<p>March 21, 2000
<ul style='margin-top:0in' type=disc>
<li>
<a href="#_Introduction">Introduction</a></li>

<li>
<a href="#What is the New Color Class">What is the New Color Class?</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#_Summary">Summary</a></li>

<li>
<a href="#Complete Program Listing">Complete Program Listing</a></li>
</ul>

<center>
<hr size=3 width="100%" align=center></center>

<center>
<h2>
<a NAME="_Introduction"></a>Introduction</h2></center>
In an earlier lesson, I explained that the <b>Graphics2D</b> class extends
the <b>Graphics</b> class to provide more sophisticated control over geometry,
coordinate transformations, color management, and text layout.
<p>Beginning with JDK 1.2, <b>Graphics2D </b>is the fundamental class for
rendering two-dimensional shapes, text and images.
<p><b><font color="#FF0000">You also need to understand some other classes
and interfaces</font></b>
<p>I also explained that without understanding the behavior of other classes
and interfaces, it is not possible to fully understand the inner workings
of the <b>Graphics2D</b> class.
<p>Throughout this series of lessons, I have been providing you with information
and sample programs designed to help you understand the various classes
and interfaces that are necessary for an understanding of the <b>Graphics2D</b>
class.
<p><b><font color="#FF0000">Two ways to achieve transparency</font></b>
<p>There are at least two different ways to achieve transparency in Java
2D.&nbsp; One approach is to use new constructors for the <b>Color</b>
class that allow you to create solid colors with a specified degree of
transparency.&nbsp; I will discuss that approach in this lesson.
<p><b><font color="#FF0000">A more general approach</font></b>
<p>A second, and possibly more general approach is to make use of an object
that implements the <b>Composite</b> interface, passing a reference to
that object to the <b>setComposite()</b> method of the <b>Graphics2D</b>
class.
<p>Earlier lessons explained the use of the <b>Composite</b> interface
for solid colors as well as for color gradients
<center>
<h2>
<a NAME="What is the New Color Class"></a>What is the New Color Class?</h2></center>
Here is part of what Sun has to say about the new <b>Color</b> class supported
by Java2D.<br>
<BR>
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td>“A class to encapsulate colors in the default sRGB color space or colors
in arbitrary color spaces identified by a ColorSpace.&nbsp;
<p>Every color has an implicit alpha value of 1.0 or an explicit one provided
in the constructor. When constructing a Color with an explicit alpha or
getting the color/alpha components of a Color, the color components are
never premultiplied by the alpha component.
<br>...&nbsp;
<br>Eventually this class should supersede java.awt.Color, but for now
it is defined to be part of the java.java2d package, so we can generate
documentation for a single package for review.”</td>
</tr>
</table>

<p><b><font color="#FF0000">Overloaded constructors</font></b>
<p>This class provides several overloaded constructors that allow you to
provide an explicit alpha.
<p>Sun’s description of one of those constructors follows.&nbsp; This is
the constructor that will be used in the sample program in this lesson.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td>public Color(
<br>&nbsp;&nbsp;&nbsp; float r, float g,float b,float a)
<p>Creates an sRGB color with the specified red, green, blue, and alpha
values in the range (0.0 - 1.0). The actual color used in rendering will
depend on finding the best match given the color space available for a
given output device.&nbsp;
<p>Parameters:&nbsp;
<ul>
<li>
r - the red component&nbsp;</li>

<li>
g - the green component&nbsp;</li>

<li>
b - the blue component&nbsp;</li>

<li>
a - the alpha component</li>
</ul>
</td>
</tr>
</table>

<p><b><font color="#FF0000">How is transparancy determined?</font></b>
<p>The value of alpha determines transparency with a value of <b>1.0f</b>
being opaque, and <b>0.0f</b> being completely transparent.
<center>
<h2>
<a NAME="Sample Program"></a>Sample Program</h2></center>
This program is named <b>Composite03</b>.&nbsp; You will need to compile
and execute the program so that you can view its output while reading the
discussion.&nbsp; Otherwise, without being able to view the output, the
discussion will probably mean very little to you.
<p><b><font color="#FF0000">A screen shot of the output</font></b>
<p>In case you are unable to compile and execute the program, a screen
shot of the output follows.&nbsp; Note, however, that this screen shot
was reduced to about seventy-percent of its original size in pixels, so
some of the detail has been lost.
<p><img SRC="Java324.gif" height=330 width=330>
<p><b><font color="#FF0000">The GUI is a Frame object</font></b>
<p>The program draws a four-inch by four-inch <b>Frame</b> on the screen.&nbsp;
It translates the origin to the center of the <b>Frame</b>.&nbsp; Then
it draws a pair of X and Y-axes centered on the new origin.
<p><b><font color="#FF0000">A large circle</font></b>
<p>After drawing the X and Y-axes, the program draws a circle with a thick
border centered on the origin.&nbsp; This circle is used later to provide
visual cues relative to transparency.
<p><b><font color="#FF0000">Transparent ellipses</font></b>
<p>After the large circle is drawn, three ellipses are drawn on top of
one another in each quadrant.&nbsp; Each ellipse has a common center, and
is rotated by sixty degrees relative to the ellipse beneath it.&nbsp; The
color and transparency of each ellipse is established using the constructor
described above.
<p><b><font color="#FF0000">Red on the bottom</font></b>
<p>A red ellipse is on the bottom of each stack and a blue ellipse is on
the top of each stack.&nbsp; A green ellipse is sandwiched between the
other two.
<p><b><font color="#FF0000">Different transparency values</font></b>
<p>The different ellipses are given various transparency values in the
different quadrants to illustrate the effect of the alpha parameter of
the <b>setComposite()</b> method.
<p><b><font color="#FF0000">An opaque border</font></b>

<p style="text-autospace:none">Each ellipse is given an opaque border,
which makes it easier to visually discern the stacking order of the transparent
versions of the ellipses.
<p><b><font color="#FF0000">Transparency by quadrant</font></b>
<p>Here is the transparency given to each of the ellipses in the different
quadrants.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td><font face="Courier New,Courier"><font size=-1><b>TRANSPARENCY</b>&nbsp;<br>
<b>Upper-left quadrant</b>&nbsp;<br>
No transparency&nbsp;<br>
<br>
<b>Upper-right quadrant</b>&nbsp;<br>
All three ellipses are 30-percent transparent&nbsp;</font></font><b><font face="Courier New,Courier"><font size=-1></font></font></b>
<p><font face="Courier New,Courier"><font size=-1><b>Lower-left quadrant</b>&nbsp;<br>
All three ellipses are 60-percent transparent&nbsp;<br>
<br>
<b>Lower-right quadrant<br>
</b>All three ellipses are 90-percent transparent</font></font></td>
</tr>
</table>

<p><b><font color="#FF0000">None are opaque</font></b>
<p>Unlike previous lessons with similar sample programs, none of the ellipses
are opaque in all four quadrants.&nbsp; As a result, the large black circle
shows through all three ellipses in all quadrants except the upper-left
quadrant.
<p><b><font color="#FF0000">Upper-left quadrant</font></b>
<p>All three ellipses are opaque in the upper-left quadrant, so nothing
shows through.
<p><b><font color="#FF0000">Other ellipses become transparent</font></b>
<p>All three ellipses are made progressively more transparent as you move
through the other three quadrants.&nbsp; As a result, you can “see through”
all three ellipses.&nbsp; In other words, you can see the geometric figures
that lie beneath them (the other ellipses and the large black circle).
<p><b><font color="#FF0000">Similar to previous lesson</font></b>
<p>The material in this lesson is very similar to previous lessons except
for the use of the <b>Color</b> constructor as an alternate to the <b>setComposite()
</b>method
to achieve transparency.&nbsp; Therefore, I am not going to discuss the
output of this program in detail.
<p><b><font color="#FF0000">Illustrates rotation and translation</font></b>
<p>As mentioned in the earlier lesson, this lesson also provides a good
illustration of the benefits of rotation and translation.&nbsp; The task
of rotating the ellipses relative to each other and the task of translating
them into the various quadrants was made much easier (even possible) through
the use of the <b>AffineTransform </b>to rotate and translate the ellipses.
<p><b><font color="#FF0000">The normal caveat regarding inches</font></b>
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td>This discussion of dimensions in inches on the screen depends on the
method named <b>getScreenResolution()</b> returning the correct value.&nbsp;
However, the <b>getScreenResolution() </b>method always seems to return
120 on my computer regardless of the actual screen resolution settings.</td>
</tr>
</table>

<p><b><font color="#FF0000">Will discuss in fragments</font></b>
<p>I will briefly discuss this program in fragments.&nbsp; The controlling
class and the constructor for the GUI class are essentially the same as
you have seen in several previous lessons, so, I won’t repeat that discussion
here.&nbsp; You can view that material in the complete listing of the program
at the end of the lesson.
<p>All of the interesting action takes place in the overridden
<b>paint()</b>
method, so I will begin the discussion there.
<p><b><font color="#FF0000">Overridden paint() method</font></b>
<p>The beginning portions of the overridden <b>paint()</b> method should
be familiar to you by now as well.&nbsp; So, I am going to let the comments
in <a href="Java324-fig01.htm">Figure 1</a> speak for themselves.
<p><b><font color="#FF0000">Setting the Stroke</font></b>
<p><a href="Java324-fig02.htm">Figure 2</a> sets the
<b>Stroke</b> to 0.05
inches.&nbsp; This will cause each ellipse drawn following this fragment
to have a border of that width.
<p>I discussed the use of <b>setStroke()</b> and <b>BasicStroke</b> in
an earlier lesson, so I won’t discuss it further here.
<p><b><font color="#FF0000">Translation</font></b>
<p><a href="Java324-fig03.htm">Figure 3</a> translates the origin to the
center of what was previously the upper-left quadrant.&nbsp; After this
statement is executed, any geometric figure that is drawn centered on the
origin will actually be rendered in the center of what was previously the
upper-left quadrant.
<p>This should also be “old stuff” to you by now.
<p><b><font color="#FF0000">Opaque red-to-green ellipse outline</font></b>
<p><a href="Java324-fig04.htm">Figure 4</a> draws an opaque outline of
a red ellipse using the <b>Stroke </b>object instantiated earlier.&nbsp;
This ellipse is centered on the new origin.
<p>The code has been covered in previous lessons, so I won’t discuss it
further here.
<p><b><font color="#FF0000">Fill the ellipse with an opaque solid red color</font></b>
<p><a href="Java324-fig05.htm">Figure 5</a> contains the material that
is new to this lesson.&nbsp; This fragment instantiates a new <b>Color</b>
object with an alpha value of <b>1.0f</b>, which is the alpha value for
opaque as described above.
<p>The parameters to the constructor also specify that the color will be
pure red with no contribution from either green or blue.
<p>The <b>fill()</b> method is then used to fill the ellipse according
to the new <b>Color</b> object that is passed to the
<b>setPaint()</b>
method before invoking <b>fill()</b>.&nbsp; Except for the use of the <b>Color</b>
constructor that includes an alpha parameter, there is nothing new here.
<p><b><font color="#FF0000">Skip to upper-right quadrant</font></b>
<p>Because much of the code in this lesson is very similar to code that
was explained in previous lessons, I am going to skip ahead to the code
that establishes the fill colors and transparency values for the ellipses
in the upper-right quadrant. (You can view all of the code in the complete
listing of the program at the end of the lesson.)
<p><b><font color="#FF0000">Set fill color and transparency</font></b>
<p>In addition, for brevity, I am going to delete some of the code having
to do with that quadrant. <a href="Java324-fig06.htm">Figure 6</a> shows
only the code required to establish the fill colors and transparency values
for each of the ellipses in that quadrant.
<p><b><font color="#FF0000">Percent opaque versus percent transparent</font></b>
<p>You may prefer to think of the transparency specified by an alpha value
of <b>0.7f</b> as representing 70-percent opaque instead of 30-percent
transparent.
<center>
<h2>
<a NAME="_Summary"></a>Summary</h2></center>
In this lesson, I have shown you how to use one of the new constructors
in the <b>Color</b> class to establish the fill colors and transparency
values of several ellipses.
<p>Note that for solid colors, this approach is an alternative to the use
of the setComposite<b>()</b> method of the <b>Grapics2D</b> class (along
with the <b>AlphaComposite</b> class) to control the manner in which new
pixel values are composited with existing pixel values.
<center>
<h2>
<a NAME="Complete Program Listing"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <a href="Java324-fig07.htm">Figure
7</a>.
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;
<p><b>About the author</b>
<p><i><b><a href="mailto:baldwin@austin.cc.tx.us">Richard Baldwin</a></b>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p>-end-<!--end-->
</body>
</html>
