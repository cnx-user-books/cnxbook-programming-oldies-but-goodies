<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="author" content="richard g. baldwin">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">
<!--start-->
<center>
<h2>
<!--title-->JavaServer Pages and JavaBean Components, Part III</h2></center>
<b><i>by Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 766
<p>July 10, 2000
<ul>
<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#The Sample Bean">The Sample Bean</a></li>

<li>
<a href="#JSP Syntax Summary">JSP Syntax Summary</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Introduction"></a><font color="#FF0000">Introduction</font></h2></center>
<b><font color="#FF0000">What is JSP?</font></b>
<p>JSP makes it possible to embed Java code fragments into special HTML
tags.&nbsp; A JSP engine automatically creates, compiles, and executes
servlets to implement the behavior of the combined HTML and embedded Java
code.
<p><b><font color="#FF0000">Previous Lessons</font></b>
<p>Previous lessons have explained the use of the following JSP elements:
<ul>
<li>
Output comments</li>

<li>
Hidden comments</li>

<li>
Declarations</li>

<li>
Expressions</li>

<li>
Scriptlets</li>

<li>
The include directive</li>

<li>
The page directive</li>

<li>
The <b><font face="Arial Narrow">&lt;jsp.forward></font></b> tag</li>

<li>
The <font face="Arial Narrow"><b>&lt;jsp:useBean.../></b> </font>tag</li>

<li>
The <b><font face="Arial Narrow">&lt;jsp:setProperties...></font></b> tag</li>

<li>
The <b><font face="Arial Narrow">&lt;jsp:getProperties...></font></b> tag</li>
</ul>
<b><font color="#FF0000">A broad topic</font></b>
<p>Because of the breadth of the JavaBean component aspect of JSP, I have
broken this topic into several lessons.&nbsp; The <a href="Java764.htm">previous</a>
lesson taught you how to use the <b><font face="Arial Narrow">&lt;jsp:setProperties...></font></b>
tag and the <b><font face="Arial Narrow">&lt;jsp:getProperties...></font></b>
tag to set and get the property values for a Bean that adheres to design
patterns.
<p><b><font color="#FF0000">No requirement for design patterns</font></b>
<p>I also told you in that lesson that it is not necessary to use design
patterns to expose the <i>properties</i>, <i>methods</i>, and <i>events</i>
when you design a Bean.&nbsp; However, if you don't use design patterns,
you will be required to do some extra work.
<p>As promised, in this lesson, I am going to show you how to design a
Bean that doesn't use design patterns, at least insofar as properties are
concerned.&nbsp; I will also show you how to use that Bean with JSP.
<p><b><font color="#FF0000">The Java interface</font></b>
<p>Five or six times during each semester, I tell my students, <i>"If you
don't understand the Java interface, you don't understand Java."</i>&nbsp;
This is an important point, because even experienced C++ object-oriented
programmers may not understand the concept of an interface as used in Java.
<p>In case you don't understand the Java interface, please refer to the
appropriate lessons in my online <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Java</a>
tutorials.
<p><b><font color="#FF0000">Two approaches</font></b>
<p>There are two ways that the Bean developer can notify the user's development
environment about the properties, methods, and events of a Bean:
<ul>
<li>
Use of design patterns</li>

<li>
Use of a class that implements the <b>BeanInfo</b> interface</li>
</ul>
<b><font color="#FF0000">The BeanInfo interface</font></b>
<p>I explained the use of design patterns in the <a href="Java764.htm">previous</a>
lesson.
<p>This lesson concentrates on the use of the <b>BeanInfo</b> interface.&nbsp;
In this explanation, I will assume that you have a good understanding of
Beans in general.&nbsp; In particular, I will gloss over some of the subtle
nuances that you might need to consider when designing a Bean that doesn't
make use of design patterns.
<p><b><font color="#FF0000">Explicit specification of Bean properties</font></b>
<p>The Bean developer can notify the user's development environment about
Bean properties by doing the following:
<ul>
<li>
Define a class that implements the <b>BeanInfo</b> interface and provides
concrete definitions for some or all of the methods declared in that interface.</li>

<li>
Form the name of the new class by appending <i>BeanInfo</i> to the end
of the Bean's class name.</li>

<li>
Deliver a compiled version of this <b>BeanInfo</b> class along with the
other class files that comprise the Bean.</li>
</ul>
<b><font color="#FF0000">A meta object</font></b>
<p>In programmer jargon, a meta object is an object that provides information
about something else.&nbsp; I sometimes refer to it as an <i>agent</i>
object because it can provide information about the thing that it represents.
<p>For example, an object of the <b>File</b> class can provide information
about the physical file that it represents, such as the length of the file,
and the absolute path to the file.
<p><b><font color="#FF0000">The BeanInfo object</font></b>
<p>In this case, the development environment (such as the JSP engine) will
use introspection to cause an object to be instantiated from the class
that implements the <b>BeanInfo</b> interface and represents the Bean.&nbsp;
The JSP engine can then ask that object questions about the Bean that it
represents.
<p>For example, the <b>BeanInfo</b> object can answer such questions as
<i>"What
are the names of the methods used to set and get property values for the
Bean that you represent?"</i>
<center>
<h2>
<a NAME="The Sample Bean"></a><font color="#FF0000">The Sample Bean</font></h2></center>
<b><font color="#FF0000">Doesn't adhere to design patterns</font></b>
<p><a href="Java766-fig01.htm">Figure 1</a> shows a Bean class that does
not adhere to design patterns.
<p>This Bean is very similar to the sample Beans used in previous lessons.&nbsp;
However, in this case I prepended the names of the setter and getter methods
with the letter "x".&nbsp; As a result, the setter and getter methods do
not adhere to JavaBean design patterns.
<p>I highlighted those method names in red to make them easy for you to
spot in <a href="Java766-fig01.htm">Figure 1</a>.
<p><b><font color="#FF0000">JSP cannot use reflection alone</font></b>
<p>Because the Bean does not adhere to design patterns, the JSP engine
cannot use reflection alone to determine the names of the setter and getter
methods, as was the case in a previous lesson.
<p>In this case, it is necessary to explicitly provide that information
to the JSP engine.
<p><b><font color="#FF0000">Explicit specification of the names of the
setter and getter methods</font></b>
<p>Explicit specification is accomplished in <a href="Java766-fig02.htm">Figure
2</a>, which defines a class with the proper name that indirectly implements
the <b>BeanInfo</b> interface.
<p><b><font color="#FF0000">BeanInfo interface details</font></b>
<p><a href="Java766-fig03.htm">Figure 3</a> provides an excerpt from the
Sun documentation that explains the use of the <b>BeanInfo </b>interface
in more detail.
<p><b><font color="#FF0000">SimpleBeanInfo class</font></b>
<p>The <b>SimpleBeanInfo</b> class is similar to the adapter classes of
the Abstract Windows Toolkit.&nbsp; Like the adapter classes in the AWT,
the <b>SimpleBeanInfo</b> class implements the <b>BeanInfo</b> interface
and provides a default definition for all of the methods declared in that
interface.
<p><b><font color="#FF0000">Indirect implementation of BeanInfo</font></b>
<p>To provide information about properties only (while ignoring methods
and events), I can extend the <b>SimpleBeanInfo</b> class and override
the method named <b>getPropertyDescriptors()</b>.
<p>If I am only interested in providing explicit information about properties,
it isn't necessary for me to concern myself with the methods of the <b>BeanInfo
</b>interface
having to do with methods and events.
<p><b><font color="#FF0000">The getPropertyDescriptors() method</font></b>
<p><a href="Java766-fig04.htm">Figure 4</a> provides an excerpt from the
Sun documentation describing the method named <b><font face="Arial Narrow">getPropertyDescriptors()</font></b>.
<p>This method returns an array of references to <b>PropertyDescriptor</b>
objects, where each property of the target Bean is represented by one element
in the array.
<p>The purpose of this method is to provide information about properties
to the Bean user's development environment.
<p><b><font color="#FF0000">The PropertyDescriptor class</font></b>
<p><a href="Java766-fig05.htm">Figure 5</a> provides an excerpt from the
Sun documentation describing one of the overloaded constructors for the
<b>PropertyDescriptor</b>
class.&nbsp; (This class has several overloaded constructors, but this
is the one used in the sample program in this lesson.)
<p><b><font color="#FF0000">Understanding the Class class</font></b>
<p>The only thing that might be difficult to understand about this constructor
is the second parameter that requires a reference to an object of the class
named <b>Class</b>.
<p>This object identifies the class file for the Bean.&nbsp; The use of
the <b>Class</b> class is a little bit complicated.&nbsp; If you don't
know about the class named
<b>Class</b>, see my online <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Java</a>
programming tutorials.
<p><b><font color="#FF0000">The jspBeanTest002BeanInfo class</font></b>
<p>Now please refer back to <a href="Java766-fig02.htm">Figure 2</a>, which
shows my simple <b>BeanInfo</b> class for this sample program.&nbsp; I
refer to this as a <b>BeanInfo</b> class because it implements the <b>BeanInfo</b>
interface.
<p><b><font color="#FF0000">The required name</font></b>
<p>This <b>BeanInfo </b>class, named <b>jspBeanTest002BeanInfo</b>, satisfies
the required naming convention to associate it with the primary Bean class
named <b>jspBeanTest002</b>.
<p><b><font color="#FF0000">Implements the BeanInfo interface</font></b>
<p>The <b>BeanInfo </b>class implements the <b>BeanInfo</b> interface indirectly
by extending the class named <b>SimpleBeanInfo</b>.
<p><b><font color="#FF0000">Overrides getPropertyDescriptors()</font></b>
<p>The <b>BeanInfo </b>class provides explicit information about the Bean's
properties by overriding the method named <b>getPropertyDescriptors()</b>.
<p>I highlighted the overridden method signature in red in <a href="Java766-fig02.htm">Figure
2</a> to make it easy to spot.
<p><b><font color="#FF0000">PropertyDescriptor object represents the property</font></b>
<p>The <b>BeanInfo </b>class instantiates an object of the <b>PropertyDescriptor</b>
class that provides the names of the setter and getter methods for the
simple property (named <b>size</b>) of the target class named <b>jspBeanTest002</b>.&nbsp;
I highlighted this in green to make it easy to spot in <a href="Java766-fig02.htm">Figure
2</a>.
<p>The names of the setter and getter methods are <b>xgetSize</b> and <b>xsetSize</b>.
(Because of the x, they don't satisfy the JavaBean design-pattern requirements
for properties.)
<p><b><font color="#FF0000">Populates and returns array</font></b>
<p>The <b>BeanInfo </b>class instantiates and populates a single-element
array of the <b>PropertyDescriptor</b> class with the new <b>PropertyDescriptor</b>
object, and returns a reference to the array.
<p>If the target Bean had more than one property, the array would have
one element for each property.
<p><b><font color="#FF0000">The magic of JavaBean components</font></b>
<p>The JSP engine can then use introspection and the <b>getPropertyDescriptors()</b>
method to learn about the names of the setter and getter methods.
<center>
<h2>
<font color="#FF0000">The Sample JSP Page</font></h2></center>
<a href="Java766-fig06.htm">Figure 6</a> shows a JSP page that is capable
of processing the Bean named <b>jspBeanTest002</b>.
<p><b><font color="#FF0000">More magic of JavaBean components</font></b>
<p>It is important to recognize that the JSP programmer who uses the Bean
doesn't need to know whether the Bean
<ul>
<li>
Uses design patterns for setter or getter methods, or</li>

<li>
Uses explicit specification of the setter and getter methods by way of
a <b>BeanInfo</b> object.</li>
</ul>
This is part of the magic of JavaBean components.
<p><b><font color="#FF0000">Not true for explicit setter invocation</font></b>
<p>Of course, this would not be the case if the JSP programmer were to
forego use of the <b><font face="Arial Narrow">jsp:setProperty</font></b>
tag and invoke the <b>setSize()</b> method directly.&nbsp; In that case,
the JSP programmer would have to know the name of the setter method.
<p><b><font color="#FF0000">JSP behavior</font></b>
<p>As in a previous lesson, this JSP page
<ul>
<li>
Gets and displays the default value of the property named <b>size</b> using
the <b><font face="Arial Narrow">jsp:getProperty</font></b> tag</li>

<li>
Changes the value of the property named <b>size</b> using the <b><font face="Arial Narrow">jsp:setProperty</font></b>
tag</li>

<li>
Gets and displays the modified value using the <b><font face="Arial Narrow">jsp:getProperty</font></b>
tag</li>
</ul>
<b><font color="#FF0000">The output</font></b>
<p><a href="Java766-fig07.htm">Figure 7</a> shows a replica of my browser
output when it is used to access the page named <b>jsp010.jsp</b>.&nbsp;
Hopefully, by now, the output is what you would expect to see based on
your growing knowledge of JSP.
<center>
<h2>
<a NAME="JSP Syntax Summary"></a><font color="#FF0000">JSP Syntax Summary</font></h2></center>
In this and previous lessons, I have discussed the following JSP syntax:
<p><b><font face="Arial Narrow"><font size=-1>Output comments:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;!-- comment [ &lt;%= expression
%> ] --></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Hidden comments:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%-- hidden comment --%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Declarations:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%! declarations %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Expressions:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%= expression %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Scriptlets:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;% code fragment %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Include Directive:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%@ include file="relativeURL"
%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Page Directive:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%@ page</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ language="java" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ extends="package.class"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ import= "{ package.class
|</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; package.*
}, ..." ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ session="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ buffer="none|8kb|sizekb"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ autoFlush="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ isThreadSafe="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ info="text" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ errorPage="relativeURL"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ contentType="mimeType
[</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; ;charset=characterSet
]" |</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; "text/html
; charset=ISO-8859-1" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ isErrorPage="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:forward tag:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;jsp:forward page=</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp; "{
relativeURL | &lt;%= expression %> }" /></font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:useBean tag:</font></font></b>
<br><font face="Arial Narrow"><font size=-2>&lt;jsp:useBean</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
id="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
scope="page|request|session|application"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
class="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
type="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
class="package.class" type="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
beanName="{ package.class | &lt;%= expression %> }"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
type="package.class"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; }</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
/> | > other tags &lt;/jsp:useBean>&nbsp; }</font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:setProperty</font></font></b>
<br><font face="Arial Narrow"><font size=-2>&lt;jsp:setProperty</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
name="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp; {&nbsp; property=
"*" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" [ param="parameterName" ] |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" value=</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"{ string | &lt;%= expression %> }"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; }</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;/></font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:getProperty</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;jsp:getProperty name="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" /></font></font>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-<!--end-->
</body>
</html>
