<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2 align="center">Back to Basics in the Java 3D API</h2>
Learn how to master the basics of starting from scratch to create and populate a 
Java 3D virtual universe, and how to place that universe in a Frame object along 
with other GUI components using the layout manager of your choice.
<p><b>Published:</b>&nbsp; September 25, 2007<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 1541</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Acknowledgement">Acknowledgement</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a></li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a></li>
	<ul>
		<li><a href="#The_program_named_Java3D001">The program named Java3D001</a></li>
		<li><a href="#The_program_named_Java3D002">The program named Java3D002</a></li>
		<li><a href="#The_program_named_Java3D003">The program named Java3D003</a></li>
	</ul>
	<li><a href="#Run%20the%20program">Run the programs</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Download">Downloads</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p> <font color="#FF0000"><b>Scope of the series of tutorial lessons</b></font></p>
<p> In the earlier lesson titled &quot;Understanding Lighting in the Java 3D API&quot; <i>
(see <a href="#Resources">Resources</a>)</i>, I taught you about, and showed you 
examples of many of the important features of scene illumination in the Java 3D 
API.&nbsp; I also provided the source code for a complete Java 3D lighting simulator 
program that you can use to experiment with light in the Java 3D API.&nbsp; At 
the end of that tutorial, I stated <i>&quot;I will explain how the Java 3D lighting 
simulator program works in subsequent parts of this multi-part lesson.&quot;</i></p>
<p> Upon reflection, I have decided that it would be impractical for me to 
attempt to explain the inner workings of that very complicated program without first explaining a 
large number of basic concepts involved in writing programs using the Java 3D 
API.&nbsp; Therefore, beginning with this lesson, my plan is to start with the 
basics and to publish a series of tutorial lessons in which I will work my way 
up to the general complexity exhibited by the program that I provided in the 
earlier lesson.&nbsp; This will be the first lesson in that series.</p>
<p> <b><font color="#FF0000">Compiling and running Java 3D programs</font></b></p>
<p>In order to compile and run programs using the Java 3D API, you will need to 
download and install the Java 3D API software.&nbsp; As of the date of this writing, 
version 1.5.0 was available for <a href="#Download">download</a>.</p>
<p>In addition, you will need to <a href="#Download">download</a> and install 
either <b>Microsoft DirectX</b> or <b>OpenGL</b>.&nbsp; All of the sample 
programs in this series of tutorials were developed and tested using Microsoft 
DirectX.&nbsp; They were not tested using OpenGL.</p>
<h3> <a name="Acknowledgement">Acknowledgement</a></h3>
<p> Most of what I will be teaching you about the use of the Java 3D API was 
learned by studying the tutorial by Dennis J Bouvier <i>(see
<a href="#Resources">Resources</a>)</i> along with some other online material 
listed in <a href="#Resources">Resources</a>.</p>
<p> You can also <a href="#Download">download</a> the Bouvier tutorial as a set 
of PDF files along with the source code for the example programs in his 
tutorial.&nbsp; I recommend that you take advantage of those resources as well.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Bouvier's recipe for using the 
	SimpleUniverse class to create a Java 3D virtual universe.</li>
	<li><a href="#Figure_2">Figure 2</a>. Sun's description of the 
	SimpleUniverse class.</li>
	<li><a href="#Figure_3">Figure 3</a>. Description of one of the available 
	constructors for the SimpleUniverse class.</li>
	<li><a href="#Figure_4">Figure 4</a>. Target Java 3D virtual universe for 
	this lesson.</li>
	<li><a href="#Figure_5">Figure 5</a>. Virtual universe produced by program 
	Java3D001.</li>
	<li><a href="#Figure_6">Figure 6</a>. Sun's description of the Group class.</li>
	<li><a href="#Figure_7">Figure 7</a>. Sun's description of the BranchGroup 
	class.</li>
	<li><a href="#Figure_8">Figure 8</a>. Virtual universe produced by Program 
	Java3D002.</li>
	<li><a href="#Figure_9">Figure 9</a>. One of two Canvas3D constructors.</li>
	<li><a href="#Figure_10">Figure 10</a>. Virtual universe from a future 
	lesson.<b>&nbsp;</b></li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. The program named Java3D001.</li>
	<li><a href="#Listing_2">Listing 2</a>. The program named Java3D002.</li>
	<li><a href="#Listing_3">Listing 3</a>. Beginning of the program named Java3D003.</li>
	<li><a href="#Listing_4">Listing 4</a>. Two placeholder objects.</li>
	<li><a href="#Listing_5">Listing 5</a>. Create empty Java 3D universe.</li>
	<li><a href="#Listing_6">Listing 6</a>. Same code as before.</li>
	<li><a href="#Listing_7">Listing 7</a>. Legacy code from earlier tutorials.</li>
	<li><a href="#Listing_8">Listing 8</a>. Listing for program Java3D001.</li>
	<li><a href="#Listing_9">Listing 9</a>. Listing for program Java3D002.</li>
	<li><a href="#Listing_10">Listing 10</a>. Listing for program Java3D003.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online Java tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<p><font color="#FF0000"><b>A Java 3D virtual universe</b></font></p>
<p>Obviously, programs that you create using the Java 3D API will have a strong 
visual component.&nbsp; We can refer to that visual component as a <i>Java 3D 
virtual universe</i>.</p>
<p><a href="#Resources">Bouvier</a> tells us that <i>&quot;A 
Java 3D virtual universe is created from a scene graph. A scene graph is created 
using instances of Java 3D classes. The scene graph is assembled from objects to 
define the geometry, sound, lights, location, orientation, and appearance of 
visual and audio objects.&quot;</i>&nbsp; He then goes on to tell us just how 
complicated it can be to create such a <i>virtual universe</i>.</p>
<p><font color="#FF0000"><b>A simplified approach</b></font></p>
<p>Fortunately, he then introduces us to the class named <b>SimpleUniverse</b> 
and tells us <i>&quot;Using the SimpleUniverse class in Java 3D programming 
significantly reduces the time and effort needed to create the view branch 
graph.&nbsp; Consequently, the programmer has more time to concentrate on the 
content.&quot;</i>&nbsp; He then goes on to provide the recipe shown in Figure 1 for 
using the <b>SimpleUniverse</b> class to create a <i>Java 3D virtual universe</i>.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Bouvier's recipe for using the 
	SimpleUniverse class to create a Java 3D virtual universe. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre>1. Create a Canvas3D Object
2. Create a SimpleUniverse object which references the
   earlier Canvas3D object
   a. Customize the SimpleUniverse object
3. Construct content branch
4. Compile content branch graph
5. Insert content branch graph into the Locale of the
   SimpleUniverse</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This is the general recipe that will be used to develop most of the example 
programs in this lesson.</p>
<p><font color="#FF0000"><b>The SimpleUniverse class</b></font></p>
<p>The Sun documentation for the <b>SimpleUniverse</b> class provides the class 
description shown in Figure 2.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Sun's description of the SimpleUniverse 
	class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      This class sets up a minimal user environment to quickly and easily get a 
		Java 3D program up and running. This utility class creates all the 
		necessary objects on the &quot;view&quot; side of the scene graph. Specifically, 
		this class creates a locale, a single ViewingPlatform, and a Viewer 
		object (both with their default values). Many basic Java 3D applications 
		will find that SimpleUniverse provides all necessary functionality 
		needed by their applications. More sophisticated applications may find 
		that they need more control in order to get extra functionality and will 
		not be able to use this class.</td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Constructors for the SimpleUniverse class</b></font></p>
<p>The documentation for the Java 3D API version 1.5.0 shows six non-deprecated 
constructors for the <b>SimpleUniverse</b> class.&nbsp; A representative 
constructor, which accomplishes item 2 in the recipe shown in Figure 1, is 
described in Figure 3.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. Description of one of the available 
	constructors for the SimpleUniverse class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <h3>SimpleUniverse</h3>
		<pre>public <b>SimpleUniverse</b>(Canvas3D&nbsp;canvas)</pre>
		<dl>
			<dd>Creates a locale, a single ViewingPlatform (with default 
			values), and a Viewer object. The Viewer object uses default 
			values for everything but the canvas. 
			<p>&nbsp;<dl>
				<dt><b>Parameters:</b> </dt>
				<dd><code>canvas</code> - The canvas to associate with the 
				Viewer object. Passing in null will cause this parameter to be 
				ignored and a canvas to be created by the utility.
				</dd>
				<dt><b>See Also:</b> </dt>
				<dd>
				<code>Locale</code>,
				<code>Viewer</code>,
				<code>ViewingPlatform</code></dd>
			</dl>
			</dd>
		</dl>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Methods of the SimpleUniverse class</b></font></p>
<p>According to the documentation, v1.5.0 of the <b>SimpleUniverse</b> class 
defines eight methods and inherits thirteen methods from the <b>VirtualUniverse</b> 
class.&nbsp; You will see examples of many of those methods in the 
sample programs in this and subsequent lessons.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>In this lesson, I will walk you through a series of increasingly more complex 
programs to eventually present and explain a program named Java3D003, which produces 
the Java 3D virtual universe shown in Figure 4.</p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Target Java 3D virtual universe for this 
	lesson. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java1541a01.jpg" width="476" height="476"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>While the results shown in Figure 4 don't look all that impressive, an 
understanding of the steps required to produce that output is critically 
important in your progress down the path of learning how to effectively use the 
Java 3D API.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><a name="The_program_named_Java3D001">The program named Java3D001</a></h3>
<p>This program is shown in its entirety in Listing 1 below, and is also 
reproduced in Listing 8 for your convenience.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. The program named Java3D001. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File Java3D001.java
Copyright 2007, R.G.Baldwin
Tested using Java SE 6, and Java 3D 1.5.0 running under
Windows XP.
**********************************************************/
import com.sun.j3d.utils.universe.SimpleUniverse;

public class Java3D001{
  
  public Java3D001(){//constructor
    SimpleUniverse universe = new SimpleUniverse(null);
    
    //The following constructor that doesn't explicitly
    // pass null as a parameter appears to produce exactly
    // the same result:
    // SimpleUniverse universe = new SimpleUniverse();
  }//end constructor

  public static void main(String[] args){
    new Java3D001();
  }//end main

}//end class Java3D001</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Purpose of the program</b></font></p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Could be even simpler</b><br />
  This program could have been even simpler by calling the SimpleUniverse 
	constructor that takes no parameters instead of passing a null parameter to 
	the constructor.&nbsp; Both approaches appear to produce 
	exactly the same result.
</td></tr></table>
</td>
</tr>
</table>
<p>The purpose of this program is to illustrate an extremely simple Java 3D 
program.&nbsp; When this code is compiled and executed, an empty window appears 
on the screen as shown in Figure 5.</p>
<p>
 <b><a name="Figure_5">Figure 5</a>. Virtual universe produced by program 
	Java3D001. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java1541b01.jpg" width="257" height="257"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Description of the window</b></font></p>
<p>The window shown in Figure 5 looks just like an AWT <b>Frame</b> object with:</p>
<ul>
	<li>A Color.BLACK background</li>
	<li>An empty title bar</li>
	<li>A size of 255x255 pixels</li>
</ul>
<p><a name="As_near">As near</a> as I 
have been able to determine, when this approach is used to create the 3D 
universe, the programmer has no control over the size of the window and has no 
way to put a title into the title bar.&nbsp; Note however, that the window is resizable, 
meaning that the size can be changed by the user dragging the corners of the 
window.</p>
<p><font color="#FF0000"><b>Program termination</b></font></p>
<p>Clicking the close (X) button in the 
upper-right corner of the window causes the program to terminate, even though 
the program does not register a <b>WindowListener</b> object on the frame.&nbsp; 
This does not match the default behavior of an AWT <b>Frame</b> object.</p>
<p><font color="#FF0000"><b>Automatic creation of a Canvas3D object</b></font></p>
<p>The appearance of the window on the screen confirms the following statement 
regarding the <b>Canvas3D</b> parameter to the <b>SimpleUniverse</b> constructor 
shown in Figure 3:</p>
<blockquote>
	<p><i>&quot;Passing in null will cause this parameter to be ignored and a canvas 
	to be created by the utility.&quot;</i></p>
</blockquote>
<p>It is interesting to note that instantiating the <b>SimpleUniverse</b> object 
by calling the constructor that takes no parameters appears to produce exactly 
the same result, although that is not noted in the Sun documentation for that 
constructor.&nbsp; In other words, the Sun documentation for the <i>noarg</i> 
constructor does not indicate that a canvas will be automatically <i>&quot;created by the 
utility&quot;</i>.</p>
<p><font color="#FF0000"><b>Back to the recipe</b></font></p>
<p>Because the <b>Canvasd3D</b> object is automatically created, the 
instantiation of the <b>SimpleUniverse</b> object in Listing 1 satisfies items 1 
and 2 of the recipe for creating a Java 3D virtual universe shown in Figure 1.&nbsp; 
Note, however, that this program doesn't create any content for the universe, so 
the last three items in that recipe are not satisfied by this program.</p>
<p><font color="#FF0000"><b>Program testing</b></font></p>
<p>All of the programs in this tutorial were tested using Java SE 6, and Java 3D 1.5.0 running under Windows XP.</p>
<h3><a name="The_program_named_Java3D002">The program named Java3D002</a></h3>
<p><font color="#FF0000"><b>The Group class</b></font></p>
<p>Apparently, in order to add visual objects to the universe, you must 
encapsulate references to those objects in a container of type <b>Group</b>, and 
add that container to the universe.&nbsp; Figure 6 tells us some of what Sun has 
to say about the <b>Group</b> class.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. Sun's description of the Group class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      The Group node object is a general-purpose grouping node. Group nodes have 
		exactly one parent and an arbitrary number of children that are rendered 
		in an unspecified order (or in parallel). Null children are allowed; no 
		operation is performed on a null child node. Operations on Group node 
		objects include adding, removing, and enumerating the children of the 
		Group node. The subclasses of Group node add additional semantics.
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The BranchGroup class</b></font></p>
<p>One of the subclasses that <i>&quot;add additional semantics&quot;</i> to a node of type <b>
Group</b> is the class named <b>BranchGroup</b>.&nbsp; Figure 7 tells us some of 
what Sun has to say about the <b>BranchGroup</b> class.</p>
<p>
 <b><a name="Figure_7">Figure 7</a>. Sun's description of the BranchGroup class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      The BranchGroup serves as a pointer to the root of a scene graph branch; 
		BranchGroup objects are the only objects that can be inserted into a 
		Locale's set of objects. A subgraph, rooted by a BranchGroup node can be 
		thought of as a compile unit. The following things may be done with 
		BranchGroup:
		<ul>
			<li>A BranchGroup may be compiled by calling its compile method. 
			This causes the entire subgraph to be compiled. If any BranchGroup 
			nodes are contained within the subgraph, they are compiled as well 
			(along with their descendants). 
			</li>
			<li><b>A BranchGroup may be inserted into a virtual universe by 
			attaching it to a Locale.</b> The entire subgraph is then said to be 
			live. </li>
			<li>A BranchGroup that is contained within another subgraph may be 
			reparented or detached at run time if the appropriate capabilities 
			are set. </li>
		</ul>
		Note that that if a BranchGroup is included in another subgraph, as a 
		child of some other group node, it may not be attached to a Locale.&nbsp;</td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Quite a lot of information</b></font></p>
<p>There is quite a lot of information in Figure 7 that I won't discuss in this 
lesson <i>(although I do plan to discuss much of that information in subsequent 
lessons)</i>.&nbsp; For purposes of this program, the behavior that is highlighted 
in boldface is what we will be using.&nbsp; In particular, this program will 
construct and populate a <b>BranchGroup</b> object with a reference to a visual 
object of type <b>ColorCube</b>.&nbsp; That<b> BranchGroup</b> node will then be 
inserted into the virtual universe.</p>
<p><font color="#FF0000"><b>The program listing</b></font></p>
<p>The program named <b>Java3D002</b> is shown in its entirety in Listing 2 and 
reproduced in Listing 9 for your convenience.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. The program named Java3D002.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File Java3D002.java
Copyright 2007, R.G.Baldwin
Tested using Java SE 6, and Java 3D 1.5.0 running under
Windows XP.
**********************************************************/
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.geometry.ColorCube;
import javax.media.j3d.BranchGroup;

public class Java3D002{
  public Java3D002(){//constructor
    SimpleUniverse universe = new SimpleUniverse(null);
    
    universe.getViewingPlatform().
                              setNominalViewingTransform();

    BranchGroup branchGroup = new BranchGroup();
    branchGroup.addChild(new ColorCube(0.2));
    
    universe.addBranchGraph(branchGroup);
  }//end constructor

  public static void main(String[] args){
    new Java3D002();
  }//end main

}//end class Java3D002</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Purpose of the program</b></font></p>
<p>The purpose of this program is to update <b>Java3D001</b> to add a visual 
object to the virtual universe while keeping the program as simple as possible.&nbsp; 
When this code is compiled and executed, a window appears on the screen the same 
as in Figure 5.&nbsp; However, the window is no longer empty.&nbsp; Instead, it 
contains a red square as shown in Figure 8.</p>
<p>
 <b><a name="Figure_8">Figure 8</a>. Virtual universe produced by Program 
	Java3D002. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java1541b02.jpg" width="257" height="257"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The red square is actually a cube</b></font></p>
<p>The red square in Figure 8 is actually one face of a 3D cube with colored 
faces.&nbsp; It doesn't appear to be three-dimensional in Figure 8 because it is being 
viewed from a location that is on a line perpendicular to the center of the red 
face of the 3D cube.</p>
<p><font color="#FF0000"><b>Set the viewing platform</b></font></p>
<p>The code in Listing 2 begins by instantiating a <b>SimpleUniverse</b> object 
as before.&nbsp; Then it sets the <i>viewing platform</i>.</p>
<p><font color="#FF0000"><b>What is a viewing platform?</b></font></p>
<p>To make a long story short, setting the viewing platform establishes the 
apparent location of the viewer's eye relative to the scene.&nbsp; You can 
control the apparent position of the viewer's eye by calling the <b>
setViewPlatform</b> method on the <b>ViewingPlatform</b> object, passing a 
reference to an object of type <b>ViewPlatform</b> as a parameter to the method.</p>
<p><font color="#FF0000"><b>The setNominalViewingTransform method</b></font></p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Experimentation</b><br />
  You can experiment with the effect of the viewing platform by changing the <i>
	scale</i> parameter when the ColorCube is instantiated later, keeping in 
	mind that by default, the center of the cube is at the origin in 3D space.&nbsp; 
	Therefore, the front face of the cube is between the viewer and the origin 
	in 3D space.</td></tr></table>
</td>
</tr>
</table>
<p>As a shortcut, the <b>ViewingPlatform</b> class provides a method that can be 
used to adjust the apparent location of the viewer's eye to a location that is 
often satisfactory.</p>
<p>According to Sun, setting the viewing platform by calling the method named <b>
setNominalViewingTransform</b> causes the <b>ViewPlatform</b> to be moved back 
along the Z-axis so that objects at the origin spanning the
<a name="normalized_">normalized</a> X range of -1.0 to +1.0 can be fully viewed 
across the width of the window.</p>
<p><font color="#FF0000"><b>The BranchGroup object</b></font></p>
<p>Next, the code in Listing 2 instantiates a new <b>BranchGroup</b> node object 
and populates it with a reference to a single visual object of the class <b>
ColorCube</b>.</p>
<p><font color="#FF0000"><b>A ColorCube object</b></font></p>
<p>Sun describes a <b>ColorCube</b> object as a <i>&quot;Simple color-per-vertex cube 
with a different color for each face.&quot;</i>&nbsp; There are two constructors for 
the <b>ColorCube</b> class.&nbsp; One of the constructors constructs a cube with 
its center at the origin and a default size.&nbsp; If I interpreted the 
description of that constructor correctly, the default length of any edge is two 
units <i>(from -1 to 1)</i>.</p>
<p>The other constructor, which is the one used in Listing 2, also constructs a 
cube with its center at the origin in 3D space.&nbsp; This constructor allows 
the programmer to specify the size of the cube, by providing a <b>float</b> 
value for the parameter named <i>scale</i>.</p>
<p>Once again, if I interpreted the description of that constructor correctly, 
the length of any edge of the cube is twice the value of <i>scale</i>.&nbsp; 
Thus, the length of each edge for the cube constructed in Listing 2 would be 0.4 
units <i>(from -0.2 to 0.2)</i>.&nbsp; To a first degree of approximation, given what we learned
<a href="#normalized_">above</a>, the length of each edge of the cube shown in 
Figure 8 should be a little more than twenty-percent of the size of the window.&nbsp; 
Once again, keep in mind that the visible face on the cube is between the 
viewer's eye and the origin in 3D space so it will appear to be larger than 
would be the case if that face were located at the origin.</p>
<p><font color="#FF0000"><b>Call the addBranchGraph method on the universe</b></font></p>
<p>Here is part of what Sun has to say about the method named <b>addBranchGraph</b>:</p>
<blockquote>
	<p><i>&quot;Used to add Nodes to the geometry side (as opposed to the view side) 
	of the scene graph. This is a short cut to getting the Locale object and 
	calling that object's addBranchGraph() method.&quot;</i></p>
</blockquote>
<p>Thus, the last statement in the constructor in Listing 2 adds the <b>
BranchGroup</b> object containing the visual <b>ColorCube</b> object to the 
universe, making the cube visible in Figure 8.</p>
<p><font color="#FF0000"><b>Satisfies the recipe</b></font></p>
<p>The code shown in Listing 2 satisfies all of the steps specified in the 
recipe shown in Figure 1 with the exception of the fourth step having to do with 
compiling the content branch.&nbsp; This is a fairly complicated topic, but that 
step effectively happens automatically in the code in Listing 2.&nbsp; I will 
have more to say on this topic in future lessons.</p>
<p>While there is much more to learn in order to effectively use the Java 3D 
API, at least at this point you know some of the fundamentals.&nbsp; You have 
seen a program that satisfies all of the steps required in the recipe in Figure 
1.</p>
<p><font color="#FF0000"><b>There is still a problem</b></font></p>
<p>However, there is a problem that we have not yet addressed.&nbsp; As I 
mentioned <a href="#As_near">earlier</a>, when this approach is used to create 
the 3D universe, the programmer has no control over the size of the window and 
has no way to put a title into the title bar.&nbsp; In some cases that may be a 
problem and in other cases it may not be a problem.&nbsp; In any event, this 
situation is not hard to resolve.&nbsp; That will be the purpose of the next 
sample program.</p>
<h3><a name="The_program_named_Java3D003">The program named Java3D003</a></h3>
<p>Because of its length, I will present and discuss this program in fragments.&nbsp; The program named 
<b>Java3D003</b> begins in Listing 3.&nbsp; A complete listing of 
the program is provided in Listing 10 for your convenience.</p>
<p><font color="#FF0000"><b>Purpose</b></font></p>
<p>The purpose of this program is to illustrate how to extend the <b>Frame</b> 
class and use a <b>Canvas3D</b> object to gain control over the size and title 
bar of a Java 3D application.&nbsp; The program also illustrates how to gain 
control over the layout of the <b>Frame</b> containing the universe along with other components 
that may also appear in the <b>Frame</b>.</p>
<p><font color="#FF0000"><b>Screen output</b></font></p>
<p>The screen output for this program is shown in Figure 4.&nbsp; When this 
program is compiled and executed, a <b>Frame</b> object appears on the screen 
with a black <b>Canvas3D</b> object containing the virtual universe in the 
CENTER location of the <b>Frame</b>.&nbsp; The universe contains a visual <b>ColorCube</b> 
object.</p>
<p><b>Label</b> objects appear in the NORTH and SOUTH locations of the <b>Frame</b>.</p>
<p>When the user resizes the <b>Frame</b>, the size of the <b>ColorCube</b> 
object changes in proportion to the size of the <b>Canvas3D</b> object.</p>
<p>When the user clicks the close button in the upper-right corner of the Frame, 
the program terminates.</p>
<p><font color="#FF0000"><b>Program code</b></font></p>
<p>
<b><a name="Listing_3">Listing 3</a>. Beginning of the program named Java3D003.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class Java3D003 extends Frame{
  
  public Java3D003(){//constructor
    setLayout(new BorderLayout());
    
    //Create a Canvas3D object to be used for rendering the
    // Java 3D universe.  Place it in the CENTER of the
    // Frame.
    Canvas3D canvas = new Canvas3D(
               SimpleUniverse.getPreferredConfiguration());

    add(BorderLayout.CENTER,canvas);
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 3 performs the following operations:</p>
<ul>
	<li>Sets the layout for the <b>Frame</b>.</li>
	<li>Instantiates a <b>Canvas3D</b> object.</li>
	<li>Adds the canvas object to the <b>Frame</b>.</li>
</ul>
<p>Of the three operations, only the second one deserves any further discussion 
at this point.</p>
<p><font color="#FF0000"><b>A Canvas3D object</b></font></p>
<p>The Sun documentation provides a long and detailed description of the various 
aspects of a <b>Canvas3D</b> object.&nbsp; I won't repeat that information here, 
but will recommend that you study the description in the Sun 
documentation carefully.</p>
<p><font color="#FF0000"><b>Constructors for the
Canvas3D class</b></font></p>
<p>Version 1.5.0 of the Java 3D API provides two constructors for the <b>
Canvas3D</b> class.&nbsp; They differ primarily in terms of whether the 
rendering is performed on-screen or off-screen.&nbsp; The version used in 
this program is the on-screen rendering version.&nbsp; Figure 9 tells us some of what Sun 
has to say about this constructor.</p>
<p>
 <b><a name="Figure_9">Figure 9</a>. One of two Canvas3D constructors. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <h3>Canvas3D</h3>
		public <b>Canvas3D</b>(java.awt.GraphicsConfiguration&nbsp;graphicsConfiguration)
		<dl>
			<dd>Constructs and initializes a new Canvas3D object that Java 3D 
			can render into. The following Canvas3D attributes are initialized 
			to default values as shown: 
			<ul>
				left manual eye in image plate : (0.142, 0.135, 0.4572)<br>
				right manual eye in image plate : (0.208, 0.135, 0.4572)<br>
				stereo enable : true<br>
				double buffer enable : true<br>
				monoscopic view policy : View.CYCLOPEAN_EYE_VIEW<br>
				off-screen mode : false<br>
				off-screen buffer : null<br>
				off-screen location : (0,0)<br>
&nbsp;</ul>
			<dl>
				<dt><b>Parameters:</b> </dt>
				<dd><code>graphicsConfiguration</code> - a valid 
				GraphicsConfiguration object that will be used to create the 
				canvas. This object should not be null and should be created 
				using a GraphicsConfigTemplate3D or the 
				getPreferredConfiguration() method of the SimpleUniverse 
				utility. For backward compatibility with earlier versions of 
				Java 3D, a null or default GraphicsConfiguration will still work 
				when used to create a Canvas3D on the default screen, but an 
				error message will be printed. A NullPointerException or 
				IllegalArgumentException will be thrown in a subsequent release. 
				</dd>
				<dt><b>Throws:</b> </dt>
				<dd><code>java.lang.IllegalArgumentException</code> - if the 
				specified GraphicsConfiguration does not support 3D rendering</dd>
			</dl>
			</dd>
		</dl>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Could be difficult to construct</b></font></p>
<p>Here is an excerpt from the<b> java.awt.GraphicsConfiguration</b> class 
description:</p>
<blockquote>
	<p><i>&quot;The GraphicsConfiguration class describes the characteristics of a 
	graphics destination such as a printer or monitor. There can be many 
	GraphicsConfiguration objects associated with a single graphics device, 
	representing different drawing modes or capabilities. The corresponding 
	native structure will vary from platform to platform.&quot;</i></p>
</blockquote>
<p>As you might surmise from Figure 9 and the above quotation, it could be fairly difficult to construct 
the <b>GraphicsConfiguration</b> object required as a parameter for any specific 
platform.&nbsp; Fortunately, the <b>SimpleUniverse</b> class provides a 
static convenience method named <b>getPreferredConfiguration</b> that eliminates 
the requirement for us to explicitly construct that object.&nbsp; The Sun 
documentation states that the invocation of this method will find and return <i>
&quot;The best GraphicsConfiguration object for the system.&quot;</i>&nbsp; That 
convenience method is called to construct the new <b>Canvas3D</b> object in 
Listing 3.</p>
<p><font color="#FF0000"><b>Two placeholder objects</b></font></p>
<p>Listing 4 creates a pair of <b>Label</b> objects to serve as placeholders.&nbsp; 
These objects are positioned in the NORTH and SOUTH locations of the <b>Frame</b> 
to illustrate control over the layout of the <b>Frame</b> containing the virtual 
universe.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Two placeholder objects. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    add(BorderLayout.NORTH,new Label(
                        "Label object in NORTH location"));
    add(BorderLayout.SOUTH, new Label(
                        "Label object in SOUTH location"));</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Create empty Java 3D universe</b></font></p>
<p>Listing 5 creates an empty Java 3D universe and associates it with the <b>Canvas3D</b> object in the CENTER of the
<b>Frame</b>.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. Create empty Java 3D universe. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    SimpleUniverse universe = new SimpleUniverse(canvas);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Note that the constructor used in Listing 5 is different from the constructor 
used in Listings 1 and 2.&nbsp; In the two previous cases, a null 
parameter was passed to the constructor for the <b>SimpleUniverse</b> object and the required<b> Canvas3D</b> object 
was automatically created.&nbsp; In Listing 5, a reference to an existing <b>
Canvas3D</b> object was passed to the <b>SimpleUniverse</b> constructor in order 
to associate the new universe with the existing <b>Canvas3D</b> object.</p>
<p><font color="#FF0000">
<b>Same code as before</b></font></p>
<p>The code in Listing 6 is essentially the same code as I explained in 
conjunction with Listing 2.&nbsp; Therefore, I won't repeat that explanation.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Same code as before. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    //Set the apparent position of the viewer's eye.
    universe.getViewingPlatform().
                              setNominalViewingTransform();

    //Put a visible object in the universe
    BranchGroup branchGroup = new BranchGroup();
    branchGroup.addChild(new ColorCube(0.2));

    universe.addBranchGraph(branchGroup);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Legacy code from earlier tutorials</b></font></p>
<p>The code in Listing 7 is the same as code that I have used and explained in 
dozens <i>(possibly hundreds)</i> of earlier tutorials.&nbsp; Therefore, it 
shouldn't require any further explanation.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. Legacy code from earlier tutorials. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    //Set the Frame size and title and make it all visible.
    setSize(475,475);
    setTitle("Copyright 2007, R.G.Baldwin");
    setVisible(true);
    
    //This listener is used to terminate the program when
    // the user clicks the X in the upper-right corner of
    // the Frame.
    addWindowListener(
      new WindowAdapter(){
        public void windowClosing(WindowEvent e){
          System.exit(0);
        }//end windowClosing
      }//end new WindowAdapter
    );//end addWindowListener
  }//end constructor
  //-----------------------------------------------------//

  public static void main(String[] args){
    Java3D003 thisObj = new Java3D003();
  }//end main
  //-----------------------------------------------------//

}//end class Java3D003</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 7 contains the end of the class and the end of the program.&nbsp; In 
addition, it is almost the end of the lesson.</p>
<center>
<h2><a name="Run the program"></a>Run the programs</h2>
</center>
<p>I encourage you to copy the code from Listings 8 through 10 into your text
editor, compile it, and execute it.&nbsp; Experiment with it, making
changes, and observing the results of your changes.&nbsp; Remember, you will 
need to download and install the Java 3D API plus either Microsoft DirectX or 
OpenGL to compile and execute these programs.&nbsp; See <a href="#Download">
Downloads</a> for links to the web sites from which this material can be 
downloaded.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I taught you to master the basics of starting from 
scratch to create and populate a Java 3D virtual universe, and how to place that 
universe in a <b>Frame</b> along with other GUI components using the layout manager of 
your choice.&nbsp; While the results shown in Figure 4 don't look that 
impressive, they are critically important in your progress down the path of 
learning how to effectively use the Java 3D API.</p>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>The material covered in this lesson is just the tip of the Java 3D iceberg.&nbsp; 
There is much more for you to learn if you want to make effective use of the 
Java 3D API.</p>
<p>In the next lesson, I will teach you how to write a Java 3D program to create 
and populate a virtual universe that looks similar to the one shown in Figure 
10.</p>
<p>
 <b><a name="Figure_10">Figure 10</a>. Virtual universe from a future lesson.&nbsp; </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java1541c01.jpg" width="236" height="236"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As a minimum, I will use this program to teach you how to use the following 
Java 3D classes along with various methods belonging to those classes:</p>
<ul>
	<li>SimpleUniverse</li>
	<li>Sphere</li>
	<li>Primitive</li>
	<li>Appearance</li>
	<li>Material</li>
	<li>PointLight</li>
	<li>BranchGroup</li>
	<li>Canvas3D</li>
	<li>Transform3D</li>
	<li>TransformGroup</li>
	<li>BoundingSphere</li>
	<li>Vector3f</li>
	<li>Point3f</li>
	<li>Point3d</li>
	<li>Color3f</li>
</ul>
<h2 align="center"><a name="Download">Download</a>s</h2>
<ul>
	<li>
	<a href="http://java.sun.com/developer/onlineTraining/java3d/javaa3d.zip">
	Getting Started with the Java 3D&#8482; API</a>, A Tutorial for Beginners by 
	Dennis J Bouvier</li>
	<li>
	<a href="http://java.sun.com/products/java-media/3D/collateral/examples.zip">
	Source code</a> for example programs from the Bouvier tutorial above</li>
	<li><a href="http://java.sun.com/products/java-media/3D/download.html">
	Version 1.5.0</a> of the Java 3D API</li>
	<li><a href="http://java.sun.com/products/java-media/3D/download.html">
	Implementation documentation</a> for version 1.5.0 of the Java 3D API</li>
	<li>
	<a href="http://www.gamesforwindows.com/en-US/AboutGFW/Pages/DirectX10.aspx">
	Microsoft DirectX10</a></li>
	<li><a href="http://www.opengl.org/">OpenGL</a></li>
</ul>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a href="http://java.sun.com/products/java-media/3D/">Main page</a> for 
	the Java 3D API</li>
	<li>Java 3D <a href="http://wiki.java.net/bin/view/Javadesktop/Java3DFAQ">
	FAQ</a></li>
	<li>
	<a href="http://java.sun.com/products/java-media/3D/reference/api/index.html">
	Online documentation</a> for Java 3D version 1.3 <i>(see <a href="#Download">
	Downloads</a> for v1.5.0 documentation)</i></li>
	<li><a href="http://java.sun.com/developer/onlineTraining/java3d/">Getting 
	Started with the Java 3D&#8482; API</a>, A Tutorial for Beginners by Dennis J 
	Bouvier</li>
	<li>
	<a href="http://download.java.net/media/java3d/javadoc/1.4.0/javax/media/j3d/doc-files/intro.html">
	Introduction to the Java 3D API</a> with links to other tutorial information</li>
	<li>Various Java 3D <a href="http://www.java3d.org/">resources</a></li>
	<li>Another Java 3D <a href="http://www.java3d.org/tutorial.html">tutorial</a></li>
	<li><a href="http://www.developer.com/java/other/article.php/3622246">1540</a> 
Understanding Lighting in the Java 3D API</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the programs discussed in this lesson are shown in
Listing 8 through Listing 10 below.
<p>
<b><a name="Listing_8">Listing 8</a>. Listing for program Java3D001. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File Java3D001.java
Copyright 2007, R.G.Baldwin

The purpose of this program is to illustrate an extremely 
simple Java 3D program.

When this code is compiled and executed, an empty window
appears on the screen.  The window looks just like an
AWT Frame object with a Color.BLACK background, an empty
title bar, and a size of 255x255 pixels.

Clicking the close button in the upper-right corner of the
window causes the program to terminate, even though the
program does not register a WindowListener object on the
frame.

As near as I have been able to determine, when this 
approach is used to create the 3D universe, the programmer
has no control over the size of the window and has no way
to put a title into the title bar.  Note however, that the
window is resizable, meaning that the size can be changed
by the user dragging the corners of the window.

Tested using Java SE 6, and Java 3D 1.5.0 running under
Windows XP.
**********************************************************/
import com.sun.j3d.utils.universe.SimpleUniverse;

public class Java3D001{
  
  public Java3D001(){//constructor
    SimpleUniverse universe = new SimpleUniverse(null);
    
    //The following constructor that doesn't explicitly
    // pass null as a parameter appears to produce exactly
    // the same result:
    // SimpleUniverse universe = new SimpleUniverse();
  }//end constructor

  public static void main(String[] args){
    new Java3D001();
  }//end main

}//end class Java3D001</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_9">Listing 9</a>. Listing for program Java3D002. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File Java3D002.java
Copyright 2007, R.G.Baldwin

The purpose of this program is to update Java3D001 to add 
an object to the virtual universe while keeping the 
program as simple as possible.

When this code is compiled and executed, a window appears
on the screen the same as in the Java3D001.  However, the
window is no longer empty.  Instead, it contains a red
square.  The red square is actually one face of a 3D cube
with colored faces.

Tested using Java SE 6, and Java 3D 1.5.0 running under
Windows XP.
**********************************************************/
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.geometry.ColorCube;
import javax.media.j3d.BranchGroup;

public class Java3D002{
  
  public Java3D002(){//constructor
    SimpleUniverse universe = new SimpleUniverse(null);
    
    universe.getViewingPlatform().
                              setNominalViewingTransform();

    BranchGroup branchGroup = new BranchGroup();
    branchGroup.addChild(new ColorCube(0.2));
    
    universe.addBranchGraph(branchGroup);
  }//end constructor

  public static void main(String[] args){
    new Java3D002();
  }//end main

}//end class Java3D002</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_10">Listing 10</a>. Listing for program Java3D003.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File Java3D003.java
Copyright 2007, R.G.Baldwin

The purpose of this program is to illustrate how to 
extend the Frame class and use a Canvas3D object to 
gain control over the size and title bar of a Java 3D 
application.  It also illustrates how to gain control over
the layout of the universe in conjunction with other 
components that may also appear in the Frame along with
the universe.

When this code is compiled and executed, a Frame object
appears on the screen with a black Canvas3D object 
containing the virtual universe in the CENTER location of 
the Frame.  The universe contains a visual ColorCube 
object.  Labels appear in the NORTH and SOUTH locations of
the Frame.

When the user resizes the Frame, the size of the ColorCube
object changes in proportion to the size of the Canvas3D
object.

When the user clicks the close button in the upper-right
corner of the Frame, the program terminates.

Tested using Java SE 6, and Java 3D 1.5.0 running under
Windows XP.
**********************************************************/
import com.sun.j3d.utils.universe.SimpleUniverse;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.BranchGroup;
import com.sun.j3d.utils.geometry.ColorCube;
import java.awt.Frame;
import java.awt.Label;
import java.awt.BorderLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

public class Java3D003 extends Frame{
  
  public Java3D003(){//constructor
    setLayout(new BorderLayout());
    
    //Create a Canvas3D object to be used for rendering the
    // Java 3D universe.  Place it in the CENTER of the
    // Frame.
    Canvas3D canvas = new Canvas3D(
               SimpleUniverse.getPreferredConfiguration());
    add(BorderLayout.CENTER,canvas);
    
    //Create a pair of Label objects to serve as
    // placeholders.  Position them in the NORTH and SOUTH
    // locations in the window.
    add(BorderLayout.NORTH,new Label(
                        "Label object in NORTH location"));
    add(BorderLayout.SOUTH, new Label(
                        "Label object in SOUTH location"));
    
    //Create an empty Java 3D universe and associate it 
    // with the Canvas3D object in the CENTER of the
    // Frame.
    SimpleUniverse universe = new SimpleUniverse(canvas);
    
    //Set the apparent position of the viewer's eye.
    universe.getViewingPlatform().
                              setNominalViewingTransform();

    //Put a visible object in the universe
    BranchGroup branchGroup = new BranchGroup();
    branchGroup.addChild(new ColorCube(0.2));

    universe.addBranchGraph(branchGroup);

    //Set the Frame size and title and make it all visible.
    setSize(475,475);
    setTitle("Copyright 2007, R.G.Baldwin");
    setVisible(true);
    
    //This listener is used to terminate the program when
    // the user clicks the X in the upper-right corner of
    // the Frame.
    addWindowListener(
      new WindowAdapter(){
        public void windowClosing(WindowEvent e){
          System.exit(0);
        }//end windowClosing
      }//end new WindowAdapter
    );//end addWindowListener
  }//end constructor
  //-----------------------------------------------------//

  public static void main(String[] args){
    Java3D003 thisObj = new Java3D003();
  }//end main
  //-----------------------------------------------------//

}//end class Java3D003
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2007, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
&quot;java 3D&quot; SimpleUniverse ColorCube BranchGroup Canvas3D canvas 
setNominalViewingTransform getPreferredConfiguration </p>
<p>-end- </p>
<p>&nbsp;</p>
<p> <br>
&nbsp; </p>
<br>
<br>
<br>
<br>
</body>
</html>
