<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, Popup Menus<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 144, Revised 01/27/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#menus">Menus</a></li>

<li><a href="#popupmenu class">PopupMenu Class</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This series of lessons is concentrating on package <b>java.awt </b>where
most of the functionality exists for providing the user interface to your
application or applet.

<p>We have learned how to handle events and how to use layout managers.These
two topics form the basis for the design and implementation of a Graphical
User Interface.

<p>Now we are learning about the various components that we can combine
with layout and event handling to produce an effective Graphical User Interface.

<p>The available components are defined by classes in the package <b>java.awt</b>.
Our approach is to group those classes into categories and study the material
on a category basis. As of this writing, it looks as if the remaining categories
are:
<ul><li><b>Popup Menus</b></li>

<li>
The Canvas Class</li>

<li>
Graphics - Shapes, Fonts, Images</li>

<li>
The PrintJob Class</li>

<li>
The Toolkit Class</li></ul>
As things develop, it may be necessary to modify these groupings.
<center><h2><a name="menus"></a><font color="#ff0000">Menus</font></h2></center>
The inheritance hierarchy for menus is as shown below.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>java.lang.Object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----MenuShortcut&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuComponent&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuBar
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuItem&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.Menu
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.CheckboxMenuItem
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.PopupMenu</pre></td></tr></table>
There are a number of interesting issues associated with menus which are
being discussed in this series of documents.

<p>Previous lessons discussed and provided sample programs for the following
classes.
<ul><li><b>MenuComponent Class </b>- Super class of all menu related components.</li>

<li><b>MenuShortcut Class </b>- Represents a keyboard accelerator for a MenuItem.</li>

<li><b>MenuItem Class </b>- Represents a choice in a menu.</li>

<li><b>Menu Class </b>- A component of a menu bar.</li>

<li><b>MenuBar Class </b>- Encapsulates the platform's concept of a menu bar
bound to a Frame.</li>

<li><b>CheckboxMenuItem Class </b>- Produces a checkbox that represents a choice
in a menu.</li></ul>
This lesson will discuss and and provide a sample program for
<ul><li><b>PopupMenu Class </b>- Implements a menu which can be dynamically popped
within a component.</li></ul>
Sample programs in a previous lessons made use of all the menu-related
classes except <b>PopupMenu</b>. We will provide a sample program which
produces a popup menu in place of an ordinary pulldown menu.

<p>The sample program in this lesson will be very similar to the sample
program in the lesson on the <b>CheckboxMenuItem</b> class. However, this
lesson will <u>substitute</u> a <b>PopupMenu</b> object in place of the
combination of <b>Menu</b> and <b>MenuBar</b> objects in that program.
<center><h2><a name="popupmenu class"></a><font color="#ff0000">PopupMenu Class</font></h2></center>
This class is used to instantiate objects which behave as popup menus.
Once the menu appears on the screen, the processing of the items on the
menu is the same as processing items on the pulldown menus studied in earlier
lessons.

<p>This class has no <i>fields </i>and the following public <i>constructors</i>:
<ul><li><b>PopupMenu</b>() -- Creates a new popup menu.</li>

<li><b>PopupMenu</b>(String) -- Creates a new popup menu with the specified
name.</li></ul>
The detailed description of the second version of the constructor extracted
from the JDK 1.1.3 documentation follows:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>&nbsp;public PopupMenu(String label)

&nbsp;&nbsp;&nbsp; Creates a new popup menu with the specified name.&nbsp;

&nbsp;&nbsp;&nbsp; Parameters:&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; title - the title string for the popup menu&nbsp;</pre></td></tr></table>
This suggests that there is a title somewhere on the menu that is derived
from the String object passed as a parameter.

<p>In the sample program that follows, we will instantiate a <b>PopupMenu
</b>object using the second form of the constructor using JDK 1.1.3. However,
when tested under Win95, the <i>title </i>specified by the <b>String</b>
object passed as a parameter to the constructor doesn't actually appear
anywhere on the menu. This may be a bug or may be a misunderstanding on
the part of this author as to the purpose of the <b>String</b> parameter..

<p>This class provides two methods. In this lesson we are only interested
in one of those methods: <b>show()</b>. We will use the <b>show()</b> method
to display the menu.

<p>The long description of the <b>show()</b> method from the JDK 1.1 documentation
follows:
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>&nbsp;public void show(Component origin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int x,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int y)

&nbsp;&nbsp;&nbsp; Shows the popup menu at the x, y position relative
&nbsp;&nbsp;&nbsp; to an origin component. The origin component&nbsp;
&nbsp;&nbsp;&nbsp; must be contained within the component hierarchy
&nbsp;&nbsp;&nbsp; of the popup menu's parent. Both the origin and the
&nbsp;&nbsp;&nbsp; parent must be showing on the screen for this method
&nbsp;&nbsp;&nbsp; to be valid.&nbsp;

&nbsp;&nbsp;&nbsp; Parameters:&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; origin - the component which defines the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; coordinate space&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x - the x coordinate position to popup the menu&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y - the y coordinate position to popup the menu&nbsp;</pre></td></tr></table>
.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
This program is designed to be compiled and run under JDK 1.1. It illustrates
the use of <b>PopupMenu </b>objects composed of <b>CheckboxMenuItem</b>
objects.

<p>This application places one <b>PopupMenu </b>object in a <b>Frame </b>object.
The menu contains three items of type <b>CheckboxMenuItem</b>.

<p>The <b>PopupMenu </b>appears whenever the user clicks inside the <b>Frame
</b>object and below the banner portion across the top of the <b>Frame
</b>object. When it appears, the upper left-hand corner of the <b>PopupMenu
</b>is located near the position of the mouse click.

<p>According to the documentation for JDK 1.1.3, the overloaded constructor
used in the program should produce a popup menu with the name <b>"Popup
Menu." </b>However, when the menu appears on the screen, there is no name
attached.

<p>Selection of an item in the <b>PopupMenu </b>object generates an <b>ItemEvent
</b>that is trapped using an <b>ItemListener </b>object which overrides
the <b>itemStateChanged()</b> method. Information about the menu item that
was selected is displayed on the screen.

<p>An earlier lesson contained a detailed discussion of the use of <b>CheckboxMenuItem
</b>objects, and they are only incidental to this lesson which is designed
to illustrate the use of <b>PopupMenu </b>objects. Therefore, they won't
be discussed further here.

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
This program is very similar to the program in a previous lesson which
discussed the use of <b>CheckboxMenuItem</b> objects in an ordinary pull-down
menu. Therefore, in this section we will discuss only those code fragments
which have become interesting due to the use of the <b>PopupMenu</b> object.

<p>The first interesting code fragment is the code that instantiates a
<b>PopupMenu</b> object and adds three previously instantiated <b>CheckboxMenuItem</b>
objects to it.

<p>As mentioned earlier, the constructor that is being invoked here should
cause the popup menu to have the name <b>"Popup Menu"</b>. However, when
compiled and run using the version of JDK 1.1.3 available for Win95, the
name does not appear on the menu. Rather, the menu simply looks like a
three-dimensional grey panel with highlighting on the left side and the
top. The only text appearing on the panel is the three menu items.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; PopupMenu myPopupMenu = new PopupMenu("<b>Popup Menu</b>");
&nbsp;&nbsp;&nbsp; myPopupMenu.add(firstMenuItem);
&nbsp;&nbsp;&nbsp; myPopupMenu.add(secondMenuItem);
&nbsp;&nbsp;&nbsp; myPopupMenu.add(thirdMenuItem);&nbsp;</pre></td></tr></table>
The next code fragment is interesting because of the way that it differs
from previous code involving menus. In previous programs, the procedure
was to add one or more <b>Menu</b> objects to an object of type <b>MenuBar</b>,
and then to associate the <b>MenuBar</b> object with the frame by invoking
the method <b>setMenuBar()</b>.

<p>However, to associate a <b>PopupMenu</b> object with a <b>Frame</b>
object, we simply use the typical <b>object.add()</b> method that we would
use to associate most other components with a container.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>Frame myFrame = new Frame("Copyright 1997, R.G.Baldwin");
myFrame.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseProcessor(myFrame,myPopupMenu));
myFrame.<b>add</b>(myPopupMenu);</pre></td></tr></table>
The next interesting code fragment is the overridden <b>mousePressed()</b>
method of the <b>MouseListener</b> interface which is here encapsulated
in a class named <b>MouseProcessor</b>.

<p>The purpose of this class is to instantiate a listener object that will
trap <b>MousePressed</b> events on the <b>Frame</b> object and <b>show()</b>
the <b>PopupMenu</b> object at the location of the mouse event.

<p>This is a typical <b>MouseListener</b> class and the only thing new
is the use of the <b>show()</b> method of the <b>PopupMenu</b> class mentioned
earlier.

<p>Note that a reference to the <b>PopupMenu</b> object and a reference
to the <b>Frame</b> object are passed in when the object is instantiated.
They are saved with the local names of <b>aPopupMenu</b> and <b>aFrame</b>.
Both of these references are needed for invocation of the <b>show()</b>
method in the following code fragment. The reference to the <b>Frame </b>object
is used to establish the location of the menu when it appears. The reference
to the <b>PopupMenu</b> object simply specifies which menu to show.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public void <b>mousePressed</b>(MouseEvent e){
&nbsp;&nbsp;<b>&nbsp; aPopupMenu.show(aFrame,e.getX(),e.getY())</b>;
&nbsp; }//end mousePressed()</pre></td></tr></table>

<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
This section contains a complete listing of the program. See the previous
sections for an operational description of the program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Menu04.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

Illustrates use of PopupMenu objects composed of&nbsp;
CheckboxMenuItems.

This application places one PopupMenu in a Frame object.
The menu contains three items of type CheckboxMenuItem.
The PopupMenu appears whenever the user clicks inside the
Frame object and below the banner portion across the top&nbsp;
of the Frame object.&nbsp; The PopupMenu object is located&nbsp;
near position of the mouse click.

Selection of an item in the PopupMenu generates an&nbsp;
ItemEvent that is trapped using a Listener object of type
ItemListener which overrides the itemStateChanged()
method.&nbsp; Information about the menu item that was selected
is displayed on the screen.

An earlier lesson contained a detailed discussion of the
use of CheckboxMenuItem objects, and they are only&nbsp;
incidental to this lesson which is designed to illustrate
the use of PopupMenu objects.

A windowClosing() event listener object is instantiated
and registered on the frame to terminate the program when
the frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class Menu04 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class Menu04
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Instantiate CheckboxMenuItem objects&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; CheckboxMenuItem firstMenuItem =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckboxMenuItem("First Item");
&nbsp;&nbsp;&nbsp; CheckboxMenuItem secondMenuItem =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckboxMenuItem("Second Item");
&nbsp;&nbsp;&nbsp; CheckboxMenuItem thirdMenuItem =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckboxMenuItem("Third Item");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate an ItemListener object and register it&nbsp;
&nbsp;&nbsp;&nbsp; // on the CheckboxMenuItem objects.
&nbsp;&nbsp;&nbsp; CheckBoxMenuProcessor eventProcessor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckBoxMenuProcessor();
&nbsp;&nbsp;&nbsp; firstMenuItem.addItemListener(eventProcessor);
&nbsp;&nbsp;&nbsp; secondMenuItem.addItemListener(eventProcessor);
&nbsp;&nbsp;&nbsp; thirdMenuItem.addItemListener(eventProcessor);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a PopupMenu object and add the&nbsp;
&nbsp;&nbsp;&nbsp; // CheckboxMenuItem objects to it
&nbsp;&nbsp;&nbsp; PopupMenu myPopupMenu = new PopupMenu("Popup Menu");
&nbsp;&nbsp;&nbsp; myPopupMenu.add(firstMenuItem);
&nbsp;&nbsp;&nbsp; myPopupMenu.add(secondMenuItem);
&nbsp;&nbsp;&nbsp; myPopupMenu.add(thirdMenuItem);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseProcessor(myFrame,myPopupMenu));
&nbsp;&nbsp;&nbsp; //This is different from menus with MenuBar object.
&nbsp;&nbsp;&nbsp; // Note that it uses an ordinary add() method.
&nbsp;&nbsp;&nbsp; myFrame.add(myPopupMenu);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,100);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//Class to trap a mousePressed event and display the&nbsp;
// PopupMenu object at the location of the mouse event.
class MouseProcessor extends MouseAdapter{
&nbsp; Frame aFrame;
&nbsp; PopupMenu aPopupMenu;
&nbsp;&nbsp;
&nbsp; //constructor
&nbsp; MouseProcessor(Frame inFrame, PopupMenu inPopupMenu){
&nbsp;&nbsp;&nbsp; aFrame = inFrame;
&nbsp;&nbsp;&nbsp; aPopupMenu = inPopupMenu;
&nbsp; }//end constructor

&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Display the PopupMenu on the specified Frame near the
&nbsp;&nbsp;&nbsp; // specified coordinate position of the mouse click,
&nbsp;&nbsp;&nbsp; // provided that the coordinates of the click are not
&nbsp;&nbsp;&nbsp; // in the banner at the top.
&nbsp;&nbsp;&nbsp; aPopupMenu.show(aFrame,e.getX(),e.getY());
&nbsp; }//end mousePressed()
}//end class MouseProcessor
//=======================================================//

//Class to instantiate an ItemListener object to be&nbsp;
// registered on the menu items.
class CheckBoxMenuProcessor implements ItemListener{
&nbsp; public void itemStateChanged(ItemEvent e){
&nbsp;&nbsp;&nbsp; //Display the menu item that generated the ItemEvent
&nbsp;&nbsp;&nbsp; System.out.println(e.getSource());
&nbsp; }//end itemStateChanged
}//end class CheckBoxMenuProcessor
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>