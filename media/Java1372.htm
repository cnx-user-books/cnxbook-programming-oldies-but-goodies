<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 12,
The Comparator Interface, Part 4</h2>
<p>
<i><font color="#000000">Baldwin shows you </font>how to extract the contents
of a collection into an array, and how to use a Comparator object to sort
the contents of the array into reverse natural order.&nbsp; He also shows
you how to sort the contents of the array into natural order without the
use of a Comparator object.</i></p>
&nbsp;<b>Published:</b>&nbsp; August 27, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1372
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">A miniseries</font></b>
<p>This is the twelfth lesson in a miniseries on Java data structures and
the Java<i> Collections Framework.</i>&nbsp; The first lesson in the miniseries
was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1370.htm">Data Structures in Java: Part 11, The
Comparator Interface, Part 3</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p><b><font color="#FF0000">A sub-series</font></b>
<p>This is also the third lesson in a sub-series on the <b>Comparator</b>
interface.&nbsp; The primary purpose of the lessons in this sub-series
is to teach you about the interactions between the <b>Comparator</b> interface
and the Collections Framework.
<p>However, this lesson departs somewhat from that primary purpose and
teaches you how to use a <b>Comparator</b> object to sort the contents
of an array containing references to objects.&nbsp; Technically speaking,
an array is not part of the core Collections Framework.&nbsp; However,
it is definitely a first cousin to the Framework.
<p><b><font color="#FF0000">An array is a container</font></b>
<p>As you should already be aware, an array is a container that can be
used to store a collection of primitive values or references to objects.&nbsp;
Furthermore, the <b>Collection</b> interface declares a method named <b>toArray</b>,
which can be invoked on a <b>Collection</b> object to <i>"return an array
containing all of the elements in this collection whose runtime type is
that of the specified array"</i>.
<p><b><font color="#FF0000">An opportune time to ...</font></b>
<p>Since you are studying this sub-series of lessons to learn about the
uses of the <b>Comparator</b> interface, this seems like an opportune time
to teach you how to get an array from a collection, and how to use the
<b>Comparator</b>
interface to sort the contents of the array.&nbsp; <i>(While I'm at it,
I will also teach you how to sort the elements in an array of object references
into natural order without the use of a Comparator object.)</i>
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">In this lesson, I will teach you</font> how to extract
the contents of a collection into an array, and how to use a <b>Comparator</b>
object to sort the contents of the array into <i>reverse natural order</i>.&nbsp;
I will also teach you how to sort the contents of the array into <i>natural
order</i> without the use of a <b>Comparator</b> object.
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Program</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Take a pencil and a piece of paper and see if you can write down the
output produced by the program shown in Listing 1.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparator05.java
//Copyright 2001, R.G.Baldwin
import java.util.*;
import java.io.Serializable;

public class Comparator05{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparator05

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp; Object[] array;

&nbsp;&nbsp;&nbsp; ref = new Vector();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection data");
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; array = ref.toArray();
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Raw array data");
&nbsp;&nbsp;&nbsp; display(array);

&nbsp;&nbsp;&nbsp; //Sort the array into natural order
&nbsp;&nbsp;&nbsp; // and display it.
&nbsp;&nbsp;&nbsp; Arrays.sort(array);
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Natural order sorted " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "array data");
&nbsp;&nbsp;&nbsp; display(array);

&nbsp;&nbsp;&nbsp; //Sort the array into custom order
&nbsp;&nbsp;&nbsp; // and display it.
&nbsp;&nbsp;&nbsp; Arrays.sort(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array, new TheComparator());
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Custom order sorted " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "array data");
&nbsp;&nbsp;&nbsp; display(array);

&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection data");
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();

&nbsp; }//end doIt()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; static void display(Object[] array){
&nbsp;&nbsp;&nbsp; for(int i = 0; i &lt; array.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(array[i] + " ");
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end display()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements Comparator,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int compare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

&nbsp;&nbsp;&nbsp; int result = ((String)o1).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compareTo(((String)o2));
&nbsp;&nbsp;&nbsp; return result*(-1);
&nbsp; }//end compare()
}//end class TheComparator

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p>If you wrote down the following for the program output, you already
understand most of the material covered in this lesson and you can probably
skip this lesson and move on to the next lesson.
<p><b><tt>Collection data</tt></b>
<br><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<br><b><tt>Raw array data</tt></b>
<br><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<br><b><tt>Natural order sorted array data</tt></b>
<br><b><tt>BILL Bill JOE Joe TOM Tom</tt></b>
<br><b><tt>Custom order sorted array data</tt></b>
<br><b><tt>Tom TOM Joe JOE Bill BILL</tt></b>
<br><b><tt>Collection data</tt></b>
<br><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<p>If you didn't write down the correct output for the program in Listing
1, you should probably continue with your study of this lesson.
<p><b><font color="#FF0000">Similar to previous programs</font></b>
<p>Although this program is somewhat more complex, the overall structure
of this program is similar to programs that I have discussed in previous
lessons.&nbsp; Therefore, I will concentrate on those aspects of this program
that differentiate it from the programs in previous lessons.
<p><b><font color="#FF0000">A new Vector object</font></b>
<p>The code in Listing 2 instantiates a new object of the <b>Vector</b>
class and stores a reference to that object in the variable named <b>ref</b>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; ref = new <b>Vector</b>();

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p>The <b>Vector</b> class was part of Java long before the Collections
Framework was released.&nbsp; However, with the release of the Collections
Framework, the <b>Vector</b> class was upgraded to implement the <b>Collection
</b>interface
and the <b>List</b> interface.
<p><b><font color="#FF0000">A Vector is a List</font></b>
<p>Therefore, a <b>Vector</b> is a <b>List</b>, and adheres to the various
contracts of the <b>List</b> interface.&nbsp; For example, since it is
not a <b>Set</b>, it doesn't prohibit duplicate elements.&nbsp; Because
it is a <b>List</b>, it is an <i>ordered</i> collection.&nbsp; The position
of each element in the collection is determined by a numeric index associated
with the element and is independent of the value of the element.
<p><b><font color="#FF0000">The fillIt method</font></b>
<p>As has been the case in several of the programs in previous lessons,
the code in Listing 3 passes the <b>Vector</b> object's reference to a
method named <b>fillIt</b> where the <b>Vector</b> is populated with the
names of several people.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p>The code for the <b>fillIt</b> method is shown in Listing 4.&nbsp; As
you can see, the names were added to the collection in no particular order
relative to their values.&nbsp; <i>(The add method for the Vector class
simply adds each new element to the end of the list.)</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class Populator{
&nbsp; public static void <b>fillIt</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Iteration on a Vector</font></b>
<p>When an iterator is used to traverse the elements in a <b>Vector</b>
collection, the elements are delivered by the iterator in ascending index
order, beginning with the element stored at index 0.
<p>The code in Listing 5 gets and uses an iterator to display the contents
of the populated collection.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection data");
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The output</font></b>
<p>The code in Listing 5 produces the following output:
<p><b><tt>Collection data</tt></b>
<br><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<p>As you can see, this is the same order in which the names were added
to the collection by the <b>fillIt</b> method.
<p><b><font color="#FF0000">The toArray method</font></b>
<p>The code in Listing 6 is new to this lesson.&nbsp; This code extracts
the contents of the collection and stores the elements in an array of type
<b>Object</b>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; array = ref.toArray();

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The contract</font></b>
<p>According to the documentation for the <b>Vector</b> class, this version
of the <b>toArray</b> method:
<blockquote><i>"Returns an array containing all of the elements in this
Vector in the correct order."</i></blockquote>
The documentation for the <b>toArray</b> method of the <b>Collection</b>
interface is a little more verbose, reading partially as follows:
<blockquote><i>"Returns an array containing all of the elements in this
collection. If the collection makes any guarantees as to what order its
elements are returned by its iterator, this method must return the elements
in the same order.</i></blockquote>
<b><font color="#FF0000">Elements are returned in ascending index order</font></b>
<p>The iterator for a <b>Vector</b> returns its elements in ascending index
order.&nbsp; Therefore, the <b>toArray</b> method for a <b>Vector</b> object
must return the elements in the same order.
<p><b><font color="#FF0000">A "safe" array</font></b>
<p>Also, according to Sun:
<blockquote><i>"The returned array will be "safe" in that no references
to it are maintained by this collection. ... The caller is thus free to
modify the returned array."</i></blockquote>
In the code in Listing 6 above, the returned reference to an array object
is assigned to a reference variable that previously contained null.&nbsp;
Following the execution of the <b>toArray</b> method, that reference variable
refers to an array object of type <b>Object</b> containing the same elements
as the <b>Vector</b> collection, in ascending index order.
<p><i>(Regarding the concept of a "safe" array, it is easy to demonstrate
that the elements in the array refer to the same objects referred to by
the elements in the Vector.&nbsp; Thus, using the references stored in
the array to modify the objects to which they refer also modifies the objects
referred to by the elements stored in the Vector.&nbsp; In other words,
the elements in the array are copies of the elements in the Vector.&nbsp;
The elements in the array refer to the original objects, and do no refer
to copies of those objects.&nbsp; As usual when dealing with multiple references
to objects, care should be taken to avoid inadventently corrupting those
objects.)</i>
<p><b><font color="#FF0000">Displaying the contents of the array</font></b>
<p>The code in Listing 7 passes the array object's reference to a method
named <b>display</b> that displays the contents of the array in ascending
index order.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Raw array data");
&nbsp;&nbsp;&nbsp; display(array);

<b><font face="Courier New,Courier">Listing 7</font></b></pre>
</td>
</tr>
</table>

<p>The output produced by the code in Listing 7 is as shown below:
<p><b><tt>Raw array data</tt></b>
<br><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<p>As you can see, this is the same data, in the same order, as the contents
of the collection displayed earlier.&nbsp; <i>(The method named display
is a simple utility method, which I won't discuss here because of its simplicity.&nbsp;
You can view the display method in its entirety in Listing 1.)</i>
<p><b><font color="#FF0000">Sorting the array into <i>natural order</i></font></b>
<p>The code in Listing 8 is also new to this lesson.&nbsp; This code uses
one of the overloaded <b>sort</b> methods of the <b>Arrays</b> class to
sort the contents of the array into <i>natural order</i>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Arrays.sort(array);

<b><font face="Courier New,Courier">Listing 8</font></b></pre>
</td>
</tr>
</table>

<p>Here is part of what Sun has to say about the <b>Arrays</b> class:
<blockquote><i>"This class contains various methods for manipulating arrays
(such as sorting and searching)."</i></blockquote>
The class contains many overloaded versions of the <b>sort</b> method.&nbsp;
Here is part of what Sun has to say about the version of the <b>sort</b>
method used in Listing 8 above:
<blockquote><i>"Sorts the specified array of objects into ascending order,
according to the natural ordering of its elements. All elements in the
array must implement the Comparable interface."</i></blockquote>
<b><font color="#FF0000">The Comparable interface and polymorphic behavior</font></b>
<p>Although the declared type of the array is <b>Object</b>, the array
actually contains references to <b>String</b> objects.
<p>The <b>String</b> class implements the <b>Comparable</b> interface.&nbsp;
Therefore, it is not necessary to cast the array to type <b>String</b>
before passing it to the <b>Sort</b> method.
<p>Rather, the <b>sort</b> method treats the array as type <b>Comparable</b>
and uses the <b>compareTo</b> method declared in that interface to perform
any necessary comparisons required to carry out the sorting operation.
<p>This is another example of the usefulness of polymorphism as implemented
through the use of the Java interface.&nbsp; <i>(The Comparable interface
and the compareTo method declared in that interface were discussed in detail
in an earlier lesson.)</i>
<p><b><font color="#FF0000">Display the sorted array data</font></b>
<p>The code in Listing 9 displays the contents of the array after those
contents are sorted into <i>natural order<b> </b></i>by the <b>sort</b>
method in Listing 8 above.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Natural order sorted " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "array data");
&nbsp;&nbsp;&nbsp; display(array);

<b><font face="Courier New,Courier">Listing 9</font></b></pre>
</td>
</tr>
</table>

<p>The output produced by Listing 9 above was:
<p><b><tt>Natural order sorted array data</tt></b>
<br><b><tt>BILL Bill JOE Joe TOM Tom</tt></b>
<p><b><font color="#FF0000">The <i>natural order</i> for String objects</font></b>
<p>I discussed the concept of <i>natural ordering</i> in a previous lesson
with particular emphasis of the <i>natural order</i> for strings.&nbsp;
You will recognize that the strings shown in the above output have been
sorted into <i>natural order</i> according to the definition of the <b>compareTo</b>
method of the <b>String</b> class.
<p><b><font color="#FF0000">Sort the array with a Comparator</font></b>
<p>The code in Listing 10 is also new to this lesson.&nbsp; This code uses
a different version of the overloaded <b>sort</b> method of the <b>Arrays</b>
class to sort the array using the rules defined in the <b>compare</b> method
of a <b>Comparator</b> object <i>(passed as a parameter to the sort method).</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Arrays.sort(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; array, new TheComparator());

<b><font face="Courier New,Courier">Listing 10</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">What does Sun have to say about this?</font></b>
<p>Here is part of what Sun has to say about this version of the <b>sort</b>
method of the <b>Arrays</b> class:
<blockquote><i>"Sorts the specified array of objects according to the order
induced by the specified comparator. All elements in the array must be
mutually comparable by the specified comparator (that is, c.compare(e1,
e2) must not throw a ClassCastException for any elements e1 and e2 in the
array)."</i></blockquote>
<b><font color="#FF0000">TheComparator class</font></b>
<p>Listing 11 shows the class from which the <b>Comparator</b> object was
instantiated.
<p>This is essentially the same class that was used to instantiate a <b>Comparator</b>
object in an earlier lesson.&nbsp; I discussed the compare method in detail
in that lesson and won't repeat that discussion here.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements Comparator,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int <b>compare</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

&nbsp;&nbsp;&nbsp; int result = ((String)o1).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compareTo(((String)o2));
&nbsp;&nbsp;&nbsp; return <b>result*(-1)</b>;
&nbsp; }//end compare()
}//end class TheComparator

<b><font face="Courier New,Courier">Listing 11</font></b></pre>
</td>
</tr>
</table>

<p>Suffice it to say at this point that this <b>Comparator</b> object causes
the elements in the array to be sorted into <i>reverse natural order</i>.&nbsp;
That term was also explained in the previous lesson, so I won't discuss
it further here.
<p><b><font color="#FF0000">Display the array contents again</font></b>
<p>The code in Listing 12 was used to display the newly-sorted contents
of the array.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Custom order sorted " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "array data");
&nbsp;&nbsp;&nbsp; display(array);

<b><font face="Courier New,Courier">Listing 12</font></b></pre>
</td>
</tr>
</table>

<p>The output produced by this code was:
<p><b><tt>Custom order sorted array data</tt></b>
<br><b><tt>Tom TOM Joe JOE Bill BILL</tt></b>
<p>You will recognize this as <i>reverse natural order</i> for the elements
contained in the array.
<p><b><font color="#FF0000">Could have sorted differently</font></b>
<p>It is important to note that I could have caused the sorting order to
be different from <i>reverse natural order</i> simply by defining the rules
used for comparison in the <b>compare</b> method shown in Listing 11 above.&nbsp;
This makes it possible for you to sort array data into any order that you
choose as long as you can write the sorting rules into the <b>compare</b>
method of a class that implements the <b>Comparator</b> interface.
<p><b><font color="#FF0000">Display the collection data again</font></b>
<p>Finally, in order to show that none of this has disturbed the contents
of the original collection, the code in Listing 13 gets and uses an iterator
to display the contents of the <b>Vector</b> collection.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Collection data");
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 13</font></b></pre>
</td>
</tr>
</table>

<p>The output produced by the code in Listing 13 was:
<p><b><tt>Collection data</tt></b>
<br><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<p>If you compare this with the output produced by the code at the beginning
of the program, you will see that the iterator still returns the elements
in the <b>Vector</b> in the same order that they were added.&nbsp; Thus,
modifications to the array did not disturb the contents of the <b>Vector</b>
collection.
<p><b><font color="#FF0000">The bottom line</font></b>
<p>The <b>toArray</b> method of the <b>Collection</b> interface makes it
possible to extract a copy of the elements in a collection into an array
and to manipulate those elements in whatever way you wish.&nbsp; As mentioned
earlier, however, care should be exercised to make certain that the copies
of the references to the original objects are not used to corrupt the objects.
<p>The various versions of the <b>sort</b> method in the <b>Arrays</b>
class make it possible to sort the contents of arrays in a variety of different
ways.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I have taught you how to extract
the contents of a collection into an array and how to use a <b>Comparator</b>
to sort the contents of the array into <i>reverse natural order</i>.</font>
<p><font color="#000000">Although I elected to use <i>reverse natural order</i>
for purposes of illustration, I could have sorted the array into some other
order simply by defining the comparison rules in the <b>compare</b> method
of the <b>Comparator</b> class differently.</font>
<p><font color="#000000">In order to further expand your knowledge of array
sorting, I also sorted the array into <i>natural order</i> without the
use of a <b>Comparator</b><i>.</i></font>
<p><font color="#000000">Sorting the contents of the array did not disturb
the contents of the <b>Vector</b> collection from which the contents of
the array were derived.</font>
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will show you how to use the <b>sort</b> method of
the <b>Collections</b> class along with a <b>Comparator</b> object to sort
the contents of a <b>List</b>.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
