<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<h2>
Enterprise JavaBeans:&nbsp; Helper Classes</h2>
<i><font color="#000000">Baldwin presents a sample enterprise bean program
that you can use to hone your skills in the deployment of enterprise beans
into the J2EE server.&nbsp; This bean makes uses of helper classes, requiring
you to take that into account in the deployment process.</font></i>
<p><b>Published:</b>&nbsp; April 2, 2001
<br><b>By <a href="#BaldwinBio">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1322
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listings</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is one in a series of lessons designed to teach you about Sun's Enterprise
JavaBeans (EJB).
<p><b><font color="#FF0000">A cookbook approach</font></b>
<p>Previous lessons in this series provided accelerated instructions to
help you get your first enterprise bean up and running as quickly as possible.
<p>In working through the accelerated lessons, I provided the information
more or less in a cookbook fashion.
<p><b><font color="#FF0000">A change of pace</font></b>
<p>Now that you have your first enterprise bean running successfully in
your J2EE server, it is time to slow down the pace, and embark on the task
of understanding Enterprise JavaBeans <i>(not only what, but also how and
why)</i>.
<p>The purpose of the remaining lesson in this series on EJB will be to
help you really understand what enterprise beans are, how to write them,
and how to use them to advantage.
<p>From this point on, I intend to go much more slowly explaining things
more carefully as I proceed.&nbsp; Along the way, I will show you lots
of sample bean programs, each of which will be as simple as I can make
it while still illustrating the concept that the program is intended to
illustrate.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is strongly recommended that you study the previous lesson entitled
<a href="Java1320.htm">Enterprise
JavaBeans:&nbsp; Middle-Tier Servers and J2EE</a> before embarking on this
lesson.
<p>Additional supplementary material that I have written is available at
<a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan</a>.&nbsp;
As of the date of this writing, Gamelan does not maintain a consolidated
index to my Java tutorials.&nbsp; Therefore, they may be difficult to locate
on the Gamelan site.&nbsp; A consolidated index with links to the tutorials
on the Gamelan site is available at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth and refer to earlier material without losing your place.
<center>
<h2>
<a NAME="Preview"></a>Preview</h2></center>
<font color="#000000">In this lesson, I will present a sample enterprise
bean program that you can use to hone your skills in the deployment of
enterprise beans into the J2EE server.</font>
<p><font color="#000000">This sample program will require deployment procedures
that are a little different than those that I have shown you in previous
lessons.&nbsp; In particular, this program includes a helper class that
the primary bean class uses to accomplish the objectives of its business
method.&nbsp; You must make certain that you cause the class file representing
the helper class to be included in the bean's jar file when you deploy
the bean.</font>
<center>
<h2>
<a NAME="Sample Program"></a>Sample Program</h2></center>
The name of the source file for this enterprise bean class is <b>HelperBean.java</b>.&nbsp;
Complete listings of the source code for the bean class and a simple client
program that exercises the bean are provided in the listings near the end
of the lesson.
<p><b><font color="#FF0000">Helper classes</font></b>
<p>The purpose of this bean is to illustrate the use of helper classes.&nbsp;
Helper classes are classes that the primary bean class calls upon to successfully
execute its business methods.
<p>This bean receives and returns a <b>String</b> object via a single business
method named <b>aBusinessMethod()</b>.&nbsp; When the business method is
invoked by the client, the business method instantiates an object of another
class named <b>AHelperClass</b> and invokes a method on that object named
<b>getTheDate()</b>.&nbsp;
The method named <b>getTheDate() </b>returns a <b>String</b> representation
of the current date and time.
<p><i>(Obviously, this could be accomplished without a helper class, but
the objective here is to illustrate the use of helper classes and this
is one way to do that.)</i>
<p><b><font color="#FF0000">Business method returns the date and time</font></b>
<p>The business method concatenates the string <b>Hello</b> onto the incoming
<b>String</b>
producing a new <b>String</b>.&nbsp; It concatenates the date string onto
that <b>String</b> with a newline character separating the two, producing
the final <b>String</b>.&nbsp; It then returns the final
<b>String</b>
that results from the concatenation process.
<p>The string that is returned is:
<p><b><tt>"Hello" + &lt;incoming string> + '\n' +</tt></b>
<br><b><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&lt;date/time></tt></b>
<p>where the material in angle brackets varies from one invocation of the
business method to another invocation of the business method.
<p><b><font color="#FF0000">A little more complicated...</font></b>
<p>This bean is slightly more complicated than the bean that I used to
teach you how to write, compile, deploy, and run a stateless session bean
in the previous lessons.&nbsp; I am providing this bean to give you additional
practice in deploying a bean.
<p><b><font color="#FF0000">The punch line</font></b>
<p>Class files for helper classes must be encapsulated in the jar file
that contains the primary bean class files along with the class files for
the remote and home interfaces, the manifest, etc.
<p>After you deploy the bean, it would be a good exercise for you to unzip
the resulting J2EE application file, and the bean's jar file to confirm
that you did successfully encapsulate the class file for the helper class
in the bean's jar file.
<p><b><font color="#FF0000">My results</font></b>
<p>My J2EE application file <i>(produced by the deployment process)</i>
was named <b>Helper01.ear</b>.&nbsp; The bean's jar file contained within
the application file was named <b>ejb-jar-ic.jar</b>.&nbsp; The contents
of the bean's jar file are shown in Listing 1 below <i>(META-INF. indicates
a sub directory)</i>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>META-INF.ejb-jar.xml
META-INF.MANIFEST.MF
AHelperClass.class
HelperRemote.class
HelperBean.class
HelperHome.class

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Four class files were encapsulated</font></b>
<p>As you can see, the bean's jar file contained class files for the bean,
the remote interface, the home interface, and the helper class.&nbsp; It
also contained a deployment descriptor file named <b>ejb-jar.xml</b>, and
a manifest file named <b>MANIFEST.MF</b>.
<p><b><font color="#FF0000">The deployment descriptor file</font></b>
<p>Listing 2 below shows the contents of the deployment descriptor file
<i>(note
that I had to manually enter some line breaks and use a very small font
to make it fit in this narrow presentation format)</i>.&nbsp; You might
find it useful to examine the contents of your deployment descriptor file
to see if you can correlate various elements in the file with actions that
you took during the deployment process.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font size=-2>&lt;?xml version="1.0" encoding="Cp1252"?>

&lt;!DOCTYPE ejb-jar PUBLIC '-//
Sun Microsystems, Inc.//DTD Enterprise&nbsp;
JavaBeans 1.1//EN' 'http://java.sun.
com/j2ee/dtds/ejb-jar_1_1.dtd'>

&lt;ejb-jar>
&nbsp; &lt;description>This bean illustrates&nbsp;
&nbsp; the use of helper classes.
&nbsp; &lt;/description>
&nbsp; &lt;display-name>Helper01JAR
&nbsp; &lt;/display-name>
<b>&nbsp; &lt;enterprise-beans>
&nbsp;&nbsp;&nbsp; &lt;session>
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;description>no description&lt;/description>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;display-name>Enterprise Bean&lt;/display-name>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ejb-name>Enterprise Bean&lt;/ejb-name>
&nbsp;&nbsp;&nbsp;<b>&nbsp;&nbsp; &lt;home>HelperHome&lt;/home>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;remote>HelperRemote&lt;/remote>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;ejb-class>HelperBean&lt;/ejb-class>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;session-type>Stateless&lt;/session-type>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;transaction-type>Bean&lt;/transaction-type>
&nbsp;&nbsp;&nbsp; &lt;/session>
</b>&nbsp; <b>&lt;/enterprise-beans>
</b>&lt;/ejb-jar>

</font><b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p>The contents of your deployment descriptor file may not match mine exactly,
because you may use different names and different descriptions during deployment.&nbsp;
However, everything highlighted in boldface in Listing 2 should probably
match.
<p><b><font color="#FF0000">The manifest file</font></b>
<p>Listing 3 below shows the contents of the manifest file.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>Manifest-Version: 1.0

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The output</font></b>
<p>When the business method was executed on the bean by the simple client
program shown in Listing 11, the following output was produced on my client
screen.&nbsp; Obviously, your date and time will be different.
<p><b><tt>Bean returned: Hello Dick Baldwin</tt></b>
<br><b><tt>Mon Jan 08 18:19:34 CST 2001</tt></b>
<p>The bean was tested using Sun J2EE and JDK 1.3 under WinNT 4.0.
<center>
<h2>
<a NAME="Interesting Code Fragments"></a>Interesting Code Fragments</h2></center>
In keeping with my normal approach, I will break this program down and
discuss it in fragments.&nbsp; As mentioned earlier, you can view a complete
listing of the program in Listing 10 near the end of the lesson.
<p><b><font color="#FF0000">The bean class declaration</font></b>
<p>The first fragment, shown in Listing 4 below, shows import directives,
along with the declaration of the bean class, and the declaration of an
instance variable, capable of storing a reference to a <b>SessionContext</b>
object.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>import javax.ejb.*;
import java.util.Date;

public class <b>HelperBean</b>&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements <b>SessionBean</b>{
&nbsp; SessionContext ctx;

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p>Recall that a class file from which a session bean will be instantiated
must implement the <b>SessionBean</b> interface.
<p>Nothing in Listing 4 above is particularly interesting.&nbsp; I included
it here simply for completeness.
<p><b><font color="#FF0000">The business method</font></b>
<p>Listing 5 below shows the only business method belonging to the bean.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;
&nbsp; public String <b>aBusinessMethod</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String str){
&nbsp;&nbsp;&nbsp; return "Hello " + str + '\n' +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>new AHelperClass().getTheDate()</b>;
&nbsp; }//end aBusinessMethod()

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p>The interesting thing about this method is the fact that it instantiates
an object of the helper class, and invokes a method on that object to get
a <b>String</b> representation of the current date and time.&nbsp; It concatenates
that string onto another string and returns the fully-concatenated <b>String</b>
object to the client program.
<p><b><font color="#FF0000">Remaining code in the bean class</font></b>
<p>Listing 6 below shows the remaining code in the bean class.&nbsp; It
might be worthwhile to point out that the four callback methods that are
used to deal with the life cycle events of the bean are defined as empty
methods. <i>(I didn't need to do anything special when the life cycle events
occurred.)</i>
<p>Otherwise, there is nothing particularly interesting in Listing 6.&nbsp;
I included this fragment for completeness also.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; public void <b>setSessionContext</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SessionContext ctx){
&nbsp;&nbsp;&nbsp; this.ctx = ctx;
&nbsp; }//setSessionContext()

&nbsp; //Note that the following&nbsp;
&nbsp; // callback methods are empty.
&nbsp; public void <b>ejbCreate</b>(){}
&nbsp; public void <b>ejbRemove</b>(){}
&nbsp; public void <b>ejbActivate</b>(){}
&nbsp; public void <b>ejbPassivate</b>(){}

&nbsp; //public constructor
&nbsp; public <b>HelperBean</b>(){}

}//end class HelperBean

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The helper class</font></b>
<p>Finally, Listing 7 below shows the simple definition of the helper class
that the business method uses to get a <b>String</b> representation of
the current date and time.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class AHelperClass{
&nbsp; String getTheDate(){
&nbsp;&nbsp;&nbsp; return new Date().toString();
&nbsp; }//end method getTheDate();
}//end class AHelperClass

<b><font face="Courier New,Courier">Listing 7</font></b></pre>
</td>
</tr>
</table>

<p>The most interesting thing about the code shown in Listing 7 is the
fact that it exists, and the fact that the class file that results from
the compilation of <b>AHelperClass</b> must be contained in the bean's
jar file.&nbsp; You accomplish that by including it in the set of class
files that you specify for inclusion in the bean's jar file on the deployment
screen shown in Figure 1 below.
<center>
<p><img SRC="java1322a.gif" height=501 width=401>
<p>Figure 1.&nbsp; Deployment screen used to add files to a bean's jar
file.</center>

<p><i>(You should recognize Figure 1 as one of the screens that appears
when you use Sun's J2EE deployment tool.&nbsp; If you don't recognize it,
you will need to review the previous lessons in this series, including
the lesson entitled <a href="Java1314.htm">Enterprise JavaBeans(TM):&nbsp;
Getting Started with EJB, Part 5</a>.)</i>
<p><b><font color="#FF0000">The home interface</font></b>
<p>The source code for the home interface is shown in Listing 8.&nbsp;
Hopefully, you will remember that every bean must have a home interface,
and a remote interface, and that the home interface must declare one or
more overloaded <b>create()</b> methods for the bean.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>/* File HelperHome.java&nbsp;
Copyright 2001 R.G.Baldwin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
**************************************/
import javax.ejb.*;

public interface <b>HelperHome</b>&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extends EJBHome{
&nbsp; public HelperRemote <b>create()</b>&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws java.rmi.RemoteException,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; javax.ejb.CreateException;
}//end interface

<b><font face="Courier New,Courier">Listing 8</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The remote interface</font></b>
<p>The source code for the remote interface is shown in Listing 9 below.&nbsp;
Again, hopefully, you will remember that the remote interface must declare
all the business methods belonging to the bean.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>/* File HelperRemote.java
Copyright 2000 R.G.Baldwin
**************************************/
import javax.ejb.*;
import java.rmi.*;

public interface <b>HelperRemote</b>&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extends EJBObject{
&nbsp; String <b>aBusinessMethod(String s)</b>&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws RemoteException;
}//end interface

<b><font face="Courier New,Courier">Listing 9</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The client program</font></b>
<p>A complete listing of the client program that I used to exercise this
bean is shown in Listing 11 near the end of the lesson.&nbsp; There is
nothing new in that program, so I won't discuss it further in this lesson.&nbsp;
If you don't understand what you see there, you should go back and study
the lesson entitled <a href="Java1316.htm">Enterprise JavaBeans(TM):&nbsp;
Getting Started with EJB, Part 7</a>.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I provided a sample enterprise bean
program for you to use in further honing your ability to deploy enterprise
beans in the J2EE server.&nbsp; This program includes a helper class that
the primary bean class uses to accomplish the objectives of its business
method.</font>
<p><font color="#000000">During deployment, you must make certain that
you cause the class file representing that helper class to be included
in the bean's jar file.&nbsp; You do that using the deployment screen shown
in Figure 1 above.</font>
<p><font color="#000000">Other than the existence of the helper class,
the sample bean program provided in this lesson is no more complicated
than the bean program that I used to teach you how to deploy stateless
session beans in the previous lessons.</font>
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
In the next lesson, I will discuss the two different flavors of enterprise
beans:&nbsp; session beans and entity beans.&nbsp; After that, I will continue
providing discussions and sample programs on a variety of topics that remain
to be covered in developing your understanding of EJB.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listings</h2></center>
A complete listing of the source code for the bean class is shown in Listing
10 below.&nbsp; A listing of a client program that can be used to test
the bean is shown in Listing 11.&nbsp; Listing for the home and remote
interfaces are shown in Listings 8 and 9 above.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>/* File HelperBean.java
Copyright 2001 R.G.Baldwin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Rev 1/6/01

The purpose of this bean is to&nbsp;
illustrate the use of helper classes.&nbsp;&nbsp;
Helper classes are classes that the&nbsp;
primary bean class calls upon to&nbsp;
successfully execute its business&nbsp;
methods.

This is a stateless session bean.

This bean receives and returns a String
object via a single business method.&nbsp;&nbsp;
When the method is invoked by the&nbsp;
client, it instantiates an object of a&nbsp;
class named AHelperClass and invokes
a method on that object named&nbsp;
getTheDate().&nbsp; That method returns a&nbsp;
String representation of the current&nbsp;
date and time.

The business method concatenates the&nbsp;
String Hello to the incoming String.&nbsp;&nbsp;
It concatenates the date string onto&nbsp;
that String with a newline character&nbsp;
separating the two.&nbsp; It then returns
the String that results from the&nbsp;
complete concatenation operation.

The String that is returned is:
&nbsp;&nbsp;
"Hello" + &lt;incoming string> + '\n' +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;date/time>

The class files for helper classes must
be encapsulated in the jar file that&nbsp;
contains the primary bean class files&nbsp;
along with the class files for the&nbsp;
remote and home interfaces, the
manifest, etc.

When the business method was executed
on the bean by a simple client, the
following output was produced on the
client screen:

Bean returned: Hello Dick Baldwin
Mon Jan 08 18:19:34 CST 2001

Tested using Sun j2ee and JDK 1.3 under
WinNT 4.0 workstation.
**************************************/
import javax.ejb.*;
import java.util.Date;

public class HelperBean&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements SessionBean{
&nbsp; SessionContext ctx;
&nbsp;&nbsp;
&nbsp; public String aBusinessMethod(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String str){
&nbsp;&nbsp;&nbsp; return "Hello " + str + '\n' +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new AHelperClass().getTheDate();
&nbsp; }//end aBusinessMethod()

&nbsp; public void setSessionContext(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SessionContext ctx){
&nbsp;&nbsp;&nbsp; this.ctx = ctx;
&nbsp; }//setSessionContext()

&nbsp; //Note that some of the following&nbsp;
&nbsp; // callback methods are empty.
&nbsp; public void ejbCreate(){}
&nbsp; public void ejbRemove(){}
&nbsp; public void ejbActivate(){}
&nbsp; public void ejbPassivate(){}

&nbsp; //public constructor
&nbsp; public HelperBean(){}

}//end class HelperBean
//===================================//

//This class is a helper class.&nbsp; The
// class file for this class must be
// encapsulated into the bean's jar&nbsp;
// file.
class AHelperClass{
&nbsp; String getTheDate(){
&nbsp;&nbsp;&nbsp; return new Date().toString();
&nbsp; }//end method getTheDate();
}//end class AHelperClass

<b><font face="Courier New,Courier">Listing 10</font></b></pre>
</td>
</tr>
</table>

<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>/* File HelperClient.java
Copyright 2001 R.G.Baldwin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Rev 1/6/01

This client program was tested with&nbsp;
the bean named HelperBean.&nbsp; That is a&nbsp;
simple session bean that receives and&nbsp;
returns a String object.

The purpose of HelperBean is to&nbsp;
illustrate the use of helper classes by
the primary bean class to execute its&nbsp;
business methods.

The following output was produced in&nbsp;
the client window:
&nbsp;&nbsp;
Bean returned: Hello Dick Baldwin
Mon Jan 08 18:19:34 CST 2001

Tested using Sun JDK1.3 with J2EE1.2.1
under WinNT WkStn 4.0.
**************************************/
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;

import HelperRemote;
import HelperHome;

public class HelperClient{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String[] args)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws Exception {
&nbsp;&nbsp;&nbsp; //Get a reference to the bean's&nbsp;
&nbsp;&nbsp;&nbsp; // home interface.&nbsp; MyHelper01 is&nbsp;
&nbsp;&nbsp;&nbsp; // the JNDI name for the bean.
&nbsp;&nbsp;&nbsp; try {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context initial =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new InitialContext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object objRef = initial.lookup(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MyHelper01");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelperHome refToHome =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (HelperHome)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PortableRemoteObject.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; narrow(objRef,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelperHome.class);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the home reference to&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // create the bean object and get
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a remote reference.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelperRemote refToRemote =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToHome.create();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke a business method on the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // remote reference to the bean
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String returnValue =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToRemote.aBusinessMethod(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Dick Baldwin");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Bean returned: " +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; returnValue);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Remove the bean
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToRemote.remove();
&nbsp;&nbsp;&nbsp; }catch (Exception ex) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.err.println("Exception!");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ex.printStackTrace();
&nbsp;&nbsp;&nbsp; }//end catch
&nbsp; }//end main
}//end class

<b><font face="Courier New,Courier">Listing 11</font></b></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<br><font size=-1>Trademarks:&nbsp; The following terms <i>(and possibly
some other terms used in this lesson as well)</i> are trademarks of Sun
Microsystems:&nbsp; Enterprise JavaBeans, EJB, Java, Java 2 Platform Enterprise
Edition, J2EE, Java Naming and Directory Interface, JNDI, and JDBC</font>
<br>
<hr size=3 width="100%" align=center>
<br><font size=-1>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction
in whole or in part in any form or medium without express written permission
from Richard Baldwin is prohibited.</font>
<br>
<hr size=3 width="100%" align=center>
<h4>
<a NAME="BaldwinBio"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
