<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JavaBeans, Properties of Beans, Constrained Properties<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 512, Revised 02/19/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#introspection on the bean class">Introspection on the Bean Class</a></li>

<li><a href="#overview of properties">Properties</a></li>

<li><a href="#sample bean program">Sample Bean Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments from the
Bean Program</a></li>

<li><a href="#bean program listing">Program Listing for the Bean Program</a></li></ul>

<li><a href="#sample test program">Sample Test Program</a></li>

<ul><li><a href="#interesting code fragments from the test program">Interesting
Code Fragments from the Test Program</a></li>

<li><a href="#program listing for the test program">Program Listing for the
Test Program</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.

<p>The material in this lesson is extremely important. However, there is
simply too much material to be covered in detail during lecture periods.
Therefore, students in Prof. Baldwin's <b>Advanced Java Programming</b>
classes at ACC will be responsible for studying this material on their
own, and bringing any questions regarding the material to class for discussion.

<p>This lesson was originally written on October 19, 1997 using the software
and documentation in the JDK 1.1.3 download package along with the April
97 release of the BDK 1.0 download package.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
According to the document from JavaSoft entitled <u>Using the Beans Development
Kit 1.0 April 1997 A Tutorial</u>:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>An object with constrained properties allows other objects to veto
a constrained property value change. Constrained property listeners can
veto a change by throwing a PropertyVetoException.</td></tr></table>
In this lesson, we will develop and test a <b>bean </b>class, named <b>Beans06</b>,
that illustrates the use of <i>constrained </i>properties.

<p>This <b>bean </b>class is examined with the <b>Introspector</b> and
is tested with a test program designed specifically to exercise the ability
of the bean to broadcast an event to a list of registered <b>VetoableChangeListener
</b>objects whenever the value of one of the properties becomes subject
to change.

<p>The <b>bean</b> will also be <i>bound</i>. As such, the test program
will also confirm that the bean properly broadcasts an event to a list
of registered <b>PropertyChangeListener</b> objects whenever the value
of one of the properties actually changes.
<center><h2><a name="introspection on the bean class"></a><font color="#ff0000">Introspection
on the Bean Class</font></h2></center>
One way to describe a <b>bean</b> is to describe it from the viewpoint
of a Visual Builder Tool (VBT) using <b>introspection</b>. In an earlier
lesson we developed a Java application named <b>Introspect01 </b>that can
be used to apply <b>introspection </b>to a bean class and to record the
results in a temporary disk file. The following box shows the results of
<b>introspection </b>on the sample bean class that was developed for this
lesson.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>Name of bean:&nbsp; Beans06
Class of bean: class Beans06

==== Properties: ====
Name: preferredSize
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Dimension
&nbsp;Get method: public synchronized java.awt.Dimension&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.getPreferredSize()
&nbsp;Set method: null
Name: theColor
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Color
&nbsp;Get method: public synchronized java.awt.Color&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.getTheColor()
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.setTheColor(java.awt.Color)

==== Events: ====
<b>Event Name: vetoableChange
&nbsp;Add Method:&nbsp;&nbsp;&nbsp; public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.addVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.VetoableChangeListener)
&nbsp;Remove Method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.removeVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.VetoableChangeListener)
&nbsp;Event Type: vetoableChange
</b>&nbsp;
Event Name: propertyChange
&nbsp;Add Method:&nbsp;&nbsp;&nbsp; public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.PropertyChangeListener)
&nbsp;Remove Method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.PropertyChangeListener)
&nbsp;Event Type: propertyChange

==== Methods: ====
makeRed
removePropertyChangeListener
getTheColor
setTheColor
removeVetoableChangeListener
getPreferredSize
addPropertyChangeListener
makeBlue
addVetoableChangeListener</pre></td></tr></table>
The primary functional difference between this <b>bean </b>class and <b>bean
</b>classes developed in previous lessons is shown in the highlighted section
entitled <b>Events</b>. This section shows the <i>add</i> and <i>remove</i>
methods which provide the ability of the <b>bean</b> to notify a list of
<b>VetoableChangeListener </b>objects whenever one of the properties is
subject to change. (Note that this bean does not notify listeners of changes
in the value of the property named <b>preferredSize </b>but it does notify
listeners of changes in the value of the other <b>theColor</b>.)
<center><h2><a name="overview of properties"></a><font color="#ff0000">Properties</font></h2></center>
As discussed in earlier lessons, Java <b>beans</b> supports four kinds
of properties:
<ul><li>
Simple</li>

<li>
Indexed</li>

<li>
Bound</li>

<li>
Constrained</li></ul>
Previous lessons have discussed <i>Simple,</i> <i>Indexed,</i> and <i>Bound
</i>properties. This lesson will concentrate on <i>Constrained </i>properties.

<p>The <b>bean</b> class developed for this lesson has the following property
which is both <i>Bound</i> and <i>Constrained </i>properties:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>Name: theColor
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Color
&nbsp;Get method: public synchronized java.awt.Color&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.getTheColor()
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.setTheColor(java.awt.Color)</pre></td></tr></table>
A single property was included in this <b>bean</b> for simplicity. A subsequent
sample program will illustrate the use of a <b>bean</b> with multiple properties
which are both <i>Bound</i> and <i>Constrained</i>.

<p>The bean maintains a list of objects that request to be notified whenever
there is a change in the value of the <i>Bound</i> propertie. It also maintains
a list of objects that request to be notified whenever a property value
is subject to change. This is often referred to as registering <b>listener</b>
objects to receive an event.

<p>Objects that request to be added to the first list mentioned above must
be of a class that implements the <b>PropertyChangeListener </b>interface
and defines the <b>propertyChange()</b> method that is declared in that
interface.

<p>Objects that request to be added to the second list must be of a class
tha timplements the <b>VetoableChangeListener</b> interface and defines
the <b>vetoableChange()</b> method that is declared in that interface.

<p>Whenever the value of the property becomes subject to change, a <b>vetoableChange()</b>
event is broadcast to all of the registered <b>VetoableChangeListener</b>
objects. Those objects can either accept the change or veto it. An object
that vetos the change does so by raising an exception.

<p>The event is broadcast by invoking the <b>vetoableChange()</b> method
on all of the objects on the list. When this method is invoked on a <b>listener
</b>object, an object of type <b>PropertyChangeEvent</b> is passed as a
parameter.

<p>Note that the <b>PropertyChangeEvent </b>object passed as a parameter
to the <b>vetoableChange()</b> method in the listener objects is the same
type of object passed to the <b>propertyChange() </b>method for <i>Bound</i>
properties. The object contains the following information:
<li>
Object source, //the bean object in this case</li>

<li>
String propertyName, //the name of the changed property</li>

<li>
Object oldValue, //the old value of the changed property</li>

<li>
Object newValue //the new value of the changed property</li>


<p>As you can see, three of the parameters passed to the <b>propertyChange()</b>
method are of type <b>Object</b>, and one is of type <b>String</b>. The
parameters of type <b>Object </b>sometimes need to be downcast to the correct
type to be used in the receiving method.

<p>Notification of the <b>VetoableChangeListener </b>objects takes place
<u>before</u> the change in the property value has occurred.

<p>The following methods are available to extract information from the
object passed as a parameter. These methods are defined by the <b>PropertyChangeEvent
</b>class or its superclass, <b>EventObject</b>:
<ul><li>
public Object getSource();</li>

<li>
public Object getNewValue();</li>

<li>
public Object getOldValue();</li>

<li>
public String getPropertyName;</li>

<li>
public void setPropagationId();</li>

<li>
public Object getPropagationId;</li></ul>
Since the property in this sample program is both <i>Constrained</i> and
<i>bound</i>, if the change is not vetoed (and if it really does represent
a change in the value), a <b>propertyChange()</b> event is broadcast to
all of the <b>PropertyChangeListener </b>objects registered on that list.
<center><h2><a name="sample bean program"></a><font color="#ff0000">Sample Bean Program</font></h2></center>
This program was designed to be compiled and executed under JDK 1.1.3 or
later.

<p>This program illustrates the use of beans with a property which is both
<i>bound </i>and <i>constrained</i>.

<p>The bean has one property named <b>theColor</b>. Two separate instance
variables named <b>oldColor </b>and <b>newColor </b>are used to maintain
the value of the property.

<p>Applying introspection to the bean yields the results shown earlier
in this lesson.

<p>The most significant new addition to this bean class is the ability
for a listener to <b>veto </b>a proposed change in the value of a property.
When that happens, the <u>proposed new property value is discarded</u>
and the <u>actual property value is not changed</u>.

<p>The following methods:
<ul><li>
setTheColor()</li>

<li>
makeRed()</li>

<li>
makeBlue()</li></ul>
all provide the opportunity for a <b>VetoableChangeListener </b>object
to <b>veto </b>a proposed new color value for the property named <b>theColor</b>.

<p>Each of these methods receives a proposed new color value as a parameter
when it is invoked. The method saves the current value of the property
in the instance variable named <b>oldColor</b>. Then it makes a call to
the method named <b>notifyVetoableChange()</b> inside a <b>try </b>block.

<p>The <b>notifyVetoableChange()</b> method broadcasts a <b>vetoableChange()
</b>event to all of the <b>VetoableChangeListener </b>objects that are
registered to receive such an event. The broadcast is accomplished making
use of the <b>VetoableChangeSupport</b> class which not only handles the
firing of the event, but does some additional necessary processing as well.

<p>Any listener object that wants to veto the change throws a <b>PropertyVetoException
</b>which finds its way back to method listed above that invoked <b>notifyVetoableChange()</b>
in the first place.

<p>When the exception is thrown, it is caught in a <b>catch </b>block.
The code in the catch block restores the property value to its original
value and displays the exception. In other words, the proposed new value
is replaced by the value of the property that existed before the proposed
new value was received.

<p>Whether it is vetoed or not, the proposed new value (or the replacement
for the proposed new value) becomes the current value and is used to set
the background color of the bean.

<p>The proposed new value is also compared with the value of the property
that existed before the proposed new value was received. If they are different
(meaning that an actual property change has occurred) the <b>notifyPropertyChange()</b>
method is invoked to broadcast a <b>propertyChange()</b> event to all <b>PropertyChangeListener
</b>objects registered to receive such an event. If the property value
didn't actually change, the <b>propertyChange()</b> event is not broadcast.

<p>An important aspect of the behavior of this bean is based on the use
of the <b>fireVetoableChange()</b> method of the <b>VetoableChangeSupport
</b>class to actually broadcast the event. A description of this method
follows. Pay particular attention to the behavior of the method in the
circumstance where someone wants to veto the change.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>&nbsp; public void <b>fireVetoableChange</b>(String propertyName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object oldValue,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object newValue) throws PropertyVetoException


&nbsp;&nbsp;&nbsp; Report a vetoable property update to any registered&nbsp;
&nbsp;&nbsp;&nbsp; listeners. <b>If anyone vetos the change, then fire a new&nbsp;
&nbsp;&nbsp;&nbsp; event</b> reverting everyone to the old value and then&nbsp;
&nbsp;&nbsp;&nbsp; rethrow the PropertyVetoException.&nbsp;

&nbsp;&nbsp;&nbsp; No event is fired if old and new are equal and non-null&nbsp;

&nbsp;&nbsp;&nbsp; Parameters:&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propertyName - The name of the property that was&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changed.&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oldValue - The old value of the property.&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newValue - The new value of the property.&nbsp;
&nbsp;&nbsp;&nbsp; Throws: PropertyVetoException&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if the recipient wishes the property change to be&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rolled back.</pre></td></tr></table>
.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments from the Bean Program</font></h3></center>
This <b>bean</b> class contains a number of interesting code fragments.
The following statements are used to store the current property value and
a proposed new property value. These are straightforward and the only thing
that makes them interesting is the way that they are used later in dealing
with the possibility of a veto.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; protected Color oldColor;
&nbsp; protected Color newColor;</pre></td></tr></table>
The following reference variables are used to access the list-maintenance
and event-firing capabilities of the <b>PropertyChangeSupport </b>and <b>VetoableChangeSupport
</b>classes. An object of each of these classes is instantiated in the
constructor.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;
&nbsp; PropertyChangeSupport changeSupportObj;
&nbsp; VetoableChangeSupport vetoSupportObj;</pre></td></tr></table>
This bean is a visible square that is <u>initialized</u> to <b>yellow </b>and
can then be <u>changed</u> to <b>red </b>or <b>blue </b>by invoking methods
of the class named <b>makeRed()</b> and <b>makeBlue()</b>. The color can
be set to any color by invoking the <b>setTheColor()</b> method and passing
a color in as a parameter. The following code fragment from the constructor
is used to perform the initialization.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; newColor = Color.yellow;
&nbsp;&nbsp;&nbsp; setBackground(newColor);</pre></td></tr></table>
As mentioned earlier, objects of the classes <b>PropertyChangeSupport</b>
and <b>VetoableChangeSupport</b> are instantiated in the constructor. These
classes can either be extended or instantiated in order to take advantage
of the capabilities that they offer. In this case, since this <b>bean</b>
class already extends another class, it is necessary to instantiate the
support classes as separate objects.

<p>The following code fragment in the constructor performs the required
instantiation. The constructor for these support classes requires an object
reference as a parameter. That object reference is later used to identify
the source of events fired by the support objects. In this case, we pass
the <b>this</b> reference in as a parameter to specify the <b>bean </b>as
the source of the events.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; changeSupportObj = new PropertyChangeSupport(this);
&nbsp;&nbsp;&nbsp; vetoSupportObj = new VetoableChangeSupport(this);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre></td></tr></table>
In this bean, there are three different methods that can modify the values
of the <b>Color</b> property:
<ul><li>
makeRed()</li>

<li>
makeBlue()</li>

<li>
setTheColor()</li></ul>
Each of these methods must deal with the possibility that a <b>VetoableChangeListener</b>
object will veto the proposed change that results from invoking the method.
A veto means that the proposed change <u>must not be implemented</u>.

<p>When a listener object vetos a change, the event-firing mechanism in
the support class automatically fires a second event specifying the old
value as the new value. This has the effect of notifying all of the listener
objects that the property value has been rolled back to its previous value.
However, you must provide the code in the <b>bean</b> to actually implement
the rollback.

<p>The following method is invoked by all three of the methods listed above
to implement the rollback. A veto occurs when one of the listener objects
raises a <b>PropertyVetoException</b>. At the point where the following
method is invoked, the current value of the property has been stored in
the instance variable named <b>oldColor</b> and the proposed new value
has been stored in the instance variable named <b>newColor</b>.

<p>The code in the following method monitors for a veto by enclosing the
call to the <b>notifyVetoableChange()</b> method inside a <b>try</b> block.
If a listener object vetos the change, a <b>PropertyVeotException </b>will
be raised and the code in the <b>catch</b> block will be executed. Otherwise,
the code in the <b>catch</b> block will be skipped.

<p>In the case of a veto, the current value is recovered from <b>oldColor</b>
and stored in <b>newColor</b>, thereby replacing the proposed new value
with the unchanged current value. From that point forward, the current
value is used in place of the proposed new value because the proposed new
value has been replaced by the current value..

<p>Recall that the property is also <i>bound </i>to support a list of <b>PropertyChangeListener</b>
objects who have registered to be notified whenever the property value
<u>actually changes</u>. These listener objects <u>should not be notified</u>
of a proposed change that isn't implemented because of a veto, because
in that case <u>no change actually took place</u>.

<p>An <b>if</b> statement is used to determine if the property value has
actually changed, and if so, the <b>PropertyChangeListener</b> objects
are notified. In the case of an actual change in the property value, the
background color of the bean is also changed to reflect the new value.
If there was no actual change, the background color is not changed.

<p>This strategy is implemented by the code in the following method.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; void processTheColors(){
&nbsp;&nbsp;&nbsp; <b>try</b>{//test to see if anyone vetos the new color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyVetoableChange("theColor");
&nbsp;&nbsp;&nbsp; }<b>catch</b>(PropertyVetoException exception){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Someone vetoed the new color.&nbsp; Don't use newColor.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newColor = oldColor;// Restore oldColor instead
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Display the veto exception
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(exception);
&nbsp;&nbsp;&nbsp; }//end catch

&nbsp;&nbsp;&nbsp; <b>if</b>(!newColor.equals(oldColor)){//if color changed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBackground(newColor);//display new color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end process the colors&nbsp;&nbsp;&nbsp;&nbsp;</pre></td></tr></table>
As a result of the use of design patterms, the following "set" and "get"
methods, in conjunction with the instance variables named <b>oldColor </b>and
<b>newColor</b>,<b> </b>constitute a property named <b>theColor</b>. Note
the call to the above method named <b>processTheColors()</b> inside the
<b>setTheColor()</b> method. This call deals with the possibility of a
veto of the proposed new <b>Color</b> value.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;
&nbsp; public synchronized void <b>setTheColor</b>(Color inColor){
&nbsp;&nbsp;&nbsp; oldColor = newColor;//save current color
&nbsp;&nbsp;&nbsp; newColor = inColor;//proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;<b>&nbsp;&nbsp; processTheColors()</b>;//go process the proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end setTheColor()

&nbsp; public synchronized Color <b>getTheColor</b>(){
&nbsp;&nbsp;&nbsp; return oldColor;
&nbsp; }//end getTheColor</pre></td></tr></table>
Because they are <b>public</b>, the following two methods are exposed to
the builder tool as accessible methods. These two methods attempt to change
the value of the <b>Color</b> property and are subject to the possibility
of a veto. Note the calls to the <b>processTheColors()</b> method (discussed
earlier) which handles that possibility.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;
&nbsp; public synchronized void <b>makeBlue</b>(){
&nbsp;&nbsp;&nbsp; oldColor = newColor;//save current color
&nbsp;&nbsp;&nbsp; newColor = Color.blue;//establish proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;<b>&nbsp; processTheColors()</b>;//go process the proposed new color

&nbsp; }//end makeBlue()
&nbsp; //----------------------------------------------------//

&nbsp; public synchronized void <b>makeRed</b>(){
&nbsp;&nbsp;&nbsp; oldColor = newColor;//save current color
&nbsp;&nbsp;&nbsp; newColor = Color.red;//establish proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;<b> processTheColors()</b>;//go process the proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end makeRed()</pre></td></tr></table>
The following two methods are used to maintain a list of <b>PropertyChangeListener</b>
objects. These are listener objects that have been registered to be notified
whenever there is a change in a <i>bound</i> property.

<p>Note that unlike a sample program in a previous lesson where we "rolled
our own" list-maintenance capability, these methods simply make use of
the corresponding list-maintenance methods in the previously instantiated
object of type <b>PropertyChangeSupport </b>that is referenced by the reference
variable named <b>changeSupportObj</b>. This results in a significant reduction
in programming effort on our part.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;
&nbsp; //Add a property change listener object to the list.
&nbsp; public synchronized void <b>addPropertyChangeListener</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; <b>changeSupportObj.addPropertyChangeListener(</b>listener);
&nbsp; }//end addPropertyChangeListener
&nbsp; //-----------------------------------------------------//

&nbsp; //Remove a property change listener from the list.
&nbsp; public synchronized void <b>removePropertyChangeListener</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; <b>changeSupportObj.removePropertyChangeListener</b>(listener);
&nbsp; }//end removePropertyChangeListener()</pre></td></tr></table>
The following two methods are used to maintain a list of <b>VetoableChangeListener</b>
objects. These are listener objects that have been registered to be notified
whenever there is a <b><i><u>proposed</u></i></b> change in a <i>constrained
</i>property. These listener objects have the right to veto the proposed
change and prevent it from being implemented.

<p>Similar to the previous discussion, these methods make use of the corresponding
list-maintenance methods in the previously instantiated object of type
<b>VetoableChangeSupport </b>that is referenced by the reference variable
named <b>vetoSupportObj</b>. Not having to create our own list-maintenance
code results in a significant reduction in programming effort on our part.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;
&nbsp; //Add a vetoable change listener object to the list.
&nbsp; public synchronized void <b>addVetoableChangeListener</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VetoableChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; <b>vetoSupportObj.addVetoableChangeListener</b>(listener);
&nbsp; }//end addVetoableChangeListener
&nbsp; //-----------------------------------------------------//

&nbsp; //Remove a vetoable change listener from the list.
&nbsp; public synchronized void <b>removeVetoableChangeListener</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VetoableChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; <b>vetoSupportObj.removeVetoableChangeListener</b>(listener);
&nbsp; }//end removeVetoableChangeListener()&nbsp;&nbsp;</pre></td></tr></table>
The following method is used to notify <b>PropertyChangeListener</b> objects
of changes in the properties. The incoming parameter is the name of the
property that has changed. That property name is encapsulated in the object
that is passed when the event is fired, and can be used by the listener
object to differentiate between different <i>bound</i> properties.

<p>Note that this method makes use of the <b>firePropertyChange()</b> method
of an object of the <b>PropertyChangeSupport </b>class to actually fire
the event. This eliminates the requirement for us to write our own code
to fire the events to all the objects on the list of registered objects.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; protected void <b>notifyPropertyChange</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String changedProperty){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
<b>&nbsp;&nbsp;&nbsp; changeSupportObj.firePropertyChange</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changedProperty,oldColor,newColor);
&nbsp; }//end notifyPropertyChange()</pre></td></tr></table>
The following method is used to notify <b>VetoableChangeListener </b>objects
of <b><i><u>proposed</u></i></b> changes in the property values. The incoming
parameter is the name of the property that is proposed to be changed. This
property name is encapsulated in the object that is passed to the listener
object when the event is fired.

<p>This method uses the <b>fireVetoableChange()</b> method of the <b>VetoableChangeSupport
</b>class to actually fire the event. As discussed earlier, the <b>fireVetoableChange()</b>
method actually performs some data processing and does more than simply
fire the event. In particular, if the proposed change is vetoed by a listener
object, another round of events is fired to "roll back" the value to the
value of the property before the proposed change.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; protected void <b>notifyVetoableChange</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String vetoableProperty)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws PropertyVetoException{
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp;<b> vetoSupportObj.fireVetoableChange</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vetoableProperty,oldColor,newColor);

&nbsp; }//end notifyVetoableChange()&nbsp;&nbsp;</pre></td></tr></table>
A consolidated listing of the entire <b>bean</b> class is provided in the
next section.
<center><h3><a name="bean program listing"></a><font color="#ff0000">Program Listing
for the Bean Program</font></h3></center>
This section contains a consolidated listing of the <b>bean</b> class.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Beans06.java Copyright 1997, R.G.Baldwin

This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

This program illustrates the use of beans with a property
which is both bound and constrained.

The bean has one property named theColor.&nbsp; Two separate
instance variables named oldColor and newColor are used
to maintain the value of the property.

Applying introspection to the bean yields the following:
&nbsp;&nbsp;
Name of bean:&nbsp; Beans06
Class of bean: class Beans06

==== Properties: ====
Name: preferredSize
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Dimension
&nbsp;Get method: public synchronized java.awt.Dimension&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.getPreferredSize()
&nbsp;Set method: null
Name: theColor
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Color
&nbsp;Get method: public synchronized java.awt.Color&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.getTheColor()
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.setTheColor(java.awt.Color)

==== Events: ====
Event Name: vetoableChange
&nbsp;Add Method:&nbsp;&nbsp;&nbsp; public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.addVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.VetoableChangeListener)
&nbsp;Remove Method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.removeVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.VetoableChangeListener)
&nbsp;Event Type: vetoableChange
&nbsp;
Event Name: propertyChange
&nbsp;Add Method:&nbsp;&nbsp;&nbsp; public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.PropertyChangeListener)
&nbsp;Remove Method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans06.removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.PropertyChangeListener)
&nbsp;Event Type: propertyChange

==== Methods: ====
makeRed
removePropertyChangeListener
getTheColor
setTheColor
removeVetoableChangeListener
getPreferredSize
addPropertyChangeListener
makeBlue
addVetoableChangeListener

The most significant new addition to this bean class is
the ability for a listener to veto a proposed change in the
value of a property.&nbsp; When that happens, the proposed new&nbsp;
property value is discarded and the actual property value&nbsp;
is not changed.

&nbsp; The following methods:
&nbsp;&nbsp;&nbsp; setTheColor()
&nbsp;&nbsp;&nbsp; makeRed()
&nbsp;&nbsp;&nbsp; makeBlue()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; all provide the opportunity for a VetoableChangeListener
&nbsp; object to veto a proposed new color value for the&nbsp;
&nbsp; property named theColor.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; Each of these methods receives a proposed new color value
&nbsp; as a parameter when it is invoked. The method saves the&nbsp;
&nbsp; current value of the property in the instance variable&nbsp;
&nbsp; named oldColor.&nbsp; Then it makes a call to the method named
&nbsp; notifyVetoableChange() inside a try block.
&nbsp;&nbsp;
&nbsp; The notifyVetoableChange broadcasts a vetoableChange()
&nbsp; event to all of the VetoableChangeListener objects that
&nbsp; are registered to receive such an event.&nbsp; Any listener
&nbsp; object that wants to veto the change throws a
&nbsp; PropertyVetoException which finds its way back to method
&nbsp; listed above that invoked notifyVetoableChange() in the&nbsp;
&nbsp; first place.
&nbsp;&nbsp;
&nbsp; When the exception is thrown, it is caught in a catch
&nbsp; block.&nbsp; The code in the catch block restores the
&nbsp; property value to its original value and displays the&nbsp;
&nbsp; exception.&nbsp; In other words, the proposed new value is
&nbsp; replaced by the value of the property before the&nbsp;
&nbsp; proposed new value was received.
&nbsp;&nbsp;
&nbsp; This proposed new value then becomes the current value
&nbsp; and is used to set the background color of the bean.
&nbsp; The proposed new value is also compared with the value
&nbsp; of the property before the proposed new value was
&nbsp; received.&nbsp; If they are different, meaning that a&nbsp;
&nbsp; property change has occurred, the notifyPropertyChange()
&nbsp; method is invoked to broadcast a propertyChange() event
&nbsp; to all PropertyChangeListener objects registered to&nbsp;
&nbsp; receive such an event.

&nbsp; An important aspect of the behavior of this bean is&nbsp;
&nbsp; based on the use of the fireVetoableChange() method of
&nbsp; the VetoableChangeSupport class to actually broadcast&nbsp;
&nbsp; the event. A description of this method follows.&nbsp; Pay
&nbsp; particular attention to the behavior of the method in
&nbsp; the event that someone wants to veto the change.
&nbsp;&nbsp;
&nbsp; ------
&nbsp; public void fireVetoableChange(String propertyName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object oldValue,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object newValue) throws PropertyVetoException


&nbsp;&nbsp;&nbsp; Report a vetoable property update to any registered&nbsp;
&nbsp;&nbsp;&nbsp; listeners. If anyone vetos the change, then fire a new&nbsp;
&nbsp;&nbsp;&nbsp; event reverting everyone to the old value and then&nbsp;
&nbsp;&nbsp;&nbsp; rethrow the PropertyVetoException.&nbsp;

&nbsp;&nbsp;&nbsp; No event is fired if old and new are equal and non-null&nbsp;

&nbsp;&nbsp;&nbsp; Parameters:&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propertyName - The name of the property that was&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changed.&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oldValue - The old value of the property.&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newValue - The new value of the property.&nbsp;
&nbsp;&nbsp;&nbsp; Throws: PropertyVetoException&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if the recipient wishes the property change to be&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rolled back.&nbsp;

//=======================================================//
*/

import java.awt.event.*;
import java.awt.*;
import java.io.Serializable;
import java.util.*;
import java.beans.*;
//=======================================================//
//All beans should implement the Serializable interface
public class Beans06 extends Canvas&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Serializable{

&nbsp; //The following instance variables are used to store the
&nbsp; // current property value and a proposed new property
&nbsp; // value.
&nbsp; protected Color oldColor;
&nbsp; protected Color newColor;
&nbsp;&nbsp;
&nbsp; //The following reference variables are used to access
&nbsp; // the list maintenance and event firing capabilities
&nbsp; // of the PropertyChangeSupport and VetoableChangeSupport
&nbsp; // classes. An object of each of these classes is&nbsp;
&nbsp; // instantiated in the constructor.&nbsp;&nbsp;
&nbsp; PropertyChangeSupport changeSupportObj;
&nbsp; VetoableChangeSupport vetoSupportObj;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; public Beans06(){//constructor
&nbsp;&nbsp;&nbsp; //This bean is a visible square that is initialized to
&nbsp;&nbsp;&nbsp; // yellow and can then be changed to red or blue by
&nbsp;&nbsp;&nbsp; // invoking methods of the class named makeRed() and
&nbsp;&nbsp;&nbsp; // makeBlue().&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The color can be set to any color by invoking the&nbsp;
&nbsp;&nbsp;&nbsp; // setTheColor() method and passing a color in as a&nbsp;
&nbsp;&nbsp;&nbsp; // parameter.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Initialize the color of the square.
&nbsp;&nbsp;&nbsp; newColor = Color.yellow;
&nbsp;&nbsp;&nbsp; setBackground(newColor);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate objects of the support classes to handle
&nbsp;&nbsp;&nbsp; // list maintenance and event firing tasks.&nbsp; The
&nbsp;&nbsp;&nbsp; // constructor for these support classes requires this&nbsp;
&nbsp;&nbsp;&nbsp; // object as the source of the events.
&nbsp;&nbsp;&nbsp; changeSupportObj = new PropertyChangeSupport(this);
&nbsp;&nbsp;&nbsp; vetoSupportObj = new VetoableChangeSupport(this);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //This method defines the preferred display size of the&nbsp;
&nbsp; // bean object.&nbsp;&nbsp;
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;
&nbsp; //This common method is invoked by all three property-
&nbsp; // changing methods to process the proposed new color.
&nbsp; void processTheColors(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{//test to see if anyone vetos the new color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyVetoableChange("theColor");
&nbsp;&nbsp;&nbsp; }catch(PropertyVetoException exception){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Someone vetoed the new color.&nbsp; Don't use newColor.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newColor = oldColor;// Restore oldColor instead
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Display the veto exception
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(exception);
&nbsp;&nbsp;&nbsp; }//end catch

&nbsp;&nbsp;&nbsp; if(!newColor.equals(oldColor)){//if color changed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBackground(newColor);//display new color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end process the colors&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following "set" and "get" methods in conjunction&nbsp;
&nbsp; // with the instance variable named oldColor constitute a
&nbsp; // property named theColor.&nbsp;&nbsp;
&nbsp; public synchronized void setTheColor(Color inColor){
&nbsp;&nbsp;&nbsp; oldColor = newColor;//save current color
&nbsp;&nbsp;&nbsp; newColor = inColor;//proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; processTheColors();//go process the proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end setTheColor()

&nbsp; public synchronized Color getTheColor(){
&nbsp;&nbsp;&nbsp; return oldColor;
&nbsp; }//end getTheColor
&nbsp; //-----------------------------------------------------//

&nbsp; //The following two methods are exposed to the builder&nbsp;
&nbsp; // tool as accessible methods.&nbsp;&nbsp;
&nbsp; public synchronized void makeBlue(){
&nbsp;&nbsp;&nbsp; oldColor = newColor;//save current color
&nbsp;&nbsp;&nbsp; newColor = Color.blue;//establish proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; processTheColors();//go process the proposed new color

&nbsp; }//end makeBlue()

&nbsp; public synchronized void makeRed(){
&nbsp;&nbsp;&nbsp; oldColor = newColor;//save current color
&nbsp;&nbsp;&nbsp; newColor = Color.red;//establish proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; processTheColors();//go process the proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end makeRed()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //The following two methods are used to maintain a list
&nbsp; // of PropertyChangeListener objects who request to be
&nbsp; // added to the list or who request to be removed from&nbsp;
&nbsp; // the list.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; //Add a property change listener object to the list.
&nbsp; public synchronized void addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; changeSupportObj.addPropertyChangeListener(listener);
&nbsp; }//end addPropertyChangeListener
&nbsp; //-----------------------------------------------------//

&nbsp; //Remove a property change listener from the list.
&nbsp; public synchronized void removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; changeSupportObj.removePropertyChangeListener(listener);
&nbsp; }//end removePropertyChangeListener()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following two methods are used to maintain a list
&nbsp; // of listener objects who request to be registered
&nbsp; // as VetoableChangeListener objects, or who request to&nbsp;
&nbsp; // be removed from the list.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; //Add a vetoable change listener object to the list.
&nbsp; public synchronized void addVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VetoableChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; vetoSupportObj.addVetoableChangeListener(listener);
&nbsp; }//end addVetoableChangeListener
&nbsp; //-----------------------------------------------------//

&nbsp; //Remove a vetoable change listener from the list.
&nbsp; public synchronized void removeVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VetoableChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; vetoSupportObj.removeVetoableChangeListener(listener);
&nbsp; }//end removeVetoableChangeListener()&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method is used to notify listener&nbsp;
&nbsp; // objects of changes in the properties.&nbsp; The incoming
&nbsp; // parameter is the name of the property that has&nbsp;
&nbsp; // changed.&nbsp; Note that this method makes use of the&nbsp;
&nbsp; // firePropertyChange() method of an object of the
&nbsp; // PropertyChangeSupport class to actually fire the&nbsp;
&nbsp; // event.
&nbsp; protected void notifyPropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String changedProperty){
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; changeSupportObj.firePropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changedProperty,oldColor,newColor);
&nbsp; }//end notifyPropertyChange()
&nbsp; //-----------------------------------------------------//

&nbsp; //The following method is used to notify&nbsp;
&nbsp; // VetoableChangeListener objects of proposed changes in
&nbsp; // the property values.&nbsp; The incoming parameter is the&nbsp;
&nbsp; // name of the property that is proposed to be changed.
&nbsp; // This method uses the fireVetoableChange() method of&nbsp;
&nbsp; // the VetoableChangeSupport class to actually fire the&nbsp;
&nbsp; // event.&nbsp; As discussed earlier in this file, the
&nbsp; // fireVetoableChange method actually performs some data
&nbsp; // processing and does more than simply fire the event.
&nbsp; protected void notifyVetoableChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String vetoableProperty)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws PropertyVetoException{
&nbsp;&nbsp;&nbsp; //Pass the task on to the support class method.
&nbsp;&nbsp;&nbsp; vetoSupportObj.fireVetoableChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vetoableProperty,oldColor,newColor);

&nbsp; }//end notifyVetoableChange()&nbsp;&nbsp;
&nbsp;&nbsp;
}//end class Beans06.java
//=======================================================//</pre></td></tr></table>

<center><h2><a name="sample test program"></a><font color="#ff0000">Sample Test Program</font></h2></center>
This program was designed to be compiled and executed under JDK 1.1.3 or
later. The purpose of the program is to test the constrained property aspects
of the bean class named <b>Beans06</b>.

<p>This program has been <i>simplified </i>in an attempt to make it understandable.
A more realistic and complex program is provided in the <i>Review</i> section
of this lesson.

<p>You will need to refer to the comments in the source code for the <b>Beans06
</b>class to fully understand how this test program works.

<p>The visual manifestation of the <b>Beans06 </b>bean is a colored square.
The <b>bean </b>is placed in a <b>Frame </b>object by this test program.
The square is initially <b>yellow</b>.

<p>The bean has one property named <b>theColor </b>which controls the color
of the square.

<p>Two <i>exposed </i>methods of the bean, <b>makeRed()</b> and <b>makeBlue()</b>,
can be invoked to change the color to <b>red </b>or <b>blue</b>.

<p>Invoking the <b>makeRed()</b> or <b>makeBlue()</b> methods changes the
value of the property named <b>theColor </b>which in turn changes the color
of the square.

<p>You can also <u>change the value</u> of the property named <b>theColor
</b>by invoking the <b>setTheColor() </b>method. In this case you can pass
in <u>any color</u> as a parameter.

<p>The property named <b>theColor </b>is a <i>bound constrained </i>property.
The bean supports a multicast list of <b>PropertyChangeListener </b>objects
and also supports a multicast list of <b>VetoableChangeListener </b>objects.

<p><b>PropertyChangeListener </b>objects are <u>simply notified</u> whenever
a change in a property value occurs.

<p><b>VetoableChangeListener </b>objects are notified of a <b><i><u>proposed</u></i></b>change in the property value and have the opportunity to <b>veto
</b>the change by raising a <b>PropertyVetoException</b>.

<p>The program begins with the <b>yellow </b>square bean and three <b>Buttons</b>
in a <b>Frame </b>on the screen. The buttons are labeled <i>Red</i>, <i>Green</i>,
and <i>Blue</i>.

<p>The Red and Blue buttons invoke the <b>makeRed()</b> and <b>makeBlue()</b>
methods discussed above.

<p>The Green button invokes the <b>setTheColor()</b> method causing the
color green to be passed in as a parameter. Therefore, clicking this button
will <u>attempt</u> to change the value of the property named <b>theColor
</b>to green.

<p>A listener class is defined which implements <u>both</u> the <b>PropertyChangeListener
</b>interface and the <b>VetoableChangeListener </b>interface. As a result,
a listener object of this class can <u>register</u> to be notified of <b><i><u>proposed</u></i></b>
property changes with <b>veto </b>authority and can also <u>register</u>
to be notified of <u>actual</u> changes.

<p><u>One</u> such listener object is instantiated and registered to listen
for <u>both</u> <b>propertyChange()</b> and <b>vetoableChange()</b> events.

<p>This object is <u>designed to veto</u> any proposal to change the value
of the property to <b>green</b>.

<p>Therefore, if you click the <b>Red </b>button, the square will <u>change
to red</u> and the following will appear on the screen.

<p>Note the use of the r, g, and b in the square brackets to indicate the
contribution of each of these three primary colors to the final color.
The maximum contribution of a color is indicated by a value of 255 while
a value of 0 indicates no contribution of that primary color.

<p>Note also that both the <b>VetoableChangeListener</b> object and the
<b>PropertyChangeListener</b> object produce output on the screen. Later
we will see that when a proposed change is vetoed, there is no output from
the <b>PropertyChangeListener</b> object, and there are two separate outputs
from the <b>VetoableChangeListener</b> object.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre><b>Veto Listener</b>,&nbsp;
New property value: java.awt.Color[<b>r=255</b>,g=0,b=0]
<b>Change Listener</b>,&nbsp;
New property value: java.awt.Color[<b>r=255</b>,g=0,b=0]</pre></td></tr></table>
If you click the <b>Blue </b>button, the square will <u>change to blue</u>
and the following will appear on the screen.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre><b>Veto Listener</b>,&nbsp;
New property value: java.awt.Color[r=0,g=0,<b>b=255</b>]
<b>Change Listener</b>,&nbsp;
New property value: java.awt.Color[r=0,g=0,<b>b=255</b>]</pre></td></tr></table>
If you click the Green button, the <u>color of the square will not change</u>.
The following will appear on the screen indicating that the proposed new
color was vetoed and another event was multicast which rolled the property
value back to its value before the proposed change (which in this case
was blue).

<p>Note that there was <u>no output</u> from the <b>PropertyChangeListener</b>
object in this case, because the proposed change to green was vetoed and
there was no actual change in the value of the property.

<p>Note also that there are two outputs from the <b>VetoableChangeListener</b>
object. The first output indicates the proposed new property value. The
second indicates that a second round of events was fired to roll the property
value back to its original value.

<p>The last line in the output was produced by code in the <b>bean</b>
proper and was a display of the contents of the exception object that was
instantiated and passed by the listener object that raised the exception
to veto the proposed change.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre><b>Veto Listener</b>,&nbsp;
New property value: java.awt.Color[r=0,<b>g=255</b>,b=0]
<b>Veto Listener</b>,&nbsp;
New property value: java.awt.Color[r=0,g=0,<b>b=255</b>]
java.beans.PropertyVetoException: No green allowed</pre></td></tr></table>
After the veto, if you click on the <b>Red </b>button, the color of the
square <u>will change to red</u> in the normal manner and the following
will appear on the screen:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>Veto Listener,&nbsp;
New property value: java.awt.Color[r=255,g=0,b=0]
Change Listener,&nbsp;
New property value: java.awt.Color[r=255,g=0,b=0]</pre></td></tr></table>
In all of the above examples, line breaks were manually inserted in the
text to make it fit better in this format.

<p>Although this sample program was constructed for <u>simplicity</u> having
<u>only one property</u> in the bean and <u>only one listener object</u>,
the structure of the <b>Beans06 </b>bean class will <u>support any number</u>
of listener objects in either category.

<p>Obviously the number of properties could also be expanded to a very
large number.

<p>These expansions would require more processing on the part of the listener
objects. With the structure being used, <u>every object</u> registered
to be notified of proposed changes would be notified of <u>every proposed
change</u> on <u>every property</u> and it may be necessary for the listener
objects to differentiate between the properties in order to decide what
to do.

<p>Likewise, <u>every object</u> registered to be notified of actual changes
would be notified of <u>every actual change</u> on <u>every property</u>.

<p>Each notification event contains the <u>name</u> of the property to
which the actual or proposed change applies. The objects could use that
information to make decisions on the basis of property names and proposed
changes in property values.

<p>Note that the design pattern specifications for Java beans provide for
designing more selective notification schemes, but they are not being used
in this example.
<center><h3><a name="interesting code fragments from the test program"></a><font color="#ff0000">Interesting
Code Fragments from the Test Program</font></h3></center>
This test program places the <b>Beans06 </b>object and several <b>Button</b>
objects on a <b>Frame </b>object. The buttons are used to test the various
aspects of the <b>bean</b>.

<p>We're going to skip all the standard stuff that creates the <b>Frame
</b>object, adds buttons to the <b>Frame</b>, instantiates listener objects
for the buttons, registers the listener objects for <b>actionPerformed()</b>
events on the buttons, etc.

<p>However, we will highlight the following code fragment that instantiates
a <b>Beans06 </b>object and adds it to the <b>Frame </b>object.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Beans06 myBean = new Beans06();
&nbsp;&nbsp;&nbsp; add(myBean);//Add it to the Frame</pre></td></tr></table>
The following code fragment will <u>instantiate</u> and <u>register</u>
an object to listen for <u>proposed</u> and <u>actual</u> changes in the
bean's property. This listener object has the ability to veto <u>proposed</u>
changes.

<p>This dual capability for a single listener object comes about because,
as we will see later, the class of this object named <b>MyPropertyListenerClass</b>
implements both the <b>VetoableChangeListener</b> interface and the <b>PropertyChangeListenerClass</b>.
It also defines both the <b>vetoableChange()</b> and the <b>propertyChange()</b>
methods declared in those two interfaces.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyPropertyListenerClass myListenerObject =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyListenerClass();
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(myListenerObject);
&nbsp;&nbsp;&nbsp; myBean.addVetoableChangeListener(myListenerObject);&nbsp;&nbsp;&nbsp;&nbsp;</pre></td></tr></table>
An object of the following class is instantiated and registered to listen
for <b>actionPerformed()</b> events on the button labeled <b>"setTheColor"</b>.

<p>When the <b>setTheColor </b>button is pressed, the object invokes the
<b>setTheColor()</b> method on the <b>bean </b>passing in a color parameter
of <b>green</b>.

<p>Insofar as the <b>VetoableChangeListener</b> objects are concerned,
this represents a proposal to change the <b>Color</b> property to green.
As mentioned previously, this change will be vetoed, but that is beyond
the scope of the code in this class. As far as the methods in this class
are concerned, this is a <u>direct order</u> to set the property value
of the property named <b>theColor</b> to a value representing green.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>SetTheColorListener </b>implements ActionListener{
&nbsp; Beans06 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; SetTheColorListener(Beans06 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
<b>&nbsp;&nbsp;&nbsp; myBean.setTheColor(Color.green);
</b>&nbsp; }//end actionPerformed()
}//end class SetTheColorListener</pre></td></tr></table>
The following two classes are used to instantiate objects which are registered
to listen to two of the buttons on the test panel.

<p>When the buttons with the names corresponding to the names of the methods
are pressed, these objects invoke methods of the <b>bean </b>under test.

<p>An object of the first class invokes the <b>makeRed()</b> method and
an object of the second class invokes the <b>makeBlue()</b> method.

<p>As mentioned earlier, these methods attempt to change the value of the
property named <b>theColor</b>. In the large sense, any of the <b>VetoableChangeListener</b>
objects have the right to veto the proposed change. However, as this test
program is structured, the change to red or blue is not vetoed and the
change will be implemented causing the color of the rectangle on the <b>Frame
</b>object to change colors.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>RedActionListener </b>implements ActionListener{
&nbsp; Beans06 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; RedActionListener(Beans06 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
<b>&nbsp;&nbsp;&nbsp; myBean.makeRed()</b>;
&nbsp; }//end actionPerformed()
}//end class RedActionListener
//-------------------------------------------------------//

class <b>BlueActionListener </b>implements ActionListener{
&nbsp; Beans06 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; BlueActionListener(Beans06 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
<b>&nbsp;&nbsp;&nbsp; myBean.makeBlue();
</b>&nbsp; }//end actionPerformed()
}//end class BlueActionListener</pre></td></tr></table>
The following class is used to instantiate listener objects that may be
linked to <i>bound</i> and/or <i>constrained</i> properties of the <b>bean</b>.

<p>When one of these objects is registered on the <b>bean</b> as a <b>VetoableChangeListener</b>,
it will receive notifications of all the proposed changes to all the <i>constrained</i>
properties of the <b>bean</b>. Once notified, the listener object has the
right to veto the proposed change by raising a <b>PropertyVetoException</b>.

<p>When one of these objects is registered on the <b>bean</b> as a <b>PropertyChangeListener</b>,
it will receive notifications of all actual changes to all of the <i>bound</i>
properties of the <b>bean</b>.

<p>When notified of a proposed or actual change, the object displays the
actual or proposed new property value.

<p>When notified of a proposed change, the object has the ability to veto
the change by raising a <b>PropertyVetoException</b>. The design of this
class is such that any proposed change to the color <b>green </b><u>will
be vetoed</u>.

<p>Note that this class implements both the <b>PropertyChangeListener</b>
and the <b>VetoableChangeListener</b> interfaces. This makes it possible
for a single object of this class to be notified both of proposed changes
and actual changes to the properties of the <b>bean</b>.

<p>Note that the constructor for the <b>PropertyVetoException</b> thrown
by the <b>vetoableChange()</b> method requires two arguments. The first
is a message of type <b>String</b>. The second is the <b>PropertyChangeEvent</b>
object that is passed to the method and which is being vetoed.

<p>In other words, the event describing the property change that is being
vetoed is encapsulated (along with a message) and sent to the <b>catch</b>
block that will eventually process the exception.

<p>Note also that the argument that is passed to the <b>vetoableChange()</b>
method is of type <b>PropertyChangeEvent</b> which is the same type that
is passed to the <b>propertyChange()</b> method. In particular, the incoming
event type is the same for both event handlers, and there is no such thing
as a <b><i>VetoableChangeEvent</i></b> tailored to the <b>vetoableChange()</b>
method.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>MyPropertyListenerClass&nbsp;
</b>&nbsp; implements <b>PropertyChangeListener</b>,<b>VetoableChangeListener</b>{
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void <b>propertyChange</b>(PropertyChangeEvent event){
&nbsp;&nbsp;&nbsp; //Extract and display the new value
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Change Listener, New property value: "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.<b>getNewValue</b>());
&nbsp; }//end propertyChange()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void <b>vetoableChange</b>(PropertyChangeEvent event)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws PropertyVetoException{
&nbsp;&nbsp;&nbsp; //Extract and display proposed new value
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Veto Listener, New property value: "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.<b>getNewValue</b>());
&nbsp;&nbsp;&nbsp; //Throw an exception on proposed value of green. This
&nbsp;&nbsp;&nbsp; // will veto the change.
&nbsp;&nbsp;&nbsp; <b>if</b>(event.getNewValue().equals(Color.green))
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new PropertyVetoException</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "No green allowed",event);
&nbsp; }//end vetoableChange()&nbsp;&nbsp;&nbsp;&nbsp;
}//end MyPropertyListenerClass class</pre></td></tr></table>
A consolidated listing of the complete test program is contained in the
next section.
<center><h3><a name="program listing for the test program"></a><font color="#ff0000">Program
Listing for the Test Program</font></h3></center>
This section contains a complete listing of the test program written to
test the <i>bound</i> and <i>constrained</i> property behavior of the <b>bean
</b>class.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Beans06Test.java Copyright 1997, R.G.Baldwin

This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

This program is designed to test the constrained property
aspects of the bean class named Beans06.

The program has been simplified as much as possible in an
attempt to make it understandable.

You will need to refer to the comments in the source code
for the Beans06 bean class to fully understand how this&nbsp;
test program works.

The visual manifestation of the Beans06 bean is a colored
square.&nbsp; The bean is placed in a Frame object by this
test program.&nbsp; The square is initially yellow.&nbsp;&nbsp;

The bean has one property named theColor which controls&nbsp;
the color of the square.

Two exposed methods of the bean, makeRed() and makeBlue(),
can be invoked to change the color to red or blue.

Invoking the makeRed() or makeBlue() methods changes the&nbsp;
value of the property named theColor which in turn changes
the color of the square.&nbsp;&nbsp;

You can also change the value of the property named
theColor by invoking the setTheColor() method.&nbsp; In this
case you can pass in any color as a parameter.

The property named theColor is a bound constrained&nbsp;
property.&nbsp; The bean supports a multicast list of
PropertyChangeListener objects and also supports a&nbsp;
multicast list of VetoableChangeListener objects.

PropertyChangeListener objects are simply notified&nbsp;
whenever a change in a property value occurs.

VetoableChangeListener objects are notified of a proposed&nbsp;
change in the property value and have the opportunity to&nbsp;
veto the change by raising a PropertyVetoException.

The program begins with the yellow square bean and three
buttons in a frame on the screen. The buttons are labeled
Red, Green, and Blue.

The Red and Blue buttons invoke the makeRed() and&nbsp;
makeBlue() methods discussed above.

The Green button invokes the setTheColor() method causing
the color green to be passed in as a parameter.&nbsp;&nbsp;
Therefore, clicking this button will attempt to change the
value of the property named theColor to green.

A listener class is defined which implements both the
PropertyChangeListener interface and the&nbsp;
VetoableChangeListener interface.&nbsp; As a result, a listener
object of this class can register to be notified of
proposed property changes with veto authority and can also
register to be notified of actual changes.

One such listener object is instantiated and registered
to listen for both propertyChange() and vetoableChange()
events.

This object is designed to veto any proposal to change the
value of the property to green.

Therefore, if you click the Red button, the square will&nbsp;
turn to red and the following will appear on the screen:

Veto Listener,&nbsp;
New property value: java.awt.Color[r=255,g=0,b=0]
Change Listener,&nbsp;
New property value: java.awt.Color[r=255,g=0,b=0]

If you click the Blue button, the square will change to&nbsp;
blue and the following will appear on the screen.

Veto Listener,&nbsp;
New property value: java.awt.Color[r=0,g=0,b=255]
Change Listener,&nbsp;
New property value: java.awt.Color[r=0,g=0,b=255]

If you click the Green button, the color of the square&nbsp;
will not change.&nbsp; The following will appear on the&nbsp;
screen indicating that the proposed new color was vetoed
and another event was multicast which rolled the property&nbsp;
value back to its value before the proposed change.

Veto Listener,&nbsp;
New property value: java.awt.Color[r=0,g=255,b=0]
Veto Listener,&nbsp;
New property value: java.awt.Color[r=0,g=0,b=255]
java.beans.PropertyVetoException: No green allowed

If you then click on the Red button, the color of the&nbsp;
square will change to red and the following will appear
on the screen:
&nbsp;&nbsp;
Veto Listener,&nbsp;
New property value: java.awt.Color[r=255,g=0,b=0]
Change Listener,&nbsp;
New property value: java.awt.Color[r=255,g=0,b=0]&nbsp;&nbsp;

In all of the above examples, line breaks were manually
inserted in the text to make it fit better in this format.

Although this sample program was constructed for&nbsp;
simplicity having only one property in the bean and one
listener object, the structure of the Beans06 bean class
will support any number of listener objects in either&nbsp;
category.&nbsp;&nbsp;

Obviously the number of properties could also be expanded
to a very large number.&nbsp; This would require more&nbsp;
processing on the part of the objects.&nbsp; With the
structure being used, every object registered to be&nbsp;
notified of proposed changes would be notified of every
proposed change on every property.&nbsp; Likewise, every object
registered to be notified of actual changes would be&nbsp;
notified of every actual change on every property.

Each notification event contains the name of the property
to which the actual or proposed change applies.&nbsp; The
objects would have to use that information to make&nbsp;
decisions on the basis of property names and proposed
changes in property values.

=========================================================*/

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.util.*;
//=======================================================//

public class Beans06Test extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Beans06Test();
&nbsp; }//end main
&nbsp; //-----------------------------------------------------//

&nbsp; public Beans06Test(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; //instantiate a Bean object
&nbsp;&nbsp;&nbsp; Beans06 myBean = new Beans06();
&nbsp;&nbsp;&nbsp; add(myBean);//Add it to the Frame
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate several test buttons&nbsp;
&nbsp;&nbsp;&nbsp; Button buttonToSetTheColor = new Button("Green");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeRedMethod = new Button("Red");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeBlueMethod = new Button("Blue");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the test buttons to the frame&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(buttonToInvokeRedMethod);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(buttonToSetTheColor);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeBlueMethod);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Size the frame and make it visible
&nbsp;&nbsp;&nbsp; setSize(250,350);
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //Register action listener objects for all the test&nbsp;
&nbsp;&nbsp;&nbsp; // buttons&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; buttonToSetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeRedMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new RedActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeBlueMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BlueActionListener(myBean));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register an object to listen for&nbsp;
&nbsp;&nbsp;&nbsp; // proposed and actual changes in the bean's property.
&nbsp;&nbsp;&nbsp; // This listener object has the ability to veto
&nbsp;&nbsp;&nbsp; // proposed changes.
&nbsp;&nbsp;&nbsp; MyPropertyListenerClass myListenerObject =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyListenerClass();
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(myListenerObject);
&nbsp;&nbsp;&nbsp; myBean.addVetoableChangeListener(myListenerObject);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Terminate program when Frame is closed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class Beans06Test
//=======================================================//

//An object of this class is instantiated and registered
// to listen for actionPerformed() events on the button
// labeled "setTheColor".

// When the setTheColor button is pressed, the object
// invokes the setTheColor() method on the bean passing in
// a color parameter of green.

class SetTheColorListener implements ActionListener{
&nbsp; Beans06 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; SetTheColorListener(Beans06 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.setTheColor(Color.green);
&nbsp; }//end actionPerformed()
}//end class SetTheColorListener
//-------------------------------------------------------//

//The following two classes are used to instantiate objects
// which are registered to listen to two of the buttons on
// the test panel.&nbsp; When the corresponding&nbsp; buttons are&nbsp;
// pressed, these objects invoke methods of the bean under&nbsp;
// test. The first class invokes the makeRed() method and
// the second class invokes the makeBlue() method.

class RedActionListener implements ActionListener{
&nbsp; Beans06 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; RedActionListener(Beans06 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeRed();
&nbsp; }//end actionPerformed()
}//end class RedActionListener
//-------------------------------------------------------//

class BlueActionListener implements ActionListener{
&nbsp; Beans06 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; BlueActionListener(Beans06 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeBlue();
&nbsp; }//end actionPerformed()
}//end class BlueActionListener
//=======================================================//

//The following class is used to instantiate objects that
// will be bound to the bean in such a way as to be&nbsp;
// notified of proposed changes and actual changes in the&nbsp;
// property values in the bean object.

//When notified of a proposed or actual change, the object
// displays the actual or proposed new property value.

//When notified of a proposed change, the object has the
// ability to veto the change by raising a&nbsp;
// PropertyVetoException.&nbsp; The design of this class is
// such that any proposed change to the color green will
// vetoed.

class MyPropertyListenerClass&nbsp;
&nbsp; implements PropertyChangeListener,VetoableChangeListener{
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void propertyChange(PropertyChangeEvent event){
&nbsp;&nbsp;&nbsp; //Extract and display the new value
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Change Listener, New property value: "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getNewValue());
&nbsp; }//end propertyChange()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void vetoableChange(PropertyChangeEvent event)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws PropertyVetoException{
&nbsp;&nbsp;&nbsp; //Extract and display proposed new value
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Veto Listener, New property value: "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getNewValue());
&nbsp;&nbsp;&nbsp; //Throw an exception on proposed value of green. This
&nbsp;&nbsp;&nbsp; // will veto the change.
&nbsp;&nbsp;&nbsp; if(event.getNewValue().equals(Color.green))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new PropertyVetoException(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "No green allowed",event);
&nbsp; }//end vetoableChange()&nbsp;&nbsp;&nbsp;&nbsp;
}//end MyPropertyListenerClass class
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table><font color="#000000">.</font><center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Without viewing the following solution, upgrade the programs named
<b>Beans06.java</b> and <b>Beans06Test.java</b> to demonstrate the use
of multiple <i>constrained</i> and <i>bound</i> properties in the <b>bean</b>
and the use of multiple listener objects which implement the <b>VetoableChangeListener</b>
and <b>PropertyChangeListener</b> interfaces in the test program.

<p>Cause your <b>bean</b> to appear on the screen as a colored rectangle
containing a date and time. Provide a <b>Color</b> property to control
the background color of the rectangle. Provide a <b>Date</b> property to
control the date and time that is displayed in the rectangle. Make both
of the properties <i>bound</i> and <i>constrained</i>.

<p>Design one of your <b>VetoableChangeListener</b> objects to veto proposed
property changes which would otherwise cause the rectangle to be green.
Design the other <b>VetoableChangeListener</b> object to veto proposed
property changes that would cause the rectangle to be orange. Demonstrate
that other colors are allowed.

<p>Provide buttons on your test panel which will attempt to cause the color
of the rectangle to be red, green, blue, or orange.

<p>Also provide a button on your test panel that will set the current date
and time in the <b>Date</b> property.

<p>Provide an output on the standard output device whenever the colors
green or orange are vetoed, identifying the reason for the veto and the
object that raised the veto.

<p>Provide an output on the standard output device whenever the value of
a property actually changes, identifying the new value of the property,
and the identification of the listener object that recognized the change.

<p><font color="#0000ff"><font size=-1>A - See the following bean program
and test program.</font></font>

<p><font color="#0000ff"><font size=-1>Bean program follows:</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File Beans07.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

This program illustrates the use of beans with multiple
properties which are both bound and constrained.

This bean appears on the screen as a colored rectangle
containing a date and time.&nbsp; The color as well as the date
and time are based on the current values of corresponding&nbsp;
properties.

The bean has a Color property named theColor and a Date&nbsp;
property named theDate. Both of these properties are bound
and constrained.

The bean has a property named preferredSize that is&nbsp;
neither bound nor constrained&nbsp;

This bean supports propertyChange and vetoableChange&nbsp;
notification lists for the property values.&nbsp; Other&nbsp;
objects can register to be notified of a proposed change
in property values and can veto the change.&nbsp; A proposed&nbsp;
change that is vetoed does not take place.&nbsp; Other&nbsp;
objects can also register to be notified of actual&nbsp;
changes in property values.
&nbsp;

A description of the bean as determined by the program&nbsp;
named Introspect01 follows:
-------&nbsp;&nbsp;
Name of bean:&nbsp; Beans07
Class of bean: class Beans07

==== Properties: ====
Name: preferredSize
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Dimension
&nbsp;Get method: public synchronized java.awt.Dimension&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans07.getPreferredSize()
&nbsp;Set method: null
Name: theDate
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.util.Date
&nbsp;Get method: null
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans07.setTheDate(java.util.Date)
Name: theColor
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Color
&nbsp;Get method: null
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans07.setTheColor(java.awt.Color)

==== Events: ====
Event Name: vetoableChange
&nbsp;Add Method:&nbsp;&nbsp;&nbsp; public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans07.addVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.VetoableChangeListener)
&nbsp;Remove Method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans07.removeVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.VetoableChangeListener)
&nbsp;Event Type: vetoableChange
&nbsp;
Event Name: propertyChange
&nbsp;Add Method:&nbsp;&nbsp;&nbsp; public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans07.addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.PropertyChangeListener)
&nbsp;Remove Method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans07.removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.PropertyChangeListener)
&nbsp;Event Type: propertyChange

==== Methods: ====
setTheDate
removePropertyChangeListener
setTheColor
removeVetoableChangeListener
getPreferredSize
addPropertyChangeListener
addVetoableChangeListener
-------

&nbsp; The following methods:
&nbsp;&nbsp;&nbsp; setTheColor()
&nbsp;&nbsp;&nbsp; setTheDate()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; both provide the opportunity for a&nbsp;
&nbsp; VetoableChangeListener object to veto a proposed new&nbsp;
&nbsp; value for the property.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; Each of these methods receives a proposed property value
&nbsp; as a parameter when it is invoked. The method saves the&nbsp;
&nbsp; current value of the property in an instance variable&nbsp;
&nbsp; named old_____.&nbsp; Then it makes a call to the method&nbsp;
&nbsp; named notifyVetoableChange() inside a try block.
&nbsp;&nbsp;
&nbsp; notifyVetoableChange() broadcasts a vetoableChange()
&nbsp; event to all of the VetoableChangeListener objects that
&nbsp; are registered to receive such an event.&nbsp; Any listener
&nbsp; object that wants to veto the change throws a
&nbsp; PropertyVetoException which finds its way back to the&nbsp;
&nbsp; method listed above that invoked notifyVetoableChange()
&nbsp; in the first place.
&nbsp;&nbsp;
&nbsp; When the exception is thrown, it is caught in a catch
&nbsp; block.&nbsp; The code in the catch block restores the
&nbsp; property value to its original value. In other words,&nbsp;
&nbsp; theproposed new value is discarded and replaced by the
&nbsp; value of the property before the proposed new value&nbsp;
&nbsp; was received.
&nbsp;&nbsp;
&nbsp; This proposed new value then becomes the current value
&nbsp; and is used to set the background color of the bean
&nbsp; or to set the new date and time.
&nbsp;&nbsp;
&nbsp; The proposed new value is also compared with the value
&nbsp; of the property before the proposed new value was
&nbsp; received.&nbsp; If they are different, meaning that a&nbsp;
&nbsp; property change has occurred, the notifyPropertyChange()
&nbsp; method is invoked to broadcase a propertyChange() event
&nbsp; to all PropertyChangeListener objects registered to&nbsp;
&nbsp; receive such an event.

&nbsp; An important aspect of the behavior of this bean is&nbsp;
&nbsp; based on the use of the fireVetoableChange() method of
&nbsp; the VetoableChangeSupport class to actually broadcast&nbsp;
&nbsp; the event. A description of this method follows.
&nbsp;&nbsp;
&nbsp; Note in particular the behavior of this method when
&nbsp; someone vetos the change.
&nbsp;&nbsp;
&nbsp; ------
&nbsp; public void fireVetoableChange(String propertyName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object oldValue,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object newValue) throws PropertyVetoException


&nbsp;&nbsp;&nbsp; Report a vetoable property update to any registered&nbsp;
&nbsp;&nbsp;&nbsp; listeners. If anyone vetos the change, then fire a&nbsp;
&nbsp;&nbsp;&nbsp; new event reverting everyone to the old value and&nbsp;
&nbsp;&nbsp;&nbsp; then rethrow the PropertyVetoException.&nbsp;

&nbsp;&nbsp;&nbsp; No event is fired if old and new are equal and&nbsp;
&nbsp;&nbsp;&nbsp; non-null&nbsp;

&nbsp;&nbsp;&nbsp; Parameters:&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propertyName - The name of the property that was&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changed.&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; oldValue - The old value of the property.&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newValue - The new value of the property.&nbsp;
&nbsp;&nbsp;&nbsp; Throws: PropertyVetoException&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if the recipient wishes the property change to be&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rolled back.&nbsp;


Additional comments describing the bean are scattered
throughout the code.

This bean was tested using the test program named&nbsp;
Beans07Test using JDK 1.1.3 under Win95.
//=======================================================//
*/

import java.awt.event.*;
import java.awt.*;
import java.io.Serializable;
import java.util.*;
import java.beans.*;
//=======================================================//
//All beans should implement the Serializable interface
public class Beans07 extends Label&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Serializable{

&nbsp; //The following instance variables are used to store the
&nbsp; // current property value and proposed new property
&nbsp; // value for both the Color and Date properties.
&nbsp; protected Color oldColor;
&nbsp; protected Color newColor;
&nbsp; protected Date oldDate;
&nbsp; protected Date newDate;
&nbsp;&nbsp;
&nbsp; //The following reference variables are used to access
&nbsp; // the list maintenance and event firing capabilities
&nbsp; // of the PropertyChangeSupport and VetoableChangeSupport
&nbsp; // classs. An object of each of these classes is&nbsp;
&nbsp; // instantiated in the constructor.&nbsp;&nbsp;
&nbsp; PropertyChangeSupport changeSupportObj;
&nbsp; VetoableChangeSupport vetoSupportObj;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; public Beans07(){//constructor
&nbsp;&nbsp;&nbsp; //Initialize the property values and the display
&nbsp;&nbsp;&nbsp; newColor = Color.yellow;
&nbsp;&nbsp;&nbsp; setBackground(newColor);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; newDate = new Date();
&nbsp;&nbsp;&nbsp; setText(newDate.toString());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate objects of the support classes to handle
&nbsp;&nbsp;&nbsp; // list maintenance and event firing tasks.&nbsp; The
&nbsp;&nbsp;&nbsp; // constructor for the support classes requires this&nbsp;
&nbsp;&nbsp;&nbsp; // object as a paremeter.&nbsp; The parameter is used as the
&nbsp;&nbsp;&nbsp; // source of the events when they are fired.
&nbsp;&nbsp;&nbsp; changeSupportObj = new PropertyChangeSupport(this);
&nbsp;&nbsp;&nbsp; vetoSupportObj = new VetoableChangeSupport(this);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //This method defines the preferred display size of the&nbsp;
&nbsp; // bean object.&nbsp;&nbsp;
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(200,50);
&nbsp; }//end getPreferredSize()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following "set" method in conjunction with the&nbsp;
&nbsp; // instance variables named oldColor and newColor&nbsp;
&nbsp; // constitute a write-only property named theColor.&nbsp;&nbsp;
&nbsp; public synchronized void setTheColor(Color inColor){
&nbsp;&nbsp;&nbsp; oldColor = newColor;//save current color
&nbsp;&nbsp;&nbsp; newColor = inColor;//proposed new color
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; try{//test to see if anyone vetos the new color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyVetoableChange("theColor");
&nbsp;&nbsp;&nbsp; }catch(PropertyVetoException exception){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Someone vetoed the new color.&nbsp; Don't use newColor.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newColor = oldColor;// Restore oldColor instead
&nbsp;&nbsp;&nbsp; }//end catch

&nbsp;&nbsp;&nbsp; if(!newColor.equals(oldColor)){//if color changed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBackground(newColor);//display new color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //notify property listeners of property change&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp;&nbsp;&nbsp; }//end if&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end setTheColor()

&nbsp; //-----------------------------------------------------//
&nbsp; //The following "set" method in conjunction with the&nbsp;
&nbsp; // instance variables named oldDate and newDate&nbsp;
&nbsp; // constitute a write-only property named theDate.&nbsp;&nbsp;
&nbsp; public synchronized void setTheDate(Date inDate){
&nbsp;&nbsp;&nbsp; oldDate = newDate;//save current date
&nbsp;&nbsp;&nbsp; newDate = inDate;//proposed new date
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; try{//test to see if anyone vetos the new date
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyVetoableChange("theDate");
&nbsp;&nbsp;&nbsp; }catch(PropertyVetoException exception){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Someone vetoed the new date.&nbsp; Don't use newDate.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; newDate = oldDate;// Restore oldDate instead
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Display the veto exception
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(exception.getMessage());
&nbsp;&nbsp;&nbsp; }//end catch

&nbsp;&nbsp;&nbsp; if(!newDate.equals(oldDate)){//if date changed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setText(newDate.toString());//display new date
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //notify property listeners of property change&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theDate");
&nbsp;&nbsp;&nbsp; }//end if&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end setTheColor()&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//

&nbsp; //The following two methods are used to maintain a list
&nbsp; // of listener objects who request to be registered as
&nbsp; // PropertyChangeListener objects, or who request to be&nbsp;
&nbsp; // removed from the list.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; //Add a property change listener object to the list.
&nbsp; public synchronized void addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task to the support class.
&nbsp;&nbsp;&nbsp; changeSupportObj.addPropertyChangeListener(listener);
&nbsp; }//end addPropertyChangeListener
&nbsp; //-----------------------------------------------------//

&nbsp; //Remove a property change listener from the list.
&nbsp; public synchronized void removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task to the support class.
&nbsp;&nbsp;&nbsp; changeSupportObj.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; removePropertyChangeListener(listener);
&nbsp; }//end removePropertyChangeListener()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following two methods are used to maintain a list
&nbsp; // of listener objects who request to be registered
&nbsp; // as VetoableChangeListener objects, or who request to&nbsp;
&nbsp; // be removed from the list.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; //Add a vetoable change listener object to the list.
&nbsp; public synchronized void addVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VetoableChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task to the support class.
&nbsp;&nbsp;&nbsp; vetoSupportObj.addVetoableChangeListener(listener);
&nbsp; }//end addVetoableChangeListener
&nbsp; //-----------------------------------------------------//

&nbsp; //Remove a vetoable change listener from the list.
&nbsp; public synchronized void removeVetoableChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; VetoableChangeListener listener){
&nbsp;&nbsp;&nbsp; //Pass the task to the support class.
&nbsp;&nbsp;&nbsp; vetoSupportObj.removeVetoableChangeListener(listener);
&nbsp; }//end removeVetoableChangeListener()&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method is used to notify&nbsp;
&nbsp; // PropertyChangeListener objects of changes in the&nbsp;
&nbsp; // properties.&nbsp; The incoming parameter is the name of the
&nbsp; // property that has changed.&nbsp;&nbsp;
&nbsp; protected void notifyPropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String changedProperty){
&nbsp;&nbsp;&nbsp; if(changedProperty.compareTo("theColor") == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //TheColor property has changed, pass color info
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changeSupportObj.firePropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changedProperty,oldColor,newColor);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else //TheDate property has changed, pass date info
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changeSupportObj.firePropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changedProperty,oldDate,newDate);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end notifyPropertyChange()
&nbsp; //-----------------------------------------------------//

&nbsp; //The following method is used to notify&nbsp;
&nbsp; // VetoableChangeListener objects of proposed changes in&nbsp;
&nbsp; // the property values.&nbsp; The incoming parameter is the&nbsp;
&nbsp; // name of the property that is proposed to be changed.
&nbsp;&nbsp;
&nbsp; // This method uses the fireVetoableChange() method of&nbsp;
&nbsp; // the VetoableChangeSupport class to actually fire the&nbsp;
&nbsp; // event.&nbsp; As discussed earlier in this file, the
&nbsp; // fireVetoableChange method actually performs some data
&nbsp; // processing and does more than simply fire the event.
&nbsp; // In the event of a veto, it fires a second event with
&nbsp; // the value of the property that existed prior to the
&nbsp; // proposed change.
&nbsp; protected void notifyVetoableChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String vetoableProperty)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws PropertyVetoException{
&nbsp;&nbsp;&nbsp; if(vetoableProperty.compareTo("theColor") == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //theColor property is proposed to be changed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vetoSupportObj.fireVetoableChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vetoableProperty,oldColor,newColor);
&nbsp;&nbsp;&nbsp; else //theDate property is proposed to be changed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vetoSupportObj.fireVetoableChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vetoableProperty,oldDate,newDate);
&nbsp; }//end notifyVetoableChange()&nbsp;&nbsp;
&nbsp;&nbsp;
}//end class Beans07.java
//=======================================================//</font></pre></td></tr></table><font color="#0000ff"><font size=-1>Test program follows:</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File Beans07Test.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

This program is designed to test the constrained property
aspects of the bean class named Beans07 for multiple
properties and multiple listener objects.

You will need to refer to the comments in the source code
for the Beans07 bean class to fully understand how this&nbsp;
test program works.

The visual manifestation of the Beans07 bean is a colored
rectangle with a date and time displayed in the rectangle.

The bean is placed in a Frame object by this test program.

The rectangle is initially yellow.&nbsp;&nbsp;

The bean has two bound and constrained properties named
theColor and theDate which control the color of the&nbsp;
rectangle and the date and time displayed in the rectangle.

You can change the color of the rectangle by invoking the
setTheColor() method on the bean and passing in a Color as&nbsp;
a parameter.

You can change the date and time displayed in the&nbsp;
rectangle by invoking the setTheDate() method on the bean
and passing a Date object as a parameter.

The bean supports a multicast list of&nbsp;
PropertyChangeListener objects and also supports a&nbsp;
multicast list of VetoableChangeListener objects for both
of the bound and constrained properties.

PropertyChangeListener objects are simply notified&nbsp;
whenever a change in a property value occurs.

VetoableChangeListener objects are notified of a proposed&nbsp;
change in the property value and have the opportunity to&nbsp;
veto the change by raising a PropertyVetoException.

This program begins with a yellow rectangular bean
containing a date and time along with five buttons in a&nbsp;
frame on the screen. The buttons are labeled Red, Green,&nbsp;
Blue, Orange, and Date.

Clicking one of the buttons with a color label causes the
setTheColor() method to be invoked on the bean with the
indicated color being passed in as a parameter.

Clicking the date button causes the setTheDate() method to
be invoked on the bean, passing in a Date object containing
the current date and time.

A listener class is defined which implements both the
PropertyChangeListener interface and the&nbsp;
VetoableChangeListener interface.&nbsp; As a result, a listener
object of this class can register to be notified of
proposed property changes with veto authority and can also
register to be notified of actual changes.

The constructor for this listener class also allows a&nbsp;
String object and a Color value to be passed in as a&nbsp;
parameter.

The String object is used as an identifier when information
about the listener object is displayed.

The Color value is used to establish a color that will be&nbsp;
vetoed by the listener object.

Two such listener objects are instantiated and registered
to listen for both propertyChange() and vetoableChange()
events.

One object is named Joe and will veto attempts to change
the Color property to green.

The other object is named Tom and will veto attempts to
change the Color property to orange.


If you click the Red button, the rectangle will change to&nbsp;
red and the following will appear on the screen:

Joe Change Listener
&nbsp; New property value: java.awt.Color[r=255,g=0,b=0]
Tom Change Listener
&nbsp; New property value: java.awt.Color[r=255,g=0,b=0]


If you click the Green button, the color of the rectangle&nbsp;
will not change.&nbsp; The following will appear on the screen&nbsp;
indicating that the proposed new color was vetoed.

Joe vetos java.awt.Color[r=0,g=255,b=0]


If you click the Blue button, the rectangle will change to&nbsp;
blue and the following will appear on the screen.

Joe Change Listener
&nbsp; New property value: java.awt.Color[r=0,g=0,b=255]
Tom Change Listener
&nbsp; New property value: java.awt.Color[r=0,g=0,b=255]


If you click the Orange button, the color of the rectangle&nbsp;
will not change.&nbsp; The following will appear on the screen&nbsp;
indicating that the proposed new color was vetoed.

Tom vetos java.awt.Color[r=255,g=200,b=0]


If you then click on the Red button, the color of the&nbsp;
rectangle will change to red and the following will appear
on the screen:

Joe Change Listener
&nbsp; New property value: java.awt.Color[r=255,g=0,b=0]
Tom Change Listener
&nbsp; New property value: java.awt.Color[r=255,g=0,b=0]&nbsp;&nbsp;

&nbsp;&nbsp;
If you click on the Date button, the new date and time will
appear in the colored rectangle and the following will
appear on the screen:

Joe Change Listener
&nbsp; New property value: Sun Oct 19 15:14:07 CDT 1997
Tom Change Listener
&nbsp; New property value: Sun Oct 19 15:14:07 CDT 1997



=========================================================*/

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.util.*;
//=======================================================//
public class Beans07Test extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Beans07Test();
&nbsp; }//end main
&nbsp; //-----------------------------------------------------//

&nbsp; public Beans07Test(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; //instantiate a Bean object
&nbsp;&nbsp;&nbsp; Beans07 myBean = new Beans07();
&nbsp;&nbsp;&nbsp; add(myBean);//Add it to the Frame
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate several test buttons&nbsp;
&nbsp;&nbsp;&nbsp; Button buttonToSetToGreen = new Button("Green");
&nbsp;&nbsp;&nbsp; Button buttonToSetToRed = new Button("Red");
&nbsp;&nbsp;&nbsp; Button buttonToSetToBlue = new Button("Blue");
&nbsp;&nbsp;&nbsp; Button buttonToSetToOrange = new Button("Orange");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button buttonToSetTheDate = new Button("Date");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the test buttons to the frame&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(buttonToSetToRed);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(buttonToSetToGreen);
&nbsp;&nbsp;&nbsp; add(buttonToSetToBlue);
&nbsp;&nbsp;&nbsp; add(buttonToSetToOrange);
&nbsp;&nbsp;&nbsp; add(buttonToSetTheDate);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Size the frame and make it visible
&nbsp;&nbsp;&nbsp; setSize(250,350);
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //Register action listener objects for all the test&nbsp;
&nbsp;&nbsp;&nbsp; // buttons&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; buttonToSetToGreen.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean,Color.green));
&nbsp;&nbsp;&nbsp; buttonToSetToRed.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean,Color.red));
&nbsp;&nbsp;&nbsp; buttonToSetToBlue.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean,Color.blue));
&nbsp;&nbsp;&nbsp; buttonToSetToOrange.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean,Color.orange));
&nbsp;&nbsp;&nbsp; buttonToSetTheDate.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheDateListener(myBean));&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; //Instantiate and register&nbsp; objects to listen for&nbsp;
&nbsp;&nbsp;&nbsp; // proposed and actual changes in the bean's property
&nbsp;&nbsp;&nbsp; // values. These listener objects havethe ability to&nbsp;
&nbsp;&nbsp;&nbsp; // veto proposed changes.
&nbsp;&nbsp;&nbsp; //This object is named Joe and vetos the green color
&nbsp;&nbsp;&nbsp; MyPropertyListenerClass joeListenerObject =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyListenerClass("Joe",Color.green);
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(joeListenerObject);
&nbsp;&nbsp;&nbsp; myBean.addVetoableChangeListener(joeListenerObject);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //This object is named Tom and vetos the orange color
&nbsp;&nbsp;&nbsp; MyPropertyListenerClass tomListenerObject =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyListenerClass("Tom",Color.orange);
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(tomListenerObject);
&nbsp;&nbsp;&nbsp; myBean.addVetoableChangeListener(tomListenerObject);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Terminate program when Frame is closed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class Beans07Test
//=======================================================//
//An object of this class will invoke the setTheColor()
// method on the bean passing a specified color as a&nbsp;
// parameter.&nbsp; The specified color is passed as a parameter
// to the constructor of this class.&nbsp;&nbsp;
class SetTheColorListener implements ActionListener{
&nbsp; Beans07 myBean;//save a reference to the bean here
&nbsp; Color colorToSet;//save the new color here
&nbsp;&nbsp;
&nbsp; //constructor
&nbsp; SetTheColorListener(Beans07 inBean,Color inColor){
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp;&nbsp;&nbsp; colorToSet = inColor;//save the new color
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.setTheColor(colorToSet);
&nbsp; }//end actionPerformed()
}//end class SetTheColorListener
//=======================================================//

//An object of this class will invoke the setTheDate()
// method on the bean passing a Date object as a parameter.
// The date object is constructed to contain the current&nbsp;
// date and time.
class SetTheDateListener implements ActionListener{
&nbsp; Beans07 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; //constructor
&nbsp; SetTheDateListener(Beans07 inBean){
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.setTheDate(new Date());
&nbsp; }//end actionPerformed()
}//end class SetTheDateListener
//=======================================================//

//The following class is used to instantiate objects that
// will be bound to the bean in such a way as to be&nbsp;
// notified of proposed changes and actual changes in the&nbsp;
// property values in the bean object.

//When notified of a proposed or actual change, the object
// displays the actual or proposed new property value.

//When notified of a proposed change, the object has the
// ability to veto the change by raising a&nbsp;
// PropertyVetoException.&nbsp;&nbsp;

//The constructor for this class accepts a String object
// and a Color parameter as incoming parameters.&nbsp; The
// String is used to identify the object when information
// is displayed.&nbsp; The Color parameter specifies a color
// that will be vetoed by the object if an attempt is
// made to change the Color property of the bean to that
// Color value.

//Note that this class implements PropertyChangeListener
// and VetoableChangeListener

class MyPropertyListenerClass&nbsp;
&nbsp; implements PropertyChangeListener,VetoableChangeListener{
&nbsp; String objID; //store the object ID here
&nbsp; Color vetoColor; //store the color to be vetoed here
&nbsp;&nbsp;
&nbsp; //constructor
&nbsp; MyPropertyListenerClass(String idIn,Color vetoColorIn){
&nbsp;&nbsp;&nbsp; objID = idIn;//save the object ID
&nbsp;&nbsp;&nbsp; vetoColor = vetoColorIn;//save the veto color
&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void propertyChange(PropertyChangeEvent event){
&nbsp;&nbsp;&nbsp; //Extract and display the new value
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; objID + " Change Listener\n&nbsp; New property value: "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getNewValue());
&nbsp; }//end propertyChange()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void vetoableChange(PropertyChangeEvent event)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws PropertyVetoException{
&nbsp;&nbsp;&nbsp; if(event.getNewValue() == vetoColor){//test for veto&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; objID + " vetos " + event.getNewValue());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Throw an exception on proposed change. This will&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // veto the change.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new PropertyVetoException("VETO",event);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end vetoableChange()&nbsp;&nbsp;&nbsp;&nbsp;
}//end MyPropertyListenerClass class
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</font></pre></td></tr></table>
.

<p>-end-<!--end--></body></html>