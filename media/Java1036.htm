<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<h2>
Swing from A to Z:&nbsp; Demystifying Glue and Struts, Part 3</h2>
<i>Baldwin shows you how to use custom methods that provide the functionality
of glue and struts.&nbsp; One of the methods produces an elastic spacer
component with an upper limit on how far the component will stretch.&nbsp;
Another method provides the functionality of glue and struts in a single
object.&nbsp; Just for fun, Baldwin also shows you how to use a JButton
as a container.</i>
<p><b>Published:</b>&nbsp; January 2, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1036
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures and listings while you are reading about
them.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In the lesson entitled <i>Alignment Properties and BoxLayout, Part 1</i>,
I recommended a list of Swing tutorials for you to study prior to embarking
on a study of this set of lessons.
<p>The lessons identified on that list will introduce you to the use of
Swing while avoiding much of the detail included in this series.
<p><b><font color="#FF0000">Where are they located?</font></b>
<p>You will find those lessons published at <a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes my lessons are difficult
to locate there.&nbsp; You will find a consolidated index at
<i>Baldwin's
Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><font color="#000000">The index on my site provides links to the lessons
at Gamelan.com.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
In the previous lesson entitled <i>Swing from A to Z:&nbsp; Demystifying
Glue and Struts, Part 2,</i> I developed three convenience methods that
can be used as alternatives to the factory methods of the <b>Box</b> class
to produce components that fulfill the functionality of glue and struts.
<p>One of the methods makes it possible to produce an elastic spacer component
(glue) with an upper limit on how far the component will stretch.
<p>Another method returns a reference to an object that provides the functionality
of glue and struts in a single object.
<p>In this lesson, I will show you how to use the three methods mentioned
above to complete the program that produced the screen shots shown in that
lesson.&nbsp; <i>(Those screen shots are repeated in this lesson for convenience
of viewing.)</i>
<p>The program will also demonstrate that <b>BoxLayout</b> is not confined
to being used with a <b>Box</b> container.&nbsp; Just for fun, I will use
a <b>JButton</b> as a container with a <b>BoxLayout</b> manager.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<font color="#000000">In an earlier lesson entitled <i>Swing from A to
Z:&nbsp;&nbsp; Alignment Properties and BoxLayout, Part 1</i>, I introduced
you to the <b>BoxLayout</b> manager.&nbsp; I will use <b>BoxLayout</b>
in the sample program in this lesson.</font>
<p><b><font color="#FF0000">Glue and struts</font></b>
<p><font color="#000000">In another earlier lesson entitled <i>Swing from
A to Z:&nbsp; Glue, Struts, and BoxLayout</i>, I introduced you to the
use of glue and struts.</font>
<p><b><font color="#FF0000">The previous lesson</font></b>
<p><font color="#000000">In the previous lesson entitled </font><i>Swing
from A to Z:&nbsp; Demystifying Glue and Struts, Part 2</i>, <font color="#000000">I
developed three new methods for producing invisible components that can
take the place of the glue and struts produced by the standard factory
methods.</font>
<p><b><font color="#FF0000">What do the new methods do?</font></b>
<p><font color="#000000">These new methods provide alternative <i>glue</i>
and <i>strut</i> components that have more functionality than the standard
glue and struts.</font>
<p><b><font color="#FF0000">How do they differ?</font></b>
<p><font color="#000000">These alternative methods provide the following
behaviors:</font>
<ul>
<li>
<font color="#000000">You can change the size of the alternative
<i>strut</i>
component after the object is instantiated.</font></li>

<li>
<font color="#000000">You can specify a maximum stretch value for the alternative
<i>glue</i>
component.</font></li>

<li>
<font color="#000000">You can instantiate a single object that replaces
the combination of a
<i>glue</i> object and a <i>strut</i> object.</font></li>
</ul>
<b><font color="#FF0000">Discussed in detail earlier</font></b>
<p><font color="#000000">I discussed the rationale behind and the behavior
of those methods in detail in the previous lesson entitled </font><i>Swing
from A to Z:&nbsp; Demystifying Glue and Struts, Part 2</i><font color="#000000">.</font>
<p><font color="#000000">In that lesson, I began the development of a program
that uses the new methods, and showed you some screen shots produced by
that program.</font>
<p><font color="#000000">I promised that this lesson would complete the
development of that program.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
This sample program, named <b>Swing20</b>, is designed to take the mystery
out of glue and struts as used with <b>BoxLayout.</b>
<p>Figure 1 is a screen shot that shows what the screen looks like when
this sample program starts running.
<center>
<p><img SRC="java1036a.gif" height=65 width=236>
<br><b><font face="Arial Narrow"><font size=-1>Figure 1.&nbsp; Screen shot
when program starts running.</font></font></b></center>

<p><b><font color="#FF0000">Must resize to see the effect</font></b>
<p>You must manually resize the
<b>JFrame</b> object to make it larger
and smaller in order to see the effect of the spacer components used in
the program.
<p>Figure 2 is a screen shot showing the effect of manually resizing the
<b>JFrame
</b>to
make it narrower.
<center>
<p><img SRC="java1036b.gif" height=65 width=202>
<br><b><font face="Arial Narrow"><font size=-1>Figure 2.&nbsp; A screen
shot after making the frame narrower.</font></font></b></center>

<p>Figure 3 is a screen shot showing the effect of making the frame wider.
<center>
<p><img SRC="java1036c.gif" height=65 width=307>
<br><b><font face="Arial Narrow"><font size=-1>Figure 3.&nbsp; A screen
shot after making the frame wider.</font></font></b></center>

<p>I discussed these screen shots at length in the <font color="#000000">previous
lesson entitled </font><i>Swing from A to Z:&nbsp; Demystifying Glue and
Struts, Part 2</i>.
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
The name of this program is <b>Swing20</b>.
<p>I will break this program down and discuss it in fragments.&nbsp; A
listing
of the entire program is provided in <font color="#000000">Listing 6</font>.
<p><b><font color="#FF0000">The constructor</font></b>
<p><font color="#000000">The beginning of the constructor is shown in Listing
1.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;
&nbsp; Swing20(){//constructor

&nbsp;&nbsp;&nbsp; JButton aBut = <b>new JButton()</b>;
&nbsp;&nbsp;&nbsp; aBut.setLayout(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new <b>BoxLayout(aBut,BoxLayout.X_AXIS)</b>);

&nbsp;&nbsp;&nbsp; //Add the JButton to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBut);

<b>Listing 1</b></font></font></pre>
</td>
</tr>
</table>

<p><font color="#000000">As I have mentioned several times in previous
lessons, (almost) every Swing component is a container.</font>
<p><b><font color="#FF0000">BoxLayout not confined to Box container</font></b>
<p><font color="#000000">One of my objectives in this lesson is to demonstrate
that <b>BoxLayout</b> is not confined for use only with the <b>Box</b>
container.</font>
<p><font color="#000000">Therefore, just for fun, I decided to use a large
<b>JButton</b>
as a container, and to apply a <b>BoxLayout</b> manager to that container.
<i>(If
you look very carefully at Figure 1, you will see that a large JButton
object contains three small JButton objects and two JLabel objects.&nbsp;
The small buttons appear to protrude from the large button.)</i></font>
<p><font color="#000000">The code to accomplish this is shown in Listing
1.</font>
<p><b><font color="#FF0000">BoxLayout constructor is unusual</font></b>
<p><font color="#000000">The constructor for a <b>BoxLayout</b> object
is rather unusual, as layout managers go.&nbsp; Here is a description of
the constructor for
<b>BoxLayout</b>.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Arial Narrow"><font size=-1>public
BoxLayout(Container target,</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
int axis)</font></font>
<p><font face="Arial Narrow"><font size=-1>Creates a layout manager that
will lay out components either left to right or top to bottom, as specified
in the axis parameter.</font></font>
<p><font face="Arial Narrow"><font size=-1>Parameters:</font></font>
<ul>
<li>
<font face="Arial Narrow"><font size=-1>target - the container that needs
to be laid out</font></font></li>

<li>
<font face="Arial Narrow"><font size=-1>axis - the axis to lay out components
along. For left-to-right layout, specify BoxLayout.X_AXIS; for top-to-bottom
layout, specify BoxLayout.Y_AXIS</font></font></li>
</ul>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Two parameters required</font></b>
<p><font color="#000000">The constructors for many layout managers don't
require any parameters.&nbsp; However, this constructor requires two parameters.</font>
<p><b><font color="#FF0000">First parameter is controlled object</font></b>
<p><font color="#000000">The first parameter must be a reference to the
container object that will be under control of the layout manager.&nbsp;
In this case, this parameter is a reference to the <b>JButton</b> object
that serves as the container.</font>
<p><b><font color="#FF0000">Second parameter specifies horizontal or vertical</font></b>
<p><font color="#000000">The second parameter is a numeric value that specifies
whether the layout will be along a horizontal or vertical axis.&nbsp; Symbolic
constants are provided in the <b>BoxLayout</b> class for both of these
possibilities.</font>
<p><b><font color="#FF0000">Add to the content pane</font></b>
<p><font color="#000000">The code in Listing 1 also adds the <b>JButton</b>
container to the content pane, which is normal when using Swing.</font>
<p><b><font color="#FF0000">Buttons and labels</font></b>
<p>The code in <font color="#000000">Listing 2</font> instantiates three
<b>JButton</b>
objects and two <b>JLabel</b> objects that will be placed in the large
<b>JButton</b>
container object.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three JButton objects,
&nbsp;&nbsp;&nbsp; // make them green.
&nbsp;&nbsp;&nbsp; JButton <b>but1</b> = new JButton("b1");
&nbsp;&nbsp;&nbsp; but1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton <b>but2</b> = new JButton("b2");
&nbsp;&nbsp;&nbsp; but2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton <b>but3</b> = new JButton("b3");
&nbsp;&nbsp;&nbsp; but3.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two JLabel objects.Color&nbsp;
&nbsp;&nbsp;&nbsp; // them yellow.
&nbsp;&nbsp;&nbsp; JLabel <b>lab1</b> = new JLabel("L1");
&nbsp;&nbsp;&nbsp; lab1.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab1.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel <b>lab2</b> = new JLabel("L2");
&nbsp;&nbsp;&nbsp; lab2.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab2.setOpaque(true);

<b>Listing 2</b></font></font></pre>
</td>
</tr>
</table>

<p><i>(These buttons and labels will be separated by fixed and elastic
spacer objects.)</i>
<p>The code in <font color="#000000">Listing 2</font> is straightforward,
so I will let the comments speak for themselves.
<p><b><font color="#FF0000">Construct the GUI</font></b>
<p><font color="#000000">The code in Listing 3 adds the buttons and the
labels to the <b>JButton</b> container and inserts invisible spacer objects
between them.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; aBut.add(but1);
<b>&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(3,0));
</b>&nbsp;&nbsp;&nbsp; aBut.add(lab1);
<b>&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(4,0));
&nbsp;&nbsp;&nbsp; aBut.add(myElasticSpacer(6,0));
</b>&nbsp;&nbsp;&nbsp; aBut.add(but2);
<b>&nbsp;&nbsp;&nbsp; aBut.add(myElasticSpacer(12,0));
&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(5,0));
</b>&nbsp;&nbsp;&nbsp; aBut.add(lab2);
<b>&nbsp;&nbsp;&nbsp; aBut.add(combinationSpacer(6,0,24,0));
</b>&nbsp;&nbsp;&nbsp; aBut.add(but3);

<b>Listing 3</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Insert a fixed-width spacer</font></b>
<p>The second statement in <font color="#000000">Listing 3</font> invokes
the <b>myFixedSpacer()</b> method to insert a fixed spacer that is three
pixels wide and zero pixels tall between the left-most button
<b>b1</b>
and the label to its right <b>L1</b>.&nbsp; <i>(See Figure 1<font color="#000000">
to identify the components labeled b1 and L1 that I am referring to</font>.)</i>
<p>The method named <b>myFixedSpacer()</b>, along with the other two methods
discussed below, was described in detail in the <font color="#000000">previous
lesson entitled </font><i>Swing from A to Z:&nbsp; Demystifying Glue and
Struts, Part 2</i>.
<p><b><font color="#FF0000">Another fixed-width spacer</font></b>
<p><font color="#000000">The second boldface statement in Listing 3 above
invokes the same method to insert a fixed-width spacer four pixels wide
between the label
<b>L1</b> and the center button <b>b2</b>.&nbsp; <i>(Note
that L1 and b2 refer to the captions on the components and not to the names
of the variables that refer to those components.)</i></font>
<p><b><font color="#FF0000">An elastic spacer</font></b>
<p><font color="#000000">The third boldface statement in Listing 3 invokes
the <b>myElasticSpacer()</b> method to insert an elastic spacer between
the fixed spacer described in the previous paragraph and the center button
<b>b2</b>.&nbsp; <i>(Until stretched, this spacer has zero width and therefore,
doesn't occupy any space on the screen.)</i></font>
<p><font color="#000000">In this case, the elastic spacer has a maximum
stretch limit of six pixels in the horizontal and zero pixels in the vertical.</font>
<p><b><font color="#FF0000">Another pair of spacers</font></b>
<p><font color="#000000">Using the same methodology, the fourth and fifth
boldface statements in Listing 3 insert an elastic spacer and a fixed spacer
immediately to the right of the center button, <b>b2</b>.</font>
<p><font color="#000000">In this case the horizontal stretch limit of the
elastic spacer is twelve pixels and the horizontal size of the fixed spacer
is five pixels.</font>
<p><b><font color="#FF0000">A combination spacer object</font></b>
<p><font color="#000000">Finally, the sixth boldface statement in Listing
3 invokes the <b>combinationSpacer()</b> method to insert a single spacer
component immediately to the left of the right-most button, <b>b3</b>.</font>
<p><font color="#000000">This single component functions as both strut
and glue.&nbsp; It has a minimum width of six pixels on the horizontal
and a maximum stretch of 24 pixels on the horizontal.</font>
<p><b><font color="#FF0000">A short side trip</font></b>
<p><font color="#000000">In the previous lesson entitled </font><i>Swing
from A to Z:&nbsp; Demystifying Glue and Struts, Part 2</i><font color="#000000">,
I showed you a screen shot produced by a different program named <b>Swing21</b>
that used the <b>combinationSpacer()</b> method exclusively for inserting
spacers.&nbsp; The corresponding code fragment from that program is shown
in Listing 4.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; aBut.add(but1);
&nbsp;&nbsp;&nbsp; <b>aBut.add(combinationSpacer(3,0,0,0));
</b>&nbsp;&nbsp;&nbsp; aBut.add(lab1);
&nbsp;&nbsp;&nbsp; <b>aBut.add(combinationSpacer(4,0,6,0));
</b>&nbsp;&nbsp;&nbsp; aBut.add(but2);
&nbsp;&nbsp;&nbsp; <b>aBut.add(combinationSpacer(5,0,12,0));
</b>&nbsp;&nbsp;&nbsp; aBut.add(lab2);
&nbsp;&nbsp;&nbsp; <b>aBut.add(combinationSpacer(6,0,24,0));
</b>&nbsp;&nbsp;&nbsp; aBut.add(but3);

<b>Listing 4</b></font></font></pre>
</td>
</tr>
</table>

<p><font color="#000000">A repeat of that screen shot follows.&nbsp; Note
that it has been manually stretched to cause all of the spacers to reach
their stretch limit.</font>
<center>
<p><img SRC="java1036d.gif" height=65 width=292>
<br><b><font face="Arial Narrow"><font size=-1>Figure 4.&nbsp; A screen
shot using only combination spacers.</font></font></b></center>

<p><b><font color="#FF0000">A fixed-width spacer</font></b>
<p>The first boldface statement in <font color="#000000">Listing 4</font>
creates and inserts a spacer with a minimum width of three pixels.&nbsp;
<i>(Because the specified maximum width is less than the minimum width,
the method automatically sets the maximum width equal to the minimum width.)</i>
<p>This produces a fixed-width spacer three pixels wide.
<p><b><font color="#FF0000">The remaining spacers</font></b>
<p>The last boldface statement in <font color="#000000">Listing 4</font>
creates and inserts a spacer with a minimum width of six pixels and a maximum
width of 24 pixels immediately to the left of <b>b3</b> (see Figure 4).
<p>The boldface statements in between provide combination spacers on each
side of <b>b2</b>.
<p>Again, this code fragment came from a different program named <b>Swing21</b>,
and produced the screen shot shown in Figure 4.&nbsp; <i>(See the <font color="#000000">previous
lesson entitled</font></i><font color="#000000"> </font><i>Swing from A
to Z:&nbsp; Demystifying Glue and Struts, Part 2, for a discussion of the
purpose of this approach.)</i>
<p><b><font color="#FF0000">Now back to the main thread</font></b>
<p>The code in <font color="#000000">Listing 5</font> sets the look and
feel to <i>Windows</i>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");

&nbsp;&nbsp;&nbsp; //Set the look and feel.
&nbsp;&nbsp;&nbsp; // First establish the string constants
&nbsp;&nbsp;&nbsp; String metal =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.metal." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MetalLookAndFeel";
&nbsp;&nbsp;&nbsp; String motif =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.motif." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MotifLookAndFeel";
&nbsp;&nbsp;&nbsp; String windows =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.windows." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "WindowsLookAndFeel";
&nbsp;&nbsp;&nbsp; //Set the Look and Feel by enabling one&nbsp;
&nbsp;&nbsp;&nbsp; // of these
<b>&nbsp;&nbsp;&nbsp; //String plafClassName = motif;
&nbsp;&nbsp;&nbsp; //String plafClassName = metal;
&nbsp;&nbsp;&nbsp; <font color="#000000">String plafClassName = windows;
</font></b>&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIManager.setLookAndFeel(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plafClassName);
&nbsp;&nbsp;&nbsp; }catch(Exception ex){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(ex);}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Cause the L&amp;F to become visible.
&nbsp;&nbsp;&nbsp; SwingUtilities.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; updateComponentTreeUI(this);

<b>Listing 5</b></font></font></pre>
</td>
</tr>
</table>

<p>I have written numerous earlier tutorial lessons dealing with setting
the look and feel, so I won't go into detail here.&nbsp; You will find
those lessons at <a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan.com</a>,
with links to the lessons in the Table of Contents on <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">my
web site</a>.
<p><b><font color="#FF0000">You can experiment with the look and feel</font></b>
<p>I provided enough information in the three boldface statements in <font color="#000000">Listing
5</font> to allow you to experiment with different <b>lookAndFeel</b> property
values.
<p><b><font color="#FF0000">How to change the look and feel</font></b>
<p>All that you need to do to see a different look and feel is to cause
any one of the three boldface statements to be enabled, and to cause the
other two boldface statements to be disabled by the comment indicators.
Then recompile and run the program.
<p><font color="#000000">The remaining code in the program is too straightforward
to merit discussion here.&nbsp; You can view that code in Listing 6.</font>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
So, there you have it, more than you probably ever wanted to know about
the <b>Box</b> container, the <b>BoxLayout</b> manager, the <b>Box.Filler</b>
class, glue, struts, and custom alternatives to glue and struts.
<p>That wraps up my miniseries on this set of topics related to <b>BoxLayout</b>.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
One of the major strengths of Java is the ability to use introspection
for the analysis of components at runtime.
<p>The next lesson in the <i>Swing from A to Z<b> </b></i>thread will be
the first lesson in a new miniseries on the use of introspection to analyze
Swing components.&nbsp; This series will develop a very useful program
that you can use to supplement the Java documentation package.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <font color="#000000">Listing
6</font>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing20.java
Rev 8/14/00
Copyright 2000, R.G.Baldwin

Illustrates use of invisible fixed-width and
elastic spacers to control the separation&nbsp;
between components.&nbsp; In order to see the&nbsp;
effect of the elastic spacers, you must
manually resize the JFrame object to make&nbsp;
it larger and smaller.

Also demonstrates that BoxLayout can be used
with containers other than Box.

Tested using JDK 1.2.2 under WinNT 4.0 WkStn
**********************************/

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;

class Swing20 extends JFrame{

&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Swing20();
&nbsp; }//end main()
&nbsp; //---------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following three methods create and
&nbsp; // return invisible spacer objects.
&nbsp;&nbsp;
&nbsp; //Creates and returns a fixed spacer
&nbsp; Box.Filler myFixedSpacer(int x, int y){
&nbsp;&nbsp;&nbsp; return new Box.Filler(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y));
&nbsp; }//end myFixedSpacer()

&nbsp; //Creates and returns an elastic spacer
&nbsp; Box.Filler myElasticSpacer(int x, int y){
&nbsp;&nbsp;&nbsp; return new Box.Filler(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(0,0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(0,0),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(x,y));
&nbsp; }//end myElasticSpacer()

&nbsp; //Creates and returns an elastic spacer.
&nbsp; // Another approach.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; JLabel combinationSpacer(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int xmin,int ymin,int xmax,int ymax){
&nbsp;&nbsp;&nbsp; //xmax should never be less than xmin
&nbsp;&nbsp;&nbsp; //ymax should never be less than ymin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; int tempX = (xmax &lt; xmin)?xmin:xmax;
&nbsp;&nbsp;&nbsp; int tempY = (ymax &lt; ymin)?ymin:ymax;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel temp = new JLabel();
&nbsp;&nbsp;&nbsp; temp.setMinimumSize(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(xmin,ymin));
&nbsp;&nbsp;&nbsp; temp.setPreferredSize(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(xmin,ymin));
&nbsp;&nbsp;&nbsp; temp.setMaximumSize(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dimension(tempX,tempY));
&nbsp;&nbsp;&nbsp; return temp;
&nbsp; }//end combinationSpacer
&nbsp;&nbsp;
&nbsp; Swing20(){//constructor

&nbsp;&nbsp;&nbsp; //Just for fun, instantiate a new
&nbsp;&nbsp;&nbsp; // JButton object and use it as a
&nbsp;&nbsp;&nbsp; // container.&nbsp; Set its layout manager
&nbsp;&nbsp;&nbsp; // to BoxLayout.
&nbsp;&nbsp;&nbsp; JButton aBut = new JButton();
&nbsp;&nbsp;&nbsp; aBut.setLayout(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BoxLayout(aBut,BoxLayout.X_AXIS));

&nbsp;&nbsp;&nbsp; //Add the JButton to the contentPane
&nbsp;&nbsp;&nbsp; getContentPane().add(aBut);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three JButton objects,
&nbsp;&nbsp;&nbsp; // make them green.
&nbsp;&nbsp;&nbsp; JButton but1 = new JButton("b1");
&nbsp;&nbsp;&nbsp; but1.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but2 = new JButton("b2");
&nbsp;&nbsp;&nbsp; but2.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton but3 = new JButton("b3");
&nbsp;&nbsp;&nbsp; but3.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two JLabel objects.Color&nbsp;
&nbsp;&nbsp;&nbsp; // them yellow.
&nbsp;&nbsp;&nbsp; JLabel lab1 = new JLabel("L1");
&nbsp;&nbsp;&nbsp; lab1.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab1.setOpaque(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JLabel lab2 = new JLabel("L2");
&nbsp;&nbsp;&nbsp; lab2.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; lab2.setOpaque(true);

&nbsp;&nbsp;&nbsp; //Add the buttons and the labels to the
&nbsp;&nbsp;&nbsp; // Box.&nbsp; Insert spacers between them.
&nbsp;&nbsp;&nbsp; aBut.add(but1);
&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(3,0));
&nbsp;&nbsp;&nbsp; aBut.add(lab1);
&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(4,0));
&nbsp;&nbsp;&nbsp; aBut.add(myElasticSpacer(6,0));
&nbsp;&nbsp;&nbsp; aBut.add(but2);
&nbsp;&nbsp;&nbsp; aBut.add(myElasticSpacer(12,0));
&nbsp;&nbsp;&nbsp; aBut.add(myFixedSpacer(5,0));
&nbsp;&nbsp;&nbsp; aBut.add(lab2);
&nbsp;&nbsp;&nbsp; aBut.add(combinationSpacer(6,0,24,0));
&nbsp;&nbsp;&nbsp; aBut.add(but3);

&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");

&nbsp;&nbsp;&nbsp; //Set the look and feel.
&nbsp;&nbsp;&nbsp; // First establish the string constants
&nbsp;&nbsp;&nbsp; String metal =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.metal." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MetalLookAndFeel";
&nbsp;&nbsp;&nbsp; String motif =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.motif." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "MotifLookAndFeel";
&nbsp;&nbsp;&nbsp; String windows =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.java.swing.plaf.windows." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "WindowsLookAndFeel";
&nbsp;&nbsp;&nbsp; //Set the Look and Feel by enabling one&nbsp;
&nbsp;&nbsp;&nbsp; // of these
&nbsp;&nbsp;&nbsp; //String plafClassName = motif;
&nbsp;&nbsp;&nbsp; //String plafClassName = metal;
&nbsp;&nbsp;&nbsp; String plafClassName = windows;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; UIManager.setLookAndFeel(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; plafClassName);
&nbsp;&nbsp;&nbsp; }catch(Exception ex){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(ex);}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Cause the L&amp;F to become visible.
&nbsp;&nbsp;&nbsp; SwingUtilities.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; updateComponentTreeUI(this);

&nbsp;&nbsp;&nbsp; //Pack the JFrame down around the&nbsp;
&nbsp;&nbsp;&nbsp; // components
&nbsp;&nbsp;&nbsp; pack();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
&nbsp;&nbsp;
}//end class Swing20

<b>Listing 6</b></font></font></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
