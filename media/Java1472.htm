<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#dd0000" vlink="#0000ff" alink="#ff0000" lang="EN-US">
<h2> Introduction to the Java Robot Class</h2>
<i>Baldwin shows you how to write a Java program that will
programmatically invoke mouse clicks on non-Java programs, and
programmatically enter text
into non-Java programs.</i>
<p><b><font color="#ff0000">Note: &nbsp;The original published version
of
this lesson had a bug in the program named Robot05. &nbsp;In
particular,
the reference variable named keyInput[] should have been declared
static.</font><br>
</b></p>
<p><b>Published:</b>&nbsp; May 20, 2003<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 1472</p>
<ul>
  <li> <a href="#Preface">Preface</a></li>
  <li> <a href="#Preview">Preview</a></li>
  <li> <a href="#Discussion%20and%20Sample%20Programs">Discussion and
Sample
Code</a></li>
  <li> <a href="#Run%20the%20program">Run the Program</a></li>
  <li> <a href="#Summary">Summary</a></li>
  <li> <a href="#Whats%20Next">What's Next?</a></li>
  <li> <a href="#Complete%20Program%20Listings">Complete Program
Listings</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p> Programming in Java doesn't have to be dull and boring.&nbsp; In
fact,
it's possible to have a lot of fun while programming in Java.&nbsp;
This
is the first lesson in a miniseries that show you how to use the <b>Robot</b>
class to write programs that are both fun and useful.</p>
<p> <b><font color="#ff0000">New features in SDK Version 1.3</font></b></p>
<p>One of the new features that was released in SDK Version 1.3 was the
<b>Robot</b>
class.&nbsp; According to Sun, </p>
<blockquote>
  <p><i>"This class is used to generate native system input events for
the purposes of test automation, self-running demos, and other
applications
where control of the mouse and keyboard is needed. The primary purpose
of
Robot is to facilitate automated testing of Java platform
implementations."</i></p>
</blockquote>
<p><b><font color="#ff0000">Different from the system event queue</font></b></p>
<p>I have published several tutorial lessons that show you how to
create
events and post them to the system event queue.&nbsp; <i>(For example,
see
lesson 104 at <a href="http://www.dickbaldwin.com/tocmed.htm">
http://www.dickbaldwin.com/tocmed.htm</a>.)</i>&nbsp;
However, it is important to note that using a <b>Robot</b> object to
fire
events is significantly different from posting events to the system
event
queue.</p>
<p>Here is how Sun compares the <b>Robot</b> class and the system
event queue.</p>
<blockquote>
  <p><i>"Using the class to generate input events differs from posting
events
to the AWT event queue or AWT components in that the events are
generated
in the platform's native input queue. For example, <b>Robot.mouseMove</b>
will actually move the mouse cursor instead of just generating mouse
move
events." </i></p>
</blockquote>
<p><font color="#ff0000"><b>Potential problem areas</b></font></p>
<p>Basically, a <b>Robot</b> object makes it possible for your program
to temporarily take over control of the mouse and the keyboard.&nbsp;
However,
this may not be possible on all operating systems.&nbsp; For example,
Sun
has this to say.</p>
<blockquote>
  <p><i>"Note that some platforms require special privileges or
extensions
to access low-level input control. If the current platform
configuration
does not allow input control, an <b>AWTException</b> will be thrown
when
trying to construct Robot objects."</i></p>
</blockquote>
<p>Sun goes on to provide some examples of cases where an <b>AWTException</b>
might be thrown.</p>
<p><font color="#ff0000"><b>A word of caution</b></font></p>
<p>A runaway Java <b>Robot</b> object has the ability to wrest control
away
from the human user, so you need to be a little careful.&nbsp; For
example,
if you allow your Java <b>Robot</b> program to go into an infinite
loop,
making mouse moves, clicking the mouse, and entering keystrokes, you
may
find that the only practical way to regain control of your computer is
to
either turn off the power or press the reset button to force your
computer
to restart.</p>
<p><font color="#ff0000"><b>Three lessons in the miniseries</b></font></p>
<p>According to my current planning, this miniseries on the <b>Robot</b>
class will consist of three lessons.&nbsp; This first lesson will
demonstrate
the low-level nature of the behavior of an object of the <b>Robot</b>
class.&nbsp; This will be accomplished by showing you how to create a
Java robot that
can manipulate other non-Java programs, such as Windows Notepad and
Internet Explorer.</p>
<p>The second lesson in the miniseries will show you how to use a robot
to perform automatic testing on a Java GUI.</p>
<p>The third lesson will show you how to write an animated robot
program
to provide a visual demonstration of the use of a Java GUI.</p>
<p> <b><font color="#ff0000">Viewing tip</font></b> </p>
<p>You may find it useful to open another copy of this lesson in a
separate browser window.&nbsp; That will make it easier for you to
scroll back and forth among the different listings and figures while
you are reading about them. </p>
<p><b><font color="#ff0000">Supplementary material</font></b> </p>
<p>I recommend that you also study the other lessons in my extensive
collection of online Java tutorials.&nbsp; You will find those lessons
published at <a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However,
as of the date of this writing, Gamelan doesn't maintain a consolidated
index
of my Java tutorial lessons, and sometimes they are difficult to locate
there.&nbsp;
You will find a consolidated index at <font color="#000000"> <a
 href="http://www.DickBaldwin.com">www.DickBaldwin.com</a>.</font> </p>
<h2 align="center"><font color="#000000"> <a name="Preview">Preview</a></font></h2>
<p>I will discuss two sample programs named <b>Robot04</b> and <b>Robot05</b>
in this lesson.&nbsp; The sample programs will illustrate:</p>
<ul>
  <li>How to start a non-Java program running in a separate process.</li>
  <li>How to programmatically invoke mouse clicks on non-Java programs,
with the result being the same as that, which would be experienced if
a human user were to produce those same mouse clicks.</li>
  <li>How to programmatically enter text into a non-Java program that
is running and ready to accept keyboard input.</li>
</ul>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Code</font></h2>
</center>
<p> I will begin with a discussion of the program named <b>Robot04</b>,
followed
by a discussion of the program named <b>Robot05</b>.</p>
<p> <font color="#ff0000"><b>Description of the program named Robot04</b></font></p>
<p> The <b>Robot</b> class makes it possible for your Java program to
temporarily
take control of the mouse and keyboard input functionality at the
operating-system
level.</p>
<blockquote>
  <p> <i>(In fact, if you accidentally allow your program to take
control
of the mouse and the keyboard in an infinite loop, the program can be
very
difficult to terminate.)</i></p>
</blockquote>
<p>This program illustrates the low-level nature of an object of the <b>Robot</b>
class.&nbsp; In this program, a <b>Robot</b> object is designed to
click
the <b>Close</b> button on a non-Java program <i>(such as Internet
Explorer)
</i>causing that program to terminate.</p>
<p> <font color="#ff0000"><b>Should work in Windows 1024 by 768 mode</b></font></p>
<p>This program should run successfully without modification if you are
running Windows with a screen resolution of 1024 by 768 pixels.&nbsp;
If
you are running under a different operating system, or a different
screen
resolution, you may need to modify the coordinate values in the program
to
cause this program to behave as described.&nbsp; <i>(A comment is
provided
in the code to show you where to make the modification.)</i></p>
<p> <font color="#ff0000"><b>Open Internet Explorer in full-screen mode</b></font></p>
<p>To see the intended behavior of this program, start Internet
Explorer, <i>(or some other program with a <b>Close</b> button in its
upper right corner)</i>
and maximize it to full-screen mode.&nbsp; This should cause the <b>Close</b>
button with the X for that program to appear in the upper right-hand
corner
of the screen.</p>
<p> <font color="#ff0000"><b>This program will click the Close button</b></font></p>
<p> Then run this program at the command prompt.&nbsp; There is no GUI
for
this program.&nbsp; The program simply starts running, performs the
programmed
action, and terminates.</p>
<p>If all goes well, this program will use an object of the <b>Robot</b>
class to position the mouse pointer over the <b>Close</b> button
belonging
to the other program.&nbsp; Then this program will use the<b> Robot </b>object
to click that button.&nbsp; The result of clicking the button will be
the same as if a human user had clicked the <b>Close</b> button on
that program.</p>
<blockquote>
  <p> <i>(Frequently, the result of clicking the <b>Close</b> button
on
a program's main GUI is to terminate the program.&nbsp; That is the
case
with Internet Explorer.&nbsp; However, other programs, such as Windows
Notepad, may bring up a dialog asking the user to confirm something
such
as saving a file.&nbsp; This program is not designed to deal with such
a dialog.)</i></p>
</blockquote>
<p><font color="#ff0000"><b>If things don't work as described ...</b></font></p>
<p>If you don't get this result, try adjusting the coordinate values in
the
program to make certain that the mouse pointer is automatically
positioned
on the <b>Close</b> button before the mouse click is executed.</p>
<blockquote>
  <p> <i>(Delays are inserted in the behavior of this program so that
you
can view the process in slow motion.)</i></p>
</blockquote>
<p> <font color="#ff0000"><b>Requires version 1.3 or later</b></font></p>
<p>The <b>Robot</b> class was first released in SDK Version 1.3, so
you
will need to be running Version 1.3 or later.&nbsp; This program was
tested
on my machine using SDK 1.4.1 under WinXP</p>
<p><font color="#ff0000"><b>The main method for the program named
Robot04</b></font></p>
<p>I will discuss this program in fragments.&nbsp; A complete listing
of
the program is shown in Listing 10 near the end of the lesson.</p>
<p>The program begins in Listing 1 where the <b>main</b> method starts
by
instantiating a new object of the <b>Robot</b> class.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>public class Robot04{<br>  public static void main(String[] args)<br>                             throws AWTException{<br>    Robot robot = new <b>Robot</b>();<br><br><b><font
 face="Courier New,Courier">Listing 1</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Mouse and keyboard input under program
control</b></font></p>
<p>As mentioned earlier, an object of the <b>Robot</b> class makes it
possible for your program to temporarily gain control of the mouse and
keyboard.</p>
<blockquote>
  <p><i>(The <b>Robot</b> class also provides some other interesting
features, such as the ability to create an image containing pixels read
from the screen, which are not discussed in this lesson.&nbsp; See
Sun's documentation for
a description of those features.)</i></p>
</blockquote>
<p><font color="#ff0000"><b>Several instance methods are available</b></font></p>
<p>The <b>Robot</b> class provides several instance methods, <i>(including
the following),</i> by which your program can produce mouse and
keyboard
input, just as though that input were being provided by a human user.</p>
<ul>
  <li><b>mouseMove</b> - Moves the mouse pointer to a set of specified
absolute screen coordinates given in pixels.</li>
  <li><b>mousePress</b> - Presses one of the buttons on the mouse.</li>
  <li><b>mouseRelease</b> - Releases one of the buttons on the mouse.</li>
  <li><b>keyPress</b> - Presses a specified key on the keyboard.</li>
  <li><b>keyRelease</b> - Releases specified key on the keyboard.</li>
</ul>
<p><font color="#ff0000"><b>Move the mouse pointer</b></font></p>
<p>The code in Listing 2 causes the mouse pointer to move to a location
1005 pixels to the right and 10 pixels down from the upper left-hand
corner
of the screen.</p>
<blockquote>
  <p><i>(If you watch carefully while the program is running, you will
see
the mouse pointer move to this location.</i></p>
  <p><i>If your program attempts to move the mouse pointer to a
location
specified by negative coordinates, it will move to the 0,0 location in
the upper-left corner of the screen.&nbsp; If your program moves the
mouse
pointer off the screen with positive coordinates, the pointer will
simply
disappear.)</i></p>
</blockquote>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    robot.<b>mouseMove</b>(1005,10);<br><br><b><font
 face="Courier New,Courier">Listing 2</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#ff0000"><b>Should point to the Close button of
Internet Explorer</b></font></p>
<p>For a screen resolution of 1024 by 768 with a Windows look and feel,
the
coordinates 1005, 10 should cause the mouse pointer to point to the <b>Close</b>
button on a full-screen version of Internet Explorer.&nbsp; If this is
not
the case on your system, you may need to modify these coordinate values
to cause the mouse to point to the <b>Close</b> button.</p>
<p><font color="#ff0000"><b>Insert a delay</b></font></p>
<p>The code in Listing 3 inserts a delay in the process by causing the
thread
to sleep for two seconds <i>(2000 milliseconds).</i>&nbsp; This should
make
it possible for you to view the pointer in its new location before
anything
else happens.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    robot.<b>delay</b>(2000);<br><br><b><font
 face="Courier New,Courier">Listing 3</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#ff0000"><b>What about InterruptedExceptions?</b></font></p>
<p>Sometimes when you put a thread to sleep, you may want to be able to
catch
<b> InterruptedExceptions</b> that may occur on that thread.&nbsp; If
you
have that need, you should use the <b>sleep</b> method of the <b>Thread</b>
class instead of the <b>delay</b> method of the <b>Robot</b> class.</p>
<p><font color="#ff0000"><b>Press the left mouse button and delay again</b></font></p>
<p>The code in Listing 4 invokes the <b>mousePress</b> method on the <b>Robot</b>
object to execute a press of the left mouse button at the current
position
of the mouse pointer.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    robot.<b>mousePress</b>(InputEvent.BUTTON1_MASK);<br>    robot.delay(2000);<br><br><b><font
 face="Courier New,Courier">Listing 4</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p dir="ltr">The <b>mousePress</b> method accepts an incoming <b>int</b>
parameter that specifies which mouse button is pressed.&nbsp; Suitable
values for specifying the left, center, and right mouse buttons are
found as constants in the <b>InputEvent</b> class as shown below:</p>
<ul>
  <li> InputEvent.BUTTON1_MASK </li>
  <li> InputEvent.BUTTON2_MASK </li>
  <li> InputEvent.BUTTON3_MASK </li>
</ul>
<blockquote>
  <p><i>(Note that the <b>Robot</b> class was updated in SDK V1.4 to
support
a mouse wheel.&nbsp; According to Sun, the <b>mouseWheel</b> method of
the <b>Robot</b> class "Rotates the scroll wheel on wheel-equipped
mice."&nbsp; That capability is not illustrated in this lesson.)</i></p>
</blockquote>
<p><font color="#ff0000"><b>Does anything interesting happen?</b></font></p>
<p>Whether or not something interesting happens as a result of invoking
the
<b> mousePress</b> method in Listing 4 depends on what the mouse
pointer
is pointing to when the method is invoked.&nbsp; The same thing will
happen
that would happen if a human user were to press the left mouse button
when
the mouse pointer is pointing to the same location on the screen.</p>
<p>If the pointer happens to be pointing at a <i>sensitive</i>
location on
the screen, something interesting will happen.&nbsp; If the mouse
pointer
happens to be pointing to a <i>non-sensitive</i> location on the
screen,
the mouse press will simply be ignored and nothing interesting will
happen.</p>
<blockquote>
  <p><i>(As an interesting exercise, try modifying this program to
invoke
a right-button click (BUTTON3_MASK) on a blank area of a Windows
screen.&nbsp; This should cause a typical Windows popup menu to appear.)</i></p>
</blockquote>
<p><font color="#ff0000"><b>Another delay</b></font></p>
<p>The code in Listing 4 includes another two-second delay.&nbsp; If
the
mouse pointer is pointing to the <b>Close</b> button when the <b>mousePress</b>
method is invoked, you should be able to see the <b>Close</b> button
in
its <i> depressed</i> state for two seconds.&nbsp; </p>
<p><font color="#ff0000"><b>Does not terminate Internet Explorer</b></font></p>
<p> Simply pressing the left mouse button on the <b>Close</b> button
on
Internet Explorer won't terminate the program.&nbsp; A mouse press
followed
by a mouse release is required to terminate the program.</p>
<p><font color="#ff0000"><b>Release the left mouse button</b></font></p>
<p>The code in Listing 5 invokes the <b>mouseRelease</b> method
causing
the program to behave as if a human user has released the left mouse
button
<i>(after first pressing that button)</i>.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    robot.<b>mouseRelease</b>(InputEvent.BUTTON1_MASK);<br>  }//end main<br><br>}//end class Robot04<br><br><b><font
 face="Courier New,Courier">Listing 5</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Assuming that the mouse pointer is pointing to the <b>Close</b>
button
on Internet Explorer, the code in Listing 5 should cause the <b>Close</b>
button to pop back out and should cause the Internet Explorer program
to
terminate.&nbsp; <i>(However, it will probably happen so fast that you
probably
won't see the button pop back out.)</i></p>
<p>The code in Listing 5 also ends the <b>main</b> method, ends the
class definition, and thus ends the program.</p>
<p><font color="#ff0000"><b>Recap for the program named Robot04</b></font></p>
<p>The Java program named <b>Robot04</b> causes the mouse to move to a
location that is believed to be the location of the <b>Close</b>
button for a running instance of Internet Explorer.</p>
<blockquote>
  <p><i>(In the next lesson, I will show you how to determine the
location
of components in a Java GUI with more certainty.)</i></p>
</blockquote>
<p>Having moved the mouse pointer to that location, <b>Robot04</b>
clicks
the left mouse button in an attempt to cause the running instance of
Internet Explorer to terminate.&nbsp; If the location of the mouse
pointer was correct, Internet Explorer will terminate.</p>
<p>Now let's move along to another program that demonstrates use of the
keyboard by a <b>Robot</b> object.</p>
<p><font color="#ff0000"><b>Description of the program named Robot05</b></font></p>
<p>In addition to creating low-level mouse inputs, an object of the <b>Robot
</b>class can create low-level keyboard inputs, just as though a human
user were pressing the keys on the keyboard.</p>
<p><font color="#ff0000"><b>Designed to work specifically with Windows
OS</b></font></p>
<p>As written, this program will run correctly only under the Windows
operating
system.&nbsp; This is because it specifically makes use of the Windows
program
named Notepad.</p>
<blockquote>
  <p><i>(However, the program could easily be modified to use a similar
editor
program under a different operating system.)</i></p>
</blockquote>
<p> <font color="#ff0000"><b>Low-level keyboard input</b></font></p>
<p>This program illustrates the low-level nature of the behavior of an
object
of the <b>Robot</b> class by:</p>
<ul>
  <li>Starting the Windows Notepad editor program in a separate process.</li>
  <li>Using a <b>Robot</b> object to enter text into the Notepad
document.</li>
</ul>
<p><font color="#ff0000"><b>Running the program</b></font></p>
<p>This Java program does not have a GUI.&nbsp; To see the intended
behavior
of this program, simply start the program running from the command line
under the Windows operating system.</p>
<p> <font color="#ff0000"><b>Notepad program will start</b></font></p>
<p>When this Java program starts running, it causes the Windows Notepad
program to start running in a separate process with a new empty
document.</p>
<p> <font color="#ff0000"><b>Enter text into the Notepad document and
terminate</b></font></p>
<p>Then this program uses a <b>Robot</b> object to enter the word <i>Hello</i>
into the Notepad document.&nbsp; After that, the Java program
terminates.</p>
<p>When the Java program terminates, the Notepad program is still
running,
and can be saved to a file, or terminated by the user.</p>
<p> <font color="#ff0000"><b>Requires SDK V1.3 or later</b></font></p>
<p>As mentioned earlier, the Robot class was first released in SDK
Version
1.3.&nbsp; Therefore, as was the case in the previous program, you will
need to be running Version 1.3 or later to successfully compile and
execute
this program.&nbsp; This program was tested on my machine using SDK
1.4.1
under WinXP</p>
<p><font color="#ff0000"><b>Will discuss in fragments</b></font></p>
<p>As usual, I will discuss this program in fragments.&nbsp; You can
view
a complete listing of <b>Robot05</b> in Listing 11 near the end of the
lesson.</p>
<p> <font color="#ff0000"><b>Need some keycode data</b></font></p>
<p>The purpose of this program is to demonstrate the ability of a Java
program to enter character data into a non-Java program.&nbsp;
Therefore,
we will need some keycode data.</p>
<p>The code in Listing 6 creates an array object containing the virtual
keycodes for the word <i><b>hello</b></i>.&nbsp; This data will be
used
later with the <b> Robot.keyPress</b> and <b>Robot.keyRelease </b>methods,
and the <b> KeyEvent.VK_SHIFT</b> virtual keycode, to mimic the
behavior
of a human user entering the characters <i><b>Hello</b></i> into a
Notepad
document.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>public class Robot05{<br>  //Create an array of keycode data<br>  static int keyInput[] = {<br>      KeyEvent.VK_H,<br>      KeyEvent.VK_E,<br>      KeyEvent.VK_L,<br>      KeyEvent.VK_L,<br>      KeyEvent.VK_O<br>  };//end keyInput array<br><br><b><font
 face="Courier New,Courier">Listing 6</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<span class="body">
<p><font color="#ff0000"><b>Virtual keycodes are used</b></font></p>
<p>In one of the technical documents on its site, Sun has this to say
about specifying keycodes for use with a <b>Robot</b> object:</p>
<blockquote>
  <p><i>"Notice that virtual keycodes are used to enter keystrokes;
keycodes are not the same as Java characters. KeyEvent.VK_A corresponds
to pressing the unshifted 'A' key on a keyboard. If you specify 'A' or
'a' instead
of KeyEvent.VK_A, you get unexpected results."</i></p>
</blockquote>
</span> </p>
<p><font color="#ff0000"><b>Start Notepad running</b></font></p>
<p>The <b>main</b> method begins in Listing 7.&nbsp; The code in
Listing
7 starts the Notepad program running in a separate process.&nbsp; This
should cause the Notepad program to start running and to become the
active window,
capable of accepting input from the keyboard.</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  public static void main(String[] args)<br>                 throws AWTException,IOException{<br><br>    Runtime.getRuntime().<b>exec</b>("notepad");<br><br><b><font
 face="Courier New,Courier">Listing 7</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p><font color="#ff0000"><b>Runtime is not affiliated with the Robot
class</b></font></p>
<p>Note that the <b>exec</b> method used in Listing 7 has nothing to
do with
the <b>Robot</b> class.&nbsp; The <b>Runtime</b> class and its
methods have
been available since JDK1.0.</p>
<p>Here is what Sun has to say about the <b>Runtime</b> class.</p>
<blockquote>
  <p><i>"Every Java application has a single instance of class <b>Runtime</b>
that allows the application to interface with the environment in which
the application is running. The current runtime can be obtained from
the <b>getRuntime</b>
method."</i></p>
</blockquote>
<p><font color="#ff0000"><b>Methods of the Runtime class</b></font></p>
<p>The <b>Runtime</b> class provides about twenty instance methods
that allow
you do unrelated things such as:</p>
<ul>
  <li>Determine the amount of free memory in the Java Virtual Machine.</li>
  <li>Run the garbage collector.</li>
  <li>Forcibly terminate the currently running Java virtual machine.</li>
  <li>Run the finalization methods of any objects pending finalization.</li>
</ul>
<p><font color="#ff0000"><b>The exec method of the Runtime class</b></font></p>
<p>In addition, the <b>exec</b> method of the <b>Runtime</b> class
makes
it possible to <i>"execute a specified string as a command in a
separate
process."</i></p>
<p>The code in Listing 7 executes the string <i>"notepad"</i> as a
command
in a separate process.&nbsp; This, in turn, causes the Windows program
named
Notepad to start running and to become the active window.</p>
<p><font color="#ff0000"><b>Get a Robot object</b></font></p>
<p>The code in Listing 8 gets and saves a reference to a new <b>Robot</b>
object, which will be used to enter text characters into the Notepad
edit window.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    Robot robot = <b>new Robot()</b>;<br><br><b><font
 face="Courier New,Courier">Listing 8</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Enter the characters into the Notepad edit
window</b></font></p>
<p>The code in Listing 9 extracts the keycodes previously stored in the
array and invokes the <b>keyPress</b> method to mimic the action of a
human typist.&nbsp; This causes the characters represented by those
keycodes
to be entered into the Notepad editor.<br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    robot.keyPress(KeyEvent.VK_SHIFT);<br>    for (int cnt2 = 0;<br>                 cnt2 &lt; keyInput.length; cnt2++){<br>      if(cnt2 &gt; 0){<br>             robot.keyRelease(KeyEvent.VK_SHIFT);<br>      }//end if<br>      robot.keyPress(keyInput[cnt2]);<br>      //Insert a one-half second delay between<br>      // characters.<br>      robot.delay(500);<br>    }//end for loop<br><br>  }//main<br>}//end class Robot05<br><br><b><font
 face="Courier New,Courier">Listing 9</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Note upper and lower case characters</b></font></p>
<p>Note the combined use of the <b>keyPress</b> and <b>keyRelease</b>
methods
along with <b>KeyEvent.VK_SHIFT</b> virtual keycode to mimic the user
holding
down the Shift key for entry of the first character, <b>H</b>.</p>
<p><font color="#ff0000"><b>A one-half second delay</b></font></p>
<p>The code in Listing 9 also inserts a one-half second delay following
the
entry of each character so that you can see them being individually
entered
into the Notepad editor.</p>
<p><font color="#ff0000"><b>End of the program</b></font></p>
<p>The code in Listing 9 also signals the end of the main method and
the
end of the program.</p>
<p>After all of the characters have been entered into the Notepad
editor,
the Java program terminates.</p>
<p><font color="#ff0000"><b>Recap for program Robot05</b></font></p>
<p>The program named <b>Robot05</b> starts a new instance of the
program
named Notepad running in a separate process, and then enters the
characters
<b>Hello</b> into the Notepad document.&nbsp; Then the Java program
terminates,
leaving the Notepad program running.</p>
<center>
<h2> <a name="Run the program"></a>Run the Program</h2>
</center>
<p>I encourage you to copy the code from Listings 10 and 11 into your
text
editor, compile it, and execute it.&nbsp; Experiment with it, making
changes,
and observing the results of your changes. </p>
<p>Remember, however, that you must be running Java V1.3 or later to
compile
and execute these programs, because they make use of Java features that
were
first released in V1.3.&nbsp; <i>(In case you decide to make use of
the <b> mouseWheel</b> method of he <b>Robot</b> class, you must be
running SDK V1.4
or later.)</i></p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I have taught you:</p>
<ul>
  <li>How to start a non-Java program running in a separate process.</li>
  <li>How to programmatically invoke mouse clicks on non-Java programs
with the result being the same as that, which would be experienced if
a human user were to produce those same mouse clicks.</li>
  <li>How to programmatically enter text into a non-Java program that
is running and ready to accept keyboard input.</li>
</ul>
<h2 align="center"><a name="Whats Next">What's Next?</a></h2>
<p>The next lesson in this miniseries will show you how to use a robot
to perform automatic testing on a Java GUI.</p>
<p>The third lesson will show you how to write an animated robot
program
to provide a visual demonstration of the use of a Java GUI.</p>
<center>
<h2> <a name="Complete Program Listings"></a>Complete Program Listings</h2>
</center>
Complete listings of the programs discussed in this lesson are shown in
Listings 10 and 11 below. <br>
&nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File Robot04.java<br>Copyright 2003 R.G.Baldwin<br><br>This program illustrates the low-level nature of<br>the behavior of an object of the Robot class by<br>programming a Robot object to click the Close<br>button of a non-Java program (such as Internet<br>Explorer) and causing that program to terminate.<br><br>This program should work without modification if<br>you are running WinXP with 1024 by 768 screen<br>resolution.  If you are running under a different<br>OS, or a different screen resolution, you may<br>need to modify the coordinate values in the<br>program.<br><br>To see the desired behavior of this program,<br>start Internet Explorer, (or some other program)<br>and maximize it to full-screen mode.  This should<br>cause the Close button with the X for that<br>program to appear in the upper right-hand corner<br>of the screen.<br><br>Then run this program.  If all goes well, this<br>program will use an object of the Robot class<br>to position the mouse pointer over the Close<br>button of the other program and then click that<br>button.  The result will be the standard result<br>of clicking the Close button on that program.<br>Frequently, the standard result of clicking the<br>Close button is to terminate the program.<br><br>If you don't get this result, try adjusting the<br>coordinate values in the program to make certain<br>that the mouse pointer is automatically<br>positioned on the Close button before the mouse<br>click is executed.  Delays are inserted so that<br>you can view the process in slow motion.<br><br>Tested using SDK 1.4.1 under WinXP<br>************************************************/<br><br>import java.awt.*;<br>import java.awt.event.*;<br><br>public class Robot04{<br>  public static void main(String[] args)<br>                             throws AWTException{<br>    Robot robot = new Robot();<br>    //You may need to modify these coordinates if<br>    // they fail to place the mouse pointer on<br>    // the Close button of the non-Java program<br>    // that you are trying to terminate.<br>    robot.mouseMove(1005,10);<br><br>    //Press and then release the left mouse<br>    // button.  The delays are provided so that<br>    // you can view the action.  Watch the upper-<br>    // right corner of the screen when you run<br>    // this program.<br>    robot.delay(2000);<br>    robot.mousePress(InputEvent.BUTTON1_MASK);<br>    robot.delay(2000);<br>    robot.mouseRelease(InputEvent.BUTTON1_MASK);<br>  }//end main<br>  //-------------------------------------------//<br><br>}//end class Robot04<br><br><b><font
 face="Courier New,Courier">Listing 10</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p> &nbsp;</p>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File Robot05.java<br>Copyright 2003 R.G.Baldwin<br><br><span
 style="color: rgb(255, 0, 0); font-weight: bold;">NOTE:  THE ORIGINAL VERSION AS ORIGINALLY</span><br
 style="color: rgb(255, 0, 0); font-weight: bold;"><span
 style="color: rgb(255, 0, 0); font-weight: bold;">PUBLISHED HAD A BUG.  SPECIFICALLY, I FAILED</span><br
 style="color: rgb(255, 0, 0); font-weight: bold;"><span
 style="color: rgb(255, 0, 0); font-weight: bold;">TO DECLARE keyInput[] AS STATIC AND THEREFORE</span><br
 style="color: rgb(255, 0, 0); font-weight: bold;"><span
 style="color: rgb(255, 0, 0); font-weight: bold;">IT CANNOT BE ACCESSED FROM WITHIN main.</span><br><br>Note:  As written, this program will only run<br>correctly under the Windows operating system,<br>because it makes use of the Windows program named<br>Notepad.  However, it could easily be modified to<br>use a similar program under a different operating<br>system.<br><br>This program illustrates the low-level nature of<br>the behavior of an object of the Robot class by:<br><br>1. Starting the Windows Notepad editor program<br>in a separate process.<br>2. Programming a Robot object to enter text into<br>the Notepad document.<br><br>To see the desired behavior of this program,<br>simply start the program running under the Windws<br>operating system.<br><br>When the program starts running, it causes the<br>Windows Notepad program to start running with<br>a new empty document.<br><br>Then this program uses a Robot object to enter<br>the word Hello into the Notepad document, and<br>terminates.<br><br>At this point, the Notepad program is still<br>running, and can be saved to a file, or<br>terminated by the user.<br><br>Tested using SDK 1.4.1 under WinXP<br>************************************************/<br><br>import java.awt.*;<br>import java.awt.event.*;<br>import java.io.IOException;<br><br>public class Robot05{<br>  //Create an array of keycode data<br><span
 style="font-weight: bold; color: rgb(255, 0, 0);">  static int keyInput[] = {</span><br>      KeyEvent.VK_H,<br>      KeyEvent.VK_E,<br>      KeyEvent.VK_L,<br>      KeyEvent.VK_L,<br>      KeyEvent.VK_O<br>  };//end keyInput array<br><br>  public static void main(String[] args)<br>                 throws AWTException,IOException{<br><br>    //Start the Windows Notepad program running<br>    // in a separate process.  It should become<br>    // the active window, capable of accepting<br>    // input from the keyboard.<br>    Runtime.getRuntime().exec("notepad");<br><br>    //Get a Robot object that will be used to<br>    // enter characters into the Notepad document<br>    Robot robot = new Robot();<br><br>    //Enter the keycodes contained in the<br>    // keyInput array into the Notepad document.<br>    // Make the first character upper case and<br>    // the remaining characters lower case.<br>    robot.keyPress(KeyEvent.VK_SHIFT);<br>    for (int cnt2 = 0;<br>                 cnt2 &lt; keyInput.length; cnt2++){<br>      if(cnt2 &gt; 0){<br>             robot.keyRelease(KeyEvent.VK_SHIFT);<br>      }//end if<br>      robot.keyPress(keyInput[cnt2]);<br>      //Insert a one-half second delay between<br>      // characters.<br>      robot.delay(500);<br>    }//end for loop<br>  }//main<br>}//end class Robot05<br><br><b><font
 face="Courier New,Courier">Listing 11</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<hr size="3" width="100%" align="center">
<p>Copyright 2003, Richard G. Baldwin.&nbsp; Reproduction in whole or
in part
in any form or medium without express written permission from Richard
Baldwin
is prohibited. </p>
<h4> <a name="About the author"></a>About the author</h4>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i>
is
a college professor (at Austin Community College in Austin, TX) and
private
consultant whose primary focus is a combination of Java, C#, and XML.
In
addition to the many platform and/or language independent benefits of
Java
and C# applications, he believes that a combination of Java, C#, and
XML
will become the primary driving force in the delivery of structured
information
on the Web.</i>
<p><i>Richard has participated in numerous consulting projects, and he
frequently
provides onsite training at the high-tech companies located in and
around
Austin, Texas.&nbsp; He is the author of Baldwin's Programming <a
 href="http://www.DickBaldwin.com">Tutorials</a>, which has gained a
worldwide
following among experienced and aspiring programmers. He has also
published
articles in JavaPro magazine.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University
and has many years of experience in the application of computer
technology to
real-world problems.</i> </p>
<p><i><a href="mailto:Baldwin@DickBaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- <br>
&nbsp; </p>
<br>
</body>
</html>
