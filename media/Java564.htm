<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Network Programming - Datagram Clients<!--endtitle--></b></h2></center>
Java Programming, Lesson # 564, Revised 04/22/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#echo program">Echo Program</a></li>

<ul><li><a href="#code fragments from the echo program">Code Fragments from the
Echo Program</a></li>

<li><a href="#program listing for the echo program">Program Listing for the
Echo Program</a></li></ul></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
As we have explained in previous lessons, sockets come in three varieties
which are implemented by the Java classes named <b>Socket</b>, <b>DatagramSocket</b>,
and <b>ServerSocket</b>.

<p>This lesson will concentrate on the use of the <b>DatagramSocket</b>
class that is used to implement the <b>User Datagram Protocol</b> (<b>UDP</b>).

<p>Previous lessons in this series have concentrated on the use of the
<b>TCP </b>protocol. <b>TCP </b>is designed to provide reliable communications
between a <i>client </i>and a <i>server</i>.

<p>With <b>TCP</b>, if data packets are lost or damaged in transmission,
corrected packets are transmitted. If the packets arrive in incorrect order,
the order is corrected before the data in those packets is presented to
the application program.

<p>The situation is different with <b>UDP</b>. With <b>UDP</b>, there is
no guarantee that the packets will arrive in the correct order at the destination,
or no guarantee that they will arrive at all.

<p><b>UDP</b> stands for Unreliable Data Protocol.

<p>However, those packets that do arrive should arrive more quickly than
with <b>TCP</b>, and in some cases, speed of arrival is more important
than an absolute guarantee of arrival. For example, the transmission of
real time audio signals might be a case where speed of arrival is more
important than guaranteed arrival. (When you listen to the morning talk
show while driving to work, there is no guarantee that the signals from
the radio station will arrive at the antenna on your car. The usually do,
but not one-hundred percent of the time.)

<p>Two classes are used to implement the <b>UDP </b>protocol in Java:
<ul><li><b>DatagramPacket</b></li>

<li><b>DatagramSocket</b></li></ul><b>UDP </b>programming is different from <b>TCP </b>programming in at least
two respects:
<ul><li>
There is no concept of a ServerSocket for datagrams.</li>

<li>
You must construct your own packets for UDP.</li></ul>
The <b>DatagramSocket </b>class is used by both the <i>client </i>end and
the <i>server </i>end of a datagram communication setup.

<p>The <b>DatagramPacket </b>class is used at both ends to construct or
to take apart packets of data that are sent and received via a <b>DatagramSocket
</b>object.

<p>To send data, you construct a <b>DatagramPacket </b>object and send
it via a <b>DatagramSocket </b>object.

<p>To receive data, you receive a <b>DatagramPacket </b>object from a <b>DatagramSocket
</b>object.

<p>In <b>UDP</b>, all information about the communication such as addressee,
port, and data are contained in the packet.

<p>To send a packet, you simply
<ul><li>
construct a packet containing the required information,</li>

<li>
present it to a <b>DatagramSocket </b>object, and</li>

<li>
invoke the <b>send()</b> method on that object.</li></ul>
To receive a packet, you
<ul><li>
construct an empty packet,</li>

<li>
present it to a <b>DatagramSocket </b>object, and</li>

<li>
invoke the<b> receive()</b> method on the object.</li></ul>
The thread will block on the <b>receive()</b> method until a physical packet
of data is received via the network. That physical packet will then be
used to populate your empty packet (or attempt to do so).

<p>A <b>DatagramSocket </b>listening on a specific port will receive packets
from any client that happens to send a packet to that port.

<p>If the messages being sent by each different clients consists of multiple
packets, the packets that are received may be intermingled between the
various clients and it is the responsibility of the application to sort
them out.
<center><h2><a name="datagrampacket class"></a><font color="#ff0000">DatagramPacket
Class</font></h2></center>
There are two constructors for the <b>DatagramPacket </b>class.

<p>One of the constructors is used when you are going to <u>send</u> the
packet.

<p>The other constructor is used when you expect to <u>receive</u> a packet.

<p>Both constructors require you to provide a byte array along with the
length of the array.

<p>When you construct a packet to receive data, that is all that you provide.
The data that is received will be deposited in your array.

<p>If there is more data in the physical packet that is received than will
fit in your array, the excess will be lost and an <b>IllegalArgumentException
</b>will be thrown. Although you are not required by the compiler to catch
this exception, you should consider doing so.

<p>When you construct a packet to send, you need to put the data to be
sent into the array before invoking the <b>send()</b> method.

<p>In addition to the array and its length, you also need to provide
<ul><li>
an object of type <b>InetAddress </b>specifying the destination address,
and</li>

<li>
the port number at the destination that you expect the recipient to be
listening on.</li></ul>
To reiterate, the address and port are stored in the packet object rather
than being used to construct the socket object as is the case in <b>TCP</b>.

<p>The maximum physical size of a datagram is 65,535 bytes. Some of this
space is consumed by header information, so the data portion of a datagram
is limited to about 65,450 bytes (different books disagree on the exact
figure, so if you need a more accurate figure, look it up in the datagram
specifications).
<center><h3><a name="getting information from a datagram packet"></a><font color="#ff0000">Getting
Information from a Datagram Packet</font></h3></center>
The DatagramPacket class provides four methods by which you can extract
information from an existing packet. The information obtained by each method
pretty well matches the name of the method. However, in some cases, it
is important to know how to interpret that information.
<ul><li>
public InetAddress getAddress()</li>

<li>
public int getPort()</li>

<li>
public byte[] getData()</li>

<li>
public int getLength()</li></ul>
The <b>getAddress() </b>method returns an <b>InetAddress </b>object containing
the address of the remote host.

<p>Determining which computer this address represents depends on how the
datagram was obtained. If the datagram was <u>received</u> from the Internet,
the address represents the computer that sent the datagram.

<p>On the other hand, if the datagram was <u>constructed locally</u>, the
address represents the computer to which it is intended to be sent.

<p>Similarly, the <b>getPort()</b> method returns the port from which the
datagram was sent, or the port to which it is to be sent, depending on
how the datagram was obtained.

<p>The <b>getData()</b> method returns a byte array containing the data
portion of the datagram. How you interpret this array depends on the type
of data involved. The sample programs in this lesson work exclusively with
<b>String </b>data, but that is not a requirement. You can use datagrams
to communicate any kind of data between computers if you can put that data
into a byte array at one end and extract it from a byte array at the other
end.

<p>To repeat a concept that has been expressed in earlier lessons, the
responsibility of the system is limited to moving the bytes between computers.
It is the responsibility of the programmer to assign meaning to those bytes.

<p>The <b>getLength()</b> method returns the number of bytes contained
in the data portion of the datagram.
<center><h2><a name="datagramsocket class"></a><font color="#ff0000">DatagramSocket
Class</font></h2></center>
An object of the <b>DatagramSocket </b>class is used to both send and receive
a datagram. The class has two constructors.

<p>One constructor allows you to specify the port on which the socket will
operate.

<p>The other constructor doesn't specify the port, but allows the system
to pick an available port.

<p>No matter which constructor you use, the port from which the datagram
was sent is placed in the datagram header when it is sent so that it will
be available at the receiving end.

<p>Typically, server software will use the constructor that allows a predefined
port to be specified. If this were not the case, client software would
have no way of knowing which port to address the datagram to.

<p>Client software can use either constructor, but for flexibility purposes,
it might be best to use the constructor that allows the system to select
an available port. The server should then check to determine the actual
port that was used to send the datagram and send the reply to that port.

<p>Other than the ability to specify or not specify a port as described
above, there is no difference in the datagram sockets used by clients and
servers.

<p>To recap, you specify the destination address and port when you construct
the datagram packet.

<p>Then you send the datagram by invoking the<b> send()</b> method on an
existing datagram socket and passing the packet object as a parameter to
the <b>send()</b> method.

<p>When the packet is sent, the address and port number of the source computer
is automatically placed in the header portion of the packet so that they
can be retrieved by the destination computer.

<p>To listen for a datagram, you instantiate a <b>DatagramSocket </b>object
and bind it to a specific port. Then you invoke the <b>receive()</b> method
on that socket.

<p>The<b> receive() </b>method blocks the thread until a datagram is received,
so if you need to do anything else in the meantime, you should invoke the
<b>receive()</b> method on its own thread.

<p>If you are a <i>server</i>, you bind the object to a predefined port
number.

<p>If you are a <i>client </i>listening for a reply from a server, you
listen on the same port that was used to send the initial datagram.

<p>If you sent the datagram on an anonymous port, you can keep the socket
open that was used to send the initial datagram and use that same socket
to listen for the reply.

<p>You can also invoke the <b>getLocalPort()</b> method on the socket before
closing it to determine and save the port number being used. This allows
you to close the original socket and open another socket on the same port
if you have a need to do so.

<p>If you sent the initial datagram on a specified port, you can either
continue to use the same socket to listen for the reply, or you can close
the original socket and get another socket on the same port.

<p>To reply to an incoming datagram, you
<ul><li>
extract the source address and port number from the incoming packet and</li>

<li>
place that information in a new packet that you construct along with the
data to be sent in the reply.</li></ul>
Then you invoke the <b>send()</b> method on an existing <b>DatagramSocket
</b>object and pass the packet object as a parameter. The address and port
number of the sender will be automatically incorporated into the header
of the packet when it is sent.

<p><b>IMPORTANT: TCP </b>and <b>UDP </b>port numbers aren't related.

<p>You can use the same port number for two processes if one communicates
via the <b>TCP </b>protocol and the other communicate via the <b>UDP </b>protocol.

<p>It is common for servers to use the same port number and provide similar
services using both protocols for some standard services (such as echo).
We will see an example of this in a sample program later in this lesson.
<center><h2><a name="echo program"></a><font color="#ff0000">Echo Program</font></h2></center>
This program was written by upgrading the program named Sockets03 to also
include <b>UDP </b>echo testing. Sockets03 was discussed in an earlier
lesson.

<p>This program performs two different echo tests with the same server
by sending a line of text to the standard echo port which is port 7. The
first test is a <b>TCP/IP</b> echo test. The second test is a <b>UDP </b>Datagram
echo test.

<p>You must be logged onto an appropriate network for this program to run
properly. Otherwise, it will throw an exception of type <b>UnknownHostException</b>.

<p>Most of the program is enclosed in a try/catch block to deal with possible
exceptions.

<p>The program begins by instantiating a <b>String </b>object containing
the name of the server that you are using to test the program.

<p>This is followed by the declaration and initialization of an <b>int
</b>variable identifying the standard echo port number. The standard echo
port is number is 7 for <u>both</u> the <b>TCP </b>and <b>UDP </b>echo
port protocols.

<p>Two <b>String </b>objects are instantiated, one to be used for the <b>TCP
</b>echo test, and the other to be used for the <b>UDP </b>echo test.

<p>Then the program does all of those things necessary to conduct the <b>TCP
</b>echo test as discussed in the previous lesson that discussed the program
named Sockets03. If you just started reading at this lesson, you might
want to go back and review that material.

<p>After completing the <b>TCP </b>echo test the program closes the <b>TCP
</b>socket and begins the <b>UDP </b>echo test.

<p>First, the message to be used for the <b>UDP </b>echo test is converted
to a byte array.

<p>An object of type <b>InetAddress </b>is instantiated containing the
address of the server.

<p>A <b>DatagramPacket </b>object is instantiated containing the byte array
along with the address of the server and the number of the echo port on
that server.

<p>A <b>DatagramSocket </b>object is instantiated that will be used to
send the packet to the server. However, with the <b>UDP </b>protocol, there
is no guarantee that the packet will successfully arrive at the server.

<p>The <b>send() </b>method is invoked on the <b>DatagramSocket </b>object,
passing the <b>DatagramPacket </b>object as a parameter. This causes the
local address and port number to be incorporated into the packet and causes
the packet to be sent to the address and port number that were encapsulated
in the <b>DatagramPacket </b>object when it was constructed.

<p>The same <b>DatagramSocket </b>and <b>DatagramPacket </b>object will
be used to receive the packet that is (hopefully) sent back by the server.

<p>A <b>for </b>loop is used to overwrite the data in the packet with the
character <b>x </b>so that it can later be confirmed that the received
data in the packet is new data and is not simply the residue of the message
originally placed in the packet.

<p>The overwritten data in the packet is displayed to confirm that it consists
of a string of character <b>x</b>.

<p>Then the <b>receive()</b> method is invoked on the <b>DatagramSocket
</b>object passing the <b>DatagramPacket </b>object as a parameter. This
causes the thread to block and wait for a packet to be received on the
same port from which the packet was originally sent.

<p>When the physical packet is received from the server, the data in that
physical packet is extracted and used to populate the <b>DatagramPacket
</b>object that was provided as a parameter to the <b>receive()</b> method.

<p>Once the packet is received, the thread is no longer blocked, and program
control moves to a statement that displays the data contained in the <b>DatagramPacket
</b>object. As expected, the data is an echo of the message originally
sent to the echo port on the server.

<p>Then the socket is closed and the program terminates.

<p>This program was tested using JDK 1.1.3 under Win95.

<p>Assuming that you connect to a server that supports both <b>TCP </b>and
<b>UDP </b>echo testing, the output from this program should be:
<table border bgcolor="#00ffff" ><tr><td><pre>This is a TCP echo test
xxxxxxxxxxxxxxxxxxxxxxx
This is a UDP echo test</pre></td></tr></table>

<center><h3><a name="code fragments from the echo program"></a><font color="#ff0000">Code
Fragments from the Echo Program</font></h3></center>
Because this program is simply an upgrade of an earlier program, much of
the code in this program is exactly like the code that we discussed in
an earlier lesson on using the <b>TCP </b>protocol to do echo testing.
We will skip over all of the code that was covered in that lesson. We will
also omit the exception handling code from our discussion. All of this
code is available in the complete program listing that follows later in
this lesson.

<p>The first code fragment shows the beginning of the <b>main()</b> method
along with the declaration and initialization of some important variables.
The names and the initialization values of these variables are self explanatory.
<table border bgcolor="#ffff80" ><tr><td><pre>class Sockets07{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; String <b>server </b>= "www2.austin.cc.tx.us";
&nbsp;&nbsp;&nbsp; int <b>port </b>= 7; //echo port
&nbsp;&nbsp;&nbsp; String <b>msg1 </b>= "This is a TCP echo test";
&nbsp;&nbsp;&nbsp; String <b>msg2 </b>= "This is a UDP echo test";</pre></td></tr></table>
Skipping all of the <b>TCP </b>code brings us to the point in the program
where we will convert our message to a byte array and instantiate an <b>InetAddress
</b>object that identifies the server. We use the <b>getBytes()</b> method
of the <b>String </b>class to convert the message to a byte array.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte[] udpMsg = msg2.getBytes();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InetAddress addr = InetAddress.getByName(server);</pre></td></tr></table>
Next, we instantiate a <b>DatagramPacket </b>object containing the byte
array and its length along with the address and port number of the server.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DatagramPacket packet =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DatagramPacket(udpMsg,udpMsg.length,addr,port);</pre></td></tr></table>
Following this, we instantiate an anonymous <b>DatagramSocket </b>object.
The term anonymous could be confusing here. The object is anonymous because
the port number was not specified. Previously we have talked about anonymous
objects as being objects for which there was not a named reference variable.
That is not the case here.

<p>Then we use that object to send the datagram to the server by invoking
the <b>send()</b> method on the <b>DatagramSocket </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DatagramSocket datagramSocket = new DatagramSocket();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; datagramSocket.send(packet);</pre></td></tr></table>
The next few lines of code are used to overwrite the data in the <b>DatagramPacket
</b>object with the character <b>x </b>for the purposes described above.

<p>This code fragment also illustrates how you can access the data portion
of a <b>DatagramPacket </b>object for other purposes as well.

<p>Following this, we display the overwritten data bytes which simply displays
a string of <b>x </b>characters.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte[] dataArray = packet.getData();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; packet.getLength(); cnt++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataArray[cnt] = 'x';
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(new String(packet.getData()));</pre></td></tr></table>
At this point we assume that there will be a reply from the server so we
invoke the <b>receive()</b> method on the same <b>DatagramSocket </b>object
that was used to send the original message to the server. This causes the
thread to block and wait for the reply.

<p>Although we didn't do so, it is possible to use the <b>setTimeout()</b>
method to specify the length of time that the <b>receive()</b> method will
block and wait. This is to guard against the possibility that a reply may
not be received which would cause the program to be permanently hung.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; datagramSocket.receive(packet);</pre></td></tr></table>
Following this, we display the contents of the data portion of the received
datagram and close the socket.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(new String(packet.getData()));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; datagramSocket.close();</pre></td></tr></table>
We will skip the remaining code in the program that simply handles exceptions
that may have been thrown.
<center><h3><a name="program listing for the echo program"></a><font color="#ff0000">Program
Listing for the Echo Program</font></h3></center>
You may find it helpful to take a look at the following listing of the
program to see the above code fragments in context.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Sockets07.java Copyright 1998, R.G.Baldwin
Revised 01/24/98

Upgraded from Sockets03 to include UDP echo testing.

This program performs two echo tests with a server
by sending a line of text to the echo port: port 7.

The first echo text is a TCP/IP echo test.

The second test is a UDP Datagram echo test.

You must be logged onto an appropriate network for this
program to run properly.&nbsp; Otherwise, it will throw
an exception of type UnknownHostException.

Most of the program is enclosed in a try/catch block to
deal with possible exceptions.

The program begins by instantiating a String object
containing the name of an echo server that you are
using to test the program.

This is followed by the declaration and initialization of
an int variable identifying the standard echo port number.
The standard echo port is number is 7 for both the TCP and
UDP echo port.

Two String objects are instantiated, one to be used for
the TCP echo test, and the other to be used for the UDP
echo test.&nbsp; They are named msg1 and msg2.

Then the program does all of those things necessary to
conduct the TCP echo test as described in the earlier&nbsp;
program named Sockets03.

After completing the TCP echo test the program closes the
TCP socket and begins the UDP echo test.

The message to be used for the UDP echo test is converted
to a byte array.

An object of type InetAddress is instantiated containing
the address of the server.

A DatagramPacket object is instantiated containing the
byte array along with the address of the server and the
number of the echo port on that server.

A DatagramSocket object is instantiated that will
(hopefully) be used to send the packet to the server.

The send() method is invoked on the socket, passing the
packet as a parameter.&nbsp; This causes the packet to be
sent to the address of the server and port number&nbsp;
previously encapsulated in the packet.

The same DatagramSocket and packet will be used to&nbsp;
receive the packet that is (hopefully) sent back by the
server.&nbsp;&nbsp;


The data in the packet is overwritten with the character x
so that it can later be confirmed that the received data
in the packet is new data and is not simply the residue
of the message originally placed in the packet.&nbsp; The
overwritten data in the package is displayed, consisting
simply of a string of character x.

Then the receive() method is invoked on the DatagramSocket
passing the packet as a parameter.&nbsp; This causes the thread
to block and wait for a packet to be received on the
same port from which the packet was originally sent.

When the physical packet is received from the server,
the data in that physical packet is extracted and written
into the data portion of the packet object that was
provided as a parameter to the receive() method.

The thread is no longer blocked, and program control&nbsp;
moves to a statement that displays the data contained in
the packet object.&nbsp; As expected, the data is an echo of&nbsp;
the message originally sent to the echo port on the&nbsp;
server.

Then the socket is closed and the program terminates.

This program was tested using JDK 1.1.3 under Win95.

Assuming that you connect to a server that supports both
TCP and UDP echo testing, the output from this program&nbsp;
should be:
&nbsp;&nbsp;
This is a TCP echo test
xxxxxxxxxxxxxxxxxxxxxxx
This is a UDP echo test
**********************************************************/

import java.net.*;
import java.io.*;
import java.util.*;

class Sockets07{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; String server = "www2.austin.cc.tx.us";
&nbsp;&nbsp;&nbsp; int port = 7; //echo port
&nbsp;&nbsp;&nbsp; String msg1 = "This is a TCP echo test";
&nbsp;&nbsp;&nbsp; String msg2 = "This is a UDP echo test";

&nbsp;&nbsp;&nbsp; //First conduct a TCP echo test&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a socket, connected to the specified server
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // on the specified port.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Socket socket = new Socket(server,port);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get an input stream from the socket
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BufferedReader inputStream =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BufferedReader(new InputStreamReader(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; socket.getInputStream()));

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get&nbsp; an output stream to the socket.&nbsp; Note
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // that this stream will autoflush.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintWriter outputStream =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PrintWriter(new OutputStreamWriter(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; socket.getOutputStream()),true);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Send line of text to the server
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outputStream.println(msg1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get echoed line back from server and display it
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(inputStream.readLine());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Close the TCP socket
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; socket.close();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now conduct a datagram echo test to same port on
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the same server
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Convert the message to a byte array
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte[] udpMsg = msg2.getBytes();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InetAddress addr = InetAddress.getByName(server);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create packet to send to the UDP echo port
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DatagramPacket packet =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DatagramPacket(udpMsg,udpMsg.length,addr,port);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now get a datagram socket to send the message
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; DatagramSocket datagramSocket = new DatagramSocket();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now send the message
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; datagramSocket.send(packet);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now overwrite the msg in the packet to confirm that
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // echo is really received
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; byte[] dataArray = packet.getData();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; packet.getLength(); cnt++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dataArray[cnt] = 'x';
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Display overwritten version
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(new String(packet.getData()));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now receive the echo into the same packet.&nbsp; Echo
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // will overwrite current contents of the packet
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; datagramSocket.receive(packet);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Display the echo
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(new String(packet.getData()));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; datagramSocket.close();
&nbsp;&nbsp;&nbsp; }//end try
&nbsp;&nbsp;&nbsp; catch(UnknownHostException e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(e);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Must be online to run properly.");
&nbsp;&nbsp;&nbsp; }//end catch UnknownHostException
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; catch(SocketException e){System.out.println(e);}
&nbsp;&nbsp;&nbsp; catch(IOException e){System.out.println(e);}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end main
}//end class Sockets07
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>