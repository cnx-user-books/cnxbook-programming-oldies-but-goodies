<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 14,
The Comparator Interface, Part 6</h2>
<p>
<i><font color="#000000">Baldwin shows you </font>how to use a Comparator
created by the reverseOrder method of the Collections class to sort a list
into reverse natural order.&nbsp; He also shows you how to use the reverse
method of the Collections class to reverse the order of the elements in
a list.</i>
</p>
<b>Published:</b>&nbsp; September 10, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1376
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">A miniseries</font></b>
<p>This is the fourteenth lesson in a miniseries on Java data structures
and the Java<i> Collections Framework.</i>&nbsp; The first lesson in the
miniseries was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1374.htm">Data Structures in Java: Part 13, The
Comparator Interface, Part 5</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p><b><font color="#FF0000">A sub-series</font></b>
<p>This is also the sixth lesson in a sub-series on the <b>Comparator</b>
interface.&nbsp; The primary purpose of the lessons in this sub-series
is to teach you about the interactions between the <b>Comparator</b> interface
and the Collections Framework.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">In this lesson, </font>I will teach you how to use
a <b>Comparator</b> created by the <b>reverseOrder</b> method of the <b>Collections</b>
class to sort a list into
<i>reverse natural order</i>.&nbsp; I will also
teach you how to use the <b>reverse</b> method of the <b>Collections</b>
class to reverse the order of the elements in a list.
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Program</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Let's begin with a little quiz to test your prior knowledge of the Collections
Framework.
<p>What output is produced by the program shown in Listing 1 <i>(select
one or more answers)</i>?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; Joe Bill Tom JOE BILL TOM</li>

<li>
D.&nbsp; BILL Bill JOE Joe TOM Tom</li>

<li>
E.&nbsp; TOM BILL JOE Tom Bill Joe</li>

<li>
F.&nbsp; Joe Bill Tom JOE TOM BILL</li>

<li>
G.&nbsp; Tom TOM Joe JOE Bill BILL</li>

<li>
H.&nbsp; Joe Bill Tom</li>

<li>
I.&nbsp; None of the above.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparator07.java
//Copyright 2001, R.G.Baldwin
import java.util.*;

public class Comparator07{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparator07

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;

&nbsp;&nbsp;&nbsp; ref = new ArrayList();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Collections.reverse((List)ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Comparator aComparator&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Collections.reverseOrder();
&nbsp;&nbsp;&nbsp; Collections.sort(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (List)ref, aComparator);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();

&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">And the answer is ...</font></b>
<p>The correct answer to the above question is C, E, and G.&nbsp; The output
from the program is shown below:
<p><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<br><b><tt>TOM BILL JOE Tom Bill Joe</tt></b>
<br><b><tt>Tom TOM Joe JOE Bill BILL</tt></b>
<p>If that was your answer, you probably already understand most of the
material covered in this lesson.&nbsp; In that case, you might consider
skipping this lesson and moving on to the next lesson.&nbsp; If that wasn't
your answer, you should probably continue with your study of this lesson.
<p><b><font color="#FF0000">Similar to previous programs</font></b>
<p>The overall structure of this program in Listing 1 is similar to programs
that I have discussed in previous lessons.&nbsp; Therefore, I will concentrate
on those aspects of this program that differentiate it from the programs
in previous lessons.
<p><b><font color="#FF0000">A new ArrayList object</font></b>
<p>The code in Listing 2 instantiates a new <b>ArrayList</b> object and
passes that object's reference to a method named <b>fillIt</b> where it
is populated with the names of several people.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; ref = new <b>ArrayList</b>();
&nbsp;&nbsp;&nbsp; Populator.<b>fillIt</b>(ref);</pre>

<pre>&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Displays the list contents</font></b>
<p>The code in Listing 2 also gets an iterator on the list and uses that
iterator to display the contents of the populated list.&nbsp; At that point
in the program, the list contains the following elements in the order shown:
<p><b><tt>Joe Bill Tom JOE BILL TOM</tt></b>
<p>You will recognize this as matching the order in which the elements
were added to the list by the <b>fillIt</b> method shown in Listing 3.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class Populator{
&nbsp; public static void <b>fillIt</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The ArrayList class</font></b>
<p>The <b>ArrayList</b> class is one of the concrete class implementations
of the Collections Framework.&nbsp; This class implements both the <b>Collection</b>
interface and the <b>List</b> interface.&nbsp; Thus, it is both a collection
and a list, and adheres to the contracts and stipulations of those interfaces.
<p>Here is part of what Sun has to say about the <b>ArrayList</b> class:
<blockquote><i>"Resizable-array implementation of the List interface. Implements
all optional list operations, and permits all elements, including null.
... (This class is roughly equivalent to Vector, except that it is unsynchronized.)"</i></blockquote>
<b><font color="#FF0000">The reverse method of the Collections class</font></b>
<p>The invocation of the <b>reverse</b> method shown in Listing 4 is new
to this lesson.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Collections.<b>reverse</b>((List)ref);

&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The Collections class</font></b>
<p>A previous lesson discussed the <b>Collections</b> class, indicating
that the class provides a number of static methods that can be used to
manipulate collections.&nbsp; As a refresher, here is part of what Sun
has to say about the <b>Collections</b> class:
<blockquote><i>"This class consists exclusively of static methods that
operate on or return collections. It contains polymorphic algorithms that
operate on collections, "wrappers", which return a new collection backed
by a specified collection, and a few other odds and ends."</i></blockquote>
You should recall that the <b>Collections</b> class is not the same as
the <b>Collection</b> interface.&nbsp; Don't confuse the two.
<p><b><font color="#FF0000">The reverse method</font></b>
<p>One of the static methods in the <b>Collections</b> class is the method
named <b>reverse</b>.&nbsp; Here is part of what Sun has to say about the
<b>reverse</b>
method:
<blockquote><i>"Reverses the order of the elements in the specified list."</i></blockquote>
Pretty simple, huh?&nbsp; But also very useful in some cases.
<p><b><font color="#FF0000">Contents of the list</font></b>
<p>After invoking the reverse method on the list, the code in Listing 4
above used an iterator to get and display the contents of the list.&nbsp;
The contents of the list at that point in the program were as shown below:
<p><b><tt>TOM BILL JOE Tom Bill Joe</tt></b>
<p>If you compare this with the previous output, you will see that the
locations of the elements in the list are reversed.&nbsp; The element at
index 0 was moved to index 5, the element at index 5 was moved to index
0, and the elements in between were moved accordingly.
<p><b><font color="#FF0000">The reverseOrder method</font></b>
<p>The code in Listing 5 is also new to this lesson.&nbsp; This code invokes
the static <b>reverseOrder</b> method of the <b>Collections</b> class and
stores the returned value in a reference variable of type <b>Comparator</b>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Comparator aComparator&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = Collections.<b>reverseOrder</b>();

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">What does Sun have to say about this?</font></b>
<p>Here is part of what Sun has to say about the <b>reverseOrder</b> method:
<blockquote><i>"Returns a comparator that imposes the reverse of the natural
ordering on a collection of objects that implement the Comparable interface.
(The natural ordering is the ordering imposed by the objects' own compareTo
method.) This enables a simple idiom for sorting (or maintaining) collections
(or arrays) of objects that implement the Comparable interface in reverse-natural-order."</i></blockquote>
<b><font color="#FF0000">Reverse natural order</font></b>
<p>You will recall that in several previous lessons, I have written a class
from which I instantiated a <b>Comparator</b> object that was used to sort
elements into <i>reverse natural order</i>.&nbsp; I chose that sorting
order simply because I needed to illustrate how to define such a class,
and in my specific cases, <i>reverse natural order</i> was relatively easy
to implement.&nbsp; <i>(With a little more effort, I could have implemented
a variety of different sorting orders.)</i>
<p>In my design of those classes, I made no attempt to write a generic
class that could do the job independent of the type of the elements to
be sorted.&nbsp; Rather, my <b>Comparator</b> objects tended to be very
type specific.
<p><b><font color="#FF0000">A type-independent Comparator</font></b>
<p>What we see here is much more general and sophisticated.&nbsp; The <b>Comparator</b>
object returned by the <b>reverseOrder</b> method can be used to impose
a <i>reverse natural order</i> on any collection of objects that implement
the <b>Comparable</b> interface.&nbsp; Thus, the class from which the objects
are instantiated doesn't matter, as long as those classes implement the
<b>Comparable</b>
interface.&nbsp;&nbsp; <i>(I also discussed the Comparable interface in
some detail in an earlier lesson.&nbsp; You may want to refer back to that
lesson to learn more about it.)</i>
<p><b><font color="#FF0000">The wonderful world of the Java interface</font></b>
<p>Here again, we see a manifestation of the benefits of polymorphism as
implemented using the Java interface.&nbsp; <i>(I tell my students at least
once each week that if they don't understand interfaces, they can't possibly
understand Java.)</i>
<p><b><font color="#FF0000">Sorting the list</font></b>
<p>The code in Listing 6 is not new to this lesson.&nbsp; An earlier lesson
discussed the use of the <b>sort</b> method of the <b>Collections</b> class,
along with a <b>Comparator</b> object to sort a list.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; Collections.<b>sort</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (List)ref, aComparator);

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Source of Comparator object is new</font></b>
<p>The thing that is new to this lesson is the source of the <b>Comparator</b>
object provided to the <b>sort</b> method in Listing 6.
<p>In the previous lessons, the <b>Comparator</b> object was obtained by
instantiating an object from a class of my own design.&nbsp; Those classes
implemented the <b>Comparator</b> interface.
<p>In this case, a reference to a <b>Comparator</b> object was returned
by the invocation of the <b>reverseOrder</b> method of the <b>Collections</b>
class, and that reference was passed as a parameter to the <b>sort</b>
method.
<p><b><font color="#FF0000">Don't know, don't care ...</font></b>
<p>The <b>sort</b> method doesn't care where the <b>Comparator</b> object
comes from, as long as it properly implements the <b>Comparator</b> interface.
<p>Regardless of the source of the <b>Comparator</b> object, the <b>sort</b>
method will use that object to impose the sorting rules imposed by the
<b>compare</b>
method of the object.&nbsp; In this case, the sorting rules cause the list
to be sorted into <i>reverse natural order</i>.
<p><b><font color="#FF0000">The output</font></b>
<p>The code in Listing 7 gets and uses an iterator to display the contents
of the list following the invocation of the <b>sort</b> method.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 7</font></b></pre>
</td>
</tr>
</table>

<p>The output produced by the code in Listing 7 is shown below:
<p><b><tt>Tom TOM Joe JOE Bill BILL</tt></b>
<p>You will recognize this as <i>reverse natural order<b> </b></i>for the
elements in the list.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I taught</font> you how to use a
<b>Comparator</b>
created by the <b>reverseOrder</b> method of the <b>Collections</b> class
to sort a list into
<i>reverse natural order</i>.&nbsp; The <b>Comparator</b>
object is generic, and can be used to sort any list of objects that implement
the <b>Comparable</b> interface.
<p>I also taught you how to use the <b>reverse</b> method of the <b>Collections</b>
class to reverse the order of the elements in a list.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I am going to dig a little deeper into the implications
of using the <b>toArray</b> method declared in the <b>Collection</b> interface.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
