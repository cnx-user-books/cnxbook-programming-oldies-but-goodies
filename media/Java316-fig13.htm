<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
<!-- Template file for code body -->
</head>
<body>
&nbsp;
<table BORDER BGCOLOR="#FFFF99" >
<tr>
<td>
<pre><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>/*BufferedImage01.java 12/12/99
&nbsp;Copyright 1999, R.G.Baldwin
&nbsp;&nbsp;
&nbsp;Illustrates:
&nbsp;1.&nbsp; Creating a BufferedImage object from code as&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; an alternative to importing from an image file.
&nbsp;2.&nbsp; Drawing geometric shapes on the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BufferedImage object.&nbsp;
&nbsp;3.&nbsp; Drawing the BufferedImage object on a&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Frame object.
&nbsp;&nbsp;
&nbsp;Draws a 4-inch by 4-inch Frame on the screen.
&nbsp;&nbsp;
&nbsp;Translates the origin to the center of the Frame.
&nbsp;&nbsp;
&nbsp;Creates a BufferedImage object 3.0 inches on&nbsp;
&nbsp;each side.
&nbsp;&nbsp;
&nbsp;Gets a Graphics2D context on the BufferedImage
&nbsp;&nbsp;
&nbsp;Draws a green filled rectangle on the context&nbsp;
&nbsp;that is the same size as the BufferedImage object.
&nbsp;&nbsp;
&nbsp;Draws a red filled circle on the context that just fits&nbsp;
&nbsp;inside the dimensions of the BufferedImage object.
&nbsp;The circle covers the green rectangle.
&nbsp;&nbsp;
&nbsp;Draws the BufferedImage object on the Frame,&nbsp;
&nbsp;centered on the origin.
&nbsp;&nbsp;
&nbsp;Whether the dimensions in inches come out right&nbsp;
&nbsp;or not depends on whether the method&nbsp;
&nbsp;getScreenResolution() returns the correct&nbsp;
&nbsp;resolution for your screen.
&nbsp;&nbsp;
&nbsp;Tested using JDK 1.2.2, WinNT Workstation 4.0
&nbsp;*****************************************/
&nbsp;import java.awt.geom.*;
&nbsp;import java.awt.*;
&nbsp;import java.awt.event.*;
&nbsp;import java.awt.image.*;
&nbsp;&nbsp;
&nbsp;class BufferedImage01{
&nbsp;&nbsp; publicstaticvoid main(String[] args){
&nbsp;&nbsp;&nbsp;&nbsp; GUI guiObj = new GUI();
&nbsp;&nbsp; }//end main
&nbsp;}//end controlling class BufferedImage01
&nbsp;&nbsp;
&nbsp;class GUI extends Frame{
&nbsp;&nbsp; int res;//store screen resolution here
&nbsp;&nbsp; staticfinalint ds = 72;//default scale, 72 units/inch
&nbsp;&nbsp; staticfinalint hSize = 4;//horizonal size = 4 inches
&nbsp;&nbsp; staticfinalint vSize = 4;//vertical size = 4 inches
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; GUI(){//constructor
&nbsp;&nbsp;&nbsp;&nbsp; //Get screen resolution
&nbsp;&nbsp;&nbsp;&nbsp; res = Toolkit.getDefaultToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getScreenResolution();
&nbsp;&nbsp;&nbsp;&nbsp; //Set Frame size
&nbsp;&nbsp;&nbsp;&nbsp; this.setSize(hSize*res,vSize*res);
&nbsp;&nbsp;&nbsp;&nbsp; this.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1999, R.G.Baldwin");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Window listener to terminate program.
&nbsp;&nbsp;&nbsp;&nbsp; this.addWindowListener(new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; publicvoid windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);}});
&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp; //Override the paint() method
&nbsp;&nbsp; publicvoid paint(Graphics g){
&nbsp;&nbsp;&nbsp;&nbsp; //Downcast the Graphics object to a&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; Graphics2D object
&nbsp;&nbsp;&nbsp;&nbsp; Graphics2D g2 = (Graphics2D)g;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Scale device space to produce inches on&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; the screen based on actual screen resolution.
&nbsp;&nbsp;&nbsp;&nbsp; g2.scale((double)res/72,(double)res/72);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Translate origin to center of Frame
&nbsp;&nbsp;&nbsp;&nbsp; g2.translate((hSize/2)*ds,(vSize/2)*ds);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Draw x-axis
&nbsp;&nbsp;&nbsp;&nbsp; g2.draw(new Line2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -1.5*ds,0.0,1.5*ds,0.0));
&nbsp;&nbsp;&nbsp;&nbsp; //Draw y-axis
&nbsp;&nbsp;&nbsp;&nbsp; g2.draw(new Line2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,-1.5*ds,0.0,1.5*ds));
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; double size = 3.0;//size of BufferedImage object
&nbsp;&nbsp;&nbsp;&nbsp; //Get a BufferedImage object
&nbsp;&nbsp;&nbsp;&nbsp; BufferedImage bufImg =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (BufferedImage)this.createImage(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(size*ds),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(size*ds));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Get a Graphics2D context on the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; BufferedImage object
&nbsp;&nbsp;&nbsp;&nbsp; Graphics2D g2dImage =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bufImg.createGraphics();
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Draw a rectangle on the BufferedImage and
&nbsp;&nbsp;&nbsp;&nbsp; // fill it with the color green.
&nbsp;&nbsp;&nbsp;&nbsp; Rectangle2D.Double theRectangle =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Rectangle2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,0.0,size*ds,size*ds);
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.setPaint(new Color(0,255,0));//green
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.fill(theRectangle);
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.draw(theRectangle);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Draw a circle on the BufferedImage and fill&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp; it with the color red.
&nbsp;&nbsp;&nbsp;&nbsp; Ellipse2D.Double theCircle =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Ellipse2D.Double(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0.0,0.0,size*ds,size*ds);
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.setPaint(new Color(255,0,0));//red
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.fill(theCircle);
&nbsp;&nbsp;&nbsp;&nbsp; g2dImage.draw(theCircle);
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; //Now draw the BufferedImage on the Frame
&nbsp;&nbsp;&nbsp;&nbsp; g2.drawImage(bufImg,null,(int)(-(size/2)*ds),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (int)(-(size/2)*ds));
&nbsp;&nbsp;
&nbsp;&nbsp; }//end overridden paint()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;}//end class GUI
&nbsp;//==============================//

</font><b><font size=-1>Figure 13</font></b></font></pre>
</td>
</tr>
</table>

</body>
</html>
