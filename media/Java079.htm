<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Callbacks - III<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 79, Revised 01/04/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#summary">Summary</a></li>

<li><a href="#program listing">Program Listing</a></li></ul></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
This is the third in a series of three consecutive lessons on Callbacks
in Java. The three lessons are named Callbacks - I, Callbacks - II, and
Callbacks - III.

<p>Students in Prof. Baldwin's <b><u>Intermediate Java Programming</u></b>
classes at ACC are responsible for knowing and understanding all of the
material in this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
Hopefully, by this point, you are familiar with the <i>callback</i> material
in the previous two lessons. Therefore, I will avoid, insofar as practical,
repeating the introductory material from the previous lessons.

<p>In a real program involving callbacks, <u>many different objects</u>
may ask <u>one object</u> to notify them when <u>any interesting event</u>
in a <u>family of interesting events</u> happens, and to <u>identify the
specific event</u> that actually happened along with the <u>notification</u>.

<p>In addition, it is often desirable to encapsulate information in an
object and to pass that object as a parameter when the callback method
is invoked. This lesson will enhance the previous program by providing
this capability.

<p>Also, sometimes the interfaces used to implement callbacks declare many
callback methods, and some interested classes are interested in <u>only
a few</u> of those methods. It can become burdensome to have to provide
large numbers of empty methods in all the classes that implement such an
interface. For this reason, a mechanism known in Java terms as an <b>adapter
</b>class is used to reduce the burden.

<p>This lesson will show you how to create and use such <b>adapter </b>classes.

<p>We will continue with our earlier scenario consisting of a <i>teacher
</i>and some <i>students</i>. At this point, we have expanded our scenario
to include many students and some animals in the classroom.

<p>The students (and the animals) register themselves on the teachers rollbook
to be notified when it is time for recess, <i>or </i>it is time for lunch.

<p>In this lesson, as in the previous lesson, all of the students and all
of the animals receive notification of both types of event (<i>recess </i>or
<i>lunch</i>) but some of those who are notified choose to ignore the notification.
However, in this lesson, the methodology for ignoring the notification
is different than it was in the previous lesson.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
In case you just started reading at this point, this is an enhanced version
of the program named Callback03. You should familiarize yourself with the
earlier program before trying to understand this program.

<p>This version of the program makes two <u>unrelated</u> enhancements
to the program named Callback03.

<p>First, a new class is defined in conjunction with the <b>CallBack </b>interface
that makes it possible for the <b>Teacher </b>class to <u>encapsulate</u>
information into an object and <u>pass</u> that object as a parameter whenever
a callback is made.

<p>Second, a new class is defined in conjunction with the <b>CallBack </b>interface
which, in Java terminology, is often called an <b>adapter </b>class.

<p>An <b>adapter</b> class, as defined here, is a convenience class that
<u>implements the interface</u> and <u>defines all the methods</u> declared
in the interface with empty methods. Then any class that needs to implement
the interface can <u><i>extend </i>the adapter class</u> without a requirement
to define those methods that are <u>not of interest</u>.

<p>In this version of the program, the <b>CallBAck</b> interface is expanded
to declare several dummy methods to emphasize this benefit of the use of
an <b>adapter </b>class.

<p>Note that objects of a class that <i>extends </i>the adapter class can
be <u>referred to by the interface type</u>.

<p>Thus, <u>interface type is an inherited attribute</u> that results from
<i>extending </i>a class that <i>implements </i>an interface.

<p>Using an <b>adapter </b>class also makes it possible to expand the interface
later, by declaring new methods, without breaking code that already <b>implements
</b>the interface, provided that the <b>adapter</b> class is appropriately
redefined. In this sense, the <b>adapter</b> class is a little more than
a convenience class.

<p>This version of the program defines three different classes named <b>Student</b>,
<b>Dog</b>, and <b>Cat</b>, that <i>implement </i>the <b>CallBack </b>interface
<u><i>indirectly </i>by extending the adapter class</u>.

<p>Mixed objects of these three types are maintained in a common list and
notified at callback time.

<p>As in the previous version of the program, the <b>Dog </b>class ignores
the<b> recess() </b>callback and the <b>Cat </b>class ignores the <b>lunch()</b>
callback. In this program, these classes <u>simply don't bother to override</u>
methods of the interface that are not of interest.

<p>The <b>Student </b>class responds to both types of callbacks with fully-
defined methods.

<p>The program defines a <b>Teacher </b>class that has the ability to create
and maintain a list of objects of the interface type, and to notify those
objects that something interesting has happened by invoking either the
<b>recess()</b> method or the <b>lunch()</b> method on all the objects
on the list. An object is instantiated and passed as a parameter whenever
one or the other of these methods is invoked.

<p>Finally, the program defines a controlling class that ties all the pieces
together and exercises them.

<p>The program was tested using JDK 1.1.3 under Win95.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
First we define an interface that will create a new type and declare two
generic methods that can be used to callback any object that is of a class
that implements the interface.

<p>Note that in addition to these two methods, the interface also declares
<b>several additional dummy methods</b> to emphasize the <u>benefit of
extending the adapter class</u> that is defined later.

<p>Note also that the methods <b>now require a parameter</b>. The class
for this parameter will be defined soon next.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>interface <b>CallBack</b>{
&nbsp; public void <b>recess</b>(<b>CallBackObjectClass obj</b>);
&nbsp; public void <b>lunch</b>(CallBackObjectClass obj);
&nbsp;&nbsp;
&nbsp; public void <b>dummy1</b>(CallBackObjectClass obj);
&nbsp; public void dummy2(CallBackObjectClass obj);
&nbsp; public void dummy3(CallBackObjectClass obj);
&nbsp; public void dummy4(CallBackObjectClass obj);
&nbsp; public void dummy5(CallBackObjectClass obj);
&nbsp; public void dummy6(CallBackObjectClass obj);

}//end interface CallBack</pre></td></tr></table>
The following class definition is for a class from which we can instantiate
an object to pass as a parameter in the callback methods. This class can
be as simple or as elaborate as needed to convey the amount and type of
information needed with the callback. In our case, it contains a single
<b>String</b> object.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>CallBackObjectClass</b>{
&nbsp; String data;
&nbsp;&nbsp;
&nbsp; <b>CallBackObjectClass</b>(String data){//<b>constructor
</b>&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end constructor
}//end CallBackObjectClass</pre></td></tr></table>
The next code fragment is the definition of the adapter class for the <b>CallBack
</b>interface. This class defines all the interface methods with empty
methods.

<p>Classes that need to <i>implement</i> the interface can now <i>extend
</i>this class instead and <i>override </i><u>only</u> the empty methods
of interest, and ignore the others. It is important to note that the existence
of the <b>adapter</b> does not prevent another class from <i>implementing</i>
the interface instead of <i>extending</i> the <b>adapter</b> class.

<p>Objects of a class that <i>extends </i>this class can be referenced
as the interface type <b>CallBack</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>CallBackAdapter implements CallBack</b>{
&nbsp; public void <b>recess</b>(<b>CallBackObjectClass </b>obj)<b>{}</b>;
&nbsp; public void <b>lunch</b>(CallBackObjectClass obj){};
&nbsp;&nbsp;
&nbsp; public void <b>dummy1</b>(CallBackObjectClass obj){};
&nbsp; public void dummy2(CallBackObjectClass obj){};
&nbsp; public void dummy3(CallBackObjectClass obj){};
&nbsp; public void dummy4(CallBackObjectClass obj){};
&nbsp; public void dummy5(CallBackObjectClass obj){};
&nbsp; public void dummy6(CallBackObjectClass obj){};&nbsp;&nbsp;
}//end class CallBackAdapter</pre></td></tr></table>
Next we need a class whose objects can maintain a list of registered objects
of type <b>CallBack </b>and can notify all the objects on that list when
something interesting happens. This class has the ability to invoke two
different callback methods: <b>recess()</b> and <b>lunch()</b>.

<p>Obviously, if you have been following this development, you will know
by now that this is the class named <b>Teacher</b>.

<p>The only thing significantly different about this version of the <b>Teacher</b>
class is the fact that it instantiates and passes an object of type <b>CallBackObjectClass</b>
whenever it makes a callback.

<p>Since you have seen this method several times before, and should be
very familiar with it by now, I am going to delete most of the code in
the class and show you only that portion of the code that invokes the <b>recess()</b>
callback method on all the objects on the list, <u>instantiating and passing</u>
an object of type <b>CallBackObjectClass</b> as a parameter in each case.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>Teacher</b>{
<i>&nbsp;<b> //code deleted

</b></i>&nbsp; void <b>callRecess()</b>{
&nbsp;<i>&nbsp;<b>&nbsp; //code deleted

</b></i>&nbsp;&nbsp;&nbsp; <b>for</b>(int cnt = 0; cnt &lt; tempList.size(); cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((CallBack)tempList.elementAt(cnt)).<b>recess(
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>new CallBackObjectClass(" Recess")</b>);
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end callRecess()
&nbsp; <b><i>//code deleted

</i></b>}//end class Teacher</pre></td></tr></table>
This brings us to the three classes that implement the <b>CallBack </b>interface
<i>indirectly </i>by <i>extending </i>the <b>CallBackAdapter </b>class.

<p>Objects of these three class can be registered on the list maintained
by an object of the <b>Teacher </b>class, and will be notified whenever
that object invokes either the <b>recess()</b> method or the <b>lunch()</b>
method on the registered objects on the list.

<p>Part of the notification will be an object passed as a parameter to
the callback method. Code in the callback method can either ignore that
object, or can extract the information from the object and use it.

<p>These three classes are very similar, so I will show you only one of
them here. To be consistent with the previous lesson, I will show you the
definition for the <b>Dog</b> class that ignores the <b>recess()</b> callback.
This class also ignores all of the <i>dummy </i>methods that were declared
in the <b>CallBack</b> interface in this program.

<p>Note first that this class <i>extends</i> the <b>CallBackAdapter</b>
class and does <u>not</u> <i>implement </i>any interfaces.

<p>Note also that it only overrides the <b>lunch()</b> method from the
<b>adapter</b> class, ignoring all of the other empty methods defined in
that class. Were it not for the <b>adapter</b> class in this case, this
<b>Dog</b> class definition would have to define the six dummy methods
and the <b>recess()</b> method with empty methods. Therefore, the availability
of such an adapter class can be a real convenience for the programmer.

<p>Finally, note that code in the <b>lunch()</b> method extracts the instance
variable named <b>data</b> and displays that information instead of a literal
string as was the case in the previous versions of this program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class <b>Dog extends CallBackAdapter</b>{
&nbsp; String name; //store name here for later ID
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Dog(String name){//constructor
&nbsp;&nbsp;&nbsp; this.name = name; //save the name to identify the obj
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; public void <b>lunch</b>(CallBackObjectClass obj){//announce
&nbsp;&nbsp;&nbsp; System.out.println(<b>name + obj.data</b>);
&nbsp; }//end overridden lunch()
&nbsp; //-----------------------------------------------------//
}//end class Dog</pre></td></tr></table>
That brings us to the controlling class that ties all the other pieces
together and exercises them. The controlling class in this version of the
program is no different from that of the previous version named <b>Callback03</b>.

<p>Also, the output from running this version of the program is almost
the same as the previous version, the difference being that the callback
methods display information encapsulated in an object passed to the method
which was not the case in the previous versions. The output can be seen
in the complete program listing that follows shortly.

<p>Therefore, there should be no need to provide any further discussion
regarding the testing of this version of the program..
<center><h3><a name="summary"></a><font color="#ff0000">Summary</font></h3></center>
In summary then, we have objects of different classes registered on a common
callback list where every object on the list receives a callback for every
different type of callback event associated with the list.

<p>Whenever a callback occurs, an object is instantiated to contain information
and passed as a parameter to the callback method. The code in the callback
method can either ignore that object, or extract the information from the
object and use it. In this program, the code in the callback methods extracts
and displays the information encapsulated in the object.

<p>The different types of callbacks are established by the method declarations
in the <b>CallBack </b>interface.

<p>An <b>adapter </b>class is defined that implements the <b>CallBack </b>interface
and defines all of its methods as empty methods.

<p>Each class of object that registers for callbacks can either respond
to all of the different types of callbacks by overriding all of the callback
methods in the <b>adapter</b> class, or can selectively ignore some types
of callbacks simply by not overriding those methods.

<p>Such a class can also ignore the <b>adapter</b> class and <i>implement</i>
the interface directly as in the previous lessons.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
A full listing of the program follows so that you can view the code fragments
in context.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Callback04.java Copyright 1997, R.G.Baldwin
The purpose of this program is to develop a callback
capability using Interfaces.&nbsp;&nbsp;

This is an enhanced version of the program named&nbsp;
Callback03.&nbsp; You should familiarize yourself with
the earlier program before getting into this program.

This version of the program makes two unrelated&nbsp;
enhancements to the program named Callback03.

First, a new class is defined in conjunction with the
CallBack interface that makes it possible for the
Teacher class to encapsulate information into an object
and pass that object whenever a callback is made.

Second, a new class is defined in conjunction with the
CallBack interface which, in Java terminology, is often
called an adapter class.&nbsp; This is a convenience class
that implements the interface and defines all the&nbsp;
methods declared in the interface with empty methods.
Then any class that needs to implement the interface&nbsp;
can extend the adapter class without a requirement to&nbsp;
define those methods that are not of interest.

In this case, the interface is expanded to declare&nbsp;
several dummy methods to emphasize this benefit of
the use of an adapter class.

Note that objects of classes that extend the adapter
class that implements the interface can be referred to&nbsp;
by the interface type. Thus, interface type is an
inherited attribute that results from extending a class.

Using an adapter class also makes it possible to expand
the interface later by declaring new methods without&nbsp;
breaking code that already implements the interface.

This version defines three different classes named&nbsp;
Student, Dog, and Cat, that implement the CallBack&nbsp;
interface indirectly by extending the adapter class.
These classes simply don't bother to define
methods of the interface that are not of interest.

Mixed objects of these three types are maintained&nbsp;
on a list and notified at CallBack time.

The Dog class ignores the recess() callback and the&nbsp;
Cat class ignores the lunch() callback.&nbsp; The Student
class responds to both types of callbacks with fully-
defined methods.

The program defines a Teacher class that has the&nbsp;
ability to create and maintain a list of objects
of the interface type, and to notify those objects
that something interesting has happened by invoking
either the recess() method or the lunch() method on all&nbsp;
the objects on the list.

Finally, the program defines a controlling class that
ties all the pieces together and exercises them.

Tested using JDK 1.1.3 under Win95.

The output from the program was:

Tom Recess
Sue Recess
CleoCat Recess
Peg Recess
KittyKat Recess
Bob Recess
Tom Lunch
SpotDog Lunch
Sue Lunch
FidoDog Lunch
Peg Lunch
Bob Lunch
BrownieDog Lunch
**********************************************************/
import java.util.*;

//First we define an interface that will create a new type
// and declare two generic methods that can be used to&nbsp;
// callback any object that is of a class that implements
// the interface. Note that the methods now require a
// parameter. Note also that we have declared several
// additional dummy methods to emphasize the benefit of&nbsp;
// extending the adapter class that is defined later.
interface CallBack{
&nbsp; public void recess(CallBackObjectClass obj);
&nbsp; public void lunch(CallBackObjectClass obj);
&nbsp;&nbsp;
&nbsp; public void dummy1(CallBackObjectClass obj);
&nbsp; public void dummy2(CallBackObjectClass obj);
&nbsp; public void dummy3(CallBackObjectClass obj);
&nbsp; public void dummy4(CallBackObjectClass obj);
&nbsp; public void dummy5(CallBackObjectClass obj);
&nbsp; public void dummy6(CallBackObjectClass obj);

}//end interface CallBack
//=======================================================//

//Now we need a class that can be instantiated to
// pass an object in the callback methods.
class CallBackObjectClass{
&nbsp; String data;
&nbsp;&nbsp;
&nbsp; CallBackObjectClass(String data){//constructor
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end constructor
}//end CallBackObjectClass
//=======================================================//

//Now we need an adapter class for the CallBack interface.
// This class defines all the interface methods with
// empty methods.&nbsp; Classes that need the interface can
// now extend this class and override only the empty&nbsp;
// methods of interest, and ignore the others. Note that&nbsp;
// objects of a class that extends this class can be&nbsp;
// referenced as the interface type CallBack.
class CallBackAdapter implements CallBack{
&nbsp; public void recess(CallBackObjectClass obj){};
&nbsp; public void lunch(CallBackObjectClass obj){};
&nbsp;&nbsp;
&nbsp; public void dummy1(CallBackObjectClass obj){};
&nbsp; public void dummy2(CallBackObjectClass obj){};
&nbsp; public void dummy3(CallBackObjectClass obj){};
&nbsp; public void dummy4(CallBackObjectClass obj){};
&nbsp; public void dummy5(CallBackObjectClass obj){};
&nbsp; public void dummy6(CallBackObjectClass obj){};&nbsp;&nbsp;
}//end class CallBackAdapter
//=======================================================//

//Next we need a class whose objects can maintain a&nbsp;
// registered list of objects of type CallBack and can&nbsp;
// notify all the objects on that list when something
// interesting happens. This class has the ability to
// notify two different types of callbacks, recess()
// and lunch().&nbsp;&nbsp;

class Teacher{
&nbsp; Vector objList; //list of objects of type CallBack
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Teacher(){//constructor
&nbsp;&nbsp;&nbsp; //Instantiate a Vector object to contain the list
&nbsp;&nbsp;&nbsp; // of registered objects.
&nbsp;&nbsp;&nbsp; objList = new Vector();
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Method to add objects to the list.
&nbsp; synchronized void register(CallBack obj){
&nbsp;&nbsp;&nbsp; this.objList.addElement(obj);
&nbsp; }//end register()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Method to remove objects from the list.
&nbsp; synchronized void unRegister(CallBack obj){
&nbsp;&nbsp;&nbsp; if(this.objList.removeElement(obj))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj + " removed");
&nbsp;&nbsp;&nbsp; else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(obj + " not in the list");
&nbsp; }//end register()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Method to notify all objects on the list that&nbsp;
&nbsp; // something interesting has happened regarding&nbsp;
&nbsp; // recess and to pass information to the object
&nbsp; // encapsulated in an object as a parameter.
&nbsp; void callRecess(){
&nbsp;&nbsp;&nbsp; Vector tempList;//save a temporary copy of list here
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Make a copy of the list.
&nbsp;&nbsp;&nbsp; synchronized(this){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempList = (Vector)objList.clone();
&nbsp;&nbsp;&nbsp; }//end synchronized block
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Invoke the recess() method on each object on
&nbsp;&nbsp;&nbsp; // the list, passing an object as a parameter.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempList.size(); cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((CallBack)tempList.elementAt(cnt)).recess(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CallBackObjectClass(" Recess"));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end callRecess()
&nbsp; //-----------------------------------------------------//
&nbsp; //Method to notify all objects on the list that&nbsp;
&nbsp; // something interesting has happened regarding&nbsp;
&nbsp; // lunch and to pass an object containing information
&nbsp; // as a parameter to the callback method.
&nbsp; void callLunch(){
&nbsp;&nbsp;&nbsp; Vector tempList;//save a temporary copy of list here
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Make a copy of the list.
&nbsp;&nbsp;&nbsp; synchronized(this){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempList = (Vector)objList.clone();
&nbsp;&nbsp;&nbsp; }//end synchronized block
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Invoke the lunch() method on each object on
&nbsp;&nbsp;&nbsp; // the list, passing an object as a parameter.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempList.size(); cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((CallBack)tempList.elementAt(cnt)).lunch(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CallBackObjectClass(" Lunch"));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end callRecess()
&nbsp; //-----------------------------------------------------//
}//end class Teacher
//=======================================================//

//Class that implements the CallBack interface indirectly
// by extending the CallBackAdapter class.&nbsp; Objects
// of this class can be registered on the list maintained
// by an object of the Teacher class, and will be notified
// whenever that object invokes either the recess() method
// or the lunch() method on the registered objects on&nbsp;
// the list.&nbsp; This method provides a full definition for
// both methods.

class Student extends CallBackAdapter{
&nbsp; String name; //store the object name here for later ID
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Student(String name){//constructor
&nbsp;&nbsp;&nbsp; this.name = name;&nbsp; //save the name to identify the obj
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can invoke this method
&nbsp; // as a callback mechanism. Note that this method
&nbsp; // displays the data encapsulated in the incoming&nbsp;
&nbsp; // object.
&nbsp; public void recess(CallBackObjectClass obj){//announce
&nbsp;&nbsp;&nbsp; System.out.println(name + obj.data);
&nbsp; }//end overridden recess()
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can also invoke this&nbsp;
&nbsp; // method as a callback mechanism passing an object
&nbsp; // as a parameter.
&nbsp; public void lunch(CallBackObjectClass obj){//announce
&nbsp;&nbsp;&nbsp; System.out.println(name + obj.data);
&nbsp; }//end overridden lunch()
&nbsp; //-----------------------------------------------------//
}//end class Student

//=======================================================//

//Another Class that implements the CallBack interface
// indirectly by extending the CallBackAdapter class.&nbsp;&nbsp;
// See description above. This class ignores the recess()
// method as well as the dummy methods.

class Dog extends CallBackAdapter{
&nbsp; String name; //store name here for later ID
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Dog(String name){//constructor
&nbsp;&nbsp;&nbsp; this.name = name; //save the name to identify the obj
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can invoke this&nbsp;
&nbsp; // method as a callback mechanism passing an object
&nbsp; // as a parameter.
&nbsp; public void lunch(CallBackObjectClass obj){//announce
&nbsp;&nbsp;&nbsp; System.out.println(name + obj.data);
&nbsp; }//end overridden lunch()
&nbsp; //-----------------------------------------------------//
}//end class Dog
//=======================================================//

//A third Class that implements the CallBack interface
// indirectly by extending the CallBackAdapter class,
// similar to the other two classes.&nbsp; This class ignores
// the lunch() method as well as the dummy methods.

class Cat extends CallBackAdapter{
&nbsp; String name; //store name here for later ID
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; Cat(String name){//constructor
&nbsp;&nbsp;&nbsp; this.name = name; //save the name to identify the obj
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //An object of the Teacher class can invoke this method
&nbsp; // as the callback mechanism, passing an object as a
&nbsp; // parameter.
&nbsp; public void recess(CallBackObjectClass obj){//announce
&nbsp;&nbsp;&nbsp; System.out.println(name + obj.data);
&nbsp; }//end overridden recess()
&nbsp; //-----------------------------------------------------//
}//end class Cat
//=======================================================//

//Controlling class that ties all the pieces together and
// exercises them.
class Callback04{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //Instantiate Teacher object
&nbsp;&nbsp;&nbsp; Teacher missJones = new Teacher();

&nbsp;&nbsp;&nbsp; //Instantiate some Student objects
&nbsp;&nbsp;&nbsp; Student tom = new Student("Tom");
&nbsp;&nbsp;&nbsp; Student sue = new Student("Sue");
&nbsp;&nbsp;&nbsp; Student peg = new Student("Peg");
&nbsp;&nbsp;&nbsp; Student bob = new Student("Bob");
&nbsp;&nbsp;&nbsp; Student joe = new Student("Joe");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate some Dog objects.
&nbsp;&nbsp;&nbsp; Dog spot = new Dog("SpotDog");
&nbsp;&nbsp;&nbsp; Dog fido = new Dog("FidoDog");
&nbsp;&nbsp;&nbsp; Dog brownie = new Dog("BrownieDog");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate some Cat objects
&nbsp;&nbsp;&nbsp; Cat cleo = new Cat("CleoCat");
&nbsp;&nbsp;&nbsp; Cat kitty = new Cat("KittyKat");

&nbsp;&nbsp;&nbsp; //Register some Student, Dog, and Cat objects with&nbsp;
&nbsp;&nbsp;&nbsp; // the Teacher object.
&nbsp;&nbsp;&nbsp; missJones.register(tom);
&nbsp;&nbsp;&nbsp; missJones.register(spot);
&nbsp;&nbsp;&nbsp; missJones.register(sue);
&nbsp;&nbsp;&nbsp; missJones.register(cleo);
&nbsp;&nbsp;&nbsp; missJones.register(fido);
&nbsp;&nbsp;&nbsp; missJones.register(peg);
&nbsp;&nbsp;&nbsp; missJones.register(kitty);
&nbsp;&nbsp;&nbsp; missJones.register(bob);
&nbsp;&nbsp;&nbsp; missJones.register(brownie);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Cause the Teacher object to call recess on all
&nbsp;&nbsp;&nbsp; // the objects on the list.
&nbsp;&nbsp;&nbsp; missJones.callRecess();
&nbsp;&nbsp;&nbsp; //Cause the Teacher object to call lunch on all
&nbsp;&nbsp;&nbsp; // the objects on the list.
&nbsp;&nbsp;&nbsp; missJones.callLunch();
&nbsp; }//end main()
}//end class Callback04
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>