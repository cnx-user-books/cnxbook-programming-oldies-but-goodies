<html>

<head>
<meta name=Generator content="Microsoft Office HTML Filter 2.0">
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=Originator content="Microsoft Word 9">
<title>... in Java by Richard G Baldwin</title>
<style>
<!--
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{
	margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0in;
	margin-left:0in;
	text-align:center;
	font-size:18.0pt;
	font-family:"Times New Roman";
	color:red;
	font-weight:bold;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=author content="richard g. baldwin">
</head>

<body lang=EN-US link=blue vlink=blue>
<!--start-->

<div class=Section1>

<p>March 1, 2000</p>

<h2><!--title--><span style='color:black'>Java 2D Graphics, The Shape
Interface, Part 1<!--endtitle--></span></h2>

<p class=MsoNormal>Java Programming, Lecture Notes # 308</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><i>by Richard G. Baldwin </i></p>

<p class=MsoNormal><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i></p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><a
     href="#_Introduction">Introduction</a></li>
 <li class=MsoNormal><a
     href="#_What_is_a">What is a Shape?</a></li>
 <li class=MsoNormal><a
     href="#_What_is_a_1">What is a PathIterator Object?</a></li>
 <li class=MsoNormal><a
     href="#_Geometric_Objects_Implement">Geometric Objects Implement Shape</a></li>
 <li class=MsoNormal><a
     href="#_What_Does_This">What Does This Lesson Cover?</a></li>
 <li class=MsoNormal><a
     href="#_Sample_Programs">Sample Program</a></li>
 <li class=MsoNormal><a
     href="#_Summary">Summary</a></li>
 <li class=MsoNormal><a
     href="#_Complete_Program_Listing">Complete Program Listing</a></li>
</ul>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=3 width="100%" align=center>

</div>


<h2><a name="_Introduction"></a>Introduction</h2>

<p class=MsoNormal>In an earlier lesson, I explained that the <b>Graphics2D</b>
class extends the <b>Graphics</b> class to provide more sophisticated control
over geometry, coordinate transformations, color management, and text layout.
Beginning with JDK 1.2, <b>Graphics2D </b>is the fundamental class for
rendering two-dimensional shapes, text and images.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I also explained that without understanding the behavior of
other classes and interfaces such as <b>Shape</b>, <b>AffineTransform</b>, <b>GraphicsConfiguration</b>,
<b>PathIterator</b>, and <b>Stroke</b>, it is not possible to fully understand
the inner workings of the <b>Graphics2D</b> class.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This and a subsequent lesson are intended to give you the
necessary understanding of the <b>Shape</b> interface.</p>

<h2><a name="_What_is_an"></a><a name="_What_is_a"></a>What is a Shape?</h2>

<p class=MsoNormal>According to Sun:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;The <b>Shape </b>interface
  provides definitions for objects that represent some form of geometric shape.
  The <b>Shape</b> is described by a <b>PathIterator</b> object, which can
  express the outline of the <b>Shape</b> as well as a rule for determining how
  the outline divides the 2D plane into interior and exterior points.&nbsp;
  Each <b>Shape</b> object provides callbacks to get the bounding box of the
  geometry, determine whether points or rectangles lie partly or entirely
  within the interior of the <b>Shape</b>, and retrieve a <b>PathIterator</b>
  object that describes the trajectory path of the Shape outline.&#8221;</p>
  </td>
 </tr>
</table>

<h2><a name="_What_is_a_1"></a>What is a PathIterator Object?</h2>

<p class=MsoNormal>A subsequent lesson will be dedicated entirely to the <b>PathIterator</b>
interface, so I won&#8217;t go into detail on <b>PathIterator</b> in this
lesson.&nbsp; For the time being, this is part of what Sun has to say about <b>PathIterator</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>The <b>PathIterator</b>
  interface provides the mechanism for objects that implement the <b>Shape</b>
  interface to return the geometry of their boundary by allowing a caller to
  retrieve the path of that boundary a segment at a time.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In other words, <b>PathIterator</b> makes it possible for
code in a program to obtain information about the geometric outline of an
object that implements the <b>Shape</b> interface.</p>

<h2><a name="_Geometric_Objects_Implement"></a>Geometric Objects Implement
Shape</h2>

<h3><span style='color:red'>A shape need not enclose an area</span></h3>

<p class=MsoNormal>In his book, <u>Java Foundation Classes in a Nutshell</u>,
David Flanagan tells us that the Java 2D definition of a shape does not require
the shape to enclose an area.&nbsp; In other words, a <b>Shape</b> object can
represent an open curve. &nbsp;According to Flanagan, if an open curve is
passed to a method that requires a closed curve (such as <b>fill()</b>), the
curve is automatically closed by connecting its end points with a straight
line.</p>

<h3><span style='color:red'>Graphics2D methods require Shape parameters</span></h3>

<p class=MsoNormal>The following methods of the <b>Graphics2D </b>class require
an object that implements the <b>Shape</b> interface as a parameter:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>draw()</li>
 <li class=MsoNormal>fill()</li>
 <li class=MsoNormal>clip()</li>
 <li class=MsoNormal>hit()</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I have illustrated the use of the <b>draw()</b> method in
previous, and will illustrate the use of the other methods listed above in subsequent
lessons.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In addition, both the <b>Graphics2D</b> class and the <b>AffineTransform</b>
class provide methods that allow us to <i>scale, rotate, translate</i>, and <i>shear</i>
objects that implement the <b>Shape</b> interface.&nbsp; I have illustrated the
use of these methods in previous lessons.</p>

<h3><span style='color:red'>Shape is even used with text</span></h3>

<p class=MsoNormal>The <b>Shape</b> interface even makes it way into the
display of text, because the individual characters can be viewed as <b>Shape</b>
objects.</p>

<h3><span style='color:red'>Many geometric classes implement Shape</span></h3>

<p class=MsoNormal>Java 2D provides a number of classes in the <b>java.awt.geom</b>
package that implement the <b>Shape</b> interface, such as <b>Rectangle2D.Double</b>
and <b>Ellipse2D.Double</b>.&nbsp; I have illustrated the use of some of these
classes in previous lessons, and undoubtedly will continue to illustrate them
in subsequent lessons.&nbsp; This lesson illustrates the use of the <b>Line2D.Double</b>,
<b>Rectangle2D.Double</b> and <b>Ellipse2D.Double</b> classes.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>According to <u>Java 2D Graphics</u> by Jonathan Knudsen, </p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;Directly or indirectly, every
  geometric class in Java 2D implements the <b>Shape</b> interface.&nbsp; This means
  they can all be passed to <b>Graphic2D</b>&#8217;s <b>draw()</b> and <b>paint()</b>
  methods.&#8221;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Knudsen also points out that every <b>Shape</b> object has
an <i>interior</i> and an <i>exterior</i>, and that we can determine if a point
or a rectangle is inside the <b>Shape</b> object.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>He goes on to explain that what constitutes &#8220;inside&#8221; can be
very complex for certain types of complex shapes.&nbsp; There are some special
rules, called <i>winding rules</i> that are used to determine if a point is
inside a <b>Shape</b> object.&nbsp; That is another topic that I will defer to
a subsequent lesson.</p>

<h3><span style='color:red'>The Area class combines Shape objects</span></h3>

<p class=MsoNormal>Java 2D also provides an <b>Area</b> class that allows you
to create new shapes by combining existing objects that implement the <b>Shape</b>
interface.&nbsp; The <b>Area </b>class supports <i>union, intersection,
subtraction, </i>and <i>exclusive OR</i> of <b>Shape</b> objects.&nbsp; I will
defer a detailed discussion of those capabilities until a subsequent lesson.</p>

<h3><span style='color:red'>GeneralPath class can create custom Shape objects</span></h3>

<p class=MsoNormal>Another class, named <b>GeneralPath</b>, makes it possible for
you to describe a <b>Shape</b> as a sequence of line segments and curves.&nbsp;
I will also defer the discussion of that class until a subsequent lesson.</p>

<h2><a name="_What_Does_This"></a>What Does This Lesson Cover?</h2>

<p class=MsoNormal>So, having deferred several topics to subsequent lessons,
what will I cover in this lesson?</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <b>Shape</b> interface provides four groups of
overloaded methods that make it possible to perform the following tasks:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Get a
     bounding box that is guaranteed to enclose a specified <b>Shape</b>
     object.</li>
 <li class=MsoNormal>Determine
     if a specified <b>Shape</b> object completely contains a specified point
     or rectangle.</li>
 <li class=MsoNormal>Determine
     if a specified <b>Shape</b> intersects a specified rectangle</li>
 <li class=MsoNormal>Get a <b>PathIterator</b>
     object that can be used to obtain the path that makes up the boundary of a
     <b>Shape</b> object.</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I will discuss the first three capabilities in this lesson,
and defer a discussion of the <b>PathIterator</b> to a subsequent lesson.</p>

<h3><span style='color:red'>Why should you care about the Shape interface?</span></h3>

<p class=MsoNormal>You might be saying that you don&#8217;t care about doing any of
these four things, so why should you care about the <b>Shape</b> interface.&nbsp;
Even if you don&#8217;t care about bounding boxes, <b>PathIterator</b> objects, etc.,
you still need to know about the <b>Shape</b> interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As I explained earlier in this lesson, beginning with JDK
1.2, <b>Graphics2D </b>is the fundamental class for rendering two-dimensional
shapes, text and images.&nbsp; Many of the capabilities introduced in the <b>Graphics2D</b>
class are available only when working with objects that implement the <b>Shape</b>
interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Also, as I explained in an earlier lesson, the <b>AffineTransform</b>
class is used to transform graphic coordinate information between <i>user space</i>
and <i>device space</i>.&nbsp; Similarly, most of the capabilities of the <b>AffineTransform</b>
class are available only when working with objects that implement the <b>Shape</b>
interface.</p>

<h3><span style='color:red'>Shape interface is &#8220;new&#8221; to JDK 1.2</span></h3>

<p class=MsoNormal>Flanagan tells us that even though the <b>Shape</b>
interface was first defined in JDK 1.1, </p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;The interface is so central
  to Java 2D and has grown so much since the Java 1.1 version, ... it should
  generally be considered to be new in Java 1.2.&#8221;</p>
  </td>
 </tr>
</table>

<h2><a name="_Sample_Programs"></a><a name="_Sample_Program"></a>Sample Program</h2>

<p class=MsoNormal>This sample program, named <b>Shape03.java</b> illustrates
the use of the <b>Shape</b> interface for </p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Getting
     a bounding box that encloses a <b>Shape</b> object of the class <b>Ellipse2D.Double</b>.</li>
 <li class=MsoNormal>Determining
     if the <b>Shape</b> object completely contains a specified rectangle.</li>
 <li class=MsoNormal>Determining
     if the <b>Shape</b> intersects a specified rectangle</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <b>Shape</b> object, as well as the bounding rectangle,
and three rectangles used in the tests are displayed in a <b>Frame</b> object
in different colors.</p>

<h3><span style='color:red'>Start with a Frame object</span></h3>

<p class=MsoNormal>The program draws a four-inch by four-inch <b>Frame</b> on
the screen.&nbsp; It translates the origin to the center of the <b>Frame</b>.&nbsp;
Then it draws a pair of <b>X</b> and <b>Y</b>-axes centered on the new origin.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=369 style='width:221.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>This discussion of dimensions in inches on the screen
  depends on the method named <b>getScreenResolution()</b> returning the
  correct value.&nbsp; However, the <b>getScreenResolution() </b>method always
  seems to return 120 on my computer regardless of the actual screen resolution
  settings.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>After this, it draws a black circle with a diameter of one
inch, centered on the new origin.&nbsp; Then it gets the bounding rectangle for
the circle and draws it in red.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>After this, it draws a green half-inch square completely
inside the circle.&nbsp; Then it draws a blue half-inch square partially inside
and partially outside the circle.&nbsp; Finally, it draws a magenta half-inch
square completely outside the circle.</p>

<h3><span style='color:red'>Test for contains() and intersects()</span></h3>

<p class=MsoNormal>Then it tests the bounding rectangle and the three half-inch
squares to determine if they are contained in the circle.&nbsp; It displays the
results on the standard output device.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Finally, it tests the bounding rectangle and the three
half-inch squares to determine if they intersect the circle, and displays the
results on the standard output device.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In addition to drawing the circle and the squares in the <b>Frame</b>,
the following output is presented on the command-line screen:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>theCircle contains
  theBoundingBox: false</span></b></p>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>theCircle contains
  theInsideBox: true</span></b></p>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>theCircle contains
  theIntersectingBox: false</span></b></p>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>theCircle contains
  theOutsideBox: false</span></b></p>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>&nbsp;</span></b></p>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>theCircle intersects
  theBoundingBox: true</span></b></p>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>theCircle intersects
  theInsideBox: true</span></b></p>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>theCircle intersects
  theIntersectingBox: true</span></b></p>
  <p class=MsoNormal style='text-autospace:none'><b><span style='font-size:
  10.0pt;font-family:"Arial Narrow";color:black'>theCircle intersects
  theOutsideBox: false</span></b></p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The program was tested using JDK 1.2.2 under WinNT
Workstation 4.0.</p>

<h3><span style='color:red'>Will discuss in fragments</span></h3>

<p class=MsoNormal>As is my practice, I will discuss the program in
fragments.&nbsp; The entire program is presented intact at the end of the
lesson for your review.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The controlling class and the constructor for the <b>GUI</b>
class are almost identical to similar code that I have discussed in earlier
lessons.&nbsp; Therefore, I won&#8217;t discuss that code in this lesson.&nbsp; You
might want to take a quick look at the complete listing at the end of the
lesson.&nbsp; If you see something there that you don&#8217;t understand, you should
go back and review the previous lessons in this series on the Java 2D API.</p>

<h3><span style='color:red'>Overridden paint() method</span></h3>

<p class=MsoNormal>All of the interesting action in this program takes place in
the overridden <b>paint()</b> method.&nbsp; <a href="Java308-fig01.htm">Figure
1</a> shows the beginning of that method, including a reminder that it is
necessary to downcast the incoming <b>Graphics</b> reference in order to gain
access to the capabilities of the <b>Graphics2D</b> class.</p>

<h3><span style='color:red'>Update the AffineTransform object</span></h3>

<p class=MsoNormal><a href="Java308-fig02.htm">Figure 2</a> updates the <b>AffineTransform</b>
object in the <b>Graphics2D</b> object to:</p>

<p class=MsoNormal>&nbsp;</p>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal>Compensate
     for the difference in actual screen resolution and assumed screen
     resolution of 72 units per inch.</li>
 <li class=MsoNormal>Translate
     the origin to the center of the <b>Frame</b> object.</li>
</ol>

<p>If you don&#8217;t understand this fragment, you should go back and review an
earlier lesson that discussed Affine transforms in detail.</p>

<h3><span style='color:red'>Draw the axes</span></h3>

<p class=MsoNormal><a href="Java308-fig03.htm">Figure 3</a> draws a horizontal
line and a vertical line through the origin to represent the <b>X</b> and <b>Y</b>-axes
in the 2D plane.&nbsp; This should be pretty intuitive.&nbsp; If it isn&#8217;t clear
what is happening here, you should take a look at the Sun documentation,
particularly with respect to the parameters passed to the constructor for the <b>Line2D.Double</b>
class.</p>

<h3><span style='color:red'>Instantiate a circle object</span></h3>

<p class=MsoNormal><a href="Java308-fig04.htm">Figure 4</a> instantiates a
circle object as an object of the <b>Ellipse2D.Double</b> class.&nbsp; Again,
you might want to take a look at the Sun documentation, particularly with&nbsp;
regard to the parameters being passed to the constructor.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When creating an object of this class, the parameters that
are passed are actually the location, width, and height of a bounding rectangle
for the ellipse.&nbsp; If the rectangle is a square (as in this case), the
ellipse becomes a circle.&nbsp; If the rectangle is centered on the origin (as
in this case), the circle is also centered on the origin.</p>

<h3><span style='color:red'>Instantiates but doesn&#8217;t render</span></h3>

<p class=MsoNormal>Note that this fragment simply instantiates the object of
the class <b>Ellipse2D.Double</b>.&nbsp; This fragment doesn&#8217;t actually render
that object onto the screen.&nbsp; This is an important point because we
sometimes tend to overlook the difference between instantiating a <b>Shape</b>
object and passing that object to a method of the <b>Graphics2D</b> class to
actually render it on the output device.</p>

<h3><span style='color:red'>Rendering the circle</span></h3>

<p class=MsoNormal><a href="Java308-fig05.htm">Figure 5</a> passes the
reference to the <b>Shape</b> (circle) object to the <b>draw()</b> method to
have it rendered on the output device.&nbsp; Recall that the rendering process
implements the current state of the <b>AffineTransform</b> object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In this case, the transform provides scaling to convert from
<i>user space</i> units to inches on the screen.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The transform also translates the origin to the center of
the <b>Frame</b> object.&nbsp; Therefore, the circle is drawn centered in the <b>Frame</b>
object with a diameter of one inch.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The circle is drawn in the default drawing color, which is
black.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>If you manually resize the <b>Frame</b>, the size and
location of the circle doesn&#8217;t change.</p>

<h3><span style='color:red'>Get the bounding box</span></h3>

<p class=MsoNormal><a href="Java308-fig06.htm">Figure 6</a> invokes the <b>getBounds2D()</b>
method of the <b>Shape</b> interface to get the bounding rectangle for the
circle.&nbsp; Since the <b>Shape</b> is a circle, the bounding rectangle is
actually a square whose horizontal and vertical dimensions are the same the
diameter of the circle.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>A reference to the bounding box is saved in the reference
variable named <b>theBoundingBox</b> because it will be needed later.</p>

<h3><span style='color:red'>Set the Color property</span></h3>

<p class=MsoNormal>The <b>Graphics2D</b> object has several properties that are
used to control certain aspects of the rendering process.&nbsp; One of those
properties is <b>Color</b>.&nbsp;&nbsp; This property defines the actual
drawing color that is used when the <b>draw()</b> method is invoked and passed
a reference to a <b>Shape</b> object as a parameter.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a href="Java308-fig07.htm">Figure 7</a> uses a standard <i>setter</i>
method to change the drawing color to red.&nbsp; Then it invokes the <b>draw()</b>
method to draw <b>theBoundingBox</b> in red.</p>

<h3><span style='color:red'>The test boxes</span></h3>

<p class=MsoNormal>The next fragment instantiates three objects of the class <b>Rectangle2D.Double</b>
that will be used later to illustrate the <b>contains()</b> method and the <b>intersects()</b>
method of the <b>Shape</b> interface.</p>

<h3><span style='color:red'>The contains() method</span></h3>

<p class=MsoNormal>Here is part of what Sun has to say about the <b>contains()</b>
method:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;Tests if the interior of the <b>Shape</b>
  entirely contains the specified rectangular area. All coordinates that lie
  inside the rectangular area must lie within the <b>Shape</b> for the entire
  rectangular area to be considered contained within the <b>Shape</b>.&#8221;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Sun goes on to explain some cases when this method might
return false when the answer is really true due to arithmetic accuracy
issues.&nbsp; If this is of interest to you, take a look at the Sun
documentation.</p>

<h3><span style='color:red'>The intersects() method</span></h3>

<p class=MsoNormal>Here is part of what Sun has to say about the <b>intersects()</b>
method:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=354 style='width:212.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;Tests if the interior of the <b>Shape</b>
  intersects the interior of a specified rectangular area. The rectangular area
  is considered to intersect the <b>Shape</b> if any point is contained in both
  the interior of the <b>Shape</b> and the specified rectangular area.&#8221;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Again, Sun provides some caveats having to do with
arithmetic accuracy that may be of interest to you as well.&nbsp; If so, refer
to the Sun documentation.</p>

<h3><span style='color:red'>Instantiate the test boxes</span></h3>

<p class=MsoNormal><a href="Java308-fig08.htm">Figure 8</a> instantiates three
boxes.&nbsp; Given the coordinates passed as parameters to the constructor, one
box is clearly contained in the circle.&nbsp; One box intersects the circle,
and the third box is clearly outside the circle.</p>

<h3><span style='color:red'>Draw the boxes in the Frame</span></h3>

<p class=MsoNormal><a href="Java308-fig09.htm">Figure 9</a> draws the three
boxes in colors of green, blue, and magenta.</p>

<h3><span style='color:red'>Perform the contains() test and display results</span></h3>

<p class=MsoNormal><a href="Java308-fig10.htm">Figure 10</a> invokes the <b>contains()</b>
method on <b>theCircle</b> to determine if <b>theBoundingBox</b> is contained
in the circle.&nbsp; If so, the method returns <b>true</b>.&nbsp; Otherwise,
the method returns <b>false</b>.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The return value is formatted along with some explanatory
text and displayed on the standard output device.&nbsp; In this case, the
method returns <b>false</b> because <b>theBoundingBox</b> is not contained in <b>theCircle</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I am going to skip over three other almost identical
statements that test the other three boxes to see if they are contained in the
circle.&nbsp; You can view these statements in the complete listing of the
program at the end of the lesson.</p>

<h3><span style='color:red'>Perform the intersects() test and display results</span></h3>

<p class=MsoNormal><a href="Java308-fig11.htm">Figure 11</a> invokes the <b>intersects()
</b>method on theCircle to determine if <b>theBoundingBox</b> intersects the
circle.&nbsp; In this case, the screen output was</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New";
color:black'>theCircle intersects theBoundingBox: true</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This means that the bounding box has some coordinate values
in common with the circle.&nbsp; Because of the symmetry involved, it is
probably reasonable to think that there are four points on the circle that are
common with the bounding box.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Again, I am going to skip over three other almost identical
statements that test the other three boxes to see if they intersect the
circle.&nbsp; You can view those statements at the end of the lesson.</p>

<h2>&nbsp;<a name="_Summary"></a>Summary</h2>

<p class=MsoNormal>That brings us to the end of this lesson.&nbsp; We now know
how to use three of the four primary capabilities of the <b>Shape</b>
interface: <b>getBounds()</b>, <b>contains()</b>, and <b>intersects()</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I will discuss the fourth primary capability, <b>getPathIterator()</b>
in a subsequent lesson.</p>

<h2><a name="_Complete_Program_Listing"></a><a name="_Complete_Program_Listings"></a>Complete
Program Listing</h2>

<p>A complete listing of the program is provided in <a href="Java308-fig12.htm">Figure
12</a>.</p>

<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;</p>

<p><b>About the author</b> </p>

<p><b><i><a href="mailto:baldwin@austin.cc.tx.us">Richard Baldwin</a></i></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and XML
will become the primary driving force in the delivery of structured information
on the Web.</i> </p>

<p><i>Richard has participated in numerous consulting projects involving Java,
XML, or a combination of the two.&nbsp; He frequently provides onsite Java
and/or XML training at the high-tech companies located in and around Austin,
Texas.&nbsp; He is the author of Baldwin's Java Programming <a
href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java programmers.
He has also published articles on Java Programming in Java Pro magazine.</i> </p>

<p><i>Richard holds an MSEE degree from Southern Methodist University and has
many years of experience in the application of computer technology to
real-world problems.</i> </p>

<p><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i> </p>

<p>-end-<!--end--></p>

</div>

</body>

</html>
