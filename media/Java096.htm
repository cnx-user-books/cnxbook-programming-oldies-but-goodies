<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="AUTHOR" content="Richard G. Baldwin">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>... in Java by Richard G Baldwin</title>
</head>

<body>
<!--start-->
<h3 align="center"><b><i>Richard G Baldwin (512) 223-4758, </i></b><a
href="mailto:baldwin@austin.cc.tx.us"><b><i>baldwin@austin.cc.tx.us</i></b></a><b><i>,
</i></b><a href="http://www2.austin.cc.tx.us/baldwin/"><b><i>http://www2.austin.cc.tx.us/baldwin/</i></b></a></h3>

<h2 align="center"><b><!--title-->Event Handling in JDK 1.1,
Program-Generated Events and the AWTEventMulticaster Class<!--endTitle--></b></h2>

<p>Java Programming, Lecture Notes # 96, Revised 10/19/98. </p>

<ul>
    <li><a href="#Preface">Preface</a></li>
    <li><a href="#Introduction">Introduction</a></li>
    <li><a href="#Central Theme">Main Theme</a></li>
    <li><a
        href="#Essential Ingredients of Program-Generated Events">Essential
        Ingredients of Program-Generated Events</a></li>
    <li><a href="#Bare-Bones Sample Program">Bare-Bones Sample
        Program</a></li>
    <li><ul>
            <li><a
                href="#Interesting Code Fragments from Bare-Bones Sample">Interesting
                Code Fragments from Bare-Bones Sample</a></li>
            <li><a
                href="#Program Listing for Bare-Bones Sample Program">Program
                Listing for Bare-Bones Sample Program</a></li>
        </ul>
    </li>
    <li><a href="#A More Substantive Sample Program">A More
        Substantive Sample Program</a></li>
    <li><ul>
            <li><a href="#Interesting Code Fragments">Interesting
                Code Fragments</a></li>
            <li><a href="#Program Listing">Program Listing</a></li>
        </ul>
    </li>
    <li><a href="#Review">Review</a></li>
</ul>

<hr align="left">

<h2 align="center"><a name="Preface"></a><font color="#FF0000"><b>Preface</b></font></h2>

<p>Students in Prof. Baldwin's <b><u>Intermediate Java
Programming</u></b> classes at ACC are responsible for knowing
and understanding all of the material in this lesson. </p>

<p align="center">JDK 1.1 was formally released on February 18,
1997. This lesson was originally written on March 23, 1997 using
the software and documentation in the JDK 1.1 download package. </p>

<h2 align="center"><a name="Introduction"></a><font
color="#FF0000">Introduction</font></h2>

<p>In previous lessons on event handling under JDK 1.1, you have
learned how to use the <i>Source/Listener</i> concept embodied in
the <i>Delegation Event Model </i>to handle different types of
events generated by visual components on the Graphical User
Interface. </p>

<p>In this lesson, we take the subject of event handling one step
further by teaching you how to create and dispatch events <i>under
program control</i> which produce the same response as if the
events were caused by actions of the user on visual components.
In other words, you will learn how to create and dispatch events
under program control which <i>simulate the behavior of a user</i>.
For example, you might dispatch an event of a given type if a
particular character were read from a file. </p>

<p>Although you may not immediately see the need to create and
dispatch events under program control, an understanding of this
material is critical to an understanding of <b>Lightweight
Components</b> that will be presented in a subsequent lesson.
Therefore, it is very important that you gain a solid
understanding of the concept of program-generated events under
JDK 1.1 before embarking on your studies of <b>Lightweight
Components</b>. </p>

<p align="center">In addition, an understanding of this material
will give you a much better understanding of what you are really
doing when you implement the <i>Delegation Event Model</i> using
visual components from the <b>AWT</b>. </p>

<h2 align="center"><a name="Central Theme"></a><font
color="#FF0000">Main Theme</font></h2>

<p>The main theme of this lesson is the use of the <b>AWTEventMulticaster
</b>class of the <i>Delegation Event Model.</i> This class is
used to maintain a list of <b>Listener </b>objects which are
registered to be notified whenever an event of a particular type
occurs on a particular object and to cause those <b>Listener</b>
objects to be notified. In previous lessons, the use of the <b>AWTEventMulticaster</b>
class has occurred &quot;under the covers.&quot; In this lesson,
we will provide some exposure as to how that class does what it
does. </p>

<p>As is frequently the case, we will use sample programs to
illustrate the concepts. In this lesson, we will take it in two
steps. </p>

<ul>
    <li>First we will take a look at a <u>bare-bones</u> sample
        program which illustrates the essential ingredients of
        program-generated events.</li>
    <li>Then we will take a look at a more substantive program
        which illustrates the <b>AWTEventMulticaster </b>class of
        the <i>Delegation Event Model</i>.</li>
</ul>

<h2 align="center"><a
name="Essential Ingredients of Program-Generated Events"></a><font
color="#FF0000">Essential Ingredients of Program-Generated Events</font></h2>

<p>In order to use program-generated events with the techniques
described in this lesson, you will need to define a class that is
capable of generating the type of events of interest. In this
lesson we concentrate on <b>Action </b>events. However, there is
no reason that you could not use similar techniques to generate
low-level events such as mouse events and key events. </p>

<p>The class must be a subclass of the <b>Component </b>class and
must include the following three members (as a minimum): </p>

<ul>
    <li><i>An instance variable</i> that is a reference to a <u>list</u>
        of registered <b>Listener </b>objects. In this program,
        the <b>Listener </b>objects are of type <b>ActionListener</b>.
        The instance variable is of type <b>ActionListener </b>and
        could contain a reference to a single object of that type
        or a reference to a list of objects of that type.</li>
    <li><i>A method</i> for creating the list mentioned above. In
        the bare-bones program the method is named <b>makeActionListenerList()</b>
        just to illustrate that the name is not technically
        important. However, for consistency with documentation on
        the <i>Delegation Event Model </i>(and other good reasons
        as well), it <u>should</u> be named <b>addActionListener()</b>.
        The list should be constructed within the body of the
        method using a call to the <b>AWTEventMulticaster.add()</b>
        method which returns a reference to the list. We will
        discuss the reasons for doing it this way later.</li>
    <li><i>A method</i> which invokes the appropriate action
        method of the <b>Listener </b>class on the list of
        registered <b>Listener </b>objects. In the sample
        programs in this lesson, the <b>Listener </b>objects are
        of type <b>ActionListener </b>so the appropriate action
        method is <b>actionPerformed()</b>. For other types of <b>Listener
        </b>objects, the appropriate action method would be a
        different method. In these programs, the method that
        invokes the action method of the <b>Listener </b>object
        is called <b>generateActionEvent()</b>. In the bare-bones
        program, there is only one <b>Listener </b>object in the
        list. In the second program, there are multiple <b>Listener</b>
        objects in the list.</li>
</ul>

<h2 align="center"><a name="Bare-Bones Sample Program"></a><font
color="#FF0000">Bare-Bones Sample Program</font></h2>

<p>This program is designed to be compiled and run under JDK 1.1
This is a bare-bones program that illustrates Program Generated
Events under JDK 1.1. </p>

<p>A non-visual object class (named <b>NonVisual</b>) is defined.
Objects of this class are capable of generating <b>Action </b>events.
</p>

<p>A single object of the <b>NonVisual </b>class is instantiated.
A single <b>ActionListener </b>class is also defined. An object
of this class is instantiated and registered to listen for <b>Action
</b>events on the <b>NonVisual </b>object. </p>

<p>Then the <b>generateActionEvent()</b> method is invoked on the
<b>NonVisual </b>object causing an <b>Action </b>event to be
trapped and processed by the <b>ActionListener </b>object. The
processing is simply to display information identifying the <b>NonVisual
</b>object that generated the event. </p>

<p>The output from the program is: <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre><b>Copyright 1997, R.G.Baldwin
actionPerformed() method invoked on NonVisualObject</b></pre>
        </td>
    </tr>
</table>

<p align="center">The program was tested using JDK 1.1 running
under Win95. </p>

<h3 align="center"><a
name="Interesting Code Fragments from Bare-Bones Sample"></a><font
color="#FF0000">Interesting Code Fragments from Bare-Bones Sample
Program</font></h3>

<p>The first interesting code fragment is the code in the
constructor that </p>

<ul>
    <li>instantiates an object of the new <b>NonVisual</b> type,</li>
    <li>invokes the <b>makeActionListenerList()</b> method on the
        <b>NonVisual</b> object to register a <b>Listener </b>object
        on the <b>NonVisual</b> object, and</li>
    <li>invokes the <b>generateActionEvent()</b> method on the <b>NonVisual</b>
        object to cause an <b>Action </b>event to be generated by
        the <b>NonVisual</b> object.</li>
</ul>

<p>&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp; NonVisual nonVisualObject = <b>new NonVisual(&quot;NonVisualObject</b>&quot;);
&nbsp;&nbsp;&nbsp; nonVisualObject.makeActionListenerList(new AnActionListenerClass());
&nbsp;&nbsp;&nbsp; nonVisualObject.generateActionEvent();</pre>
        </td>
    </tr>
</table>

<p>The next interesting code fragment is the declaration of the
instance variable in the <b>NonVisual</b> class definition that
will refer to a list of registered <b>Listener </b>objects. As
mentioned earlier, this instance variable could just as easily
refer to a single object of the <b>ActionListener </b>type as to
refer to a list of such objects. In fact, in this bare-bones
program it does refer to a single instance of an <b>ActionListener
</b>object as we will discuss in more detail later. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>&nbsp;ActionListener actionListener;//list of registered action listener objects</pre>
        </td>
    </tr>
</table>

<p>The next interesting code fragment is the statement that is
used to <u>construct the list</u> of registered <b>Listener </b>objects
by adding a new object to the list. </p>

<p>The first time this statement is executed in a program, it
simply returns a reference to the object being added to the list.
</p>

<p>If it is executed a second time, it returns a reference to a
list of objects that is being maintained separately (this is
explained more fully later). </p>

<p>In the bare-bones program, only one <b>Listener </b>object is
added to the list. If we were to examine the contents of the
reference returned by the <b>AWTEventMulticaster.add()</b>
method, we would find that it is simply a reference to the
object. In a later program, we will see how it refers to a list
when more than one object is added to the list. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp; actionListener = AWTEventMulticaster.add(actionListener, listener);</pre>
        </td>
    </tr>
</table>

<p>The final interesting code fragment in this bare-bones program
is the statement that invokes the <b>actionPerformed() </b>method
of the <b>ActionListener </b>object, or more properly invokes
that method on all the objects in the list of registered <b>ActionListener</b>
objects. </p>

<p>Fortunately, all we have to do is to invoke the method once on
the instance variable that refers to the list and the system
takes care of invoking the method on all the objects in the list.
This is the <b><u>central feature</u></b> of the <b>AWTEventMulticaster</b>
class. </p>

<p>As you can see, this code instantiates an object of type <b>ActionEvent</b>
and passes that object as a parameter to the <b>actionPerformed()</b>
method thus satisfying the signature requirements of the <b>actionPerformed()</b>
method. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp; actionListener.actionPerformed(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ID));</pre>
        </td>
    </tr>
</table>

<p>The parameters for the <b>ActionEvent</b> constructor are
shown below. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><tt>public ActionEvent(Object source, int id, String
        command)</tt>&nbsp; <p><tt>Constructs an ActionEvent
        object with the specified source object.&nbsp;</tt>&nbsp;
        </p>
        <p><tt>Parameters:&nbsp;</tt>&nbsp; <br>
        <tt>source - the object where the event originated&nbsp;</tt>&nbsp;
        <br>
        <tt>id - the type of event&nbsp;</tt>&nbsp; <br>
        <tt>command - the command string for this action event</tt></p>
        </td>
    </tr>
</table>

<p align="center">So there you have the <u>essential ingredients</u>
of program-generated events reduced to code fragments. A complete
listing of the program is contained in the next section. </p>

<h3 align="center"><a
name="Program Listing for Bare-Bones Sample Program"></a><font
color="#FF0000">Program Listing for Bare-Bones Sample Program</font></h3>

<p>This section contains a complete listing of the bare-bones
program. Refer to previous sections for an operational
description of the program. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>/*File Event25.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under JDK 1.1

This is a bare-bones program that illustrates Program Generated&nbsp;
Events under JDK 1.1.

The output from the program is:

<b>Copyright 1997, R.G.Baldwin
actionPerformed() method invoked on NonVisualObject

</b>The program was tested using JDK 1.1 running under Win95.
*/
//=======================================================================
import java.awt.*;
import java.awt.event.*;
//=======================================================================

public class Event25 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Event25();//instantiate an object of this type
&nbsp; }//end main
//-------------------------------------------------------------------------
&nbsp; public Event25(){//constructor
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Copyright 1997, R.G.Baldwin&quot;);
<b>&nbsp;&nbsp;&nbsp; NonVisual nonVisualObject = new NonVisual(&quot;NonVisualObject&quot;);
&nbsp;&nbsp;&nbsp; nonVisualObject.makeActionListenerList(new AnActionListenerClass());
&nbsp;&nbsp;&nbsp; nonVisualObject.generateActionEvent();
</b>&nbsp; }//end constructor
}//end class Event25
//========================================================================

//Class to respond to action events
class <b>AnActionListenerClass </b>implements ActionListener{
&nbsp; public void <b>actionPerformed</b>(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;actionPerformed() method invoked on &quot; + e.getActionCommand());
&nbsp; }//end actionPerformed
}//end class AnActionListenerClass
//========================================================================

//Class to create object capable of generating Action events.
//-------------------------------------------------------------------------
class <b>NonVisual </b>extends Component {
&nbsp; String ID; // The ID of the object
<b>&nbsp; ActionListener actionListener;//list</b> of registered action listener objects
&nbsp; //-----------------------------------------------------------------------
&nbsp; public NonVisual(String ID) {//<b>Constructs </b>a NonVisual object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.ID = ID;
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------------------------
&nbsp; public void <b>makeActionListenerList(ActionListener</b> listener) {
<b>&nbsp;&nbsp;&nbsp; actionListener = AWTEventMulticaster.add(actionListener, listener);
</b>&nbsp; }//end makeActionListenerList()
&nbsp; //-----------------------------------------------------------------------
&nbsp; public void generateActionEvent() {
<b>&nbsp;&nbsp;&nbsp; actionListener.actionPerformed(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionEvent(this, ActionEvent.ACTION_PERFORMED, ID));
</b>&nbsp; }//end generateActionEvent
}//end class NonVisual</pre>
        </td>
    </tr>
</table>

<h2 align="center"><a name="A More Substantive Sample Program"></a><font
color="#FF0000">A More Substantive Sample Program</font></h2>

<p>The next program is more substantial and is designed to
illustrate the ability of the <b>AWTEventMulticaster </b>class to
dispatch events to <u>more than one</u> <b>Listener </b>object in
a list of registered <b>Listener </b>objects. </p>

<p>This program is designed to be compiled and run under JDK 1.1
and illustrates Program Generated Events under JDK 1.1. </p>

<p>A non-visual object class (named <b>NonVisual</b>) is defined.
Objects of this class are capable of generating <b>Action </b>events.
The mechanism for causing an object of this type to generate an <b>Action
</b>event is to invoke the <b>generateActionEvent()</b> method on
an object of the class. </p>

<p>Two objects of the <b>NonVisual </b>class are instantiated.
Also, two different <b>ActionListener </b>classes are defined. </p>

<p>An <b>ActionListener </b>object of one of these classes is
instantiated and registered to listen for <b>Action </b>events on
<u>both</u> of the objects of the <b>NonVisual </b>class. </p>

<p>In addition, an object of the <u>other</u> <b>ActionListener </b>class
is instantiated and registered to listen for <b>Action </b>events
on <u>only one</u> of the NonVisual objects. </p>

<p>Thus, one <b>NonVisual </b>object is registered with <u>only
one</u> <b>ActionListener </b>object. The other <b>NonVisual </b>object
is registered with <u>two different</u> <b>ActionListener </b>objects.
</p>

<p>The registration of two different <b>ActionListener </b>objects
on a single <b>NonVisual </b>object requires the <b>AWTEventMulticaster
</b>class to dispatch <b>Action </b>events to two different <b>Listener
</b>objects and illustrates the <u>central feature</u> of the <b>AWTEventMulticaster</b>
class. </p>

<p>After the <b>NonVisual </b>objects are instantiated and the <b>ActionListener
</b>objects are registered on the <b>NonVisual </b>objects, the <b>generateActionEvent()</b>
method is invoked on <u>each</u> of the <b>NonVisual </b>objects.
This causes <b>Action </b>events to be generated and to be
trapped and processed by the respective <b>ActionListener </b>objects.
</p>

<p>Numerous statements are included to <u>explain what is
happening along the way</u>. All of the output from the program
goes to the standard output device. </p>

<p>The output from the program for one particular run was as
shown below, Some hard return characters were manually inserted
to force the text to fit on the printed page. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>Copyright 1997, R.G.Baldwin
Instantiate two NonVisual objects with the ability to generate&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; Action events.
Name of first NonVisual object: NonVisualObjA
Name of second NonVisual object: NonVisualObjB

Register ActionListener objects on the NonVisual objects

addActionListener() method invoked
NonVisualObj A:&nbsp;&nbsp; Listener to add is: FirstActionListener@1cc728
Invoke AWTEventMulticaster.add() to get reference to ActionListener
NonVisualObj A:&nbsp;&nbsp; Ref to ActionListener is: FirstActionListener@1cc728


addActionListener() method invoked
NonVisualObj B:&nbsp;&nbsp; Listener to add is: FirstActionListener@1cc761
Invoke AWTEventMulticaster.add() to get reference to ActionListener
NonVisualObj B:&nbsp;&nbsp; Ref to ActionListener is: FirstActionListener@1cc761


addActionListener() method invoked
NonVisualObj B:&nbsp;&nbsp; Listener to add is: SecondActionListener@1cc783
Invoke AWTEventMulticaster.add() to get reference to ActionListener
NonVisualObj B:&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ref to ActionListener is: java.awt.AWTEventMulticaster@1cc799

Invoke generateActionEvent() method on the object named NonVisualObjA
which has only one registered ActionListener object.
In generateActionEvent() method, dispatching ACTION_PERFORMED event to&nbsp;
FirstActionListener@1cc728 for NonVisualObj A
In actionPerformed() method of FirstActionListener object
actionPerformed() method invoked on NonVisualObj A

Invoke generateActionEvent() method on the object named NonVisualObjB
which has two registered ActionListener objects.
In generateActionEvent() method, dispatching ACTION_PERFORMED event to&nbsp;
java.awt.AWTEventMulticaster@1cc799 for NonVisualObj B
In actionPerformed() method of FirstActionListener object
actionPerformed() method invoked on NonVisualObj B
In actionPerformed() method of SecondActionListener object
actionPerformed() method invoked on NonVisualObj B</pre>
        </td>
    </tr>
</table>

<p align="center">The program was tested using JDK 1.1 running
under Win95. </p>

<h3 align="center"><a name="Interesting Code Fragments"></a><font
color="#FF0000">Interesting Code Fragments</font></h3>

<p>Much of the code in this program replicates code that you have
seen in previous programs. In addition, much of the code consists
of<b> System.out.println()</b> statements that are there to
explain what is happening when you view the output. For the most
part, we will skip code that you have seen before and concentrate
only on the code that is germane to the objective of this program
-- <i>illustration of program-generated events with particular
emphasis on the </i><b><i>AWTEventMulticaster </i></b><i>class</i>.
</p>

<p>The first interesting code fragment instantiates two objects
of the <b>NonVisual </b>class with labels and assigns names to
the objects. When you assign names in this manner, you should
make certain that you assign a <i>unique </i>name to each object.
<br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp; NonVisual aNonVisual = new NonVisual(&quot;NonVisualObj A&quot;);
&nbsp;&nbsp;&nbsp; aNonVisual.setName(&quot;NonVisualObjA&quot;);

&nbsp;&nbsp;&nbsp; NonVisual bNonVisual = new NonVisual(&quot;NonVisualObj B&quot;);
&nbsp;&nbsp;&nbsp; bNonVisual.setName(&quot;NonVisualObjB&quot;);</pre>
        </td>
    </tr>
</table>

<p>The next interesting code fragment registers <b>ActionListener
</b>objects on the two <b>NonVisual </b>objects as described
earlier. Note that unlike the bare-bones program, this program
uses the conventional name of <b>addActionListener()</b> for the
method that generates the list of registered <b>ActionListener </b>objects.
<br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp; <b>aNonVisual.addActionListener(new</b> <b>FirstActionListener</b>());
&nbsp;&nbsp;&nbsp; <b>bNonVisual.addActionListener(new</b> <b>FirstActionListener</b>());
&nbsp;&nbsp;&nbsp; <b>bNonVisual.addActionListener(new</b> <b>SecondActionListener</b>());</pre>
        </td>
    </tr>
</table>

<p>The next interesting code fragment causes each of the <b>NonVisual
</b>objects to generate an <b>Action </b>event. Note that some
uninteresting code was deleted between these two statements shown
below. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp; aNonVisual.generateActionEvent();</pre>
        <pre>&nbsp;&nbsp;&nbsp; ...

&nbsp;&nbsp;&nbsp; bNonVisual.generateActionEvent();</pre>
        </td>
    </tr>
</table>

<p>This is followed in the program by two relatively-standard <b>ActionListener
</b>class definitions which won't be repeated here. </p>

<p>The next interesting code fragment is the beginning of the <b>NonVisual
</b>class that <i>extends </i>the <b>Component </b>class and the
declaration of two instance variables of the class. (Note that
some comments were removed from the code fragment.) <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>class NonVisual extends Component {
&nbsp; ...
&nbsp; String ID; // The ID of the object
&nbsp; ActionListener actionListener;</pre>
        </td>
    </tr>
</table>

<p>The first instance variable in the above code fragment is a
reference to the identification of the object which is passed in
as a parameter when the object is instantiated. In our program,
this is a <b>String </b>object provided as a parameter to the
constructor when the <b>NonVisual </b>object is instantiated. </p>

<p>The constructor consists of a single assignment statement
which assigns its incoming parameter to this instance variable,
so we won't show it here. </p>

<p>The next instance variable with the identifier of <b>actionListener</b>
is <u>vital to this program</u>. </p>

<p>Once <b>ActionListener </b>objects are registered on this <b>NonVisual
</b>object, this instance variable will <u>either</u> </p>

<ul>
    <li>contain a reference to a single <b>ActionListener </b>object
        (if there is only one <b>ActionListener </b>object), or</li>
    <li>contain a reference to an object of type <b>AWTEventMulticaster
        </b>(if there is more than one <b>ActionListener </b>object).</li>
</ul>

<p>In the second case, when we later invoke the <b>actionPerformed()</b>
method on the instance variable named <b>actionListener</b>, we
will in fact be invoking that method on an object of type <b>AWTEventMulticaster
</b>which will, in turn, <u>invoke the method on all of the
objects</u> of type <b>ActionListener </b>contained in the list
of <b>ActionListener</b> objects registered on the <b>NonVisual</b>
object. As mentioned earlier, this is the <u>central feature</u>
of the <b>AWTEventMulticaster </b>class. </p>

<p>The next interesting code fragment is the code which
constructs the list of objects registered as <b>Listener </b>objects
on a specific <b>NonVisual </b>object. </p>

<p>New objects are added to the list by calling the <i>static</i>
<b>add()</b> method of Class <b>java.awt.AWTEventMulticaster</b>
and passing to it the instance variable which references the list
along with the new <b>Listener </b>object to be added to the
list. </p>

<p>When the first object is added to the list, a reference to the
<b>Listener </b>object itself is returned. Hence, in the case of
a list containing a single <b>Listener </b>object, the reference
to the list is simply a reference to the <b>Listener </b>object. </p>

<p>When additional <b>Listener </b>objects are added to the list,
a reference to an object of type <b>java.awt.AWTEventMulticaster</b>
is returned by the <b>add()</b> method of class <b>AWTEventMulticaster</b>.
According to the JDK 1.1 documentation on class <b>AWTEventMulticaster</b>,
<br>
&nbsp; </p>

<table border="1" bgcolor="#80FFFF">
    <tr>
        <td><pre><tt>&quot;This class will manage the structure of a&nbsp;
chain of event listeners and dispatch events&nbsp;
to those listeners.&quot;</tt></pre>
        </td>
    </tr>
</table>

<p>When the <b>actionPerformed()</b> method is later invoked on
the reference to the list, the method will be invoked either on a
single object of type <b>ActionListener</b> or will be invoked on
an object of type <b>AWTEventMulticaster</b>. In the second case,
the <b>actionPerformed()</b> method of class <b>AWTEventMulticaster
</b>assumes responsibility for invoking the <b>actionPerformed()</b>
method on all the objects in the list. </p>

<p>With that long introduction, the interesting code fragment is
not too complex: <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>actionListener = AWTEventMulticaster.add(actionListener, listener);</pre>
        </td>
    </tr>
</table>

<p>Of particular interest to us is the <i>output </i>produced by
the program when two different <b>ActionListener </b>objects are
registered on a single <b>NonVisual </b>object. In this case, pay
particular attention to the identification (highlighted in
boldface) of the <b>Listener </b>object passed in as a parameter
to the <b>addActionListener()</b> method and the identification
of the object ultimately referenced by the instance variable
which references the list. </p>

<p>When the first <b>Listener </b>object was added to the list,
the reference was set to the object itself. When the second
Listener object was added to the list, the reference was set to <b>java.awt.AWTEventMulticaster@1cc799.</b>
</p>

<p>A portion of the output from the program illustrating this
behavior is shown below (with some hard returns manually
inserted). <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>addActionListener() method invoked
NonVisualObj B:&nbsp;&nbsp; Listener to add is: <b>FirstActionListener@1cc761
</b>Invoke AWTEventMulticaster.add() to get reference to ActionListener
NonVisualObj B:&nbsp;&nbsp; Ref to ActionListener is: <b>FirstActionListener@1cc761


</b>addActionListener() method invoked
NonVisualObj B:&nbsp;&nbsp; Listener to add is: <b>SecondActionListener@1cc783
</b>Invoke AWTEventMulticaster.add() to get reference to ActionListener
NonVisualObj B:&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Ref to ActionListener is: <b>java.awt.AWTEventMulticaster@1cc799</b></pre>
        </td>
    </tr>
</table>

<p>The next interesting code fragment occurs in a method named <b>generateActionEvent()</b>.
The purpose of this method is to instantiate an <b>ActionEvent</b>
object and to invoke the <b>actionPerformed()</b> method on the
reference to the list of <b>ActionListener </b>objects, passing
the <b>ActionEvent </b>object as a parameter. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>actionListener.actionPerformed(new ActionEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this, ActionEvent.ACTION_PERFORMED, ID));</pre>
        </td>
    </tr>
</table>

<p align="center">As mentioned earlier, a lot of output
statements were included in this program so that the output would
contain an explanation of what is happening as the program
executes. This section has highlighted only the code necessary to
implement program-generated events with multicasting. A complete
listing of the program along with the output produced by the
program is contained in the next section. </p>

<h3 align="center"><a name="Program Listing"></a><font
color="#FF0000">Program Listing</font></h3>

<p>This section contains a complete listing of the program with
additional comments. The comments include the output produced by
the program. See the previous sections for an operational
description of the program. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>/*File Event24.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under JDK 1.1

This program illustrates Program Generated Events under JDK 1.1.

The output from the program for one particular run was:

Copyright 1997, R.G.Baldwin
Instantiate two NonVisual objects with the ability to generate&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; Action events.
Name of first NonVisual object: NonVisualObjA
Name of second NonVisual object: NonVisualObjB

Register ActionListener objects on the NonVisual objects

addActionListener() method invoked
NonVisualObj A:&nbsp;&nbsp; Listener to add is: FirstActionListener@1cc728
Invoke AWTEventMulticaster.add() to get reference to ActionListener
NonVisualObj A:&nbsp;&nbsp; Ref to ActionListener is: FirstActionListener@1cc728


addActionListener() method invoked
NonVisualObj B:&nbsp;&nbsp; Listener to add is: FirstActionListener@1cc761
Invoke AWTEventMulticaster.add() to get reference to ActionListener
NonVisualObj B:&nbsp;&nbsp; Ref to ActionListener is: FirstActionListener@1cc761


addActionListener() method invoked
NonVisualObj B:&nbsp;&nbsp; Listener to add is: SecondActionListener@1cc783
Invoke AWTEventMulticaster.add() to get reference to ActionListener
NonVisualObj B:&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; Ref to ActionListener is: java.awt.AWTEventMulticaster@1cc799

Invoke generateActionEvent() method on the object named NonVisualObjA
which has only one registered ActionListener object.
In generateActionEvent() method, dispatching ACTION_PERFORMED event to&nbsp;
FirstActionListener@1cc728 for NonVisualObj A
In actionPerformed() method of FirstActionListener object
actionPerformed() method invoked on NonVisualObj A

Invoke generateActionEvent() method on the object named NonVisualObjB
which has two registered ActionListener objects.
In generateActionEvent() method, dispatching ACTION_PERFORMED event to&nbsp;
java.awt.AWTEventMulticaster@1cc799 for NonVisualObj B
In actionPerformed() method of FirstActionListener object
actionPerformed() method invoked on NonVisualObj B
In actionPerformed() method of SecondActionListener object
actionPerformed() method invoked on NonVisualObj B


The program was tested using JDK 1.1 running under Win95.
*/
//=======================================================================
import java.awt.*;
import java.awt.event.*;
//=======================================================================

public class Event24 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Event24();//instantiate an object of this type
&nbsp; }//end main
//-------------------------------------------------------------------------
&nbsp; public Event24(){//constructor
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Copyright 1997, R.G.Baldwin&quot;);
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Instantiate two NonVisual objects with the &quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + &quot;ability to generate Action events.&quot;);
&nbsp;&nbsp;&nbsp; NonVisual aNonVisual = new NonVisual(&quot;NonVisualObj A&quot;);
&nbsp;&nbsp;&nbsp; aNonVisual.setName(&quot;NonVisualObjA&quot;);
&nbsp;&nbsp;&nbsp; NonVisual bNonVisual = new NonVisual(&quot;NonVisualObj B&quot;);
&nbsp;&nbsp;&nbsp; bNonVisual.setName(&quot;NonVisualObjB&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Name of first NonVisual object: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aNonVisual.getName());
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Name of second NonVisual object: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bNonVisual.getName());

&nbsp;&nbsp;&nbsp; //Register cross-linked ActionListener&nbsp;
&nbsp;&nbsp;&nbsp; // objects on the NonVisual objects.
&nbsp;&nbsp;&nbsp; // One NonVisual object is registered on a&nbsp;
&nbsp;&nbsp;&nbsp; // single ActionListener object.
&nbsp;&nbsp;&nbsp; // The other NonVisual object is registered on&nbsp;
&nbsp;&nbsp;&nbsp; // two different ActionListener
&nbsp;&nbsp;&nbsp; // objects, one of which is of the same class&nbsp;
&nbsp;&nbsp;&nbsp; // as the object registered on
&nbsp;&nbsp;&nbsp; // the first NonVisual object.
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot; ActionListener objects on the NonVisual objects&quot;);
&nbsp;&nbsp;&nbsp; aNonVisual.addActionListener(new FirstActionListener());
&nbsp;&nbsp;&nbsp; bNonVisual.addActionListener(new FirstActionListener());
&nbsp;&nbsp;&nbsp; bNonVisual.addActionListener(new SecondActionListener());

&nbsp;&nbsp;&nbsp; //Now cause each of the NonVisual objects to generate an Action event.
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Invoke generateActionEvent() method on the object named &quot;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + aNonVisual.getName());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;which has only one registered ActionListener object.&quot;);
&nbsp;&nbsp;&nbsp; aNonVisual.generateActionEvent();//do it
&nbsp;&nbsp;&nbsp; System.out.println();//blank line
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Invoke generateActionEvent() method on the object named &quot;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + bNonVisual.getName());
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;which has two registered ActionListener objects.&quot;);
&nbsp;&nbsp;&nbsp; bNonVisual.generateActionEvent();//do it

&nbsp; }//end constructor
}//end class Event24
//========================================================================
//The following two classes are standard ActionListener classes. Objects
// of these classes simply trap Action events and display some information
// about them.

//First class to respond to action events
class FirstActionListener implements ActionListener{
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;In actionPerformed() method of FirstActionListener object&quot;);
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;actionPerformed() method invoked on &quot; + e.getActionCommand());
&nbsp; }//end actionPerformed
}//end class FirstActionListener
//========================================================================
//Second class to respond to action events
class SecondActionListener implements ActionListener{
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;In actionPerformed() method of SecondActionListener object&quot;);
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;actionPerformed() method invoked on &quot; + e.getActionCommand());&nbsp;&nbsp;
&nbsp; }//end actionPerformed
}//end class FirstActionListener


//////////////////////////////////////////////////////////////////////////
//&nbsp; The following class produces a NonVisual object capable of generating
//&nbsp; Action events.
//========================================================================
class NonVisual extends Component {
&nbsp; //The state of a NonVisual object at any time is defined by the following
&nbsp; // instance variables.
&nbsp; String ID; // The ID of the object
&nbsp; ActionListener actionListener;//Refers to a list of ActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // objects to be notified when an Action
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // event occurs.&nbsp; (See addActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // description below).

&nbsp; //-----------------------------------------------------------------------
&nbsp; public NonVisual(String ID) {//Constructs a NonVisual object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.ID = ID;
&nbsp; }//end constructor

&nbsp; //-----------------------------------------------------------------------
&nbsp; //The behavior of a NonVisual object is defined by the following
&nbsp; // instance methods.
&nbsp; //-----------------------------------------------------------------------

&nbsp; /*
&nbsp; The following method adds ActionListener objects passed in as parameters&nbsp;
&nbsp;&nbsp; to the list of ActionListener objects designated to be notified of&nbsp;
&nbsp;&nbsp; action events from a NonVisual object.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; Notification takes place in a different method by invoking the&nbsp;
&nbsp;&nbsp; actionPerformed() method of each of the ActionListener objects on&nbsp;
&nbsp;&nbsp; the list.
&nbsp;&nbsp;
&nbsp; New objects are added to the list by calling the static add() method
&nbsp;&nbsp; of Class java.awt.AWTEventMulticaster and passing to it the instance&nbsp;
&nbsp;&nbsp; variable which references the list along with the new listener object&nbsp;
&nbsp;&nbsp; to be added.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; For the first listener object added to the list, a reference to the&nbsp;
&nbsp;&nbsp; Listener object itself is returned.&nbsp; Hence, in that case the reference&nbsp;
&nbsp;&nbsp; to the list is simply a reference to the Listener object.
&nbsp;&nbsp;
&nbsp; When additional listener objects are added to the list, a reference&nbsp;
&nbsp;&nbsp; to an object of type java.awt.AWTEventMulticaster is returned by the&nbsp;
&nbsp;&nbsp; add() method of Class AWTEventMulticaster.
&nbsp;&nbsp;
&nbsp; According to the JDK 1.1 documentation on Class AWTEventMulticaster,&nbsp;
&nbsp;&nbsp; &quot;This class will manage the structure of a chain of event&nbsp;
&nbsp;&nbsp; listeners and dispatch events to those listeners.&quot;
&nbsp;&nbsp;
&nbsp; When the actionPerformed() method is later invoked on the reference to
&nbsp;&nbsp; the list, either the actionPerformed() method is invoked on a single
&nbsp;&nbsp; object, or the AWTEventMulticaster object assumes responsibility for
&nbsp;&nbsp; invoking the actionPerformed() method on all of the Listener objects
&nbsp;&nbsp; that it is maintaining in its list of Listener objects.
&nbsp; */
&nbsp; public void addActionListener(ActionListener listener) {
&nbsp;&nbsp;&nbsp; System.out.println();//blank line
&nbsp;&nbsp;&nbsp; System.out.println(&quot;addActionListener() method invoked&quot;);
&nbsp;&nbsp;&nbsp; System.out.println(ID + &quot;:&nbsp;&nbsp; Listener to add is: &quot; + listener);
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Invoke AWTEventMulticaster.add() to get &quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + &quot;reference to ActionListener&quot;);
&nbsp;&nbsp;&nbsp; actionListener = AWTEventMulticaster.add(actionListener, listener);
&nbsp;&nbsp;&nbsp; System.out.println(ID + &quot;:&nbsp;&nbsp; Ref to ActionListener is: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actionListener);
&nbsp;&nbsp;&nbsp; System.out.println();//blank line
&nbsp; }//end addActionListener()
&nbsp; //-----------------------------------------------------------------------
&nbsp; //The&nbsp; purpose of this method is to invoke the actionPerformed() method&nbsp;
&nbsp; // on all the Listener objects that are contained in a list of Listener
&nbsp; // objects that are registered to listen for Action events being
&nbsp; // generated by this NonVisual object.&nbsp; This is accomplished by invoking
&nbsp; // the actionPerformed() method on the reference to the list.&nbsp; When this
&nbsp; // is done, an ActionEvent object is instantiated and passed&nbsp;
&nbsp; //as a parameter.
&nbsp; public void generateActionEvent() {
&nbsp;&nbsp;&nbsp; if(actionListener != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //confirm that an ActionListener is registered
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;In generateActionEvent() method, dispatching &quot;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + &quot;ACTION_PERFORMED event to &quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(actionListener + &quot; for &quot; + ID);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actionListener.actionPerformed(new ActionEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this, ActionEvent.ACTION_PERFORMED, ID));
&nbsp;&nbsp;&nbsp; }//end if on actionListener
&nbsp; }//end paint
}//end class NonVisual
//===========================================================</pre>
        </td>
    </tr>
</table>

<h2 align="center"><a name="Review"></a><font color="#FF0000">Review</font></h2>

<p>Q - Without viewing the solution that follows, write a Java
application that meets the specifications provided in the
comments to the following application. </p>

<p><font color="#0000FF" size="2">A - See solution below:</font> <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre><font color="#0000FF">/*File SampProg129.java Copyright 1997, R.G.Baldwin
This program illustrates Program Generated Events&nbsp;
under JDK 1.1.

A non-visual object class (named NonVisual) is defined.
Objects of this class are capable of generating Action&nbsp;
events.

One object of the NonVisual class is instantiated.

One ActionListener class is defined.&nbsp; An object of this&nbsp;
class is instantiated and registered to listen for&nbsp;
Action events on the NonVisual object mentioned above.

The user is prompted to enter some characters at&nbsp;
the keyboard.&nbsp; Whenever the user enters the character 'x'
the generateActionEvent() method is invoked on the&nbsp;
NonVisual object causing an Action event to occur and to&nbsp;
be trapped and processed by the ActionListener object.&nbsp;&nbsp;
This causes the following message to be displayed on the&nbsp;
screen:&nbsp;&nbsp;

<b>actionPerformed() method invoked on NonVisualObject

</b>The program was tested using JDK 1.1.3 running under Win95.
*/
//=========================================================
import java.awt.*;
import java.awt.event.*;
import java.io.*;
//=========================================================

public class SampProg129 {
&nbsp; NonVisual nonVisualObject; //reference to a NonVisual obj
&nbsp; //-------------------------------------------------------
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate an object of this type
&nbsp;&nbsp;&nbsp; SampProg129 thisObj = new SampProg129();
&nbsp;&nbsp;&nbsp; int data = 0;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Enter some characters&quot;);
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Enter an 'x' to generate an Action Event&quot;);
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Enter Ctrl-z to terminate&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; while((data = System.in.read()) != -1){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if( (char)data == 'x')
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //When the user enters an 'x', cause an Action
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Event to be generated on the NonVisual object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // referred to by the instance variable of this
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // class named nonVisualObject.&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; thisObj.nonVisualObject.generateActionEvent();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; }catch(IOException e){}
&nbsp;&nbsp;&nbsp;
&nbsp; }//end main
//---------------------------------------------------------
&nbsp; public SampProg129(){//constructor
&nbsp;&nbsp;&nbsp; System.out.println(&quot;Copyright 1997, R.G.Baldwin&quot;);
&nbsp;&nbsp;&nbsp; nonVisualObject = new NonVisual(&quot;NonVisualObject&quot;);
&nbsp;&nbsp;&nbsp; nonVisualObject.makeActionListenerList(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new AnActionListenerClass());
&nbsp; }//end constructor
}//end class SampProg129
//=========================================================

//Class to respond to action events
class AnActionListenerClass implements ActionListener{
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;actionPerformed() method invoked on &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.getActionCommand());
&nbsp; }//end actionPerformed
}//end class AnActionListenerClass
//=========================================================

//Class to create object capable of generating&nbsp;
// Action events.
//--------------------------------------------------------
class NonVisual extends Component {
&nbsp; String ID; // The ID of the object
&nbsp; //list of registered action listener objects
&nbsp; ActionListener actionListener;
&nbsp; //-------------------------------------------------------

&nbsp; public NonVisual(String ID) {//Construct a NonVisual obj
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.ID = ID;
&nbsp; }//end constructor
&nbsp; //-------------------------------------------------------

&nbsp; //Method to construct a list of registered listeners
&nbsp; public void makeActionListenerList(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionListener listener) {
&nbsp;&nbsp;&nbsp; actionListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; AWTEventMulticaster.add(actionListener, listener);
&nbsp; }//end makeActionListenerList()
&nbsp; //-------------------------------------------------------

&nbsp; //Method to dispatch an action event to the registered
&nbsp; // listeners.
&nbsp; public void generateActionEvent() {
&nbsp;&nbsp;&nbsp; actionListener.actionPerformed(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this, ActionEvent.ACTION_PERFORMED, ID));
&nbsp; }//end generateActionEvent
}//end class NonVisual
//=========================================================</font></pre>
        </td>
    </tr>
</table>

<p>-end- </p>
<!--end-->
</body>
</html>
