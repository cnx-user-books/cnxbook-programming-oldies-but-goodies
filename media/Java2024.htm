<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
    
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
    
  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
  <title>... in Java by Richard G Baldwin</title>
</head>
  <body link="#dd0000" vlink="#0000ff" alink="#ff0000" lang="EN-US">
 
<h2 dir="ltr"> Java Sound, Audio File Conversion</h2>
 
<p dir="ltr"> <i>Baldwin shows you how to convert audio data from one audio
file type to another.</i></p>
 
<p><b>Published:</b>&nbsp; September 2, 2003<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b> 
</p>
<p>Java Programming Notes # 2024</p>
<ul>
 <li> <a href="#Preface">Preface</a></li>
 <li> <a href="#Preview">Preview</a></li>
  <li> <a href="#Discussion%20and%20Sample%20Programs">Discussion and Sample
Code</a></li>
  <li> <a href="#Run%20the%20program">Run the Program</a></li>
  <li> <a href="#Summary">Summary</a></li>
  <li> <a href="#Whats%20Next">What's Next?</a></li>
  <li> <a href="#Complete%20Program%20Listings">Complete Program Listing</a></li>
 
</ul>
  
<hr size="3" width="100%" align="center"> 
<center> 
<h2> <a name="Preface"></a>Preface</h2>
</center>
 
<p> This  series of lessons is designed to teach you how to use the  Java
Sound API.&nbsp; The first lesson in the series was entitled  <a
 href="http://www.developer.com/java/other/article.php/1565671">Java Sound,
An  Introduction</a>.&nbsp; The  previous lesson was entitled&nbsp;<a
 href="http://www.developer.com/java/other/article.php/2226701">Java Sound,
Creating, Playing, and Saving Synthetic Sounds</a>.</p>
 
<p><font color="#ff0000"><b>Two types of audio data</b></font></p>
 
<p> Two  different  types of audio data are supported by the Java Sound API:</p>
<ul>
   <li>Sampled audio data</li>
   <li>Musical Instrument Digital Interface (MIDI) data</li>
   
</ul>
   
<p>The two types of audio data are very different.&nbsp;  I    am concentrating
on sampled audio data at this point in time.&nbsp; I will defer    my discussion
of        MIDI    until later.</p>
<p> <b><font color="#ff0000">Viewing tip</font></b> </p>
<p>You may find it useful to open another copy of this lesson in a separate 
browser window.&nbsp; That will make it easier for you to scroll back and 
forth among the different listings and figures while you are reading about 
them. </p>
<p><b><font color="#ff0000">Supplementary material</font></b> </p>
<p>I recommend that you also study the other lessons in my extensive collection 
of online Java tutorials.&nbsp; You will find those lessons published at <a
 href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp; However,
as of the date of this writing, Gamelan doesn't maintain a consolidated index
of my Java tutorial lessons, and sometimes they are difficult to locate there.&nbsp;
You will find a consolidated index at <font color="#000000"> <a
 href="http://www.DickBaldwin.com">www.DickBaldwin.com</a>.</font></p>
<p> <font color="#ff0000"><b>Material in earlier lessons</b></font></p>
<p>Earlier lessons in  this series  showed you how to:</p>
<ul>
   <li>Create, play, and save synthetic sounds, making use of the features
of the    java.nio package to help with the byte manipulations.</li>
   <li>Use methods of the <b>AudioSystem</b> class to write more robust audio
   programs.</li>
   <li>Play back audio files, including those that you create using a Java
   program, and those that you acquire from other sources.</li>
   <li>Capture microphone data into audio files types of your own choosing.</li>
   <li>Capture microphone data into a <b>ByteArrayOutputStream</b> object.</li>
   <li>Use the Sound API to play back previously captured audio data.</li>
   <li>Identify the mixers available on your system.</li>
   <li>Specify a    particular mixer for use in the acquisition of audio
data from a microphone.</li>
   <li>Understand the use of lines and mixers in the Java Sound API.</li>
 
</ul>
 
<p>This lesson will show you how to perform file conversions among different
 audio file types.</p>
   
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
   
<p><font color="#ff0000"><b>Audio file type is different from audio encoding</b></font></p>
<p> Numerous audio file types have been defined in recent years, including
AU  files, AIF files, and WAV files.&nbsp; However, when  trying to determine
if a particular audio file will be satisfactory for a  particular application,
simply knowing the file type isn't sufficient.&nbsp; You  must also know
how the audio data is encoded within the file.</p>
<p>Stated  simply, the file type specification indicates how the bytes are
physically  arranged within the file.&nbsp; The encoding specification indicates
how the  audio information is arranged within the bytes.&nbsp; Not all file
types can  accommodate all encodings.&nbsp; However, many file types can
accommodate  several different encodings.</p>
<p>As it turns out, file types are the less complex of the  two topics.&nbsp;
I will deal with file types in this lesson.&nbsp; I will begin  dealing with
encodings in the next lesson.</p>
<p><font color="#ff0000"><b> Information on different file types</b></font></p>
<p>Here are descriptions of some of  the file types supported by Sun's Java,
as found at the <a
 href="http://www.computeruser.com/resources/dictionary/filetypes.html"> High-Tech
Dictionary of File Types</a>:</p>
<ul>
   <li>AU - A sound file format used on Sun Microsystems or other UNIX computers.</li>
   <li>AIF - Audio Interchange File Format or AIFF <i>(filename extension).</i>
A format    developed by Apple Computer for storing high-quality sampled
audio and musical    instrument information. It can be played on PC and Mac.&nbsp;
    <i>(Note that    the Sun Java API treats the common filename extension
for this type as AIF.)</i></li>
   <li>WAV - Sound file.&nbsp; <i>(As you can see, the HighTech Dictionary
   doesn't have much to say about this file type.&nbsp; I will add that most
of the sound files that    are provided by Microsoft in a typical Windows
installation are WAV files.)</i></li>
   
</ul>
   
<p><font color="#ff0000"><b>Format descriptions</b></font></p>
<p>You can view a technical description of the format  of an AU file, including
information about how the bytes are arranged in the  file, at <a
 href="http://www.opengroup.org/public/pubs/external/auformat.html">Header
file for Audio, .au</a>.</p>
<p>You can view a similar technical description  for an AIFF file format 
 <a href="http://www.borg.com/%7Ejglatt/tech/aiff.htm">here</a>.&nbsp; Finally,
   you can view a technical description of the format of a WAV file at  
<a
 href="http://ccrma-www.stanford.edu/CCRMA/Courses/422/projects/WaveFormat/"> 
  The Canonical WAVE File Format</a>.</p>
<p>Of course, if you fire up your   <a href="http://www.google.com">Google</a>
search engine, you can find many    other descriptions of these and other
file formats as well.</p>
<p> <font color="#ff0000"><b>General information about sampled sound</b></font></p>
<p>You will find    some very interesting information about sampled sound
published by Marc Boots-Ebenfield    at <a
 href="http://www.brynmawr.edu/Acads/Langs/llc/soundformats.htm">Sound  
 Formats</a>. Included on the web site is the following factoid regarding
CD    quality music.</p>
<blockquote>     
  <p><i>"On a Music CD the music is sampled at 44.1 KHz using 16 bit words
or      705,600 bits for each second of sound. At 8 bits to the byte that
would mean      that 1 second of CD quality music would occupy 88,200 bytes
or 88 Kb of your      floppy disc which holds 1.2 Mb of data. That means
that you could hold 13      seconds of CD quality music on a floppy- (uncompressed)!"</i></p>
   </blockquote>
   
<p>If the above estimate is correct, then about fifteen floppy disks would
be    required to contain a typical three-minute song in uncompressed CD
quality    format.&nbsp; <i>(That fact will be more important in the future
lessons on    encoding than in this lesson.)</i></p>
<p><font color="#ff0000"><b>A non-technical aside</b></font></p>
<p>As another interesting    factoid, <a
 href="http://www.bartleby.com/64/C003/0120.html">The American    Heritage&reg;
Book of English Usage</a> is not very fond of this usage of the word   <i>factoid.</i></p>
<center> 
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion 
and Sample Code</font></h2>
</center>
 
<p> <font color="#ff0000"><b>The user interface</b></font></p>
<p>The user interface for  this program is very simple.&nbsp; This program
is designed to be executed from  the command line as follows:</p>
 
<p><b>Usage: java AudioFileConvert01 inputFile outputFile</b></p>
 
<p> <font color="#ff0000"><b>The program named AudioFileConvert01</b></font></p>
<p> Before getting into the details of the program code, I will describe
the program  and show you some examples produced by running the program.</p>
<p> This program demonstrates the ability to write a Java program to convert
one audio file type to a different audio file type.&nbsp;  Run the program
by entering the following at the command line:</p>
<p> <b><font face="Courier New" size="2">java AudioFileConvert01 inputFile
outputFile</font></b></p>
<p> <font color="#ff0000"><b>Input and output file types</b></font></p>
<p> The type of output file that is created depends on the output file name
extension, such as <b>au</b>, <b>wav</b>, or <b>aif</b>.</p>
<p> On the other hand, the type of the input file does not depend on the
input file name or extension.&nbsp;  The actual type of the input file is
determined by the program irrespective of the name  of the file or the extension
given to that file.</p>
<p> <font color="#ff0000"><b>Playback of the output file</b></font></p>
<p> You should be able to play the output file with any standard media player
that can handle the file type, or with a program written in Java, such as
the program named AudioPlayer02 that was  developed in an earlier lesson.</p>
<p> <font color="#ff0000"><b>Operational examples</b></font></p>
<p> The following paragraphs show sample screen outputs for different input
and output file types.&nbsp; Note that line breaks were manually inserted
to force the material to fit in this narrow publication format.</p>
<p> <font color="#ff0000"><b>Valid input file with invalid file extension</b></font></p>
<p> In the first example, shown in Figure 1, a valid input <b>wav</b> file
named <b>ringout</b> was forced to have  the invalid  extension <b>.txt</b>.&nbsp;
However, the program successfully  determined the type of the <b>wav</b>
file on the fly, and the <b>wav</b> file was successfully converted to an 
<b>au</b> file.</p>
<blockquote>   
  <p> <i>(You may recognize the primary name of this file as  being one of
the sound files commonly included in a standard Windows  installation.&nbsp;
I simply made a copy of the file named <b>ringout.wav</b> and changed the
 extension before running this experiment.)</i></p>
</blockquote>
   
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2">java AudioFileConvert01 ringout.txt
junk.au<br>
 &nbsp;Input file: ringout.txt<br>
 &nbsp;Output file: junk.au<br>
 &nbsp;Output type: au<br>
 &nbsp;Output type is supported<br>
 &nbsp;Input file format:<br>
 &nbsp;WAVE (.wav) file, byte length: 5212,<br>
 &nbsp;data format: PCM_UNSIGNED, 11025.0 Hz,<br>
 &nbsp;8 bit, mono, audio data<br>
 &nbsp;Bytes written: 5191<br>
 &nbsp;Output file format:<br>
 &nbsp;AU (.au) file, byte length: 5191,<br>
 &nbsp;data format: PCM_SIGNED, 11025.0 Hz,<br>
 &nbsp;8 bit, mono, audio data, frame length: 5167</font></b> 
      <pre><b>Figure 1</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 
<p> <font color="#ff0000"><b>Encoding information is displayed</b></font></p>
<p> You will see the code that produced the output in Figure 1 later when
I discuss the    program.&nbsp; As you can see from the  output, the code
in  this program gets and displays encoding information <i>(PCM_UNSIGNED,
8 bit,  mono, etc.)</i> on both the input file and the output file in addition
to the  file type.&nbsp; However, this program makes no attempt to purposely
change the  encoding.&nbsp;&nbsp; <i>(As I mentioned earlier, I will begin
dealing with  encoding in the next lesson.)</i></p>
<p> <font color="#ff0000"><b>Conversion of an AU file to a WAV file</b></font></p>
<p> In the  example shown in Figure 2, the input file was a stereo <b>au</b>
file produced by a sample program from an earlier lesson.&nbsp; The <b>au</b>
file was successfully converted to a <b>wav</b> file.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2">java AudioFileConvert01 junk3.au
junk.wav<br>
 &nbsp;Input file: junk3.au<br>
 &nbsp;Output file: junk.wav<br>
 &nbsp;Output type: wav<br>
 &nbsp;Output type is supported<br>
 &nbsp;Input file format:<br>
 &nbsp;AU (.au) file, byte length: 64024,<br>
 &nbsp;data format: PCM_SIGNED, 16000.0 Hz, 16 bit,<br>
 &nbsp;stereo, big-endian, audio data,<br>
 &nbsp;frame length: 16000<br>
 &nbsp;Bytes written: 64044<br>
 &nbsp;Output file format:<br>
 &nbsp;WAVE (.wav) file, byte length: 64044,<br>
 &nbsp;data format: PCM_SIGNED, 16000.0 Hz, 16 bit,<br>
 &nbsp;stereo, little-endian, audio data</font></b> 
      <pre><b>Figure 2</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> The fact that these files are stereo <i>(two-channel)</i> files is indicated
by  the encoding information that is displayed in Figure 2.</p>
<p> <font color="#ff0000"><b>Conversion of a WAV file to an AIF file</b></font></p>
<p> A standard Windows monaural <b>wav</b> file was successfully converted
to an <b>aif</b> file,  as shown in Figure 3<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2">java AudioFileConvert01 ringout.wav
junk.aif<br>
 &nbsp;Input file: ringout.wav<br>
 &nbsp;Output file: junk.aif<br>
 &nbsp;Output type: aif<br>
 &nbsp;Output type is supported<br>
 &nbsp;Input file format:<br>
 &nbsp;WAVE (.wav) file, byte length: 5212,<br>
 &nbsp;data format: PCM_UNSIGNED, 11025.0 Hz, 8 bit,<br>
 &nbsp;mono, audio data<br>
 &nbsp;Bytes written: 5221<br>
 &nbsp;Output file format:<br>
 &nbsp;AIFF (.aif) file, byte length: 5221,<br>
 &nbsp;data format: PCM_SIGNED, 11025.0 Hz, 8 bit,<br>
 &nbsp;mono, audio data, frame length: 5167</font></b> 
      <pre><b>Figure 3</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> <font color="#ff0000"><b>An unsupported output file type</b></font></p>
<p> In the  example shown in Figure 4, the specified output file type, <b>xyz</b>,
is not  supported by the Java Sound API <i>(nor by any other system that
I am aware of).</i>&nbsp;  Therefore, the program aborted, providing a list
of the output file types that  are supported for writing by the system.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2">java AudioFileConvert01 junk3.au
junk.xyz<br>
 &nbsp;Input file: junk3.au<br>
 &nbsp;Output file: junk.xyz<br>
 &nbsp;Output type: xyz<br>
 &nbsp;Output type not supported.<br>
 &nbsp;Supported audio file types: au aif wav</font></b> 
      <pre><b>Figure 4</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> Note that the Java implementation on my system at the time of this writing
only supports file types <b>au</b>, <b>aif</b>, and <b>wav</b>.</p>
<p> <font color="#ff0000"><b>An unsupported input file type</b></font></p>
<p> In the  example shown in Figure 5,  the input file claimed by virtue
of its name and  extension to be a <b>wav</b> file.&nbsp; However, it was
not a valid audio file.&nbsp; Rather, it was  simply a text file that I renamed
to cause it to impersonate a <b>wav</b> file.&nbsp; This caused the program
to throw  an <b>UnsupportedAudioFileException</b> and abort.</p>
<p> Once again, the program determined the type of the input file by examining
the  contents of the file, and not by examining the file's name or extension.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2">java AudioFileConvert01 invalidFile.wav
junk.au<br>
 &nbsp;Input file: invalidFile.wav<br>
 &nbsp;Output file: junk.au<br>
 &nbsp;Output type: au<br>
 &nbsp;Output type is supported<br>
 &nbsp;javax.sound.sampled.<br>
 &nbsp;UnsupportedAudioFileException: could not get<br>
 &nbsp;audio input stream from input stream<br>
 &nbsp;at javax.sound.sampled.AudioSystem.<br>
 &nbsp;getAudioInputStream(AudioSystem.java:756)<br>
 &nbsp;at AudioFileConvert01.<br>
 &nbsp;main(AudioFileConvert01.java:84)</font></b> 
      <pre><b>Figure 5</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> <font color="#ff0000"><b>Getting usage information</b></font></p>
<p> In Figure 6, the program was run with no command-line arguments, causing
the program to provide usage information and abort.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2">java AudioFileConvert01<br>
 Usage: java AudioFileConvert01 <br>
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
inputFile outputFile</font></b> 
      <pre><b>Figure 6</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> This program was tested using SDK 1.4.1 under WinXP</p>
<p> <font color="#ff0000"><b>The class named AudioFileConvert01</b></font></p>
<p> The controlling class for the program begins in Listing 1.&nbsp; As usual,
I  will discuss the program in fragments.&nbsp; You can view a listing of
the  entire program in Listing 11 near the end of the lesson.</p>
<p> The program is relatively straightforward consisting of the <b>main</b>
method  and the following static methods <i>(these methods were declared
<b>static</b>  so that they can be invoked from inside the <b>main</b> method):</i></p>
<ul>
   <li><b>getTargetTypesSupported</b> - returns a list of the audio file
types that can be    written by the system.</li>
   <li><b>getTargetType</b> - returns the type of a specified output file
based on the    filename extension.</li>
   <li><b>showFileType</b> - Examines a <b>File</b> object representing a
physical audio    file and displays information about the file.</li>
   
</ul>
   
<p> <font color="#ff0000"><b>The main method</b></font></p>
<p> Listing 1 contains the beginning of the <b>main</b> method.&nbsp; The
code in  Listing 1 examines the number of command-line arguments entered
by the user,  and displays usage information if the user didn't enter any
arguments.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>public class <b>AudioFileConvert01</b>{<br><br>  public static void <b>main</b>(String[] args){<br>    if(args.length != 2){<br>      System.out.println(<br>                "Usage: java AudioFileConvert01 "<br>                       + "inputFile outputFile");<br>      System.exit(0);<br>    }//end if<br><br>    System.out.println("Input file: " + args[0]);<br>    System.out.println("Output file: "+ args[1]);<br><br><b><font
 face="Courier New,Courier">Listing 1</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
    </p>
<p>In addition, the code in Listing 1 displays the input and output file
names    provided by the user when those file names are entered as command-line
   arguments.</p>
   
<p><font color="#ff0000"><b>Get and test output file type</b></font></p>
   
<p>The output file type is determined by the filename extension provided
by    the user.&nbsp; The code in Listing 2 isolates the filename extension
as type   <b>String</b> and displays the extension on the screen.</p>
   
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>    String outputTypeStr =<br>                       args[1].substring(args[1].<br>                           lastIndexOf(".") + 1);<br>    System.out.println("Output type: "<br>                                + outputTypeStr);<br><br>    AudioFileFormat.Type outputType =<br>                    <b>getTargetType</b>(outputTypeStr);<br><br><b><font
 face="Courier New,Courier">Listing 2</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 
<p> More importantly, the code in Listing 2 invokes the <b>getTargetType</b>
method,  passing the filename extension as a <b>String </b>parameter to that
method.</p>
<p> <font color="#ff0000"><b>The getTargetType method</b></font></p>
<p> The <b>getTargetType</b> method checks to see if the system is capable
of  writing the file  type indicated by the extension.&nbsp; If so, it returns
an <b> AudioFileFormat.Type </b>object matching that extension.&nbsp; If
not, it  returns <b>null</b>.</p>
<p> At this point, I am going to put the <b>main</b> method on hold and discuss
the method named <b>getTargetType</b>.</p>
<p> <font color="#ff0000"> <b>The AudioFileFormat.Type class</b></font></p>
<p>Listing 3 contains the entire method    named <b>getTargetType</b>.</p>
   
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>  private static AudioFileFormat.Type<br>                 <b>getTargetType</b>(String extension){<br>    AudioFileFormat.Type[] typesSupported =<br>                 AudioSystem.getAudioFileTypes();<br>    //System.out.println("length: " + <br>                          typesSupported.length);<br>    for(int i = 0; i &lt; typesSupported.length;<br>                                            i++){<br>      if(typesSupported[i].getExtension().<br>                              equals(extension)){<br>        return typesSupported[i];<br>      }//end if<br>    }//end for loop<br>    return null;//no match<br>  }//end getTargetType<br><br><b><font
 face="Courier New,Courier">Listing 3</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 
<p> The first thing to note about the code in Listing 3 is that the     
            <b>getTargetType</b> method returns  a reference to an object
of type <b>AudioFileFormat.Type</b>.</p>
<blockquote> 
  <p> <i>(In case you  are unfamiliar with the notation where there is a
period in a class name, this  indicates that the <b>Type</b> class is an
inner class of the class named <b> AudioFileFormat</b>.&nbsp; If you are
unfamiliar with inner classes, see the  tutorial lessons on that topic on
my <a href="http://www.dickbaldwin.com">web  site</a>.)</i></p>
</blockquote>
 
<p> <font color="#ff0000"><b>What does Sun have to say?</b></font></p>
<p> Here is what Sun has to say about this class:</p>
<blockquote> 
  <p> <i>"An instance of the <b>Type</b> class represents one of the standard
types of  audio files. Static instances are provided for the common types."</i></p>
</blockquote>
 
<p> Static instances are provided for the following types:</p>
<ul>
   <li>AIFC</li>
   <li>AIFF</li>
   <li>AU</li>
   <li>SND</li>
   <li>WAVE</li>
   
</ul>
 
<p> It is interesting to note that even though five different audio file
types are  identified as <i>the common types</i> in this class, only three
of those types  are currently supported for writing on my machine running
SDK 1.4.1 under WinXP.</p>
<p> <font color="#ff0000"><b>An array of AudioFileFormat.Type object references</b></font></p>
<p> The code in Listing 3 invokes the method named <b>getAudioFileTypes</b>,
which  is a <b>static</b> method of the <b>AudioSystem</b> class.&nbsp; This
method  returns a list  containing <i>"the file types for which file writing
support is provided by the  system."</i>&nbsp; This list is stored in an
array of type <b> AudioFileFormat.Type</b>.</p>
<blockquote> 
  <p> <i>(Listing 3 contains a statement with a call to the&nbsp;println
method that  has been commented out.&nbsp; When this statement is enabled
on my system, it  reports that the length of the array is three, indicating
that only three file  types are currently supported for writing on my System.&nbsp;
You will see the  names of those three types later.)</i></p>
</blockquote>
 
<p> <font color="#ff0000"><b>The getExtension method</b></font></p>
<p> The <b>AudioFileFormat.Type</b> class provides a method named <b>getExtension</b>,
 which returns <i>"the common file name extension"</i> for an object of the
type.&nbsp;  The code in Listing 3 uses a <b>for</b> loop to search the array
of <b> AudioFileFormat.Type</b> objects looking for a match to the file name
extension  received as an incoming parameter by the <b>getTargetType</b>
method.</p>
<p> If a match is found, the <b>AudioFileFormat.Type</b> object corresponding
to  that match is returned by the <b>getTargetType</b> method.&nbsp; Otherwise,
<b> null</b> is returned by the method.</p>
<p> <font color="#ff0000"><b>Testing the return value</b></font></p>
<p> Returning our attention to the code in the <b>main</b> method, the code
in Listing 4  tests to determine if a<b> null </b>value<b> </b>was returned
by the <b> getTargetType</b> method.&nbsp; If not, the program displays the
message:</p>
<p> <b><font face="Courier New" size="2">Output type is supported<br>
 &nbsp;</font></b>
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>//Continue with main method<br>    if(outputType != null){<br>      System.out.println(<br>                     "Output type is supported");<br>    }else{<br>      System.out.println(<br>                   "Output type not supported.");<br>      getTargetTypesSupported();<br>      System.exit(0);<br>    }//end else<br><br><b><font
 face="Courier New,Courier">Listing 4</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> If a <b>null</b> value was returned by the <b>getTargetType</b> method,
the  program displays the following message and then invokes the method named
<b> getTargetTypesSupported</b> to display a list of the file types that
are  supported for writing by the system.</p>
<p> <b><font face="Courier New" size="2">Output type not supported.</font></b></p>
<p> <font color="#ff0000"><b>The getTargetTypesSupported method</b></font></p>
<p> The purpose of the method named <b>getTargetTypesSupported</b> is to
get and  display a list of the file types supported for writing by the system.</p>
<p> Once again, I'm going to put the <b>main</b> method on hold while I discuss
the  method named <b>getTargetTypesSupported</b>, shown in Listing 5.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>  private static void <b>getTargetTypesSupported</b>(){<br>    AudioFileFormat.Type[] typesSupported =<br>                 AudioSystem.getAudioFileTypes();<br>    System.out.print(<br>                  "Supported audio file types:");<br>    for(int i = 0; i &lt; typesSupported.length;<br>                                            i++){<br>      System.out.print(" " +<br>               typesSupported[i].getExtension());<br>    }//end for loop<br>    System.out.println();<br>  }//end getTargetTypesSupported<br><br><b><font
 face="Courier New,Courier">Listing 5</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> <font color="#ff0000"><b>Get and display common filename extensions</b></font></p>
<p> The code in Listing 5 shouldn't require much in the way of an explanation.&nbsp;
This code is very similar to  the code in Listing 3.&nbsp; In Listing 5,
however, after getting an array of <b>AudioFileFormat.Type</b> objects  representing
the file types supported for writing by the system, the code simply gets
and displays the  common filename extension for each of those types.</p>
<p> For the example discussed previously <i>(see Figure 4)</i> where I purposely
told the program to write  an unsupported output file type <i>(xyz), </i>the
code in Listings 4 and 5  produced the output shown in Figure 7.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2">&nbsp;Output    type not supported.<br>
   &nbsp;Supported audio file types: au aif wav</font></b> 
      <pre><b>Figure 7</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
   </p>
<blockquote> 
  <p> <i>(Note that the list of supported file types in Figure 7 includes
only three of the five  types identified by <b>static</b> instances of the
  <b>AudioFileFormat.type</b>  class.)</i></p>
</blockquote>
 
<p> <b><font color="#ff0000">The input file type</font></b></p>
<p> Returning once again to the <b>main</b> method, the code in Listing 6
begins  dealing with the input file.</p>
<blockquote> 
  <p> <i>(Note that the determination of the input file type does not depend
on the  file name or extension.&nbsp; Rather, the program determines the
type of the  input file by  extracting information about the file  from the
information contained in the file itself.)</i></p>
</blockquote>
   
<p><font color="#ff0000"><b>Get an AudioInputStream object</b></font></p>
   
<p>The code in Listing 6 begins by getting a <b>File</b> object that represents
the    input file.</p>
   
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>//Continue with main method<br>    File inputFileObj = new <b>File</b>(args[0]);<br>    AudioInputStream audioInputStream = null;<br>    try{<br>      audioInputStream = AudioSystem.<br>               <b>getAudioInputStream</b>(inputFileObj);<br>    }catch (Exception e){<br>      e.printStackTrace();<br>      System.exit(0);<br>    }//end catch<br><br><b><font
 face="Courier New,Courier">Listing 6</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 
<p> Then the code in Listing 6 uses that <b>File</b> object to get an <b> 
AudioInputStream</b> object that can be used to read the audio data in the
input  file.</p>
<p> I have discussed code involving <b>AudioInputStream</b> objects in several
previous lessons.&nbsp;  Therefore, I won't bore you by discussing it again
here.</p>
<p> <font color="#ff0000"><b>Display file type information</b></font></p>
<p> The code in Listing 7 invokes the <b>showFileType</b> method for the
purpose of  displaying information about the input file type.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>    System.out.println("Input file format:");<br>    <b>showFileType</b>(inputFileObj);<br><br><b><font
 face="Courier New,Courier">Listing 7</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> <font color="#ff0000"><b>The showFileType method</b></font></p>
<p> Once again, I'm going to put the <b>main</b> method on hold while I discuss
the  method named <b>showFileType</b>, shown in Listing 8.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>  private static void <b>showFileType</b>(File file){<br>    try{<br>      System.out.println(AudioSystem.<br>                       <b>getAudioFileFormat</b>(file));<br>    }catch(Exception e){<br>      e.printStackTrace();<br>      System.exit(0);<br>    }//end catch<br>  }//end showFileFormat<br><br><b><font
 face="Courier New,Courier">Listing 8</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> There isn't much to the <b>showFileType</b> method.&nbsp; It simply invokes
the  method named <b>getAudioFileFormat</b>, which is a <b>static</b> method
of the <b>AudioSystem</b> class, passing the <b>File</b> object that represents
the  input file as a parameter to the method.</p>
<p> <font color="#ff0000"><b>The getAudioFileFormat method</b></font></p>
<p> Here is what Sun has to say about the <b>getAudioFileFormat</b> method.</p>
<blockquote> 
  <p> <i>"Obtains the audio file format of the specified File. The File must
point to  valid audio file data."</i></p>
</blockquote>
 
<p> This method returns an object of type <b>AudioFileFormat</b>, whose reference
is  passed to the <b>println</b> method for display.</p>
<p> <font color="#ff0000"><b>The AudioFileFormat class</b></font></p>
<p> Here is what Sun has to say about an object of this class:</p>
<blockquote> 
  <p> <i>"An instance of the <b>AudioFileFormat</b> class describes an audio
file, including  the file type, the file's length in bytes, the length in
sample frames of the  audio data contained in the file, and the format of
the audio data."</i></p>
</blockquote>
 
<p> As is frequently the case, this class has an overridden <b>toString</b>
method,  which facilitates displaying information about the contents of the
object.</p>
<p> <font color="#ff0000"><b>The screen output for a supported input file
type</b></font></p>
<p> Figure 8 shows the screen output produced by Listings 7 and 8 for a supported
audio  input file of type WAV:<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <font face="Courier New" size="2"><b>&nbsp;Input file format:<br>
 &nbsp;WAVE (.wav) file, byte length: 5212,<br>
 &nbsp;data format: PCM_UNSIGNED, 11025.0 Hz, 8 bit,<br>
 &nbsp;mono, audio data</b></font> 
      <pre><b>Figure 8</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> Note that this output contains the number of channels and the  sampling
frequency, which is not mentioned in the quotation from sun in the  previous
section.</p>
<p> <font color="#ff0000"><b>The screen output for an unsupported input file
type</b></font></p>
<p> Figure 9 shows the screen output produced by Listing 6 when an attempt
was made to get  an <b>AudioInputStream</b> object on a file that was not
a valid audio file.&nbsp; <i>(It was a text file of the type produced by
the Windows <b>NotePad</b>  program.)<br>
 &nbsp;</i>
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2">&nbsp;javax.sound.sampled.<br>
   &nbsp;UnsupportedAudioFileException: could not get<br>
   &nbsp;audio input stream from input stream<br>
   &nbsp;at javax.sound.sampled.AudioSystem.<br>
   &nbsp;getAudioInputStream(AudioSystem.java:756)<br>
   &nbsp;at AudioFileConvert01.<br>
   &nbsp;main(AudioFileConvert01.java:84)</font></b> 
      <pre><b>Figure 9</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
   </p>
<p>In this case, the program didn't even make it far enough to invoke the
<b>   showFileType</b> method for the purpose of displaying information about
the    file.&nbsp; Rather, it threw an <b>UnsupportedAudioFileException</b>
when the    attempt was made to get an <b>AudioInputStream</b> object on
the input file.</p>
   
<p><font color="#ff0000"><b>The bottom line on file conversion</b></font></p>
   
<p>Returning once more to the <b>main</b> method, the code in Listing 9  
 illustrates the bottom line on audio file conversion in Java.</p>
   
<blockquote>     
  <p><i>(Note that I deleted the try and catch from Listing 9 in order to
     simplify the presentation.&nbsp; You can view that code in Listing 11
near      the end of the lesson.)</i></p>
   </blockquote>
   
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>//Continue with main method<br>    int bytesWritten = 0;<br>    //delete try<br>      bytesWritten = AudioSystem.<br>                        <b>write</b>(audioInputStream,<br>                              outputType,<br>                              new File(args[1]));<br>    //delete catch<br>    System.out.println("Bytes written: "<br>                                 + bytesWritten);<br><b><font
 face="Courier New,Courier">Listing 9</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 
<p> <font color="#ff0000"><b>The write method of the AudioSystem class</b></font></p>
<p> As it turns out, doing audio file conversion using the Java Sound API
is  relatively simple, as long as you aren't trying to change encodings in
the  process.&nbsp; <i>(As mentioned earlier, I will begin discussing encodings
in  the next lesson.)</i></p>
<blockquote>   
  <p> <i>(Much of the code in this program was provided to help you to understand
what  is going on.&nbsp; A version of the program named AudioFileConvert02,
with most  of the unnecessary code deleted, is shown in Listing 12 near the
end of the lesson.)</i></p>
</blockquote>
 
<p> <b> <font color="#ff0000">The basics of file conversion</font></b></p>
<p> All that is really necessary to do a file conversion using the Java Sound
API is:</p>
<ul>
   <li>Get the names of the input and output files.</li>
   <li>Get an object of the class <b>AudioFileFormat.Type</b>, which defines
the    type of the output file.</li>
   <li>Get an <b>AudioInputStream</b> object on the input file.</li>
   <li>Invoke the method named <b>write</b> shown in Listing 9 passing the
above    information as parameters to the <b>write</b> method.</li>
   
</ul>
   
<p> This will cause the input file to be read, and will cause the data from
the  input file to be written into the output file in the specified format.</p>
<p> <font color="#ff0000"><b>The write method</b></font></p>
<p> Here is what Sun has to say about the <b>write</b> method used in Listing
9,  which is a <b>static</b> method of the <b>AudioSystem</b> class:</p>
<blockquote>     
  <p> <i>"Writes a stream of bytes representing an audio file of the specified
file  type to the external file provided"</i></p>
</blockquote>
   
<p> <font color="#ff0000"><b>Can be more general</b></font></p>
<p> In reality, this code could be made much more general than it is in  this
program.&nbsp; For example, the <b>AudioInputStream</b> object doesn't have
 to be based on a file.&nbsp; The <b>AudioInputStream</b> object could be
based  on a <b>TargetDataLine</b> object, or on any <b>InputStream</b> object
capable  of supplying audio data according to a known <b>AudioFormat</b>.</p>
<p> Similarly, another overloaded version of the <b>write</b> method allows
you to  replace the <b>File</b> object in the third parameter with any <b>OutputStream</b>
 object capable of accepting a stream of audio data in a specified format.</p>
<p> <font color="#ff0000"><b>The number of bytes written into the output
file</b></font></p>
<p> The <b>write</b> method returns the number of bytes actually written.&nbsp;
This  value is  displayed on the screen by the last statement in Listing
9.</p>
<p> <font color="#ff0000"><b>Information about the output file format</b></font></p>
<p> The code in Listing 10 displays information about the output file format.
<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>    System.out.println("Output file format:");<br>    showFileType(new File(args[1]));<br><br>  }//end main<br><br><b><font
 face="Courier New,Courier">Listing 10</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<p> Figure 10 shows a sample of the output produced by Listing 10 for one
of the example  cases discussed earlier in this lesson:<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ccffff">
 <tbody>
    <tr>
 <td> <b><font face="Courier New" size="2"> &nbsp;Output file format:<br>
 &nbsp;WAVE (.wav) file, byte length: 64044,<br>
 &nbsp;data format: PCM_SIGNED, 16000.0 Hz, 16 bit,<br>
 &nbsp;stereo, little-endian, audio data</font></b> 
      <pre><b>Figure 10</b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 </p>
<center> 
<h2> <a name="Run the program"></a>Run the Program</h2>
</center>
         
<p>       At this point, you may find it useful to compile and run the programs
       shown in Listings 11 and 12 near the end of the lesson.&nbsp; Operating
instructions        were provided earlier in the section entitled <b>The
user interface</b>.</p>
<p> If you use a media player, such as the Windows Media Player, to play
back your  file, be sure to release the old file from the media player before
attempting to create a new file with the same  name and extension.&nbsp;
Otherwise, the program will not be able to create the  new file, and a runtime
error will occur.</p>
<p> Also be aware that these programs were tested using SDK version 1.4.1.&nbsp;
 Therefore, I can't be certain that they will  compile and run correctly
with  earlier versions of Java.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
   
<p>In this lesson, I showed you how to convert audio data from one audio
file    type    to another.&nbsp; The essential steps involved in making
such a conversion    are:</p>
   
<ul>
     <li>Get the names of the input and output files.</li>
     <li>Get an object of the class <b>AudioFileFormat.Type</b>, which defines
     the type of the output file.</li>
     <li>Get an <b>AudioInputStream</b> object on the input file.</li>
     <li>Invoke the method named <b>write</b> shown in Listing 9 passing
the      above information as parameters to the <b>write</b> method.</li>
 
</ul>
   
<p>I also explained that this program could be made much more general  either
by basing the <b>AudioInputStream</b> object on an <b>InputStream</b>   
object other than a file, or by causing the output to be an <b>OutputStream</b>
   other than a file.</p>
   
<p>You should be able to play the output file produced by this program with
   any standard media player that can handle the file type, or with a program
   written in Java, such as the program named AudioPlayer02 that was developed
in    an earlier lesson.</p>
   
<h2 align="center"><a name="Whats Next">What's Next?</a></h2>
   
<p>In the next lesson, I will show you how to use mu-law encoding and decoding
   to compress and restore 16-bit linear PCM samples.</p>
 
<center> 
<h2> <a name="Complete Program Listings"></a>Complete Program Listing</h2>
</center>
         Complete listings of the two programs discussed in this lesson are
shown  in Listing 11 and Listing 12.<br>
 &nbsp;
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>/*File AudioFileConvert01.java<br>Copyright 2003, R.G.Baldwin<br><br>This program demonstrates the ability to write a<br>Java program to convert one audio file type to a<br>different audio file type.<br><br>Usage: java AudioFileConvert01 <br>                             inputFile outputFile<br><br>Output file type depends on the output file name<br>extension, such as au, wav, or aif.<br><br>Input file type does not depend on input file<br>name or extension.  Actual type of input file is<br>determined by the program irrespective of name<br>or extension.<br><br>You should be able to play the output file with<br>any standard media player that can handle the<br>file type, or with a program written in Java,<br>such as the program named AudioPlayer02 that was<br>discussed in an earlier lesson.<br><br>The following are sample screen outputs for<br>different input and output file types.  Note that<br>line breaks were manually inserted to force the<br>material to fit in this narrow publication<br>format.<br><br>In this example, the valid input wav file was<br>forced to have an invalid file extension.  The<br>wav file was successfully converted to <br>an au file.<br><br>java AudioFileConvert01 ringout.txt junk.au<br>Input file: ringout.txt<br>Output file: junk.au<br>Output type: au<br>Output type is supported<br>Input file format:<br>WAVE (.wav) file, byte length: 5212,<br>data format: PCM_UNSIGNED, 11025.0 Hz,<br>8 bit, mono, audio data<br>Bytes written: 5191<br>Output file format:<br>AU (.au) file, byte length: 5191,<br>data format: PCM_SIGNED, 11025.0 Hz,<br>8 bit, mono, audio data, frame length: 5167<br><br>In this example, the input file was a stereo au<br>file produced by a sample program from an earlier<br>lesson.  The au file was successfully converted<br>to a wav file.<br><br>java AudioFileConvert01 junk3.au junk.wav<br>Input file: junk3.au<br>Output file: junk.wav<br>Output type: wav<br>Output type is supported<br>Input file format:<br>AU (.au) file, byte length: 64024,<br>data format: PCM_SIGNED, 16000.0 Hz, 16 bit,<br>stereo, big-endian, audio data,<br>frame length: 16000<br>Bytes written: 64044<br>Output file format:<br>WAVE (.wav) file, byte length: 64044,<br>data format: PCM_SIGNED, 16000.0 Hz, 16 bit,<br>stereo, little-endian, audio data<br><br>In this example, the input file was a standard<br>Windows wav file, which was successfully <br>converted to an aif file.<br><br>java AudioFileConvert01 ringout.wav junk.aif<br>Input file: ringout.wav<br>Output file: junk.aif<br>Output type: aif<br>Output type is supported<br>Input file format:<br>WAVE (.wav) file, byte length: 5212,<br>data format: PCM_UNSIGNED, 11025.0 Hz, 8 bit,<br>mono, audio data<br>Bytes written: 5221<br>Output file format:<br>AIFF (.aif) file, byte length: 5221,<br>data format: PCM_SIGNED, 11025.0 Hz, 8 bit,<br>mono, audio data, frame length: 5167<br><br>In this example, the output file was specified<br>with an unsupported type.  Thus, the program<br>aborted, providing a list of the output file<br>types that are supported.<br><br>java AudioFileConvert01 junk3.au junk.xyz<br>Input file: junk3.au<br>Output file: junk.xyz<br>Output type: xyz<br>Output type not supported.<br>Supported audio file types: au aif wav<br><br>In this example, although the input file claimed<br>to be a wav file, it was not a valid audio file.<br>Rather, it was a text file that was renamed to<br>impersonate a wav file.  This caused the program<br>to throw a runtime exception and abort.<br><br>java AudioFileConvert01 invalidFile.wav junk.au<br>Input file: invalidFile.wav<br>Output file: junk.au<br>Output type: au<br>Output type is supported<br>javax.sound.sampled.<br>UnsupportedAudioFileException: could not get<br>audio input stream from input stream<br>at javax.sound.sampled.AudioSystem.<br>getAudioInputStream(AudioSystem.java:756)<br>at AudioFileConvert01.<br>main(AudioFileConvert01.java:84)<br><br>In this example, the program was run with no<br>command-line parameters, causing the program to<br>provide usage information and abort.<br><br>java AudioFileConvert01<br>Usage: java AudioFileConvert01 <br>                            inputFile outputFile<br><br><br>Tested using SDK 1.4.1 under WinXP<br>************************************************/<br><br><br>import java.io.*;<br>import javax.sound.sampled.*;<br><br>public class AudioFileConvert01{<br><br>  public static void main(String[] args){<br>    if(args.length != 2){<br>      System.out.println(<br>                "Usage: java AudioFileConvert01 "<br>                       + "inputFile outputFile");<br>      System.exit(0);<br>    }//end if<br><br>    System.out.println("Input file: " + args[0]);<br>    System.out.println("Output file: "+ args[1]);<br><br>    //Output file type depends on output file<br>    // name extension.<br>    String outputTypeStr =<br>                       args[1].substring(args[1].<br>                           lastIndexOf(".") + 1);<br>    System.out.println("Output type: "<br>                                + outputTypeStr);<br>    AudioFileFormat.Type outputType =<br>                    getTargetType(outputTypeStr);<br>    if(outputType != null){<br>      System.out.println(<br>                     "Output type is supported");<br>    }else{<br>      System.out.println(<br>                   "Output type not supported.");<br>      getTargetTypesSupported();<br>      System.exit(0);<br>    }//end else<br><br>    //Note that input file type does not depend<br>    // on file name or extension.<br>    File inputFileObj = new File(args[0]);<br>    AudioInputStream audioInputStream = null;<br>    try{<br>      audioInputStream = AudioSystem.<br>               getAudioInputStream(inputFileObj);<br>    }catch (Exception e){<br>      e.printStackTrace();<br>      System.exit(0);<br>    }//end catch<br><br>    System.out.println("Input file format:");<br>    showFileType(inputFileObj);<br><br>    int bytesWritten = 0;<br>    try{<br>      bytesWritten = AudioSystem.<br>                        write(audioInputStream,<br>                              outputType,<br>                              new File(args[1]));<br>    }catch (Exception e){<br>      e.printStackTrace();<br>      System.exit(0);<br>    }//end catch<br>    System.out.println("Bytes written: "<br>                                 + bytesWritten);<br>    System.out.println("Output file format:");<br>    showFileType(new File(args[1]));<br><br>  }//end main<br><br>  private static void getTargetTypesSupported(){<br>    AudioFileFormat.Type[] typesSupported =<br>                 AudioSystem.getAudioFileTypes();<br>    System.out.print(<br>                  "Supported audio file types:");<br>    for(int i = 0; i &lt; typesSupported.length;<br>                                            i++){<br>      System.out.print(" " +<br>               typesSupported[i].getExtension());<br>    }//end for loop<br>    System.out.println();<br>  }//end getTargetTypesSupported<br><br>  private static AudioFileFormat.Type<br>                 getTargetType(String extension){<br>    AudioFileFormat.Type[] typesSupported =<br>                 AudioSystem.getAudioFileTypes();<br>    for(int i = 0; i &lt; typesSupported.length;<br>                                            i++){<br>      if(typesSupported[i].getExtension().<br>                              equals(extension)){<br>        return typesSupported[i];<br>      }//end if<br>    }//end for loop<br>    return null;//no match<br>  }//end getTargetType<br><br>  private static void showFileType(File file){<br>    try{<br>      System.out.println(AudioSystem.<br>                       getAudioFileFormat(file));<br>    }catch(Exception e){<br>      e.printStackTrace();<br>      System.exit(0);<br>    }//end catch<br>  }//end showFileFormat<br>}//end class<br><br><b><font
 face="Courier New,Courier">Listing 11</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
     
<p>&nbsp;</p>
   
<table border="1" cols="1" width="400" bgcolor="#ffff00">
 <tbody>
    <tr>
 <td> 
      <pre>/*File AudioFileConvert02.java<br>Copyright 2003, R.G.Baldwin<br><br>This program demonstrates the ability to write a<br>Java program to convert one audio file type to a<br>different audio file type.  This is an updated<br>version of AudioFileConvert01 in which all<br>unnecessary code has been removed.<br><br>Usage: java AudioFileConvert02<br>                            inputFile outputFile<br><br>Output file type depends on the output file name<br>extension, such as au, wav, or aif.<br><br>Input file type does not depend on input file<br>name or extension.  Actual type of input file is<br>determined by the program irrespective of name<br>or extension.<br><br>You should be able to play the output file with<br>any standard media player that can handle the<br>file type, or with a program written in Java,<br>such as the program named AudioPlayer02 that was<br>discussed in an earlier lesson.<br><br><br>Tested using SDK 1.4.1 under WinXP<br>************************************************/<br><br><br>import java.io.*;<br>import javax.sound.sampled.*;<br><br>public class AudioFileConvert02{<br><br>  public static void main(String[] args){<br>    if(args.length != 2){<br>      System.out.println(<br>                "Usage: java AudioFileConvert02 "<br>                       + "inputFile outputFile");<br>      System.exit(0);<br>    }//end if<br><br>    AudioFileFormat.Type outputType =<br>         getTargetType(args[1].substring(args[1].<br>                          lastIndexOf(".") + 1));<br><br>    if(outputType == null){<br>      System.out.println(<br>                   "Output type not supported.");<br>      System.exit(0);<br>    }//end else<br><br>    File inputFileObj = new File(args[0]);<br>    AudioInputStream audioInputStream = null;<br>    try{<br>      audioInputStream = AudioSystem.<br>               getAudioInputStream(inputFileObj);<br><br>      AudioSystem.write(audioInputStream,<br>                              outputType,<br>                              new File(args[1]));<br>    }catch (Exception e){<br>      e.printStackTrace();<br>      System.exit(0);<br>    }//end catch<br><br>  }//end main<br>  //-------------------------------------------//<br><br>  private static AudioFileFormat.Type<br>                 getTargetType(String extension){<br>    AudioFileFormat.Type[] typesSupported =<br>                 AudioSystem.getAudioFileTypes();<br>    for(int i = 0; i &lt; typesSupported.length;<br>                                            i++){<br>      if(typesSupported[i].getExtension().<br>                              equals(extension)){<br>        return typesSupported[i];<br>      }//end if<br>    }//end for loop<br>    return null;//no match<br>  }//end getTargetType<br>  //-------------------------------------------//<br>}//end class<br><br><b><font
 face="Courier New,Courier">Listing 12</font></b></pre>
 </td>
 </tr>
 
  </tbody>
</table>
 
<p> &nbsp;</p>
<hr size="3" width="100%" align="center"> 
<p>Copyright 2003, Richard G. Baldwin.&nbsp; Reproduction in whole or in part
in any form or medium without express written permission from Richard Baldwin
is prohibited. </p>
<h4> <a name="About the author"></a>About the author</h4>
 <i><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a> is a college
professor (at Austin Community College in Austin, TX) and private consultant
whose primary focus is a combination of Java, C#, and XML. In addition to
the many platform and/or language independent benefits of Java and C# applications,
he believes that a combination of Java, C#, and XML will become the primary
driving force in the delivery of structured information on the Web.</i><br>
<p><i>Richard has participated in numerous consulting projects and he frequently
provides onsite training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Programming <a
 href="http://www.DickBaldwin.com">Tutorials</a>, which has gained a worldwide
following among experienced and aspiring programmers. He has also published
articles in JavaPro magazine.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and 
has many years of experience in the application of computer technology to
real-world problems.</i> </p>
<p><i><a href="mailto:Baldwin@DickBaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
<br>
</body>
</html>
