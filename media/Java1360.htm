<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 6, Duplicate Elements, Ordered Collections,
Sorted Collections, and Interface Specialization</h2>
<i><font color="#000000">In this lesson Baldwin shows you that all concrete
</font>implementations
in the Java Collections Framework (JDK 1.3) implement a subinterface of
the Collection interface.&nbsp; A Set object cannot contain duplicate elements,
but a List object can contain duplicate elements.&nbsp; Ordered collections
are not the same as sorted collections.&nbsp; Specialized stipulations
are placed on interfaces as you progress down the interface inheritance
hierarchy of the Java Collections Framework.</i>
<p><b>Published:</b>&nbsp; July 9, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1360
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is the sixth lesson in a miniseries on Java data structures and the
Java Collections Framework.&nbsp; The first lesson in the miniseries was
entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="http://softwaredev.earthweb.com/java/article/0,,12082_795301,00.html">Data
Structures in Java: Part 5, The Core Collection Interfaces</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the <i>Collections Framework</i>.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures and listings while you are reading about
them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<p><font color="#000000">The index on my site provides links to the lessons
at </font><a href="http://softwaredev.earthweb.com/java">Gamelan.com</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
In the previous lesson, entitled <a href="http://softwaredev.earthweb.com/java/article/0,,12082_795301,00.html">Data
Structures in Java: Part 5, The Core Collection Interfaces</a>, you learned
that the Java Collections Framework defines six core interfaces, in two
distinct trees.&nbsp; You learned the names and the inheritance structure
of those interfaces.&nbsp; You also learned about their purpose.&nbsp;
You saw how the interfaces declare polymorphic methods that apply to implementations
of the interfaces, and you learned about the optional methods of the Collection
interface.
<p><font color="#000000">In this lesson you will learn that all of </font>the
implementations of the interfaces in the Java Collections Framework implement
one of the subinterfaces of the <b>Collection</b> interface.&nbsp; You
will learn that a <b>Set</b> object cannot contain duplicate elements,
but a <b>List</b> object can contain duplicate elements.
<p>You will learn about the difference between <i>ordered</i> collections
and <i>sorted</i> collections.&nbsp; You will also learn about <i>ascending
order</i> and the <i>natural ordering</i> of objects.&nbsp; In addition,
you will learn how more specialized stipulations are placed on interfaces
as you progress down the interface inheritance hierarchy of the Java Collections
Framework.
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion</font></h2></center>
<b><font color="#FF0000">Let's start with a quiz</font></b>
<p>As is often the case, I am going to begin this lesson with a little
quiz just to make sure that you are awake.&nbsp; Is the following statement
True or False?
<blockquote>The <b>TreeSet</b> class is a direct implementation of the
<b>Collection</b>
interface.</blockquote>
The answer is False.&nbsp; The <b>TreeSet</b> class is not a direct implementation
of the <b>Collection</b> interface.&nbsp; Rather, the <b>TreeSet</b> class
is a direct implementation of the <b>SortedSet</b> interface.&nbsp; The
<b>SortedSet</b>
interface extends the <b>Set</b> interface, and the
<b>Set</b> interface
extends the <b>Collection</b> interface.
<p><b><font color="#FF0000">The root of the collection hierarchy</font></b>
<p>The <b>Collection</b> interface is the root of the collection hierarchy.&nbsp;
JDK 1.3 doesn't provide any direct implementations of the <b>Collection</b>
interface.&nbsp; All of the implementations of the interfaces in the Java
Collections Framework implement one of the subinterfaces of the <b>Collection</b>
interface.
<p><b><font color="#FF0000">What does Sun say about this?</font></b>
<p>Here is what the Sun documentation has to say on the topic of the <b>Collection</b>
interface:
<p><i>"The SDK does not provide any direct implementations of this interface:
it provides implementations of more specific subinterfaces like Set and
List. This interface is typically used to pass collections around and manipulate
them where maximum generality is desired."</i>
<p>The Sun documentation also states:
<p><i>"Bags or multisets (unordered collections that may contain duplicate
elements) should implement this interface directly."</i>
<p>However, JDK 1.3 does not provide any implementations for bags or multisets.&nbsp;
If you need collections of these types, you will need to define the implementation
classes yourself.
<p><b><font color="#FF0000">What about duplicate elements?</font></b>
<p><font color="#000000">Some implementations of <b>Collection</b> allow
duplicate elements, and others do not.&nbsp; Implementations of the <b>List</b>
interface
<i>(such as ArrayList)</i> allow duplicate elements.&nbsp; Implements
of
<b>Set</b> and <b>SortedSet</b> <i>(such as TreeSet)</i> do not allow
duplicate elements.&nbsp; This was illustrated in a previous lesson entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 5, The Core Collection Interfaces</a>.</font>
<p>A sample program in that lesson created two collection objects and applied
the polymorphic <b>add()</b> method to add the same elements to each collection.&nbsp;
One of the collection objects was of type <b>ArrayList</b>, and the other
collection object was of type <b>TreeSet</b>.&nbsp; The elements added
to each collection contained one pair of duplicate elements.&nbsp; The
duplicate element was automatically excluded from the <b>TreeSet</b> object,
but was retained in the <b>ArrayList</b> object.
<p><b><font color="#FF0000">So, what is a set?</font></b>
<p><font color="#000000">According to Sun, a <b>Set</b> is a <i>"collection
that contains no duplicate elements ... this interface models the mathematical
set abstraction."</i> An object of type <b>Set</b> is typically used to
model collections such as Social Security numbers where duplicates are
not allowed.</font>
<p><b><font color="#FF0000">And, what is a list?</font></b>
<p><font color="#000000">Also according to Sun, a <b>List</b> is <i>"An
ordered collection (also known as a sequence). The user of this interface
has precise control over where in the list each element is inserted. The
user can access elements by their integer index (position in the list),
and search for elements in the list."</i></font>
<p><b><font color="#FF0000">Ordered is not the same as sorted</font></b>
<p><font color="#000000">Note that an <i>ordered</i> collection is not
the same as a <i>sorted</i> collection.&nbsp; The fact that the collection
is ordered derives from the fact that each element in the collection has
a specific position specified by an index.&nbsp; In a sorted collection,
the position of each element is determined by its value relative to the
values of its predecessors and successors.</font>
<p><font color="#000000">Sun goes on to say, <i>"Unlike sets, lists typically
allow duplicate elements. More formally, lists typically allow pairs of
elements e1 and e2 such that e1.equals(e2), and they typically allow multiple
null elements if they allow null elements at all."</i></font>
<p><b><font color="#FF0000">Is ascending sort order always required?</font></b>
<p>Not all implementations of the <b>Collection</b> interface maintain
the elements in ascending sort order.&nbsp; Some may, and others do not.&nbsp;
For example, as discussed above, implementations of the <b>List</b> interface
<i>(such
as ArrayList)</i> do not maintain their elements in sorted order at all.&nbsp;
In other words, the position of an element in an <b>ArrayList</b> does
not depend on the value of the element.
<p>On the other hand, implementations of the interfaces named <b>SortedSet
</b><i>(such
as TreeSet) </i>and <b>SortedMap
</b>do maintain their elements in sorted
order.&nbsp; However, that order is not necessarily ascending.&nbsp; When
an object is instantiated from a class that implements the <b>SortedSet</b>
interface, the sorting order for that object can be established by providing
an object instantiated from a class that implements the <b>Comparator</b>
interface.&nbsp; In that case, the author of the implementing class determines
the order imposed on the elements in the collection.
<p><b><font color="#FF0000">Does case matter in String objects?</font></b>
<p>For example, if your <b>SortedSet</b> object contains references to
<b>String</b>
objects, the natural ascending sort would take the difference between upper
case and lower case characters into account.&nbsp; However, you might prefer
that case be ignored when establishing the sorted order.&nbsp; You can
accomplish this by providing an object of a class that implements the <b>Comparator</b>
interface and which defines the <b>compare() </b>and <b>equals()</b> methods
in such a way as to eliminate case considerations for comparisons of <b>String</b>
objects.&nbsp; <i>(The lesson entitled
<a href="Java1060.htm">Swing from
A to Z:&nbsp; Analyzing Swing Components, Part 1, Concepts</a> contains
a sample program named Introspect03 that implements the Comparator interface
for exactly this purpose.)</i>
<p><b><font color="#FF0000">Subinterfaces have more stipulations</font></b>
<p><font color="#000000">As you progress down the inheritance hierarchy,
you find that additional stipulations apply at each level of inheritance.&nbsp;
As an example, according to Sun, <i>"The Set interface places additional
stipulations, beyond those inherited from the Collection interface, on
the contracts of all constructors and on the contracts of the <b>add</b>,
<b>equals</b>
and <b>hashCode</b> methods."</i></font>
<p><font color="#000000">The important point is that specific subinterfaces
of the <b>Collection</b> interface can define requirements that do not
apply to all subinterfaces of the <b>Collection</b> interface.&nbsp; For
example, the <b>add()</b> method of the <b>Set</b> interface stipulates
the following:</font>
<blockquote><i><font color="#000000">"Adds the specified element to this
set if it is not already present."</font></i></blockquote>
<font color="#000000">On the other hand, the <b>add()</b> method of the
<b>Collection</b>
interface simply states:</font>
<blockquote><i><font color="#000000">"Ensures that this collection contains
the specified element."</font></i></blockquote>
<font color="#000000">Thus, the contract for the <b>add()</b> method of
an object of a class that implements the <b>Set</b> interface is more specialized
than the contract for the <b>add()</b> method of an object of a class that
implements <b>Collection</b> interface.</font>
<p>An additional stipulation on the constructor for a <b>Set</b> object
is that all constructors must create a set that contains no duplicate elements.
<p><b><font color="#FF0000">Stipulations on SortedSet</font></b>
<p>The <b>SortedSet</b> interface extends the <b>Set</b> interface. The
<b>SortedSet</b>
interface contains the following stipulation that makes it more specialized
than a <b>Set</b>.
<p><i>"A set that further guarantees that its iterator will traverse the
set in ascending element order, sorted according to the natural ordering
of its elements (see Comparable), or by a Comparator provided at sorted
set creation time."</i>
<p><b><font color="#FF0000">Let's end with a quiz</font></b>
<p>I'm going to finish this lesson with several questions in the form of
a quiz.&nbsp; To ensure that this is a learning experience, I will provide
an explanation in addition to the answer for each question.
<p><b><font color="#FF0000">Q1</font></b>&nbsp; True or False?&nbsp; A
collection that implements the <b>List</b> interface maintains its elements
in ascending alphanumeric order.
<p>The answer to question 1 is false.&nbsp; Unlike collections that implement
the <b>SortedSet</b> interface, the order of the elements in a collection
that implements the <b>List</b> interface is not based on the values of
the objects referred to by the elements in the list.
<p><b><font color="#FF0000">Q2</font></b>&nbsp; True or False?&nbsp; A
collection that implements the <b>List</b> interface is an unordered collection.
<p>The answer to question 2 is also false.&nbsp; A collection that implements
the <b>List</b> interface is an ordered collection
<i>(also known as a
sequence)</i>.&nbsp; According to Sun, <i>"The user of the interface has
precise control over where in the list each element is inserted." </i>Elements
can be inserted and retrieved on the basis of their integer index <i>(position
in the list)</i> using the following methods:
<p><b><tt>add(int index, Object element)</tt></b>
<br><b><tt>get(int index)</tt></b>
<p>Valid index values are positive integers that begin with zero.&nbsp;
When the <b>add</b> method is used to insert an element at a specific position
in the sequence, the element currently at that position <i>(if any)</i>
and any subsequent elements are shifted toward higher index values to make
room for the new element.
<p>Another version of the <b>add</b> method takes a reference to an object
as an incoming parameter and appends the specified element to the end of
the collection.
<p>The <b>get</b> method simply returns the element at the specified position
in the collection.
<p>The <b>List</b> interface also declares various other methods that can
be used to manipulate the contents of the collection.
<p><b><font color="#FF0000">Q3</font></b>&nbsp; True or False?&nbsp; A
collection that implements the <b>List</b> interface is allowed to contain
duplicate values.
<p><font color="#000000">The answer to question 3 is true.&nbsp; Unlike
a collection that implements the <b>Set</b> interface, a</font> collection
that implements the <b>List</b> interface is typically allowed to contain
duplicate values.&nbsp; More formally, according to Sun, <i>"lists typically
allow pairs of elements <tt>e1</tt> and <tt>e2</tt> such that <tt>e1.equals(e2)</tt>,
and they typically allow multiple null elements if they allow null elements
at all."</i>
<p><b><font color="#FF0000">Q4</font></b>&nbsp; True or False?&nbsp; The
contracts of the methods in the <b>List</b> interface are the same as the
contracts of the methods inherited from the <b>Collection</b> interface.
<p><font color="#000000">The answer to question 4 is false.&nbsp; According
to Sun, <i>"The <b>List</b> interface places additional stipulations, beyond
those specified in the <b>Collection</b> interface, on the contracts of
the <b><tt>iterator</tt></b>, <b><tt>add</tt></b>, <b><tt>remove</tt></b>,
<b><tt>equals</tt></b>,
and <b><tt>hashCode</tt></b> methods."</i></font>
<p><font color="#000000">For example, the <b>iterator()</b> method <i>(for
both the <b>List</b> and <b>Collection</b> interfaces)</i> returns an iterator
over the elements in the collection.&nbsp; For the <b>Collection</b> interface,
there are no guarantees concerning the order in which the elements are
returned by the methods of the <b>Iterator</b> object.</font>
<p><font color="#000000">On the other hand, the <b>iterator()</b> method
for the <b>List</b> interface returns an iterator over the elements in
the collection in proper sequence, where the sequence is determined by
the numeric index.&nbsp; In other words, when you invoke the methods of
the <b>Iterator</b> object on a <b>List</b>, the elements will be returned
in the proper sequence as determined by a numeric index.</font>
<p><font color="#000000">Similarly, according to Sun, the <b>SortedSet</b>
interface <i>"guarantees that its iterator will traverse the set in ascending
element order, sorted according to the natural ordering of its elements
(see Comparable), or by a Comparator provided at sorted set creation time."</i></font>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson you learned that all of </font>the
implementations of the interfaces in the Java Collections Framework implement
one of the subinterfaces of the <b>Collection</b> interface.&nbsp; You
learned that a <b>Set</b> object cannot contain duplicate elements, but
a <b>List</b> object can contain duplicate elements.
<p>You learned about the difference between <i>ordered</i> collections
and <i>sorted</i> collections.&nbsp; You also learned about <i>ascending
order</i> and the <i>natural ordering</i> of objects.&nbsp; In addition,
you learned how more specialized stipulations are placed on interfaces
as you progress down the interface inheritance hierarchy of the Java Collections
Framework.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
<font color="#000000">The <b>SortedSet</b> interface <i>"guarantees that
its iterator will traverse the set in ascending element order, sorted according
to the natural ordering of its elements (see Comparable), or by a Comparator
provided at sorted set creation time."&nbsp; </i>In the next lesson, I
will show you how to use the <b>Comparator</b> interface to control the
sorted order of your collections.</font>
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
