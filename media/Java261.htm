<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>&nbsp;Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Reflection and the Method Class - II<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 261, Revised 02/13/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul></ul>

<hr width="100%"><center><h2><a name="preface"></a><font color="#ff0000">Preface</font></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.
<center><h2><a name="introduction"></a><b><font color="#ff0000">Introduction</font></b></h2></center>
One of the Java features introduced in JDK 1.1 is <i>reflection</i>. According
to the documentation for JDK 1.1:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>"<i>(Reflection)</i> Enables Java code to discover information about
the <i>fields</i>, <i>methods </i>and <i>constructors </i>of loaded classes,
and to use reflected fields, methods, and constructors to operate on their
underlying counterparts on objects, within security restrictions. The API
accommodates applications that need access to either the public members
of a target object (based on its runtime class) or the members declared
by a given class."</td></tr></table>
A previous lesson reviewed many of the capabilities of reflection in general,
and explored the capabilities of the <b>Method</b> class in particular.
However, there was one important method of the <b>Method</b> class that
we didn't explore - <b>invoke()</b>. We will begin our examination of this
very important method in this lesson, and possibly continue into one or
two additional lessons.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
The purpose of this program is to demonstrate the <b>invoke()</b> method
of the <b>Method </b>class using a <u>very simple</u> example program.
More complicated programs which illustrate some of the benefits will be
presented later.

<p>This program assumes that the name of the method as well as the types
of arguments in the formal argument list are known.

<p>A test class named <b>TstCls </b>is defined which contains two methods
named<b> setFlds() </b>and <b>showFlds()</b>. As you might expect, the
<b>setFlds()</b> method is used to set values into the fields of an object
of the class, and the <b>showFlds()</b> method displays those values.

<p>The <b>TstCls </b>class has two instance variables. One is of type <b>String
</b>and the other is of type <b>Date</b>.

<p>An object of type <b>TstCls </b>is instantiated. The <b>getClass()</b>
method is applied to this object to create an object of the <b>Class </b>class
named <b>theClass</b>.

<p>An array of <b>Class </b>objects is instantiated such that each of the
elements in the array is a <b>Class </b>object that matches the class (type)
of a corresponding item in the formal argument list of the method of interest.
The method of interest is named <b>"setFlds"</b>.

<p>The <b>getMethod() </b>method of the <b>Class </b>class is then used
in conjunction with the <b>Class </b>object named <b>theClass </b>and <u>the
name of the method of interest</u> (as a <b>String</b>) and the array of
class objects to create an object of type <b>Method </b>named <b>theMethod
</b>that represents the method of interest.

<p>An array of <b>Object </b>objects is instantiated and populated such
that each of the elements in the array represents a parameter to be passed
to the method of interest when it is invoked. Note that this <u>must be
an array of Object objects</u>, and <u>not</u> an array of <b>Class </b>objects.

<p>Then the <b>invoke()</b> method of the <b>Method </b>class is invoked
on the object of type <b>Method</b>, named <b>theMethod</b>, passing a
reference to <b>theObj </b>and the array of parameters. This causes the
method of interest <u>to be invoked</u> on the object named <b>theObj </b>with
the elements of the array being passed as parameters.

<p>Note that the object of type <b>Method </b>is a generic representation
of the method of interest which could be used to invoke that method on
any object of that type. This is demonstrated later.

<p>Finally, a conventional invocation of the <b>showFlds()</b> method on
the object named <b>theObj </b>is executed to display the current values
of the instance variables in the object named <b>theObj </b>to confirm
that the <b>setFlds()</b> method was actually invoked in the roundabout
manner described above.

<p>After this, another object of the same type is instantiated and the
<b>Method </b>object is used to invoke the same method on the new object,
passing a different set of parameters.

<p>This demonstrates that the <b>Method </b>object is a generic representation
of the method of interest and can be used to invoke the method of interest
on any object of the same type without any requirement to regenerate the
<b>Method </b>object.

<p>A large number of exceptions can be thrown so there is a correspondingly
large number of catch blocks at the end of the program to deal with them.

<p>Later on we will provide some examples to show how this may be useful.

<p>This program was tested using JDK 1.1.3 under Win95.

<p>The output from the program is shown in the full program listing later
in the lesson.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
The first interesting code fragment is the test class shown below. An object
of this class will be used to demonstrate that the <b>invoke()</b> method
of the <b>Method</b> class can be used to invoke the methods of an object
of the class.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>//Define a test class
class <b>TstCls</b>{
&nbsp; String strFld;
&nbsp; Date dteFld;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; public void <b>setFlds</b>(String strFld, Date dteFld){
&nbsp;&nbsp;&nbsp; this.strFld = strFld;
&nbsp;&nbsp;&nbsp; this.dteFld = dteFld;
&nbsp; }//end setFlds
&nbsp; //-----------------------------------------------------//

&nbsp; public void <b>showFlds</b>(){
&nbsp;&nbsp;&nbsp; System.out.println(strFld);
&nbsp;&nbsp;&nbsp; System.out.println(dteFld);
&nbsp; }//end showFlds
&nbsp; //-----------------------------------------------------//
}//end TstCls</pre></td></tr></table>
The remainder of the program is all contained in one large class, which
is the controlling class named <b>Reflections04</b>.

<p>In fact, the entire remainder of the program is contained in the <b>main()</b>
method of that class.

<p>We will break this <b>main()</b> method up and discuss it in parts.
The whole thing is enclosed in a <b>try</b> block which we will ignore.

<p>Initially, we will instantiate an object of our test class, and apply
the <b>getClass()</b> method to that object to obtain an object of type
<b>Class</b> which we will reference with a reference variable named <b>theClass</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TstCls theObj = <b>new TstCls()</b>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class theClass = <b>theObj.getClass()</b>;</pre></td></tr></table>
Next, we need an array of <b>Class</b> objects that contains one object
reference representing the correct type for each of the arguments in the
formal argument list of the method of interest. In our case, the method
of interest has a <b>String</b> parameter and a <b>Date</b> parameter.
This means that the first element in our <b>Class</b> array must represent
the <b>String</b> class, and the second element must represent the <b>Date</b>
class.

<p>We accomplish this with the following code fragment, assigning the array
to the reference variable named <b>theParams</b>. Note that we are not
simply instantiating new objects of the <b>String</b> and <b>Date</b> classes.
Rather, we are using those new instances to create new instances of the
<b>Class</b> class that represent those classes.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class[] <b>theParams </b>= new Class[2];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theParams[0] = new String().<b>getClass</b>();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theParams[1] = new Date().getClass();</pre></td></tr></table>
The next step is to apply the <b>getMethod()</b> method of the <b>Class</b>
class to the <b>Class</b> object representing the class of interest to
create a <b>Method</b> object representing the method named <b>setFlds</b>
whose formal argument list matches the contents of the array named <b>theParams</b>
that we constructed above.

<p>Recall that because of method overloading, the class may contain many
methods having this same name, but it can only contain one method having
both the name and the argument list specified.

<p>Note that there are several similar-sounding methods of the <b>Class</b>
class that will create <b>Method</b> objects. This particular one will
only create <b>Method</b> objects for <b>public</b> methods.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Method theMethod =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> theClass.getMethod("setFlds",theParams)</b>;</pre></td></tr></table>
In a minute, we are going to use the <b>invoke()</b> method of the <b>Method</b>
class to invoke the method represented by our <b>Method</b> object. However,
in order to do that, we need to be able to pass the required parameters
to the method.

<p>The methodology for passing the parameters is to instantiate an array
of type <b>Object</b> where each of the elements in the array is of the
correct type and of the correct value to qualify as parameters to the method.
Note that this is an array of type <b>Object</b> and is <u>not</u> an array
of type <b>Class</b>.

<p>Objects of type <b>Object</b> can, and in this case, should contain
data. On the other hand, objects of type <b>Class</b> represent classes
and do not contain data in the sense that we normally use the word data
(I'll probably get called to task for this statement).

<p>The following code fragment instantiates and populates an object of
type <b>Object</b> with the first element being a <b>String</b> object
and the second element being a <b>Date</b> object.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object[] setParams = new Object[2];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setParams[0] = "One Object";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setParams[1] = new Date();</pre></td></tr></table>
Now we will pull it all together.

<p>At this point, the <b>Method</b> object referred to as <b>theMethod</b>
represents a method having a specific name and a specific formal argument
list.

<p>We will invoke the <b>invoke()</b> method on <b>theMethod</b>.

<p>The purpose is to invoke another method having the name and a formal
argument list represented by our <b>Method</b> object referred to as <b>theMethod</b>.

<p>We will pass to the <b>invoke()</b> method a reference to the object
that contains the method of interest.

<p>We will also pass an array of type <b>Object</b> that contains the parameters
that we want to pass to the method in that object that we are invoking..

<p>Look this code over very carefully and make certain that you understand
it. This is how the <b>invoke()</b> method works, and is similar to some
other methods in the reflection API.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theMethod.<b>invoke</b>(theObj,setParams);</pre></td></tr></table>
Lets review. We create an object of type <b>Method</b> that represents
a generic method having a specified name and a specified formal argument
list. In effect, the <b>Method</b> object <u>represents a method signature</u>.

<p>We invoke the <b>invoke()</b> method on that object to invoke a method
having that signature. To cause it to invoke the method on the correct
object, we pass a reference to the object as a parameter to the <b>invoke()</b>
method. In other words, if many different objects existed within the scope
of our code having methods with the same signature, we could use the same
<b>Method</b> object to invoke that method on any of those objects.

<p>Finally, in order to pass the necessary parameters to the method, we
instantiate and populate an array of type <b>Object</b> containing the
necessary object references to satisfy the required parameters.

<p>If the formal argument list contains arguments of primitive types, we
must wrap those primitive values in the standard Java <i>wrappers</i> for
the specified type when we construct our array of objects. They will be
automatically unwrapped and used when the method is invoked.

<p>The above code should have cause some specific values to be set into
the instance variables of the object on which the method was invoked. Following
this, we use a conventional method invocation approach to invoke the <b>showFlds()</b>
method on the object so that we can inspect those values and confirm that
they were properly set.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theObj.showFlds(); //display new state of object&nbsp;</pre></td></tr></table>
I mentioned earlier that the same <b>Method</b> object can be used to invoke
a method with a matching signature on any object within the scope of the
code. The following fragment instantiates another object and invokes the
method on the new object without regenerating the <b>Method</b> object
to demonstrate that this can be done.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TstCls <b>anotherObj </b>= new TstCls();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setParams[0] = <b>"A Different Object"</b>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setParams[1] = new Date();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theMethod.<b>invoke</b>(<b>anotherObj</b>,setParams);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; anotherObj.<b>showFlds</b>(); //display new state of object</pre></td></tr></table>
We follow this with several catch blocks to complete the program.

<p>As indicated earlier, this program was designed for clarity, so that
you can see the basic mechanics of using the <b>invoke()</b> method without
complicating things by trying to make it do something useful.

<p>The next lesson will apply the <b>invoke()</b> method to a real world
situation and develop a relatively sophisticated event-forwarding smart
adapter class with built-in event filtering capability.

<p>.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>

<table border bgcolor="#ffff80" ><tr><td><pre>/*File Reflections04.java Copyright 1998, R.G.Baldwin

The purpose of this program is to demonstrate the invoke()
method of the java.lang.reflect.Method class using a&nbsp;
<i><u>very simple example program</u></i>.&nbsp; More complicated programs
which illustrate some of the benefits will be presented
later.

This program was tested using JDK 1.1.3 under Win95.

The output from the program is shown below.&nbsp;&nbsp;

One Object
Tue Jan 06 15:08:01 CST 1998
A Different Object
Tue Jan 06 15:08:02 CST 1998
**********************************************************/
import java.lang.reflect.*;
import java.util.*;
//=======================================================//

//Define a test class
class TstCls{
&nbsp; String strFld;
&nbsp; Date dteFld;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; public void setFlds(String strFld, Date dteFld){
&nbsp;&nbsp;&nbsp; this.strFld = strFld;
&nbsp;&nbsp;&nbsp; this.dteFld = dteFld;
&nbsp; }//end setFlds
&nbsp; //-----------------------------------------------------//

&nbsp; public void showFlds(){
&nbsp;&nbsp;&nbsp; System.out.println(strFld);
&nbsp;&nbsp;&nbsp; System.out.println(dteFld);
&nbsp; }//end showFlds
&nbsp; //-----------------------------------------------------//
}//end TstCls
//=======================================================//

class Reflections04 {
&nbsp;&nbsp;
&nbsp; public static void main(String[] args) {
&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Instantiate an object of the test class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TstCls theObj = new TstCls();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create a Class object for the test class
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class theClass = theObj.getClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create an array of Class objects which matches
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the known formal argument list of the method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // of interest.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class[] theParams = new Class[2];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theParams[0] = new String().getClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theParams[1] = new Date().getClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the name of the method and the array describing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the formal argument list to create an object of
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // type Method that represents the method of interest
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Method theMethod =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theClass.getMethod("setFlds",theParams);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Create an array of Object objects that matches
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the known formal argument list of the method of
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // interest.&nbsp; Populate this array with parameter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // values to be passed to the method.&nbsp; Note that
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // this is an Object array and not a Class array.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object[] setParams = new Object[2];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setParams[0] = "One Object";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setParams[1] = new Date();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the Method object and the array of parameter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // objects to invoke the method of interest.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theMethod.invoke(theObj,setParams);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the conventional approach to invoke another
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // method on the same object to demonstrate that
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the setFlds() method was properly invoked.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theObj.showFlds(); //display new state of object&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Instantiate another object of the same type and
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // use the existing Method object to invoke the same
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // method on it, passing different parameters.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TstCls anotherObj = new TstCls();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setParams[0] = "A Different Object";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; setParams[1] = new Date();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theMethod.invoke(anotherObj,setParams);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; anotherObj.showFlds(); //display new state of object

&nbsp;&nbsp;&nbsp; }//end try block
&nbsp;&nbsp;&nbsp; //Deal with all the possible exceptions here
&nbsp;&nbsp;&nbsp; catch(SecurityException e){System.out.println(e);}
&nbsp;&nbsp;&nbsp; catch(NoSuchMethodException e){System.out.println(e);}
&nbsp;&nbsp;&nbsp; catch(IllegalAccessException e){System.out.println(e);}
&nbsp;&nbsp;&nbsp; catch(IllegalArgumentException e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(e);}
&nbsp;&nbsp;&nbsp; catch(InvocationTargetException e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(e);}
&nbsp; }//end main()
}//end Reflections04</pre></td></tr></table>
-end-<!--end--></body></html>