<html>

<head>
<meta name=Generator content="Microsoft Office HTML Filter 2.0">
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=Originator content="Microsoft Word 9">
<title>... in Java by Richard G Baldwin</title>
<style>
<!--
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{
	margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=author content="richard g. baldwin">
</head>

<body lang=EN-US link=blue vlink=blue>
<!--start-->

<div class=Section1>

<h3 align=center style='text-align:center'><i>Richard G Baldwin (512) 223-4758,
<a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>, <a
href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></h3>

<h2 align=center style='text-align:center'><!--title-->Java 2D Graphics, Nested
Top-Level Classes and Interfaces<!--endtitle--></h2>

<p class=MsoNormal>Java Programming, Lecture Notes # 300, Revised 01/30/00. </p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><a
     href="#_Getting_Started_with">Getting Started with Java 2D Graphics</a></li>
 <li class=MsoNormal><a
     href="#_Introduction">Introduction</a></li>
 <li class=MsoNormal><a
     href="#_References">References</a></li>
 <li class=MsoNormal><a
     href="#_Types_of_Inner">Types of Inner Classes</a></li>
 <li class=MsoNormal><a
     href="#_What_Is_an">What Is an Inner Class</a></li>
 <li class=MsoNormal><a
     href="#_Brief_Discussion_of">Brief Discussion of Different Types</a></li>
 <ul style='margin-top:0in' type=circle>
  <li class=MsoNormal><a
      href="#_Member_class">Member Class</a></li>
  <li class=MsoNormal><a
      href="#_Local_class">Local Class</a></li>
  <li class=MsoNormal><a
      href="#_Anonymous_class">Anonymous Class</a></li>
  <li class=MsoNormal><a
      href="#_Nested_top-level_class">Nested Top-Level Class or Interface</a></li>
 </ul>
 <li class=MsoNormal><a
     href="#_Sample_Program">Sample Program</a></li>
 <li class=MsoNormal><a
     href="#_Complete_Program_Listing">Complete Program Listing</a></li>
</ul>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=3 width="100%" align=center>

</div>


<h2 align=center style='text-align:center'><a name="_Getting_Started_with"></a><span
style='color:red'>Getting Started with Java 2D Graphics</span></h2>

<p class=MsoNormal>I don&#8217;t know of a better way to get started with Java 2D
Graphics than to run, and enjoy the demonstration program provided by Sun with
the JDK 1.2.x download package.&nbsp; If you don&#8217;t do anything else with Java
2D, you should at least run the demo to get a feel for what is possible.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I am running JDK 1.2.2 as of this writing.&nbsp; In my
installation of the JDK, I can find the demo stored in the following path and
file:&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>jdk1.2.2\demo\jfc\Java2D\Java2Demo.jar.&nbsp; </b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Your path may be different, but hopefully the demo will be
contained in the file named <b>Java2Demo.jar</b>.&nbsp; (Note that the file is
named Java2Demo.jar and <u>not</u> Java2DDemo.jar.)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You must have JDK 1.2.x installed in order to run the
demo.&nbsp; Apparently, it is also possible to run it as an applet if you have
a browser that is JDK 1.2 compatible, but I haven&#8217;t tried to do that.&nbsp; See
the <b>README.txt</b> file in the same directory for more information in this
regard.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I can execute the demo by changing directories to the
directory containing the file named Java2Demo.jar and then executing the
following command at the command prompt:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>java -jar Java2Demo.jar</b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>What happens next is truly amazing; so amazing in fact that I
won&#8217;t even try to describe it.&nbsp; Give it a shot.&nbsp; It will be well
worth the effort.</p>

<h2 align=center style='text-align:center'><a name="_Introduction"></a><span
style='color:red'>Introduction</span></h2>

<p class=MsoNormal>You might wonder why a tutorial lesson that purports to
cover the Java 2D Graphics API is really a tutorial on what some may consider
to be advanced Inner Classes.&nbsp; This is the first in a series of tutorials
on the Java 2D Graphics API.&nbsp; That API makes some rather interesting uses
of Nested Top-Level Classes.&nbsp; Therefore, I decided to get that behind us
at the outset, and then it won&#8217;t be necessary for me to continue explaining it
as we get into the meat of the 2D Graphics API.</p>

<h2 align=center style='text-align:center'><a name="_References"></a><span
style='color:red'>References</span></h2>

<p class=MsoNormal>The best reference on Inner Classes that I am aware of is <u>Java
in a Nutshell</u>, Second Edition or later, by David Flannagan, published by
O&#8217;Reilly.&nbsp; </p>

<h2 align=center style='text-align:center'><a name="_Types_of_Inner"></a><span
style='color:red'>Types of Inner Classes</span></h2>

<p class=MsoNormal>Flannagan tells us that beginning with JDK 1.1, Java has
supported the following types of Inner Classes:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Member
     classes</li>
 <li class=MsoNormal>Anonymous
     classes</li>
 <li class=MsoNormal>Local
     classes</li>
 <li class=MsoNormal>Nested
     top-level classes and interfaces*</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><span style='font-size:10.0pt'>*Technically, this is not
really an Inner Class.&nbsp; Rather, it is a special form of a top-level
class.&nbsp; However, the syntax for defining it causes it to look like an
Inner Class, and Flanagan discusses it in the Inner Class section of his book.</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Member classes and anonymous classes have been discussed in
detail in other tutorial lessons in this series, and therefore, won&#8217;t be
discussed in any detail here.&nbsp; As of this writing, I haven&#8217;t discussed
local classes in any of the tutorial lessons.&nbsp; Since they are not of
interest with regard to the 2D Graphics API, I won&#8217;t discuss them in detail
here either.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As of this writing, nested top-level classes also haven&#8217;t
been discussed in any of my other tutorial lessons.&nbsp; They are particularly
interesting with regard to the 2D API.&nbsp; Therefore, they will be the
primary topic of this tutorial lesson.</p>

<h2 align=center style='text-align:center'><a name="_What_Is_an"></a><span
style='color:red'>What Is an Inner Class</span></h2>

<p class=MsoNormal>Classes can be defined as members of other classes, just as
fields and methods can be defined within classes.&nbsp; Classes can also be
defined within a block of Java code.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The following quotation from Flanagan provides one of the
most important insights that I know of regarding Inner Classes (and nested
top-level classes that look like Inner Classes from a syntax viewpoint):</p>

<p class=MsoNormal>&nbsp;</p>

<table border=0 cellspacing=0 cellpadding=0 style='border-collapse:collapse;'>
 <tr>
  <td width=738 valign=top style='width:6.15in;border:solid windowtext .5pt;
  background:#00CCFF;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal>&#8220;The Java Virtual Machine knows nothing about nested top-level
  classes and interfaces or the various types of inner classes. Therefore, the
  Java compiler must convert these new types into standard, non-nested class
  files that the Java interpreter can understand.&nbsp; This is done through
  source-code transformations that insert $ characters into nested class
  names.&nbsp; These source-code transformations may also insert hidden fields,
  methods, and constructor arguments into affected classes.&#8221;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Flanagan also tells us that &#8220;All nested and inner classes
are converted to&#8221; top-level classes and interfaces.&nbsp; (We will see an
example of this at the end of this lesson.)&nbsp; Top-level classes and
interfaces are the ordinary classes and interfaces that are direct members of
packages.&nbsp; These are the basic Java classes and interfaces that are
understood by the Java Virtual Machine.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In other words, this says to me that anything that we can do
with Inner Classes and top-level nested classes, we should be able to do
without the use of Inner Classes if we knew how to write the source code to do
it.&nbsp; However, the use of Inner Classes provides a very convenient
mechanism for accomplishing certain tasks, and I use them frequently.</p>

<h2 align=center style='text-align:center'><a name="_Brief_Discussion_of"></a><span
style='color:red'>Brief Discussion of Different Types</span></h2>

<p class=MsoNormal>I will provide a brief discussion of each of the types of
Inner Classes in the following sections, and will then concentrate on nested
top-level classes for the remainder of the lesson.</p>

<h3 align=center style='text-align:center'><a name="_Member_class"></a><span
style='color:red'>Member Class</span></h3>

<p class=MsoNormal>A <i>member class</i> is defined as a member of an enclosing
class.&nbsp; It is not prefaced by the <i>static</i> keyword.&nbsp; Therefore,
it is truly an Inner Class definition and is not a <i>top-level nested class</i>
as discussed later.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>There is no such thing as a <i>Member Interface</i> or <i>Inner
Interface</i>.&nbsp; Probably the most important thing about a member class is
that the code within a member class can implicitly refer to any of the fields
and methods, including <i>private</i> fields and methods, of its enclosing
class.&nbsp; This can often greatly simplify the source code to accomplish a
particular task.&nbsp; The use of member classes is particularly common with
respect to the <i>source/listener</i> event model introduced in JDK 1.1.</p>

<h3 align=center style='text-align:center'><a name="_Local_class"></a><span
style='color:red'>Local Class</span></h3>

<p class=MsoNormal>According to Flanagan, a <i>local class</i> is &#8220;an inner
class defined within a block of Java code; it is visible only within that
block.&#8221;&nbsp; Interfaces cannot be defined locally.&nbsp; According to
Flanagan, &#8220;local classes are not member classes, but can still use the fields
and methods of enclosing classes.&nbsp; See Flanagan&#8217;s book for additional
discussion on local classes.</p>

<h3 align=center style='text-align:center'><a name="_Anonymous_class"></a><span
style='color:red'>Anonymous Class</span></h3>

<p class=MsoNormal>An anonymous class is an extension to the local class
described above.&nbsp; According to Flanagan, &#8220;Instead of declaring a local
class with one Java statement, and then instantiating and using it in another
statement, an anonymous class combines the two steps in a single Java
expression.&#8221;&nbsp; Interfaces cannot be defined anonymously.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I have discussed the definition and use of anonymous classes
in several previous lessons where I use them for defining, instantiating and
registering listener objects.&nbsp; See those lessons, or see Flanagan&#8217;s book
for further discussion of anonymous classes.</p>

<h3 align=center style='text-align:center'><a name="_Nested_top-level_class"></a><span
style='color:red'>Nested Top-Level Class or Interface</span></h3>

<p class=MsoNormal>The use of nested top-level classes provides a convenient
way to group related classes.&nbsp; A nested top-level class or interface must
be defined as a <i>static</i> member of an enclosing top-level class or
interface.&nbsp; Nested interfaces are implicitly <i>static</i>.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>According to Flanagan, &#8220;A nested top-level class or
interface behaves just like a &#8216;normal&#8217; class or interface that is a member of a
package.&nbsp; The difference is that the name of a nested top-level class or
interface includes the name of the class in which it is defined.&#8221; (Again, we
will see an example of this naming convention at the end of this lesson.)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>They can only be nested within other top-level classes and
interfaces (they cannot be nested within inner classes), and they can be nested
to any depth.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As mentioned earlier, nested top-level classes are of
particular interest to us here because they are heavily used in the 2D Graphics
API.</p>

<h2 align=center style='text-align:center'><a name="_Sample_Program"></a><span
style='color:red'>Sample Program</span></h2>

<p class=MsoNormal>The behavior of this sample program is similar to the manner
in which the 2D Graphics API makes use of nested top-level classes.&nbsp; The
program is designed to illustrate the use of a <i>static</i> class that is
contained within another class.&nbsp; It is important to note that the
contained <i>static</i> class <i>extends</i> the class in which it is
contained.&nbsp; As a result, an object of the contained class can be treated
as though it is of the containing class type, with appropriate downcasting
being performed when required.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Because of the length of the program, I will break it up and
discuss it in fragments.&nbsp; A complete listing of the program is provided at
the end of the lesson.</p>

<h3><span style='color:red'>The class named OuterClass</span></h3>

<p class=MsoNormal>The first fragment shows the beginning of an <i>abstract</i>
class named <b>OuterClass</b> that contains two different nested top-level
classes.&nbsp; Each of the contained classes <i>extends</i> the containing
class named <b>OuterClass</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This class contains a method named <b>talk()</b> that is
overridden in both of the contained classes.&nbsp; Note that this method is
included here simply to make it possible to identify and separate the behavior
of the containing class (which is a superclass) and the contained classes, each
of which is a subclass of the containing class.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This identification and separation of behavior is
accomplished by invoking the superclass version of the <b>talk()</b> method in
each of the overridden versions of the method, prior to providing specific
behavior in the overridden versions.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=595 style='width:356.7pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:#0000C0'>abstract class</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>OuterClass</b>{</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#C00000'>void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>talk</b>(){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; System.out.println(</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;Hello
  from superclass OuterClass&quot;</span><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end talk</span></p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>The class named OuterClass.NestedDoubleClass</span></h3>

<p class=MsoNormal>The next fragment shows the definition of a<i> static</i>
class named <b>OuterClass.NestedDoubleClass</b>, which is the first of the two
nested top-level classes contained within the class named <b>OuterClass</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note in particular the name of this class.&nbsp; Although
the class is named <b>NestedDoubleClass</b> in its source code definition, it
must be referred to by the name <b>OuterClass.NestedDoubleClass</b> because it
is nested within the class named <b>OuterClass</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As mentioned above, this class definition contains an
overridden version of the method named <b>talk()</b>, which is inherited from
the superclass named <b>OuterClass</b>.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Also, as mentioned above, the overridden version of the
method named <b>talk()</b> invokes the superclass version of the same method
through the use of the <b>super</b> keyword.&nbsp; This results in the
following sequence of output lines on the screen when the <b>talk()</b> method
is invoked on an object of this class.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:"Courier New"'>Hello from superclass OuterClass</span></b></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New"'>--Goodbye
from object of class OuterClass.NestedDoubleClass</span></b></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The first line of output is produced by the superclass
version of the method and the second line of output is produced by the
overridden version of the method.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This class definition also contains an instance variable
named <b>theString</b>, which we will see being accessed in a subsequent code
fragment.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=595 style='width:356.7pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#0000C0'>static class</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>NestedDoubleClass</b>
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>extends</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>OuterClass</b>{</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; String <b>theString</b> =
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;---Hello
  from object of class &quot;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  + </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;OuterClass.NestedDoubleClass&quot;</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#C00000'>void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>talk</b>(){</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//override the
  talk method</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>super</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>.talk();</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//invoke
  superclass version</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  System.out.println(</span><span style='font-size:10.0pt;font-family:"Courier New";
  color:#C10000'>&quot;---Goodbye from object of class &quot;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  + </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;OuterClass.NestedDoubleClass&quot;</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; }</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//end talk()</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end class NestedDoubleClass</span></p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>The class named OuterClass.NestedFloatClass</span></h3>

<p class=MsoNormal>The next fragment shows the definition of another nested <i>static</i>
class that is very similar to the previous one.&nbsp; Because of the
similarity, I won&#8217;t discuss it further.&nbsp; The fragment also shows the end
of the outer class named <b>OuterClass</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=595 style='width:356.7pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#0000C0'>static class</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>NestedFloatClass</b>
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>extends</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>OuterClass</b>{</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; String <b>theString</b> =
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;==Hello
  from object of class &quot;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  + </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;OuterClass.NestedFloatClass&quot;</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#C00000'>void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>talk</b>(){</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//override the
  talk method</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>super</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>.talk();</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//invoke
  superclass version</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  System.out.println(</span><span style='font-size:10.0pt;font-family:"Courier New";
  color:#C10000'>&quot;==Goodbye from object of class &quot;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  + </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;OuterClass.NestedFloatClass&quot;</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; }</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//end talk()</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end class NestedFloatClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>}</span><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>//end class OuterClass</span></p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>The controlling class</span></h3>

<p class=MsoNormal>The next fragment shows the beginning of a controlling class
that instantiates and processes an object from each of the nested top-level
classes defined above.&nbsp; This fragment also shows the beginning of the <b>main()</b>
method of the controlling class.</p>

<h3><span style='color:red'>The main() method</span></h3>

<p class=MsoNormal>The <b>main()</b> method declares a reference variable of
the class type <b>OuterClass</b>.&nbsp; This reference variable will later be
used to refer to objects instantiated from the nested classes that extend <b>OuterClass</b>.&nbsp;
This will be possible because an object can be referred to by a reference
variable of the class from which it is instantiated, or by a reference variable
of any superclass of that class.&nbsp; However, when the reference variable is
of a superclass type, it normally requires downcasting before anything useful
can be done with it.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=595 style='width:356.7pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:#0000C0'>class</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:black'> <b>InnerClasses04</b>{</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#0000C0'>public static void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>main</b>(String[]
  args){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//Declare a
  reference variable of type OuterClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; <b>OuterClass theVar;</b></span></p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>Instantiating and processing
OuterClass.NestedDoubleClass</span></h3>

<p class=MsoNormal>The following fragment instantiates and processes an object
of one of the nested classes (named <b>OuterClass.NestedDoubleClass</b>) and
saves the reference to that object in the reference variable (of type <b>OuterClass</b>)
declared above, which is of the superclass type.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that even though the name of the class in the nested
class definition is <b>NestedDoubleClass</b>, it is necessary to refer to its
constructor using the name <b>OuterClass.NestedDoubleClass</b> in order to
instantiate the object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In this case, processing the object consists of invoking the
method named <b>processTheObject()</b> and passing to that method, the
reference variable (of the superclass type) that refers to the object.&nbsp; I
will explain the behavior of the <b>processTheObject()</b> method later.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=595 style='width:356.7pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; theVar = </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>new</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>OuterClass.NestedDoubleClass</b>();</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; <b>processTheObject</b>(theVar);</span></p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>Instantiating and processing
OuterClass.NestedFloatClass</span></h3>

<p class=MsoNormal>The next fragment shows the instantiation and processing of
an object of the other nested class.&nbsp; The code and behavior is essentially
the same as in the previous fragment, so I won&#8217;t discuss it further.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=595 style='width:356.7pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; theVar = </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>new</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>
  OuterClass.NestedFloatClass();</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; processTheObject(theVar);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end main</span></p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>The method named processTheObject()</span></h3>

<p class=MsoNormal>Finally, the next fragment shows the method named <b>processTheObject()</b>.&nbsp;
There are several important points to consider here.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>First, the method receives a reference to an object as type <b>OuterClass</b>.&nbsp;
This is not the actual type of the object to which it refers, but rather is the
superclass of the object.&nbsp; Therefore, in order for this method to gain
access to the instance members of the object that are defined in the class from
which the object was instantiated, it is necessary do downcast the reference to
the actual type of the object.</p>

<h3><span style='color:red'>Downcast required</span></h3>

<p class=MsoNormal>In this case, there are two members of the object that are
of interest.&nbsp; One member is the instance variable named <b>theString</b>.&nbsp;
Because this member was not defined in the superclass, but rather was defined in
the subclass, it is necessary to downcast the reference to the actual type to
gain access to this member.</p>

<h3><span style='color:red'>Downcast not required</span></h3>

<p class=MsoNormal>The other member of interest is the method named <b>talk()</b>.&nbsp;
However, this member was defined in the superclass and then overridden in the
subclass.&nbsp; Due to the polymorphic behavior of Java, the overridden version
of the method in the object of the subclass type can be accessed using a
reference of the superclass type.</p>

<h3><span style='color:red'>Doing the required downcast</span></h3>

<p class=MsoNormal>The design of this method assumes that the object to which
the reference refers must be of one of the following two types:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><b>OuterClass.NestedDoubleClass</b></p>

<p class=MsoNormal><b>OuterClass.NestedFloatClass</b></p>

<p class=MsoNormal><b>&nbsp;</b></p>

<p class=MsoNormal>Since these are the only possibilities that exist, the
required downcasting can be accomplished using a simple pair of <b>if</b>
statements.&nbsp; (The problem would be more complicated if the possible types
of the incoming object were not known when the method is written.)</p>

<h3><span style='color:red'>Similar to functionality in 2D Graphics API</span></h3>

<p class=MsoNormal>This may not be exactly how this functionality is accomplished
in the 2D Graphics API (to be discussed in subsequent lessons), but it is
probably pretty close.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In effect, I have made it possible </p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>To
     instantiate an object from one of two classes that are both contained as <i>static
     </i>classes in their common <i>abstract</i> superclass, and </li>
 <li class=MsoNormal>To
     handle the reference to that object as the superclass type until the very
     last minute.&nbsp; </li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>At the last minute, when the time comes to actually perform
some process using the reference to the object, it is necessary to determine
the actual class of the object and to downcast the reference to that type in
order to access instance variables defined in the subclass.&nbsp; However, due
to polymorphic behavior, it is not necessary to downcast the reference in order
to gain access to a method that is defined in the abstract superclass and
overridden in the subclass.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This is probably very similar to the treatment given to
several different classes that we will see in the 2D Graphics API.&nbsp; You
should be able to recognize those classes when you see them.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=595 style='width:356.7pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#0000C0'>static void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> <b>processTheObject</b>(<b>OuterClass</b>
  theRefVariable){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//Test for the actual type of
  the incoming reference</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>// variable and downcast as
  appropriate before using it</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>if</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>(theRefVariable
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>instanceof</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  OuterClass.NestedDoubleClass){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  System.out.println(</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<b>(OuterClass.NestedDoubleClass)</b>theRefVariable).</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  <b>theString</b>);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; }</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//end
  if(theRefVariable instanceof ...</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>if</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>(theRefVariable
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>instanceof</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OuterClass.NestedFloatClass){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; System.out.println(</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(<b>(OuterClass.NestedFloatClass)</b>theRefVariable).</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>theString</b>);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; }</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//end
  if(theRefVariable instanceof ...</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; theRefVariable.<b>talk</b>();</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//invoke
  overridden talk() method</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end processTheObject()</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>}</span><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>//end controlling class InnerClasses04</span></p>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New";
  color:green'>//=======================================================//</span></p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>The screen output</span></h3>

<p class=MsoNormal>The following screen output was produced by the invocation
of the <b>processTheObject()</b> method on an object from each of the nested
subclasses.&nbsp; (I manually inserted blank lines between the output produced
by processing the first object and the output produced by processing the second
object to make the two sections of output easier to identify.)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The first line of output in each case was produced by
accessing and displaying the instance variable named <b>theString</b> in the
object (after downcasting appropriately).&nbsp; The next two lines were
produced by invoking the <b>talk()</b> method on the reference to the object
with no downcasting required.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The first line of output (in the last two lines) was
produced by the version of the <b>talk()</b> method that was defined in the superclass.&nbsp;
The second line was produced by the overridden version of the <b>talk()</b>
method that was defined in the nested <i>static</i>subclass.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:"Courier New"'>---Hello from object of class
OuterClass.NestedDoubleClass</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:"Courier New"'>Hello from superclass OuterClass</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:"Courier New"'>--Goodbye from object of class
OuterClass.NestedDoubleClass</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:"Courier New"'>&nbsp;</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:"Courier New"'>==Hello from object of class
OuterClass.NestedFloatClass</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:"Courier New"'>Hello from superclass OuterClass</span></b></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New"'>==Goodbye
from object of class OuterClass.NestedFloatClass</span></b></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:"Courier New"'>&nbsp;</span></b></p>

<h3><span style='color:red'>The class files</span></h3>

<p class=MsoNormal>Finally, you may be interested in knowing that the
compilation of this program produced the following four class files, each of
which, according to Flanagan, is a top-level class file.&nbsp; The two nested
classes resulted in class-file names that are prefaced by the name of the
containing class (<b>OuterClass</b>) and a dollar sign.</p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:7.0pt;
font-family:Courier;color:black'>&nbsp;</span></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>InnerClasses04.class</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>OuterClass$NestedDoubleClass.class</span></b></p>

<p class=MsoNormal style='text-autospace:none'><b><span style='font-size:10.0pt;
font-family:Courier'>OuterClass$NestedFloatClass.class</span></b></p>

<p class=MsoNormal><b><span style='font-size:10.0pt;font-family:Courier'>OuterClass.class</span></b></p>

<h2 align=center style='text-align:center'><a name="_Complete_Program_Listing"></a><span
style='color:red'>Complete Program Listing</span></h2>

<p class=MsoNormal>A listing of the complete program follows:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=595 style='width:356.7pt;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>/*InnerClasses04.java 12/07/99</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>Illustrates a static class that
  extends its </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>containing class.&nbsp; This is an
  illustration of the use of</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>nested top-level classes similar to
  that used in the</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>Graphics 2D API.</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>The output from the program is:</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>---Hello from object of class
  OuterClass.NestedDoubleClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>Hello from superclass OuterClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>--Goodbye from object of class
  OuterClass.NestedDoubleClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>==Hello from object of class
  OuterClass.NestedFloatClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>Hello from superclass OuterClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>==Goodbye from object of class
  OuterClass.NestedFloatClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>Tested using JDK 1.2.2 under WinNT
  Workstation 4.0</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>**********************************************************/</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>//This is a class that contains two
  nested top-level </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>// classes</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:#0000C0'>abstract class</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> OuterClass{</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//This method is overridden in
  each of the nested classes</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#C00000'>void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> talk(){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; System.out.println(</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;Hello
  from superclass OuterClass&quot;</span><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end talk</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//-----------------------------------------------------//</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//The definitions of two nested
  top-level classes follow</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//nested top-level class</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#0000C0'>static class</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>
  NestedDoubleClass </span><span style='font-size:10.0pt;font-family:"Courier New";
  color:#0000C0'>extends</span><span style='font-size:10.0pt;font-family:"Courier New";
  color:black'> OuterClass{</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; String theString = </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;---Hello
  from object of class &quot;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  + </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;OuterClass.NestedDoubleClass&quot;</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#C00000'>void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> talk(){</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//override the
  talk method</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>super</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>.talk();</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//invoke
  superclass version</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  System.out.println(</span><span style='font-size:10.0pt;font-family:"Courier New";
  color:#C10000'>&quot;---Goodbye from object of class &quot;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  + </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;OuterClass.NestedDoubleClass&quot;</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; }</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//end talk()</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end class NestedDoubleClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//nested top-level class</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#0000C0'>static class</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> NestedFloatClass
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>extends</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> OuterClass{</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; String theString = </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;==Hello
  from object of class &quot;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  + </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;OuterClass.NestedFloatClass&quot;</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#C00000'>void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> talk(){</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//override the
  talk method</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>super</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>.talk();</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//invoke
  superclass version</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  System.out.println(</span><span style='font-size:10.0pt;font-family:"Courier New";
  color:#C10000'>&quot;==Goodbye from object of class &quot;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  + </span><span style='font-size:10.0pt;font-family:"Courier New";color:#C10000'>&quot;OuterClass.NestedFloatClass&quot;</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; }</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//end talk()</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end class NestedFloatClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>}</span><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>//end class OuterClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>//=======================================================//</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>//This is the controlling class that
  instantiates and</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>// processes an object from each of
  the nested top-level</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>// classes defined above.</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:#0000C0'>class</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:black'> InnerClasses04{</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#0000C0'>public static void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'> main(String[]
  args){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//Declare a
  reference variable of type OuterClass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; OuterClass theVar;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//Instantiate
  and process an object of the subclass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>// named
  OuterClass.NestedDoubleClass, but refer to </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>// it as type
  OuterClass.</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; theVar = </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>new</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>
  OuterClass.NestedDoubleClass();</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; processTheObject(theVar);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//Instantiate
  and process an object of the subclass</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>// named
  OuterClass.NestedFloatClass,&nbsp; but refer to </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>// it as type
  OuterClass.</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; theVar = </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>new</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>
  OuterClass.NestedFloatClass();</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; processTheObject(theVar);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end main</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:#0000C0'>static void</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>
  processTheObject(OuterClass theRefVariable){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//Test for the actual type of
  the incoming reference</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>// variable and downcast as
  appropriate before using it</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>if</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>(theRefVariable
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>instanceof</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  OuterClass.NestedDoubleClass){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  System.out.println(</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((OuterClass.NestedDoubleClass)theRefVariable).</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;theString);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp; }</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//end
  if(theRefVariable instanceof ...</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; </span><span
  style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>if</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:black'>(theRefVariable
  </span><span style='font-size:10.0pt;font-family:"Courier New";color:#0000C0'>instanceof</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  OuterClass.NestedFloatClass){</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; System.out.println(</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((OuterClass.NestedFloatClass)theRefVariable).</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;
  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;theString);</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; }</span><span
  style='font-size:10.0pt;font-family:"Courier New";color:green'>//end
  if(theRefVariable instanceof ...</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp; </span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp;&nbsp;&nbsp;
  theRefVariable.talk();</span><span style='font-size:10.0pt;font-family:"Courier New";
  color:green'>//invoke overridden talk() method</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>&nbsp; }</span><span style='font-size:
  10.0pt;font-family:"Courier New";color:green'>//end processTheObject()</span></p>
  <p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
  font-family:"Courier New";color:black'>}</span><span style='font-size:10.0pt;
  font-family:"Courier New";color:green'>//end controlling class InnerClasses04</span></p>
  <p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New";
  color:green'>//=======================================================//</span></p>
  </td>
 </tr>
</table>

<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;

<p>-end-<!--end--></p>

</div>

</body>

</html>
