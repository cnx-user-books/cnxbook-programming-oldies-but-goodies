<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
                
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
                
  <meta name="GENERATOR" content="Microsoft FrontPage 6.0">
  <title>... JAVA and DSP by Richard G Baldwin</title>
</head>
  <body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
 
<h2>Fun with Java, How and Why Spectral Analysis Works</h2>
    <i>Baldwin explains how the Fourier transform can be used to determine 
the spectral content of a signal in the time domain.</i>    
<p><b>Published:</b>&nbsp; June 29, 2004 <br>
   <b>By <a href="#About%20the%20author">Richard G. Baldwin</a></b> </p>
     
<p>Java Programming, Notes # 1478</p>
     
<ul>
    <li> <a href="#Preface">Preface</a></li>
   <li><a href="#Multiply_Add_Operations">Multiply-Add Operations</a><br>
   </li>
     <li> <a href="#Preview">Preview</a></li>
     <li> <a href="#The_Fourier_Transform">The Fourier Transform</a></li>
     <li> <a href="#Summary">Summary</a></li>
     <li> <a href="#What%27s%20next">What's Next</a></li>
       
</ul>
        
<hr size="3" width="100%" align="center">    
<center>    
<h2> <a name="Preface"></a>Preface</h2>
   </center>
  Programming in Java doesn't have to be dull and boring.&nbsp; In fact,
it's possible to have a lot of fun while programming in Java.&nbsp; This
lesson is one in a series that concentrates on having fun while programming
in Java.  
<p><b><font color="#ff0000">Viewing tip</font></b> </p>
 
<p>You may find it useful to open another copy of this lesson in a separate
 browser window.&nbsp; That will make it easier for you to scroll back and
 forth among the different figures and listings while you are reading about
 them. </p>
 
<p><b><font color="#ff0000">Supplementary material</font></b> </p>
 
<p>I recommend that you also study the other lessons in my extensive collection
 of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp; However, 
as of the date of this writing, Gamelan doesn't maintain a consolidated index 
of my Java tutorial lessons, and sometimes they are difficult to locate there.&nbsp; 
You will find a consolidated index at <a
 href="http://www.dickbaldwin.com">www.DickBaldwin.com</a><font
 color="#000000">.</font></p>
<p>In addition, you will find some background material on DSP that is important 
to this lesson at <a href="http://www.dickbaldwin.com/tocdsp.htm">
http://www.dickbaldwin.com/tocdsp.htm</a>.</p>
 
<h2 align="center"><font color="#000000"><a
 name="Multiply_Add_Operations"></a>Multiply-Add Operations</font></h2>
        
<p><font color="#ff0000"><font color="#000000">This</font></font> lesson deals
with a topic commonly know as Digital Signal Processing, <i>(DSP for short).</i></p>
 
<p><b><font color="#ff0000">Computational requirements for DSP</font></b>
  </p>
     
<p><font color="#000000">The computational  requirements for implementing 
DSP in a computer program are usually straightforward.&nbsp;  Almost all DSP
operations consist of multiplying corresponding values  contained in two numeric 
series and then calculating the sum of the products.&nbsp; Sometimes,  the final 
sum is divided by the total number of values included in the sum.&nbsp; This is often referred 
 to as a <i>sum-of-products</i> or <i>multiply-add</i> operation.</font></p>
<blockquote>
	<p><i>(This is the digital equivalent of integrating the product of two 
	continuous functions between two limits.)</i></p>
</blockquote>
     
<p><b><font color="#ff0000">Typical notation</font></b><font
 color="#000000"></font> </p>
     
<p><font color="#000000">Such an operation can be indicated by the symbolic
  notation shown in Figure 1 <i>(where the strange looking thing constructed 
of straight lines is the Greek letter sigma).</i></font> </p>
     
<center>               
                 
<table border="1" cols="1" width="400" bgcolor="#ffff00">
   <tbody>
     <tr>
       <td><b><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  N-1</font></tt></b> <br>
         <b><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  __</font></tt></b> <br>
         <b><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  \</font></tt></b> <br>
         <b><tt>z =(1/N) * / x(n) * y(n)</font></tt></b> 
      <br>
         <b><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  --</font></tt></b> <br>
         <b><tt>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
  n = 0</font></tt></b></td>
       </tr>
     
  </tbody>
</table>
   </center>
        
<center>    
<p><font color="#000000">Figure 1&nbsp; A typical sum-of-products operation</font></p>
   </center>
        
<p><b><font color="#ff0000">A sum-of-products operation</font></b> </p>
     
<p><font color="#000000">This notation means that a new value for <b>z</b>
  is calculated by multiplying the first <b>N</b> corresponding samples from
  each of two numeric series <i>(<b>x(n)</b> and <b>y(n)</b>),</i> calculating
  the sum of the products, and dividing the sum by <b>N</b>.</font></p>
<blockquote>
	<p><i>(In this lesson, I will be dealing primarily with numeric series that 
	represent samples from a continuous function taken over time.&nbsp; 
	Therefore, I will often refer to the numeric series as a time series.)</i></p>
</blockquote>
     
<p><b><font color="#ff0000">An alternative notation</font></b> </p>
     
<p><font color="#000000">The above notation requires about six lines of text to 
construct, 
 and therefore could easily become scrambled during the HTML publishing process.&nbsp; 
 I have invented an alternative notation that means exactly the same thing, 
 but is less likely to be damaged during the HTML publishing process.&nbsp; 
 My new notation is shown in Figure 2.&nbsp; You should be able to compare 
 this notation with Figure 1 and correlate the terms in the notation to the 
 verbal description of the operation given above.</font> </p>
     
<center>               
                 
<table border="1" cols="1" width="400" bgcolor="#ffff00">
   <tbody>
     <tr>
       <td><b><tt><font color="#000000">z = </font>(1/N)
* <font color="#000000">S(n=0,N-1)[(x(n) * y(n)]</font></font></tt></b></td>
       </tr>
     
  </tbody>
</table>
   </center>
        
<center>    
<p><font color="#000000">Figure 2&nbsp; Alternate notation for a sum-of-products
  operation</font></p>
   </center>
    <b><font color="#ff0000"></font></b>    
<p><font color="#000000">This is the notation that I will use in this lesson</font><br>
    </p>
     
<center>    
<h2> <a name="Preview"></a><font color="#000000">Preview</font></h2>
   </center>
    <b><font color="#ff0000">What is a time series?<br>
 <br>
 </font></b><font color="#ff0000"><font color="#000000">For pur</font></font>poses 
of this lesson, suffice it to say that a time series is a set of sample values 
taken from a continuous function at equal increments of time over a specified time interval.&nbsp; For 
example, if you were to record the temperature in your office every minute for 
six hours, the set of 360 different values that you would record could be considered 
as a time series.<b><font color="#ff0000"><br>
 <br>
 A new time series is produced</font></b>    
<p>In DSP, we often multiply two time series together on a sample by sample 
basis.&nbsp; W<font color="#000000">hen I multiply the values in the time 
series <b>x(n)</b> by the corresponding values in the time series <b>y(n)</b>, 
that produces a new time series,  which I will call <b>w(n)</b>.</font><b><tt><font color="#000000"></font></font></tt></b> </p>
     
<p><b><font color="#ff0000">Calculation of the mean or average</font></b>
  </p>
     
<p><font color="#000000">If I compute the sum of the individual values in 
the series <b>w(n)</b>, and then divide that sum by the number of samples, 
this is nothing more than the  calculation of the mean or average value of 
the time series named <b>w(n)</b>.&nbsp; Most DSP operations boil down to 
nothing more complicated than calculating  the average value of the product 
of two time series.</font></p>
<p><b><font color="#ff0000">Knowing what to multiply, when, and why</font></b></p>
     
<font color="#000000">The real trick  in DSP is knowing what 
to multiply, when to multiply it, and why to multiply  it.</font><p>
<font color="#000000">Some DSP 
	algorithms are very complex.&nbsp; For example, the Fast Fourier Transform 
	algorithm, <i>(FFT),</i> involves nothing more than a lot of multiply-add 
	operations under the control of an extremely complex algorithm.</font></p>
<p><font color="#000000">In this lesson, I will concentrate on the Discrete Fourier Transform 
	algorithm, <i>(DFT),</i> which is much less complex and therefore much 
easier to understand.</font></p>
<blockquote>
	<p><font color="#000000"><i>(While the DFT and the FFT produce the same 
	results, the DFT typically runs much more slowly than the FFT, which is 
	optimized for speed.)</i></font></p>
</blockquote>
        
<p><b><font color="#ff0000">Multiply-add speed is important</font></b> </p>
     
<p><font color="#000000">Some DSP processes require extremely  large numbers 
of multiply-add operations.&nbsp; In order to perform DSP in real time, the 
equipment used to perform the arithmetic must be extremely  fast.&nbsp; That 
is where the special DSP chips, <i>(which are designed to perform  multiply-add 
operations at an extremely high rate of speed)</i> earn their keep.</font>
  </p>
     
<p><b><font color="#ff0000">The net area under the curve</font></b> </p>
     
<p><font color="#000000">If you plot a time series as a curve on a graph, 
as shown in Figure 3, the sum of the values that make up the time series is 
an estimate of the net area under the curve.</font></p>
 
<blockquote><font color="#000000"><i>(Assuming that the horizontal axis represents 
a value of zero, the sample values above the axis contribute a positive value 
to the net area and the sample values below the curve contribute a negative 
value to the net area.&nbsp; In the case of Figure 3, I attempted to come 
up with a set of sample values that would produce a net area of zero.&nbsp; In 
other words, the area above the horizontal axis was intended to perfectly 
balance the area below the horizontal axis.)</i></font></blockquote>
 
<p> </p>
     
<center>    
<p><img src="java1478fig03.gif" border="2" height="123" width="290">
    </p>
     
<p><font color="#000000">Figure 3&nbsp; Plot of values in a time series</font></p>
   </center>
        
<p><b><font color="#ff0000">A periodic example</font></b> </p>
     
<p><font color="#000000">A periodic time series is one in which a set of sample
values repeats over time, provided that you record enough samples to include one 
or more periods.&nbsp; Figure
4 shows a plot of a periodic time series.&nbsp; You can see that the same
set of values repeats as you move from left to right on the curve plotted
in Figure 4.</font>  </p>
     
<div align="center"> 
<div align="center">    
<p><img src="java1478fig04.gif" border="2" height="123" width="291">
    </p>
     
<p><font color="#000000">Figure 4&nbsp; Area under a periodic curve</font></p>
 </div>
 
<div align="left"><font color="#ff0000"><b>The sum of two curves</b></font>
 
<p><font color="#000000">Periodic curves can often be viewed as the sum of 
two curves.&nbsp; One of the curves is the periodic component having a zero 
net area under the curve when measured across an even number of cycles.&nbsp; 
The other component is a constant bias offset that is added to every value 
of the periodic curve.</font>  </p>
 
<p><font color="#000000">Each of the solid dark blobs in Figure 4 is a sample 
value.&nbsp; The horizontal line represents a sample value of zero.&nbsp; 
<i>(The empty circle is the sample value half way through the sampling interval.&nbsp; 
The only reason it is different is to mark the mid point.)</i></font>
 </p>
 
<p><b><font color="#ff0000">The net area under the curve</font></b> </p>
 
<p><font color="#000000">What is the net area under the curve in Figure 4?&nbsp; 
Can you examine the curve and come up with a good estimate.&nbsp; As it turns 
out, the net area under the curve in Figure 4 is very close to zero <i>(at 
least it is as close to zero as I was able to draw it).</i></font> </p>
 
<p><font color="#000000">Now take a look at Figure 5.&nbsp; What is the net 
area under the curve in Figure 5?</font> </p>
 </div>
 
<center></center>
 </div>
 
<center>    
<p><img src="java1478fig05.gif" border="2" height="120" width="290">
    </p>
     
<p><font color="#000000">Figure 5&nbsp; Area under a periodic curve with
an offset</font></p>
   </center>
        
<p><b><font color="#ff0000">Compare Figure 5 to Figure 4</font></b> </p>
 
<p><font color="#000000">Compare Figure 5 with Figure 4.&nbsp; Each of these 
curves describes the same periodic shape <i>(although Figure 4 has a larger 
peak-to-peak amplitude, meaning simply that every value in Figure 4 has been 
multiplied by the same scale factor).</i></font></p>
<p><font color="#000000">However, the curve in Figure 5 is riding 
up on a positive bias, while the curve in Figure 4 is centered about the horizontal
axis.&nbsp; While the net area under the curve in Figure 4 is zero, the net
area under the curve in Figure 5 is a non-zero positive value.</font>  </p>
 
<p><font color="#000000">The curve in Figure 5 can be considered to consist
 of the sum of two parts.&nbsp; One part is a straight horizontal line on
the positive side of the horizontal axis.&nbsp; The other part is the periodic
 curve from Figure 4, added to that positive bias.</font></p>
 
<blockquote><font color="#000000"><i>(The curve in Figure 4 can also be considered 
to consist of the sum of two parts.&nbsp; However, in Figure 4, the bias value
is zero.)</i></font><br>
 </blockquote>
 
<p> </p>
 
<p><b><font color="#ff0000">The net area</font></b> </p>
 
<p><font color="#000000">The net area contributed by the periodic part of 
the curve in Figure 5 continues to be zero.&nbsp; In effect, the non-zero 
net area under the curve in Figure 5 is the amount of the positive bias multiplied 
by the number of points.&nbsp; In other words, because I captured an even 
number of cycles of the periodic portion of the curve in my calculation of 
net area, only the bias contributes a non-zero value to the net area under 
the total curve.</font></p>
 
<p><b><font color="#ff0000">Part of a cycle</font></b> </p>
 
<p><font color="#000000">Had I failed to capture an even number of cycles
 of the periodic portion of the curve, then the positive lobes might not
completely cancel the negative lobes, and the net area under the curve would
be influenced by the periodic portion of the curve in addition to the bias.</font>
</p>
 
<p><b><font color="#ff0000">Why is this important?</font></b> </p>
     
<p><font color="#000000">These concepts are extremely important in this lesson 
as we learn how to do frequency spectral analysis.</font> </p>
     
<p><font color="#000000">As you will see in this lesson, in doing frequency
  spectral analysis, we will form a product between a target time series
  and a sinusoid.&nbsp; The purpose is to measure the power contained in
the  time series at the frequency of the sinusoid.</font> </p>
     
<p><font color="#000000">The product of the target time series and the sinusoid 
 will produce the sum of a potentially infinite number of periodic functions, some of 
which may be riding on a positive or negative  bias.&nbsp; We will measure 
the amount of bias by computing the average value  of the product time series.&nbsp; 
The amount of bias will be our estimate  of the power contained in the target 
time series at the frequency of the sinusoid.</font> &nbsp; </p>
     
<center>    
<h2> <font color="#000000"><a name="The_Fourier_Transform">The Fourier Transform</a></font></h2>
 </center>
   There is a mathematical process, known as the Fourier transform, which
 can be used to linearly transform information back and forth between two
different domains.&nbsp; The information can be represented by sets of complex 
numbers in either or both domains.<p>The domains can represent a variety of 
different things.&nbsp; In DSP, the domains are often referred to as the <i>time
domain</i> and the <i>frequency domain,</i> but that is not a requirement.&nbsp; 
For example, one of the domains could represent the samples that make up the 
pixels in a photograph and the other domain could represent something having to 
do with the manipulation of photographs.</p>
<p>Usually when dealing with the time domain and the frequency domain, the 
values that make up the samples in the time domain are purely real while the 
values that make up the samples in the frequency domain are complex.</p>
<p><b><font color="#ff0000">Time domain and frequency domain</font></b> </p>
     
<p>For some purposes, it is preferable to have your information in the time 
 domain.&nbsp; For other purposes, it is preferable to have your information
  in the frequency domain.&nbsp; The Fourier transform allows you to transform
 your information back and forth between these two domains at will. </p>
     
<p>For example, it is possible to transform information from the time domain
  into the frequency domain, modify that information in the frequency domain,
  and then transform the modified information back into the time domain.&nbsp;
  This is one way to accomplish frequency filtering. </p>
     
<p><b><font color="#ff0000">Example of time domain and frequency domain</font></b>
  </p>
     
<p>If you were to draw a graph of the voltage impinging on the speaker coils 
 on your stereo system over time, that would be a time series, which is a 
member of the time domain. </p>
     
<p>If you were to observe the lights dancing up and down on the front of
your equalizer while the music is playing, you would be observing the same
information presented in the frequency domain.&nbsp; Typically the lights on the 
left represent low frequencies or bass while the lights on the right side 
represent high frequencies or treble.&nbsp; Often there is a slider associated 
with each vertical group of lights that allows you to apply filters to emphasize 
certain parts of the frequency spectrum and to de-emphasize other parts of the 
frequency spectrum.</p>
     
<p><b><font color="#ff0000">Forward and inverse transforms</font></b> </p>
     
<p>Two very similar forms of the Fourier transform exist.&nbsp; The forward
  transform is used to transform information from the time domain into the
frequency  domain.&nbsp; The inverse transform is used to transform information
from  the frequency domain back to the time domain. </p>
     
<p><font color="#FF0000"><b>Sampled time series</b></font> </p>
     
<p>The theoretical Fourier transform is defined using integral calculus as 
 applied to continuous functions.&nbsp; As a practical matter, in the digital 
 world, we almost never deal with continuous functions.&nbsp; Rather, we deal
 with functions that have been reduced to a series of discrete numbers <i>(or
samples),</i> which are the result of some discrete measurement system.</p>
<blockquote>
	<p><i>(As mentioned earlier, recording the  temperature in your office once each minute for twenty-four 
hours would produce  such a discrete series of numbers.)</i> </p>
</blockquote>
     
<p><b><font color="#ff0000">Integration and summation</font></b> </p>
     
<p>In many cases, the integration operation encountered in integral calculus
  can be approximated in the digital world by a summation operation using
discrete data.&nbsp; That is the case with the Fourier transform.&nbsp; Thus,
the summation form of the Fourier transform that is applied to discrete time 
 series is known as the Discrete Fourier Transform, or DFT. </p>
     
<p><b><font color="#ff0000">The FFT</font></b> </p>
     
<p>The DFT is a computationally intense operation.&nbsp; Given certain 
restrictions involving the number of values in the time series and the number 
of frequencies at which the spectral analysis will be performed, there is a 
special algorithm that can result
in computational economy.&nbsp; The algorithm that is used to realize that
economy is commonly referred to as the <i>Fast Fourier Transform,</i> or
<i>FFT.</i> </p>
     
<p><b><font color="#ff0000">DFT versus FFT</font></b> </p>
     
<p>The DFT is more general than the FFT, but the FFT is much faster than the DFT.&nbsp; 
 It is important to understand that these are simply two different algorithms 
for doing the same thing.&nbsp; Either can be used to produce the
same results <i>(but as mentioned earlier, the FFT is somewhat more restricted 
as to the number of time-domain and frequency-domain samples).</i> </p>
     
<p>Because the DFT algorithm is somewhat easier to understand than the FFT 
algorithm, I will concentrate on the DFT algorithm to explain how and why the Fourier 
transform  accomplishes what it accomplishes. </p>
     
<p><b><font color="#ff0000">The DFT</font></b> </p>
     
<p>Using my alternative notation described earlier, the expressions that you 
 must evaluate to determine the frequency spectral content of a target time 
 series at a frequency F are shown in Figure 6 <i>(note that I didn't bother 
to divide  by N).</i> </p>
     
<center> 
<table border="1" cols="1" width="400" bgcolor="#ffff00">
   <tbody>
     <tr>
       <td><b><tt><font color="#000000">Real(F) = S(n=0,N-1)[x(n)*</font>cos(2Pi*F*n)<font color="#000000">]</font></font></tt></b><br>
       <b><tt><font color="#000000">Imag(F) = S(n=0,N-1)[</font></font></tt></b><b><tt><font color="#000000">x(n)*</font></font></tt></b><b><tt>sin(2Pi*F*n)<font color="#000000">]</font></font><br>
		</tt></b><br>
       <b><tt><font color="#000000">ComplexAmplitude(F) 
= Real(F) - j*Imag(F)</font></font><br>
		</tt></b><br>
       <b><tt><font color="#000000">Power(F) =
Real(F)*Real(F) + Imag(F)*Imag(F)</font></tt></b><br>
       </td>
       </tr>
     
  </tbody>
</table>
   </center>
        
<center>    
<p><font color="#000000">Figure 6&nbsp; Forward Fourier transform</font></p>
   </center>
        
<p><font color="#ff0000"><b>What does this really mean?</b></font><br>
 </p>
 
<p>Before you panic, let me explain what this means in layman's terms.&nbsp;
  Given a time series, <b>x(n)</b>, you can determine if that time series
contains a cosine component or a sine component at a given frequency, <b>F</b>,
by doing the following: </p>
     
<ul>
    <li> Create one new time series, <b>cos(n)</b>, which is a cosine function 
 with the frequency <b>F</b>.</li>
     <li> Create another new time series, <b>sin(n)</b>, which is a sine
function   with the frequency <b>F</b>.&nbsp; <i>(The methods needed to create 
		the cosine and sine time series are available in the Math class in the 
		standard Java library.)</i></li>
     <li> Multiply <b>x(n)</b> by <b>cos(n)</b> and compute the sum of the
 products.&nbsp;  Save this value, calling it <b>Real(F)</b>.&nbsp; This
is an estimate of the amplitude, if any, of the cosine component with the
matching frequency contained in the time series <b>x(n)</b>.</li>
     <li> Multiply <b>x(n)</b> by <b>sin(n)</b> and compute the sum of the
 products.&nbsp;  Save this value, calling it <b>Imag(F)</b>.&nbsp; This
is an estimate of the amplitude, if any, of the sine component with the matching 
frequency contained in the time series <b>x(n)</b>.</li>
   <li>Consider the values for <b>Real(F)</b> and <b>Imag(F)</b> to be the 
real and imaginary parts of a complex number.</li>
   <li>Consider the sum of the squares of the real and imaginary parts to 
represent the power at that frequency in the time series.<br>
   </li>
       
</ul>
    <b><font color="#ff0000">It's that simple</font></b><p>That's all there is to it.&nbsp; For each frequency of interest, you 
can  use this process to compute a complex number, <b>Real(F) - jImag(F)</b>, 
which  represents the component of that frequency in the target time series.</p>
<blockquote>
	<p><i>(The mathematicians in the audience probably prefer to use the symbol
	<b>i</b> instead of the symbol <b>j</b> to represent the imaginary part.&nbsp; 
	The use of <b>j</b> for this purpose comes from my electrical engineering 
	background.)</i></p>
</blockquote>
<p>Similarly, you can compute the sum of the squares of the real and imaginary 
parts and consider that to be a measure of the power at that frequency in the 
time series.</p>
<blockquote>
	<p><i>(This is the value that you would likely see being 
displayed by one of the dancing vertical bars on the front of the equalizer on your 
stereo system.)</i></p>
</blockquote>
<p>Normally we are interested in more than one frequency, so we would repeat
  the above procedure once for each frequency of interest.</p>
<blockquote>
	<p><i>(This would produce the set of values that you would likely see being 
	displayed by all of the dancing vertical bars on the font of the equalizer 
	on your stereo system.)</i></p>
</blockquote>
<p><b><font color="#ff0000">Why does this work?</font></b> </p>
     
<p>This works because of the three trigonometric identities shown in Figure 
7. </p>
     
<table border="1" cols="1" width="400" bgcolor="#ffff00">
    <tbody>
       <tr>
    <td>                      
      <pre><b><tt>1. sin(a)*sin(b)=(1/2)*(cos(a-b)-cos(a+b))</font></tt></b><br><b><tt>2. cos(a)*cos(b)=(1/2)*(cos(a-b)+cos(a+b))</font></tt></b><br><b><tt>3. sin(a)*cos(b)=(1/2)*(sin(a+b)+sin(a-b))</font></tt></b><br><br><b><font
 face="Courier New,Courier">Figure 7</font></b></pre>
    </td>
    </tr>
             
  </tbody>   
</table>
        
<p> </p>
     
<p>Although these identities apply to the products of sine and cosine values
  for single angles <b>a</b> and <b>b</b>, it is a simple matter to extend
 them to represent the products of time series consisting of sine and cosine
 functions.&nbsp; Such an extension is shown in Figure 8.</p>
<p><b><font color="#ff0000">Products of sine and cosine functions</font></b></p>
<p>In each of the three cases shown in Figure 8, the function <b>f(n)</b> 
is a time series produced by multiplying two other time series, which are either
sine functions or cosine functions.<br>
  </p>
 
<table border="1" cols="1" width="400" bgcolor="#ffff00">
     <tbody>
       <tr>
    <td>                      
      <p><b><tt>1. f(n) = sin(a*n)*sin(b*n)</font></tt></b> 
      <br>
   <b><tt>&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; = (1/2)*(cos((a-b)*n)-cos((a+b)*n))</font></tt></b> 
      </p>
           
      <p><b><tt>2. f(n) = cos(a*n)*cos(b*n)</font></tt></b> 
      <br>
   <b><tt>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;= (1/2)*(cos((a-b)*n)+cos((a+b)*n))</font></tt></b> 
      </p>
           
      <p><b><tt>3. f(n) = sin(a*n)*cos(b*n)</font></tt></b> 
      <br>
   <b><tt>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;= (1/2)*(sin((a+b)*n)+sin((a-b)*n))</font></tt></b>
  </p>
       
      <pre><b><font face="Courier New,Courier">Figure 8</font></b></pre>
    </td>
    </tr>
             
  </tbody>   
</table>
         
<p> </p>
 <font color="#ff0000"><b>    Rewrite and simplify</b></font> 
<p>Figure 9 rewrites and simplifies these three functions for the special
  case where <b>a=b</b>, taking into account the fact that <b>cos(0) =1</b>
  and <b>sin(0) = 0</b>.    </p>
 
<table border="1" cols="1" width="400" bgcolor="#ffff00">
     <tbody>
       <tr>
    <td>                <b><tt>1. f(n) = sin(a*n)*sin(a*n) 
= (1/2)-cos(2*a*n)/2</font></tt></b><br>
       <b><tt>2. f(n) = cos(a*n)*cos(a*n) = (1/2)+cos(2*a*n)/2</font></tt></b><br>
         <b><tt>3. f(n) = sin(a*n)*cos(a*n) = sin(2*a*n)/2
       </font></tt></b>       
      <pre><b><font face="Courier New,Courier">Figure 9</font></b></pre>
    </td>
    </tr>
             
  </tbody>   
</table>
         
<p> </p>
 
<p><b><font color="#ff0000">What can we deduce from these identities?</font></b>
  </p>
     
<p>First you need to recall that the average of the values describing any true 
sinusoid is zero when the average is computed over an even number of cycles of 
the sinusoid.</p>
<blockquote>
	<p><i>(A true sinusoid does not have a bias to 
prevent it from being centered on the horizontal axis.)</i> </p>
</blockquote>
     
<p>If a time series consists of the sum of two true sinusoids, then the average 
of the values describing that time series will be zero if the average is 
computed over an even number of cycles of both sinusoids, and very close to zero 
if the average is computed over a period that is not an even number of cycles 
for either or both sinusoids.</p>
<blockquote>
	<p><i>(The average will approach zero as
the length of data over which the average is computed increases.)</i> </p>
</blockquote>
     
<p><font color="#ff0000"><b>Product of two sine functions having the same
frequency</b></font><br>
</p>
<p>Let's apply this knowledge to the three cases shown above for <b>a=b</b>.&nbsp;
  Consider the time series for case 1 in Figure 9.&nbsp; This case is the
product of two sine functions   having the same frequency.&nbsp; The result
of multiplying the two sine functions is shown graphically in Figure 10.<br>
  </p>
     
<center>    
<p><img src="java1478fig10.gif" border="2" height="233" width="256"
 alt="Plot of sin(x) and sin(x)*sin(x)">
    </p>
     
<p>Figure 10&nbsp; Plot of sin(x) and sin(x)*sin(x)</p>
   </center>
        
<p>The red curve in Figure 10 shows the function <b>sin(x)</b>, and the black 
 curve shows the function produced by multiplying <b>sin(x)</b> by <b>sin(x)</b>.<br>
</p>
<p><font color="#ff0000"><b>The sum of the product function is not zero</b></font><br>
</p>
<p>If you sum the values of the black curve over an even number of cycles, 
the  sum will not be zero.&nbsp; Rather, it will be a positive, non-zero value.
 </p>
     
<p>Now refer back to <b>Imag(F)</b> in Figure 6.&nbsp; The imaginary part
is computed by multiplying the time series by a sine function and computing
the sum of the products.&nbsp; If that time series contains a sine component
with the  same frequency as the sine function, that component will contribute
a non-zero value to the sum  of products.&nbsp; Thus, the imaginary part
of the transform at that frequency will not be zero. <br>
<br>
<font color="#ff0000"><b>Product of two cosine functions having the same
frequency</b></font><br>
 </p>
     
<p>Now consider the time series for case 2 in Figure 9.&nbsp; This case is
the product of two cosine  functions having the same frequency.&nbsp; The
result of multiplying two cosine functions having the same frequency is shown
graphically in Figure 11.</p>
     
<center>    
<p><img src="java1478fig11.gif" border="2" height="229" width="292"
 alt="Plot of cos(x) and cos(x)*cos(x)">
    </p>
     
<p>Figure 11&nbsp; Plot of cos(x) and cos(x)*cos(x)</p>
   </center>
        
<p>The red curve in Figure 11 shows the function <b>cos(x)</b>, and the black 
 curve shows the function produced by multiplying <b>cos(x)</b> by <b>cos(x)</b>.<br>
</p>
<p><font color="#FF0000"><b>Again t</b></font><font color="#ff0000"><b>he sum of products is not zero</b></font><br>
</p>
<p>If you sum the values of the black curve in Figure 11 over an even number
of cycles, the  sum will not be zero.&nbsp; Rather, it will be a positive,
non-zero value.  </p>
     
<p>Now refer back to the expression for <b>Real(F)</b> in Figure 6.&nbsp; The
real part of the transform is computed by multiplying the time series by
a cosine function having a particular frequency and computing the sum of
products.&nbsp; If that time series contains a cosine component with   the
same frequency as the cosine function, that component will contribute a non-zero
value to the  sum of products.&nbsp; Thus, the real part of the transform
at that frequency will not be zero.<br>
<br>
<font color="#ff0000"><b>Product of a sine function and a cosine function</b></font><br>
 </p>
     
<p>Now consider the time series for case 3 in Figure 9, which is the product
of a sine   function and a cosine function having the same frequency.&nbsp;
The result of computing this product is shown graphically in Figure 12 </p>
     
<center>    
<p><img src="java1478fig12.gif" border="2" height="230" width="312"
 alt="Plot of sin(x), cos(x), and sin(x)*cos(x)">
    <br>
   . <br>
   Figure 12&nbsp; Plot of sin(x), cos(x), and sin(x)*cos(x)</p>
   </center>
        
<p>The red curve in Figure 12 shows the function <b>cos(x)</b>, and the green 
 curve shows the function <b>sin(x)</b>.&nbsp; The black curve shows the function
 produced by multiplying <b>sin(x)</b> by <b>cos(x)</b>.<br>
<br>
<font color="#ff0000"><b>The sum of the products will be zero</b></font><br>
 </p>
     
<p>If you sum the values of the black curve over an even number of cycles,
  the sum will be zero. </p>
     
<p>Therefore, referring back to Figure 6, we see that the <b>Real(F)</b>
computation measures   only the cosine component in the time series at a particular
frequency, and the <b>Imag(F)</b> computation measures only the sine component
in the time series having the same frequency.&nbsp;  <br>
</p>
<p>The <b>Real(F)</b> computation in Figure 6 does not produce a non-zero
output due to a sine  component in the time series having the same frequency.&nbsp;
The <b>Imag(F)</b> computation in Figure 6 does not produce a non-zero output
due to a cosine component in  the time series having the same frequency. </p>
     
<p>Thus, at a particular frequency, the existence of a cosine component in 
 the target time series produces the <i>real</i> output, and the existence
  of a sine component in the target time series produces the <i>imaginary</i>
  output.</p>
<p><font color="#ff0000"><b>Neither sine nor cosine</b></font></p>
<p>In reality, the sinusoidal components that make up a time series will not usually 
be sine functions or cosine functions.&nbsp; Rather, they will be 
sinusoidal components having the same shape as a sine or cosine, but not having 
the same value at zero as either a sine function or a cosine function.&nbsp; 
However, it can be shown that a general sinusoidal function can always be 
represented by the sum of a sine function and a cosine function having different 
amplitudes.</p>
<blockquote>
	<p><i>(A proof of the above statement is beyond the scope of this lesson.&nbsp; 
	You will simply have to accept on faith that a general time series can be 
	represented as the sum of a potentially infinite number of sine functions 
	and cosine functions of different frequencies and different amplitudes.&nbsp; 
	It is these cosine and sine functions that constitute the real and imaginary 
	components of the complex frequency spectrum.)</i></blockquote>
	<font color="#ff0000"><b>What about non-matching frequency components?</b></font><br>
	</p>

     
<p>Now we know what happens when the frequency of the <b>sin</b> and <b>cos</b> terms in
Figure 6 match the frequency of sine and cosine components in the target
time series.&nbsp; Another important question is, what do sine and cosine
components in the target time series with frequencies different from the
<b>cos</b> and <b>sin</b> terms in Figure 6 contribute to the output? </p>
     
<p>The answer is not very much.&nbsp; Referring once more to the   functional
forms produced by multiplying sine and cosine functions <i>(repeated   in
Figure 13 for convenience), </i>we see that for any values of <b>a</b>  
and <b>b</b>, where <b>a</b> is not equal to <b>b</b>, the function produced
  by multiplying two sinusoids will be the sum of two other sinusoids.&nbsp;
  The sum of the values for any sinusoid computed over an even number of
cycles  of the sinusoid will always be zero, and these sinusoids are no 
exception to that rule.&nbsp;   </p>
 
<table border="1" cols="1" width="400" bgcolor="#ffff00">
    <tbody>
       <tr>
    <td>                      
      <p><b><tt>1. f(n) = sin(a*n)*sin(b*n)</font></tt></b> 
      <br>
   <b><tt>&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; = (1/2)*(cos((a-b)*n)-cos((a+b)*n))</font></tt></b> 
      </p>
           
      <p><b><tt>2. f(n) = cos(a*n)*cos(b*n)</font></tt></b> 
      <br>
   <b><tt>&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; = (1/2)*(cos((a-b)*n)+cos((a+b)*n))</font></tt></b> 
      </p>
           
      <p><b><tt>3. f(n) = sin(a*n)*cos(b*n)</font></tt></b> 
      <br>
   <b><tt>&nbsp;&nbsp;&nbsp; &nbsp; &nbsp; =(1/2)*(sin((a+b)*n)+sin((a-b)*n))</font></tt></b>
  </p>
       
      <pre><b><font face="Courier New,Courier">Figure 13</font></b></pre>
    </td>
    </tr>
             
  </tbody>   
</table>
         
<p><font color="#ff0000"><b>Sum and difference frequencies</b></font></p>
   
<p>For any pair of arbitrary values for <b>a</b> and <b>b</b>, the  frequencies
of the sinusoids in the resulting functions will be given by <b>a+b</b> and
<b>a-b</b>.<br>
</p>
<blockquote><i>(These are often referred to as the sum and difference frequencies.
&nbsp;Note that as <b>a</b> approaches <b>b</b>, the difference frequency
approaches zero.&nbsp; This is what produces the constant values of 1/2 in 
	Figure 9 and the positive bias on the black curve in Figures 10 and 11.)</i><br>
</blockquote>
<p></p>
<p><font color="#ff0000"><b>A form of measurement error</b></font></p>
<p>As a practical matter, if those resulting  sum and difference frequencies
are not multiples of one another, it will not be possible to perform the
summation over an even number of cycles of both sinusoids.&nbsp; Therefore,
 one or the other, or perhaps both, will contribute a small amount to the
sum of products due to including a partial cycle in the summation.&nbsp; This
 is a form of measurement error that occurs when performing frequency spectrum
 analysis using Fourier transform methods.</p>
<blockquote>
	<p><i>(The percentage contribution of this error to the average value 
	decreases as the number of cycles included in the average increases.)</i><br>
	</p>
</blockquote>
     
<p><font color="#ff0000"><b>Product of two sine functions at different frequencies</b></font></p>
<p>Consider the product of two sine functions at different frequencies as 
 shown in Figure 14.&nbsp; This is a plot of the function produced by multiplying 
 <b>sin(1.8x)</b> by <b>sin(2.2x)</b>. </p>
     
<center>    
<p><img src="java1478fig14.gif" border="2" height="238" width="372"
 alt="Plot of sin(1.8x)*sin(2.2x)">
    </p>
     
<p>Figure 14&nbsp; Plot of sin(1.8x)*sin(2.2x)</p>
   </center>
        
<p>The high frequency component shown in Figure 14 is the component attributable
  to <b>a+b</b>.&nbsp; The long sweeping low frequency component is the component
  attributable to <b>a-b</b>. </p>
     
<p><font color="#ff0000"><b>The sum of the product function</b></font><br>
</p>
<p>Judging from the graph in Figure 14, performing a summation of the product
function from -7 to +7 would include almost exactly nine cycles of the high
frequency component.&nbsp; Thus, the high frequency component would contribute
very little, if anything, to the summation.<br>
</p>
<p>However, the summation would include less than one complete cycle of the
low frequency component.&nbsp; Therefore,   the low frequency component would
contribute some output to the summation in the form of a measurement error.<br>
 </p>
     
<p>Similar results occur when multiplying a cosine function by a cosine function 
having a different frequency, 
 or when multiplying a cosine function by a sine function having a different 
frequency.&nbsp; Graphical 
 results for these two cases are shown in Figures 15 and 16. </p>
     
<center>    
<p><img src="java1478fig15.gif" border="2" height="239" width="365"
 alt="Plot of cos(1.8x)*cos(2.2x)">
    </p>
     
<p>Figure 15&nbsp; Plot of cos(1.8x)*cos(2.2x) <br>
</p>
     
<p><img src="java1478fig16.gif" border="2" height="223" width="366"
 alt="Plot of sin(1.8x)*cos(2.2x)">
    </p>
     
<p>Figure 16&nbsp; Plot of sin(1.8x)*cos(2.2x)</p>
   </center>
        
<p>Once again, unless the summation interval includes an exact number of
samples of both the sum frequency and the difference frequency, one of both
of the sinusoids contained in the product function would contribute a measurement
error to the result.</p>
     
<center>    
<h2> <a name="Summary"></a>Summary</h2>
   </center>
        
<p>In this lesson, I have provided a quasi-theoretical basis for frequency 
spectrum analysis.<br>
</p>
<p>A pure theoretical basis for frequency spectrum analysis involves some rather 
complicated mathematics and is somewhat difficult to understand.&nbsp; However, 
from a practical viewpoint, it is not too difficult to understand how the 
complex mathematics produce the results that they produce.</p>
<p>Hopefully the quasi-theoretical explanations provided in this lesson will 
help you to understand what makes spectrum analysis work.</p>    
<center>    
<h2> <a name="What's next"></a>What's Next?</h2>
   </center>
    The next lesson in this series will reduce much of what I have discussed in 
this lesson to practice.&nbsp; I will present and explain a program that 
implements a DFT algorithm for performing frequency spectrum analysis.&nbsp; In 
addition, I will present the results of several interesting experiments in 
frequency spectrum analysis using that algorithm.<p>A subsequent lesson will 
explain some of the signal processing concepts that made it possible for the 
inventors of the FFT algorithm to design a computational algorithm that is much 
faster than the DFT algorithm.&nbsp; As is often the case, however, the FFT 
algorithm trades off speed for generality.</p>
<p> </p>
     
<hr size="3" width="100%" align="center">    
<p>Copyright 2004, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h4>About the author</h4>
<p><b><a href="mailto:baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, Texas) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>
</p>
<p><i>Richard has participated in numerous consulting projects, and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.DickBaldwin.com">Tutorials</a>, which has gained a worldwide 
following among experienced and aspiring programmers. He has also published 
articles in JavaPro magazine.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@DickBaldwin.com">baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
<p>&nbsp;</p>
   <br>
   <br>
  <br>
 <br>
</body>
</html>
