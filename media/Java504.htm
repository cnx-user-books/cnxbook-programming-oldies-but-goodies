<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JavaBeans, A Skeleton Bean in the BeanBox<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 504, Revised 02/18/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#the beanbox">The BeanBox</a></li>

<li><a href="#installing a bean in the toolbox">Installing a Bean in the ToolBox</a></li>

<li><a href="#jar files in brief">Jar Files in Brief</a></li>

<li><a href="#path and package specifications">Path and Package Specifications</a></li>

<li><a href="#testing the bean in the beanbox">Testing the Bean in the BeanBox</a></li>

<li><a href="#conclusion">Conclusion</a></li></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
The information in this lesson is very important. However, it is information
that does not lend itself well to teaching in a classroom environment,
and it would be very difficult to test the student's knowledge of this
material. Therefore, students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b>
classes at ACC <b>not</b> are responsible for knowing and understanding
the material in this lesson.

<p>JDK 1.1 was released on February 18, 1997 and JDK 1.1.1 was released
on March 27, 1997. This lesson was originally written on April 7, 1997
using the software and documentation in the JDK 1.1.1 download package
along with the February 97 release of the BDK 1.0 download package.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
Previous lessons provided an overview of Java Beans and developed a skeleton
Bean program. A previous lesson also provided a test program to test the
skeleton Bean. As it turned out, the test program was longer and more complex
than the Bean itself.

<p>This lesson will take the next step by showing you how to place that
skeleton Bean in the JavaSoft BeanBox and how to use the BeanBox to test
it. In this lesson, you will see that once you get over a few initial hurdles,
testing in the BeanBox can be simpler than developing test programs.

<p>However, you will also learn that those initial hurdles can be serious.
The BeanBox program is very package and path sensitive, so you must be
very careful how you build your JAR files for inclusion in the ToolBox
for the BeanBox.
<center><h2><a name="the beanbox"></a><font color="#ff0000">The BeanBox</font></h2></center>
The Beans Development Kit (BDK) is a Java application that requires JDK
1.1 or later to be installed. It provides support for the JavaBeans APIs
along with a test container referred to as the BeanBox. This test container
can be used to test Bean behavior.

<p>The BDK also provides the JavaBeans Specification and a Tutorial along
with a number of sample Beans.

<p>The BeanBox is a sample container designed for testing Beans. As of
April 1997, the BDK 1.0 BeanBox would handle visible Beans, but purely
computational beans could not be tested in the BeanBox.

<p>When you start the BeanBox, a <i>ToolBox </i>of sample Beans is displayed.
Source code for these Beans is provided in the <i>demo\ </i>subdirectory
of the Win95 BDK download package.

<p>You can start the BeanBox application on a Win95 system by locating
the beanbox directory and making it the current directory. There you will
find two files named <b>run.bat</b> and <b>run.sh</b> respectively. You
can invoke the <b>run.bat</b> file to start the BeanBox application on
a Win95 system. Although I don't have a Solaris system available, it is
my understanding that you can use the <b>run.sh</b> file to start the BeanBox
application on a Solaris system.

<p>You should probably start the BeanBox application and familiarize yourself
with it before attempting to use it to test your Beans.

<p>Once the BeanBox application is running, three forms will appear on
your screen with the titles of <i>ToolBox</i>, <i>BeanBox</i>, and <i>PropertySheet</i>.
If you are familiar with development tools like <i>Visual Basic</i> and
<i>Delphi</i>, you may recall the existence of three similar forms with
similar names in those development environments.

<p>When the BeanBox application starts, you will see about seventeen sample
Beans already in the ToolBox. Our objective in this lesson will be to place
our skeleton Bean in the ToolBox so that we can test it, but we haven't
gotten there yet.

<p>To place a ToolBox-Bean in the BeanBox, click on the Bean in the ToolBox
and then click on the area in the BeanBox where you want the Bean to appear.

<p>As a quick and interesting example of how to work with the BeanBox,
we will place an animated Bean in the BeanBox and cause the animation to
start and stop on command.

<p>First, get a <i>Juggler </i>Bean from the ToolBox and place it in the
BeanBox. Then get two <i>OurButton </i>Beans and place them in the BeanBox
also. As you do this, you will notice that the Bean most recently clicked
is highlighted with a striped outline. The Bean highlighted with the striped
outline is the Bean to which the menus and the PropertySheet apply.

<p>Highlight first one and then the other of the buttons. When each button
is highlighted, look at the PropertySheet and notice the text entry box
on the PropertySheet that contains the word "press" and is labeled "label".
This is the property editor for the button-property named <b>label</b>.

<p>Modify the <b>label</b> property for each of the buttons, causing one
of them to display <i>start</i> and the other to display <i>stop</i>.

<p>Then highlight the button with the <i>stop </i>label and pull down the
<b>Edit</b> menu. Select <i>Events/action/actionPerformed</i>. The next
time you move the mouse, you will notice that a red line extends from the
mouse pointer to the <i>stop </i>button. Place the mouse pointer on the
animated Juggler Bean and click the mouse. This will open a dialog box
that lists all of the methods of the Juggler Bean. Select the stopJuggling
method.

<p>You have now hooked an Action event on the <i>stop</i> button to the
<i>stopJuggling</i> method of the animated Bean. If you click the <i>stop</i>
button, the animation should stop.

<p>Use the same procedure to hook the <i>start</i> button to the <i>startJuggling</i>
method. Now you should be able to make Duke start and stop juggling at
will by selecting first one and then the other of the two buttons.

<p>Spend a little time familiarizing yourself with the BeanBox before moving
on.
<center><h2><a name="installing a bean in the toolbox"></a><font color="#ff0000">Installing
a Bean in the ToolBox</font></h2></center>
Once you have written and compiled your Bean, there are basically two steps
involved in installing it in the ToolBox for the BeanBox:
<ul><li>
Encapsulate it in a <i>jar</i> file.</li>

<li>
Store the <i>JAR </i>file in the <i>jars</i> directory of the BDK.</li></ul>
This sounds easy enough, but it can actually be very difficult to get it
right. The entire process is extremely sensitive to the specification of
the Java package and the relative locations of various components when
the <i>jar</i> file is created.

<p>Rather than attempt to explain all of the issues, I am simply going
to provide you with an example that works on my system. Hopefully you can
use or modify that example to make it work on your system.

<p>If you read the tutorial from the BDK 1.0, you will find that the author
of that tutorial places Beans in the ToolBox using <i>make</i> files and
the <i>nmake</i> program from Microsoft.

<p>I continue to be amazed that a tutorial from JavaSoft would require
access to a Microsoft program that, quite frankly, is not easy to come
by. Apparently people who do other software development work using Microsoft
development packages such as Visual C++ have copies.

<p>At the time, I was not able to locate a downloadable copy of <i>nmake</i>
anywhere on the web. I finally located a copy on a CD ROM in the back of
one of my books but there were no usage instructions. It took me several
more days of searching to learn that a -f switch is required to correctly
process a new make-file. All in all, not a fun experience.

<p>(I later found something that indicates that the <i>nmake</i> program
can be downloaded from &lt;ftp://ftp.microsoft.com/Softlib/MSLFILES/nmake15.exe>
but I haven't tried it yet.)

<p>All that aside, if you are familiar with the use of <i>make</i> files
and have a copy of <i>nmake</i> available, go ahead and use the procedure
in the Beans tutorial. Be aware, however, that there are a large number
of typographical errors in the PDF version that comes with the Win95 version
of the BDK. (Hopefully these typographical error will be corrected in a
future release of the BDK.) If you are going to use a <i>make</i> file,
start with one of the existing <i>make</i> files from one of the sample
Beans. Don't try using the material printed in the tutorial.

<p>The approach that I am going to show you in this lesson doesn't use
a <i>make</i> file. Rather, it uses a batch file to accomplish enough of
the same operations to be usable.
<center><h2><a name="jar files in brief"></a><font color="#ff0000">Jar Files in Brief</font></h2></center>
What is a JAR file? Briefly, a JAR file is a file created by the <i>Java
Archive Tool</i> which is a part of JDK 1.1. A JAR file contains one or
more other files. It can contain all the files that make up a Bean, and
can contain more than one Bean.

<p>JAR files use the same format as ZIP files and have a <i>manifest file</i>
that describes the contents of the JAR file. For some uses, the manifest
file is optional, but it is not optional when a JAR file is used to contain
Beans that are to be installed in the ToolBox..

<p>JAR files are produced using the <i>jar tool</i>. To invoke the jar
tool, enter <b>jar</b> at the command line followed by one or more parameters.
(This assumes that your JDK 1.1 software is on the path.)

<p>In this lesson, we will only concern ourselves with the parameters required
to achieve our objective of adding a new Bean to the ToolBox. Hopefully,
a future lesson will discuss JAR files in more detail.

<p>Our skeleton Bean application is named <b>Beans01.java</b>. To install
the new Bean in the ToolBox, we will need three files:
<ul><li>
The compiled Bean file named Beans01.class</li>

<li>
The batch file named Beans01.bat</li>

<li>
The manifest file named Beans01.mft</li></ul>
Obviously the contents of these files is important. Equally important is
<u>where they reside</u> within the directory structure on your computer.
First lets take care of the contents.

<p>The file named Beans01.bat contains the following line:

<p><hr width="100%"><pre><b>jar cfm ..\jars\Beans01.jar Beans01.mft sunw\demo\beans01\*.class</b></pre>
Likewise, the file named Beans01.mft contains the following two lines:

<p><hr width="100%"><pre><b>Name: sunw/demo/beans01/Beans01.class
Java-Bean: True</b></pre>
The batch file executes the <b>jar</b> program with the <i>cfm</i> switches
set.

<p>Briefly, the c-switch says to create a new JAR file in a file specified
by the f-switch. The f-switch says to create the new file as specified
by the parameter immediately following the switches. In this case, create
the following file:
<ul><li><b><tt>..\jars\Beans01.jar</tt></b></li></ul>
If you are not familiar with path specifications of this sort, you would
do well to find someone to explain it to you.

<p>The m-switch says to use the file named Beans01.mft in the same directory
as the batch file as the manifest file.

<p>Finally, the last parameter
<ul><li><b><tt>sunw\demo\beans01\*.class</tt></b></li></ul>
specifies the files to be included in the new JAR file in addition to the
manifest file. In this case, we are including only class files which are
contained in the specified path and directory. In fact, there is only one
class file. However, there could be many class files and possibly other
types of files as well for complex Beans.
<center><h2><a name="path and package specifications"></a><font color="#ff0000">Path
and Package Specifications</font></h2></center>
Path and package specifications are critical here. If you get them wrong,
you may not be able to install your Bean in the ToolBox. Sometimes it is
possible to get it wrong and still make the installation, but not be able
to hook events to methods.

<p>The source and class files for the skeleton Bean were located in the
directory named <b>beans01</b> (the full path to that directory will be
shown later).

<p>The following package specification was required in the skeleton Bean
source code in order to install the compiled Bean in the JavaSoft <b>BeanBox</b>.
<ul><li><b><tt>package sunw.demo.beans01;</tt></b></li></ul>
Here is the path from the root directory to the directory containing the
class file for the skeleton Bean.
<ul><li><b><tt>c:\java_jdk\Bdk\demo\sunw\demo\beans01\Beans01.class</tt></b></li></ul>
You should compare the paths information shown earlier with this path to
see how it all fits together.

<p>The entire directory structure at and below the BDK directory was established
by the BDK installation process, except that I added a directory named
<b>beans01</b> to contain the class file for the skeleton Bean.

<p>As shown, the class file for the skeleton Bean was in the <b>beans01</b>
directory.

<p>The batch file and the manifest file shown earlier were installed in
the <b>demo</b> directory closest to the root. If you look, you will find
that is also where all the make files for the sample Beans are located.

<p>This process creates a JAR file containing the class file for the skeleton
Bean along with the manifest file. That JAR file is deposited in the <b>jars</b>
directory which, like the top-level <b>demo</b> directory is a child of
the <b>BDK</b> directory.
<center><h2><a name="testing the bean in the beanbox"></a><font color="#ff0000">Testing
the Bean in the BeanBox</font></h2></center>
The first sign of success is that the new skeleton Bean named <b>Beans01</b>
will join the sample Beans in the ToolBox.

<p>Testing the skeleton Bean in the ToolBox is fairly straightforward.
<h3><font color="#ff0000">Testing the Methods</font></h3>
A good way to test the two methods is to do the same thing that we did
to make the juggler stop and start juggling. Place a <b>Beans01</b> Bean
in the BeanBox along with two buttons. Hook the <b>Action </b>events from
the two buttons up to the <b>makeBlue()</b> and <b>makeRed()</b> methods
of the Bean. You should then be able to use these two buttons to switch
the color of the Bean back and forth between blue and red.
<h3><font color="#ff0000">Testing the Events</font></h3>
Here you need to determine if the Bean exposes the ability to <i>add </i>and
<i>remove </i><b>Action </b>events. In this case, click on the Bean to
highlight it. Then pull down the Edit menu and select <i>Events/action/actionPerformed</i>.
(Don't actually select it, just make sure that it is there for you to select
if you choose to.)

<p>This Bean is created by extending <b>panel</b> which doesn't normally
generate <b>Action </b>events. Therefore, the presence of the above selection
on the Edit menu indicates that you were successful in adding this event
type to the Bean and were successful in exposing the <i>add</i> and <i>remove</i>
methods.
<h3><font color="#ff0000">Testing the Properties</font></h3>
Here you are going to confirm that the two properties appear on the PropertySheet
and also confirm that they can be edited.

<p>Highlight your Bean and confirm that there is a <i>color</i> property
and a <i>myBooleanProperty</i> on the PropertySheet. If so, click on them.
You should be able to switch the boolean property back and forth between
true and false using a pulldown list that is provided. You should be able
to select among many different colors for the <i>color</i> property using
a color dialog that is provided.
<center><h2><a name="conclusion"></a><font color="#ff0000">Conclusion</font></h2></center>
These simple tests indicate that we were successful in exposing our <i>properties</i>,
<i>events</i>, and <i>methods</i>. They confirm that the two methods behave
as planned and that the Property editor can both <i>set </i>and <i>get
</i>properties.

<p>Since we didn't really make our <i>add </i>and <i>remove </i><b>Action
</b>events operational, there is no further testing that we can do on them,
but at least we have confirmed that they are properly exposed.

<p>When we wrote the bean, we were careful to <b>synchronize </b>exposed
methods and were careful to make the entire class <b>serializable</b>.
Therefore, at this point, we can conclude with reasonable confidence that
we have created a Bean, albeit simple, that adheres to the interface requirements
and (except for the fact that the code for our events is incomplete) should
be suitable for installation in and manipulation by a Visual Builder Tool.

<p>-end-<!--end--></body></html>