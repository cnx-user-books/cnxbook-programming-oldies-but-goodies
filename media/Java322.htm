<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body>
<!--start-->
<center>
<h2>
<!--title--><font color="#000000">Java 2D Graphics, The Composite Interface,
GradientPaint, and Transparency</font><!--endtitle--></h2></center>
<i>by Richard G. Baldwin</i>
<br><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i>
<p>Java Programming, Lecture Notes # 322
<p>March 20, 2000
<ul style='margin-top:0in' type=disc>
<li>
<a href="#_Introduction">Introduction</a></li>

<li>
<a href="#What is the AlphaComposite Class">What is the AlphaComposite
Class?</a></li>

<li>
<a href="#_How_Do_I">How Do I Get an AlphaComposite Object?</a></li>

<li>
<a href="#_What_is_the_3">What is the setComposite() Method?</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#_Summary">Summary</a></li>

<li>
<a href="#Complete Program Listing">Complete Program Listing</a></li>
</ul>

<center>
<hr size=3 width="100%" align=center></center>

<center>
<h2>
<a NAME="_Introduction"></a>Introduction</h2></center>
In an earlier lesson, I explained that the <b>Graphics2D</b> class extends
the <b>Graphics</b> class to provide more sophisticated control over geometry,
coordinate transformations, color management, and text layout. Beginning
with JDK 1.2, <b>Graphics2D </b>is the fundamental class for rendering
two-dimensional shapes, text and images.
<p><b><font color="#FF0000">You also need to understand some other classes
and interfaces</font></b>
<p>I also explained that without understanding the behavior of other classes
and interfaces, it is not possible to fully understand the inner workings
of the <b>Graphics2D</b> class.
<p>Throughout this series of lessons, I have been providing you with information
and sample programs designed to help you understand the various classes
and interfaces that are necessary for an understanding of the <b>Graphics2D</b>
class.
<p><b><font color="#FF0000">Two ways to achieve transparency</font></b>
<p>There are at least two different ways to achieve transparency in Java
2D.&nbsp; One approach is to use new constructors for the <b>Color</b>
class that allow you to create solid colors with a specified degree of
transparency.&nbsp; I will discuss that approach in a subsequent lesson.
<p><b><font color="#FF0000">A more general approach</font></b>
<p>A second, and possibly more general approach, is to make use of an object
that implement the <b>Composite</b> interface, passing a reference to that
object to the <b>setComposite()</b> method of the <b>Graphics2D</b> class.
<p><b><font color="#FF0000">You already know about solid colors</font></b>
<p>An earlier lesson explained the use of the <b>Composite</b> interface
for solid colors.
<p><b><font color="#FF0000">Color gradients</font></b>
<p>This lesson is designed to give you an understanding of the combination
of color gradients and the <b>Composite</b> interface.
<center>
<h2>
<a NAME="What is the AlphaComposite Class"></a>What is the AlphaComposite
Class?</h2></center>
The <b>setComposite() </b>method requires a reference to an object that
implements the <b>Composite </b>interface.&nbsp; There is only one class
in JDK 1.2.2 that implements the <b>Composite</b> interface: 
<b>AlphaComposite</b>.
<p><b><font color="#FF0000">Many compositing rules</font></b>
<p>An object of the <b>AlphaComposite</b> class can be used to implement
any one of about eight different compositing rules.
<p>When you draw something, a new source pixel can overlay an existing
destination pixel.&nbsp; The manner in which the color components of the
destination pixel are determined depends on the specific rule being applied.
<p><b><font color="#FF0000">Flanagan explains the rules</font></b>
<p>You can read about the different rules in <u>Java Foundation Classes
in a Nutshell</u>, by David Flanagan.
<p>In these lessons, I will illustrate only one of the compositing rules:&nbsp;
the rule known as <b>SRC_OVER</b>.
<p>According to Flanagan, this is “By far the most commonly used compositing
rule.”&nbsp; I explained this rule in detail in an earlier lesson, so I
won’t repeat that explanation here.
<center>
<h2>
<a NAME="_How_Do_I"></a>How Do I Get an AlphaComposite Object?</h2></center>
You cannot directly instantiate an object of the
<b>AlphaComposite</b>
class.&nbsp; Rather, you get an <b>AlphaComposite</b> object by invoking
the following factory method of the <b>AlphaComposite</b> class.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#00FFFF" >
<tr>
<td>public static AlphaComposite <b>getInstance</b>(int rule, float alpha)
<p>Creates an <b>AlphaComposite</b> object with the specified rule and
the constant alpha to multiply with the alpha of the source. The source
is multiplied with the specified alpha before being composited with the
destination.
<p>Parameters:
<ul style='margin-top:0in' type=disc>
<li>
rule - the compositing rule</li>

<li>
alpha - the constant alpha to be multiplied with the alpha of the source.
alpha must be a floating point number in the inclusive range [0.0, 1.0].</li>
</ul>
</td>
</tr>
</table>

<p>You specify the rule by passing an <b>int</b> value given by one of
the symbolic constants of the <b>AlphaComposite</b> class, such as <b>SRC_OVER</b>
described earlier.
<center>
<h2>
<a NAME="_What_is_the_3"></a>What is the setComposite() Method?</h2></center>
Here is part of what Sun has to say about the <b>setComposite()</b> method
of the <b>Graphics2D</b> class.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#00FFFF" >
<tr>
<td>public abstract void&nbsp; <b>setComposite</b>(<br>
&nbsp;&nbsp;&nbsp; Composite comp)&nbsp;
<p>Sets the <b>Composite</b> for the <b>Graphics2D</b> context. The <b>Composite</b>
is used in all drawing methods such as drawImage, drawString, draw, and
fill. It specifies how new pixels are to be combined with the existing
pixels on the graphics device during the rendering process.
<p>Parameters:&nbsp;
<ul>
<li>
comp - the <b>Composite</b> object to be used for rendering</li>
</ul>
</td>
</tr>
</table>

<p>The required parameter is a reference to any object that implements
the <b>Composite</b> interface, meaning that you could define your own
class to implement this interface.
<p>In this lesson, I elected to make use of the existing <b>AlphaComposite</b>
class described above.
<center>
<h2>
<a NAME="Sample Program"></a>Sample Program</h2></center>
This program is named <b>Composite02</b>.&nbsp; You will need to compile
and execute the program so that you can view its output while reading the
discussion.&nbsp; Without being able to view the output, the discussion
will probably mean very little to you.
<p><b><font color="#FF0000">A screen shot of the output</font></b>
<p>In case you are unable, for some reason, to compile and run the program,
here is a screen shot of the program output.&nbsp; However, this image
has been reduced to about seventy-percent of its original size in pixels.&nbsp;
Therefore, some of the quality was lost in the reduction process.
<p><img SRC="Java322.gif" height=330 width=330>
<p><b><font color="#FF0000">The GUI is a Frame object</font></b>
<p>The program draws a four-inch by four-inch <b>Frame</b> on the screen.&nbsp;
It translates the origin to the center of the <b>Frame</b>.&nbsp; Then
it draws a pair of X and Y-axes centered on the new origin.
<p><b><font color="#FF0000">A large circle</font></b>
<p>After drawing the X and Y-axes, the program draws a circle with a thick
border centered on the origin.&nbsp; This circle is used later to provide
visual cues relative to transparency.
<p><b><font color="#FF0000">Transparent ellipses</font></b>
<p>After the large circle is drawn, three ellipses are drawn on top of
one another in each quadrant.
<p>Each ellipse has a common center, and is rotated by sixty degrees relative
to the ellipse beneath it.
<p><b><font color="#FF0000">Color gradient</font></b>
<p>The color of each ellipse is based on a color gradient.&nbsp; The color
of the ellipse on the bottom of the stack is a gradient from red to green.&nbsp;
The ellipse in the center of the stack is a gradient from green to blue.&nbsp;
The ellipse on the top of the stack is a gradient from blue to red.
<p><b><font color="#FF0000">Different transparency values</font></b>
<p>The different ellipses are given various transparency values in the
different quadrants to illustrate the effect of the alpha parameter of
the <b>setComposite()</b> method.
<p><b><font color="#FF0000">Transparency by quadrant</font></b>
<p>Here is the transparency given to each of the ellipses in the different
quadrants.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#00FFFF" >
<tr>
<td><b><font face="Arial Narrow"><font size=-1>TRANSPARENCY</font></font></b>
<br><b><font face="Arial Narrow"><font size=-1>Upper-left quadrant</font></font></b>
<br><font face="Arial Narrow"><font size=-1>No transparency&nbsp;</font></font><font face="Arial Narrow"><font size=-1></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Upper-right quadrant</font></font></b>
<br><font face="Arial Narrow"><font size=-1>Red to green is not transparent&nbsp;</font></font>
<br><font face="Arial Narrow"><font size=-1>Green to blue is not transparent&nbsp;</font></font>
<br><font face="Arial Narrow"><font size=-1>Blue to red is 50-percent transparent&nbsp;</font></font><font face="Arial Narrow"><font size=-1></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Lower-left quadrant</font></font></b>
<br><font face="Arial Narrow"><font size=-1>Red to green is not transparent&nbsp;</font></font>
<br><font face="Arial Narrow"><font size=-1>Green to blue is 50-percent
transparent&nbsp;</font></font>
<br><font face="Arial Narrow"><font size=-1>Blue to red is 90-percent transparent&nbsp;</font></font><font face="Arial Narrow"><font size=-1></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Lower-right quadrant</font></font></b>
<br><font face="Arial Narrow"><font size=-1>Red to green is not transparent&nbsp;</font></font>
<br><font face="Arial Narrow"><font size=-1>Green to blue is 90-percent
transparent&nbsp;</font></font>
<br><font face="Arial Narrow"><font size=-1>Blue to red is 90-percent transparent</font></font></td>
</tr>
</table>

<p>As you can see from the information given above, the red-to-green ellipse
is opaque in all four quadrants.&nbsp; As a result, the large black circle
doesn’t show through the red-to-green ellipse in any of the quadrants.
<p><b><font color="#FF0000">Upper-left quadrant</font></b>
<p>All three ellipses are opaque in the upper-left quadrant, so nothing
shows through, and the stacking order of the ellipses is pretty obvious.
<p><b><font color="#FF0000">Other ellipses become transparent</font></b>
<p>The other two ellipses are made progressively more transparent as you
move through the other three quadrants.&nbsp; As a result, you can “see
through” the green-to-blue and blue-to-red ellipses.&nbsp; In other words,
you can see the geometric figures that lie beneath them (the other ellipses
and the large black circle).
<p><b><font color="#FF0000">Upper-right quadrant</font></b>
<p>In this quadrant, the blue-to-red ellipse is transparent, but the green-to-blue
ellipse and the red-to-green ellipse are opaque.&nbsp; Neither the large
circle nor the red-to-green ellipse can be seen through the green-to-blue
ellipse.
<p>However, both of the other ellipses show through the blue-to-red ellipse
in the upper-right quadrant.
<p><b><font color="#FF0000">Similar to previous lesson</font></b>
<p>The material in this lesson is very similar to a previous lesson except
for the use of color gradients in this lesson as opposed to solid colors
in the previous lesson.&nbsp; Therefore, I am not going to discuss the
output of this program in detail.
<p><b><font color="#FF0000">Illustrates rotation and translation</font></b>
<p>As mentioned in the earlier lesson, this lesson also provides a good
illustration of the benefits of rotation and translation.
<p><b><font color="#FF0000">Uses the AffineTransform</font></b>
<p>The task of rotating the ellipses relative to each other and the task
of translating them into the various quadrants was made much easier (even
possible) through the use of the <b>AffineTransform </b>to rotate and translate
the ellipses.
<p><b><font color="#FF0000">Rotation was especially useful in this lesson</font></b>
<p>The benefits of rotation are particularly significant in this lesson
where it was necessary to specify the coordinates of the ends of each ellipse
to create the color gradient.&nbsp; Because this was accomplished before
rotating the ellipses, the task was very easy.&nbsp; Had it been necessary
to specify the ends of rotated ellipses, the task would have been much
more difficult.
<p><b><font color="#FF0000">The normal caveat regarding inches</font></b>
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#00FFFF" >
<tr>
<td>This discussion of dimensions in inches on the screen depends on the
method named <b>getScreenResolution()</b> returning the correct value.&nbsp;
However, the <b>getScreenResolution() </b>method always seems to return
120 on my computer regardless of the actual screen resolution settings.</td>
</tr>
</table>

<p><b><font color="#FF0000">Will discuss in fragments</font></b>
<p>I will briefly discuss this program in fragments.&nbsp; The controlling
class and the constructor for the GUI class are essentially the same as
you have seen in several previous lessons, so, I won’t repeat that discussion
here.&nbsp; You can view that material in the complete listing of the program
at the end of the lesson.
<p>All of the interesting action takes place in the overridden
<b>paint()</b>
method, so I will begin the discussion there.
<p><b><font color="#FF0000">Overridden paint() method</font></b>
<p>The beginning portions of the overridden <b>paint()</b> method should
be familiar to you by now as well.&nbsp; So, I am going to let the comments
in <a href="Java322-fig01.htm">Figure 1</a> speak for themselves.
<p><b><font color="#FF0000">The large circle</font></b>
<p>The code in <a href="Java322-fig02.htm">Figure 2</a> draws the large
circle with a border width of 0.1 inches.&nbsp; There is nothing new here,
so I won’t provide an explanation.
<p><b><font color="#FF0000">An ellipse reference variable</font></b>
<p><a href="Java322-fig03.htm">Figure 3</a> simply declares a reference
variable of the class <b>Ellipse2D.Double</b>.&nbsp; This reference variable
will be used repeatedly in subsequent code for the instantiation of ellipse
objects.
<p><b><font color="#FF0000">Translation</font></b>
<p>The code in <a href="Java322-fig04.htm">Figure 4</a> translates the
origin to the center of what was previously the upper-left quadrant.&nbsp;
After this statement is executed, any geometric figure that is drawn centered
on the origin will actually be rendered in the center of what was earlier
the upper-left quadrant.
<p><b><font color="#FF0000">Opaque red-to-green ellipse</font></b>
<p>The code in <a href="Java322-fig05.htm">Figure 5</a> draws and fills
an opaque ellipse with a red-to-green gradient centered on the new origin.
<p>The code has been covered in previous lessons, so I won’t discuss it
further in this lesson.&nbsp; The only thing new here is the combined use
of <b>GradientPaint</b> and <b>setComposite()</b>.
<p>From this point on, everything is pretty much business as usual, so
I will terminate the discussion at this point and refer you to the complete
listing of the program at the end of the lesson.
<center>
<h2>
<a NAME="_Summary"></a>Summary</h2></center>
In this lesson, I have shown you how to use the
<b>setComposite()</b> method
of the <b>Grapics2D</b> class along with the
<b>AlphaComposite</b> class
to control the manner in which new pixel values are composited with existing
pixel values.
<p>The new material in the lesson was the combined use of <b>GradientPaint</b>
and <b>setComposite()</b>.
<p>The sample program in this lesson concentrates on transparency as a
way to demonstrate compositing pixels.
<p>In addition, you have seen some additional uses for the <b>translate</b>
and <b>rotate</b> transforms.
<center>
<h2>
<a NAME="Complete Program Listing"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <a href="Java322-fig06.htm">Figure
6</a>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;
<p><b>About the author</b>
<p><i><b><a href="mailto:baldwin@austin.cc.tx.us">Richard Baldwin</a></b>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p>-end-<!--end-->
</body>
</html>
