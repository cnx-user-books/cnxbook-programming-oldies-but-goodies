<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">
zz incomplete.&nbsp; Needs:
<br>Listing numbers to replace zz
<br>Editing for Parts 8
<br>Publication date
<br>Confirm correct img references
<br>Title:&nbsp; Instead of Part 1,2, etc, make titles read Concepts, GUI
Setup, Construction, Inheritance, Interfaces, Properties, Events, &amp;
Methods Refer to previous lessons by name
<br>Confirm: This is the <i>eighth</i> lesson in a miniseries
<br>Spell and grammer check
<br>Final edit.
<h2>
Swing from A to Z:&nbsp; Analyzing Swing<br>
Components, Part 8</h2>
<b>Published</b>&nbsp; zz zz
<br><b>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1074
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p>This is the eighth and final lesson in a miniseries discussing the use
of introspection for analyzing <b>Swing</b> components.&nbsp; The first
lesson in this miniseries was entitled <i>Swing from A to Z:&nbsp; Analyzing
Swing Components, Part 1, Concepts</i>.&nbsp; You will find&nbsp; links to all
of the lessons in the miniseries at the following <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">site</a>.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures and listings while you are reading about
them.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In an earlier lesson entitled <i>Alignment Properties and BoxLayout,
Part 1</i>, I recommended a list of Swing tutorials for you to study prior
to embarking on a study of this series of lessons.
<p>The lessons identified on that list will introduce you to the use of
Swing while avoiding much of the detail included in this series.
<p><b><font color="#FF0000">Where are the lessons located?</font></b>
<p>You will find those lessons published at <a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes my lessons are difficult
to locate there.&nbsp; You will find a consolidated index at
<i>Baldwin's
Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><font color="#000000">The index on my site provides links to the lessons
at Gamelan.com.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<b><font color="#FF0000">Streamlined Documentation</font></b>
<p><font color="#000000">The lessons in this miniseries discuss a very
useful Java program that supplements the Sun documentation.</font>
<p><font color="#000000">The program provides the following information
about Swing and AWT components:</font>
<ul>
<li>
<font color="#000000">Inheritance family tree of the component</font></li>

<li>
<font color="#000000">Interfaces implemented by the component</font></li>

<li>
<font color="#000000">Properties of the component</font></li>

<li>
<font color="#000000">Events multicast by the component</font></li>

<li>
<font color="#000000">Public methods exposed by the component</font></li>
</ul>
<b><font color="#FF0000">Program output</font></b>
<p><font color="#000000">Figure 1 is a screen shot showing the program
output after you start the program and click the <b>OK</b> button.</font>
<center>
<p><img SRC="java1074a.gif" height=521 width=400>
<br><b><font color="#000000">Figure 1.&nbsp; Screen shot showing program
output.</font></b></center>

<p><font color="#000000">The various parts of this GUI have been explained
in the earlier lessons in this miniseries.</font>
<p><b><font color="#FF0000">The program code</font></b>
<p><font color="#000000">In the previous lessons, I have walked you through
the code for this program, up to, and including the code that gets and
displays the information on events in the center-right pane.</font>
<p><font color="#000000">In this lesson, I will discuss the code that gets
and displays the sorted information on exposed methods shown in the bottom
pane of Figure 1.</font>
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">The Class class and the Introspector class</font></b>
<p><font color="#000000">Previous lessons explained the use of the <b>Class</b>
class and the <b>Introspector</b> class to achieve the objectives of this
program.</font>
<p><font color="#000000">This included a discussion of the <b>forName()</b>
and&nbsp; <b>getBeanInfo()</b> methods.</font>
<p><b><font color="#FF0000">Properties, events, and methods</font></b>
<p><font color="#000000">It was explained that an object of the interface
type <b>BeanInfo</b> can be used to obtain important information about
the properties, events, and methods of a target class.&nbsp; This lesson
will be primarily concerned with getting, sorting, and displaying the exposed
methods of a target class.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
A complete listing of this program, named <b>Introspect03</b> is provided
near the end of the lesson.
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will break this program down and discuss it in fragments.
<p><b><font color="#FF0000">The actionPerformed() method</font></b>
<p>The code in Listing zz is an abbreviated version of the <b>actionPerformed()</b>
method for the event listener object registered on the <b>OK</b> button
in Figure 1.&nbsp; Most of the code has been deleted because it is not
germane to this lesson.&nbsp; I discussed all of this code in an earlier
lesson.&nbsp; I am listing it here simply to refresh your memory.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b>actionPerformed</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#006600">Class <b>targetClassObject</b> =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.forName(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; targetClass.getText());

</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //...
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#000099">beanInfo = Introspector.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getBeanInfo</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>targetClassObject</b>,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.forName(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ceilingClass.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getText()));

</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //...
<b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doMethods();
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //...


<b>Listing zz</b></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Getting a Class object</font></b>
<p>The code shown in green gets a <b>Class</b> object representing the
target class and refers to that object in the reference variable named
<b>targetClassObject</b>.
<p>The code shown in blue passes that reference, along with a reference
to the name of the ceiling class, to the method named <b>getBeanInfo()</b>.
<p><b><font color="#FF0000">Getting a BeanInfo object</font></b>
<p>The <b>getBeanInfo()</b> method returns a reference to an object instantiated
from a class that implements the <b>BeanInfo</b> interface.&nbsp; The reference
to the <b>BeanInfo</b> object is stored in the instance variable named
<b>beanInfo</b>.
<p>This object can then be used to obtain information about the properties,
events, and methods of the target class and its superclasses up to, but
not including, the ceiling class.
<p><b><font color="#FF0000">The doMethods() method</font></b>
<p>The method named <b>doMethods()</b> invoked by the <b>actionPerformed()</b>
method is the primary topic of this lesson.
<p>The purpose of the <b>doMethods()</b> method is to get, sort, and display
the names of all public methods exposed by the target class and its superclasses,
up to, but not including the ceiling class.
<p>This information is displayed in the bottom scroll pane of Figure 1.
<p><b><font color="#FF0000">Not very difficult</font></b>
<p>In comparison with the previously-discussed code that deals with properties
and events, the code required to get, sort, and display the names of exposed
methods is a "walk in the park."&nbsp; If you have understood the code
presented in the earlier lessons in this miniseries, you will find this
lesson to be very easy to understand.
<p>If you take a look at the <b>METHODS</b> pane at the bottom of Figure
1, you will see that the display consists of a simple sorted list of method
names.
<p>The <b>doMethods()</b> method is the workhorse of the program insofar
as getting, sorting, and displaying exposed methods is concerned.&nbsp;&nbsp;
This method is invoked when the user clicks the <b>OK</b> button in Figure
1.&nbsp; Listing zz below shows the beginning of the method.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">&nbsp; void <b>doMethods</b>(){
&nbsp;&nbsp;&nbsp; Vector <b>methVector</b> = new Vector();

<b>Listing zz</b></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">A place for everything, and everything ...</font></b>
<p>The code in Listing zz above instantiates a new <b>Vector</b> object.&nbsp;
This object will be used to collect the names of the exposed methods so
that they can be sorted and displayed.
<p><b><font color="#FF0000">Array of MethodDiscriptor objects</font></b>
<p>The code in Listing zz below uses the <b>BeanInfo</b> object to get
an array of objects, each of which contains a description of an exposed
method.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp; MethodDescriptor[] methDescrip =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; beanInfo.getMethodDescriptors();

<b>Listing zz</b></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">What is a MethodDescriptor object?</font></b>
<p>Here is what Sun has to say about the <b>MethodDescriptor</b> class.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td BGCOLOR="#66FFFF">
<pre><font face="Courier New,Courier">A <b>MethodDescriptor</b> describes a&nbsp;
particular method that a Java Bean
supports for external access from&nbsp;
other components.&nbsp;</font></pre>
</td>
</tr>
</table>

<p>The <b>MethodDescriptor</b> class provides the following two methods
for obtaining information about the method that an object of that class
describes:
<ul>
<li>
<i>Method</i> <b>getMethod()</b> - Gets the method that this MethodDescriptor
encapsualtes.</li>

<li>
<i>ParameterDescriptor[]</i> <b>getParameterDescriptors()</b> - Gets the
ParameterDescriptor for each of this MethodDescriptor's method's parameters.</li>
</ul>
This program doesn't use either of these methods, but as you can see they
could be used to obtain additional information about the exposed methods
if you have such a need.
<p><b><font color="#FF0000">Getting&nbsp; and saving method names</font></b>
<p>The <b>MethodDescriptor</b> class also inherits the <b>getName()</b>
method from the
<b>FeatureDescriptor</b> class.
<p>The code in Listing zz below uses a <b>for</b> loop and the <b>getName()</b>
method to iterate on the array of <b>MethodDescriptor</b> objects to get
and save the name of each of the exposed&nbsp; methods.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp; for (int i = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; <b>methDescrip</b>.length; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>methVector.add</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methDescrip[i].<b>getName()</b>);
&nbsp;&nbsp;&nbsp; }//end for-loop

<b>Listing zz</b></font></pre>
</td>
</tr>
</table>

<p>Each exposed method is described by a single <b>MethodDescriptor</b>
object referred to by one of the elements in the array referred to by <b>methDescrip</b>.
<p>The name of each exposed method is saved <i>(by invoking the add() method)</i>
on the <b>Vector</b> object being used to save the method names for later
sorting and display.&nbsp; The <b>getName()</b> method invoked in Listing
zz above returns a reference to a <b>String</b> object.&nbsp; Therefore,
at the completion of the <b>for</b> loop, the <b>Vector</b> object contains
references to one or more <b>String</b> objects, each of which contains
the name of an exposed method.
<p><b><font color="#FF0000">Sorting the method names</font></b>
<p>The code in Listing zz below produces an array object in which the method
names are sorted into ascending alphanumeric order.&nbsp; Code similar
to this was discussed in an earlier lesson, so I won't discuss it further
here.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp; Object[] methodArray =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>methVector.toArray()</b>;
&nbsp;&nbsp;&nbsp; Arrays.<b>sort</b>(methodArray);

<b>Listing zz</b></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Eliminate duplicate method names</font></b>
<p>The code in Listing zz below eliminates any duplicate method names and
appends the resulting method names to the <b>String</b> contents of the
<b>JTextArea</b> object contained in the bottom scroll pane of Figure 1.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp; if(methodArray.length > 0){&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.append(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodArray[0].toString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.append("\n");
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; for(int i = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; methodArray.length;i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Eliminate dup method names
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!(methodArray[i].equals(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodArray[i-1]))){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.append(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodArray[i].toString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.append("\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end doMethods

<b>Listing zz</b></font></pre>
</td>
</tr>
</table>

<p>I have also discussed code very similar to this in one of the previous
lessons in this miniseries, so I won't discuss it further here.
<p><b><font color="#FF0000">A walk in the park</font></b>
<p>As I promised, the code to produce the sorted list of exposed methods
in the bottom pane in Figure 1 is not complicated at all <i>(at least in
comparison with the code required to deal with properties and events)</i>.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<b><font color="#FF0000">A very useful program</font></b>
<p>In this miniseries, I introduced you to a very useful program that can
be used to quickly obtain information about the following aspects of any
Java class that qualifies as a JavaBean component:
<ul>
<li>
<font color="#000000">Inheritance family tree of the component</font></li>

<li>
<font color="#000000">Interfaces implemented by the component</font></li>

<li>
<font color="#000000">Properties of the component</font></li>

<li>
<font color="#000000">Events multicast by the component</font></li>

<li>
<font color="#000000">Public methods exposed by the component</font></li>
</ul>
Since all Swing and AWT components qualify as JavaBean components, this
program will work with all Swing and AWT components.
<p><b><font color="#FF0000">Screen shots and the program</font></b>
<p>I provided screen shots to show you how the program works in practice,
and I provided a complete listing of the program so that you can copy,
compile, and use it.
<p><b><font color="#FF0000">Introspection</font></b>
<p>I provided quite a lot of information on Java introspection, and have
explained how introspection is used to achieve the objectives of the program.
<p><b><font color="#FF0000">The JTextArea and JScrollPane classes</font></b>
<p>I walked you through the program code.&nbsp; <font color="#000000">Along
the way, I discussed how to combine and use objects of the <b>JTextArea</b>
and <b>JScrollPane</b> classes.</font><font color="#000000"></font>
<p><b><font color="#FF0000">The setDefaultCloseOperation() method</font></b>
<p>I <font color="#000000">introduced you to the new JDK 1.3 capability
provided by the method named <b>setDefaultCloseOperation()</b>.&nbsp; This
method allows you to predefine the behavior of the <i>close</i> button
on a Swing <b>JFrame</b> object.</font>
<p><b><font color="#FF0000">An action listener object</font></b>
<p><font color="#000000">I discussed the actual code that produced the
layout and structure of the GUI shown in Figure 1.&nbsp; I also explained
the use of an anonymous inner class that is used to instantiate an action
listener object and register it on the <b>OK</b> button shown in Figure
1.</font><font color="#000000"></font>
<p><font color="#000000">I showed how the <b>actionPerformed()</b> method
of the action listener object invokes the following methods to obtain and
display the sought-after information about the target component:</font>
<ul>
<li>
<font color="#000000">doInheritance()</font></li>

<li>
<font color="#000000">doInterfaces()</font></li>

<li>
<font color="#000000">doProperties()</font></li>

<li>
<font color="#000000">doEvents()</font></li>

<li>
<font color="#000000">doMethods()</font></li>
</ul>
<b><font color="#FF0000">The
forName() and getBeanInfo() methods</font></b>
<p><font color="#000000">I explained how this listener object invokes the
<b>forName()</b>
and <b>getBeanInfo()</b> methods that produce the <b>Class</b> and <b>BeanInfo</b>
objects required to achieve the objectives of this program.</font>
<p><b><font color="#FF0000">An inheritance tree</font></b><font color="#000000"></font>
<p><font color="#000000">I showed you how to use a <b>Class</b> object
representing a target class to obtain a <b>Class</b> object representing
the superclass of the target class.</font>
<p><font color="#000000">I showed you how to use iteration to obtain the
complete family tree of the target class, all the way up to the class named
<b>Object</b>.</font><font color="#000000"></font>
<p><b><font color="#FF0000">A simple sort</font></b><font color="#000000"></font>
<p><font color="#000000">I showed you how to use a simple form of the <b>sort()</b>
method of the <b>Arrays</b> class to sort <b>String</b> objects into ascending
alphabetic order, and how to eliminate duplicates from the sorted list.</font><font color="#000000"></font>
<p><b><font color="#FF0000">Properties, events, and a Comparator sort</font></b>
<p><font color="#000000">I showed you how to:</font>
<ul>
<li>
<font color="#000000">Define a class whose objects encapsulate name and
type information for properties.</font></li>

<li>
<font color="#000000">Implement the <b>Comparator</b> interface, making
it possible to instantiate a <b>Comparator</b> object that can be used
to control the sort order of objects of that class.</font></li>

<li>
<font color="#000000">Use the <b>sort()</b> method of the <b>Arrays</b>
class, in conjunction with a <b>Comparator</b> object to sort objects of
that class in order by property name independent of the case of the characters
in the name.</font></li>
</ul>
<font color="#000000">I also showed you how to perform similar operations
to obtain a sorted list of the events multicast by an object.&nbsp; That
discussion took you much deeper into introspection involving such items
as:</font>
<ul>
<li>
<font color="#000000">The <b>getEventSetDescriptors() </b>method and the
<b>EventSetDescriptor</b>
class</font></li>

<li>
<font color="#000000">The <b>getListenerMethodDescriptors()</b> method
and the <b>MethodDescriptor</b> class</font></li>

<li>
<font color="#000000">The <b>getName()</b> method of the <b>FeatureDescriptor</b>
class</font></li>
</ul>
<b><font color="#FF0000">Expanding the program</font></b><font color="#000000"></font>
<p><font color="#000000">I also introduced you to other introspection methods
that can be used to get and display information about a target class that
I did not include in this program.</font><font color="#000000"></font>
<p><b><font color="#FF0000">Exposed methods</font></b>
<p>Finally, as something of an anticlimax to all of the above, I showed
you how to get, sort, and display the names of all the methods exposed
by a component.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
<font color="#000000">That is the end of this miniseries.&nbsp; As of this
writing, I haven't decided on the topic for the next lesson.&nbsp; You
will just need to refer back to the site to see what's next.</font>
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <font color="#000000">Listing&nbsp;
zz</font>.
<br>&nbsp;
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">/*File Introspect03.java&nbsp;
Copyright 2000, R.G.Baldwin

Produces a GUI that displays&nbsp;
inheritance, interfaces, properties,
events, and methods about components,
or about any class that is a bean.

Requires JDK 1.3 or later.&nbsp; Otherwise,
must service the windowClosing event&nbsp;
to terminate the program.
Tested using JDK 1.3 under WinNT.&nbsp;&nbsp;
**************************************/
import java.io.*;
import java.beans.*;
import java.lang.reflect.*;
import java.util.*;
import java.awt.Color;
import java.awt.event.*;
import javax.swing.*;

public class Introspect03&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; extends JFrame{
&nbsp; private JLabel errors =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JLabel("Errors appear here");
&nbsp; private JPanel outputPanel =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JPanel();
&nbsp; private JPanel inputPanel =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JPanel();
&nbsp; private JTextField targetClass =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JTextField(14);
&nbsp; private JTextField ceilingClass =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JTextField(14);
&nbsp; private JButton okButton =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JButton("OK");
&nbsp;&nbsp;
&nbsp; private JTextArea inher = new&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JTextArea("INHERITANCE\n",8,17);
&nbsp; private JScrollPane inherPane =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JScrollPane(inher);
&nbsp; private JTextArea intfcs = new&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JTextArea("INTERFACES\n",8,17);
&nbsp; private JScrollPane intfcsPane =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JScrollPane(intfcs);
&nbsp; private JTextArea props = new&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JTextArea("PROPERTIES\n",8,17);
&nbsp; private JScrollPane propsPane =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JScrollPane(props);
&nbsp; private JTextArea events =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JTextArea("EVENTS\n",8,17);
&nbsp; private JScrollPane eventsPane =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JScrollPane(events);
&nbsp; private JTextArea methods =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JTextArea("METHODS\n",8,17);
&nbsp; private JScrollPane methodsPane =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JScrollPane(methods);
&nbsp;&nbsp;
&nbsp; private BeanInfo beanInfo;
&nbsp; private Vector intfcsVector =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Vector();
&nbsp;&nbsp;
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Introspect03();
&nbsp; }//end main
&nbsp;&nbsp;
&nbsp; public Introspect03() {//constructor
&nbsp;&nbsp;&nbsp; //This require JDK 1.3 or later.
&nbsp;&nbsp;&nbsp; // Otherwise service windowClosing
&nbsp;&nbsp;&nbsp; // event to terminate the program.
&nbsp;&nbsp;&nbsp; setDefaultCloseOperation(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JFrame.EXIT_ON_CLOSE);

&nbsp;&nbsp;&nbsp; outputPanel.setBackground(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color.green);
&nbsp;&nbsp;&nbsp; inputPanel.setBackground(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Color.yellow);

&nbsp;&nbsp;&nbsp; outputPanel.add(inherPane);
&nbsp;&nbsp;&nbsp; outputPanel.add(intfcsPane);
&nbsp;&nbsp;&nbsp; outputPanel.add(propsPane);
&nbsp;&nbsp;&nbsp; outputPanel.add(eventsPane);
&nbsp;&nbsp;&nbsp; outputPanel.add(methodsPane);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Set some default values
&nbsp;&nbsp;&nbsp; targetClass.setText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "javax.swing.JButton");
&nbsp;&nbsp;&nbsp; ceilingClass.setText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "java.lang.Object");

&nbsp;&nbsp;&nbsp; inputPanel.add(targetClass);
&nbsp;&nbsp;&nbsp; inputPanel.add(ceilingClass);
&nbsp;&nbsp;&nbsp; inputPanel.add(okButton);

&nbsp;&nbsp;&nbsp; getContentPane().add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errors,"North");
&nbsp;&nbsp;&nbsp; getContentPane().add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; outputPanel,"Center");
&nbsp;&nbsp;&nbsp; getContentPane().add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inputPanel,"South");
&nbsp;&nbsp;&nbsp; setResizable(false);
&nbsp;&nbsp;&nbsp; setSize(400,520);
&nbsp;&nbsp;&nbsp; setTitle(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 2000, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //Anonymous inner class to provide
&nbsp;&nbsp;&nbsp; // event handler for okButton
&nbsp;&nbsp;&nbsp; okButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errors.setText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Errors appear here");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inher.setText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "INHERITANCE\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intfcs.setText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "INTERFACES\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; props.setText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "PROPERTIES\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; events.setText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "EVENTS\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.setText("METHODS\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class targetClassObject =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.forName(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; targetClass.getText());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doInheritance();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doInterfaces();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; beanInfo = Introspector.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getBeanInfo(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; targetClassObject,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class.forName(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ceilingClass.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getText()));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doProperties();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doEvents();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; doMethods();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(Exception ex){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; errors.setText(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ex.toString());}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ActionListener
&nbsp;&nbsp;&nbsp;&nbsp; );//end addActionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; void doInheritance()&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throws ClassNotFoundException{
&nbsp;&nbsp;&nbsp; //Get and display inheritance
&nbsp;&nbsp;&nbsp; // hierarchy
&nbsp;&nbsp;&nbsp; Vector inherVector = new Vector();
&nbsp;&nbsp;&nbsp; String theClass = targetClass.

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getText();
&nbsp;&nbsp;&nbsp; Class theClassObj = null;
&nbsp;&nbsp;&nbsp; Class theSuperClass = null;
&nbsp;&nbsp;&nbsp; while(!(theClass.equals(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "java.lang.Object"))){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inherVector.add(theClass);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theClassObj = Class.forName(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theClass);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theSuperClass = theClassObj.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSuperclass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get and save interfaces to be
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // used later
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(theClassObj.getInterfaces()&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intfcsVector.add(theClassObj.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getInterfaces());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;


&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theClass = theSuperClass.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getName();
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; inherVector.add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "java.lang.Object");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Display vector contents in
&nbsp;&nbsp;&nbsp; // reverse order
&nbsp;&nbsp;&nbsp; for(int i = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; inherVector.size();i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inher.append(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((String)inherVector.elementAt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inherVector.size() - (i+1))));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; inher.append("\n");
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end doInheritance
&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; void doInterfaces(){
&nbsp;&nbsp;&nbsp; Vector interfaceNameVector =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Vector();
&nbsp;&nbsp;&nbsp; //Interface information was stored
&nbsp;&nbsp;&nbsp; // in intfcsVector earlier.
&nbsp;&nbsp;&nbsp; for(int i = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; intfcsVector.size();i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class[] interfaceSet =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (Class[])intfcsVector.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; elementAt(i);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int j = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j &lt; interfaceSet.length;j++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; interfaceNameVector.add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; interfaceSet[j].getName());

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end for loop on j
&nbsp;&nbsp;&nbsp; }//end for loop on i

&nbsp;&nbsp;&nbsp; Object[] interfaceNameArray =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; interfaceNameVector.toArray();
&nbsp;&nbsp;&nbsp; Arrays.sort(interfaceNameArray);

&nbsp;&nbsp;&nbsp; if(interfaceNameArray.length > 0){&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intfcs.append(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; interfaceNameArray[0].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intfcs.append("\n");
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; for(int i = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; interfaceNameArray.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Eliminate dup interface names
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!(interfaceNameArray[i].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; equals(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; interfaceNameArray[i-1]))){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intfcs.append(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; interfaceNameArray[i].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; intfcs.append("\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end doInterfaces
&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; void doProperties(){
&nbsp;&nbsp;&nbsp; Vector propVector = new Vector();
&nbsp;&nbsp;&nbsp; PropertyDescriptor[] propDescrip =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; beanInfo.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getPropertyDescriptors();
&nbsp;&nbsp;&nbsp; for (int i = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; propDescrip.length; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropClass propObj =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PropClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propObj.setName(propDescrip[i].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getName());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propObj.setType("" +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propDescrip[i].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getPropertyType());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propVector.add(propObj);
&nbsp;&nbsp;&nbsp; }//end for-loop

&nbsp;&nbsp;&nbsp; Object[] propArray = propVector.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toArray();
&nbsp;&nbsp;&nbsp; Arrays.sort(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propArray,new PropClass());
&nbsp;&nbsp;&nbsp; for(int i = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; propArray.length;i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; props.append(propArray[i].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; props.append("\n");
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end doProperties
&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; void doEvents(){
&nbsp;&nbsp;&nbsp; Vector eventVector = new Vector();
&nbsp;&nbsp;&nbsp; EventSetDescriptor[] evSetDescrip =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; beanInfo.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getEventSetDescriptors();
&nbsp;&nbsp;&nbsp; for (int i = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; evSetDescrip.length; i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; EventClass eventObj =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new EventClass();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventObj.setName(evSetDescrip[i].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getName());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; MethodDescriptor[] methDescrip =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; evSetDescrip[i].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getListenerMethodDescriptors();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for (int j = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; j &lt; methDescrip.length; j++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventObj.setListenerMethod(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methDescrip[j].getName());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end for-loop
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventVector.add(eventObj);
&nbsp;&nbsp;&nbsp; }//end for-loop

&nbsp;&nbsp;&nbsp; Object[] eventArray = eventVector.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toArray();
&nbsp;&nbsp;&nbsp; Arrays.sort(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; eventArray,new EventClass());
&nbsp;&nbsp;&nbsp; for(int i = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; eventArray.length;i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; events.append(eventArray[i].
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; events.append("\n");
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end doEvents
&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; void doMethods(){
&nbsp;&nbsp;&nbsp; Vector methVector = new Vector();
&nbsp;&nbsp;&nbsp; MethodDescriptor[] methDescrip =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; beanInfo.getMethodDescriptors();
&nbsp;&nbsp;&nbsp; for (int i = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; methDescrip.length; i++) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methVector.add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methDescrip[i].getName());
&nbsp;&nbsp;&nbsp; }//end for-loop
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Object[] methodArray =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methVector.toArray();
&nbsp;&nbsp;&nbsp; Arrays.sort(methodArray);

&nbsp;&nbsp;&nbsp; if(methodArray.length > 0){&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.append(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodArray[0].toString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.append("\n");
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; for(int i = 1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; methodArray.length;i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Eliminate dup method names
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!(methodArray[i].equals(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodArray[i-1]))){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.append(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methodArray[i].toString());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; methods.append("\n");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end doMethods
//===================================//


//This inner class is used to
// encapsulate name and type
// information about properties.&nbsp; It
// also serves as a class from which a
// Comparator object can be
// instantiated to assist in sorting
// by name.
class PropClass implements Comparator{
&nbsp; private String name;
&nbsp; private String type;
&nbsp;&nbsp;
&nbsp; public void setName(String name){
&nbsp;&nbsp;&nbsp; this.name = name;
&nbsp; }//end setName
&nbsp;&nbsp;
&nbsp; public String getName(){
&nbsp;&nbsp;&nbsp; return name;
&nbsp; }//end getName
&nbsp;&nbsp;
&nbsp; public void setType(String type){
&nbsp;&nbsp;&nbsp; this.type = type;
&nbsp; }//end setType
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return(name + "\n&nbsp; " + type);
&nbsp; }//end toString
&nbsp;&nbsp;
&nbsp; public int compare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1, Object o2){
&nbsp;&nbsp;&nbsp; return ((PropClass)o1).getName().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toUpperCase().compareTo(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((PropClass)o2).getName().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toUpperCase());
&nbsp; }//end compare
&nbsp;&nbsp;
&nbsp; public boolean equals(Object obj){
&nbsp;&nbsp;&nbsp; return this.getName().equals(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((PropClass)obj).getName());
&nbsp; }//end equals
}//end class PropClass
//===================================//

//This inner class is used to
// encapsulate name and handler
// information about events.&nbsp; It also
// serves as a class from which a
// Comparator object can be
// instantiated to assist in sorting
// by name.
class EventClass implements Comparator{
&nbsp; private String name;
&nbsp; private Vector lstnrMethods =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Vector();
&nbsp;&nbsp;
&nbsp; public void setName(String name){
&nbsp;&nbsp;&nbsp; this.name = name;
&nbsp; }//end setName
&nbsp;&nbsp;
&nbsp; public String getName(){
&nbsp;&nbsp;&nbsp; return name;
&nbsp; }//end getName
&nbsp;&nbsp;
&nbsp; public void setListenerMethod(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String lstnrMethod){
&nbsp;&nbsp;&nbsp; lstnrMethods.add(lstnrMethod);
&nbsp; }//end setType
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; String theString = name;

&nbsp;&nbsp;&nbsp; for(int i = 0;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i &lt; lstnrMethods.size();i++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theString = theString + "\n&nbsp; " +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lstnrMethods.elementAt(i);
&nbsp;&nbsp;&nbsp; }//end for loop

&nbsp;&nbsp;&nbsp; return theString;
&nbsp; }//end toString
&nbsp;&nbsp;
&nbsp; public int compare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1, Object o2){
&nbsp;&nbsp;&nbsp; return ((EventClass)o1).getName().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toUpperCase().compareTo(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((EventClass)o2).getName().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toUpperCase());
&nbsp; }//end compare
&nbsp;&nbsp;
&nbsp; public boolean equals(Object obj){
&nbsp;&nbsp;&nbsp; return this.getName().equals(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((EventClass)obj).getName());
&nbsp; }//end equals
}//end EventClass inner class
&nbsp;&nbsp;
}//end controlling class Introspect03

<b>Listing zz</b></font></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
