<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, The Dialog Class<!--endtitle--></b></h2></center>
Java Programming, Lesson # 138, Revised 01/16/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#dialog">Dialog</a></li>

<li><a href="#minimal sample program">Minimal Sample Program</a></li>

<ul><li><a href="#interesting code fragments from minimal sample">Interesting Code
Fragments from Minimal Sample Program</a></li>

<li><a href="#program listing for minimal sample program">Program Listing for
Minimal Sample Program</a></li></ul>

<li><a href="#operational sample program">Operational Sample Program</a></li>

<ul><li><a href="#interesting code fragments from operational sample program">Interesting
Code Fragments from Operational Sample Program</a></li>

<li><a href="#program listing for operational sample program">Program Listing
for Operational Sample Program</a></li></ul>

<li><a href="#review">Review</a></li>


<p><hr width="100%"></ul>

<center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This series of lessons is concentrating on package <b>java.awt </b>where
most of the functionality exists for providing the user interface to your
application or applet.

<p>We are looking at the variety of components that are available to combine
with layout and event handling to produce an effective GUI.
<center><h2><a name="dialog"></a><font color="#ff0000">Dialog</font></h2></center>
This lesson will deal with the <b>Dialog </b>class. The official description
taken from the JDK 1.1 documentation is:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>"A class that produces a dialog - a window that takes input from the
user. The default layout for a dialog is BorderLayout.&nbsp;

<p>Dialogs are capable of generating the following window events: WindowOpened,
WindowClosing, WindowClosed, WindowActivated, WindowDeactivated."</td></tr></table>
It is often useful in the understanding of a class to picture the position
of that class in the inheritance hierarchy. The <b>Dialog </b>class extends
<b>Window </b>which extends <b>Container </b>which extends <b>Component</b>.

<p>As of 3/14/97, the <b>Dialog </b>class has no <i>fields </i>and has
the following public <i>constructors</i>:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>Dialog</b>(Frame) -- Constructs an initially invisible Dialog with an
empty title.&nbsp;</li>

<li><b>Dialog</b>(Frame, boolean) -- Constructs an initially invisible Dialog
with an empty title.&nbsp;</li>

<li><b>Dialog</b>(Frame, String) -- Constructs an initially invisible Dialog
with a title.&nbsp;</li>

<li><b>Dialog</b>(Frame, String, boolean) -- Constructs an initially invisible
Dialog with a title.&nbsp;</li></ul></td></tr></table>
All four versions of the constructor require a parameter of type <b>Frame</b>.
According to the JDK 1.1 documentation, <u>this is the <i>parent </i>or
<i>owner </i>of the <b>Dialog </b>object</u>.

<p>The <b>boolean </b>parameter in two versions of the constructor determines
whether or not the <b>Dialog </b>object is <i>modal</i>. According to the
JDK 1.1 documentation:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>"A <i>modal </i>Dialog grabs all the input from the user."</td></tr></table>
Stated differently, for these two versions of the constructor, if the <b>boolean
</b>parameter is <i>true</i>, then the <b>Dialog </b>object blocks input
to other windows when the <b>Dialog </b>object is <u>visible</u> on the
screen.

<p>Note that the <b>Dialog </b>object can also be made <i>modal</i> after
it is instantiated using the<b> setModal()</b> method.

<p>As of 3/14/97, the <b>Dialog </b>class has nine methods, and inherits
many more methods from its superclasses. An interesting subset of the methods
in the <b>Dialog </b>class is shown below:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>show</b>() -- Shows the dialog.&nbsp;</li>

<li><b>getTitle</b>() -- Gets the title of the Dialog.&nbsp;</li>

<li><b>setTitle</b>(String) -- Sets the title of the Dialog.&nbsp;</li>

<li><b>isModal</b>() -- Returns true if the Dialog is modal.&nbsp;</li>

<li><b>setModal</b>(boolean) -- Specifies whether this Dialog is modal.&nbsp;</li>

<li><b>isResizable</b>() -- Returns true if the user can resize the dialog.&nbsp;</li>

<li><b>setResizable</b>(boolean) -- Sets the resizable flag.&nbsp;</li></ul></td></tr></table>
The official description of the <b>show()</b> method taken directly from
the JDK 1.1 documentation is:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>"Shows the dialog. This will bring the dialog to the front if the dialog
is already visible. If the dialog is modal, this call will block until
the dialog is taken down by calling hide or dispose.&nbsp;

<p>It is permissible to show modal dialogs from the event dispatching thread
because the toolkit will ensure that another dispatching thread will run
while the one which invoked show is blocked."</td></tr></table>
Let's start our investigation of the <b>Dialog </b>class by taking a look
at a program containing the <u>minimum code necessary</u> to get a <b>Dialog
</b>object to appear on the screen. This program will also illustrate some
interesting aspects of a <b>Dialog </b>object.
<center><h2><a name="minimal sample program"></a><font color="#ff0000">Minimal Sample
Program</font></h2></center>
This program is designed to be compiled and run under JDK 1.1

<p>The purpose of this program is to illustrate the minimum code necessary
to get a <b>Dialog </b>object to appear on the screen. The following description
is based on executing this program under JDK 1.1.3 and Win95.

<p>When the program starts, a <b>Frame </b>object and a <b>Dialog </b>object
should both appear on the screen. The <b>Dialog </b>object should be about
half the size of the <b>Frame </b>object in both dimensions.

<p>The <b>Dialog </b>object should contain a title and a close box. However,
the close box is <u>not operative</u>.

<p>The <b>Dialog </b>object can be moved and it can be resized. It does
not have a minimize button or a maximize button, but the control box in
the upper left-hand corner can be used to minimize and maximize the object.
The <b>Dialog </b>object can be placed anywhere on the screen. Its position
is <u>not restricted</u> to the interior of its parent, the <b>Frame </b>object.

<p>On a Win95 system, the <b>Frame </b>object has a white background and
the <b>Dialog </b>object has a grey background. (This may depend on some
of the setup parameters in Win95.) When the title bar is selected on either
object, the title bar has a blue background and white letters.

<p>The <b>Frame </b>object appears to have a border while the <b>Dialog
</b>object does not appear to have a border. It differs in appearance from
the <b>Frame </b>object.

<p>The program was tested using JDK 1.1.3 running under Win95.

<p>Note that the <b>Dialog</b>, when created using JDK 1.1.3 under Win
95, has both a close box in the upper right-hand corner and a control box
in the upper left-hand corner. Although it doesn't have minimize and maximize
buttons, those capabilities exist, and are active in the control box. It
is the opinion of this author that it would be better if it were possible
to create a <b>Dialog</b> without these controls showing.
<center><h3><a name="interesting code fragments from minimal sample"></a><font color="#ff0000">Interesting
Code Fragments from Minimal Sample Program</font></h3></center>
The interesting code in this program is the following three statements.
The first statement instantiates the <b>Dialog </b>object as a child of
the main object, <b>this</b>. The second statement establishes the initial
size of the <b>Dialog </b>object. The third statement makes the <b>Dialog
</b>object appear on the screen.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; Dialog myDialog = new Dialog(<b>this</b>,"Dialog");
&nbsp;&nbsp;&nbsp; myDialog.setSize(125,75);
&nbsp;&nbsp;&nbsp; myDialog.show();//make the Dialog object appear</pre></td></tr></table>
A listing of the complete program is contained in the next section. Before
going further, it might be a good idea to confirm that you can duplicate
these results on your platform.
<center><h3><a name="program listing for minimal sample program"></a><font color="#ff0000">Program
Listing for Minimal Sample Program</font></h3></center>
A complete listing of the program follows. See the previous sections for
an operational description of the program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Dialog01.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

The purpose of this program is to illustrate the minimum
code requirement to get a Dialog object to appear on the
screen

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class Dialog01 extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Dialog01();//instantiate an object of this type
&nbsp; }//end main

&nbsp; public Dialog01(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setSize(250,150);
&nbsp;&nbsp;&nbsp; setVisible(true);
&nbsp;
<b>&nbsp;&nbsp;&nbsp; Dialog myDialog = new Dialog(this,"Dialog");
&nbsp;&nbsp;&nbsp; myDialog.setSize(125,75);
</b>&nbsp;&nbsp;<b>&nbsp; myDialog.show();</b>//make the Dialog object appear
&nbsp; }//end constructor
&nbsp;&nbsp;
}//end class Dialog01
//=======================================================//</pre></td></tr></table>
That should explain the minimum that we need to know in order to create
a <b>Dialog </b>object and cause it to appear on the screen. The next sample
program will have more substance.
<center><h2><a name="operational sample program"></a><font color="#ff0000">Operational
Sample Program</font></h2></center>
This program is designed to be compiled and run under JDK 1.1 It produces
two fully-functional <b>Dialog </b>objects, one <i>Modal </i>and the other
<i>nonModal</i>.

<p>A <b>Frame </b>object which will serve as the parent of two <b>Dialog
</b>objects is instantiated. Since it will serve as a parent, it must be
instantiated <u>first</u>.

<p>A <i>nonModal </i><b>Dialog </b>object is created containing a <b>Button
</b>object. The <b>Button </b>object is used to <i>close </i>the <b>Dialog
</b>object.

<p>An <b>ActionListener </b>object is instantiated and registered on the
<b>Button </b>object which belongs to the <b>Dialog </b>object.

<p>This <b>ActionListener </b>object is instantiated from a shared <b>ActionListener
</b>class. Code in the overridden <b>actionPerformed()</b> method of the
<b>ActionListener </b>object closes the <b>Dialog </b>object by invoking
<b>setVisible(false)</b>. According to the previous description of the
<b>show()</b> method, it would also have been possible to use <b>hide()</b>
or <b>dispose()</b> to <i>close</i> the <b>Dialog </b>object.

<p>A <i>Modal </i><b>Dialog </b>object is created in the same manner. It
also containing a <b>Button </b>object. As with the <i>nonModal </i><b>Dialog
</b>object, the <b>Button </b>object shares the same <b>ActionListener
</b>class to invoke the <b>setVisible(false)</b> method to <i>close </i>the
<i>Modal </i><b>Dialog </b>object.

<p>Two <b>Button </b>objects are created and placed on the <b>Frame </b>object.
One is designed to <i>show </i>the <i>nonModal </i><b>Dialog </b>object
and the other is designed to <i>show </i>the <i>Modal </i><b>Dialog </b>object.

<p>These two <b>Button </b>objects share a common <b>ActionListener </b>class
that is designed to <i>show </i>a <b>Dialog </b>object at a <u>predefined
size</u> and a parameterized location. The location of the <b>Dialog</b>
object is controlled by an integer <i>offset </i>parameter that is passed
when the <b>ActionListener </b>object is instantiated.

<p>To avoid overlap, the <b>ActionListener </b>objects for the two <b>Button
</b>objects that <i>show </i>the <b>Dialog </b>objects in this program
are instantiated with different offset values. Then when the <b>Dialog
</b>objects are shown, they appear at <u>different locations</u> on the
screen.

<p>If you compile and run this program, it should begin with two <b>Button
</b>objects visible. One of the <b>Button </b>objects can be used to <i>show
</i>the <i>nonModal </i><b>Dialog </b>object. The other can be used to
<i>show </i>the <b>Modal Dialog </b>object. When the <i>Modal</i> <b>Dialog
</b>object is <u>not</u> visible, you can <i>show </i>and <i>close </i>the
<i>nonModal </i><b>Dialog </b>object at will. You can also click the <i>close
</i>box on the <b>Frame </b>object to terminate the program.

<p>However, when the <i>Modal </i><b>Dialog </b>is visible, you should
<u>not</u> be able to perform any other operation within this program,
but you should be able to start other programs. This mode of operation
is sometimes referred to as <i>"application modal".</i>

<p>When the <i>Modal </i><b>Dialog </b>object is showing on a Win95 system
and you attempt to perform some other operation within the program, you
may receive an <u>audible signal</u>, possibly depending on how you have
the sounds set up on your system.

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed. However,
the frame <u>cannot be closed</u> while the <i>Modal </i><b>Dialog </b>object
is visible.

<p>The program was tested using JDK 1.1.3 running under Win95.
<center><h3><a name="interesting code fragments from operational sample program"></a><font color="#ff0000">Interesting
Code Fragments from Operational Sample Program</font></h3></center>
The first interesting code fragment is the statement that instantiates
the <b>Frame </b>object. We have seen many statements like this in earlier
lessons. The thing that makes this one interesting is that because it will
be used as the parent of two <b>Dialog </b>objects, it is necessary to
instantiate the <b>Frame </b>object before instantiating the <b>Dialog
</b>objects.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp; Frame myFrame = new Frame("Copyright 1997, R.G.Baldwin");</pre></td></tr></table>
The next interesting code fragment is typical of that used to
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><ul><li>
instantiate both of the <b>Dialog </b>objects,&nbsp;</li>

<li>
place a <b>Button </b>object in the <b>Dialog </b>object,&nbsp;</li>

<li>
instantiate and register an <b>ActionListener </b>object on the <b>Button
</b>object.&nbsp;</li></ul></td></tr></table>
This is the fragment that creates the <i>Modal </i><b>Dialog </b>object.
The code used to create the <i>nonModal </i><b>Dialog </b>object is essentially
the same except that it <u>does not have</u> the <i>true</i> boolean parameter
in the invocation of the constructor (shown highlighted in boldface below).
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>Dialog modalDialog =&nbsp;
&nbsp;&nbsp;&nbsp; new Dialog(myFrame,"Modal Dialog",<b>true</b>);
Button modalCloseButn = new Button("Close");
modalDialog.add(modalCloseButn);
modalCloseButn.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new closeDialogListener(modalDialog));</pre></td></tr></table>
This code fragment is followed by code to instantiate a couple of ordinary
<b>Button </b>objects and register <b>ActionListener </b>objects on those
buttons. We have seen code of this type many times in the past and won't
discuss it further here.

<p>The code to instantiate the <b>Button </b>objects is followed by code
to finish constructing the <b>Frame </b>object. Again, this is old stuff
for us by now.

<p>The next interesting code fragment is the <b>ActionListener </b>class
used to instantiate objects for showing a <b>Dialog </b>object.

<p>Two aspects of this code are interesting. First, a parameterized constructor
is used to save an <i>offset</i> value passed in as a parameter when the
<b>ActionListener </b>object is instantiated. This <i>offset</i> value
is combined with literal values in the code to control both the size and
the location location of the <b>Dialog </b>object when it appears on the
screen.

<p>The second interesting aspect is that the <b>show()</b> method of the
<b>Dialog </b>class is used to actually cause the Dialog object to appear
on the screen.

<p>Note also that the <u>order of execution</u> of the statements within
the overridden <b>actionPerformed()</b> method is critical. If the <b>show()</b>
method is executed before the <b>setBounds()</b> method on the <i>Modal
</i><b>Dialog </b>object, the <b>setBounds()</b> method used to control
the location and size of the <b>Dialog</b> object has no effect. The size
and location of the <i>Modal </i><b>Dialog </b>object must be established
before it becomes visible.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class showDialogListener implements ActionListener{
&nbsp; Dialog aDialog;
&nbsp; int Offset;
&nbsp;&nbsp;
&nbsp; //constructor
&nbsp; showDialogListener(Dialog inDialog,int inOffset){
&nbsp;&nbsp;&nbsp; aDialog = inDialog;
&nbsp;&nbsp;&nbsp; Offset = inOffset;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Following order is critical for a modal dialog.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; aDialog.<b>setBounds</b>(<b>Offset</b>,<b>Offset</b>,150,100);
&nbsp;&nbsp;&nbsp; aDialog.<b>show</b>();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end actionPerformed()
}//end class myModalActionListener</pre></td></tr></table>
The next interesting code fragment is the overridden <b>actionPerformed()</b>
method used to <i>close</i> the <b>Dialog </b>objects. The <b>setVisible(false)</b>
method is used in this example. The earlier description of the <b>show()</b>
method indicates that the <b>hide()</b> method or the <b>dispose()</b>
method could also have been used for this purpose.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; aDialog.<b>setVisible(false)</b>;
&nbsp; }//end actionPerformed()</pre></td></tr></table>
A complete listing of the program follows in the next section.
<center><h3><a name="program listing for operational sample program"></a><font color="#ff0000">Program
Listing for Operational Sample Program</font></h3></center>
This section contains a complete listing of the program with additional
comments. See the previous sections for an operational description of the
program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Dialog02.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

A Frame object which will serve as the parent of two&nbsp;
Dialog objects is instantiated.&nbsp; Since it will serve as a&nbsp;
parent, it must be instantiated first.

A nonModal Dialog object is created containing a Button&nbsp;
object.&nbsp; The Button object is used to close the Dialog&nbsp;
object.&nbsp; An ActionListener object is instantiated and&nbsp;
registered on the Button object.&nbsp; This object is&nbsp;
instantiated from a shared ActionListener class.&nbsp; Code in&nbsp;
the overridden actionPerformed() method of the&nbsp;
ActionListener object closes the Dialog object by invoking
setVisible(false).
&nbsp;
A Modal Dialog object is created also containing a Button
object.&nbsp; As with the nonModal Dialog object, the Button
object shares the same ActionListener class to invoke the
setVisible(false) method to close the Modal Dialog object.

Two Button objects are created and placed on the Frame&nbsp;
object.&nbsp; One is designed to show the nonModal Dialog&nbsp;
object and the other is designed to show the Modal Dialog
object.&nbsp; These two Button objects share a common&nbsp;
ActionListener class that is designed to show a Dialog&nbsp;
object at a predefined size.&nbsp; The position of the dialog
object is controlled by an integer offset parameter that
is passed when the ActionListener object is instantiated.
To avoid overlap, the ActionListener objects for the two
Button objects that show the Dialog objects are&nbsp;
instantiated with different offset values.&nbsp; Then when the
Dialog objects are shown, they appear at different&nbsp;
locations on the screen.

If you compile and run this program, it should begin with
two Button objects visible.&nbsp; One of the Button objects can
be used to show the nonModal Dialog object.&nbsp; The other can
be used to show the Modal Dialog object.&nbsp; When the Modal&nbsp;
Dialog is showing, you should not be able to perform any
other operation within this program, but you should be&nbsp;
able to start other programs.&nbsp; This mode of operation is&nbsp;
sometimes referred to as "application modal".&nbsp; When the&nbsp;
Modal Dialog is showing on a Win95 system and you attempt
to perform some other operation within the program, you&nbsp;
may receive an audible signal, possibly depending on how&nbsp;
you have the sounds set up on your system.

A windowClosing() event listener object is instantiated&nbsp;
and registered on the frame to terminate the program when
the frame is closed.&nbsp; However, the Frame cannot be closed
while the Modal Dialog is showing.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class Dialog02 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class Dialog02
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Instantiate a Frame object to serve as the parent of
&nbsp;&nbsp;&nbsp; // two Dialog objects. Since it will be the parent, it
&nbsp;&nbsp;&nbsp; // must be instantiated first.
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;
&nbsp;&nbsp;&nbsp; //Create a nonModal Dialog object containing a close&nbsp;
&nbsp;&nbsp;&nbsp; // button with an action listener object registered&nbsp;
&nbsp;&nbsp;&nbsp; // on the close button.
&nbsp;&nbsp;&nbsp; Dialog nonModalDialog =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dialog(myFrame,"NonModal Dialog");
&nbsp;&nbsp;&nbsp; Button nonModalCloseButn = new Button("Close");
&nbsp;&nbsp;&nbsp; nonModalDialog.add(nonModalCloseButn);
&nbsp;&nbsp;&nbsp; nonModalCloseButn.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new closeDialogListener(nonModalDialog));

&nbsp;&nbsp;&nbsp; //Create a Modal Dialog object containing a close&nbsp;
&nbsp;&nbsp;&nbsp; // button with an action listener object registered on
&nbsp;&nbsp;&nbsp; // the close button.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Dialog modalDialog =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Dialog(myFrame,"Modal Dialog",true);
&nbsp;&nbsp;&nbsp; Button modalCloseButn = new Button("Close");
&nbsp;&nbsp;&nbsp; modalDialog.add(modalCloseButn);
&nbsp;&nbsp;&nbsp; modalCloseButn.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new closeDialogListener(modalDialog));

&nbsp;&nbsp;&nbsp; //Create two Button objects to appear on the Frame&nbsp;
&nbsp;&nbsp;&nbsp; // object.&nbsp; One Button object will show the nonModal&nbsp;
&nbsp;&nbsp;&nbsp; // Dialog object.&nbsp; The other button will show the&nbsp;
&nbsp;&nbsp;&nbsp; // Modal Dialog object.&nbsp; Instantiate and register&nbsp;
&nbsp;&nbsp;&nbsp; // action listener objects on both buttons which will
&nbsp;&nbsp;&nbsp; // show the Dialog object passed in as a parameter at
&nbsp;&nbsp;&nbsp; // the X/Y offset also passed in as a parameter. The
&nbsp;&nbsp;&nbsp; // action listener objects also control the size of&nbsp;
&nbsp;&nbsp;&nbsp; // the Dialog objects.
&nbsp;&nbsp;&nbsp; Button showNonModalButn =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Show NonModal Dialog");
&nbsp;&nbsp;&nbsp; showNonModalButn.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new showDialogListener(nonModalDialog,100));
&nbsp;&nbsp;&nbsp; Button showModalButn = new Button("Show Modal Dialog");
&nbsp;&nbsp;&nbsp; showModalButn.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new showDialogListener(modalDialog,200));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Now finish constructing the Frame object.
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(showModalButn);
&nbsp;&nbsp;&nbsp; myFrame.add(showNonModalButn);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//Class to provide an action listener that will show a&nbsp;
// Dialog specified as a parameter at the X/Y offset also
// passed in as a parameter.&nbsp; The action listener object
// also controls the size of the Dialog objects.
class showDialogListener implements ActionListener{
&nbsp; Dialog aDialog;
&nbsp; int Offset;
&nbsp;&nbsp;
&nbsp; //constructor
&nbsp; showDialogListener(Dialog inDialog,int inOffset){
&nbsp;&nbsp;&nbsp; aDialog = inDialog;
&nbsp;&nbsp;&nbsp; Offset = inOffset;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Following order is critical for a modal dialog.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; aDialog.setBounds(Offset,Offset,150,100);
&nbsp;&nbsp;&nbsp; aDialog.show();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end actionPerformed()
}//end class myModalActionListener
//=======================================================//

//Class to provide an action listener that will close a&nbsp;
// Dialog specified as a parameter.
class closeDialogListener implements ActionListener{
&nbsp; Dialog aDialog;
&nbsp;&nbsp;
&nbsp; closeDialogListener(Dialog inDialog){//constructor
&nbsp;&nbsp;&nbsp; aDialog = inDialog;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; aDialog.setVisible(false);
&nbsp; }//end actionPerformed()
}//end class myModalAdtionListener
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>

<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Previous lessons have provided review problems and review questions to
reinforce the material presented in the lesson. By the time you reach this
point in your study of Java programming, you should be working at a sufficiently
independent level that such review information should no longer be necessary.

<p>Therefore, review questions and programs will rarely be provided for
the remaining lessons in this set of Java programming tutorials.

<p>-end-<!--end--></body></html>