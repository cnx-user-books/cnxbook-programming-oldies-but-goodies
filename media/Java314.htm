<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000FF" vlink="#0000FF" lang="EN-US">
<!--start-->
<center>
<h2>
<!--title-->Java 2D Graphics, Gradient Color Fill</span></h2></center>
<i>by Richard G. Baldwin</i>
<br><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i>
<p>Java Programming, Lecture Notes # 314
<p>March 19, 2000
<ul>
<li>
<a href="#_Introduction">Introduction</a></li>

<li>
<a href="#_The_Three_Paint">The Three Paint Classes</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#_Summary">Summary</a></li>

<li>
<a href="#Complete Program Listing">Complete Program Listings</a></li>
</ul>

<center>
<p><br>
<hr size=3 width="100%" align=center></center>

<center>
<h2>
<a NAME="_Introduction"></a>Introduction</h2></center>
In an earlier lesson, I explained that the <b>Graphics2D</b> class extends
the <b>Graphics</b> class to provide more sophisticated control over geometry,
coordinate transformations, color management, and text layout. Beginning
with JDK 1.2, <b>Graphics2D </b>is the fundamental class for rendering
two-dimensional shapes, text and images.
<p><b><font color="#FF0000">Understanding other classes also required</font></b>
<p>I also explained that without understanding the behavior of other classes
and interfaces such as <b>Shape</b>, <b>AffineTransform</b>,
<b>GraphicsConfiguration</b>,
<b>PathIterator</b>,
and <b>Stroke</b>, it is not possible to fully understand the inner workings
of the <b>Graphics2D</b> class.
<p><b><font color="#FF0000">What has been covered previously?</font></b>
<p>Earlier lessons have explained a number of Java 2D concepts, including
<b>Shape</b>,
<b>AffineTransform</b>,
and <b>PathIterator</b>.
<p>Before, I can explain the <b>Stroke </b>class, I need to explain how
to fill a
<b>Shape </b>in general.&nbsp; An earlier lesson showed you how
to fill a <b>Shape</b> with a solid color.
<p><b><font color="#FF0000">How to fill, in general</font></b>
<p>I explained in an earlier lesson that if you want to <i>fill</i> a <b>Shape</b>
object before you draw it, you can accomplish this with the following two
steps:
<ul>
<li>
Invoke <b>setPaint()</b> on the <b>Graphics2D</b> object, passing a reference
to an object of a class that implements the <b>Paint</b> interface as a
parameter.</li>

<li>
Invoke the <b>fill()</b> method on the <b>Graphics2D</b> object, passing
a reference to the <b>Shape</b> object that you want to fill as a parameter.</li>
</ul>
<b><font color="#FF0000">Filling with color gradient</font></b>
<p>This lesson will show you how to fill a <b>Shape</b> with a <i>color
gradient</i>, both <i>cyclic</i> and <i>acyclic</i>.
<center>
<h2>
<a NAME="_The_Three_Paint"></a>The Three Paint Classes</h2></center>
In a previous lesson, I explained that the Java2D API in JDK 1.2.2 provides
three classes that implement the <b>Paint</b> interface (and you can also
define your own):
<ul>
<li>
<b>Color</b></li>

<li>
<b>GradientPaint</b></li>

<li>
<b>TexturePaint</b></li>
</ul>
<b><font color="#FF0000">The Color class</font></b>
<p>The <b>Color</b> class can be used to fill a <b>Shape</b> object with
a solid color.&nbsp; That was the topic of an earlier lesson.
<p><b><font color="#FF0000">The GradientPaint class</font></b>
<p>The <b>GradientPaint</b> class can be used to fill a <b>Shape</b> with
a color gradient.&nbsp; The gradient progresses from one specified color
at one point in user space to a different specified color at a different
point in user space.
<p><b><font color="#FF0000">An <i>acyclic</i> gradient</font></b>
<p>The two points describe a hypothetical line segment in user space.&nbsp;
The two colors can be stabilized beyond the end points of the hypothetical
line segment.&nbsp; This is known as an <i>acyclic</i> gradient.
<p><b><font color="#FF0000">A <i>cyclic</i> gradient</font></b>
<p>The gradient can also be caused to repeat in a <i>cyclic</i> fashion
beyond the end points of the hypothetical line segment.&nbsp; This is known
as a
<i>cyclic</i> gradient.
<p>The use of the <b>GradientPaint</b> class is the primary topic of this
lesson.
<p><b><font color="#FF0000">The TexturePaint class</font></b>
<p>The <b>TexturePaint</b> class can be used to fill a <b>Shape</b> with
a tiled version of a <b>BufferedImage</b> object.&nbsp; This will also
be the topic of a subsequent lesson.
<center>
<h2>
<a NAME="Sample Program"></a>Sample Program</h2></center>
The name of this program is <b>PaintGradient01</b>.&nbsp; It illustrates
the use of a <b>Paint</b> object to fill a Shape with a solid color.
<p>In this case, the <b>Paint</b> object is an instance of the <b>GradientPaint</b>
class, which implements the interface named <b>Paint</b>.
<p><b><font color="#FF0000">A screen shot of the output</font></b>
<p>A significantly reduced screen shot of the output of this program is
shown below.&nbsp; Note that this screen shot was reduced to about seventy-percent
of its original size in pixels.&nbsp; Thus some of the quality was lost
in the process.
<p><img SRC="Java314.gif" </P height=330 width=330>
<p><b><font color="#FF0000">The GUI is a Frame object</font></b>
<p>The program draws a four-inch by four-inch <b>Frame</b> on the screen.&nbsp;
It translates the origin to the center of the <b>Frame</b>.&nbsp; Then
it draws a pair of X and Y-axes centered on the new origin.
<p>So far, this is very similar to the sample programs that I have explained
in previous lessons.
<p><b><font color="#FF0000">A circle in each quadrant</font></b>
<p>The program then draws one two-inch diameter circle in each quadrant.&nbsp;
For purpose of reference, it fills the circle in the upper left quadrant
with solid red, exactly as in an earlier program.
<p>The circles in the other three quadrants are filled with color gradients
that progress from red to orange in different ways.
<p><b><font color="#FF0000"><i>Acyclic</i> gradient on the horizontal</font></b>
<p>The color gradient in the upper right-hand circle progresses from red
on the left end of a hypothetical line to orange on the right end of a
hypothetical line in an <i>acyclic</i> manner.
<p>In other words, everything to the left of the beginning of a hypothetical
line is the same color red.&nbsp; Everything to the right of the end of
the hypothetical line is the same color orange.&nbsp; Only that portion
in between the beginning and the end points of the hypothetical line vary
in color.
<p><b><font color="#FF0000"><i>Cyclic</i> gradient on the horizontal</font></b>
<p>The color gradient in the lower left-hand circle progresses from red
to orange and back several times in a <i>cyclic</i> manner.&nbsp; The variations
in color progress along and beyond a hypothetical line that is parallel
to the horizontal axis.
<p><b><font color="#FF0000"><i>Cyclic</i> gradient at 45 degrees to the
horizontal</font></b>
<p>The color gradient in the lower right-hand circle also progresses from
red to orange and back several times in a <i>cyclic</i> manner.&nbsp; However,
in this case, the variations in color progress along and beyond a hypothetical
line that is angled at 45 degrees to the horizontal.
<p><b><font color="#FF0000">The normal disclaimer on inches</font></b>
<p>The program was tested using JDK 1.2.2 under WinNT Workstation 4.0
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td>This discussion of dimensions in inches on the screen depends on the
method named <b>getScreenResolution()</b> returning the correct value.&nbsp;
However, the <b>getScreenResolution() </b>method always seems to return
120 on my computer regardless of the actual screen resolution settings.</td>
</tr>
</table>

<p><b><font color="#FF0000">Will discuss in fragments</font></b>
<p>As is often the case, I will discuss this program in fragments.
<p>The controlling class and the constructor for the GUI class are essentially
the same as you have seen in several previous lessons, so, I won’t bore
you by repeating that discussion here.&nbsp; You can view that material
in the complete listing of the program near the end of the lesson.
<p>All of the interesting action takes place in the overridden
<b>paint()</b>
method, so I will begin the discussion there.
<p><b><font color="#FF0000">Overridden paint() method</font></b>
<p>The beginning portions of the overridden <b>paint()</b> method should
be familiar to you by now as well.&nbsp; So, I am going to let the comments
in <a href="Java314-fig01.htm">Figure 1</a> speak for themselves.
<p>The code in Figure 1 includes the code required to place the circle
in the upper left quadrant and fill it with the solid color red.&nbsp;
This is the same code that I showed you in an earlier lesson on solid-color
fill.
<p><b><font color="#FF0000">The interesting part</font></b>
<p>That brings us to the interesting part, which is to place a circle in
the upper-right quadrant and fill it with a horizontal,
<i>acyclic</i>
gradient from red to orange.
<p>I begin by instantiating an object of the <b>Ellipse2D.Double</b> class
bounded by a square in the upper-right quadrant.&nbsp; This is a circle.
<p>This is not new.&nbsp; You have seen code like this in previous lessons,
so I won’t discuss it further.&nbsp; See <a href="Java314-fig02.htm">Figure
2</a>.
<p><b><font color="#FF0000">The GradientPaint class</font></b>
<p>At this point, we need to take a look at some detailed information about
the <b>GradientPaint</b> class.&nbsp; This is what Sun has to say on the
topic.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td>“The
<b>GradientPaint</b> class provides a way to fill a <b>Shape</b>
with a linear color gradient pattern.&nbsp;
<p>If Point P1 with Color C1 and Point P2 with Color C2 are specified in
user space, the Color on the P1, P2 connecting line is proportionally changed
from C1 to C2.&nbsp;
<p>Any point P not on the extended P1, P2 connecting line has the color
of the point P' that is the perpendicular projection of P on the extended
P1, P2 connecting line.&nbsp;
<p>Points on the extended line outside of the P1, P2 segment can be colored
in one of two ways.&nbsp;
<br>&nbsp;
<ul>
<li>
If the gradient is <i>cyclic</i> then the points on the extended P1, P2
connecting line cycle back and forth between the colors C1 and C2.</li>

<li>
If the gradient is <i>acyclic</i> then points on the P1 side of the segment
have the constant Color C1 while points on the P2 side have the constant
Color C2.”&nbsp;</li>
</ul>
</td>
</tr>
</table>

<p>For the record, the gradient implemented by the next code fragment is
<i>acyclic</i>.
<p><b><font color="#FF0000">GradientPaint constructor</font></b>
<p>Now, we need to take a look at the constructor for the <b>GradientPaint</b>
class.
<p><b><font color="#FF0000">Four overloaded versions</font></b>
<p>Actually, there are four overloaded versions of the constructor.&nbsp;
Two of them accept the coordinates of the ends of the hypothetical line
mentioned above (P1 and P2) as objects of the class <b>Point2D
</b>(I discussed
the <b>Point2D</b> class in one of the early lessons in this series on
Java 2D).
<p>The other two constructors accept the coordinates of the ends of the
hypothetical line as parameters of type <b>float</b>.&nbsp; (If you need
the accuracy of <b>double</b>, you need to use one of the constructors
that accept objects of the class <b>Point2D</b>.)
<p>The constructor in the next code fragment specifies the end points of
the hypothetical line as type <b>float</b>.
<p><b><font color="#FF0000"><i>Cyclic</i> versus
<i>acyclic</i></font></b>
<p>Having separated the constructors into two categories based on how the
coordinate information is specified, the next separation has to do with
<i>acyclic</i>
versus <i>cyclic</i> behavior.
<p>Two of the constructors (one of each coordinate data type) default to
<i>acyclic</i>
behavior.
<p>The other two constructors have a <b>boolean</b> parameter that allows
you to specify <i>cyclic</i> or <i>acyclic</i>.
<p><b><font color="#FF0000">One specific constructor</font></b>
<p>Here is information about the version of the constructor that accepts
<b>float</b>
parameters and allows you to specify <i>acyclic</i> or <i>cyclic</i>.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td>public
<b>GradientPaint</b>(
<br>&nbsp; float x1,&nbsp;
<br>&nbsp; float y1,&nbsp;
<br>&nbsp; Color color1,&nbsp;
<br>&nbsp; float x2,&nbsp;
<br>&nbsp; float y2,
<br>&nbsp; Color color2,
<br>&nbsp; boolean cyclic)
<p>Constructs either a <i>cyclic</i> or <i>acyclic </i><b>GradientPaint</b>
object depending on the boolean parameter.
<p>Parameters:
<ul>
<li>
x1, y1 - coordinates of the first specified Point in user space</li>

<li>
color1 - Color at the first specified Point</li>

<li>
x2, y2 - coordinates of the second specified Point in user space</li>

<li>
color2 - Color at the second specified Point</li>

<li>
cyclic - true if the gradient pattern should cycle repeatedly between the
two colors; false otherwise&nbsp;</li>
</ul>
</td>
</tr>
</table>

<p>This is the version of the constructor that is used in the next code
fragment.
<p><b><font color="#FF0000">Where’s the code?</font></b>
<p>The next fragment (<a href="Java314-fig03.htm">Figure 3</a>) invokes
the <b>setPaint()</b> method passing a reference to an object that implements
the <b>Paint</b> interface as a parameter.&nbsp; As you are already aware,
the parameter to <b>setPaint()</b> must implement the <b>Paint</b> interface.
<p><b><font color="#FF0000">A GradientPaint object</font></b>
<p>The thing that is new about this fragment is that the object that is
passed to the <b>setPaint()</b> method is an object of the <b>GradientPaint</b>
class. (Did I mention that <b>GradientPaint</b> also implements <b>Paint</b>?)
<p>This <b>GradientPaint</b> object will be used to fill a circle that
is two inches in diameter.&nbsp; The bounding rectangle for the circle
is a square that fits exactly in the upper-right quadrant of the <b>Frame.</b>
<p><b><font color="#FF0000">End points of the hypothetical line</font></b>
<p>The hypothetical line segment that determines the beginning and the
end of the color gradient begins at a point that is one-half inch inside
the left edge of the circle (<b>0.5f*ds</b>).&nbsp; The hypothetical line
segment stops at a point that is one-half inch inside the right edge of
the circle (<b>1.5f*ds</b>).
<p><b><font color="#FF0000">The hypothetical line segment is horizontal</font></b>
<p>The coordinate information describes the ends of a hypothetical line
that is parallel to the horizontal axis (the Y-coordinates of the two end
points of the hypothetical line are the same at <b>-1.0f*ds</b>).
<p><b><font color="#FF0000">float rather than double</font></b>
<p>In case this syntax is new to you, the “f” causes the literal value
to be interpreted as <b>float</b> rather than <b>double</b>.
<p><b><font color="#FF0000">Color gradient is horizontal</font></b>
<p>Since the hypothetical line is parallel to the horizontal axis, the
color gradient will also be parallel to the horizontal axis.
<p><b><font color="#FF0000">Color gradient is <i>acyclic</i></font></b>
<p>The <b>boolean</b> parameter is false, so the gradient does not repeat
beyond the ends of the hypothetical line.
<p><b><font color="#FF0000">Gradient is from red to orange</font></b>
<p>The beginning color is red, so everything to the left of the starting
point is red.
<p>The ending color is orange, so everything to the right of the ending
point is orange.
<p>In between, the color varies from red to orange.
<p><b><font color="#FF0000">Fill the circle and render it</font></b>
<p>As in an earlier lesson, <a href="Java314-fig04.htm">Figure 4</a> invokes
the <b>fill()</b> method to fill the circle with the color gradient, and
then invokes the <b>draw()</b> method to render the circle on the screen.&nbsp;
There is nothing new here.
<p><b><font color="#FF0000">Run the program</font></b>
<p>Run the program and take a look at the circle in the upper-right quadrant.
<p>Someone once said that a picture is worth a thousand explanations of
code fragments, or something to that effect.
<p><b><font color="#FF0000">Looks kind of like the sun</font></b>
<p>On my machine, the circle looks a little like a photograph of the sun
(no reference intended to the company named that invented Java).
<p><b><font color="#FF0000">Horizontal <i>cyclic</i> color gradient</font></b>
<p><a href="Java314-fig05.htm">Figure 5</a> causes a <i>cyclic</i> color
gradient to be applied to a circle in the lower-left quadrant.
<p>The coordinate values that are used cause the circle to be in the lower-left
quadrant, and cause the gradient to be parallel to the horizontal axis.
<p>The <b>true</b> parameter that is passed to the constructor for the
<b>GradientPaint</b>
object causes the gradient to be <i>cyclic</i>.
<p><b><font color="#FF0000">A <i>cyclic</i> gradient at 45 degrees</font></b>
<p>The final fragment, <a href="Java314-fig06.htm">Figure 6</a>, causes
a
<i>cyclic</i> gradient from red to orange to fill a circle in the lower-right
quadrant.&nbsp; It will be left as an exercise for the student to interpret
the coordinate values of the end points of the hypothetical line to understand
how it represents a line at 45 degrees to the horizontal.
<p>Again, the <b>boolean</b> value passed to the <b>GradientPaint</b> constructor
is <b>true</b>, causing the gradient to be <i>cyclic</i>.
<p>You can view a complete listing of the program at the end of the lesson.
<center>
<h2>
<a NAME="_Summary"></a>Summary</h2></center>
In this lesson, I have explained the <b>GradientPaint</b> class, and have
shown you how it can be used to fill a <b>Shape</b> with a color gradient
that progresses from one color at a specified point in user space to a
different color at a different point in user space.
<p>The gradient can be either <i>cyclic</i> or <i>acyclic</i>, and it can
progress along a hypothetical line of any length, at any angle in user
space.
<center>
<h2>
<a NAME="Complete Program Listing"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <a href="Java314-fig07.htm">Figure
7</a>.
<p><i>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;</i>
<p><b>About the author</b>
<p><i><b><a href="mailto:baldwin@austin.cc.tx.us">Richard Baldwin</a></b>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<br>&nbsp;
<p>-end-<!--end-->
</body>
</html>
