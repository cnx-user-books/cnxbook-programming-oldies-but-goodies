<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 2, What Is a Collection?</h2>
<i>Baldwin explains some of the details surrounding the use of a Java collection
for creating data structures.&nbsp; He also discusses the interfaces and
the concrete implementations in the Java Collections Framework.</i>
<p><b>Published:</b> May 14, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1352
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is the second lesson in a miniseries on Java data structures and the
Java Collections Framework.&nbsp; The first lesson in the miniseries was
entitled <a href="Java1350.htm">Data Structures in Java: Part 1, Getting
Started</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the <i>Collections Framework</i>.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<p><font color="#000000">The index on my site provides links to the lessons
at </font><a href="http://softwaredev.earthweb.com/java">Gamelan.com</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">Collection is not only the name of a Java interface,
it is also the term given to an object that groups multiple elements into
a single unit.</font>
<p><font color="#000000">In this lesson, I will discuss how elements are
stored in a collection, and why it is often necessary to use a downcast
when retrieving and processing those elements.</font>
<p><font color="#000000">I will discuss the advantages of passing collections
between methods as type <b>Collection</b>.</font>
<p><font color="#000000">I will summarize the core interfaces in the Collections
Framework and show you how they are related.</font>
<p><font color="#000000">I will very briefly discuss the concrete implementations
of the interfaces that are provided by the framework. <i>(I will discuss
those implementations in much more detail in subsequent lessons.)</i></font>
<p><font color="#000000">And finally, I will introduce you to the three
kinds of things that are part of a collections framework.</font>
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<font color="#000000">The previous lesson, entitled </font><a href="Java1350.htm">Data
Structures in Java: Part 1, Getting Started</a><font color="#000000">,
introduced you to the use of the Java Collections Framework for building
and using data structures.&nbsp; This lesson will continue down that path.</font>
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion</font></h2></center>
<b><font color="#FF0000">What is a collection?</font></b>
<p>Just to see if you are awake today, let's start with a little quiz.
<p>What is a collection insofar as Java programming is concerned?
<ul>
<li>
A.&nbsp; Something they gather in plates at church.</li>

<li>
B.&nbsp; An object that groups multiple elements into a single unit.</li>

<li>
C.&nbsp; The name of a Java interface.</li>

<li>
D.&nbsp; None of the above.</li>
</ul>
If you answered A, you are probably reading an article on the wrong website
by mistake.&nbsp; If you answered <i>Both B and C</i>, then you are off
to a very good start on today's lesson.
<p><b>Collection</b> is the name of a Java interface.&nbsp; This interface
is an integral part of the Java Collections Framework.&nbsp; In fact, as
of JDK 1.3, it is one of two top-level interfaces in the framework.&nbsp;
The other top-level interface in the framework is named <b>Map</b>.
<p>According to <u>The Java Tutorial</u> from Sun, a collection <i>(sometimes
called a container)</i> is also an object that groups multiple elements
into a single unit.
<p>Typical collection objects might contain information about employees
in the company telephone book, all the purchase orders issued during the
past year, or the transactions occurring in a person's checking account.
<p><b><font color="#FF0000">Slightly different terminology</font></b>
<p>Note that this terminology may be somewhat different from what you are
accustomed to.&nbsp; For example, if you speak of your <i>coin collection,</i>
you are probably speaking about the actual coins rather than the container
that holds the coins.
<p>This is an important distinction.&nbsp; The usage of the term <i>collection</i>
in the Collection Framework usually refers to the container and not to
the contents of the container.&nbsp; In the framework, the contents are
usually referred to as
<i>elements</i>.
<p><b><font color="#FF0000">Store references rather than objects</font></b>
<p>The collections in the framework always store references to objects,
rather than storing the objects themselves.&nbsp; One consequence of this
is that primitive values cannot be stored in a collection without first
encapsulating them in an object. <i>(Standard wrapper classes are provided
for encapsulating all primitive types.)</i>
<p><b><font color="#FF0000">Stored as type Object</font></b>
<p>Furthermore, the references are always stored as type <b>Object</b>.&nbsp;
Thus, when you retrieve an element from a collection, you frequently need
to downcast it before you can gain access to the members of the object
to which the reference refers.
<p><b><font color="#FF0000">Moving data among methods</font></b>
<p>In addition to their use for storing, retrieving, and manipulating data,
collections are also used to move data among methods.
<p>One of the primary advantages of the Collections Framework is the ability
to pass a collection to a method as the generic interface type <b>Collection</b>.&nbsp;
The receiving method doesn't need to know the actual type of the object
referred to by the incoming reference in order to invoke its methods.
<p><b><font color="#FF0000">Polymorphic behavior</font></b>
<p>The receiving method can invoke <i>(on the reference to the Collection
object)</i> any of the methods declared in the <b>Collection</b> interface,
with confidence that the behavior of the method will be appropriate for
the actual type of <b>Collection</b> object involved.&nbsp; <i>(That is
polymorphic behavior.)</i>
<p><b><font color="#FF0000">Core collection interfaces</font></b>
<p>If you have been working with the framework, you might be inclined to
think that all of the interfaces in the following list are members of the
<i>core collection interfaces.</i>
<ul>
<li>
Collection</li>

<li>
Set</li>

<li>
List</li>

<li>
SortedSet</li>

<li>
Map</li>

<li>
SortedMap</li>

<li>
Iterator</li>
</ul>
However, that is not the case.
<p><font color="#000000">While the <b>Iterator</b> interface is heavily
used in conjunction with collections, according to <u>The Java Tutorial</u>
from Sun, it is not one of the <i>core collection interfaces.</i></font>
<p><font color="#000000">The core collection interfaces identified by the
Sun book are shown below, with indentation showing the superinterface-subinterface
relationships among the interfaces.</font>
<ul>
<li>
<b>Collection</b></li>

<ul>
<li>
Set</li>

<ul>
<li>
SortedSet</li>
</ul>

<li>
List</li>
</ul>

<li>
<b>Map</b></li>

<ul>
<li>
SortedMap</li>
</ul>
</ul>
As you can see, as mentioned earlier, <b>Collection</b> and <b>Map</b>
are the two top-level interfaces.
<p>You should probably commit the above list of interfaces and their relationships
to memory.&nbsp; You might find that helpful when navigating the Sun documentation.
<p><b><font color="#FF0000">Concrete implementations</font></b>
<p>In addition to interfaces, the framework provides several concrete implementations
of the interfaces defined in the framework.&nbsp; <i>(A concrete implementation
is a class that implements one or more of the interfaces.)</i>
<p>Are you still awake?&nbsp; If so, see if you can answer the following
question.
<p>True or False?&nbsp; Each of the following classes provides an implementation
of one of the interfaces that make up the Java Collections Framework.&nbsp;
If False, which items don't belong in the list.
<ul>
<li>
AbstractSet</li>

<li>
AbstractList</li>

<li>
AbstractMap</li>

<li>
HashSet</li>

<li>
TreeSet</li>

<li>
LinkedList</li>

<li>
Vector</li>

<li>
ArrayList</li>

<li>
HashMap</li>

<li>
Hashtable</li>

<li>
WeakHashMap</li>

<li>
TreeMap</li>

<li>
Iterator</li>

<li>
Attributes</li>

<li>
RenderingHints</li>
</ul>
Hopefully your answer was False, but even so, that isn't the complete answer.
<p><b><font color="#FF0000">Iterator is not a class</font></b>
<p><font color="#000000">To begin with, <b>Iterator</b><i> </i>is not a
class.&nbsp; I told you that a couple of paragraphs back.&nbsp; It is an
interface.&nbsp; Therefore, it has no place on the above list of classes.</font>
<p><b><font color="#FF0000">What about Attributes and RenderingHints?</font></b>
<p><font color="#000000">You may also have wondered if the classes named
<b>A</b></font><b>ttributes</b>
and <b>RenderingHints</b> belong on the list.&nbsp; Note that I didn't
restrict the above list to only those classes that might be considered
part of the framework, so this was sort of a trick question.&nbsp; <i>(Of
course you could have looked them up in the Sun documentation just like
I did.)</i>
<p>While these two classes are not really a part of the core Java Collections
Framework, they do implement interfaces that are part of the framework.
<p>The <b>RenderingHints</b> class implements the <b>Map</b> interface,
and is used in conjunction with the <b>Graphics2D</b> class.&nbsp; The
<b>Attributes</b> class also implements the <b>Map </b>interface,
<p><b><font color="#FF0000">What is a Collections Framework?</font></b>
<p>According to <u>The Java Tutorial</u> from Sun, <i>"A collections framework
is a unified architecture for representing and manipulating collections.
All collections frameworks contain three things."</i>
<p>Those three things are:
<ul>
<li>
Interfaces</li>

<li>
Implementations</li>

<li>
Algorithms</li>
</ul>
This is probably a good place to close off the discussion for this lesson.&nbsp;
The next lesson will take up at this point, providing a more in-depth discussion
of the interfaces, implementations, and algorithms that make up the framework.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
I started out by telling you that a collection is not only the name of
a Java interface <i>(Collection)</i> but is also an object that groups
multiple elements into a single unit.
<p>Java <b>Collection</b> objects don't store objects or primitive values
directly.&nbsp; Rather, they store references to objects.&nbsp; Further,
all such references are stored as the type <b>Object</b>.&nbsp; This often
leads to the later need to downcast the reference in order to gain access
to the members of the object to which it refers.
<p>If you need to store primitive values in a collection, you will first
need to wrap those values in appropriate objects.&nbsp; Standard wrapper
classes are provided for all the primitive types.
<p>Collections are not only useful for storing and retrieving data, they
are also useful for moving data among methods.
<p>Because a collection can be passed to a method as type <b>Collection</b>,
all of the methods declared in the <b>Collection</b> interface can be invoked
on the incoming reference in a polymorphic manner.
<p>In addition to the interfaces defined in the Collections Framework,
the framework also provides various concrete implementations of the interfaces
for most of the commonly-used data structures.&nbsp; This makes it possible
for you to conveniently use the framework without the requirement to define
new <b>Collection</b> classes.
<p>As of JDK 1.3, there are six core interfaces in the framework.&nbsp;
Although the <b>Iterator</b> interface is often used with collections,
it is not one of the core interfaces.
<p>I ended the lesson by telling you that there are basically three things
in a collections framework:&nbsp; interfaces, implementations, and algorithms.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will
<ul>
<li>
Discuss the purpose of interfaces, implementations, and algorithms in a
collections framework</li>

<li>
Provide some additional discussion about polymorphic behavior in the Java
Collections Framework</li>

<li>
Discuss some of the advantages of using the framework to satisfy your need
for data structures.</li>
</ul>

<p><br>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
