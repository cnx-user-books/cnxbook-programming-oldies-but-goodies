<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Enterprise JavaBeans(TM)</h2></center>

<center>
<h2>
<font color="#000000">Java 2 Platform, Enterprise Edition (J2EE)</font>,
Part 2</h2></center>
<b>By <a href="#BaldwinBio">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1306
<p>October 16, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<font color="#000000"><a href="#Java 2 platform, Enterprise Edition">Java
2 Platform, Enterprise Edition</a></font></li>

<li>
<font color="#000000"><a href="#Summary">Summary</a></font></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is one in a series of lessons designed to teach you about Sun's Enterprise
JavaBeans(TM) technology, often referred to simply as EJB.&nbsp; <i>Enterprise
JavaBeans(TM)</i> is a trademark of Sun.
<p>This lesson, along with the previous lesson entitled <a href="Java1305.htm">Enterprise
JavaBeans(TM), Java 2 Platform, Enterprise Edition (J2EE), Part 1</a>,
and the next lesson, together constitute a three-part miniseries designed
to provide background information, and to explain where EJB fits in the
grand scheme of things at Sun.
<p>Subsequent lessons will show you how to write, deploy, and execute Enterprise
JavaBeans(TM).
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">A preview</font></b>
<p><font color="#000000">I will begin this lesson with a clarification
of the difference between JavaBean Components(TM) and Enterprise JavaBeans(TM).</font>
<p><font color="#000000">After defining enterprise beans, I will go into
a discussion of the Java 2 Platform, Enterprise Edition (often referred
to simply as J2EE).</font>
<p><font color="#000000">I will discuss multi-tier systems, fat clients,
and thin clients.&nbsp; I will provide some examples of why multi-tier
systems with thin clients may be preferable to the use of two-tier systems
with fat clients.</font>
<p><font color="#000000">I will provide a preview of the J2EE Reference
Implementation, which will be used extensively in many subsequent lessons.</font>
<p><font color="#000000">I will discuss the need for standardization in
multi-tier systems, and described Sun's approach to the needed standardization.</font>
<p><b><font color="#FF0000">A clarification</font></b>
<p><font color="#000000">Because of the likelihood of confusion regarding
the use of the term <i>beans</i>, I will begin by telling you that an enterprise
bean is not a <i>JavaBean Component(TM)</i>, as discussed in my series
of <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">tutorial
lessons</a> beginning with lesson number 500.</font>
<p><b><font color="#FF0000">What is an EJB?</font></b>
<p><font color="#000000"><i>Enterprise JavaBeans(TM)</i> consist of reusable
compiled code that is designed to be installed inside a special application
server that is compliant with Sun's <i>Java 2 Platform Enterprise Edition</i>.</font>
<p><b><font color="#FF0000">Use of Bean in this lesson</font></b>
<p><font color="#000000">As mentioned above, Enterprise JavaBeans(TM) are
not the same thing as JavaBean Components(TM).&nbsp; In this lesson, when
I refer to <i>beans</i>, I will be referring to Enterprise JavaBeans(TM).</font>
<center>
<h2>
<a NAME="Java 2 platform, Enterprise Edition"></a><font color="#000000">Java
2 Platform, Enterprise Edition</font></h2></center>
<font color="#000000">Enterprise JavaBeans(TM) technology is part of a
larger overall software development technology from Sun known as the Java
2 Platform, Enterprise Edition (J2EE).</font>
<p><b><font color="#FF0000">Why use J2EE?</font></b>
<p><font color="#000000">One of the main goals of J2EE is to allow the
enterprise software developer to reduce development cost and reduce time-to-market
response time.</font>
<p><b><font color="#FF0000">Multi-tier systems</font></b>
<p><font color="#000000">In today's world, systems for delivering large-scale
data processing services are often built as distributed systems consisting
of several tiers or layers.&nbsp; Such systems usually include a client
tier, a back-end data storage tier, and one or more tiers in the middle
to implement business logic and processes.</font>
<p><b><font color="#FF0000">Reducing cost and complexity of development</font></b>
<p><font color="#000000">J2EE is designed specifically to accommodate the
need to productively develop and upgrade the software in the middle tier
of a multi-tier system.</font>
<p><font color="#000000">The design is intended to reduce the cost and
complexity of developing and upgrading multi-tier capability.&nbsp; The
intent is to make it possible to quickly deploy and enhance such capability
in response to competitive pressures.</font>
<p><b><font color="#FF0000">What specifically is J2EE?</font></b>
<p><font color="#000000">According to Sun, J2EE defines a standard architecture
that is delivered as the following elements:</font>
<ul>
<li>
<font color="#000000"><b>J2EE Platform</b> - A standard platform for hosting
J2EE applications, specified as a set of required APIs and policies.</font></li>

<li>
<font color="#000000"><b>J2EE Compatibility Test Suite</b> - A suite of
compatibility tests for verifying that a J2EE platform product is compatible
with the J2EE platform standard.</font></li>

<li>
<font color="#000000"><b>J2EE Reference Implementation</b> - A reference
implementation for demonstrating the capabilities of J2EE and for providing
an operational definition of the J2EE platform.</font></li>

<li>
<font color="#000000"><b>Sun Blueprints (TM) Design Guidelines for J2EE</b>
- Guidelines that describe a standard programming model for developing
multi-tier, thin-client applications.</font></li>
</ul>
<b><font color="#FF0000">A preview of things to come</font></b>
<p><font color="#000000">This set of lessons on Enterprise JavaBeans(TM)
will make very heavy use of the APIs as well as the J2EE Reference Implementation.</font>
<p><b><font color="#FF0000">What is the J2EE Reference Implementation?</font></b>
<p><font color="#000000">The J2EE Reference Implementation is actually
a downloadable server that you can use for testing your beans and other
components such as servlets and Java Server Pages (JSP).&nbsp; It also
supports database access via JDBC.</font>
<p><font color="#000000">At some point along the way, these tutorial lessons
may also make use of the <i>Sun Blueprints Design Guidelines for J2EE</i>.</font>
<p><b><font color="#FF0000">Historical perspective</font></b>
<p><font color="#000000">Two forces came together during the 90s that led
to the need for systems such as J2EE.</font>
<p><b><font color="#FF0000">Enterprise business on the web</font></b>
<p><font color="#000000">One of these forces was widespread use of the
Internet for business.&nbsp; As business developed on the Internet, it
quickly became apparent that there was a need for <i>thin clients</i> (client
systems that serve primarily as a communication mechanism between the human
client and the enterprise).</font>
<p><b><font color="#FF0000">Bursting the fat client bubble</font></b>
<p><font color="#000000">Although it may have been believed early in the
history of the Web that browser plugins and Java applets would be widely
accepted for use as <i>fat clients</i> (client programs with lots of data
processing capability and responsibility), in reality, this wasn't a very
acceptable approach for a variety of reasons.&nbsp; This led to the need
for systems that work well using thin clients.</font>
<p><b><font color="#FF0000">The second force</font></b>
<p><font color="#000000">The second force that emerged during the 90s was
a movement away from the earlier <i>client-server</i> implementation (based
on fat clients) to a multi-tier implementation using thin clients.</font>
<p><b><font color="#FF0000">How does a fat client work?</font></b>
<p><font color="#000000">In the traditional client-server implementation,
fat clients with lots of processing capability interacted more or less
directly with the back-end persistent database.&nbsp; This model experienced
lots of problems, and led to a shift to a multi-tier model.</font>
<p><b><font color="#FF0000">How does a multi-tier system work?</font></b>
<p><font color="#000000">In the three-tier (or multi-tier) model, a thin
client communicates with a middle tier, which provides a data processing
bridge between the thin client and back-end persistent data storage.</font>
<p><font color="#000000">The multi-tier approach is much more flexible.&nbsp;
It is also safer, and easier to maintain than the earlier client-server
approach involving fat clients.</font>
<p><b><font color="#FF0000">Replacing the back-end database</font></b>
<p><font color="#000000">For example, with the three-tier approach, the
entire back-end database can be completely replaced with one of a new design
so long as the software in the middle tier can accommodate the new database
on one hand, and can continue to present the same interface to the thin
client on the other hand.&nbsp; No changes would be required in the client
software.</font>
<p><font color="#000000">If this were attempted in a fat-client system
where the clients interact directly with the back-end database, it might
be necessary to upgrade the software in every client system.&nbsp; In today's
world, this could easily involve thousands of client systems.</font>
<p><b><font color="#FF0000">What does Sun have to say?</font></b>
<p><font color="#000000">According to Sun, <i>"The new models separated
business logic from both system services and the user interface, placing
it in a middle tier between the two."</i></font>
<p><font color="#000000">The adoption of this new architecture was also
strongly encouraged during the 90s by the development of new middleware
services such as transaction monitors, message-oriented middleware, and
object request brokers.</font>
<p><b><font color="#FF0000">Multi-tier architecture makes development simpler</font></b>
<p><font color="#000000">Early entries into the multi-tier arena made life
simpler and more productive for the software developer, but they lacked
standardization.&nbsp; Even without standardization, however, the use of
a multi-tier design makes it easier to design, develop, deploy, and maintain
large-scale enterprise applications than the earlier two-tier client-server
systems.</font>
<p><b><font color="#FF0000">Developers can specialize</font></b>
<p><font color="#000000">By separating the application into well-defined
layers, different developers can concentrate on what they do best.&nbsp;
Then the results of those relatively independent efforts can be integrated
into an operational system.</font>
<p><b><font color="#FF0000">Concentrate on business logic</font></b>
<p><font color="#000000">For example, once such a system is established,
and application developers understand how to interface with it, they can
concentrate on programming business logic without the requirement to deal
(to any great extent) with the specifics of the back-end data storage infrastructure,
or the specifics of the front-end client interface.&nbsp; This makes it
possible for such developers to be more productive, and for such development
to be more responsive and less costly.</font>
<p><b><font color="#FF0000">The good news is ...</font></b>
<p><font color="#000000">Once the software that implements the appropriate
business logic has been developed, it can be deployed on different servers
that are compatible with the software.</font>
<p><b><font color="#FF0000">The bad news is ...</font></b>
<p><font color="#000000">Software developed for one brand and model of
multi-tier server may not be compatible with another brand and model from
another vendor.&nbsp; Thus, without standardization, the enterprise becomes
a captive customer of a particular multi-tier server vendor.</font>
<p><b><font color="#FF0000">Sun says...</font></b>
<p><i><font color="#000000">"despite these clear benefits, the model limits
developers' ability to build applications from standardized components,
to deploy a single application on a wide variety of platforms, or to readily
scale applications to meet changing business conditions."</font></i>
<p><b><font color="#FF0000">The need for standardization</font></b>
<p><font color="#000000">Sun has recognized and responded to the need for
standardization with J2EE.</font>
<p><font color="#000000">For example, Enterprise JavaBeans(TM) that you
develop to implement your business logic can be deployed on any server
that is fully compliant with the J2EE specifications, regardless of the
vendor, the brand, or the model of the server.</font>
<p><b><font color="#FF0000">EJBs implement business logic</font></b>
<p><font color="#000000">Your bean becomes a reusable software component
that implements a specific set of business logic.&nbsp; Over time, you
can combine that bean with other beans to build larger overall systems.</font>
<p><b><font color="#FF0000">Beans for sale</font></b>
<p><font color="#000000">You might find it attractive to sell the right
to use your beans to someone else.&nbsp; You might also find it attractive
to purchase the right to use beans developed by others rather than to develop
your own.</font>
<p><b><font color="#FF0000">Servlets, JDBC, and JSP</font></b>
<p><font color="#000000">With standardization, Java servlets that you develop
for use on one server can also be deployed on any server that meets the
compatibility specifications.</font>
<p><font color="#000000">The JDBC technology makes it possible for you
to choose from among many different brands and model numbers of back-end
persistent database products.</font>
<p><font color="#000000">The JSP technology makes it possible for you to
create "smart" web pages to support an increasingly sophisticated marketplace
on the Web.</font>
<p><font color="#000000">According to Sun, <i>"The convergence of these
three concepts -- server-side behaviors written in the Java language, connectors
to enable access to existing enterprise systems, and modular, easy to deploy
components -- led us and our industry partners to the J2EE standard."</i></font>
<p><b><font color="#FF0000">So, once again, what is J2EE?</font></b>
<p><font color="#000000">According to Sun, <i>"J2EE is designed to support
applications that implement enterprise services for customers, employees,
suppliers, partners, and others who make demands on or contributions to
the enterprise. Such applications are inherently complex, potentially accessing
data from a variety of sources and distributing applications to a variety
of clients."</i></font>
<p><b><font color="#FF0000">J2EE is broader than EJB</font></b>
<p><font color="#000000">Although the lessons in this series will concentrate
mainly on Enterprise JavaBeans(TM), J2EE is much broader than just EJB.&nbsp;
J2EE combines several components of enterprise data processing, only one
of which is EJB.</font>
<p><b><font color="#FF0000">Sun's J2EE Application Model</font></b>
<p><font color="#000000">Sun's J2EE model is one in which the middle tier
provides the business functions that support the various users.&nbsp; A
dedicated server is often used to house the middle tier.&nbsp; This server
has access to all of the necessary services of the enterprise, including
persistent back-end data storage and the front-end client interface.</font>
<p><b><font color="#FF0000">Now back to the need for standardization</font></b>
<p><font color="#000000">Multi-tier server products have been available
for some time.&nbsp; However, because each product had its own application
model, it has been difficult to hire and train the necessary development
staff because these developers were required to specialize on specific
brands of multi-tier server products.</font>
<p><font color="#000000">In addition, when it has been necessary to upgrade
a multi-tier server for greater capacity, more services, or for other reasons,
it has often been necessary to port the existing application to a different
brand and model of multi-tier server.</font>
<p><font color="#000000">Because the new server may use a different model,
such porting operations have been costly, dangerous, and sometimes simply
not feasible.</font>
<p><b><font color="#FF0000">J2EE provides the needed standardization</font></b>
<p><font color="#000000">By providing a standardized model, J2EE makes
it possible to avoid these problems and to deliver the scalability, accessibility,
and manageability that are needed in a dynamic enterprise business environment.</font>
<p><b><font color="#FF0000">Separating the required efforts</font></b>
<p><font color="#000000">According to sun, the J2EE model partitions the
effort needed to implement a multi-tier system into two parts:</font>
<ul>
<li>
<font color="#000000">The business and presentation logic to be implemented
by the developer.</font></li>

<li>
<font color="#000000">The standard system services provided by the J2EE
platform.</font></li>
</ul>
<font color="#000000">Of the two, the programming of system services is
often the most complex and fraught with problems.&nbsp; Fortunately, this
effort can be delegated to vendor specialists whose livelihood depends
on success in this area.</font>
<p><font color="#000000">The easier part, involving the development of
business and presentation logic, can be done in-house, or subcontracted
out to others with EJB experience.</font>
<center>
<h2>
<a NAME="Summary"></a><font color="#000000">Summary</font></h2></center>
<font color="#000000">I began this lesson with a clarification of the difference
between JavaBean Components(TM) and Enterprise JavaBeans(TM).&nbsp; I defined
enterprise beans, and then launched into a discussion of the Java 2 Platform,
Enterprise Edition (often referred to simply as J2EE).</font>
<p><font color="#000000">I talked a little about multi-tier systems, fat
clients, and thin clients.&nbsp; I gave some examples of why multi-tier
systems with thin clients may be preferable to the use of two-tier systems
with fat clients.</font>
<p><font color="#000000">I gave a preview of the J2EE Reference Implementation,
which will be used extensively in many subsequent lessons.</font>
<p><font color="#000000">I discussed the need for standardization in multi-tier
systems, and described Sun's approach to the needed standardization.</font>
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
I will begin the next lesson with a familiar example, your savings account
and your checking account.&nbsp; I will use that as a jumping-off point
for a brief discussion of transaction processing.
<p>Then I will continue with more background information in preparation
for our encounter with Enterprise JavaBeans(TM).
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="BaldwinBio"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
</body>
</html>
