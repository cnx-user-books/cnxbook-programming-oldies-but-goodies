<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MSOFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Setting Program Attributes<!--endTitle--></H2>
<P>Java Programming, Lecture Notes # 52, Revised 10/06/99. </P>
<P><!-toc file=Java052a.htm words=Preface-><A HREF="#Preface">Preface</A><BR>
<!--endtoc--><!-toc file=Java052b.htm words=Introduction-><A HREF="#Introduction">Introduction</A><BR>
<!--endtoc--><!-toc file=Java052c.htm words=Setting Up and Using Properties-><A HREF="#SettingUpandUsingProperties">Setting Up and Using Properties</A><BR>
<!--endtoc--><!-toc file=Java052d.htm words=Command-Line Arguments-><A HREF="#CommandLineArguments">Command-Line Arguments</A><BR>
<!--endtoc--><!-toc file=Java052e.htm words=Applet Parameters-><A HREF="#AppletParameters">Applet Parameters</A><BR>
<!--endtoc--><!-toc file=Java052f.htm words=Review-><A HREF="#Review">Review</A><!--endtoc--> </P>
<P><!-next=Java052a.htm><!-first=Java052.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Introductory Java Programming</B></U> classes at ACC are responsible for knowing and understanding all of the material in this lesson (except that they are not responsible for detailed information that is specific to C++). </P>
<P>The detailed material on C++ is provided as supplementary material for the benefit of persons already familiar with C++ who are making the transition into Java. </P>
<P><!-prev=Java052.htm-><!-next=Java052b.htm><!-first=Java052.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Introduction"></A>Introduction</H2>
</FONT><P>Sometimes a program needs to be able to read system attributes and read and/or modify program-specific attributes. </P>
<P>We will discuss system attributes in a subsequent lesson. </P>
<P>Java programs can manage program attributes through three mechanisms: </P>

<UL>
<LI>properties </LI>
<LI>application command-line arguments </LI>
<LI>applet parameters. </LI></UL>

<P><!-prev=Java052a.htm-><!-next=Java052c.htm><!-first=Java052.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="SettingUpandUsingProperties"></A>Setting Up and Using Properties</H2>
</FONT><P>The topic of Properties is one of those topics which is not technically challenging, and which is also somewhat boring until, if, and when you need to know about it. But, when you need it, you really need it. </P>
<P>Therefore, this discussion will be brief and generally non-technical. When the day comes that you need to know how to use properties, go to <U>The Java Tutorial</U>, page 227, or some other good reference to obtain the details. </P>
<P>According to <U>The Java Tutorial</U> by Campione and Walrath, </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>"Properties define environmental attributes on a persistent basis. That is, use properties when attribute values need to persist between invocations of a program."</TD>
</TR>
</TABLE>

<P>In other words, if there is information that needs to be saved on a long-term basis and provided to your program each time the program is invoked, then properties may be the answer. Of course, this implies that your program has access to long-term storage, which in turn implies access to disk files. </P>
<P>As you may recall, while Java <U>applications</U> have access to disk files on the host computer where the application is being executed, as of the date of this writing (1/26/97) applets are denied such access. </P>
<P>Therefore, in order for an applet to make use of properties, it would be necessary for the applet to have access to long-term storage on the server from which it was downloaded (also of this writing, applet access to network servers is limited to the server from which it is downloaded). </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="ThePropertiesClass"></A>The Properties Class</H3>
</FONT><P>Properties are represented by objects of the <B>Properties</B> class. These objects can be stored on disk and retrieved when needed by a program which has appropriate disk access. </P>
<P>Properties are stored in the instance variables of the object in <I>key/value</I> pairs. Each individual property is identified by a <B>key</B> value and the value of the individual property is stored in the <B>value</B> member of the pair. </P>
<P>Both the <I>key </I>and the <I>value </I>are strings. For example, <B>os.name</B> is the <I>key </I>for one of Java's default system properties--its value contains the name of the current operating system. </P>
<P>The following program illustrates the use of a <B>Properties</B> object to display the default system properties on my computer at a specific point in history. The output from the program is shown in the boldface comments at the beginning of the program. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Prop01.java Copyright 1997, R.G.Baldwin
Illustrates use of an object of type Property to display 
system properties.

The output from the program was:
<B>-- listing properties --
user.language=en
java.home=C:\JAVA_JDK\JAVA\BIN\..
awt.toolkit=sun.awt.windows.WToolkit
file.encoding.pkg=sun.io
java.version=1.1.3
file.separator=\
line.separator=

user.region=US
file.encoding=8859_1
java.vendor=Sun Microsystems Inc.
user.timezone=CST
user.name=Baldwin
os.arch=x86
os.name=Windows 95
java.vendor.url=http://www.sun.com/
user.dir=C:\BALDWIN\JavaProg\Combined\Java
java.class.path=.;c:\Baldwin\JavaProg;C:\JAVA_JDK\JAV...
java.class.version=45.3
os.version=4.0
path.separator=;
user.home=C:\JAVA_JDK\JAVA\BIN\..
</B>**********************************************************/
import java.util.*;
import java.lang.*;

class <B>Prop01</B>{
  public static void main(String[] args){
    //Instantiate and display a Properties object 
    // containing the system properties
    Properties obj = <B>new Properties</B>(
                                 <B>System.getProperties()</B> );
    <B>obj.list(System.out)</B>;
  }//end main()
}//end class Prop01</PRE></TD>
</TR>
</TABLE>

<P>As you can see, this is essentially a two-line program. The program instantiates a <B>Properties</B> object and stores the default system properties in that object. </P>
<P>The system properties are obtained by calling the <I>class</I> method named <B>getProperties()</B> of the <B>System</B> class. The <B>list()</B> method of the <B>Properties</B> class is then used to display the contents of the object. </P>
<P>Your program will need to use the <B>Properties</B> class to maintain properties which are specific to your Java program. </P>
<P>As in the above program, <B>System</B> properties are maintained by the <B>java.lang.System</B> class. </P>
<P>Once you have created a <B>Properties</B> object for your program, you can save it to an output stream using the <B>save()</B> method. You can later retrieve it using the <B>load()</B> method. </P>
<P><!-prev=Java052b.htm-><!-next=Java052d.htm><!-first=Java052.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="CommandLineArguments"></A>Command-Line Arguments</H2>
</FONT><P><A HREF="#SampleProgramShowingCommandLineArgu">Sample Program Showing Command-Line Arguments</A><BR>
<A HREF="#Conventions">Conventions</A><BR>
<A HREF="#DifferencesRelativetoCandC">Differences Relative to C and C++</A></P>
<P>The second mechanism that Java programs can use to manage program attributes is through the use of <U>command-line arguments</U>. </P>
<P>Command-line arguments are used to define attributes for Java applications on a <U>non-persistent</U> basis. You can use command-line arguments to set one or more attributes for a single invocation of an application. </P>
<P>According to <U>The Java Tutorial</U> by Campione and Walrath: </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>"Note: The Java language supports command line arguments. However, for some systems (such as Macintosh) command line arguments don't make sense. To avoid platform dependencies in your Java applications avoid the use of command line arguments and use properties instead."</TD>
</TR>
</TABLE>

<P>Command-Line Arguments are information entered by the user following the name of the program on the command line. DOS users will be familiar with operating system commands such as </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE><TT>copy fileA fileB</PRE></TT></TD>
</TR>
</TABLE>

<P>In this case, <B>copy</B> is the name of the program to be executed while <B>fileA</B> and <B>fileB</B> are arguments which provide necessary information to the program. </P>
<P>A Java application can accept any number of arguments from the command line. </P>
<P>These arguments make it possible for the user to affect the operation of an application. </P>
<P>When you invoke an application, the runtime system passes the command-line arguments to the application's main method via an array of <B>String</B> objects. Each <B>String</B> object referenced by an element in the array contains one of the command-line arguments. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="SampleProgramShowingCommandLineArgu"></A>Sample Program Showing Command-Line Arguments</H3>
</FONT><P>The following program echoes the command-line arguments to the screen. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File cmdlin01.java Copyright 1997, R.G.Baldwin
This Java application illustrates the use of Java 
command-line arguments.

When this program is run from the command line as follows:

<B>java cmdlin01 My command line arguments

</B>the program produces the following output:

<B>My
command
line
arguments

</B>**********************************************************/
class cmdlin01 { //define the controlling class
  public static void main(String[] args){ //main method
    for(int i=0; i &lt; args.<B>length</B>; i++)
    System.out.println( args[i] );
  }//end main
}//End cmdlin01 class.  </PRE></TD>
</TR>
</TABLE>

<P>As mentioned above, the runtime system passes the arguments to the program as an array of references to <B>String</B> objects. All array objects have a <B>length </B>parameter which contains the number of elements in the array. </P>
<P>This program uses the <B>length</B> parameter of the <B>String </B>array in the conditional clause of a <B>for</B> loop to display each of the strings in succession. </P>
<P>One practical issue that you must face is that all arguments are passed in as strings. Often this is not what is required by the program. For example, the program may need numeric information or boolean information. This generates a requirement to convert the string arguments to numeric information, boolean information, etc. </P>
<P>A previous lesson contained a sample program showing how to use the numeric <I>wrapper </I>classes to convert strings to numeric values. You might want to go back and review that program. </P>
<P>Individual command-line arguments are separated by the space character. Notice that the above application displays each word on a line by itself. Each word in the program is an individual argument. </P>
<P>If you want a single argument to include terms separated by a space, enclose the terms that are to be treated as a group in double quotes. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Conventions"></A>Conventions</H3>
</FONT><P>A whole set of conventions has arisen regarding the format and usage of command-line arguments. On one hand, this is not a technical issue. On the other hand, it gives rise to technical implementation issues because the conventions typically allow the user to enter the arguments in any order, often in any case, etc. </P>
<U><P>The Java Tutorial</U> by Campione and Walrath describes a number of existing conventions and also provides a sample program which can deal with the parsing issues raised by those conventions. We won't discuss that material here. You should simply remember where to find the conventions and the sample program when you need it. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ff00">
<H3 ALIGN="CENTER"><A NAME="DifferencesRelativetoCandC"></A><FONT COLOR="#ff0000">Differences Relative to C and C++</FONT> </H3>
<P>C and C++ programmers should note that the Java method of passing command-line arguments is similar to that used in C and C++, but different in several respects. </P>
<P>The syntax of the <B>main </B>function a C/C++ program is not required to support command-line arguments if they are not being used. </P>
<P>However, the syntax of the <B>main </B>function in a Java program must support command-line arguments even if they are not used. </P>
<P>The system passes two parameters to a C/C++ program in support of command-line arguments: </P>

<UL>
<LI>The number of arguments </LI>
<LI>A pointer to an array of pointers, each of which points to a string. </LI></UL>

<P>However, the system passes only one parameter to a Java program in support of command-line arguments: an array of references to objects of type <B>String</B>. The number of strings in the array can be determined using the <B>length</B> variable of the array object. </P>
<P>In C and C++, the system passes the name of the program being executed in addition to the actual arguments entered on the command line (in some systems, the name of the program is garbage). </P>
<P>However, in Java, only the actual arguments are passed to the program.</TD>
</TR>
</TABLE>

<P><!-prev=Java052c.htm-><!-next=Java052e.htm><!-first=Java052.htm-></P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="AppletParameters"></A>Applet Parameters</H3>
</FONT><P>The third mechanism that Java programs can use to manage program attributes is through the use of applet parameters. </P>
<P>Applet parameters can be used within HTML pages to affect the behavior of an applet much as command-line arguments can be used to affect the behavior of an application. You can use applet parameters to set one or more attributes for a single invocation of an applet. </P>
<P>We will defer discussion of this applet parameters until the lessons which discuss applets in detail. </P>
<P><!-prev=Java052d.htm-><!-next=Java052f.htm><!-first=Java052.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Review"></A>Review</H2>
</FONT><P>Q - Write a program that meets the following specifications. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>
/*File SampProg27.java from lesson 52
Copyright 1997, R.G.Baldwin
Without viewing the solution that follows, write a Java
application that illustrates use of an object of type 
Properties to display system properties.

The output from the program should be similar to the
following, but will differ from one system to the next:
  
-- listing properties --
user.language=en
java.home=C:\JAVA_JDK\JAVA\BIN\..
awt.toolkit=sun.awt.windows.WToolkit
file.encoding.pkg=sun.io
java.version=1.1.1
file.separator=\
line.separator=

user.region=US
file.encoding=8859_1
java.vendor=Sun Microsystems Inc.
user.timezone=CST
user.name=Baldwin
os.arch=x86
os.name=Windows 95
java.vendor.url=http://www.sun.com/
user.dir=C:\BALDWIN\Cis2103J\Fall97\SampProg
java.class.path=;C:\Program Files\Kawa;C:\JAVA_JDK\JA...
java.class.version=45.3
os.version=4.0
path.separator=;
user.home=C:\JAVA_JDK\JAVA\BIN\..
**********************************************************/
import java.util.*;
import java.lang.*;

class SampProg27{
  public static void main(String[] args){
    //Instantiate and display a Properties object 
    // containing the system properties
    Properties obj = 
      new Properties(System.getProperties());
    obj.list(System.out);
  }//end main()
}//end class SampProg27</PRE></TD>
</TR>
</TABLE>

<P>Q - Write a program that meets the following specifications. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>
/*File SampProg28.java from lesson 52
Copyright 1997, R.G.Baldwin
Without viewing the solution that follows, write a Java
application that illustrates the use of Java command-line
arguments.

When this program is run from the command line as follows:

java SampProg28 My command line arguments

the program should produce the following output:

My
command
line
arguments
**********************************************************/
class SampProg28 { //define the controlling class
  public static void main(String[] args){ //define main
    for(int i=0; i &lt; args.length; i++)
    System.out.println( args[i] );
  }//end main
}//End SampProg28 class.  Note no semicolon required

//End Java application</PRE></TD>
</TR>
</TABLE>

<P><!-prev=Java052e.htm-><!-first=Java052.htm-></P>
<P>-end-<!--end--></P></BODY>
</HTML>
