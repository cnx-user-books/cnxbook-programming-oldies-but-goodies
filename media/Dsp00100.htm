<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
   <title>... DSP by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">
<h2>
Digital Signal Processing (DSP) in Java, Periodic Motion and Sinusoids</h2>
<i>Baldwin kicks off a new miniseries on DSP.&nbsp; He discusses periodic motion 
and sinusoids.&nbsp; He introduces time series analysis, sine and cosine 
functions, and frequency decomposition.&nbsp; He discusses composition, and 
provides examples for square and triangular waveforms.</i><p><b>Published:</b>&nbsp; 
December 1, 2002
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>DSP Programming, Notes # 100
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Code</a></li>

<li>
<a href="#Summary">Summary</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This lesson is the first in a series of lessons designed to teach you about
Digital Signal Processing (DSP) using Java.&nbsp; The purpose of the miniseries
is to present the concepts of DSP in a way that can be understood by persons
having no prior DSP experience.&nbsp; However, some experience in Java
programming would be useful.&nbsp; Whenever it is necessary for me to
write a program to illustrate a point, I will write it in Java.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures  while you are reading about
them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials. You will find a consolidated index of my online 
tutorial lessons at <font color="#000000"><a href="http://www.DickBaldwin.com">
WWW.DickBaldwin.com</a>.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<p>Many physical devices <i>(and electronic circuits as well)</i> exhibit a 
characteristic commonly referred to as periodic motion.&nbsp; </p>
<p>I will use the example of a pendulum to introduce the concepts of periodic 
motion, harmonic motion, and sinusoids.</p>
<p>I will introduce you to the concept of a time series.</p>
<p>I will introduce you to sine and cosine functions and the Java methods that 
can be used to calculate their values.</p>
<p>I will introduce you to the concepts of period and frequency for sinusoids.</p>
<p>I will introduce you to the concept of radians versus cycles.</p>
<p>I will introduce you to the concept decomposing a time series into a <i>
(possibly very large)</i> set of sinusoids, each having its own frequency and 
amplitude.&nbsp; We will learn much more about this in a subsequent lesson when 
we discuss frequency spectrum analysis.</p>
<p>I will introduce you to the concept of composition, where any time series can 
be created by adding together the correct <i>(possibly very large)</i> set of 
sinusoids, each having its own frequency and amplitude.</p>
<p>I will show you examples of using composition to create a square waveform and 
a triangular waveform.</p>
<p>I will identify some real-world examples of frequency filtering and real-time 
spectral analysis</p>
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Code</font></h2></center>
<b><font color="#FF0000">Periodic motion</font></b><p>The most difficult decision that I must make 
for this series is to decide where to begin.&nbsp;
I need to begin at a sufficiently elementary level that you will understand
everything that you read.&nbsp; So, before getting into the actual topic
of digital signal processing, I'm going to take you back to some elementary
physics and mathematics concepts and discuss periodic motion.
<p>Many physical devices <i>(and electronic circuits as well)</i> exhibit
a characteristic commonly referred to as periodic motion.&nbsp; This includes
pendulums, acoustic speakers, springs, vocal cords, etc.
<p><b><font color="#FF0000">Motion of a pendulum</font></b>
<p>For example, consider the pendulum on a grandfather clock.&nbsp; Once
you start the pendulum swinging, it will swing for a long time <i>(actually,
the spring in the clock gives it a little kick during each repetition,
so it will continue to swing until the spring runs down).</i><p>The
most important characteristic of the motion of the pendulum is that every
repetition takes almost exactly the same amount of time.&nbsp; In other
words, the period of time during which the pendulum swings from one side
to the other is very constant.&nbsp; That is the source of the term <i>periodic
motion</i>.<i></i>
<p><b><font color="#FF0000">A bag of sand</font></b><i></i>
<p>Even without the spring to help it along, a pendulum swinging in a 
low-friction
environment will swing for a long time.&nbsp; Visualize a pendulum consisting
of a bag of sand tied to the end of a long rope suspended from your ceiling
<i>(sheltered from the wind).&nbsp; </i>Assume that the bag is filled with
colored sand, and that it has a small hole in the bottom.&nbsp; Assume
that you start it swinging in a back-and-forth motion <i>(no circular motion).</i>
<p><b><font color="#FF0000">The sand traces out a pattern</font></b>
<p>As the bag of sand swings back and forth, a little bit of sand will
leak out of the hole and land on the floor below.&nbsp; The sand will trace out 
a line, which is parallel to the direction of motion of the bag of sand.<p>Now assume that you carefully drag a carpet across the floor under the
bag at a uniform rate, perpendicular to the direction of motion of the
bag.&nbsp; This will cause the sand that leaks from the bag to trace out
a zigzag pattern on the carpet very similar to the curved line shown in Figure
1.
<center>
<p><img border="0" src="dsp00100fig01.gif" width="401" height="278">
<p>Figure 1 A sinusoidal function</center>

<p><b><font color="#FF0000">A sinusoidal function</font></b>
<p>The shape of the curve shown in Figure 1 is often referred to as a <i>sinusoidal</i>
function.
<p>In this assumed scenario, the bag is swinging back and forth along the 
vertical axis in Figure 1, and the carpet is being dragged along the horizontal 
axis.&nbsp; The motion of the bag causes the sand to be leaked in a 
back-and-forth zigzag pattern.&nbsp; The motion of the carpet causes that 
pattern to be elongated along the horizontal axis.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#CCFFFF" >
<tr>
<td>
Figure 1 is a plot of the following Java expression:<br>

<font face="Courier New,Courier">

<b><br>
<font size="2">Math.cos(2*pi*x/50)
+ Math.sin(2*pi*x/50)</font></b><br>
<br>
</font>
<b>Math</b> in the above expression is the name of a Java library that provides methods 
for computing sine, cosine, and various other mathematical functions.<p>The 
asterisk (*) in the above expression means multiplication.</p>
<p>The reference to <b>pi</b> in the above expression is a reference to the 
mathematical constant with the same name.</p>
<p>The image in Figure 1 was produced using a Java program named Graph03, which 
I will describe in a future tutorial lesson. 
</td>
</tr>
</table>

<p>
<b><font color="#FF0000">Harmonic motion</font></b> </p>
<p>The kind of motion exhibited by a simple pendulum is often referred
to as periodic motion in general, and simple harmonic motion in particular.<p>
Other devices that exhibit periodic motion may exhibit more complex harmonic 
motion.&nbsp; For example, Figure 2 illustrates a more complex form of harmonic 
motion.<br>
<center>
<p><img border="0" src="dsp00100fig02.gif" width="401" height="321">
<p>Figure 2&nbsp;Complex harmonic motion</center>

<p>As you can see, the positive excursions are greater than the negative 
excursions in Figure 2.&nbsp; In addition, the negative excursions exhibit some 
ripple that is not exhibited by the positive excursions.<br>
&nbsp;<table BORDER COLS=1 WIDTH="400" BGCOLOR="#CCFFFF" >
<tr>
<td>
Figure 2 is a plot of the following Java expression:<br>

<font face="Courier New,Courier">

<b><br>
<font size="2">Math.cos(2*pi*x/50)<br>
+ Math.sin(2*pi*x/50)<br>
+ Math.sin(2*pi*x/25);</font></b></font></td>
</tr>
</table>

<p><b><font color="#FF0000">Sinusoids</font></b><b><font color="#000000"></font></b>
<p><font color="#000000">Figure 1 shows a curve whose shape is commonly referred 
to as a sinusoid.&nbsp; Eliminating the syntax required by the Java programming 
language, the expression used to produce the data plotted in Figure 1 was:</font><p>
<font face="Courier New,Courier" size="2">

<b>f(x) = cos(2*pi*x/50)
+  sin(2*pi*x/50)</b></font><p><font color="#000000">As you can see, this 
function is composed of two components, one cosine component and one sine 
component.</font><p><font color="#FF0000"><b>Separate the cosine and sine 
components</b></font><p><font color="#000000">Figure 3 shows separate plots of the two components
that were added together to produce the plot in Figure 1.</font><font color="#000000"></font>
<center>
<p><font color="#000000">
<img border="0" src="dsp00100fig03.gif" width="401" height="284"></font>
<p><font color="#000000">Figure 3 Separate cosine and sine functions</font></center>

<p><b><font color="#FF0000">Plotting separate sine and cosine functions</font></b><font color="#000000"></font>
<p><font color="#000000">The black curve in Figure 3 shows the cosine function
produced by evaluating and plotting the following equation:</font><font color="#000000"><font size=-1></font></font>
<p><b><tt><font size=-1>f(x) = cos(2*pi*x/50)</font></tt></b>
<p><font color="#000000">The blue curve shows the sine function produced
by evaluating and plotting the following equation:</font><font color="#000000"></font>
<p><b><tt><font size=-1>g(x) = sin(2*pi*x/50)</font></tt></b>
<p><font color="#000000">The point-by-point sum of these two curves would
produce the sinusoidal curve shown in Figure 1.</font><b><font color="#FF0000"></font></b>
<p><b><font color="#FF0000">Time varying functions</font></b><p>Many processes 
produce functions whose values vary over time.&nbsp; For example, the 
temperature in your office is a function that varies continuously with time.<blockquote>
<p> <i>(The temperature in your office is probably not a periodic function because
the temperature probably doesn't repeat its values on any periodic basis).</i>
</blockquote>
<p><font color="#FF0000"><b>Sampled data</b></font><p>If you were to measure and record the temperature in your office once
each minute, you could plot the recorded values in the manner shown in
Figures 1 through 3.&nbsp; You could plot the temperature along the vertical
axis against time <i>(or sample number)</i> along the horizontal axis.
<p>A common name for sampled data of this type is <i>time series.</i>&nbsp; That
name reflects the fact that your data is a recording of the temperature
values for a series of measurements that occur over time.&nbsp; <i>(I will have 
quite a lot more to say about time series in future lessons.)</i><p><b><font color="#FF0000">The period of the sine and cosine functions</font></b>
<p>Figure 4 is very similar to Figure 3.&nbsp; However, there is one major
difference.&nbsp; In Figure 3, the repetition period of the sine and cosine
functions is the same.&nbsp; In other words, the shape of the sine function is the same as the shape of the cosine
function.&nbsp; They are simply shifted relative to one another along the
horizontal axis.
<p>Each of the curves in Figure 3 has the same period, where the period
is the horizontal distance from one peak to the next.
<center>
<p><img border="0" src="dsp00100fig04.gif" width="401" height="299">
<p>Figure 4 Sinusoid with frequency modification</center>

<p><b><font color="#FF0000">Different periods or frequencies</font></b>
<p>The black curve in Figure 4 was produced by evaluating and plotting
the following equation:
<p><b><tt><font size=-1>f(x) = cos(2*pi*x/25)</font></tt></b><p>The blue curve in Figure 4 was produced by evaluating and plotting the
following equation:
<p><b><tt><font size=-1>g(x) = sin(2*pi*x/50</font></tt></b><p>Note that the periods 
<i>(frequencies)</i> for the black cosine curve and the blue sine curve
in Figure 4 are not the same.&nbsp; The period for the black curve is one-half 
that of the blue curve.&nbsp; Stated differently, the frequency of the black 
curve is twice that of the blue curve.<blockquote>
  <p><i>(Frequency and period are reciprocals of one another.&nbsp;
Period is a measure of the time required to complete one cycle of the function.&nbsp;
Frequency is a measure of the number of cycles that are completed in a
given amount of time, usually one second.)</i></p>
</blockquote>
<p><font color="#FF0000"><b>Modified arguments</b></font><p>This difference exists because I modified the argument
in the equation for the cosine function relative to the sine function.&nbsp; In particular, I 
halved the value in the denominator in the cosine argument relative to the 
denominator in the sine argument.<p>This caused the  period
of the cosine function to be only half as long as the  period
for the sine function.&nbsp; Stated differently, this caused the <i>frequency</i>
of the cosine function to be twice the frequency of the sine function.
<p>
<b><font color="#FF0000">Why does pi appear in the arguments?</font></b> </p>
<p>Although it isn't obvious, for any given value of <b>x</b>, the arguments for the sine and cosine functions 
shown above are angular measurements in radians.<p>Most programming languages provide methods  for computing
the sine and the cosine values for an angle given in radians.&nbsp; That
is true for Java, and it is also true for the plotting software used to
produce these graphs.&nbsp; <i>(These graphs were produced using a Java
program.)</i>
<p><font color="#FF0000"><b>Radians versus cycles</b></font><p>One cycle 
constitutes 360 degrees.<blockquote>
  <p><i>(For example, this is the number of degrees that the big hand on a clock 
  must traverse to begin at the 12 and make one complete cycle around the clock 
  face and back to the 12.)</i></blockquote>
<p>Beyond one cycle, the values of the sine and cosine functions 
repeat.<p>An angle of one radian is approximately equal to 57.3 degrees, and is 
exactly equal to 360 degrees divided by 2*pi.&nbsp; Therefore, in order to use a 
method that expects to receive an angle in radians, it is necessary to apply the 
correction factor of 2*pi as shown above to convert from cycles to radians.<p><font color="#FF0000"><b>The 
horizontal scale</b></font><p>The horizontal scale in Figure 4 extends from minus 100 units to plus 100 units with a value of 0 in the center.<p>A tic mark 
appears every ten units.&nbsp; For <b>x</b> equal to 25, the argument for 
the cosine function equals 2*pi radians, or 360 degrees.&nbsp; A close 
examination of Figure 4 shows that the cosine curve goes through one full cycle 
between an <b>x</b> value of 0 and an<b> x</b> value of<b> </b>25.&nbsp; Beyond 
that, the cosine function simply repeats.<p>Similarly, for <b>x</b> equal to 50, 
the argument for the sine function equals 2*pi radians, or 360 degrees.&nbsp; 
Again, a close examination of Figure 4 shows that the sine curve goes through 
one full cycle between an <b>x</b> value of 0 and an<b> x</b> value of<b> </b>
50.&nbsp; Beyond that, the sine function simply repeats.<p>
<font color="#FF0000"><b>The argument to the sine and cosine functions</b></font><p>
If you think of <b>x</b> as being a measurement of time in seconds, and <b>1/n</b> 
being a measurement of frequency in cycles/second, the arguments to the sine and 
cosine functions can be viewed as:<p><b><font size="2">2*pi(radians/cycle)*(x 
sec)*(1/n)( cycle/sec)</font></b><p>If you cancel out like terms, this reduces 
to:<p><b><font size="2">2*pi(radians)*(x )*(1/n )</font></b><p>Thus, with a 
fixed value of <b>n</b>, for each value of <b>x</b>, the argument represents an 
angle in radians, which is what is required for use with the functions of the 
Java Math library.<p><b><font color="#FF0000">Where does sin(arg) equal zero?</font></b>
<p>The value of the sine of an angle goes through zero at every integer
multiple of pi radians.&nbsp; This explanation will probably make
more sense if you refer back to Figure 3.<p>The curve in Figure 3 was calculated 
and plotted for n equal to 50.&nbsp; The sine curve has 
a zero crossing for every value of <b>x</b> such that <b>x</b> is a multiple of 
n/2, or 25.<p><font color="#FF0000"><b>Where are the peaks in the cosine 
function?</b></font><p>Similarly, the peaks in the cosine curve in Figure 3 occur for every value of <b>x</b> 
such that <b>x</b> is a multiple of n/2, or 25.<p><b><font color="#FF0000">Composition and decomposition</font></b>
<p>In theory, it is possible to decompose any time series into a number
<i>(quite possibly a very large number)</i> of sine and cosine functions
each having its own amplitude and frequency.&nbsp; <i>(In a future lesson,
we will learn how this is possible using a Fourier series or a Fourier
transform.)</i>
<p>Conversely, it is theoretically possible to create any time series by
adding together just the right combination of sine and cosine functions,
each having its own amplitude and frequency.
<p><font color="#FF0000"><b>An approximate square</b></font><b><font color="#FF0000">
waveform</font></b>
<p>As an example of composition, suppose that I need to create a time
series that approximates a square waveform, as shown at the 
bottom of Figure 6.
<p align="center">
<img border="0" src="dsp00100fig05.gif" width="401" height="431"><p align="center">
Figure 5 An approximate square waveform<p align="center">
<img border="0" src="dsp00100fig06.gif" width="401" height="431"><p align="center">
Figure 6 An improved approximate square waveform<p>I can create such a waveform 
by adding together the correct combination of sinusoids, each having its own 
frequency and amplitude.<p><font color="#FF0000"><b>Successive approximations</b></font><p>
The ten curves plotted in Figures 5 and 6 show successive approximations to the 
creation of the desired square waveform.&nbsp; The bottom curve in Figure 6 is a 
plot of the following sinusoidal expression containing the algebraic sum of ten 
sinusoidal terms.<p><b><font face="Courier New" size="2">cos(2*pi*x/50)<br>
- cos(2*pi*x*3/50)/3<br>
+ cos(2*pi*x*5/50)/5<br>
- cos(2*pi*x*7/50)/7<br>
+ cos(2*pi*x*9/50)/9<br>
- cos(2*pi*x*11/50)/11<br>
+ cos(2*pi*x*13/50)/13<br>
- cos(2*pi*x*15/50)/15<br>
+ cos(2*pi*x*17/50)/17<br>
- cos(2*pi*x*19/50)/19</font></b><p><font color="#FF0000"><b>Each curve contains 
more sinusoidal terms</b></font><p>The top curve in Figure 5 is a plot of only 
the first sinusoidal term shown above.&nbsp; It is a pure cosine curve.<p>Each 
successive plot, moving down the page in Figures 5 and 6, adds another term to 
the expression being plotted, until all ten terms are included in the bottom 
curve in Figure 6.<p><font color="#FF0000"><b>Reasonably good approximation</b></font><p>
As you can see, the bottom curve in Figure 6 is a reasonably good approximation 
to a square wave, but it is not perfect.<blockquote>
  <p><i>(A perfect square wave would have square corners, a flat top, no ripple, 
  and perfectly vertical sides.)</i></blockquote>
<p><font color="#FF0000"><b>Each term improves the approximation</b></font><p>If 
you start at the top of Figure 5 and examine the successive curves, you will see 
that the approximation to a square wave improves as each new sinusoidal term is 
added.<p>In theory, it would be possible to produce a perfect square wave in 
this fashion.&nbsp; Unfortunately, an infinite number of sinusoidal terms would 
be required to achieve the square corners, flat top, no ripples, and vertical 
sides of the perfect square wave.&nbsp; In practice, we normally have to make do 
with something less than perfect.<p><font color="#FF0000"><b>The first five 
sinusoidal terms</b></font><p>Figure 7 shows individual plots of the first five 
sinusoidal terms required to approximate the square wave.<p align="center">
<img border="0" src="dsp00100fig07.gif" width="401" height="431"><p align="center">
Figure 7 First five sinusoidal components of a square waveform<p>Each of the 
terms in the previous expression has an associated algebraic sign.<blockquote>
  <p><i>(You may have noticed that the sign applied to every other term in the 
  expression is negative, causing every other term to plot upside down in Figure 
  7.)</i></blockquote>
<p>The bottom curve in Figure 5 is the point-by-point sum of the five curves 
shown in Figure 7.<p><font color="#FF0000"><b>A side-by-side comparison</b></font><p>
If you view Figure 7 side-by-side with Figure 5, you should be able to see how 
the sinusoidal terms add and subtract to produce the desired result.&nbsp; For 
example, the subtraction of the second sinusoidal term from the first sinusoidal 
term knocks the peaks off the first term and produces a noticeable shift from a 
cosine towards a square wave.<p><font color="#FF0000"><b>An approximate </b></font><b><font color="#FF0000">
triangular waveform</font></b>
<p>As another example of composition, suppose that I need to create a time
series that approximates a triangular waveform, as shown at the 
bottom of Figure 8.
<p align="center">
<img border="0" src="dsp00100fig08.gif" width="401" height="431">
<p align="center">Figure 8 A triangular waveform
<p>I can create such a waveform by adding together the right combination
of sinusoids, each having its own amplitude and frequency.<p>
<font color="#FF0000"><b>Five sinusoids</b></font><p>The time series 
at the bottom of Figure 8 was created by adding together five cosine
waves, each having the amplitude and frequency values shown in the following
equation:
<p><b><tt><font size=-1>f(x) = cos(2*pi*x/50)<br>
+ cos(2*pi*x*3/50)/9<br>
+ cos(2*pi*x*5/50)/25<br>
+ cos(2*pi*x*7/50)/49<br>
+ cos(2*pi*x*9/50)/81</font></tt></b><p><font color="#FF0000"><b>Intermediate waveforms</b></font><p>The top waveform 
in Figure 8 is a plot of the cosine curve created from the sinusoidal first term in the 
expression shown above.<p>The second waveform from the top in Figure 8 is the sum 
of the first two terms in the above expression.<p>The third waveform is the sum of 
the first three terms.&nbsp; By this point, the plot has begun to resemble a 
triangular waveform in a significant way.<p>The fourth waveform is the sum of the first four 
terms, and the fifth waveform is the sum of all five terms.<p>By examining the 
waveforms from top to bottom in Figure 8, you can see how the addition of each 
successive term causes the resulting waveform to more closely approximate the 
desired triangular shape.<p><font color="#FF0000"><b>Good result with only five 
terms</b></font><p>Figure 8 shows that only five terms are required to produce a 
fairly good approximation to a triangular waveform.<p>A comparison of Figure 8 
with Figure 5 shows that five terms are much more effective in approximating a 
triangular waveform than were the five terms in approximating a square waveform.&nbsp; 
The triangular waveform is easier to approximate because it doesn't have a flat 
top and vertical sides.<p>Other waveforms exhibit greater or lesser degrees of 
difficulty in creation through composition.<p><b><font color="#FF0000">The 
individual terms</font></b>
<p>I'm not going to attempt to plot the individual sinusoidal terms in the 
triangular waveform.&nbsp; After the first couple of terms, they have such a 
small amplitude that it is difficult to see them.<p><b><font color="#FF0000">So what, you say?</font></b>
<p>By now, you are may be saying <i>"So what?"&nbsp;</i> What in the world does
DSP have to do with bags of sand with holes in the bottom?&nbsp; The answer
is everything.<p>Almost everything that we will discuss in the area
of DSP is based on the premise that every time series, whether generated
by sand leaking from a bag onto a moving carpet, or acoustic waves generated
by your favorite rock band, can be decomposed into a large <i>(possibly
infinite) </i>number of sine and cosine waves, each having its own amplitude
and frequency.
<p><b><font color="#FF0000">A practical example</font></b>
<p>You have probably seen, the kind of stereo music component commonly
known as an equalizer.&nbsp; An equalizer typically has about a dozen adjacent
slider switches that can be moved up and down to cause the music that you
hear to be more pleasing.&nbsp; This is a crude form of frequency filter.
<p>Many equalizers also have a set of vertical display lights that dance
up and down as your music is playing.&nbsp; This is a crude form of a frequency
spectrum analyzer.
<p><b><font color="#FF0000">The frequency filters</font></b>
<p>The purpose of each slider  is to attenuate or amplify a band
of adjacent frequencies <i>(sine and cosine components, each having its
own amplitude and frequency),</i> before they make their way to the output
amplifier and impinge on the system speakers.&nbsp; Thus, while you don't
have the ability to attenuate or amplify each individual sine and cosine
component, you do have the ability to attenuate or amplify them in groups.
<p>In subsequent lessons, we will learn how to use digital filters to attenuate
or amplify the sine and cosine waves that make up a time series.
<p><b><font color="#FF0000">The spectrum analyzer</font></b>
<p>At an instant in time, the height of one of the vertical display lights
is an indication of the combined power of the sine and cosine waves contained in a 
small band of adjacent frequencies.<p>In subsequent lessons, you will learn how to use Fourier analysis to
perform spectral analysis on time series.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
Many physical devices <i>(and electronic circuits as well)</i> exhibit a 
characteristic commonly referred to as periodic motion.&nbsp;

<p>I used the example of a pendulum to introduce the concepts of periodic 
motion, harmonic motion, and sinusoids.</p>
<p>I introduced you to the concept of a time series.</p>
<p>I introduced you to sine and cosine functions and the Java methods that can 
be used to calculate their values.</p>
<p>I told you that almost everything we will discuss in this series on DSP is 
based on the premise that every time series can be decomposed into a large number of 
sinusoids, each having its own amplitude
and frequency. </p>
<p>I introduced you to the concepts of period and frequency for sinusoids.</p>
<p>I introduced you to the concept of radians versus cycles.</p>
<p>I introduced you to the concept decomposing a time series into a <i>(possibly 
very large)</i> set of sinusoids, each having its own frequency and amplitude.&nbsp; 
I told you that we will learn more about this later when we discuss frequency 
spectrum analysis.</p>
<p>I introduced you to the concept of composition, where any time series can be 
created by adding together the correct <i>(possibly very large)</i> set of 
sinusoids, each having its own frequency and amplitude.</p>
<p>I showed you examples of using composition to create a square waveform and a 
triangular waveform.</p>
<p>I identified the frequency equalizer in your audio system as an example of 
frequency filtering.</p>
<p>I identified the frequency display that may appear on your frequency 
equalizer as an example of real-time spectrum analysis</p>
<hr size=3 width="100%" align=center>
<p>Copyright 2002, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin@DickBaldwin.com">Richard Baldwin</a></b><i>
is a college professor (at Austin Community College in Austin, TX) and
private consultant whose primary focus is a combination of Java, C#, and
XML. In addition to the many platform and/or language independent benefits
of Java and C# applications, he believes that a combination of Java, C#,
and XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects and he
frequently provides onsite training at the high-tech companies located
in and around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://DickBaldwin.com">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring programmers.
He has also published articles in JavaPro magazine.</i>
<p><i>In addition to his programming expertise, Richard has many years
of practical experience in Digital Signal Processing (DSP).&nbsp; His first
job after he earned his Bachelor's degree was doing DSP in the Seismic
Research Department of Texas Instruments.&nbsp; (TI is still a world leader
in DSP.)&nbsp; In the following years, he applied his programming and DSP
expertise to other interesting areas including sonar and underwater acoustics.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin@DickBaldwin.com">baldwin@DickBaldwin.com</a></i><p>-end-
</body>
</html>