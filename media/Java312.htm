<html>

<head>
<meta name=Generator content="Microsoft Office HTML Filter 2.0">
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=Originator content="Microsoft Word 9">
<title>... in Java by Richard G Baldwin</title>
<style>
<!--
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{
	margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0in;
	margin-left:0in;
	text-align:center;
	font-size:18.0pt;
	font-family:"Times New Roman";
	color:red;
	font-weight:bold;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=author content="richard g. baldwin">
</head>

<body lang=EN-US link=blue vlink=blue>
<!--start-->

<div class=Section1>

<p>March 6, 2000</p>

<h2><!--title--><span style='color:black'>Java 2D Graphics, Solid Color Fill<!--endtitle--></span></h2>

<p class=MsoNormal>Java Programming, Lecture Notes # 312 </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><i>by Richard G. Baldwin </i></p>

<p class=MsoNormal><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i></p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><a
     href="#_Introduction">Introduction</a></li>
 <li class=MsoNormal><a
     href="#_Methods_of_the">Methods of the Graphics2D Class</a></li>
 <li class=MsoNormal><a
     href="#_The_Paint_Interface">The Paint Interface</a></li>
 <li class=MsoNormal><a
     href="#_The_PaintContext_Interface">The PaintContext Interface</a></li>
 <li class=MsoNormal><a
     href="#_The_Good_News">The Good News and the Bad News</a></li>
 <li class=MsoNormal><a
     href="#_The_Three_Paint">The Three Paint Classes</a></li>
 <li class=MsoNormal><a
     href="#_Summary">Summary</a></li>
 <li class=MsoNormal><a
     href="#_Complete_Program_Listing">Complete Program Listings</a></li>
</ul>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=3 width="100%" align=center>

</div>


<h2><a name="_Introduction"></a>Introduction</h2>

<p class=MsoNormal>In an earlier lesson, I explained that the <b>Graphics2D</b>
class extends the <b>Graphics</b> class to provide more sophisticated control
over geometry, coordinate transformations, color management, and text layout.
Beginning with JDK 1.2, <b>Graphics2D </b>is the fundamental class for
rendering two-dimensional shapes, text and images.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I also explained that without understanding the behavior of
other classes and interfaces such as <b>Shape</b>, <b>AffineTransform</b>, <b>GraphicsConfiguration</b>,
<b>PathIterator</b>, and <b>Stroke</b>, it is not possible to fully understand
the inner workings of the <b>Graphics2D</b> class.&nbsp; </p>

<h3><span style='color:red'>What has been covered previously?</span></h3>

<p class=MsoNormal>Earlier lessons have explained a number of Java 2D concepts,
including <b>Shape</b>, <b>AffineTransform</b>, and <b>PathIterator</b>.&nbsp;
I am saving <b>GraphicsConfiguration</b> until later because it is fairly
complicated.&nbsp; Before, I can explain the <b>Stroke </b>class, I need to
explain how to fill a <b>Shape</b>.&nbsp; The purpose of this lesson, and the
next couple of lessons is to help you to understand how the <i>fill</i> process
works in Java 2D.</p>

<h3><span style='color:red'>Lessons build on one another</span></h3>

<p class=MsoNormal>As you can see, each of the lessons in this series on Java
2D builds on the knowledge that you have gained by studying previous
lessons.&nbsp; For that reason, I hope that you are taking the time to study
the lessons in sequence.</p>

<h2><a name="_Methods_of_the"></a>Methods of the Graphics2D Class</h2>

<p class=MsoNormal>The <b>Graphics2D</b> class has dozens of methods.&nbsp; In
this lesson, I will be primarily concerned with the following three methods:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>setPaint(Paint
     paint)</li>
 <li class=MsoNormal>fill(Shape
     s)</li>
 <li class=MsoNormal>draw(Shape
     s)</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I have used the <b>draw()</b> method in numerous previous
lessons, so it isn&#8217;t new to this lesson and won&#8217;t merit much discussion.&nbsp;
However, <b>setPaint()</b> and <b>fill()</b> are new to this lesson.&nbsp; I
will discuss them both in detail</p>

<h3><span style='color:red'>The setPaint(Paint paint) method</span></h3>

<p class=MsoNormal>Here is part of what Sun has to say about the <b>setPaint()</b>
method:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>Sets the <b>Paint</b>
  attribute for the <b>Graphics2D</b> context.&nbsp; Calling this method with a
  null <b>Paint</b> object does not have any effect on the current <b>Paint</b>
  attribute of this <b>Graphics2D</b>.</p>
  <p class=MsoNormal style='text-autospace:none'>&nbsp;</p>
  <p class=MsoNormal style='text-autospace:none'>Parameters:</p>
  <p class=MsoNormal style='text-autospace:none'>paint - the <b>Paint</b>
  object to be used to generate color during the&nbsp; rendering process, or
  null</p>
  </td>
 </tr>
</table>

<p class=MsoNormal><a name="_What_is_a_1"></a>&nbsp;</p>

<p class=MsoNormal>The terminology here can be a little confusing, especially
with respect to the use of the word <i>paint.</i></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>First, the class named <b>Graphics2D</b> has a property
named <b>paint</b>.&nbsp; The method <b>setPaint()</b> is a typical <i>setter</i>
method used to set the <b>paint</b> property.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The parameter that is passed to this method must be a
reference to an object of a class that implements the interface named <b>Paint</b>.</p>

<h2><a name="_The_Paint_Interface"></a>The Paint Interface</h2>

<p class=MsoNormal>Here is what Sun has to say about the <b>Paint</b>
interface.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;This <b>Paint</b> interface
  defines how color patterns can be generated for <b>Graphics2D</b> operations.
  A class implementing the <b>Paint</b> interface is added to the <b>Graphics2D</b>
  context in order to define the color pattern used by the <b>draw</b> and <b>fill</b>
  methods.&#8221;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This interface declares a single method named <b>createContext()</b>
that returns a reference to an object of a class that implements the <b>PaintContext</b>
interface.&nbsp; (I tell my Java students at least four or five times during
each semester that if they don&#8217;t understand the Java interface, they really
don&#8217;t understand Java.)</p>

<h2><a name="_The_PaintContext_Interface"></a>The PaintContext Interface</h2>

<p class=MsoNormal>Here is what Sun has to say about the <b>PaintContext</b>
interface.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>The <b>PaintContext</b> interface
  defines the encapsulated and optimized environment to generate color patterns
  in device space for <b>fill</b> or <b>stroke</b> operations on a <b>Graphics2D</b>.
  The <b>PaintContext</b> provides the necessary colors for <b>Graphics2D</b>
  operations in the form of a <b>Raster</b> associated with a <b>ColorModel</b>.
  The <b>PaintContext</b> maintains state for a particular paint operation. In
  a multi-threaded environment, several contexts can exist simultaneously for a
  single <b>Paint</b> object.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Obviously, I could continue tracking the path through the
hierarchy, but that won&#8217;t be necessary.&nbsp; </p>

<h2><a name="_The_Good_News"></a>The Good News and the Bad News</h2>

<p class=MsoNormal>The bad news is that this can all be very complicated.&nbsp;
The good news is that unless you intend to define a class that implements the <b>Paint</b>
interface, you don&#8217;t need to be concerned about many of these details.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>(See a later reference to Knudsen&#8217;s book for an example of
how to define your own class to implement the <b>Paint</b> interface.)</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>All you really need to know is the following:</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'>To set the <b>paint</b> property of
a <b>Graphics2D </b>object, all that you must do is invoke the <b>setPaint()</b>
method on that object, passing a reference to an object instantiated from a
class that implements the <b>Paint</b> interface as a parameter.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Fortunately, there are several useful classes in the 2D API
that implement the <b>Paint</b> interface so you may not need to define your
own class that implements <b>Paint</b>.</p>

<h3><span style='color:red'>The fill(Shape s) method</span></h3>

<p class=MsoNormal>Why would you want to set the <b>paint</b> property of the <b>Graphics2D</b>
object in the first place?&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Because, when you invoke the <b>fill()</b> method, passing a
reference to a <b>Shape</b> object to that method, the <b>Shape</b> object will
be filled using the <b>Paint</b> object that was previously established by
invoking the <b>setPaint()</b> method.</p>

<h3><span style='color:red'>The bottom line</span></h3>

<p class=MsoNormal>The bottom line is, if you want to <i>fill</i> a <b>Shape</b>
object before you draw it, you accomplish this with the following two steps:</p>

<ol style='margin-top:0in' start=1 type=1>
 <li class=MsoNormal>Invoke
     <b>setPaint()</b> on the <b>Graphics2D</b> object, passing a reference to
     an object of a class that implements the <b>Paint</b> interface as a
     parameter.</li>
 <li class=MsoNormal>Invoke
     the <b>fill()</b> method on the <b>Graphics2D</b> object, passing a
     reference to the <b>Shape</b> object that you want to fill as a parameter.</li>
</ol>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>As I mentioned in an earlier lesson, in his book, <u>Java
Foundation Classes in a Nutshell</u>, David Flanagan tells us that the Java 2D
definition of a <b>Shape</b> does not require the shape to enclose an
area.&nbsp; In other words, a <b>Shape</b> object can represent an open
curve.&nbsp; According to Flanagan, if an open curve is passed to a method that
requires a closed curve (such as <b>fill()</b>), the curve is automatically
closed by connecting its end points with a straight line.</p>

<h2><a name="_The_Three_Paint"></a>The Three Paint Classes</h2>

<p class=MsoNormal>The Java2D API provides at least three classes that
implement the <b>Paint</b> interface:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><b>Color</b></li>
 <li class=MsoNormal><b>GradientPaint</b></li>
 <li class=MsoNormal><b>TexturePaint</b></li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>(As of JDK 1.2.2, this is apparently all of the classes in
the API that implement <b>Paint</b>, but you can always define your own.)</p>

<h3><span style='color:red'>The Color class</span></h3>

<p class=MsoNormal>The <b>Color</b> class can be used to fill a <b>Shape</b>
object with a solid color.&nbsp; This will be the topic of the remainder of
this lesson.</p>

<h3><span style='color:red'>The GradientPaint class</span></h3>

<p class=MsoNormal>The <b>GradientPaint</b> class can be used to fill a <b>Shape</b>
with a color gradient.&nbsp; The gradient progresses from one specified color
at one point to a different specified color at a different point.&nbsp; The two
colors can be stabilized beyond the two points <i>(acyclic)</i> or the gradient
can be caused to repeat in a cyclic fashion beyond the two points <i>(cyclic)</i>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In his book entitled <u>Java 2D Graphics</u>, Jonathan
Knudsen provides a sample program that produces a radial color gradient.&nbsp;
This is a good example program to take a look at if you need to define your own
class that implements the <b>Paint</b> interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Use of the <b>GradientPaint</b> class will be the topic of a
subsequent lesson.</p>

<h3><span style='color:red'>The TexturePaint class</span></h3>

<p class=MsoNormal>The <b>TexturePaint</b> class can be used to fill a <b>Shape</b>
with a tiled version of a <b>BufferedImage</b> object.&nbsp; This will also be
the topic of a subsequent lesson.</p>

<h2><a name="_Geometric_Objects_Implement"></a><a name="_Sample_Programs"></a><a
name="_Sample_Program"></a><a name="_Sample_Program_GeneralPath01"></a>Sample
Program</h2>

<p class=MsoNormal>The name of this program is <b>PaintColor01</b>.&nbsp; It
illustrates the <span style='color:black'>use of a <b>Paint</b> object to fill
a Shape with a solid color.&nbsp; In this case, the <b>Paint</b> object is an
instance of the <b>Color</b> class, which implements the interface named <b>Paint</b>.</span></p>

<h3><span style='color:red'>The GUI is a Frame object</span></h3>

<p class=MsoNormal style='text-autospace:none'><span style='color:black'>The
program draws a four-inch by four-inch <b>Frame</b> on the screen.&nbsp; It
translates the origin to the center of the <b>Frame</b>.&nbsp; Then it draws a
pair of X and Y-axes centered on the new origin.&nbsp; So far, this is very
similar to the sample programs that I have explained in previous lessons.</span></p>

<h3><span style='color:red'>A circle in each quadrant</span></h3>

<p class=MsoNormal style='text-autospace:none'><span style='color:black'>The
program then draws one two-inch diameter circle in each quadrant.&nbsp; It
fills the upper left circle with solid red, the upper right circle with solid
green, the lower left circle with solid blue, and the lower right circle with
solid yellow</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='color:black'>&nbsp;</span></p>

<p class=MsoNormal><span style='color:black'>The program was tested using JDK
1.2.2 under WinNT Workstation 4.0</span></p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>This discussion of dimensions in inches on the screen
  depends on the method named <b>getScreenResolution()</b> returning the
  correct value.&nbsp; However, the <b>getScreenResolution() </b>method always
  seems to return 120 on my computer regardless of the actual screen resolution
  settings.</p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>Will discuss in fragments</span></h3>

<p class=MsoNormal>As is often the case, I will discuss this program in
fragments.&nbsp; The controlling class and the constructor for the GUI class
are essentially the same as you have seen in several previous lessons, so, I
won&#8217;t bore you by repeating that discussion here.&nbsp; You can view that
material in the complete listing of the program at the end of the lesson.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>All of the interesting action takes place in the overridden <b>paint()</b>
method, so I will begin the discussion there.</p>

<h3><span style='color:red'>Overridden paint() method</span></h3>

<p class=MsoNormal>The beginning portions of the overridden <b>paint()</b>
method should be familiar to you by now as well.&nbsp; So, I am simply going to
let the comments in <a href="Java312-fig01.htm">Figure 1</a> speak for
themselves.&nbsp;</p>

<h3><span style='color:red'>The interesting part</span></h3>

<p class=MsoNormal>That brings us to the interesting part, which, if you
understand the previous discussion, you will find to be very straightforward.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The code in the next four fragments draws a circle in the
upper left quadrant of the <b>Frame</b> and fills the circle with the color
red.</p>

<h3><span style='color:red'>An object that implements the Shape interface</span></h3>

<p class=MsoNormal>The code in <a href="Java312-fig02.htm">Figure 2</a>
instantiates an object of the <b>Ellipse2D.Double</b> class.&nbsp; This is one
of several classes in the API that can be used to produce geometric objects
that implement the <b>Shape</b> interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Recall that the parameters required for the constructor of
this class specify a bounding rectangle for the ellipse.&nbsp; If that bounding
rectangle describes a square, the ellipse turns into a circle.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Assuming that the variable <b>ds</b> contains the actual
screen resolution, the parameters used in this fragment describe a bounding
rectangle (square) that is two inches one each side, and whose upper left-hand
corner is positioned two inches above and two inches to the left of the
origin.&nbsp; This will produce a circle with a two-inch diameter, located in
the upper left-hand quadrant of the <b>Frame.</b>&nbsp;</p>

<h3><span style='color:red'>An object that implements the Paint interface</span></h3>

<p class=MsoNormal><a href="Java312-fig03.htm">Figure 3</a> instantiates a new
object of the class <b>Color</b>, initialized to the color red, and passes it
to the <b>setPaint()</b> method of the <b>Graphics2D</b> object.&nbsp; (Recall
that the <b>Color</b> class implements the <b>Paint</b> interface, so this
satisfies the type requirements of the parameter to the <b>setPaint()</b>
method.)&nbsp;</p>

<h3><span style='color:red'>Filling the upper left-hand circle</span></h3>

<p class=MsoNormal><a href="Java312-fig04.htm">Figure 4</a> invokes the <b>fill()</b>
method on the <b>Graphics2D</b> object, passing the circle in the upper
left-hand quadrant as a parameter.&nbsp; This causes the circle to be filled
using the <b>Color</b> object discussed in the previous fragment.&nbsp; This,
in turn, causes the circle to be filled with the color red&nbsp;</p>

<h3><span style='color:red'>It&#8217;s time to render the circle</span></h3>

<p class=MsoNormal>At this point, the red circle has not yet been rendered onto
the screen.&nbsp; That happens in the <a href="Java312-fig05.htm">Figure 5</a>,
which invokes the <b>draw()</b> method on the <b>Graphics2D</b> object, passing
a reference to the red circle as a parameter.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When the circle is rendered, those attributes that have
previously been established in the <b>Graphics2D</b> object (such as scaling,
translation, rotation, etc.) will be used to render the circle.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Just for the record, recall that the <b>draw()</b> method requires
a parameter that is a reference to an object of a class that implements the <b>Shape</b>
interface.&nbsp; The <b>Ellipse2D.Double</b> class, of which this circle is an
instance, is one of the geometric classes in the API that implements the <b>Shape</b>
interface.&nbsp;</p>

<h3><span style='color:red'>It&#8217;s all downhill from here</span></h3>

<p class=MsoNormal>Once you understand all of the above, the remainder of the
program, shown in <a href="Java312-fig06.htm">Figure 6</a>, is completely
straightforward.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This remaining code simply creates, fills, and draws three
more circles in the remaining three quadrants of the <b>Frame</b>.&nbsp; Except
for variable names and parameter values, this code is the same as that shown in
the previous several fragments, so I will let the comments speak for
themselves.</p>

<p class=MsoNormal>&nbsp;&nbsp;</p>

<p class=MsoNormal>You can view a complete listing of the program at the end of
the lesson.</p>

<h2><a name="_Summary"></a>Summary</h2>

<p class=MsoNormal>I have explained the basics of how <i>fill</i> is handled in
Java 2D, and have shown you how to accomplish solid fill.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I will show you how to fill a <b>Shape</b> object with a
color gradient, or with a <b>BufferedImage</b> object in subsequent lessons.</p>

<h2><a name="_Complete_Program_Listing"></a><a name="_Complete_Program_Listings"></a>Complete
Program Listing</h2>

<p>A complete listing of the program is provided in <a href="Java312-fig07.htm">Figure
7</a>.</p>

<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;</p>

<p><b>About the author</b> </p>

<p><b><i><a href="mailto:baldwin@austin.cc.tx.us">Richard Baldwin</a></i></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and XML
will become the primary driving force in the delivery of structured information
on the Web.</i> </p>

<p><i>Richard has participated in numerous consulting projects involving Java,
XML, or a combination of the two.&nbsp; He frequently provides onsite Java
and/or XML training at the high-tech companies located in and around Austin,
Texas.&nbsp; He is the author of Baldwin's Java Programming <a
href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java Pro
magazine.</i> </p>

<p><i>Richard holds an MSEE degree from Southern Methodist University and has
many years of experience in the application of computer technology to
real-world problems.</i> </p>

<p><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i></p>

<p>-end-<!--end--></p>

</div>

</body>

</html>
