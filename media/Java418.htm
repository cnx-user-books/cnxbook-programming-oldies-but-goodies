<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2>Processing Image Pixels, Creating Visible Watermarks in Java</h2>
<i>Learn how to write a Java program that can be used to add five different 
types of visible watermarks to an image.</i>
<p><b>Published:</b>&nbsp; December 19, 2006<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 418</p>
<ul>
  <li> <a href="#Preface">Preface</a></li>
  <li> <a href="#Preview">Preview</a></li>
  <li> <a href="#Discussion%20and%20Sample%20Programs">Discussion and
Sample Code</a></li>
  <li> <a href="#Run%20the%20program">Run the Program</a></li>
  <li> <a href="#Summary">Summary</a></li>
  <li> <a href="#Whats%20Next">What's Next?</a></li>
	<li> <a href="#References">References</a></li>
  <li> <a href="#Complete%20Program%20Listings">Complete Program
Listing</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p> <font color="#FF0000"><b>Digital watermarking</b></font></p>
<p> Paraphrasing <a href="http://en.wikipedia.org/wiki/Digital_watermarking">
Wikipedia</a>, <b>digital watermarking</b> is a technique that allows an 
individual to add copyright notices or other verification messages to digital 
audio, video, or image signals and documents.&nbsp; Digital watermarks may be 
visible, hidden, or a combination of the two.&nbsp; </p>
<p> <font color="#FF0000"><b>Visible watermarks</b></font></p>
<p> This lesson will deal with visible watermarks, as shown in 
the bottom image of 
<a name="Figure_1" href="#Figure_1">Figure 1</a>.</p>






<p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java418a01.jpg" width="164" height="327"><br></pre>
      <pre><b><a href="#Figure_1">Figure 1</a>  Visible
Watermarks.</b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The bottom image in <a href="#Figure_1">Figure 1</a> is a modified version of the original image 
shown at the top.&nbsp; The bottom image was modified to contain five different 
kinds of visible watermarks in the four corners and at the center of the image.</p>
<p><font color="#FF0000"><b>A program to add visible watermarks</b></font></p>
<p>In this lesson, I will present and explain a program named <b>ImgMod36</b>, 
which was used to produce the images shown in <a href="#Figure_1">Figure 1</a>.&nbsp; 
You will learn how to write a Java program that can be used to add five 
different types of visible watermarks to an image.</p>
<p><font color="#FF0000"><b>Hidden watermarks</b></font></p>

<p> A future lesson will deal with 
hidden watermarks similar to those shown in the center image of the right panel 
of <a name="Figure_2" href="#Figure_2">Figure 2</a>.</p>


<p> <table border="1" bgcolor="#ccffff">
	<tr>
		<td><img border="0" src="java418a02.jpg" width="164" height="464"></td>

		<td><img border="0" src="java418a03.jpg" width="164" height="464"></td>
	</tr>
	<tr>
	<td colspan="2" >
<pre><b><a href="#Figure_2">Figure 2</a>  Hidden Watermarks.</b></pre></td>
	</tr>
</table></p>


<p> Briefly, the images in the left panel of <a href="#Figure_2">Figure 2</a> show an original image at 
the top and a replica of the original image at the bottom with no hidden 
watermarks having been added.&nbsp; The images in the right panel of 
<a href="#Figure_2">Figure 2</a> 
also show the original image at the top and a replica of the original image at the 
bottom. However, in this case, three watermarks been hidden in the 
frequency-domain representation of the image shown by the middle image.</p>
<p> <b><font color="#ff0000">Viewing tip</font></b> </p>
<p>You may find it useful to open another copy of this lesson in a
separate browser window.&nbsp; That will make it easier for you to
scroll back
and forth among the different listings and figures while you are
reading
about them.</p>
<p><b><font color="#ff0000">Supplementary material</font></b> </p>
<p>I recommend that you also study the other lessons in my extensive
collection of online Java tutorials.&nbsp; You will find those lessons
published
at <a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a
consolidated index of my Java tutorial lessons, and sometimes they are
difficult to locate there.&nbsp; You will find a consolidated index at <font
 color="#000000"> <a href="http://www.dickbaldwin.com/">www.DickBaldwin.com</a>.</font></p>
<p>I also recommend that you pay particular attention to the lessons listed in 
the <a href="../Java416.htm#References">References</a> section of this document.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p><font color="#FF0000"><b>The program named ImgMod36</b></font></p>
<p>There are many different ways to add watermarks to an image.&nbsp; The 
purpose of this program is to illustrate the creation of five different types of 
visible watermarks as shown in the bottom <a name="five_ways">image</a> of 
<a href="#Figure_1">Figure 1</a>:</p>
<ol>
	<li>A high intensity watermark in a single color plane <i>(red, top left 
	corner)</i>.</li>
	<li>A watermark that is the same color as the original image pixels but 
	with twice the intensity <i>(top right corner)</i>.</li>
	<li>A watermark that is the same color as the original image pixels but with 
	only half the intensity <i>(center)</i>.</li>
	<li>A watermark for which the alpha <i>(transparency)</i> values of the pixels 
	are 
	half of the original values <i>(bottom left corner)</i>.</li>
	<li>A high intensity white watermark <i>(bottom right corner)</i>.</li>
</ol>
<p><font color="#FF0000"><b>Driven by ImgMod04a</b></font></p>
<p>This program is designed to be driven by the image processing framework 
program named
<b>ImgMod04a</b>.&nbsp; The framework program was developed and explained in the 
earlier lesson entitled 
<a href="http://www.developer.com/java/other/article.php/3640776">Processing Image Pixels, An Improved 
Image-Processing Framework in Java</a>.</p>
<p><font color="#FF0000"><b>Operation</b></font></p>
<p>To run this program, enter the following at the command 
line.</p>
<p><pre><b>java ImgMod04a ImgMod36 ImageFileName</b></pre></p>
<p>where <b>ImageFileName</b> is the name of a .gif or .jpg file, including the 
extension.</p>
<p><font color="#FF0000"><b>A single display frame</b></font></p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Replot button</b><br />
  The frame also contains a <b>Replot</b> button.&nbsp; However, 
because this program does not allow the user to enter parameters to modify the 
behavior of the program at runtime, clicking the <b>Replot</b> button has little 
	or no effect.
</td></tr></table>
</td>
</tr>
</table>


<p>The program displays a single frame on the screen as shown in 
<a href="#Figure_1">Figure 1</a>.&nbsp; The frame contains the 
original image at the top and a replica of the original image with five 
watermarks added at the bottom.</p>
<p><font color="#FF0000"><b>An output JPEG file</b></font></p>
<p>Each time the program is run, or the <b>Replot</b> button is 
clicked, the bottom image containing the watermarks is written into a JPEG 
file named <b>junk.jpg</b>.&nbsp; For example, <a href="#Figure_3">Figure 3</a> 
shows a screen capture of the contents of the output JPEG file produced
<a name="Figure_3">for</a> <a href="#Figure_1">Figure 1</a>.</p>
<p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java418a04.jpg" width="153" height="136"><br></pre>
      <pre><b><a href="#Figure_3">Figure 3</a>  Output 
JPEG File.</b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>If a file having name <b>junk.jpg</b> already exists in the current 
directory, it is overwritten.</p>
<p><font color="#FF0000"><b>The processImg method</b></font></p>
<p>In order for a class to be compatible with the framework program named <b>
ImgMod04a</b>, the class must implement the interface named <b>ImgIntfc04a</b>.&nbsp; 
The interface named <b>ImgIntfc04a </b>declares a method named <b>processImg</b>.&nbsp; 
Therefore, the class named <b>ImgMod36</b> must define an image processing 
method named <b>processImg</b>.</p>
<p>The image processing method 
named <b>processImg</b> is executed by the program named <b>ImgMod04a</b> upon 
startup, and each time thereafter that the user clicks the <b>Replot</b> button 
at the top of <a href="#Figure_1">Figure 1</a>.</p>
<p>In this program, the method 
named <b>processImg</b> modifies the image pixels in five selected locations in 
the original image to add the 
watermarks described above and shown in <a href="#Figure_1">Figure 1</a>.&nbsp; Then it returns the modified image, which is displayed 
by the program named <b>ImgMod04a</b>.</p>
<p><font color="#FF0000"><b>Class files required</b></font></p>
<p>This program requires access to the following 
class files plus some inner classes that are defined inside the following 
classes:</p>
<ul>
	<li>ImgIntfc04a.class</li>
	<li>ImgMod04a.class</li>
	<li>ImgMod36.class</li>
</ul>
<p>The source code for the first two classes was provided in the earlier lesson 
entitled <a href="http://www.developer.com/java/other/article.php/3640776">Processing Image Pixels, An Improved Image-Processing Framework 
in Java</a>.&nbsp; The source code for the third class is provided in
<a href="#Listing_13">Listing 13</a>.</p>
<p><font color="#FF0000"><b>Program testing</b></font></p>
<p>The program was tested using J2SE 5.0 and 
WinXP.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Code</font></h2>
</center>
<p><font color="#FF0000"><b>Will explain in fragments</b></font></p>
<p>As is my normal practice, I will explain this program in fragments.&nbsp; You 
can view a complete listing of the class named <b>ImgMod36</b> in <a href="#Listing_13">Listing 13</a> 
near the end of the lesson.</p>
<p>Basically, this class consists of the method named <b>processImg</b>, a 
method named <b>addWatermark</b>, and several utility methods that are used to 
perform common operations on the color planes that represent the image in a 3D 
array of type <b>double</b>.</p>
<p><font color="#FF0000"><b>The processImg method</b></font></p>
<p>The class named <b>ImgMod36</b> and the method named <b>processImg</b> begin 
in <a name="Listing_1" href="#Listing_1">Listing 1</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>class <b>ImgMod36</b> implements <b>ImgIntfc04a</b>{
  public double[][][] <b>processImg</b>(double[][][] threeDPix){
    
    int imgRows = threeDPix.length;
    int imgCols = threeDPix[0].length;

    //Make a working copy of the 3D pixel array to avoid
    // making permanent changes to the original image data.
    double[][][] workingCopy = copy3DArray(threeDPix);
    
    //Declare a working plane.
    double[][] workingPlane;<br><br><b><font face="Courier New,Courier"><a href="#Listing_1">Listing 1</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Understanding the ImgMod04a class</b></font></p>
<p>It will be very helpful if you understand the image processing framework 
program named <b>ImgMod04a</b> before attempting to understand this program.&nbsp; 
You will find an explanation of <b>ImgMod04a</b> in the earlier lesson entitled 
<a href="http://www.developer.com/java/other/article.php/3640776">Processing Image Pixels, An Improved Image-Processing Framework in Java</a>.</p>
<p><font color="#FF0000"><b>Processing the image</b></font></p>
<p>Regardless of whether or not you already understand <b>ImgMod04a</b>, the method 
named <b>processImg</b> receives an image formatted into a 3D array of type <b>
double</b> and returns a modified image in a 3D array of type <b>double</b>.</p>
<p><font color="#FF0000"><b>Four image planes</b></font></p>
<p>The 3D array describes four image planes consisting of an <i>alpha</i> or <i>
transparency</i> plane, a <i>red</i> plane, a <i>green</i> plane, and a <i>blue</i> 
plane in that order.&nbsp; All of the necessary conversions between type <i>
unsigned byte</i><b>, </b>which is the standard format for image pixel data, and 
type <b>double</b> are handled by the class named <b>ImgMod04a</b>.&nbsp; Thus, 
the method named <b>processImg</b> has only to contend with data of type <b>
double</b>.</p>

<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Straightforward code</b><br>
	The code in the method named <b>copy3DArray</b> is 
straightforward and shouldn't require an explanation.&nbsp; You can view the 
method in its entirety in <a href="#Listing_13">Listing 13</a>.
</td></tr></table>
</td>
</tr>
</table>

<p>The code in <a href="#Listing_1">Listing 1</a> begins by finding the dimensions in pixels of the image 
planes.&nbsp; Then it invokes the method named <b>copy3DArray</b> to make a 
working copy of the 3D pixel array to avoid making permanent changes to the 
original image data.</p>
<p><font color="#FF0000"><b>A working 2D plane</b></font></p>
<p>Finally, the code in <a href="#Listing_1">Listing 1</a> declares a 2D array of type <b>double</b> that 
will be used as a working plane.&nbsp; This plane is used to avoid making 
individual working copies of each of the four image planes and reduces the 
memory requirements for processing large images.</p>
<p><font color="#FF0000"><b>Extract and process the alpha plane</b></font></p>
<p>The code in <a href="#Listing_2">Listing 2</a>:</p>
<ul>
	<li>Invokes the <b>extractPlane</b> method to extract the alpha plane from 
	the 3D working array into the 2D working plane.</li>
	<li>Invokes the <b>addWatermark</b> method to add watermarks to the working 
	plane, passing the working plane and the identification of the alpha plane, 
	0, to the <b>addWatermark</b> method.</li>
	<li>Invokes the <b>insertPlane</b> method to insert the modified working 
	plane back into the 3D working array, replacing the alpha plane previously 
	stored <a name="Listing_2">there</a>.</li>
</ul>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    //Extract and process the alpha plane.
    workingPlane = <b>extractPlane</b>(workingCopy,0);

    //Add the watermarks.
    addWatermark(<b>workingPlane</b>,0);

    //Insert the alpha plane back into the working array.
    <b>insertPlane</b>(workingCopy,workingPlane,0);<br><br><b><font face="Courier New,Courier"><a href="#Listing_2">Listing 2</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The <b>extractPlane</b> method and the <b>insertPlane</b> method are 
straightforward and shouldn't require an explanation.&nbsp; You can view those 
methods in their entirety in <a href="#Listing_13">Listing 13</a>.</p>
<p><font color="#FF0000"><b>The addWatermark method</b></font></p>
<p>The <b>addWatermark</b> method is at the heart of this lesson.&nbsp; 
Therefore, I will set the discussion of the <b>processImg</b> method aside long 
enough to explain the <b>addWatermark</b> method.</p>
<p>The <b>addWatermark</b> method begins in <a href="#Listing_3">Listing 3</a>.&nbsp; The purpose of this method is to add 
visible watermarks to a 2D array of pixel data of type <b>double</b>.&nbsp; There are many ways to modify the pixel data to add watermarks.&nbsp; This method illustrates
<a href="#five_ways">five</a> of those <a name="Listing_3">ways</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  void <b>addWatermark</b>(double[][] plane,int color){
    int imgRows = plane.length;
    int imgCols = plane[0].length;<br><br><b><font face="Courier New,Courier">Listing 3</font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The incoming parameters</b></font></p>
<p>The <b>addWatermark</b> method receives two incoming parameters.&nbsp; One 
parameter is a reference to the 2D array of pixel data that is to be modified to add the 
watermarks.</p>
<p>The other parameter is an <b>int</b> value that identifies the plane 
according to the following key:</p>
<ul>
	<li>0 - alpha plane</li>
	<li>1 - red plane</li>
	<li>2 - green plane</li>
	<li>3 - blue plane</li>
</ul>
<p><font color="#FF0000"><b>The dimensions of the 2D image plane</b></font></p>
<p>The <b>addWatermark</b> code in <a href="#Listing_3">Listing 3</a> determines the 
dimensions of the image plane in pixels.</p>
<p><font color="#FF0000"><b>Create the watermark</b></font></p>
<p><a href="#Listing_4">Listing 4</a> creates an array object containing the watermark.&nbsp; The watermark consists of the characters
<b>H2O</b> described by <b>int</b> values of 1 and 0 arranged in a row-column 
format.&nbsp; Each <b>int</b> value in the array will be used later to determine 
whether or not to modify a pixel in the image.&nbsp; Thus, there is a one-to-one 
correspondence between the <b>int</b> values in the watermark array and the 
pixels in the <a name="Listing_4">image</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    int[][] watermark = new int[][]{
      {1,1,0,0,0,1,1, 0, 0,1,1,1,1,1,0, 0, 0,0,1,1,1,0,0},
      {1,1,0,0,0,1,1, 0, 1,1,1,1,1,1,1, 0, 0,1,1,1,1,1,0},
      {1,1,1,1,1,1,1, 0, 1,0,0,0,0,1,1, 0, 1,1,0,0,0,1,1},
      {1,1,1,1,1,1,1, 0, 0,0,1,1,1,1,0, 0, 1,1,0,0,0,1,1},
      {1,1,0,0,0,1,1, 0, 0,1,1,1,1,0,0, 0, 1,1,0,0,0,1,1},
      {1,1,0,0,0,1,1, 0, 1,1,0,0,0,0,0, 0, 1,1,0,0,0,1,1},
      {1,1,0,0,0,1,1, 0, 1,1,1,1,1,1,1, 0, 0,1,1,1,1,1,0},
      {1,1,0,0,0,1,1, 0, 1,1,1,1,1,1,1, 0, 0,0,1,1,1,0,0},
    };//end array
    
    int wmRows = watermark.length;
    int wmCols = watermark[0].length;<br><br><b><font face="Courier New,Courier"><a href="#Listing_4">Listing 4</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_4">Listing 4</a> also gets and saves the dimensions of the watermark array.</p>
<p><font color="#FF0000"><b>Iterate on watermark rows and columns</b></font></p>
<p><a href="#Listing_5">Listing 5</a> shows the opening statements of a pair of nested <b>for</b> loops 
that iterate on the rows and columns of the <a name="Listing_5">watermark</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    for(int row = 0;row &lt; wmRows;row++){
      for(int col = 0;col &lt; wmCols;col++){
        if(watermark[row][col] == 1){//Ignore 0 values.<br><br><b><font face="Courier New,Courier"><a href="#Listing_5">Listing 5</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The pair of nested <b>for</b> loops that begin in <a href="#Listing_5">
Listing 5</a> encapsulate five sections of code that 
are used to modify pixel values in order to produce the five different types of 
watermarks shown in <a href="#Figure_1">Figure 1</a>.</p>
<p><font color="#FF0000"><b>Selecting the pixels to be modified</b></font></p>
<p>The <b>if</b> statement in <a href="#Listing_5">Listing 5</a> causes those five sections of code to be 
executed for every row-column combination where the watermark value is 1 and 
causes the five sections of code to be 
skipped for every row-column combination where the watermark value is 0.</p>
<p><font color="#FF0000"><b>High-intensity watermark on the red plane</b></font></p>
<p><a href="#Listing_6">Listing 6</a> tests the incoming parameter value named
<b>color</b> <i>(that specifies the plane)</i> and 
ignores all planes except the red plane that is identified by a value of 1.&nbsp; 
For that case, the current color value of the specified pixel is replaced by the 
maximum possible color value of <a name="Listing_6">255</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>          if(color == 1){//Modify red plane only.
            plane[row+10][col+10] = 255.0;
          }//end if<br><br><b><font face="Courier New,Courier"><a href="#Listing_6">Listing 6</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>

<p><table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Do the arithmetic</b><br />
  I will let you do the arithmetic yourself to see how it ends up in the 
	upper-left corner.
</td></tr></table>
</td>
</tr>
</table>

This watermark is placed in the upper-left corner of the bottom image as 
shown in <a href="#Figure_1">Figure 1</a>.<p><font color="#FF0000"><b>A watermark in the upper right corner</b></font></p>
<p><a href="#Listing_7">Listing 7</a> places a watermark in the upper right corner of the screen as shown 
in the bottom image of <a href="#Figure_1">Figure 1</a>.&nbsp; The color of the 
watermark is basically the same as the color of the image at that location but 
the intensity of each pixel in the watermark is twice the intensity of the original
<a name="Listing_7">pixel</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>          if(color != 0){//Don't modify the alpha plane.
            plane[row+10][imgCols-wmCols-10+col] =
                  plane[row+10][imgCols-wmCols-10+col]*2.0;
            plane[row+10][imgCols-wmCols-10+col] = 
               <b>clamp</b>(plane[row+10][imgCols-wmCols-10+col]);
          }//end if<br><br><b><font face="Courier New,Courier"><a href="#Listing_7">Listing 7</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Need to clamp the values</b></font></p>
<p>

<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Intensity</b><br />
  Note that the intensity of a red, green, or blue pixel color can range from 0 
	to 255 with 0 being black and 255 being full intensity.
</td></tr></table>
</td>
</tr>
</table>

This procedure can lead to pixels having color values that are greater than 
the maximum allowed value of 255.&nbsp; This is dealt with by invoking the 
method named <b>clamp</b> to guarantee that the value is within the range of 0 
to 255 inclusive.&nbsp; The <b>clamp</b> method is straightforward and shouldn't 
require an explanation.&nbsp; It can be viewed in its entirety in <a href="#Listing_13">Listing 13</a>.</p>
<p><font color="#FF0000"><b>Doesn't modify the transparency</b></font></p>
<p>Note that this procedure doesn't change the pixels in the alpha plane 
identified by a <b>color</b> value of 0.</p>
<p><font color="#FF0000"><b>A watermark in the center of the image</b></font></p>
<p><a href="#Listing_8">Listing 8</a> places a watermark in the center of the image as shown by the dark 
watermark in the center of the bottom image in <a href="#Figure_1">Figure 1</a>.&nbsp; 
The color of the watermark is basically the same as the color of the image at 
that location but the intensity of each pixel in the watermark is half the 
intensity of the original <a name="Listing_8">pixel</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>          if(color != 0){//Don't modify alpha plane.
            plane[imgRows-(imgRows/2+wmRows/2)+ row]
                       [imgCols-(imgCols/2+wmCols/2)+col] =
                  plane[imgRows-(imgRows/2+wmRows/2)+row]
                    [imgCols-(imgCols/2+wmCols/2)+col]*0.5;
          }//end if<br><br><b><font face="Courier New,Courier"><a href="#Listing_8">Listing 8</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Note once again that the values of the pixels in the alpha plane are not 
modified.</p>
<p><font color="#FF0000"><b>A watermark that manipulates transparency values</b></font></p>
<p>The construction of the watermark in the lower left corner of
<a href="#Figure_1">Figure 1</a> is considerably different from the others.&nbsp; 
This watermark, which is constructed by <a href="#Listing_9">Listing 9</a>, doesn't change the values of the red, green, and blue pixels.&nbsp; 
Rather, it causes those pixels to be more transparent allowing the background 
color of the frame to show <a name="Listing_9">through</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>          if(color == 0){//Modify alpha plane only.
            plane[imgRows-wmRows-10+row][col+10] = 
                  plane[imgRows-wmRows-10+row][col+10]/2.0;
          }//end if<br><br><b><font face="Courier New,Courier"><a href="#Listing_9">Listing 9</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The background color of the frame in <a href="#Figure_1">Figure 1</a> is 
yellow.&nbsp; Therefore, this pixel appears to be yellow in <a href="#Figure_1">
Figure 1</a>.</p>
<p><font color="#FF0000"><b>A white watermark</b></font></p>
<p><a href="#Listing_10">Listing 10</a> places a white watermark in the lower right corner of the image as 
shown in <a href="#Figure_1">Figure 1</a>.&nbsp; <a href="#Listing_10">Listing 10</a> doesn't modify the 
transparency <a name="Listing_10">value</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>          if(color != 0){//Don't modify the alpha plane.
            plane[imgRows-wmRows-10+row]
                           [imgCols-wmCols-10+col] = 255.0;
          }//end if
          
        }//end if on watermark pixel value
      }//end inner loop on wmCols
    }//end outer loop on wmRows

  }//end addWatermark<br><br><b><font face="Courier New,Courier"><a href="#Listing_10">Listing 10</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_10">Listing 10</a> also signals the end of the method named <b>addWatermark</b>.</p>
<p><font color="#FF0000"><b>Process the remaining color planes</b></font></p>
<p>Returning now to the <b>processImg</b> method, the alpha plane has been 
processed.&nbsp; <a href="#Listing_11">Listing 11</a> processes the red, green, blue color planes using 
exactly the same methodology as was used to process the alpha
<a name="Listing_11">plane</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    //Extract and process the red color plane.
    workingPlane = extractPlane(workingCopy,1);
    addWatermark(workingPlane,1);
    insertPlane(workingCopy,workingPlane,1);

    //Extract and process the green color plane.
    workingPlane = extractPlane(workingCopy,2);
    addWatermark(workingPlane,2);
    insertPlane(workingCopy,workingPlane,2);

    //Extract and process the blue color plane.
    workingPlane = extractPlane(workingCopy,3);
    addWatermark(workingPlane,3);
    insertPlane(workingCopy,workingPlane,3);<br><br><b><font face="Courier New,Courier"><a href="#Listing_11">Listing 11</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Return the modified image array</b></font></p>
<p>The alpha plane and all three color planes have now been processed.&nbsp; The 
results are stored in the working copy of the original pixel array.&nbsp; 
<a href="#Listing_12">Listing 12</a> returns the array containing the modified image to the calling
<a name="Listing_12">method</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    return workingCopy;

  }//end processImg method<br><br><b><font face="Courier New,Courier"><a href="#Listing_12">Listing 12</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_12">Listing 12</a> also completes the discussion of the program 
code.</p>
<p><font color="#FF0000"><b>Susceptibility to modifications</b></font></p>
<p>As you will learn in future lessons that deal with hidden watermarks, one of 
the big issues involving watermarks has to do with the susceptibility of the 
watermark to modification of the image.&nbsp; For example, if it is easy to 
cause a watermark to disappear by modifying the image, the watermark may not be 
very useful in allowing an individual to
<a href="http://en.wikipedia.org/wiki/Digital_watermarking">add copyright 
notices</a> or other verification messages to digital images.</p>
<p><font color="#FF0000"><b>Example of a modified watermarked image</b></font></p>
<p><a href="#Figure_4">Figure 4</a> shows the result of rotating, flipping, and 
scaling the image stored in the JPEG output file <a name="Figure_4">from</a>
<a href="#Figure_1">Figure 1</a>.</p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java418a05.jpg" width="124" height="140"><br></pre>
      <pre><b><a href="#Figure_4">Figure 4</a>  
Modified JPEG
File.</b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As you can see from <a href="#Figure_4">Figure 4</a>, visible watermarks of 
the types employed by this program tend to be very persistent, at least with 
respect to the kinds of modifications that were applied to this image.</p>
<p><font color="#FF0000"><b>Not necessarily true for hidden watermarks</b></font></p>
<p>However, as you will learn in future lessons that discuss hidden watermarks, 
achieving such persistence is much more difficult for hidden watermarks.&nbsp; 
In fact, sometimes the simple act of storing a watermarked image in a JPEG file 
can cause the hidden watermark to be lost.&nbsp; Other operations such as 
scaling the image can be even more detrimental to hidden watermarks.<br>
</p>
<center>
<h2><a name="Run the program"></a>Run the Program</h2>
</center>
<p>I encourage you to copy the code from <a href="#Listing_13">Listing 13</a> into your text
editor, compile it, and execute it.&nbsp; Experiment with it, making
changes, and observing the results of your changes.&nbsp; See if you can come up 
with some different and interesting ways to create visible watermarks by 
manipulating the alpha value and the three color values of the pixels.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I presented and explained a program that can be used to add 
five different types of visible watermarks to an image.</p>
<h2 align="center"><a name="Whats Next">What's Next?</a></h2>
<p>Future lessons will explain how to add hidden watermarks to an image.&nbsp; 
As you will see in those lessons, that task is somewhat more difficult than 
adding visible watermarks.</p>
<h2 align="center"><a name="References">References</a></h2>
<p><a href="http://www.developer.com/java/other/article.php/3403921">400</a> 
Processing Image Pixels using Java, Getting Started&nbsp; <br>
<a href="http://www.developer.com/java/other/article.php/3423661">402</a> 
Processing Image Pixels using Java, Creating a Spotlight&nbsp; <br>
<a href="http://www.developer.com/java/other/article.php/3441391">404</a> 
Processing Image Pixels Using Java: Controlling Contrast and Brightness<br>
<a href="http://www.developer.com/java/other/article.php/3512456">406</a> 
Processing Image Pixels, Color Intensity, Color Filtering, and Color Inversion
<br>
<a href="http://www.developer.com/java/other/article.php/3522711">408</a> 
Processing Image Pixels, Performing Convolution on Images<br>
<a href="http://www.developer.com/java/other/article.php/3579206">410</a> 
Processing Image Pixels, Understanding Image Convolution in Java<br>
<a href="http://www.developer.com/java/ent/article.php/3590351">412</a> 
Processing Image Pixels, Applying Image Convolution in Java, Part 1 <br>
<a href="http://www.developer.com/java/other/article.php/3596351">414</a> 
Processing Image Pixels, Applying Image Convolution in Java, Part 2<br>
<a href="http://www.developer.com/java/other/article.php/3640776">416</a> Processing Image Pixels, An Improved Image-Processing Framework in Java</p>
<center>
<h2> <a name="Complete Program Listings"></a>Complete Program Listing</h2>
</center>
A complete listing of the program discussed in this lesson is shown in 
<a href="#Listing_13">Listing 
13</a> <a name="Listing_13">below</a>. <br>
&nbsp;
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File ImgMod36.java
Copyright 2006, R.G.Baldwin

There are many different ways to add watermarks to an 
image.  The purpose of this program is to illustrate the 
creation of five different types of visible watermarks:

1. A high intensity watermark in a single color 
   plane (red).
2. A watermark that is the same color as the original image
   pixels but twice as intense.
3. A watermark that is the same color as the original image
   pixels but with only half the intensity.
4. A watermark for which the alpha (transparency) value of
   the pixels is half of the original values.
5. A high intensity white watermark.

This program is designed to be driven by the image 
processing framework named ImgMod04a.  To run this 
program, enter the following at the command line.

java ImgMod04a ImgMod36 ImageFileName

where ImageFileName is the name of a .gif or .jpg file, 
including the extension.

The program displays a single frame on the screen.  The
frame contains the original image at the top and a replica 
of the original image with the watermarks added at the 
bottom.  The frame also contains a Replot button.
However, because the program does not allow the user to
enter parameters to modify the behavior of the program at
runtime, clicking the Replot button has little or no 
beneficial effect.

Each time that the program is run, or the Replot button
is clicked, the final image containing the watermarks is 
written into a JPEG file named junk.jpg.  If a file 
having that name already exists in the current directory, 
it is overwritten.

This program contains an image processing method named 
processImg, which is executed by the program named 
ImgMod04a.  The method named processImg modifies the image 
pixels in five selected locations to add the watermarks 
described above.  Then it returns the modified image, which
is displayed by the program named ImgMod04a.

This program requires access to the following class files 
plus some inner classes that are defined inside the
following classes:

ImgIntfc04a.class
ImgMod04a.class
ImgMod36.class

Tested using J2SE 5.0 and WinXP.
**********************************************************/

class ImgMod36 implements ImgIntfc04a{
  
  //This method is required by ImgIntfc04a.  It is called
  // at the beginning of the run and each time thereafter
  // that the user clicks the Replot button on the Frame
  // containing the images.  However, because this program
  // doesn't provide for user input, pressing the Replot
  // button is of no value.  It just displays the same
  // images again.
  public double[][][] processImg(double[][][] threeDPix){
    
    int imgRows = threeDPix.length;
    int imgCols = threeDPix[0].length;

    //Make a working copy of the 3D pixel array to avoid
    // making permanent changes to the original image data.
    double[][][] workingCopy = copy3DArray(threeDPix);
    
    //Declare a working plane.
    double[][] workingPlane;
    
    //Extract and process the alpha plane.
    workingPlane = extractPlane(workingCopy,0);
    addWatermark(workingPlane,0);
    //Insert the alpha plane back into the working array.
    insertPlane(workingCopy,workingPlane,0);

    //Extract and process the red color plane.
    workingPlane = extractPlane(workingCopy,1);
    addWatermark(workingPlane,1);
    insertPlane(workingCopy,workingPlane,1);

    //Extract and process the green color plane.
    workingPlane = extractPlane(workingCopy,2);
    addWatermark(workingPlane,2);
    insertPlane(workingCopy,workingPlane,2);

    //Extract and process the blue color plane.
    workingPlane = extractPlane(workingCopy,3);
    addWatermark(workingPlane,3);
    insertPlane(workingCopy,workingPlane,3);
    
    //The alpha plane and all three color planes have now
    // been processed.  The results are stored in the
    // working copy of the original pixel array.
    return workingCopy;

  }//end processImg method
  //-----------------------------------------------------//

  //The purpose of this method is to extract a color plane
  // from the double version of an image and to return it
  // as a 2D array of type double.
  public double[][] extractPlane(
                              double[][][] threeDPixDouble,
                              int plane){
    
    int numImgRows = threeDPixDouble.length;
    int numImgCols = threeDPixDouble[0].length;
    
    //Create an empty output array of the same
    // size as a single plane in the incoming array of
    // pixels.
    double[][] output =new double[numImgRows][numImgCols];

    //Copy the values from the specified plane to the
    // double array.
    for(int row = 0;row &lt; numImgRows;row++){
      for(int col = 0;col &lt; numImgCols;col++){
        output[row][col] =
                          threeDPixDouble[row][col][plane];
      }//end loop on col
    }//end loop on row
    return output;
  }//end extractPlane
  //-----------------------------------------------------//

  //The purpose of this method is to insert a double 2D
  // plane into the double 3D array that represents an
  // image.
  public void insertPlane(double[][][] threeDPixDouble,
                          double[][] colorPlane,
                          int plane){
    
    int numImgRows = threeDPixDouble.length;
    int numImgCols = threeDPixDouble[0].length;
    
    //Copy the values from the incoming color plane to the
    // specified plane in the 3D array.
    for(int row = 0;row &lt; numImgRows;row++){
      for(int col = 0;col &lt; numImgCols;col++){
        threeDPixDouble[row][col][plane] = 
                                      colorPlane[row][col];
      }//end loop on col
    }//end loop on row
  }//end insertPlane
  //-----------------------------------------------------//

  //This method copies a double version of a 3D pixel array
  // to an new pixel array of type double.
  double[][][] copy3DArray(double[][][] threeDPix){
    int imgRows = threeDPix.length;
    int imgCols = threeDPix[0].length;
    
    double[][][] new3D = new double[imgRows][imgCols][4];
    for(int row = 0;row &lt; imgRows;row++){
      for(int col = 0;col &lt; imgCols;col++){
        new3D[row][col][0] = threeDPix[row][col][0];
        new3D[row][col][1] = threeDPix[row][col][1];
        new3D[row][col][2] = threeDPix[row][col][2];
        new3D[row][col][3] = threeDPix[row][col][3];
      }//end inner loop
    }//end outer loop
    return new3D;
  }//end copy3DArray
  //-----------------------------------------------------//

  //The purpose of this method is to add watermarks to
  // a 2D array of pixel data. There are many ways to
  // modify the pixel data to add watermarks.  This
  // method illustrates five of those ways.
  void addWatermark(double[][] plane,int color){
    int imgRows = plane.length;
    int imgCols = plane[0].length;
    
    //Create an array containing the basic watermark. The
    // watermark consists of the characters H2O described
    // by values of 1 and 0.
    int[][] watermark = new int[][]{
      {1,1,0,0,0,1,1, 0, 0,1,1,1,1,1,0, 0, 0,0,1,1,1,0,0},
      {1,1,0,0,0,1,1, 0, 1,1,1,1,1,1,1, 0, 0,1,1,1,1,1,0},
      {1,1,1,1,1,1,1, 0, 1,0,0,0,0,1,1, 0, 1,1,0,0,0,1,1},
      {1,1,1,1,1,1,1, 0, 0,0,1,1,1,1,0, 0, 1,1,0,0,0,1,1},
      {1,1,0,0,0,1,1, 0, 0,1,1,1,1,0,0, 0, 1,1,0,0,0,1,1},
      {1,1,0,0,0,1,1, 0, 1,1,0,0,0,0,0, 0, 1,1,0,0,0,1,1},
      {1,1,0,0,0,1,1, 0, 1,1,1,1,1,1,1, 0, 0,1,1,1,1,1,0},
      {1,1,0,0,0,1,1, 0, 1,1,1,1,1,1,1, 0, 0,0,1,1,1,0,0},
    };//end array
    
    int wmRows = watermark.length;
    int wmCols = watermark[0].length;
  
    for(int row = 0;row &lt; wmRows;row++){
      for(int col = 0;col &lt; wmCols;col++){
        if(watermark[row][col] == 1){//Ignore 0 values.
          
          //Place a high intensity watermark only in the
          // red color plane of the image.  Place it in the
          // upper left.
          if(color == 1){//Modify red plane only.
            plane[row+10][col+10] = 255.0;
          }//end if
          
          //Place a watermark in the upper right area. 
          // Make the color of the watermark be the
          // same as the color of the image but twice as
          // intense.
          if(color != 0){//Don't modify the alpha plane.
            plane[row+10][imgCols-wmCols-10+col] =
                  plane[row+10][imgCols-wmCols-10+col]*2.0;
            plane[row+10][imgCols-wmCols-10+col] = 
               clamp(plane[row+10][imgCols-wmCols-10+col]);
          }//end if
         
          //Place a watermark in the center of the image. 
          // Make the intensity of each color to be half of
          // the original intensity.
          if(color != 0){//Don't modify alpha plane.
            plane[imgRows-(imgRows/2+wmRows/2)+ row]
                       [imgCols-(imgCols/2+wmCols/2)+col] =
                  plane[imgRows-(imgRows/2+wmRows/2)+row]
                    [imgCols-(imgCols/2+wmCols/2)+col]*0.5;
          }//end if
          
          //Place a watermark in the lower left.  Make the
          // transparency value of each pixel to be half of
          // its original value.
          if(color == 0){//Modify alpha plane only.
            plane[imgRows-wmRows-10+row][col+10] = 
                  plane[imgRows-wmRows-10+row][col+10]/2.0;
          }//end if


          //Place a high intensity white watermark in the
          // bottom-right.
          if(color != 0){//Don't modify the alpha plane.
            plane[imgRows-wmRows-10+row]
                           [imgCols-wmCols-10+col] = 255.0;
          }//end if
          
        }//end if on watermark pixel value
      }//end inner loop on wmCols
    }//end outer loop on wmRows

  }//end addWatermark
  //-----------------------------------------------------//
  
  //The purpose of this method is to clamp the incoming
  // value to guarantee that it falls in the range from 0
  // to 255 inclusive.
  double clamp(double data){
    if(data &gt; 255.0){
      return 255.0;
    }else if(data &lt; 0.0){
      return 0.0;
    }else{
      return data;
    }//end else
  }//end clamp
  //-----------------------------------------------------//
}//end class ImgMod36<br><br><b><font face="Courier New,Courier"><a href="#Listing_13">Listing 13</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
<p> </p>
<hr align="center" size="3" width="100%">
<p>Copyright 2006, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h4>About the author</h4>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
java image watermark pixel </p>
<p>-end- </p>
<p>&nbsp;</p>
<p> <br>
&nbsp; </p>
<br>
<br>
<br>
<br>
</body>
</html>
