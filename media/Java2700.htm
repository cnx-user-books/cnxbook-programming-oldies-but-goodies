<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">ITSE 2317 Study Guide</h2>
<h2 align="center">Changing the Default Background Image for a World Object</h2>
<i>Learn how to modify Ericson's World class, causing it to accept the name of 
an image file as a parameter to the constructor.&nbsp; The image from the file 
replaces the default white background of the world object.</i>
<p><b>Published:</b>&nbsp; July 26, 2009<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 2700</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplemental material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#Program_Java2700a">Program Java2700a</a></li>
	<li><a href="#Program_Java2700b">Program Java2700b</a></li>
</ul>
	</li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p> This is the first lesson in a special series of lessons prepared for the 
specific benefit of students enrolled in my
<a href="http://www.austincc.edu/baldwin/">ITSE 2317, Java Programming 
(Intermediate)</a> class, at Austin Community College.&nbsp; However, I am 
publishing the lessons online for the benefit on others who may have an interest 
in them as well.</p>
<p> Many of the sample programs in this series require the student to modify the 
classes in <a href="http://www.developer.com/java/other/article.php/3782471">
Ericson's class library</a>.&nbsp; While I normally don't consider it good 
programming practice to modify the classes in a standard class library, the 
objective here is to encourage students to study the source code for the classes 
in Ericson's library in sufficient depth to understand why objects instantiated 
from those classes behave as they do.&nbsp; Being able to modify a class to 
modify the behavior of instantiated objects is one indication that the student 
understands the class.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Screen output from program Java2700a. </li>
	<li><a href="#Figure_2">Figure 2</a>. Screen output from program Java2700b.<b>
	</b></li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Source code for program Java2700a.</li>
	<li><a href="#Listing_2">Listing 2</a>. Source code for program Java2700b.</li>
	<li><a href="#Listing_3">Listing 3</a>. Add a constructor and an instance 
	variable to the World class.</li>
	<li><a href="#Listing_4">Listing 4</a>. Modification to the method named 
	initWorld in the World class.</li>
	<li><a href="#Listing_5">Listing 5</a>. Complete listing of the modified 
	World class. </li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplemental material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<p>By default, an object instantiated from Ericson's <b>World</b> class has a 
white background.&nbsp; In this lesson, I will explain how to add a constructor 
to the <b>World</b> class, which accepts a <b>String</b> parameter.&nbsp; The 
string is used as the name of an image file.&nbsp; The default white background 
is replaced by the image from the image file.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><a name="Program_Java2700a">Program Java2700a</a></h3>
<p>I will begin by showing a program that creates a <b>World</b> object of a 
specified size from Ericson's class library, adds a <b>Turtle</b> object to the 
world, and causes the turtle to move.&nbsp; The source code for the program 
named Java2700a is shown in its entirety in Listing 1.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Source code for program Java2700a.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File Java2700a Copyright 2009 R.G.Baldwin
 *Revised 07/26/09

Illustrates the normal result of placing a turtle in a
World object and causing it to move forward. Note the
white background.
*********************************************************/

public class Java2700a{
  public static void main(String[] args){
    World mars = new World(200,250);
    Turtle fred = new Turtle(mars);
    fred.forward();
  }//end main method
}//end class Java2700a</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The screen output produced by this program is shown in Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Screen output from program Java2700a. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java2700a.jpg" width="209" height="280"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As you can see, Figure 1 shows the default white background produced by the
<b>World</b> class in the Ericson's library.&nbsp; The size matches the 
constructor parameters in Listing 1.</p>
<h3><a name="Program_Java2700b">Program Java2700b</a></h3>
<p><font color="#FF0000"><b>Objective and methodology</b></font></p>
<p>The objective of the program was to make it possible for the user to:</p>
<ul>
	<li>Instantiate a new <b>World</b> object.</li>
	<li>Cause an image specified by the string name of an image file to replace 
	the default white background of the <b>World</b> object.</li>
	<li>Cause the name of the image file to be displayed in the upper-left 
	corner of the <b>World</b> object.</li>
	<li>Cause the name, height, and width of the image to be displayed on the 
	standard output device.</li>
</ul>
<p>The methodology for accomplishing this was to modify the <b>World</b> class 
in Ericson's class library.</p>
<p><font color="#FF0000"><b>Source code</b></font></p>
<p>The source code for the program named <b>Java2700b</b> is shown in Listing 2.&nbsp; 
This program illustrates the use of a modified version of Ericson's <b>World</b> 
class to cause it to accept a <b>String</b> constructor parameter and to use the 
string as the name of an image file. The image file is used to replace the default white background in the
<b>World</b> object with the image extracted from the image file.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. Source code for program Java2700b.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File Java2700b Copyright 2009 R.G.Baldwin
 *Revised 07/26/09

Illustrates modification of the World class to cause it to
accept a String constructor parameter and to use the
string as the name of an image file. The image file is
used to replace the default white background in the World
object with the image extracted from the image file.
*********************************************************/

public class Java2700b{
  public static void main(String[] args){
    //Note: The modified World class has been successfully
    // tested with all of the following instantiation
    // statements.
    //World mars = new World();
    //World mars = new World(true);
    //World mars = new World(200,250);
    World mars = new World("java2700bImg.jpg");

    //Add a turtle to the world and make it move.
    Turtle fred = new Turtle(mars);
    fred.forward();
  }//end main method
}//end class Java2700b</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The screen output</b></font></p>
<p>The screen output from this program for the specified image file is shown in 
Figure 2.&nbsp; As you can see, the green turtle is drawn on background image of a 
butterfly.&nbsp; The size of the world is determined by the size of the image.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Screen output from program Java2700b. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java2700b.jpg" width="431" height="527"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Note also that the name of the image file is displayed in the upper-left 
corner of the world.</p>
<p><font color="#FF0000"><b>The first modification to the World class</b></font></p>
<p>The modified <b>World</b> class is shown in Listing 5 near the end of the 
lesson.&nbsp; The <b>World</b> class was modified in two areas.&nbsp; The first 
modification is shown by the code fragment in Listing 3.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Add a constructor and an instance 
variable to the World class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  private String fileName = null;
  /**
   *New constructor that accepts the name of an image
   * file as a String. The image file is ultimately used
   * as the background image for the World object.
   */
  public World(String fileName){
    this.fileName = fileName;
    initWorld(true);
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 3 shows the addition of a new constructor to the <b>World</b> class 
along with the addition of a new instance variable named <b>fileName</b>.&nbsp; 
The new constructor accepts an incoming <b>String</b> parameter and saves it in 
the new instance variable.&nbsp; Then the constructor calls the method named <b>
initWorld</b> to cause the new <b>World</b> object to be initialized.</p>
<p><font color="#FF0000"><b>The second modification to the World class</b></font></p>
<p>The second modification is shown in Listing 4.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Modification to the method named initWorld 
in the World class.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  private void initWorld(boolean visibleFlag){
    //Modifications to deal with the image file.
    // create the background picture
    if(fileName == null){
      picture = new Picture(width,height);
    }else{
      picture = new Picture(fileName);
      width = picture.getWidth();
      height = picture.getHeight();
      picture.addMessage(fileName,10,20);
      System.out.println(picture);
    }//end else</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 4 shows a modification that was made to the method named <b>initWorld</b> 
to deal with the new constructor and the image file.</p>
<p><font color="#FF0000"><b>Behavior same as before</b></font></p>
<p>If the value of <b>fileName</b> is null, meaning that the new constructor was 
not called, the behavior is exactly the same as before.</p>
<p><font color="#FF0000"><b>New behavior</b></font></p>
<p>If the value of <b>fileName</b> is not null, meaning that the new constructor 
was called, Listing 4 uses the name of the file to create a new <b>Picture</b> 
object.&nbsp; Then the width and height values of the <b>Picture</b> object are 
stored in the existing instance variables named <b>width</b> and <b>height</b>.</p>
<p>Following this, the existing <b>addMessage</b> method of the <b>Picture</b> 
class is called to cause the name of the image file to be displayed in the 
upper-left corner of the image as shown in Figure 2.</p>
<p>Finally, the string returned by the <b>toString</b> method of the <b>Picture</b> 
class is displayed on the standard output device.&nbsp; In the case shown above, 
that string was as follows:</p>
</font>
<blockquote>
	<p><b><font size="3" face="arial">Picture, filename java2700bImg.jpg height 
	497 width 422</font></b></p>
</blockquote>
<font size="3" face="arial">
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li>
	<a rel="license" target="new" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a target="new" href="http://coweb.cc.gatech.edu/mediaComp-plan/101">
	Media Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a target="new" href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a target="new" href="http://drjava.sourceforge.net/">DrJava</a> 
	download site</li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, 
	the JavaPLT group at Rice University</a></li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava 
	Open Source License</a></li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3782471">
	340</a> Multimedia Programming with Java, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3788086">
	342</a> Getting Started with the Turtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3791291">
	344</a> Continuing with the SimpleTurtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3793401">
	346</a> Wrapping Up the SimpleTurtle Class: Multimedia Programming with Java</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java348.htm">348</a> 
	The Pen and PathSegment Classes: Multimedia Programming with Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3795761">
	349</a> A Pixel Editor Program in Java: Multimedia Programming with Java</li>
	<li>
	<a new href="http://www.developer.com/java/other/article.php/3798646%20target=">
	350</a> 3D Displays, Color Distance, and Edge Detection</li>
	<li><a href="http://www.developer.com/java/other/article.php/3801671">351</a> 
	A Slider-Controlled Softening Program for Digital Photos</li>
	<li><a href="http://www.developer.com/java/other/article.php/3806156">352</a> 
	Adding Animated Movement to Your Java Application</li>
	<li><a href="http://www.dickbaldwin.com/java/Java353.htm">353</a> A 
	Slider-Controlled Sharpening Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java354.htm">354</a> The 
	DigitalPicture Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java355.htm">355</a> The HSB 
	Color Model</li>
	<li><a href="http://www.dickbaldwin.com/java/Java356.htm">356</a> The show 
	Method and the PictureFrame Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java357.htm">357</a> An HSB 
	Color-Editing Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java358.htm">358</a> Applying 
	Affine Transforms to Picture Objects</li>
	<li><a href="http://www.dickbaldwin.com/java/Java359.htm">359</a> Creating a 
	lasso for editing digital photos in Java</li>
	<li><a href="http://www.dickbaldwin.com/java/Java360.htm">360</a> Wrapping 
	Up the SimplePicture Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java361.htm">361</a> A 
	Temperature and Tint Editing Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java362.htm">362</a> Getting 
	Started with the PictureExplorer Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java363.htm">363</a> Redeye 
	Correction in Digital Photographs</li>
	<li><a href="http://www.dickbaldwin.com/java/Java364.htm">364</a> Building 
	the Information Panel for the PictureExplorer GUI</li>
	<li><a href="http://www.dickbaldwin.com/java/Java365.htm">365</a> Using 
	Flood-Fill in Java Programs</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
A complete listing of the modified <b>World</b> class is shown in Listing 5 
below.<p>
<b><a name="Listing_5">Listing 5</a>. Complete listing of the modified World class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import javax.swing.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Observer;
import java.awt.*;

/**
 *Note: This version of Ericson's World class was modified
 *to make it possible to specify the name of an image file
 *when the World object is instantiated. The image is then
 *used as the background for the world in place of the
 *default blank white background.
 *
 * Class to represent a 2d world that can hold turtles and
 * display them
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class World extends JComponent implements ModelDisplay
{
  ////////////////// fields ///////////////////////

  /** should automatically repaint when model changed */
  private boolean autoRepaint = true;

  /** the background color for the world */
  private Color background = Color.white;

  /** the width of the world */
  private int width = 640;

  /** the height of the world */
  private int height = 480;

  /** the list of turtles in the world */
  private List&lt;Turtle&gt; turtleList = new ArrayList&lt;Turtle&gt;();

  /** the JFrame to show this world in */
  private JFrame frame = new JFrame("World");

  /** background picture */
  private Picture picture = null;

  ////////////////// the constructors ///////////////

  private String fileName = null;
  /**
   *New constructor that accepts the name of an image
   * file as a String. The image file is ultimately used
   * as the background image for the World object.
   */
  public World(String fileName){
    this.fileName = fileName;
    initWorld(true);
  }//end constructor


  /**
   * Constructor that takes no arguments
   */
  public World()
  {
    // set up the world and make it visible
    initWorld(true);
  }

  /**
   * Constructor that takes a boolean to
   * say if this world should be visible
   * or not
   * @param visibleFlag if true will be visible
   * else if false will not be visible
   */
  public World(boolean visibleFlag)
  {
    initWorld(visibleFlag);
  }

  /**
   * Constructor that takes a width and height for this
   * world
   * @param w the width for the world
   * @param h the height for the world
   */
  public World(int w, int h)
  {
    width = w;
    height = h;

    // set up the world and make it visible
    initWorld(true);
  }

  ///////////////// methods ///////////////////////////

  /**
   * Method to initialize the world
   * @param visibleFlag the flag to make the world
   * visible or not
   */
  private void initWorld(boolean visibleFlag)
  {
    //Modifications to deal with the image file.
    // create the background picture
    if(fileName == null){
      picture = new Picture(width,height);
    }else{
      picture = new Picture(fileName);
      width = picture.getWidth();
      height = picture.getHeight();
      picture.addMessage(fileName,10,20);
      System.out.println(picture);
    }//end else
    
    
    
    // set the preferred size
    this.setPreferredSize(new Dimension(width,height));

    // add this panel to the frame
    frame.getContentPane().add(this);

    // pack the frame
    frame.pack();

    // show this world
    frame.setVisible(visibleFlag);
  }

  /**
   * Method to get the graphics context for drawing on
   * @return the graphics context of the background picture
   */
  public Graphics getGraphics() { return picture.getGraphics(); }

  /**
   * Method to clear the background picture
   */
  public void clearBackground() { picture = new Picture(width,height); }

  /**
   * Method to get the background picture
   * @return the background picture
   */
  public Picture getPicture() { return picture; }

  /**
   * Method to set the background picture
   * @param pict the background picture to use
   */
  public void setPicture(Picture pict) { picture = pict; }

  /**
   * Method to paint this component
   * @param g the graphics context
   */
  public synchronized void paintComponent(Graphics g)
  {
    Turtle turtle = null;

    // draw the background image
    g.drawImage(picture.getImage(),0,0,null);

    // loop drawing each turtle on the background image
    Iterator iterator = turtleList.iterator();
    while (iterator.hasNext())
    {
      turtle = (Turtle) iterator.next();
      turtle.paintComponent(g);
    }
  }

  /**
   * Metod to get the last turtle in this world
   * @return the last turtle added to this world
   */
  public Turtle getLastTurtle()
  {
    return (Turtle) turtleList.get(turtleList.size() - 1);
  }


  /**
   * Method to add a model to this model displayer
   * @param model the model object to add
   */
  public void addModel(Object model)
  {
    turtleList.add((Turtle) model);
    if (autoRepaint)
       repaint();
  }

  /**
   * Method to check if this world contains the passed
   * turtle
   * @return true if there else false
   */
  public boolean containsTurtle(Turtle turtle)
  {
    return (turtleList.contains(turtle));
  }

  /**
   * Method to remove the passed object from the world
   * @param model the model object to remove
   */
  public void remove(Object model)
  {
    turtleList.remove(model);
  }

  /**
   * Method to get the width in pixels
   * @return the width in pixels
   */
  public int getWidth() { return width; }

  /**
   * Method to get the height in pixels
   * @return the height in pixels
   */
  public int getHeight() { return height; }

  /**
   * Method that allows the model to notify the display
   */
  public void modelChanged()
  {
    if (autoRepaint)
       repaint();
  }

  /**
   * Method to set the automatically repaint flag
   * @param value if true will auto repaint
   */
  public void setAutoRepaint(boolean value) { autoRepaint = value; }

  /**
   * Method to hide the frame
   */
//  public void hide()
//  {
//    frame.setVisible(false);
//  }

  /**
   * Method to show the frame
   */
//  public void show()
//  {
//    frame.setVisible(true);
//  }

  /**
   * Method to set the visibility of the world
   * @param value a boolean value to say if should show or hide
   */
  public void setVisible(boolean value)
  {
    frame.setVisible(value);
  }

  /**
   * Method to get the list of turtles in the world
   * @return a list of turtles in the world
   */
  public List getTurtleList()
  { return turtleList;}

  /**
   * Method to get an iterator on the list of turtles
   * @return an iterator for the list of turtles
   */
  public Iterator getTurtleIterator()
  { return turtleList.iterator();}

  /**
   * Method that returns information about this world
   * in the form of a string
   * @return a string of information about this world
   */
  public String toString()
  {
    return "A " + getWidth() + " by " + getHeight() +
      " world with " + turtleList.size() + " turtles in it.";
  }

} // end of World class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2009, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
