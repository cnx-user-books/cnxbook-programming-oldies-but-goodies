<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Servlets, Session Tracking Using URL Rewriting <!--endtitle--></H2>
<P>Java Programming, Lecture Notes # 692, Revised 3/16/99. </P>
<P><A HREF="#Preface">Preface</A> </P>
<P><A HREF="#Introduction">Introduction</A> </P>
<P><A HREF="#sample_program">Sample Program</A> </P><DIR>
<DIR>

<P><A HREF="#Interesting_Code_Fragments">Interesting Code Fragments</A> </P>
<P><A HREF="#program_listing">Program Listing</A> </P></DIR>
</DIR>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Preface">Preface</A></H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Advanced Java Programming</B></U> classes at ACC will be responsible for knowing and understanding all of the material in this lesson beginning with the spring semester of 1999. </P>
<P>This lesson was originally written on March 16, 1999. </P>
<P>The sample servlet in this lesson was tested using Win95, the JDK 1.2 download package from JavaSoft, the JSDK 2.0 download package from JavaSoft, and the <STRONG>servletrunner</STRONG> program that is included in the JSDK. The sample program was tested using <B>servletrunner</B> both from the same machine, and from a different machine on the network.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Introduction">Introduction</A></H2>
</FONT><P>This and the next several lessons will show you some of the ways to implement session tracking using servlets.</P>
<P>An earlier lesson showed you how to implement session tracking using hidden fields on the HTML form.  This lesson illustrates a similar approach using URL rewriting. Other approaches will be illustrated in subsequent lessons.</P>
<P>If you observed the URL window in your browser while running the program named <B>Servlet07</B> from an earlier lesson, you probably noticed that after several cycles, the window contained something like the following.  </P>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=492>
<TR><TD VALIGN="TOP" BGCOLOR="#00ffff">
<P>http://baldwin:8080/servlet/Servlet07?<BR>
<B>firstName=harry&amp;<BR>
item=tom&amp;<BR>
item=dick</B></TD>
</TR>
</TABLE>

<P>What you are seeing here is the standard way in which HTML forms pass parameters to their HTTP servers.  (Manual line breaks were inserted to force the material to fit on the page.)</P>
<P>When the user clicks on the <B>submit</B> button, a string containing the names and values for all of the fields is created and concatenated onto the URL.  The string of parameter values is joined to the URL with a "?" character.  The individual parameters are separated from one another with the "&amp;" character.</P>
<P>Recall that in <B>Servlet07</B>, the field named <B>firstName</B> was the visible field in which the user entered a name.  The fields named <B>item</B> were hidden fields that were created and populated with historical data when the servlet generated the HTML form for return to the client.</P>
<P>It doesn't really matter how these parameter names and values come to be concatenated onto the URL.  As far as the servlet is concerned, their values are accessible using the methods <B>getParameter()</B> and <B>getParameterValues()</B>.</P>
<P>This suggests that in some cases, it might be beneficial for the servlet to save the historical data by concatenating it onto a URL referenced in the HTML page before returning the page to the client.  That is one of the ways that URL rewriting can be used to implement session tracking.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="sample_program"></A>Sample Program</H2>
</FONT><STRONG><P>This sample program is designed to illustrate the concept of URL rewriting and is not intended to have any particular value in its own right.</P>
<P>Servlet08.java</STRONG> illustrates session tracking using URL rewriting.  In this case, parameters containing the historical data are added to the servlet's URL each time the servlet generates a new HTML page.</P>
<P>Each time the servlet is invoked, it creates and displays an HTML page on the client screen. The page displays:</P>

<UL>
<LI>A hyperlink to the servlet URL labeled <B>Click Here</B> </LI>
<LI>A list of the dates and times on which the user previously invoked the servlet by clicking on the hyperlink.</LI></UL>

<P>Each time the user clicks on the hyperlink, the client sends a GET request to the server.  The GET request invokes the servlet, which determines the current date and time.  An HTML page is created and sent back to the client. </P>
<P>The current date and time in milliseconds is added as a parameter named <B>item</B> to the servlet URL referenced by the hyperlink in the newly-created HTML page.  In addition to the current date and time, the values of the previous dates and times when the user invoked the servlet by clicking the hyperlink are retrieved from the incoming URL and appended to the new URL.</P>
<P>In other words, the parameter values for each successive URL that is generated match those of the previous URL.  In addition, a new parameter value is added which represents the current date and time.</P>
<P>The historical data is saved by embedding it in the new HTML page that is returned to the client. There is no requirement to save the historical data in a database or in the server's file system.</P>
<P>This approach places no special requirements on the server software and should be compatible with all browsers that support hyperlinks.</P>
<P>A typical screen output produced by running this program through several cycles during a single session is shown below.</P>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=493>
<TR><TD VALIGN="TOP" BGCOLOR="#00ffff">
<B><P>Click Here </P>
</B><P>Your list of times is:</P>
<P>16-Mar-99 9:35:52 PM</P>
<P>16-Mar-99 9:58:03 PM</P>
<P>16-Mar-99 9:58:05 PM</P>
<P>16-Mar-99 9:58:06 PM</P>
<P>16-Mar-99 9:58:08 PM</TD>
</TR>
</TABLE>

<P>The URL that produced this output is shown below with manual line breaks inserted to force it to fit on the page.</P>
<TABLE BORDER CELLSPACING=1 CELLPADDING=7 WIDTH=492>
<TR><TD VALIGN="TOP" BGCOLOR="#00ffff">
<PRE>http://baldwin:8080/servlet/Servlet08?<BR>
item=921641752080&amp;<BR>
item=921643083420&amp;<BR>
item=921643085620&amp;<BR>
item=921643086990</PRE></TD>
</TR>
</TABLE>

<P>&nbsp;</P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Interesting_Code_Fragments">Interesting Code Fragments</A></H3>
</FONT><P>The first fragment shows the beginning of the controlling class and the beginning of the <B>doGet()</B> method. You have seen this before, so I won't discuss it further.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>public class Servlet08 extends HttpServlet{
  public void doGet(HttpServletRequest req, 
                    HttpServletResponse res)
                      throws ServletException, IOException{</PRE></TD>
</TR>
</TABLE>

<P>An HTTP URL can have multiple parameters with the same name. In this case, the parameters are all named <B>item</B>. The next fragment gets the values stored in all of the parameters named <B>item</B> and saves them in a <B>String </B>array named <B>items</B>.</P>
<P>The fragment also instantiates and initializes a <B>String </B>object used later to construct a new parameter string for the URL.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>    String parameters = "?";
    
    String[] items = req.<B>getParameterValues</B>("item");</PRE></TD>
</TR>
</TABLE>

<P>The next fragment uses the parameter values from the old parameter string to construct a new parameter string.  The new parameter string will later be concatenated to the URL for the servlet.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>    if(items != null){
      for(int i = 0; i &lt; items.length; i++){
        parameters = parameters + "item=" + items[i] + "&amp;";
      }//end for loop
    }//end if</PRE></TD>
</TR>
</TABLE>

<P>The next fragment gets the current date and time in milliseconds and saves it in a <B>long</B> variable named <B>theDate</B>.  Then it concatenates the current date and time in milliseconds onto the new parameter string constructed above.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>    long theDate = new <B>Date</B>().<B>getTime</B>();
    parameters = parameters + "item=" + theDate;</PRE></TD>
</TR>
</TABLE>

<P>The next fragment begins the creation of the output HTML page. You have seen code like this many times before, so I won't discuss it further at this point.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>    //Establish the type of output
    res.setContentType("text/html");
    
    //Get an output stream
    PrintWriter out = res.getWriter();
    
    //Construct an HTML form and send it back to the client
    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Servlet08&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;");</PRE></TD>
</TR>
</TABLE>

<P>The next fragment constructs the hyperlink containing the URL for the servlet.  Note that the hyperlink references a URL that includes the parameter string constructed above.</P>
<P>If you compile and run this servlet, you will need to substitute the name of your server machine or <I>localhost</I> in place of <B><I>baldwin</B></I> in this statement. <B><I>baldwin</B></I> is the name of my server machine.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>    out.println("&lt;A HREF=\"http://baldwin:8080/servlet/"
         + "Servlet08" + <B>parameters</B> + "\"&gt;Click Here&lt;/A&gt;");</PRE></TD>
</TR>
</TABLE>

<P>The next fragment simply provides a line of introductory text for the list of dates and times to be displayed on the screen.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>    out.println("&lt;BR&gt;&lt;BR&gt;<B>Your list of times is:</B>&lt;BR&gt;");    </PRE></TD>
</TR>
</TABLE>

<P>An earlier fragment retrieved all of the data in the incoming URL parameters and saved that data in a <B>String</B> array named <B>items</B>.</P>
<P>If that array contains data, the next fragment displays the date and time for each element in the array.  </P>
<P>The parameter values in milliseconds are first converted from <B>String</B> to <B>long</B>.  Each of the <B>long</B> values is then used to instantiate a new <B>Date</B> object, which is displayed in the format shown earlier.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>    if(items != null){
      <B>for</B>(int i = 0; i &lt; items.length; i++){
        long millis = Long.<B>parseLong</B>(items[i]);
        Date aDate = new <B>Date</B>(millis);
        out.println(DateFormat.getDateTimeInstance().
                                   <B>format</B>(aDate) + "&lt;BR&gt;");
      }//end for loop
    }//end if</PRE></TD>
</TR>
</TABLE>

<P>An earlier fragment also obtained the current date and time and saved it in milliseconds.  As above, this representation of the date and time is used to instantiate a new <B>Date</B> object that is formatted and displayed at the end of the list on the HTML page.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>    Date aDate = new <B>Date</B>(theDate);
    out.println(DateFormat.getDateTimeInstance().
                                   <B>format</B>(aDate) + "&lt;BR&gt;");</PRE></TD>
</TR>
</TABLE>

<P>The remainder of the code is typical of what you have seen before and can be viewed in the complete listing of the servlet in the next section.</P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="program_listing"></A>Program Listing</H3>
</FONT><P>A complete listing of the program follows.</P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Servlet08.java, Copyright 1999, R.G.Baldwin
Rev 3/16/99

The purpose of this program is to illustrate session
tracking through the use of rewritten URLs

Each time the servlet is activated, it creates an HTML
file and sends it back to the client.  The HTML file
displays an HTML hyperlink on the client screen. 

In addition, it displays a list of date/time values 
representing the dates and times at which the servlet was 
accessed from that page by clicking on that hyperlink.

Each time the user clicks the hyperlink,the servlet is 
activated, causing it create and send a new HTML page
to the client.
  
Each time the HTML page is created and sent to the
client, the URL of the servlet referenced by the hyperlink
is modified to include the current date and time plus the
date and time of each previous access made by clicking
on the hyperlink.  The date/time information is converted
to milliseconds and appended to the URL in the form of
standard URL parameters.  Thus, the length of the URL
increases each time the HTML form is created.

The servlet illustrates how it is possible to store
historical data in the parameter string that can be
appended to a URL.
 
The servlet was tested using the JDK 1.2 download package
from JavaSoft along with the Java Servlet Development Kit
(JSDK) 2.0 from JavaSoft. All tests were performed 
under Win95.

The servlet was tested using the servletrunner program that
is included in the JSDK with the servletrunner program 
running on the same machine and also with the servletrunner
program running on a different machine on the network. 


**********************************************************/
import java.io.*;
import java.util.*;
import java.text.*;
import javax.servlet.*;
import javax.servlet.http.*;

public class Servlet08 extends HttpServlet{
  public void doGet(HttpServletRequest req, 
                    HttpServletResponse res)
                      throws ServletException, IOException{

    //Ref variable used to construct the parameter string
    String parameters = "?";
    
    //An array for getting and saving the values contained
    // in the parameters named item.
    String[] items = req.getParameterValues("item");
    
    if(items != null){
      for(int i = 0; i &lt; items.length; i++){
        //Access the old parameter string to construct the
        // new parameter string to append to the URL below.
        parameters = parameters + "item=" + items[i] + "&amp;";
      }//end for loop
    }//end if

    //Get the current date and time in milliseconds. Add 
    // the current date and time to the parameter string
    // constructed above.
    long theDate = new Date().getTime();
    parameters = parameters + "item=" + theDate;

    //Establish the type of output
    res.setContentType("text/html");
    
    //Get an output stream
    PrintWriter out = res.getWriter();
    
    //Construct an HTML form and send it back to the client
    out.println("&lt;HTML&gt;");
    out.println("&lt;HEAD&gt;&lt;TITLE&gt;Servlet08&lt;/TITLE&gt;&lt;/HEAD&gt;");
    out.println("&lt;BODY&gt;");

    //Construct the hyperlink referencing the servlet here.
    // Note that the hyperlink references a URL that 
    // includes the parameter string constructed above.
            
    //Substitute the name of your server or localhost in
    // place of baldwin in the following statement.
    out.println("&lt;A HREF=\"http://baldwin:8080/servlet/"
         + "Servlet08" + parameters + "\"&gt;Click Here&lt;/A&gt;");

//Display the historical data stored in the parameter
    // string.
    out.println("&lt;BR&gt;&lt;BR&gt;Your list of times is:&lt;BR&gt;");   

    if(items != null){
      for(int i = 0; i &lt; items.length; i++){
        long millis = Long.parseLong(items[i]);
        //Convert from milliseconds as a String to a Date
        // object.  Then format for display.
        Date aDate = new Date(millis);
        out.println(DateFormat.getDateTimeInstance().
                                   format(aDate) + "&lt;BR&gt;");
      }//end for loop
    }//end if

    //Convert from milliseconds to a Date object and then
    // format for display.
    Date aDate = new Date(theDate);
    out.println(DateFormat.getDateTimeInstance().
                                   format(aDate) + "&lt;BR&gt;");

    out.println("&lt;/BODY&gt;&lt;/HTML&gt;");//finish HTML page
      
  }//end doGet()
}//end class Servlet08</PRE></TD>
</TR>
</TABLE>

<P>-end-<!--end--></P></BODY>
</HTML>
