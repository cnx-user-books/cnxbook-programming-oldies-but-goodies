<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JDK 1.1, Lightweight Components, A Named Inner-Class Source/Listener
Version of the Lightweight 3D Button Class<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 180, Revised 03/31/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing for new lightweight button class">Program Listing
for Lightweight Button Class</a></li>

<li><a href="#test program listing">Test Program Listing</a></li>

<li><a href="#review">Review</a></li></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.

<p>The material in this lesson is extremely important. However, there is
simply too much material to be covered in detail during lecture periods.
Therefore, students in Prof. Baldwin's <b>Advanced Java Programming</b>
classes at ACC will be responsible for studying this material on their
own, and bringing any questions regarding the material to class for discussion.

<p>This lesson was originally written on December 6, 1997 using the software
and documentation in the JDK 1.1.3 download package.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
A previous lesson developed and discussed a lightweight 3D button class
that mimics a heavyweight button in many respects. That class was developed
outside the JDK 1.1 <b>Source/Listener</b> methodology by using the methods
named <b>enableEvents()</b> and <b>process...Event()</b> where <b>...</b>
indicates the name of the event type.

<p>It is also possible, to develop lightweight components which are in
full compliance with the <b>Source/Listener</b> methodology. The availability
of inner classes also makes this a neat and tidy process where the entire
lightweight component can be developed inside a single outer class definition.

<p>This lesson develops a lightweight 3D button class that replicates the
functionality of the earlier one, but does so using the <b>Source/Listener</b>
methodology with <u>named inner classes</u>.

<p>Much of the class definition is still the same as the original. The
following sections will discuss only those parts of the class definition
which changed as a result of this change in methodology.

<p>A test program will be provided at the end of the lesson that can be
used to exercise this new version of the lightweight button class.

<p>Please refer to the class named <b>LWButton01 </b>in a previous lesson
for a complete functional description of the lightweight 3D button class.
<center><h2><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h2></center>
The first interesting code fragment consists of the declaration of two
new instance variables. The instance variable named <b>refToThis</b> is
a reference to the lightweight button object (usually referred to as <b>this</b>).
This reference is needed so that code inside the inner classes can refer
to the outer object for such purposes as invoking <b>repaint()</b> on the
object.

<p>The instance variable named <b>mouseListener</b> is a reference to the
mouse listener object. This is needed so that code inside the <b>key listener</b>
methods can invoke the <b>mousePressed()</b> method on the mouse listener
object.

<p>In both cases, the purpose is no different from before, but the mechanics
are slightly different.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; LWButton02 <b>refToThis</b>; //ref to this object&nbsp;&nbsp;
&nbsp; MyMouseListenerClass <b>mouseListener</b>;</pre></td></tr></table>
The next interesting code fragment appears inside the constructor where
the call to the <b>enableEvents()</b> method has been replaced by a series
of typical <b>Source/Listener</b> statements.

<p>The only thing in this code that is in any way unusual is the last line
where a reference to the <b>this</b> object is stored in an instance variable
named <b>refToThis</b> to make it available to methods inside of the inner
classes. The purpose is as described in the discussion of the new instance
variables above.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; mouseListener = new MyMouseListenerClass();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addMouseListener(mouseListener);
&nbsp;&nbsp;&nbsp; this.addKeyListener(new MyKeyListenerClass());
&nbsp;&nbsp;&nbsp; this.addFocusListener(new MyFocusListenerClass());
&nbsp;&nbsp;&nbsp;&nbsp;
<b>&nbsp;&nbsp;&nbsp; refToThis = this;</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</pre></td></tr></table>
The next interesting code fragment is the listener class for key events.
This is a completely typical listener class definition, except <u>it is
defined as an inner class</u> of the lightweight button class. Most of
the code in this class was lifted directly from the <b>processKeyEvent()</b>
method in the previous version, and has exactly the same purpose.

<p>Recall that the purpose of the key event processor is to convert a <b>keyPressed()</b>
event into a <b>mousePressed()</b> event, and to convert a <b>keyReleased()</b>
event into a <b>mouseReleased()</b> event for those cases where the key
event is the space bar. You should be able to recognize those actions in
the two methods of this class.

<p>A slightly different approach to servicing the keyboard was used in
this version to see if it would help with the problem which results from
holding the space bar down until it starts repeating. It didn't help.

<p>Note that the code in this class uses the special instance variable
named <b>mouseListener</b> to gain access to the methods of the mouse listener
object.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; class <b>MyKeyListenerClass </b>extends KeyAdapter{
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void <b>keyPressed</b>(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.<b>VK_SPACE</b>)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>mouseListener</b>.<b>mousePressed</b>(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis,MouseEvent.<b>MOUSE_PRESSED</b>,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp; }//end keyPressed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void <b>keyReleased</b>(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.<b>VK_SPACE</b>)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>mouseListener</b>.<b>mouseReleased</b>(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis,MouseEvent.<b>MOUSE_RELEASED</b>,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp; }//end keyReleased()
&nbsp; }//end MyKeyListenerClass</pre></td></tr></table>
The next interesting code fragment is the focus listener class. As before,
most of the code in this class came directly from the code in the <b>processFocusEvent()</b>
method in the earlier version of the lightweight button class.

<p>The purpose of this class is to trap <b>focusGained()</b> and <b>focusLost()</b>
events and to set an instance variable named <b>gotFocus</b> in the lightweight
button class to <b>true</b> or <b>false</b>.

<p>Code in the class also forces the lightweight button to be repainted
when the focus is gained or lost in order to display the change in text
style used as visual feedback of a change in focus.

<p>Note that the code in this class uses the special instance variable
named <b>refToThis</b> to gain access to the methods of the lightweight
button class such as <b>invalidate()</b> and <b>paint()</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; class <b>MyFocusListenerClass </b>implements FocusListener{
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void <b>focusGained</b>(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = <b>true</b>; //set the gotFocus flag&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>invalidate</b>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>repaint</b>();
&nbsp;&nbsp;&nbsp; }//end focusGained()&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void <b>focusLost</b>(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = <b>false</b>; //clear the gotFocus flag&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>invalidate</b>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>repaint</b>();
&nbsp;&nbsp;&nbsp; }//end focusLost()
&nbsp; }//end MyFocusListenerClass</pre></td></tr></table>
The final interesting code fragment is the mouse listener class which replaces
the <b>processMouseEvent()</b> method in the earlier version of the lightweight
button class.

<p>The purposes of the methods in this class are:
<ul><li>
Modify the appearance of the <b>LWButton </b>object when the user clicks
on it.</li>

<li>
Invoke the <b>actionPerformed()</b> method in the Listener object that
is registered to listen to this <b>LWButton </b>object.</li>

<li>
Request focus for the <b>LWButton</b>.</li></ul>
The first purpose is accomplished by setting an instance variable named
<b>pressed</b> to true or false. This instance variable is used by the
overridden <b>paint()</b> method to determine how to render the image of
the button.

<p>In addition to setting the instance variable named <b>pressed</b> to
<b>true</b> or <b>false</b>, the code also forces a <b>repaint</b> so that
the <b>paint()</b> method will be invoked to do something with the new
value of the instance variable.

<p>The code to accomplish the second two purposes is fairly obvious.

<p>There is very little difference in the code in the methods of this class
and the code in the <b>processMouseEvent()</b> method of the previous version.
If you understood that version, you should have no trouble recognizing
corresponding code in this version.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; class MyMouseListenerClass extends MouseAdapter{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void <b>mousePressed</b>(MouseEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pressed = <b>true</b>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>invalidate</b>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>repaint</b>();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end mousePressed()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void <b>mouseReleased</b>(MouseEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(actionListener != null) {

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> actionListener.actionPerformed</b>(new ActionEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis, ActionEvent.ACTION_PERFORMED, label));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if on actionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(pressed == true) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pressed = <b>false</b>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>requestFocus</b>();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>invalidate</b>();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.<b>repaint</b>();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if on pressed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end mouseReleased()
&nbsp; }//end MyMouseListenerClass</pre></td></tr></table>
A complete listing of the lightweight button class is provided in the next
section.
<center><h2><a name="program listing for new lightweight button class"></a><font color="#ff0000">Program
Listing for New Lightweight Button Class</font></h2></center>
This program listing is followed by a listing for a program that can be
used to exercise the new version of the lightweight button.

<p>Most of the new material in this listing has been highlighted in <b>boldface</b>.

<p>After this lesson was published, it was pointed out by a reader named
Kees Kuip that this version of the program contains code that could lead
to a memory leak, because the object has an embedded reference to itself
which <u>could</u> possibly prevent it from being garbage-collected. A
solution to this <u>potential</u> problem (as recommended by Kees) is provided
as an exercise for the student in the <b>Review</b> section at the end
of the lesson. As it turns out, this is not a problem, and a demonstration
program to that effect is also included in the <b>Review</b> section.

<p>Even though this turns out to have been a false alarm, it was a very
useful exercise because it led to two additional programming exercises:
one to prevent the problem (if it is a problem), and another to demonstrate
that it is not a problem. Thanks go out to Kees for pointing out this potential
problem, and also for recommending a solution.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/* File LWButton02.java Copyright 1997, R.G.Baldwin
This class replicates the functionality of the class
named LWButton01.

However, <b>the LWButton01 class was implemented using the&nbsp;
enableEvents()--process...Event() methodology whereas this
class uses the source/listener methodology.&nbsp; The listener
classes in this class are named inner classes.</b>&nbsp; This&nbsp;
gives them access to the necessary state variables
without the requirement to pass references to those
variables to the constructors of the listener classes.

========================

This class is used to instantiate a 3D lightweight button
object that behaves quite a bit like a heavyweight Button
object but is much more responsive than a heavyweight
button under JDK 1.1.3 and Win95 on a 133 mhz Pentium
processor.

The color of the button is based on the background color&nbsp;
of its container, but is one shade brighter than the color
of the background.&nbsp;

Normally, it appears to protrude slightly out of the&nbsp;
screen with highlights on the left and top edges and&nbsp;
shadows on the bottom and right edges.&nbsp; Note that the
highlighting only works if the background color does not
contain components with values of 255.

When you click the button with the mouse, it appears to&nbsp;
retreat into the screen and then pops back out.&nbsp; As with
a heavyweight button, this causes it to gain the focus.

When it appears to retreat into the screen, its color&nbsp;
changes to match that of the background with heavy shadows
on the left and top and a faint outline on the bottom and
right.

The visual indication of focus is that the text on the
button is rendered in bold italics.

When you click the button, it generates an action event.

When the button has the focus and you press the space
bar, it generates an action event.

This class was tested using JDK 1.1.3 under Win95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;
//=======================================================//
class LWButton02 extends Component {
&nbsp; //Save the raw label provided by the user here to make
&nbsp; // it available to the getLabel() method.
&nbsp; String rawLabel;
&nbsp; //The following instance variable contains the raw
&nbsp; // label with two spaces appended to each end to make
&nbsp; // it easier to use for sizing the LWButton.
&nbsp; String label;
&nbsp; // The following instance variable is set to true if&nbsp;
&nbsp; // the LWButton is pressed and not released.
&nbsp; boolean pressed = false;&nbsp;
&nbsp; //The following instance variable is set to true when&nbsp;
&nbsp; // the LWButton has focus
&nbsp; boolean gotFocus = false;
&nbsp; //The following instance variable refers to a list of&nbsp;
&nbsp; // registered ActionListener objects.
&nbsp; ActionListener actionListener;
<b>&nbsp; //The following is a reference to this object that is
&nbsp; // accessible by methods of the inner classes
&nbsp; LWButton02 refToThis; //ref to this object
&nbsp; //The following is a reference to the MouseListener
&nbsp; // object that is used by methods of the KeyListener&nbsp;&nbsp;
&nbsp; // class to make calls to mousePressed() and&nbsp;
&nbsp; // mouseReleased() when keyPressed() and keyReleased()
&nbsp; // events occur.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; MyMouseListenerClass mouseListener;
</b>&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Constructor for an LWButton with no label.
&nbsp; public LWButton02() {
&nbsp;&nbsp;&nbsp; //Invoke the parameterized constructor with an&nbsp;
&nbsp;&nbsp;&nbsp; // empty string
&nbsp;&nbsp;&nbsp; this("");
&nbsp; }//end constructor

&nbsp; //Constructor for an LWButton with a label.
&nbsp; public LWButton02(String rawLabel) {
&nbsp;&nbsp;&nbsp; this.rawLabel = rawLabel;
&nbsp;&nbsp;&nbsp; //Add spaces on either end and save it that way
&nbsp;&nbsp;&nbsp; this.label = "&nbsp; " + rawLabel + "&nbsp; ";

<b>&nbsp;&nbsp;&nbsp; //Instantiate a named listener object for the mouse
&nbsp;&nbsp;&nbsp; // listener so that the methods of the object can be
&nbsp;&nbsp;&nbsp; // accessed by the methods of the key listener to
&nbsp;&nbsp;&nbsp; // convert key events into mouse events.
&nbsp;&nbsp;&nbsp; mouseListener = new MyMouseListenerClass();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Register the named mouse listener object along with
&nbsp;&nbsp;&nbsp; // anonymous key listener and focus listener objects
&nbsp;&nbsp;&nbsp; // on this lightweight button object.
&nbsp;&nbsp;&nbsp; this.addMouseListener(mouseListener);
&nbsp;&nbsp;&nbsp; this.addKeyListener(new MyKeyListenerClass());
&nbsp;&nbsp;&nbsp; this.addFocusListener(new MyFocusListenerClass());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Store a reference to this lightweight button object&nbsp;
&nbsp;&nbsp;&nbsp; // in an instance variable of the class so that it&nbsp;
&nbsp;&nbsp;&nbsp; // is accessible to the code in the inner listener
&nbsp;&nbsp;&nbsp; // classes for mouse, key, and focus.
&nbsp;&nbsp;&nbsp; refToThis = this;&nbsp;</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method uses the AWTEventMulticaster&nbsp;
&nbsp; // class to construct a list of ActionListener objects&nbsp;
&nbsp; // that are registered on the LWButton object
&nbsp; public void addActionListener(ActionListener listener) {
&nbsp;&nbsp;&nbsp; actionListener = AWTEventMulticaster.add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actionListener, listener);
&nbsp; }//end addActionListener()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method removes ActionListener objects&nbsp;
&nbsp; // from the list described above
&nbsp; public void removeActionListener(ActionListener listener){
&nbsp;&nbsp;&nbsp;&nbsp; actionListener = AWTEventMulticaster.remove(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actionListener, listener);
&nbsp; }//end removeActionListener

&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following two methods provide the preferred size&nbsp;
&nbsp; // and the minimum size of the LWButton to be used by&nbsp;
&nbsp; // the layout managers.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; //Override the getPreferredSize() method.&nbsp; Base the
&nbsp; // preferred size on the size of the text in the
&nbsp; // LWButton object.&nbsp; Recall that two spaces have been
&nbsp; // appended to each end of the text in the LWButton.
&nbsp; public Dimension getPreferredSize() {
&nbsp;&nbsp;&nbsp; if(getFont() != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontMetrics fm = getFontMetrics(getFont());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Dimension(fm.stringWidth(label),&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fm.getHeight() + 10);
&nbsp;&nbsp;&nbsp; } else return new Dimension(10, 10);//no font
&nbsp; }//end getPreferredSize()
&nbsp;&nbsp;
&nbsp; //Override the getMinimumSize() method and specify
&nbsp; // an arbitrary minimum size for the LWButton.
&nbsp; public Dimension getMinimumSize() {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Dimension(10, 10);
&nbsp; }//end getMinimumSize()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following two methods are available to get and set
&nbsp; // the label of an LWButton object.
&nbsp; public String getLabel() {//gets the label
&nbsp;&nbsp;&nbsp; return rawLabel;
&nbsp; }//end getLabel()
&nbsp;&nbsp;
&nbsp; public void setLabel(String rawLabel) {//sets the label
&nbsp;&nbsp;&nbsp; this.rawLabel = rawLabel; //save the raw label
&nbsp;&nbsp;&nbsp; //Add spaces to each end of the rawLabel to make it
&nbsp;&nbsp;&nbsp; // easier to center the label in the LWButton.
&nbsp;&nbsp;&nbsp; this.label = "&nbsp; " + rawLabel + "&nbsp; ";
&nbsp;&nbsp;&nbsp; this.invalidate();
&nbsp;&nbsp;&nbsp; this.repaint();
&nbsp; }//end setLabel()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following overridden paint() method paints the&nbsp;
&nbsp; // LWButton&nbsp; The appearance of the LWButton depends on
&nbsp; // the pressed and gotFocus flags.&nbsp; When pressed is true,
&nbsp; // the LWButton is rendered to appear that it has been
&nbsp; // pressed into the screen.&nbsp; When it is false, the
&nbsp; // LWButton is rendered to appear that it is protruding
&nbsp; // from the screen.&nbsp; When gotFocus is true, the
&nbsp; // text is rendered in bold italics as the visual&nbsp;
&nbsp; // indication that the LWButton has the focus.&nbsp; When
&nbsp; // gotFocus is false, the text is rendered plain.
&nbsp;&nbsp;
&nbsp; //Note also that the position of the text also depends
&nbsp; // on the pressed flag.&nbsp; When pressed is false, the text
&nbsp; // is rendered slightly up and to the left of its
&nbsp; // pressed position.&nbsp; This enhances the illusion that
&nbsp; // the button is being pressed into the screen.
&nbsp;&nbsp;
&nbsp; //The color of the LWButton object is tied to the
&nbsp; // background color.&nbsp; When protruding, the button is&nbsp;
&nbsp; // rendered one shade brighter than the background.&nbsp;&nbsp;
&nbsp; // When pressed, the LWButton is rendered the same color
&nbsp; // as the background.

&nbsp; //The actual size of the LWButton object is determined&nbsp;
&nbsp; // by the layout manager which may or may not honor the
&nbsp; // preferred and minimum size specifications.
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g) {//paints the LWButton
&nbsp;&nbsp;&nbsp; //If LWButton has the focus, display the text in
&nbsp;&nbsp;&nbsp; // bold italics.&nbsp; Otherwise display plain.
&nbsp;&nbsp;&nbsp; if(gotFocus)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(getFont().getName(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Font.BOLD | Font.ITALIC,getFont().getSize()));
&nbsp;&nbsp;&nbsp; else g.setFont(new Font(getFont().getName(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Font.PLAIN,getFont().getSize()));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; if(pressed){ //if the pressed flag is true
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getBackground());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.fillRect(//fill rectangle with background color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw shadows three shades darker than background
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getBackground().darker().darker().darker());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that three offset rectangles are drawn to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // produce a shadow effect on the left and top of
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the rectangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(//
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1,1,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2,2,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now draw a faint outline on the bottom and right of
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the rectangle.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getBackground().darker());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -1,-1,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now center the text in the LWButton object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontMetrics fm = getFontMetrics(getFont());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getForeground());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(label,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSize().width/2 - fm.stringWidth(label)/2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSize().height/2 + fm.getAscent()/2);
&nbsp;&nbsp;&nbsp; }//end if(pressed)
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; else{//not pressed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Make the protruding LWButton object one shade
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // brighter than the background.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getBackground().brighter());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.fillRect(//and fill a rectangle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,this.getSize().width,this.getSize().height);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the color for the shadows three shades darker
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // than the background.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getBackground().darker().darker().darker());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw two offset rectangles to create shadows on&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the right and bottom.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -1,-1,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -2,-2,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Highlight the left and top two shades brighter&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // than the background, one shade brighter than the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // color of the LWButton itself which is one shade
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // brighter than the background.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getBackground().brighter().brighter());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(//
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now place the text in the LWButton object shifted
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // by two pixels up and to the left.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontMetrics fm = getFontMetrics(getFont());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getForeground());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(label,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSize().width/2 - fm.stringWidth(label)/2 - 2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSize().height/2 + fm.getAscent()/2 - 2);
&nbsp;&nbsp;&nbsp; }//end else
&nbsp; }//end overridden paint() method
&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp;<b> class MyKeyListenerClass extends KeyAdapter{
&nbsp;&nbsp;&nbsp; /*
&nbsp;&nbsp;&nbsp; This class is used to cause the LWButton to behave as
&nbsp;&nbsp;&nbsp; if a mouse event occurred on it whenever it has the
&nbsp;&nbsp;&nbsp; focus and the space bar is pressed and then released.
&nbsp;&nbsp;&nbsp; Holding the space bar down generates repetitive&nbsp;
&nbsp;&nbsp;&nbsp; events due to the repeat feature of the keyboard (this
&nbsp;&nbsp;&nbsp; would need to be disabled in a real program).
&nbsp;&nbsp;&nbsp; */
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void keyPressed(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Generate mousePressed() event when the space bar&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is pressed by invoking the mousePressed() method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // of the MouseListener object, and passing an event&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object that impersonates a mouse pressed event.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.VK_SPACE)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mouseListener.mousePressed(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis,MouseEvent.MOUSE_PRESSED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp; }//end keyPressed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void keyReleased(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Generate mouseReleased() event when the space bar&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is released by invoking the mouseReleased() method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // of the MouseListener object, and passing an event&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object that impersonates a mouse released event.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.VK_SPACE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mouseListener.mouseReleased(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis,MouseEvent.MOUSE_RELEASED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp; }//end keyReleased()
&nbsp; }//end MyKeyListenerClass
&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//

&nbsp; class MyFocusListenerClass implements FocusListener{
&nbsp;&nbsp;&nbsp; /*
&nbsp;&nbsp;&nbsp; This methods of this class are invoked when a focus&nbsp;
&nbsp;&nbsp;&nbsp; event occurs on the LWButton.&nbsp; This happens when the&nbsp;
&nbsp;&nbsp;&nbsp; requestFocus() method is called inside the&nbsp;
&nbsp;&nbsp;&nbsp; mouseReleased() event handler for the LWButton.&nbsp; This&nbsp;
&nbsp;&nbsp;&nbsp; sets or clears the gotFocus flag that is used to cause&nbsp;
&nbsp;&nbsp;&nbsp; the text renderer to modify the text to indicate that&nbsp;
&nbsp;&nbsp;&nbsp; the LWButton has the focus. When the LWButton has the&nbsp;
&nbsp;&nbsp;&nbsp; focus, the text is rendered in bold italics.&nbsp;&nbsp;&nbsp; */
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void focusGained(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = true; //set the gotFocus flag&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.repaint();
&nbsp;&nbsp;&nbsp; }//end focusGained()&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void focusLost(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = false; //clear the gotFocus flag&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.repaint();
&nbsp;&nbsp;&nbsp; }//end focusLost()
&nbsp; }//end MyFocusListenerClass

&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; class MyMouseListenerClass extends MouseAdapter{
&nbsp;&nbsp;&nbsp; /*
&nbsp;&nbsp;&nbsp; The&nbsp; purpose of this methods in this class is threefold:
&nbsp;&nbsp;&nbsp; 1.&nbsp; Modify the appearance of the LWButton object when
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the user clicks on it.
&nbsp;&nbsp;&nbsp; 2.&nbsp; Invoke the actionPerformed() method in the Listener&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object that is registered to listen to this&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LWButton object.
&nbsp;&nbsp;&nbsp; 3.&nbsp; Request focus for the LWButton.&nbsp;&nbsp;&nbsp;&nbsp; */&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //When the mouse is pressed on the LWButton object,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // set the "pressed" state of the object to true&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and force it to be repainted to change its&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // appearance. When pressed is true, the button is
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // rendered as though it has been pressed into the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // screen.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pressed = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.repaint();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end mousePressed()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void mouseReleased(MouseEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //When the mouse is released on the LWButton object:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 1. Invoke the actionPerformed() method in the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; Listener objects that are registered to&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; listen to the LWButton object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 2. Confirm that the "pressed" state is true and&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; if so, set it to false and force the object&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; to be repainted to change its appearance.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; When pressed is false, the button is rendered
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; so as to appear to protrude out of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; screen.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 3. Request the focus for the LWButton object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //if an ActionListener is registered
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(actionListener != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the actionPerformed() method on the list
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // of listener objects registered on the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // LWButton object.&nbsp; Instantiate and pass an
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ActionEvent object as a parameter.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actionListener.actionPerformed(new ActionEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis, ActionEvent.ACTION_PERFORMED, label));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if on actionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(pressed == true) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pressed = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.requestFocus();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToThis.repaint();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if on pressed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end mouseReleased()
&nbsp; }//end MyMouseListenerClass
</b>&nbsp;&nbsp;
}//end class LWButton02
//=======================================================//</pre></td></tr></table>
The next section contains the source code for a program that can be used
to exercise this lightweight button class.
<center><h2><a name="test program listing"></a><font color="#ff0000">Test Program Listing</font></h2></center>
The following test program is identical to one of the test programs in
a previous program that was used to exercise the earlier version of the
lightweight button class. Only the reference to the lightweight button
class has been changed.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/* File Lightweight07.java Copyright 1997, R.G.Baldwin
This program was designed specifically to test the class
named LWButton02 and requires access to that class.
The classed named LWButton02 is a lightweight 3D button&nbsp;
class which replicates the functionality of the&nbsp;
LWButton01 class, but implements that functionality using
source/listener methodology instead of enableEvents() --
process...Event() methodology.

====================

You will probably need to compile and run the program to
really appreciate what it does.

The purpose of the program is to exercise the lightweight
button class named LWButton02 under a BorderLayout
manager.

The BorderLayout manager does not honor both dimensions
of the preferred size of a component in any of its&nbsp;
five positions. Components in the North and South&nbsp;
positions probably have the vertical dimension of their&nbsp;
preferred size honored.

Similarly, components in the East and West positions
probably have the horizontal dimension of their preferred
size honored.

Neither dimension of the preferred size is honored for
components in the Center.&nbsp; Components in the center
simply occupy all of the available space.

This program places three lightweight buttons of type
LWButton02, one heavyweight button of type Button, and
a Label object in a Frame object with a ten-pixel gap
between all components.

The lightweight buttons occupy the East, North, and Center
positions in the Frame.

The heavyweight button occupies the West position.

The Label occupies the South position.

When you click on any of the four buttons, the color of
the Label toggles between red and green.

You can experiment with the manner in which the preferred
size is or is not honored by resizing the Frame.

Note that this program makes use of a named inner class.

This program was tested using JDK 1.1.3 under Win95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class Lightweight07 extends Frame{
&nbsp; Label myLabel;
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Lightweight07();//instantiate object of this type
&nbsp; }//end main

//-------------------------------------------------------//
&nbsp; public Lightweight07(){//constructor
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; //Set background to a dull yellow
&nbsp;&nbsp;&nbsp; this.setBackground(new Color(128,128,0));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a borderLayout object with gaps and apply
&nbsp;&nbsp;&nbsp; // it to the Frame object.
&nbsp;&nbsp;&nbsp; BorderLayout myLayout = new BorderLayout();
&nbsp;&nbsp;&nbsp; myLayout.setHgap(10);
&nbsp;&nbsp;&nbsp; myLayout.setVgap(10);
&nbsp;&nbsp;&nbsp; this.setLayout(myLayout);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three lightweight buttons
&nbsp;&nbsp;&nbsp; LWButton02 eastLWButton = new LWButton02("East");
&nbsp;&nbsp;&nbsp; LWButton02 northLWButton = new LWButton02("North");
&nbsp;&nbsp;&nbsp; LWButton02 centerLWButton = new LWButton02("Center");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Label object and initialize it to green
&nbsp;&nbsp;&nbsp; myLabel = new Label("Label Object");
&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a heavyweight button object
&nbsp;&nbsp;&nbsp; Button myButton = new Button("Heavyweight Button");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add all five components to the Frame object.
&nbsp;&nbsp;&nbsp; this.add(eastLWButton,"East");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.add(northLWButton,"North");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.add(centerLWButton,"Center");
&nbsp;&nbsp;&nbsp; this.add(myButton,"West");
&nbsp;&nbsp;&nbsp; this.add(myLabel,"South");

&nbsp;&nbsp;&nbsp; //Instantiate an ActionListener object
&nbsp;&nbsp;&nbsp; MyActionListener myActionListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Register the ActionListener object on all four
&nbsp;&nbsp;&nbsp; // of the buttons.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; eastLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; northLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; centerLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; myButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setSize(300,200);
&nbsp;&nbsp;&nbsp; this.setVisible(true);

&nbsp;&nbsp;&nbsp; //Anonymous inner-class listener to terminate program
&nbsp;&nbsp;&nbsp; this.addWindowListener(new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);}});//end addWindowListener
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Inner Class to respond to action events.&nbsp; Make this an
&nbsp; // inner class for easy access to myLabel.
&nbsp; class MyActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(myLabel.getBackground() == Color.green)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.red);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else myLabel.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; }//end actionPerformed
&nbsp; }//end class MyActionListener
}//end class Lightweight07
//=======================================================//</pre></td></tr></table>

<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - A reader named Kees Kuip has pointed out that the program named <b>LWButton02
</b>has a potential memory leak. Without viewing the code that follows,
identify the potential memory leak in <b>LWButton02</b> and modify the
program to correct it.

<p>Thanks go to Kees for pointing out this potential problem, and also
for providing a recommended solution.

<p>Also, a reader named Myles Harding sent in the following suggestion:
<br>&nbsp;
<table border cols=1 width="100%" bgcolor="#66ffff" ><tr><td>Thanks very much for your excellent Java Tutorials.&nbsp; I recommend
them to all my students.&nbsp; The mind set your lessons project of keeping
it simple and testing everything from first principles sends the right
message.&nbsp;

<p>May I make a suggestion regarding you Lighweight Components Lessons.&nbsp;

<p>The reftothis variable, or the getThis() method in the Inner classes
can be replaced with LWButton.this so your getThis().requestFocus(), or
refToThis.requestFocus() becomes LWButton01.this.requestFocus(); and so
on.&nbsp;&nbsp;

<p>The benefits of this scheme becomes more marked when the Inner class
has further Inner classes.&nbsp;

<p>I have not seen this way of accessing outer named&nbsp; this's documented
anywhere but it seems to work OK.&nbsp;

<p>Regards&nbsp;
<br>Professor Myles Harding&nbsp;
<br>Mathematical Sciences&nbsp;
<br>Swinburne University of Technology&nbsp;
<br>Victoria Australia&nbsp;</td></tr></table>
.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/* File SampProg143.java Copyright 1997, R.G.Baldwin
From lesson 180.

A reader has pointed out that the program named LWButton02
contains code that could lead to a memory leak.

Without viewing the solution that follows, see if you can
find the potential memory leak and modify the program to
correct the problem.&nbsp; This modified program should&nbsp;
replicate the functionality of the lightweight button
named LWButton02.

========================

This class is used to instantiate a 3D lightweight button
object.

The color of the button is based on the background color&nbsp;
of its container, but is one shade brighter than the color
of the background.&nbsp;

Normally, it appears to protrude slightly out of the&nbsp;
screen with highlights on the left and top edges and&nbsp;
shadows on the bottom and right edges.&nbsp; Note that the
highlighting only works if the background color does not
contain components with values of 255.

When you click the button with the mouse, it appears to&nbsp;
retreat into the screen and then pops back out.&nbsp; As with
a heavyweight button, this causes it to gain the focus.

When it appears to retreat into the screen, its color&nbsp;
changes to match that of the background with heavy shadows
on the left and top and a faint outline on the bottom and
right.

The visual indication of focus is that the text on the
button is rendered in bold italics.

When you click the button, it generates an action event.

When the button has the focus and you press the space
bar, it generates an action event.

This class was tested using JDK 1.1.3 under Win95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;
//=======================================================//
class SampProg143 extends Component {
&nbsp; //Save the raw label provided by the user here to make
&nbsp; // it available to the getLabel() method.
&nbsp; String rawLabel;
&nbsp; //The following instance variable contains the raw
&nbsp; // label with two spaces appended to each end to make
&nbsp; // it easier to use for sizing the LWButton.
&nbsp; String label;
&nbsp; // The following instance variable is set to true if&nbsp;
&nbsp; // the LWButton is pressed and not released.
&nbsp; boolean pressed = false;&nbsp;
&nbsp; //The following instance variable is set to true when&nbsp;
&nbsp; // the LWButton has focus
&nbsp; boolean gotFocus = false;
&nbsp; //The following instance variable refers to a list of&nbsp;
&nbsp; // registered ActionListener objects.
&nbsp; ActionListener actionListener;
&nbsp; //The following is a reference to the MouseListener
&nbsp; // object that is used by methods of the KeyListener&nbsp;&nbsp;
&nbsp; // class to make calls to mousePressed() and&nbsp;
&nbsp; // mouseReleased() when keyPressed() and keyReleased()
&nbsp; // events occur.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; MyMouseListenerClass mouseListener;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Constructor for an LWButton with no label.
&nbsp; public SampProg143() {
&nbsp;&nbsp;&nbsp; //Invoke the parameterized constructor with an&nbsp;
&nbsp;&nbsp;&nbsp; // empty string
&nbsp;&nbsp;&nbsp; this("");
&nbsp; }//end constructor

&nbsp; //Constructor for an LWButton with a label.
&nbsp; public SampProg143(String rawLabel) {
&nbsp;&nbsp;&nbsp; this.rawLabel = rawLabel;
&nbsp;&nbsp;&nbsp; //Add spaces on either end and save it that way
&nbsp;&nbsp;&nbsp; this.label = "&nbsp; " + rawLabel + "&nbsp; ";

&nbsp;&nbsp;&nbsp; //Instantiate a named listener object for the mouse
&nbsp;&nbsp;&nbsp; // listener so that the methods of the object can be
&nbsp;&nbsp;&nbsp; // accessed by the methods of the key listener to
&nbsp;&nbsp;&nbsp; // convert key events into mouse events.
&nbsp;&nbsp;&nbsp; mouseListener = new MyMouseListenerClass();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Register the named mouse listener object along with
&nbsp;&nbsp;&nbsp; // anonymous key listener and focus listener objects
&nbsp;&nbsp;&nbsp; // on this lightweight button object.
&nbsp;&nbsp;&nbsp; this.addMouseListener(mouseListener);
&nbsp;&nbsp;&nbsp; this.addKeyListener(new MyKeyListenerClass());
&nbsp;&nbsp;&nbsp; this.addFocusListener(new MyFocusListenerClass());
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

<b>&nbsp; //The following method replaces the instance variable
&nbsp; // named refToThis in the version named LWButton02.&nbsp; It&nbsp;
&nbsp; // was pointed out by a reader that the use of the&nbsp;
&nbsp; // refToThis variable could lead to a memory leak,&nbsp;
&nbsp; // because the object had an embedded reference to&nbsp;
&nbsp; // itself which would prevent it from being&nbsp;
&nbsp; // garbage-collected.
&nbsp;&nbsp;
&nbsp; SampProg143 getThis(){
&nbsp;&nbsp;&nbsp; return this;
&nbsp; }//end getThis()
</b>&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method uses the AWTEventMulticaster&nbsp;
&nbsp; // class to construct a list of ActionListener objects&nbsp;
&nbsp; // that are registered on the LWButton object
&nbsp; public void addActionListener(ActionListener listener) {
&nbsp;&nbsp;&nbsp; actionListener = AWTEventMulticaster.add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actionListener, listener);
&nbsp; }//end addActionListener()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method removes ActionListener objects&nbsp;
&nbsp; // from the list described above
&nbsp; public void removeActionListener(ActionListener listener){
&nbsp;&nbsp;&nbsp;&nbsp; actionListener = AWTEventMulticaster.remove(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actionListener, listener);
&nbsp; }//end removeActionListener

&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following two methods provide the preferred size&nbsp;
&nbsp; // and the minimum size of the LWButton to be used by&nbsp;
&nbsp; // the layout managers.&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; //Override the getPreferredSize() method.&nbsp; Base the
&nbsp; // preferred size on the size of the text in the
&nbsp; // LWButton object.&nbsp; Recall that two spaces have been
&nbsp; // appended to each end of the text in the LWButton.
&nbsp; public Dimension getPreferredSize() {
&nbsp;&nbsp;&nbsp; if(getFont() != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontMetrics fm = getFontMetrics(getFont());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Dimension(fm.stringWidth(label),&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fm.getHeight() + 10);
&nbsp;&nbsp;&nbsp; } else return new Dimension(10, 10);//no font
&nbsp; }//end getPreferredSize()
&nbsp;&nbsp;
&nbsp; //Override the getMinimumSize() method and specify
&nbsp; // an arbitrary minimum size for the LWButton.
&nbsp; public Dimension getMinimumSize() {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return new Dimension(10, 10);
&nbsp; }//end getMinimumSize()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following two methods are available to get and set
&nbsp; // the label of an LWButton object.
&nbsp; public String getLabel() {//gets the label
&nbsp;&nbsp;&nbsp; return rawLabel;
&nbsp; }//end getLabel()
&nbsp;&nbsp;
&nbsp; public void setLabel(String rawLabel) {//sets the label
&nbsp;&nbsp;&nbsp; this.rawLabel = rawLabel; //save the raw label
&nbsp;&nbsp;&nbsp; //Add spaces to each end of the rawLabel to make it
&nbsp;&nbsp;&nbsp; // easier to center the label in the LWButton.
&nbsp;&nbsp;&nbsp; this.label = "&nbsp; " + rawLabel + "&nbsp; ";
&nbsp;&nbsp;&nbsp; this.invalidate();
&nbsp;&nbsp;&nbsp; this.repaint();
&nbsp; }//end setLabel()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following overridden paint() method paints the&nbsp;
&nbsp; // LWButton&nbsp; The appearance of the LWButton depends on
&nbsp; // the pressed and gotFocus flags.&nbsp; When pressed is true,
&nbsp; // the LWButton is rendered to appear that it has been
&nbsp; // pressed into the screen.&nbsp; When it is false, the
&nbsp; // LWButton is rendered to appear that it is protruding
&nbsp; // from the screen.&nbsp; When gotFocus is true, the
&nbsp; // text is rendered in bold italics as the visual&nbsp;
&nbsp; // indication that the LWButton has the focus.&nbsp; When
&nbsp; // gotFocus is false, the text is rendered plain.
&nbsp;&nbsp;
&nbsp; //Note also that the position of the text also depends
&nbsp; // on the pressed flag.&nbsp; When pressed is false, the text
&nbsp; // is rendered slightly up and to the left of its
&nbsp; // pressed position.&nbsp; This enhances the illusion that
&nbsp; // the button is being pressed into the screen.
&nbsp;&nbsp;
&nbsp; //The color of the LWButton object is tied to the
&nbsp; // background color.&nbsp; When protruding, the button is&nbsp;
&nbsp; // rendered one shade brighter than the background.&nbsp;&nbsp;
&nbsp; // When pressed, the LWButton is rendered the same color
&nbsp; // as the background.

&nbsp; //The actual size of the LWButton object is determined&nbsp;
&nbsp; // by the layout manager which may or may not honor the
&nbsp; // preferred and minimum size specifications.
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g) {//paints the LWButton
&nbsp;&nbsp;&nbsp; //If LWButton has the focus, display the text in
&nbsp;&nbsp;&nbsp; // bold italics.&nbsp; Otherwise display plain.
&nbsp;&nbsp;&nbsp; if(gotFocus)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(getFont().getName(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Font.BOLD | Font.ITALIC,getFont().getSize()));
&nbsp;&nbsp;&nbsp; else g.setFont(new Font(getFont().getName(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Font.PLAIN,getFont().getSize()));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; if(pressed){ //if the pressed flag is true
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getBackground());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.fillRect(//fill rectangle with background color
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw shadows three shades darker than background
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getBackground().darker().darker().darker());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that three offset rectangles are drawn to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // produce a shadow effect on the left and top of
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the rectangle.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(//
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1,1,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2,2,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now draw a faint outline on the bottom and right of
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the rectangle.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getBackground().darker());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -1,-1,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now center the text in the LWButton object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontMetrics fm = getFontMetrics(getFont());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getForeground());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(label,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSize().width/2 - fm.stringWidth(label)/2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSize().height/2 + fm.getAscent()/2);
&nbsp;&nbsp;&nbsp; }//end if(pressed)
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; else{//not pressed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Make the protruding LWButton object one shade
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // brighter than the background.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getBackground().brighter());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.fillRect(//and fill a rectangle
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,this.getSize().width,this.getSize().height);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Set the color for the shadows three shades darker
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // than the background.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getBackground().darker().darker().darker());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Draw two offset rectangles to create shadows on&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the right and bottom.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -1,-1,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -2,-2,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Highlight the left and top two shades brighter&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // than the background, one shade brighter than the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // color of the LWButton itself which is one shade
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // brighter than the background.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getBackground().brighter().brighter());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawRect(//
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,this.getSize().width,this.getSize().height);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Now place the text in the LWButton object shifted
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // by two pixels up and to the left.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FontMetrics fm = getFontMetrics(getFont());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setColor(getForeground());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(label,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSize().width/2 - fm.stringWidth(label)/2 - 2,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSize().height/2 + fm.getAscent()/2 - 2);
&nbsp;&nbsp;&nbsp; }//end else
&nbsp; }//end overridden paint() method
&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; class MyKeyListenerClass extends KeyAdapter{
&nbsp;&nbsp;&nbsp; /*
&nbsp;&nbsp;&nbsp; This class is used to cause the LWButton to behave as
&nbsp;&nbsp;&nbsp; if a mouse event occurred on it whenever it has the
&nbsp;&nbsp;&nbsp; focus and the space bar is pressed and then released.
&nbsp;&nbsp;&nbsp; Holding the space bar down generates repetitive&nbsp;
&nbsp;&nbsp;&nbsp; events due to the repeat feature of the keyboard (this
&nbsp;&nbsp;&nbsp; would need to be disabled in a real program).
&nbsp;&nbsp;&nbsp; */
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void keyPressed(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Generate mousePressed() event when the space bar&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is pressed by invoking the mousePressed() method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // of the MouseListener object, and passing an event&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object that impersonates a mouse pressed event.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.VK_SPACE)&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mouseListener.mousePressed(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>(),MouseEvent.MOUSE_PRESSED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp; }//end keyPressed()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void keyReleased(KeyEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Generate mouseReleased() event when the space bar&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is released by invoking the mouseReleased() method
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // of the MouseListener object, and passing an event&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object that impersonates a mouse released event.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getKeyCode() == KeyEvent.VK_SPACE)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mouseListener.mouseReleased(new MouseEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>(),MouseEvent.MOUSE_RELEASED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0,0,0,0,0,false));
&nbsp;&nbsp;&nbsp; }//end keyReleased()
&nbsp; }//end MyKeyListenerClass
&nbsp;&nbsp;
&nbsp; //-----------------------------------------------------//

&nbsp; class MyFocusListenerClass implements FocusListener{
&nbsp;&nbsp;&nbsp; /*
&nbsp;&nbsp;&nbsp; This methods of this class are invoked when a focus&nbsp;
&nbsp;&nbsp;&nbsp; event occurs on the LWButton.&nbsp; This happens when the&nbsp;
&nbsp;&nbsp;&nbsp; requestFocus() method is called inside the&nbsp;
&nbsp;&nbsp;&nbsp; mouseReleased() event handler for the LWButton.&nbsp; This&nbsp;
&nbsp;&nbsp;&nbsp; sets or clears the gotFocus flag that is used to cause
&nbsp;&nbsp;&nbsp; the text renderer to modify the text to indicate that&nbsp;
&nbsp;&nbsp;&nbsp; the LWButton has the focus. When the LWButton has the&nbsp;
&nbsp;&nbsp;&nbsp; focus, the text is rendered in bold italics.&nbsp;&nbsp;&nbsp; */
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void focusGained(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = true; //set the gotFocus flag&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().repaint();
&nbsp;&nbsp;&nbsp; }//end focusGained()&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void focusLost(FocusEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gotFocus = false; //clear the gotFocus flag&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().repaint();
&nbsp;&nbsp;&nbsp; }//end focusLost()
&nbsp; }//end MyFocusListenerClass

&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; class MyMouseListenerClass extends MouseAdapter{
&nbsp;&nbsp;&nbsp; /*
&nbsp;&nbsp;&nbsp; The&nbsp; purpose of this methods in this class is threefold:
&nbsp;&nbsp;&nbsp; 1.&nbsp; Modify the appearance of the LWButton object when
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the user clicks on it.
&nbsp;&nbsp;&nbsp; 2.&nbsp; Invoke the actionPerformed() method in the Listener&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; object that is registered to listen to this&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LWButton object.
&nbsp;&nbsp;&nbsp; 3.&nbsp; Request focus for the LWButton.&nbsp;&nbsp;&nbsp;&nbsp; */&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //When the mouse is pressed on the LWButton object,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // set the "pressed" state of the object to true&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and force it to be repainted to change its&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // appearance. When pressed is true, the button is
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // rendered as though it has been pressed into the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // screen.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pressed = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().repaint();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end mousePressed()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; public void mouseReleased(MouseEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //When the mouse is released on the LWButton object:
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 1. Invoke the actionPerformed() method in the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; Listener objects that are registered to&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; listen to the LWButton object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 2. Confirm that the "pressed" state is true and&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; if so, set it to false and force the object&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; to be repainted to change its appearance.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; When pressed is false, the button is rendered
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; so as to appear to protrude out of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp;&nbsp; screen.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // 3. Request the focus for the LWButton object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //if an ActionListener is registered
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(actionListener != null) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the actionPerformed() method on the list
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // of listener objects registered on the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // LWButton object.&nbsp; Instantiate and pass an
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ActionEvent object as a parameter.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; actionListener.actionPerformed(new ActionEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>(), ActionEvent.ACTION_PERFORMED, label));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if on actionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(pressed == true) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pressed = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().requestFocus();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().invalidate();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getThis</b>().repaint();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if on pressed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; }//end mouseReleased()
&nbsp; }//end MyMouseListenerClass
&nbsp;&nbsp;
}//end class SampProg143
//=======================================================//</pre></td></tr></table>
.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/* File SampProg144.java Copyright 1997, R.G.Baldwin
From lesson 180.

This program was designed specifically to test the class
named SampProg143 and requires access to that class.
The classed named SampProg143 is a lightweight 3D button&nbsp;
class which replicates the functionality of the&nbsp;
LWButton02 class, but eliminates the possibility of a
memory leak that exists with LWButton02.

====================

You will probably need to compile and run the program to
really appreciate what it does.

The purpose of the program is to exercise the lightweight
button class named SampProg143 under a BorderLayout
manager.

The BorderLayout manager does not honor both dimensions
of the preferred size of a component in any of its&nbsp;
five positions. Components in the North and South&nbsp;
positions probably have the vertical dimension of their&nbsp;
preferred size honored.

Similarly, components in the East and West positions
probably have the horizontal dimension of their preferred
size honored.

Neither dimension of the preferred size is honored for
components in the Center.&nbsp; Components in the center
simply occupy all of the available space.

This program places three lightweight buttons of type
SampProg143, one heavyweight button of type Button, and
a Label object in a Frame object with a ten-pixel gap
between all components.

The lightweight buttons occupy the East, North, and Center
positions in the Frame.

The heavyweight button occupies the West position.

The Label occupies the South position.

When you click on any of the four buttons, the color of
the Label toggles between red and green.

You can experiment with the manner in which the preferred
size is or is not honored by resizing the Frame.

Note that this program makes use of a named inner class.

This program was tested using JDK 1.1.3 under Win95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;
//=======================================================//
public class SampProg144 extends Frame{
&nbsp; Label myLabel;
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new SampProg144();//instantiate object of this type
&nbsp; }//end main

//-------------------------------------------------------//
&nbsp; public SampProg144(){//constructor
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; //Set background to a dull yellow
&nbsp;&nbsp;&nbsp; this.setBackground(new Color(128,128,0));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a borderLayout object with gaps and apply
&nbsp;&nbsp;&nbsp; // it to the Frame object.
&nbsp;&nbsp;&nbsp; BorderLayout myLayout = new BorderLayout();
&nbsp;&nbsp;&nbsp; myLayout.setHgap(10);
&nbsp;&nbsp;&nbsp; myLayout.setVgap(10);
&nbsp;&nbsp;&nbsp; this.setLayout(myLayout);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate three lightweight buttons
&nbsp;&nbsp;&nbsp; SampProg143 eastLWButton = new SampProg143("East");
&nbsp;&nbsp;&nbsp; SampProg143 northLWButton = new SampProg143("North");
&nbsp;&nbsp;&nbsp; SampProg143 centerLWButton = new SampProg143("Center");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Label object and initialize it to green
&nbsp;&nbsp;&nbsp; myLabel = new Label("Label Object");
&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a heavyweight button object
&nbsp;&nbsp;&nbsp; Button myButton = new Button("Heavyweight Button");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add all five components to the Frame object.
&nbsp;&nbsp;&nbsp; this.add(eastLWButton,"East");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.add(northLWButton,"North");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.add(centerLWButton,"Center");
&nbsp;&nbsp;&nbsp; this.add(myButton,"West");
&nbsp;&nbsp;&nbsp; this.add(myLabel,"South");

&nbsp;&nbsp;&nbsp; //Instantiate an ActionListener object
&nbsp;&nbsp;&nbsp; MyActionListener myActionListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Register the ActionListener object on all four
&nbsp;&nbsp;&nbsp; // of the buttons.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; eastLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; northLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; centerLWButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp; myButton.addActionListener(myActionListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setSize(300,200);
&nbsp;&nbsp;&nbsp; this.setVisible(true);

&nbsp;&nbsp;&nbsp; //Anonymous inner-class listener to terminate program
&nbsp;&nbsp;&nbsp; this.addWindowListener(new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);}});//end addWindowListener
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //Inner Class to respond to action events.&nbsp; Make this an
&nbsp; // inner class for easy access to myLabel.
&nbsp; class MyActionListener implements ActionListener{
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(myLabel.getBackground() == Color.green)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.red);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else myLabel.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; }//end actionPerformed
&nbsp; }//end class MyActionListener
}//end class SampProg144
//=======================================================//</pre></td></tr></table>
Q - Write a Java application that meets the following specification.
<br>&nbsp;
<table border bgcolor="#ffff00" ><tr><td bgcolor="#ffff80"><pre>/*File SampProg145.java
From lesson 180.

A reader has pointed out that the program named LWButton02
contains code that could lead to a memory leak because the
object contains an instance variable named refToThis that&nbsp;
contains a reference to itself.

Without viewing the solution that follows, write a program
to demonstrate that this is not a problem.

The question was whether having a reference to the object
embedded in the object would prevent the object from&nbsp;
becoming eligible for garbage collection and result in&nbsp;
a memory leak.

This program was designed to answer that question.&nbsp; In&nbsp;
this program, an instance variable named refToThis is&nbsp;
assigned the value of the this reference causing it to
become a reference to itself.

In addition, another instance variable is assigned a&nbsp;
reference to an object of a different class creating an
embedded reference to another object.

After an object of this class is instantiated, the
reference to the object is set to null, making the outer
object eligible for garbage collection.&nbsp; Then an attempt
to force garbage collection is made and a two-second
time delay is executed.

The finalize methods for both classes are overridden to
display a message.&nbsp; This makes it possible to determine
when garbage collection takes place.

Several different scenarios are tested.

This program illustrates that when the outer object&nbsp;
becomes eligible for garbage collection, embedded objects
automatically become eligible for garbage collection
with no requirement on the part of the programmer to set
the references to those embedded objects to null.&nbsp;&nbsp;

In this program, when the outer object is garbage&nbsp;
collected, garbage collection of the embedded object&nbsp;
follows shortly thereafter (because gargage collection of&nbsp;
all eligible objects was forced).

Apparently if the object contains an embedded reference to&nbsp;
itself, this reference is treated the same as any
reference to an embedded object.&nbsp; The embedded reference&nbsp;
to the object does not prevent the object from becoming
eligible for garbage collection.

Tested using JDK 1.1.3 under Win95.

The output from running this program was:
&nbsp;&nbsp;
&nbsp;a&nbsp; = new SampProg145();
In Xstr: SampProg145@1cc742 Embedded@1cc744 Nmbr = 1
&nbsp;a&nbsp; = null;
In SampProg145 finalize: SampProg145@1cc742 Number = 0
In Embedded finalize: Embedded@1cc744
&nbsp;a&nbsp; = new SampProg145();
In Xstr: SampProg145@1cc71b Embedded@1cc70d Nmbr = 1
&nbsp;b&nbsp; = a;
&nbsp;a&nbsp; = null;
&nbsp;b&nbsp; = null;
In SampProg145 finalize: SampProg145@1cc71b Number = 0
In Embedded finalize: Embedded@1cc70d
&nbsp;a&nbsp; = new SampProg145();
In Xstr: SampProg145@1cc707 Embedded@1cc704 Nmbr = 1
&nbsp;a&nbsp; = new SampProg145();
In Xstr: SampProg145@1cc75c Embedded@1cc75b Nmbr = 2
In SampProg145 finalize: SampProg145@1cc707 Number = 1
In Embedded finalize: Embedded@1cc704
&nbsp;a&nbsp; = null;
In SampProg145 finalize: SampProg145@1cc75c Number = 0
In Embedded finalize: Embedded@1cc75b&nbsp;&nbsp;

Based on a test program from Kees.
**********************************************************/

import java.awt.*;
import java.util.*;
//=======================================================//
//Class used to embed an object inside of another object
class Embedded{
&nbsp; int data = 10;
&nbsp; //-----------------------------------------------------//
&nbsp; protected void finalize() throws Throwable{
&nbsp;&nbsp;&nbsp; System.out.println("In Embedded finalize: " + this);
&nbsp; }//end finalize
}//end class Embedded
//=======================================================//

public class SampProg145{
&nbsp; static int&nbsp; numberOfInstances;//object counter
&nbsp; SampProg145 refToThis; //reference to this object
&nbsp; Embedded embeddedObj; //reference to embedded object
&nbsp; //-----------------------------------------------------//

&nbsp; public SampProg145(){//constructor
&nbsp;&nbsp;&nbsp; //Embed an object in this object
&nbsp;&nbsp;&nbsp; embeddedObj = new Embedded();
&nbsp;&nbsp;&nbsp; refToThis = this;//create ref to this object
&nbsp;&nbsp;&nbsp; numberOfInstances++;//increment object counter
&nbsp;&nbsp;&nbsp; System.out.println("In Xstr: " + refToThis + " "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + embeddedObj + " Nmbr = " + numberOfInstances);
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; static void delayAndGC()&nbsp; {
&nbsp;&nbsp;&nbsp; System.gc();//try to force garbage collection
&nbsp;&nbsp;&nbsp; try&nbsp;&nbsp; {Thread.sleep(2000);}//delay two seconds
&nbsp;&nbsp;&nbsp; catch (Exception e) {}&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end delayAndGC
&nbsp; //-----------------------------------------------------//

&nbsp; protected void finalize() throws Throwable{
&nbsp;&nbsp;&nbsp; numberOfInstances--;
&nbsp;&nbsp;&nbsp; System.out.println("In SampProg145 finalize: " + this +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; " Number = " + numberOfInstances);
&nbsp; }//end finalize()
&nbsp; //-----------------------------------------------------//

&nbsp; public static void main(String args[]){
&nbsp;&nbsp;&nbsp; SampProg145 a , b;

// There is no memory leak if after every test the&nbsp;
// number equals 0 !

// Test 1.
&nbsp;&nbsp;&nbsp; System.out.println(" a&nbsp; = new SampProg145();");
&nbsp;&nbsp;&nbsp; a&nbsp; = new SampProg145(); SampProg145.delayAndGC();
&nbsp;&nbsp;&nbsp; System.out.println(" a&nbsp; = null;");
&nbsp;&nbsp;&nbsp; a&nbsp; = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SampProg145.delayAndGC();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

// Test 2.
&nbsp;&nbsp;&nbsp; System.out.println(" a&nbsp; = new SampProg145();");
&nbsp;&nbsp;&nbsp; a&nbsp; = new SampProg145(); SampProg145.delayAndGC();
&nbsp;&nbsp;&nbsp; System.out.println(" b&nbsp; = a;");
&nbsp;&nbsp;&nbsp; b&nbsp; = a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SampProg145.delayAndGC();&nbsp;
&nbsp;&nbsp;&nbsp; System.out.println(" a&nbsp; = null;");
&nbsp;&nbsp;&nbsp; a&nbsp; = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SampProg145.delayAndGC();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.out.println(" b&nbsp; = null;");
&nbsp;&nbsp;&nbsp; b&nbsp; = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SampProg145.delayAndGC();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

// Test 3.
&nbsp;&nbsp;&nbsp; System.out.println(" a&nbsp; = new SampProg145();");
&nbsp;&nbsp;&nbsp; a&nbsp; = new SampProg145(); SampProg145.delayAndGC();
&nbsp;&nbsp;&nbsp; System.out.println(" a&nbsp; = new SampProg145();");
&nbsp;&nbsp;&nbsp; a&nbsp; = new SampProg145(); SampProg145.delayAndGC();
&nbsp;&nbsp;&nbsp; System.out.println(" a&nbsp; = null;");
&nbsp;&nbsp;&nbsp; a&nbsp; = null;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SampProg145.delayAndGC();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end main()
&nbsp; //-----------------------------------------------------//
}//end class SampProg145</pre></td></tr></table>
-end-<!--end--></body></html>