<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="author" content="richard g. baldwin">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000FF" vlink="#0000FF" lang="EN-US">
<!--start-->
<div class=Section1>
<center>
<h2>
<!--title-->Java 2D Graphics, Texture Fill<!--endtitle--></h2></center>
<i>by Richard G. Baldwin</i>
<br><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i>
<p>Java Programming, Lecture Notes # 316
<p>March 19, 2000
<ul style='margin-top:0in' type=disc>
<li>
<a href="#_Introduction">Introduction</a></li>

<li>
<a href="#_The_Three_Paint">The Three Paint Classes</a></li>

<li>
<a href="#_The_TexturePaint_class">The TexturePaint Class</a></li>

<li>
<a href="#_The_BufferedImage_Class">The BufferedImage Class</a></li>

<li>
<a href="#_Sample_Program_BufferedImage01">Sample Program BufferedImage01</a></li>

<li>
<a href="#_Sample_Program_PaintTexture01">Sample Program PaintTexture01</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listings</a></li>
</ul>

<div style="text-align:center">
<center>
<hr size=3 width="100%" align=center></center>
</div>

<center>
<h2>
<a NAME="_Introduction"></a>Introduction</h2></center>
In an earlier lesson, I explained that the <b>Graphics2D</b> class extends
the <b>Graphics</b> class to provide more sophisticated control over geometry,
coordinate transformations, color management, and text layout. Beginning
with JDK 1.2, <b>Graphics2D </b>is the fundamental class for rendering
two-dimensional shapes, text and images.
<p>I also explained that without understanding the behavior of other classes
and interfaces such as <b>Shape</b>, <b>AffineTransform</b>, <b>GraphicsConfiguration</b>,
<b>PathIterator</b>,
and <b>Stroke</b>, it is not possible to fully understand the inner workings
of the <b>Graphics2D</b> class.
<h3>
<span style='color:red'>What has been covered previously?</span></h3>
Earlier lessons have explained a number of Java 2D concepts, including
<b>Shape</b>,
<b>AffineTransform</b>,
and <b>PathIterator</b>.&nbsp; Before, I can explain the <b>Stroke </b>class,
I need to explain how to fill a
<b>Shape</b>.&nbsp; Earlier lessons showed
you how to fill a <b>Shape</b> with a solid color and with a color gradient.
<h3>
<span style='color:red'>How to fill, in general</span></h3>
I explained in an earlier lesson that if you want to <i>fill</i> a <b>Shape</b>
object before you draw it, you can accomplish this with the following two
steps:
<ul>
<li>
Invoke <b>setPaint()</b> on the <b>Graphics2D</b> object, passing a reference
to an object of a class that implements the <b>Paint</b> interface as a
parameter.</li>

<li>
Invoke the <b>fill()</b> method on the <b>Graphics2D</b> object, passing
a reference to the <b>Shape</b> object that you want to fill as a parameter.</li>
</ul>
This lesson will show you how to fill a <b>Shape</b> with a tiled version
of an image, otherwise known as a texture.
<center>
<h2>
<a NAME="_The_Three_Paint"></a>The Three Paint Classes</h2></center>
In a previous lesson, I explained that the Java2D API in JDK 1.2.2 provides
three classes that implement the <b>Paint</b> interface (and you can also
define your own):
<ul style='margin-top:0in' type=disc>
<li>
<b>Color</b></li>

<li>
<b>GradientPaint</b></li>

<li>
<b>TexturePaint</b></li>
</ul>

<h3>
<span style='color:red'>The Color class</span></h3>
The <b>Color</b> class can be used to fill a <b>Shape</b> object with a
solid color.&nbsp; That was the topic of an earlier lesson.
<h3>
<span style='color:red'>The GradientPaint class</span></h3>
The <b>GradientPaint</b> class can be used to fill a <b>Shape</b> with
a color gradient.&nbsp; That also was the topic of an earlier lesson.
<center>
<h2>
<a NAME="_The_TexturePaint_class"></a>The TexturePaint class</h2></center>
The <b>TexturePaint</b> class can be used to fill a <b>Shape</b> with a
tiled version of a <b>BufferedImage</b> object.&nbsp; That is the topic
of this lesson.
<p>At this point, we need to learn a little more about the class named
<b>TexturePaint</b>.&nbsp;
Here is what Sun has to say about the class.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF80" >
<tr>
<td WIDTH="595" style="width:356.7pt;background:aqua;padding:.75pt .75pt .75pt .75pt">“The
<b>TexturePaint</b>
class provides a way to fill a <b>Shape</b> with a texture that is specified
as a <b>BufferedImage</b>. The size of the <b>BufferedImage</b> object
should be small because the <b>BufferedImage</b> data is copied by the
<b>TexturePaint</b>
object.&nbsp;
<p>At construction time, the texture is anchored to the upper left corner
of a <b>Rectangle2D</b> that is specified in user space. Texture is computed
for locations in the device space by conceptually replicating the specified
<b>Rectangle2D</b>
infinitely in all directions in user space and mapping the <b>BufferedImage</b>
to each replicated <b>Rectangle2D</b>.”</td>
</tr>
</table>

<p>So, we see immediately that we need to know something about the <b>BufferedImage</b>
class.
<center>
<h2>
<a NAME="_The_BufferedImage_Class"></a>The BufferedImage Class</h2></center>
The <b>BufferedImage </b>class extends the <b>Image </b>class in JDK 1.2.Here
is what Sun has to say about <b>BufferedImage</b>.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF80" >
<tr>
<td WIDTH="595" style="width:356.7pt;background:aqua;padding:.75pt .75pt .75pt .75pt">“The
<b>BufferedImage</b>
subclass describes an <b>Image</b> with an accessible buffer of image data.
A <b>BufferedImage</b> is comprised of a <b>ColorModel</b> and a <b>Raster</b>
of image data. The number and types of bands in the
<b>SampleModel</b>
of the <b>Raster</b> must match the number and types required by the <b>ColorModel</b>
to represent its color and alpha components. All <b>BufferedImage</b> objects
have an upper left corner coordinate of (0, 0). Any <b>Raster</b> used
to construct a <b>BufferedImage</b> must therefore have minX=0 and minY=0.”</td>
</tr>
</table>

<p>All in all, this looks pretty complicated.&nbsp; Fortunately, we don’t
need to be too concerned about many of the technical details.
<h3>
<span style='color:red'>Getting a BufferedImage</span></h3>
There are a couple of ways that you can get a <b>BufferedImage</b> to use
to fill your <b>Shape</b>.&nbsp; One way is to read a file containing an
image.&nbsp; I plan to cover that approach in subsequent lessons that deal
with image processing.
<p>Another approach is to invoke the <b>createImage() </b>method on any
object that extends the <b>Component</b> class.&nbsp; This will return
a reference to an object of type <b>Image,</b> which can be downcast to
<b>BufferedImage</b>.&nbsp;
This is the approach used in this lesson,
<h3>
<span style='color:red'>The createImage() method</span></h3>
Here is what Sun has to say about the <b>createImage()</b> method.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF80" >
<tr>
<td WIDTH="595" style="width:356.7pt;background:aqua;padding:.75pt .75pt .75pt .75pt">public
Image <b>createImage</b>(
<br>&nbsp; int width,
<br>&nbsp; int height)
<p>Creates an off-screen drawable image to be used for double buffering.
<p>Parameters:
<br>&nbsp; width - the specified width.
<br>&nbsp; height - the specified height.
<p>Returns:&nbsp; an off-screen drawable image, which can be used for double
buffering.</td>
</tr>
</table>

<p>As mentioned above, the <b>BufferedImage</b> class extends the <b>Image</b>
class in JDK 1.2.
<h3>
<span style='color:red'>You can cast the Image to a BufferedImage</span></h3>
Here is what <u>Java Foundation Classes in a Nutshell</u>, by David Flanagan,
has to say about the <b>createImage()</b> method.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF80" >
<tr>
<td WIDTH="595" style="width:356.7pt;background:aqua;padding:.75pt .75pt .75pt .75pt">“This
method was first introduced in Java 1.0; it returns an <b>Image</b> object.&nbsp;
In Java 1.2, however, the returned <b>Image</b> object is always an instance
of <b>BufferedImage</b> so you can safely cast it.
<p>After you have created an empty <b>BufferedImage</b> you can call its
<b>createGraphics()</b>
method to obtain a <b>Graphics2D</b> object.
<br>...
<br>Anything you can draw on the screen, you can draw into a <b>BufferedImage</b>.”</td>
</tr>
</table>

<p>The first sample program shows how to create and display a <b>BufferedImage</b>
object.
<p>The second program shows how to create a <b>BufferedImage</b> program
and use it to fill a <b>Shape</b> object.
<center>
<h2>
<a NAME="_Sample_Program_BufferedImage01"></a>Sample Program BufferedImage01</h2></center>
This program shows how to create and display a <b>BufferedImage</b> object
without a requirement for an external file containing an image.
<p>A significantly reduced screen shot of the output of this program is
shown below.
<p><img SRC="Java316a.gif" </P height=330 width=330>
<h3>
<span style='color:red'>The GUI is a Frame object</span></h3>
The program draws a four-inch by four-inch <b>Frame</b> on the screen.&nbsp;
It translates the origin to the center of the <b>Frame</b>.&nbsp; Then
it draws a pair of X and Y-axes centered on the new origin.
<p>Then the program creates a <b>BufferedImage</b> object that is three
inches on each side.&nbsp; It gets a <b>Graphics2D</b> context on the <b>BufferedImage</b>.
<h3>
<span style='color:red'>Draw a green rectangle on the BufferedImage</span></h3>
Once the <b>Graphics2D</b> context is available, the program draws a rectangle
on the context the same size as the <b>BufferedImage</b>.&nbsp; Then it
fills the rectangle with the solid color green.
<h3>
<span style='color:red'>Draw a red circle on the BufferedImage</span></h3>
Then the program draws a filled circle on the context that just fits inside
the dimensions of the <b>BufferedImage</b> object.&nbsp; The circle is
filled with the solid color red.&nbsp; The circle covers the green rectangle
leaving some green exposed around the edges.
<h3>
<span style='color:red'>Draw the BufferedImage on the Frame</span></h3>
Finally, the program draws the <b>BufferedImage</b> object on the <b>Frame</b>,
centered on the origin.
<p>The program was tested using JDK 1.2.2 under WinNT Workstation 4.0
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF80" >
<tr>
<td WIDTH="595" style="width:356.7pt;background:aqua;padding:.75pt .75pt .75pt .75pt">This
discussion of dimensions in inches on the screen depends on the method
named <b>getScreenResolution()</b> returning the correct value.&nbsp; However,
the <b>getScreenResolution() </b>method always seems to return 120 on my
computer regardless of the actual screen resolution settings.</td>
</tr>
</table>

<h3>
<span style='color:red'>Will discuss in fragments</span></h3>
I will discuss this program in fragments.&nbsp; The controlling class and
the constructor for the GUI class are essentially the same as you have
seen in several previous lessons, so, I won’t repeat that discussion here.&nbsp;
You can view that material in the complete listing of the program at the
end of the lesson.
<p>All of the interesting action takes place in the overridden <b>paint()</b>
method, so I will begin the discussion there.
<h3>
<span style='color:red'>Overridden paint() method</span></h3>
The beginning portions of the overridden <b>paint()</b> method should be
familiar to you by now as well.&nbsp; So, I am going to let the comments
in the <a href="Java316-fig01.htm">Figure 1</a> speak for themselves.
<h3>
<span style='color:red'>Get a BufferedImage object</span></h3>
<a href="Java316-fig02.htm">Figure 2</a> invokes the <b>createImage()</b>
method on the <b>Frame</b> (this) to get a reference to an object of type
<b>Image</b>.&nbsp;
The <b>Image</b> is a square, three inches on each side.
<p>This reference is immediately downcast to <b>BufferedImage</b> and stored
in a reference variable of type <b>BufferedImage</b> named <b>bufImg</b>.
<h3>
<span style='color:red'>Get a Graphics2D context on the BufferedImage</span></h3>
<a href="Java316-fig03.htm">Figure 3</a> invokes the <b>createGraphics()</b>
method on the <b>BufferedImage</b> to get a <b>Graphics2D</b> context on
the <b>BufferedImage</b>.
<p>Once I have the <b>Graphics2D</b> context, I can draw pictures on the
<b>BufferedImage</b>
just as though I am drawing on the screen.
<h3>
<span style='color:red'>Draw a green square on the BufferedImage</span></h3>
<a href="Java316-fig04.htm">Figure 4</a> uses familiar code to draw a square
on the <b>BufferedImage</b>.&nbsp; The square is the same size as the <b>BufferedImage</b>,
and is filled with solid green color.
<h3>
<span style='color:red'>Draw a red circle on the BufferedImage</span></h3>
Continuing with familiar code, <a href="Java316-fig05.htm">Figure 5</a>
draws a filled red circle on the <b>BufferedImage</b>.&nbsp; This circle
covers the green square giving us a green square containing a red filled
circle.
<h3>
<span style='color:red'>Render the BufferedImage on the Frame</span></h3>
It is important to understand that up to this point, I have simply been
creating a virtual image in the computer’s memory.&nbsp; Nothing has been
done so far to cause this image to be visible to a human observer.
<p>One common use of <b>BufferedImage</b> is to build virtual images in
memory and to blast them to the screen as quickly as possible to produce
smooth animation.&nbsp; This can sometimes eliminate the flicker that often
occurs when we attempt to produce animation by drawing directly on the
screen.
<p>In this case, all I want to do is to see the image that I have constructed
in the computer’s memory.&nbsp; I accomplish that in <a href="Java316-fig06.htm">Figure
6</a>, which invokes the <b>drawImage()</b> method of the <b>Graphics2D</b>
class to render the <b>BufferedImage </b>on the screen.
<h3>
<span style='color:red'>A red filled circle on a green square</span></h3>
If you compile and run this program, you should see a filled red circle
on a green square.&nbsp; The outermost edges of the circle coincide with
the edges of the square.&nbsp; If the actual resolution of your screen
is given by <b>ds</b>, the size of the square should be three inches on
each side.
<h3>
<span style='color:red'>How does this differ from previous programs</span></h3>
Although it may not be obvious from the visual presentation, this is significantly
different from the previous programs that have drawn circles on the screen
and filled them.
<p>This program did not draw a circle on the screen.&nbsp; Rather, the
circle was drawn and filled in the computer’s memory and transferred to
the screen in the final rendering process.
<h3>
<span style='color:red'>Why go to all of this trouble</span></h3>
This does seem like a hard way to get a filled red circle on the screen.&nbsp;
However, the purpose of this program was not to display a filled red circle
on the screen.&nbsp; The purpose was to show you how to create a <b>BufferedImage</b>
under program control and to draw something on that <b>BufferedImage</b>.
<p>The rendering of the <b>BufferedImage</b> on the screen was simply a
little icing on the cake.
<p>The next sample program will need a <b>BufferedImage</b> object, and
you now know how to create one without the need for an external file containing
an image.
<p>You can view a complete listing of the program at the end of the lesson.
<center>
<h2>
<a NAME="_Sample_Program_PaintTexture01"></a>Sample Program PaintTexture01</h2></center>
This program illustrates the use of a <b>TexturePaint</b> object to fill
a relatively large circle with small tiled instances of a <b>BufferedImage</b>
object.

<p>A significantly reduced screen shot of the output of this program is
shown below.
<p><img SRC="Java316b.gif" </P height=330 width=330>


<p>The <b>BufferedImage</b> object has a red filled circle on a green square
the same as in the previous program.
<p>The program uses code to create the <b>BufferedImage</b> object to avoid
the need to provide an auxiliary image file to accompany this lesson.
<h3>
<span style='color:red'>As usual, the GUI is a Frame object</span></h3>
The program draws a four-inch by four-inch <b>Frame</b> on the screen.&nbsp;
It translates the origin to the center of the <b>Frame</b>.&nbsp; Then
it draws a pair of X and Y-axes centered on the new origin.
<p>Then it fills a two-inch diameter circle with small tiled versions of
the <b>BufferedImage</b> object described above.
<p>Finally, the program draws the filled two-inch diameter circle on the
<b>Frame</b>,
centered on the origin.
<p>The program was tested using JDK 1.2.2 under WinNT Workstation 4.0
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF80" >
<tr>
<td WIDTH="595" style="width:356.7pt;background:aqua;padding:.75pt .75pt .75pt .75pt">This
discussion of dimensions in inches on the screen depends on the method
named <b>getScreenResolution()</b> returning the correct value.&nbsp; However,
the <b>getScreenResolution() </b>method always seems to return 120 on my
computer regardless of the actual screen resolution settings.</td>
</tr>
</table>

<h3>
<span style='color:red'>Will discuss in fragments</span></h3>
I will discuss this program in fragments.&nbsp; The controlling class and
the constructor for the GUI class are essentially the same as you have
seen in several previous lessons, so, I won’t repeat that discussion here.&nbsp;
You can view that material in the complete listing of the program at the
end of the lesson.
<p>All of the interesting action takes place in the overridden <b>paint()</b>
method, so I will begin the discussion there.
<h3>
<span style='color:red'>Overridden paint() method</span></h3>
The beginning portions of the overridden <b>paint()</b> method should be
familiar to you by now as well.&nbsp; So, I am going to let the comments
in <a href="Java316-fig07.htm">Figure 7</a> speak for themselves.
<h3>
<span style='color:red'>The main Shape object&nbsp;</span></h3>
<a href="Java316-fig08.htm">Figure 8</a> instantiates the main <b>Shape</b>
object.&nbsp; This is a circle, two inches in diameter.&nbsp; This circle
will be filled with a tile pattern constructed from the <b>BufferedImage</b>
object, which is a red ball on a green square background.
<h3>
<span style='color:red'>The interesting part</span></h3>
That brings us to the interesting part.&nbsp; <a href="Java316-fig09.htm">Figure
9</a> declares and initializes a <b>double</b> variable named <b>tileSize</b>
that will be used to establish the size of the tiles, in inches, used to
fill the circle.
<h3>
<span style='color:red'>Controlling the size of the tiles</span></h3>
This variable is used to instantiate a new <b>Rectangle2D.Double</b> object
that is a square, 0.25 inches on each side.&nbsp; As we will see later,
the <b>BufferedImage</b> object will be automatically scaled to fit this
rectangle, and a large number of such rectangles will be used to fill the
circle.
<h3>
<span style='color:red'>The TexturePaint class</span></h3>
At this point, we need to learn a little more about the <b>TexturePaint</b>
class.&nbsp; This is what Sun has to say about the constructor for this
class.
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF80" >
<tr>
<td WIDTH="595" style="width:356.7pt;background:aqua;padding:.75pt .75pt .75pt .75pt">public
<b>TexturePaint</b>(
<br>&nbsp; BufferedImage txtr,
<br>&nbsp; Rectangle2D anchor)
<p>Constructs a TexturePaint object.
<p>Parameters:
<ul style='margin-top:0in' type=disc>
<li>
txtr - the BufferedImage object with the texture used for painting</li>

<li>
anchor - the Rectangle2D in user space used to anchor and replicate the
texture</li>
</ul>
</td>
</tr>
</table>

<p>As you can see, the constructor takes two parameters.&nbsp; The first
parameter is a reference to a <b>BufferedImage</b> object that will be
used to produce the tiles to fill the <b>Shape</b>.
<p>The second parameter is a rectangle that is used to anchor and replicate
the texture.&nbsp; Sun has this to say about the actual process of filling
the <b>Shape.</b>
<br>&nbsp;
<table BORDER CELLSPACING=3 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF80" >
<tr>
<td WIDTH="595" style="width:356.7pt;background:aqua;padding:.75pt .75pt .75pt .75pt">“Texture
is computed for locations in the device space by conceptually replicating
the specified <b>Rectangle2D</b> infinitely in all directions in user space
and mapping the <b>BufferedImage</b> to each replicated <b>Rectangle2D</b>.”</td>
</tr>
</table>

<h3>
<span style='color:red'>The bottom line</span></h3>
The bottom line is that the circle is filled with rectangles of the specified
size, and the <b>BufferedImage</b> is scaled down and drawn automatically
on each rectangle.
<p>Originally, I created a small <b>BufferedImage </b>objectthat was the
same size as the rectangle.&nbsp; When I did that, I got a very ragged
looking circle in the <b>BufferedImage</b>.&nbsp; I found that the results
were much better when I created a fairly large <b>BufferedImage</b> and
allowed it to be scaled down automatically to fit the rectangle.
<h3>
<span style='color:red'>Instantiate a TexturePaint object</span></h3>
<a href="Java316-fig10.htm">Figure 10</a> instantiates the new <b>TexturePaint</b>
object, passing the <b>BufferedImage</b> and the anchor rectangle to the
constructor as parameters.
<p>The <b>BufferedImage</b> is actually produced by invoking a method named
<b>getBufferedImage()</b>
that I will discuss shortly.
<p>There is nothing special about the <b>getBufferedImage()</b> method.&nbsp;
It is simply a convenience method that I wrote to separate the code that
generates the <b>BufferedImage</b> from the code that uses the <b>BufferedImage</b>.
<h3>
<span style='color:red'>Filling and drawing the circle</span></h3>
<a href="Java316-fig11.htm">Figure 11</a> shows the three statements that
you have come to expect for filling and drawing <b>Shape</b> objects.
<h3>
<span style='color:red'>Compile and run the program</span></h3>
If you compile and run this program, you should see a two-inch diameter
circle centered on a <b>Frame</b>.&nbsp; The circle is filled with small
green squares, and each green square contains a red filled circle.
<h3>
<span style='color:red'>The getBufferedImage() method</span></h3>
<a href="Java316-fig12.htm">Figure 12</a> contains the entire method named
<b>getBufferedImage()</b>.
<p>As mentioned earlier, this is a convenience method that I wrote to separate
the code that creates the <b>BufferedImage</b> from the code that uses
it.&nbsp; The method creates and returns a <b>BufferedImage </b>object
consisting of a filled red circle on a green square background.
<p>This is essentially the same code as in the previous program, except
that this time, instead of rendering the <b>BufferedImage</b> on the screen,
the method simply returns a reference to the <b>BufferedImage </b>object.&nbsp;
Since there is nothing new in the fragment, I won’t discuss it further.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In this lesson, I have shown you how to create a <b>BufferedImage</b> object
under program control without the requirement for an external image file.
<p>I have also shown you how to use a <b>BufferedImage</b> object to fill
a <b>Shape</b> with a texture produced by tiling the <b>BufferedImage</b>.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listings</h2></center>
A complete listing of both programs is provided in <a href="Java316-fig13.htm">Figure
13</a> and <a href="Java316-fig14.htm">Figure 14</a>.
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;
<p><b>About the author</b>
<p><i><b><a href="mailto:baldwin@austin.cc.tx.us">Richard Baldwin</a></b>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p>-end-<!--end--></div>

</body>
</html>
