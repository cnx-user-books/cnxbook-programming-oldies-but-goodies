<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">Wrapping Up the SimplePicture Class</h2>
<i>Learn how to cause two or more pictures to have the same width or the same 
height and otherwise maintain their individual aspect ratios, how to create 
composite pictures containing side-by-side images, how to draw text on a 
picture, and how to apply the same operation to every pixel in a Picture object.</i><p><b>Published:</b>&nbsp; 
March 19, 2009<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 360</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#What_you_have_learned_so_far">What you have learned from 
		earlier lessons</a></li>
		<li><a href="#What_you_will_learn_in_this_lesson">What you will learn in 
		this lesson</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#A_multimedia_class_library">A multimedia class library</a></li>
	<li><a href="#Software_installation_and_testing">Software installation and 
	testing</a></li>
</ul>
	</li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#The_sample_program_named_Java360a">The sample program named 
	Java360a</a><ul>
	<li><a href="#The_loadPictureAndShowIt_method">The loadPictureAndShowIt 
	method</a></li>
	<li><a href="#The_getPictureWithWidth_method">The getPictureWithWidth method</a></li>
	<li><a href="#The_drawString_method">The drawString method</a></li>
	<li><a href="#The_addMessage_method">The addMessage method</a></li>
	<li><a href="#The_getPictureWithHeight_method">The getPictureWithHeight 
	method</a></li>
	<li><a href="#The_translatePicture_method">The translatePicture method</a></li>
	<li><a href="#The_copyPicture_method">The copyPicture method</a></li>
	<li><a href="#The_getPixels_method">The getPixels method</a></li>
</ul>
	</li>
</ul>
	</li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p>This lesson is the next in a series <i>(see <a href="#Resources">Resources</a>)</i> 
designed to teach you how to write Java programs to do things like:</p>
<ul>
	<li>Remove <i>redeye</i> from a photographic image.</li>
	<li>Distort the human voice.</li>
	<li>Display one image inside another image.</li>
	<li>Do edge detection, blurring, and other filtering operations on images.</li>
	<li>Insert animated cartoon characters into videos of live humans.</li>
</ul>
<p>If you have ever wondered how to do these things, you've come to the right 
place.</p>
<h3><a name="What_you_have_learned_so_far">What you have learned from earlier 
lessons</a></h3>
<p> If you have studied the <a href="#Resources">earlier lessons</a> in this 
series, you have learned about <b>Turtle</b> objects and their ability to move 
around in a world or a picture and to draw lines as they are moving.&nbsp; You 
have learned all about the <b>World</b> class and are in the process of learning 
about the <b>SimplePicture</b> class.</p>
<p> The class named <b>SimplePicture</b>, <i>(which is the superclass of the <b>
Picture</b> class)</i>, is a large and complex class that defines almost forty 
methods and several constructors.&nbsp; By learning about those 
constructors and methods, you have learned that objects of the <b>Picture</b> 
class are useful for much more than simply serving as living quarters for 
turtles.&nbsp; They are also useful for manipulating images in interesting and 
complex ways.</p>
<p> In the previous lesson, you learned how to apply affine transforms to 
pictures to achieve scaling, rotation, and translation.</p>
<h3> <a name="What_you_will_learn_in_this_lesson">What you will learn in this 
lesson</a></h3>
<p> Near the end of the previous lesson, I told you that there remained nine 
methods of the <b>SimplePicture</b> class that were 
sufficiently interesting or complicated that you would do well to learn about 
them.</p>
<p>I will explain and illustrate the following six methods from the <b>
SimplePicture</b> class in this lesson:</p>
<ul>
	<li>Picture <b>getPictureWithHeight</b>(int height)</li>
	<li>Picture <b>getPictureWithWidth</b>(int width)</li>
	<li>Pixel[] <b>getPixels</b>()</li>
	<li>void <b>addMessage</b>(String message, int xPos, int yPos)</li>
	<li>void <b>drawString</b>(String text, int xPos, int yPos)</li>
	<li>boolean <b>loadPictureAndShowIt</b>(String fileName)</li>
</ul>
<p><font color="#ff0000"><b>Unable to illustrate the file writing capability</b></font></p>
<p>I also attempted to illustrate the following two methods to write <b>Picture</b> 
objects into image files:</p>
<ul>
	<li><a name="boolean_write(String_fileName)">boolean <b>write</b>(String 
	fileName)</a></li>
	<li>void <b>writeOrFail</b>(String fileName)throws IOException</li>
</ul>
<p>However, the behavior of these two methods was very unreliable when running 
under Windows Vista Home Premium Edition and Java v1.6.&nbsp; Sometimes the program 
was able to write the file and sometimes it wasn't.&nbsp; Sometimes when the file was 
written, it would contain the image and sometimes it would be empty.&nbsp; As a 
result, I abandoned that effort for the time being.&nbsp; Someday I may find the time 
to investigate further and determine what the problem is.</p>
<p><b><font color="#ff0000">The explore method and the PictureExplorer class</font></b></p>
<p>Several lessons back, I told you that I would illustrate and explain all of 
the methods in the <b>SimplePicture</b> class.&nbsp; With the exception of the two 
methods listed <a href="#boolean_write%28String_fileName%29">above</a>, the only 
remaining method that I haven't explained is the <b>explore</b> method.</p>
<p>The <b>explore</b> method consists of a single statement that creates an 
object of the <b>PictureExplorer</b> class.&nbsp; The <b>PictureExplorer</b> class is 
a relatively complex class in its own right.&nbsp; Therefore, I will defer an 
explanation of the <b>explore</b> method until a future lesson that is dedicated 
to an explanation of the <b>PictureExplorer</b> class.</p>
<p><font color="#ff0000"><b>Source code listings</b></font></p>
<p>A complete listing of Ericson's <b>Picture</b> class is provided in Listing 
16 and a listing of Ericson's <b>SimplePicture</b> 
class is provided in Listing 17.&nbsp; A listing of Ericson's <b>DigitalPicture</b> 
interface is provided in Listing 18.&nbsp; A listing of the program that I will 
present and explain in this lesson is provided in Listing 19.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Initial pictures of the rose and the 
	butterfly.</li>
	<li><a href="#Figure_2">Figure 2</a>. Pictures of rose and width-adjusted 
	butterfly.</li>
	<li><a href="#Figure_3">Figure 3</a>. Picture with side-by-side images of 
	rose and butterfly. </li>
	<li><a href="#Figure_4">Figure 4</a>. Picture with red color component 
	reduced by a factor of two.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Background color for the 
	SimplePicture class. </li>
	<li><a href="#Listing_2">Listing 2</a>. Background color for the program 
	named Java360a. </li>
	<li><a href="#Listing_3">Listing 3</a>. Beginning of the program named 
	Java360a. </li>
	<li><a href="#Listing_4">Listing 4</a>. Beginning of the run method of the 
	Runner class. </li>
	<li><a href="#Listing_5">Listing 5</a>. The loadPictureAndShowIt method of 
	the SimplePicture class.</li>
	<li><a href="#Listing_6">Listing 6</a>. Create a picture with a butterfly 
	image. </li>
	<li><a href="#Listing_7">Listing 7</a>. Create a new width-controlled 
	picture of the butterfly. </li>
	<li><a href="#Listing_8">Listing 8</a>. The getPictureWithWidth method of 
	the SimplePicture class. </li>
	<li><a href="#Listing_9">Listing 9</a>. The drawString method of the 
	SimplePicture class. </li>
	<li><a href="#Listing_10">Listing 10</a>. The addMessage method of the 
	SimplePicture class. </li>
	<li><a href="#Listing_11">Listing 11</a>. Create new pictures of the rose 
	and the butterfly with the same height. </li>
	<li><a href="#Listing_12">Listing 12</a>. Copy the picture of the rose into 
	the right side of a new picture.</li>
	<li><a href="#Listing_13">Listing 13</a>. Copy the butterfly into the left 
	side of the picture with the rose. </li>
	<li><a href="#Listing_14">Listing 14</a>. The getPixels method of the 
	SimplePicture class. </li>
	<li><a href="#Listing_15">Listing 15</a>. Reduce the red color component 
	value by a factor of two.<b> </b></li>
	<li><a href="#Listing_16">Listing 16</a>. Source code for Ericson's Picture 
	class.</li>
	<li><a href="#Listing_17.">Listing 17</a>. Source code for Ericson's 
	SimplePicture class.</li>
	<li><a href="#Listing_18">Listing 18</a>. Source code for Ericson's 
	DigitalPicture interface.</li>
	<li><a href="#Listing_19">Listing 19</a>. Source code for the program named 
	Java360a.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="A_multimedia_class_library">A multimedia class library</a></h3>
<p>In this series of lessons, I will present and explain many of the classes in 
a multimedia class library that was developed and released under a <b>Creative 
Commons Attribution 3.0 United States License</b> <i>(see <a href="#Resources">
Resources</a>) </i>by Mark Guzdial and Barbara Ericson at Georgia Institute of 
Technology.&nbsp; In doing this, I will also present some interesting sample programs 
that use the library.</p>
<h3><a name="Software_installation_and_testing">Software installation and 
testing</a></h3>
<p>I explained how to download, install, and test the multimedia class library 
in an earlier lesson titled <i>Multimedia Programming with Java, Getting Started 
(see <a href="#Resources">Resources</a>)</i>.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p dir="ltr">As I mentioned earlier, I will explain and illustrate the following 
six methods from the <b>SimplePicture</b> class in this lesson:</p>
<ul>
	<li>Picture <b>getPictureWithHeight</b>(int height)</li>
	<li>Picture <b>getPictureWithWidth</b>(int width)</li>
	<li>Pixel[] <b>getPixels</b>()</li>
	<li>void <b>addMessage</b>(String message, int xPos, int yPos)</li>
	<li>void <b>drawString</b>(String text, int xPos, int yPos)</li>
	<li>boolean <b>loadPictureAndShowIt</b>(String fileName)</li>
</ul>
<p dir="ltr">I will present and explain a sample program that illustrates the 
use of the methods in the above list</p>

<p dir="ltr"><font color="#FF0000"><b>Reducing the confusion</b></font></p>
<p dir="ltr">Because I 
will be switching back and forth between code fragments extracted from Ericson's
<b>SimplePicture</b> class and code fragments extracted from my sample program, 
things can get confusing.</p>
<p dir="ltr">In an attempt to reduce the confusion, I will 
present code fragments from Ericson's <b>SimplePicture</b> class against the 
background color shown in Listing 1.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Background color for the SimplePicture class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>I will present code fragments from the SimplePicture class
against this background color.</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Similarly, I will present code fragments from my sample program against the 
background color shown in Listing 2.</p>
<p>
<b><a name="Listing_2">Listing 2.</a> Background color for the program named 
Java360a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>I will present code fragments from my sample programs
with this background color.</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><span style="font-weight: 400"><a name="The_sample_program_named_Java360a">The sample program named Java360a</a></span></h3>
<p>The purpose of this program is to illustrate the use of the following methods 
of the <b>SimplePicture</b> class:</p>
<ul>
	<li>boolean <b>loadPictureAndShowIt</b>(String fileName)</li>
	<li>Picture 
<b>getPictureWithWidth</b>(int width)</li>
	<li>void <b>drawString</b>(String text,int xPos,int yPos)</li>
	<li>void 
<b>addMessage</b>(String message, int xPos, int yPos)</li>
	<li>Picture <b>getPictureWithHeight</b>(int 
height)</li>
	<li>Pixel[] <b>getPixels</b>()</li>
</ul>
<p><font color="#FF0000"><b>Unable to illustrate image file output</b></font></p>
<p>An attempt was also made to illustrate the following 
methods to write <b>Picture</b> objects into image files:</p>
<ul>
	<li>boolean <b>write</b>(String fileName)</li>
	<li>void 
<b>writeOrFail</b>(String fileName)throws IOException</li>
</ul>
<p>However, the results were very 
unreliable under <i>Windows Vista Home Premium Edition</i> and <i>Java 1.6</i>.&nbsp; Sometimes the program was able to write the file and sometimes it 
wasn't.&nbsp; Sometimes when the file was written, it would contain the image and 
sometimes it would be empty.&nbsp; Therefore, I abandoned the effort to 
illustrate and explain these two methods.</p>
<p><font color="#FF0000"><b>Will explain the explore method in a future lesson</b></font></p>
<p>This program completes the 
illustrations and explanations of the methods of the <b>SimplePicture</b> class with the exception of the 
<b>explore</b> method.&nbsp; The explore method will be explained in a future 
lesson that is dedicated to an explanation of the <b>PictureExplorer</b> class.</p>
<p><font color="#FF0000"><b>Behavior of the program</b></font></p>
<p>The program begins by calling the 
<b>loadPictureAndShowIt</b> method to load and show a picture of a rose.&nbsp; The title shown 
in the <b>JFrame</b> object is &quot;None.&quot;&nbsp; <i>(The method doesn't 
set the filename as a title on the <b>JFrame</b> object.)</i></p>
<p><font color="#FF0000"><b>A large butterfly picture</b></font></p>
<p>Then the program reads an image file to create a 
picture of a butterfly, which is much larger than the picture of the rose.&nbsp; 
These first two pictures are shown in the top and bottom of Figure 1 
respectively.</p>
<p>
 <b><a name="Figure_1">Figure 1</a>. Initial pictures of the rose and the 
	butterfly.</b>
<table bgcolor="#EFE9B8"  border="1" cols="1">
<tr><td><img border="0" src="java360a.jpg" width="329" height="269"></td></tr>
<tr><td><img border="0" src="java360b.jpg" width="431" height="526"></td></tr>
</table></p>

<p><font color="#FF0000"><b>Call getPictureWithWidth</b></font></p>
<p>Then 
the program calls the <b>getPictureWithWidth</b> method to create a new <b>Picture</b> object 
containing the butterfly image with the width set to match the width of the picture of the rose.&nbsp; 
<i>(Note that the aspect ratio of the butterfly picture is 
preserved when the width is adjusted.)</i></p>
<p><font color="#FF0000"><b>Call the drawString method</b></font></p>
<p>After that, the program calls the <b>drawString</b> method to draw a white text 
string on the picture of the butterfly.&nbsp; The <b>drawString</b> method calls the 
<b>addMessage</b> method to actually draw the text on the image.&nbsp; <i>(The color white is fixed 
and cannot be changed without modifying the method.)</i></p>
<p><font color="#FF0000">
 <b>Pictures of rose and width-adjusted butterfly</b></font></p>
<p>Figure 2 shows the original picture of the rose at the top along with the new picture of the 
butterfly.&nbsp; This is the butterfly picture for which:</p>
<ul>
	<li>The width has been adjusted to match 
the width of the rose.</li>
<li>The white text has been drawn on the butterfly picture.</li>
</ul>
<p>
 <b><a name="Figure_2">Figure 2</a>. Pictures of rose and width-adjusted butterfly.</b>
<table bgcolor="#EFE9B8"  border="1" cols="1">
<tr><td><img border="0" src="java360a.jpg" width="329" height="269"></td></tr>
<tr><td><img border="0" src="java360c.jpg" width="329" height="405"></td></tr>
</table></p>

<p><font color="#FF0000"><b>Call the getPictureWithHeight method</b></font></p>
<p>Following that, the program calls the 
<b>getPictureWithHeight</b> method twice to create two new pictures of the rose and 
the butterfly with their heights adjusted to be the same.&nbsp; Again, the original aspect ratio of each image is 
preserved.</p>
<p><font color="#FF0000"><b>Compose side-by-side images</b></font></p>
<p>Then the program calls my method named <b>translatePicture</b> from 
the previous lesson <i>(see <a href="#Resources">Resources</a>)</i> to 
copy the picture of the rose into the right side of another new <b>Picture</b> object.&nbsp;
<i>(You can view the source code for the <b>translatePicture</b> method in 
Listing 19.)</i></p>
<p>The program also calls the <b>copyPicture</b> method, <i>(which I also explained 
in the previous lesson)</i> to copy the picture of the butterfly into the left side 
of the same picture.</p>
<p>The pictures used as input to this operation are the pictures 
of the rose and the butterfly with the same height.&nbsp; This procedure results 
in a new <b>Picture</b> object containing side-by-side 
images of the butterfly and the rose as shown in Figure 3.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. Picture with side-by-side images of rose 
	and butterfly. </b>
<table border="1" cols="1" bgcolor="#EFE9B8" >
  <tbody>
    <tr>
      <td>
      <img border="0" src="java360d.jpg" width="443" height="229">
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>An important difference</b></font></p>
<p>It is important to understand that there is a major difference between Figure 
3 on one hand and Figure 2 on the other.&nbsp; The pairing of two pictures in 
Figure 2 was accomplished at the HTML level using two screen-shot image files.&nbsp; In 
other words, in the case of Figure 2, there were actually two <b>Picture</b> 
objects that produced two screen output images, which I captured with screen 
capture software.&nbsp; Each image in Figure 2 is in 
a different image file.</p>
<p>However, the images of the butterfly and the rose in Figure 3 were placed in the same <b>
Picture</b> object by program code.&nbsp; The screen display of that <b>Picture</b> 
object was captured into a single image file, which was inserted into this 
document to produce Figure 3.</p>
<p><font color="#FF0000"><b>Call the getPixels method</b></font></p>
<p>Finally, the program uses the <b>getPixels</b> method 
to create a new picture of the butterfly and the rose side-by-side with the 
value of the red color component reduced by a factor of two as shown by the 
bottom picture in Figure 4.&nbsp; <i>(The top picture in Figure 4 is the same 
image file shown in Figure 3.)</i></p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Picture with red color component reduced by 
	a factor of two.</b>
<table bgcolor="#EFE9B8"  border="1" cols="1">
<tr><td><img border="0" src="java360d.jpg" width="443" height="229"></td></tr>
<tr><td><img border="0" src="java360e.jpg" width="442" height="223"></td></tr>
</table></p>

<p>The <b>getPixels</b> method is very 
useful when you want to perform the same operation on every pixel in a 
<b>Picture</b> object.</p>
<p><font color="#FF0000"><b>Will explain the code in fragments</b></font></p>
<p>As is my custom, I will explain the program code in fragments.&nbsp; <i>(A 
complete listing of the program named Java360a is provided in Listing 19 near 
the end of the lesson.)</i></p>
<p>The first such code fragment, which shows the beginning of the program named 
Java360a, is shown in Listing 3.&nbsp; <i>(Remember, the background color in Listing 3 indicates that the code 
fragment was extracted from my sample program named Java360a.)</i></p>
<p>
<b><a name="Listing_3">Listing 3</a>. Beginning of the program named Java360a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.geom.AffineTransform;

public class Main{
  public static void main(String[] args){
    new Runner().run();
  }//end main method
}//end class Main</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 3 simply defines an object of a new class named <b>Runner</b> and 
calls the <b>run</b> method on that object.&nbsp; When the <b>run</b> method returns, 
the <b>main</b> method will terminate causing the program to terminate.</p>
<p><font color="#FF0000">
<b>Beginning of the run method of the Runner class</b></font></p>
<p>The <b>run</b> method of the <b>Runner</b> class begins in Listing 4.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Beginning of the run method of the Runner 
class. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>class Runner{
  void run(){

    //The following code will load and show the rose with
    // a title of "None"
    Picture pixA = new Picture(1,1);
    pixA.loadPictureAndShowIt("rose.jpg");</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<h4><a name="The_loadPictureAndShowIt_method">The loadPictureAndShowIt method</a></h4>
<p>Listing 4 begins by creating a new <b>Picture</b> object with 1x1 pixels.&nbsp; 
Then it calls the <b>loadPictureAndShowIt</b> method to load an image from a 
specific image file into the <b>Picture</b> object and to display the resulting <b>
Picture</b> object on the screen.</p>
<p>The 
<b>loadPictureAndShowIt </b>method of the <b>SimplePicture</b> class is shown in its entirety in Listing 5.&nbsp;
<i>(Remember, the background color in Listing 5 indicates that the code fragment 
was extracted from Ericson's <b>SimplePicture</b> class.)</i></p>
<p>
<b><a name="Listing_5">Listing 5</a>. The loadPictureAndShowIt method of the 
SimplePicture class.</b><table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> /***
  * Method to load a picture from a file name and show it
  * in a picture frame
  * @param fileName the file name to load the picture
  * from
  * @return true if success else false
  */
 public boolean loadPictureAndShowIt(String fileName){
   boolean result = true;// the default is that it worked

   // try to load the picture into the buffered image from
   // the file name
   result = load(fileName);

   // show the picture in a picture frame
   show();

   return result;
 }//end loadPictureAndShowIt method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Call the load method</b></font></p>
<p>The method in Listing 5 begins by calling the <b>load</b> method to load the image from the image file into the 
current <b>Picture</b> object.&nbsp; <i>(I explained the <b>load</b> method in the 
earlier lesson titled The DigitalPicture Interface:&nbsp; Multimedia Programming 
with Java.&nbsp; See <a href="#Resources">Resources</a>)</i>.</p>
<p><b><font color="#FF0000">Call the show method</font></b></p>
<p>Then the method in Listing 5 calls the <b>show</b> method to display the picture on the 
screen.&nbsp;<i> (I explained the <b>show</b> method in the earlier lesson titled 
The show Method and the PictureFrame Class:&nbsp; Multimedia Programming with Java.&nbsp; 
See <a href="#Resources">Resources</a>).</i></p>
<p><font color="#FF0000"><b>No further explanation needed</b></font></p>
<p>Since I have already explained the methods that are called in Listing 5, no 
further explanation of the
<b>loadPictureAndShowIt </b>method of the <b>SimplePicture</b> class should be 
needed.</p>
<p>The onscreen image produced by the call to the
<b>loadPictureAndShowIt </b>method in Listing 4 is shown as the top picture in 
Figure 1.</p>
<p><font color="#FF0000">
<b>Create a picture with a butterfly image</b></font></p>
<p>Listing 6 uses code that you have seen in numerous previous programs to 
create a new <b>Picture</b> object containing an image of a butterfly.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Create a picture with a butterfly image. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>    //Create a picture of a butterfly, which is much
    // larger than the picture of the rose.
    Picture pixB = new Picture("butterfly1.jpg");
    pixB.setTitle("pixB");
    pixB.show();</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>I purposely chose an image that was larger than the picture of the rose in 
order to demonstrate size control in some of the later code.&nbsp; The onscreen 
image produced by Listing 6 is shown as the bottom picture in Figure 1.</p>
<h4><a name="The_getPictureWithWidth_method">The getPictureWithWidth method</a></h4>
<p>Listing 7 begins by calling the <b>getPictureWithWidth</b> method to create a 
new <b>Picture</b> object containing the butterfly image.&nbsp; The width of the 
new picture is set to match the width of the picture of the rose. Note that the 
aspect ratio of the butterfly image is preserved throughout this process.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. Create a new width-controlled picture of 
the butterfly. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>
    Picture pixC = 
                pixB.getPictureWithWidth(pixA.getWidth());
    pixC.setTitle("pixC");
    
    //Draw white text on the picture of the butterfly.
    pixC.drawString("Same width as rose.",20,20);
    pixC.show();</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Source code for the getPictureWithWidth method</b></font></p>
<p>The
<b>getPictureWithWidth </b>
method is shown in its entirety in Listing 8.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. The getPictureWithWidth method of the 
SimplePicture class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>  /**
   * Method to create a new picture of the passed width.
   * The aspect ratio of the width and height will stay
   * the same.
   * @param width the desired width
   * @return the resulting picture
   */
  public Picture getPictureWithWidth(int width){
    // set up the scale transform
    double xFactor = (double) width / this.getWidth();
    Picture result = scale(xFactor,xFactor);
    return result;
  }//end getPictureWithWidth method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A scaled replica of the current Picture object</b></font></p>
<p>This method receives an integer value that specifies the desired width in 
pixels of a new <b>Picture</b> object that is a scaled replica of the current <b>
Picture</b> object.&nbsp; In this case, the specified width was set to the width 
of the picture of the rose <i>(see Listing 7)</i>.</p>
<p><font color="#FF0000"><b>Call the scale method</b></font></p>
<p>Listing 8 computes a scale factor that must be applied to the current picture 
to produce a new picture with the specified width.&nbsp; Then Listing 8 calls 
the <b>scale</b> method, passing the same value for both the x and y scale 
factors required by the <b>scale</b> method.&nbsp;
<i>(I explained the <b>scale</b> method in the previous lesson titled Applying 
Affine Transforms to Picture Objects:&nbsp; Multimedia Programming with Java.&nbsp; 
See <a href="#Resources">Resources</a>.)</i></p>
<p>The <b>scale</b> method creates and returns a reference to a properly scaled 
replica of the current <b>Picture</b> object, which is saved and then returned 
by the code in Listing 8.</p>
<h4><a name="The_drawString_method">The drawString method</a></h4>
<p>Please return your attention to Listing 7, which calls the <b>drawString</b> 
method on the new scaled picture of the butterfly to draw some text on the 
picture.</p>
<p><font color="#FF0000"><b>Source code for the drawString method</b></font></p>
<p>The <b>drawString</b> method of the <b>SimplePicture</b> class is shown in 
Listing 9.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. The drawString method of the SimplePicture 
class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to draw a string at the given location on the
  * picture
  * @param text the text to draw
  * @param xPos the left x for the text
  * @param yPos the top y for the text
  */
 public void drawString(String text, int xPos, int yPos){
   addMessage(text,xPos,yPos);
 }//end drawString method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As you can see, this method contains a single statement, which calls the method named <b>addMessage</b> to do 
all the work.</p>
<h4><a name="The_addMessage_method">The addMessage method</a></h4>
<p>The <b>addMessage</b> method is shown in its entirety in Listing 10.</p>
<p>
<b><a name="Listing_10">Listing 10</a>. The addMessage method of the 
SimplePicture class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to draw a message as a string on the buffered
  * image
  * @param message the message to draw on the buffered
  * image
  * @param xPos  the leftmost point of the string in x
  * @param yPos  the bottom of the string in y
  */
 public void addMessage(
                      String message, int xPos, int yPos){
   // get a graphics context to use to draw on the
   // buffered image
   Graphics2D graphics2d = bufferedImage.createGraphics();

   // set the color to white
   graphics2d.setPaint(Color.white);

   // set the font to Helvetica bold style and size 16
   graphics2d.setFont(new Font("Helvetica",Font.BOLD,16));

   // draw the message
   graphics2d.drawString(message,xPos,yPos);

 }//end addMessage method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A relatively straightforward method</b></font></p>
<p>This method begins by getting a 
reference to the graphics context on the <b>BufferedImage</b> object belonging 
to the current <b>Picture</b> object as type <b>Graphics2D</b>.</p>
<p>Then it calls the following three methods of the <b>Graphics2D</b> class to 
perform the actions shown:</p>
<ul>
	<li><b>setPaint</b> - set the text color to white.</li>
<li><b>setFont</b> - set the font to the typeface, style, and size shown</li>
	<li><b>drawString</b> - draw the text on the <b>BufferedImage</b> object at the 
	position specified by the x and y coordinate values.</li>
</ul>
<p><font color="#FF0000"><b>The Graphics2D class</b></font></p>
<p>If you are familiar with the use of the <b>Graphics2D</b> class, you should have no 
problem understanding the code in Listing 10.&nbsp; If not, you may want to go 
back and study the topic. <i>(See the links to my Graphics2D lessons in
<a href="#Resources">Resources</a>.)</i> </p>
<p><font color="#FF0000"><b>Call the show method</b></font></p>
<p>The call to the <b>drawString</b> method followed by the call to the <b>show</b> 
method in Listing 7 produced the width-controlled picture of the butterfly with 
white text shown as the bottom picture in Figure 2.&nbsp; As explained above, the width of the top 
picture of the rose in Figure 2 was used to specify the width of the new picture 
of the butterfly.</p>
<h4><a name="The_getPictureWithHeight_method">The getPictureWithHeight method</a></h4>
<p>Listing 11 makes two consecutive calls to the <b>getPictureWithHeight</b> 
method to create new pictures of the rose and the butterfly having the same 
height while preserving the aspect ratio of each picture.</p>
<p>
<b><a name="Listing_11">Listing 11</a>. Create new pictures of the rose and the 
butterfly with the same height. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>
    Picture pixD = pixA.getPictureWithHeight(200);
    Picture pixE = pixB.getPictureWithHeight(200);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Very similar code as before</b></font></p>
<p>Code in the <b>getPictureWithHeight</b> method is very similar to the code in 
the <b>getPictureWithWidth</b> method that I explained <a href="#Listing_8">
earlier</a>.&nbsp; Therefore, it shouldn't be necessary to provide another 
explanation of the code.&nbsp; <i>(You can view the <b>getPictureWithHeight</b> 
method in its entirety in Listing 17.)</i></p>
<h4><a name="The_translatePicture_method">The translatePicture method</a></h4>
<p>Listing 12 calls the <b>translatePicture</b> method that I explained in the 
previous lesson <i>(see <a href="#Resources">Resources</a>)</i> to copy the 
picture of the rose into the right side of a new <b>Picture</b> object.</p>
<p>
<b><a name="Listing_12">Listing 12</a>. Copy the picture of the rose into the 
right side of a new picture. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>
    Picture pixF = 
                 translatePicture(pixD,pixE.getWidth(),0);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This produced the picture that is shown in Figure 3, except that the 
butterfly is not yet a part of the picture.</p>
<h4><a name="The_copyPicture_method">The copyPicture method</a></h4>
<p>Listing 13 calls the <b>copyPicture</b> method to copy the picture of the 
butterfly into the picture already containing the image of the rose.&nbsp; <i>
(See Figure 3.)</i></p>
<p>
<b><a name="Listing_13">Listing 13</a>. Copy the butterfly into the left side of 
the picture with the rose. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>    pixF.copyPicture(pixE);
    pixF.setTitle("pixF");
    pixF.show();</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>When the <b>copyPicture</b> method is used to copy one picture into another, 
it always aligns the two pictures at the upper-left corner.&nbsp;&nbsp; 
I also explained the <b>copyPicture</b> method in the previous lesson.&nbsp; <i>
(See <a href="#Resources">Resources</a>.)</i></p>
<p>This results in a <b>Picture</b> object containing side-by-side images of the 
butterfly and the rose, both with the same height as shown in Figure 3.</p>
<h4><a name="The_getPixels_method">The getPixels method</a></h4>
<p>That brings us to the last method of the <b>SimplePicture</b> class that I 
will explain in this lesson.&nbsp; The <b>getPixels</b> method, shown in Listing 
14, constructs, 
populates, and returns a reference to a 
<a name="one-dimensional_array_of_type_Pixel">one-dimensional array of type <b>Pixel</b></a><b>[]</b>.&nbsp; </p>
<p>
<b><a name="Listing_14">Listing 14</a>. The getPixels method of the SimplePicture class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre> /**
  * Method to get a one-dimensional array of Pixels for
  * this simple picture
  * @return a one-dimensional array of Pixel objects
  * starting with y=0
  * to y=height-1 and x=0 to x=width-1.
  */
 public Pixel[] getPixels(){
   int width = getWidth();
   int height = getHeight();
   Pixel[] pixelArray = new Pixel[width * height];

   // loop through height rows from top to bottom
   for (int row = 0; row &LT; height; row++)
     for (int col = 0; col &LT; width; col++)
       pixelArray[row * width + col] =
                                  new Pixel(this,col,row);

   return pixelArray;
 }//end getPixels method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A description of the array contents</b></font></p>
<p>Each element in the returned array contains a reference to a <b>Pixel</b> object.&nbsp; 
Each <b>Pixel</b> object represents one of the physical pixels in the current picture.&nbsp; </p>
<p>The first element in the array represents the single pixel in the upper-left 
corner of the picture.&nbsp; Successive elements represent adjacent pixels 
moving from left to right across the row.</p>
<p>When the number of elements reaches the width of the picture, the next 
element represents the left-most pixel in the second row of pixels, etc.</p>
<p><font color="#FF0000"><b>A useful representation in some cases</b></font></p>
<p>This representation of pixels is very useful when you need to perform the 
same operation on every pixel in the picture.&nbsp; It allows for the use of a 
single <b>for</b> loop to access and operate on each pixel.&nbsp; It also 
eliminates the requirement to know the width and the height of the picture as 
would be the case for nested <b>for</b> loops.</p>
<p><font color="#FF0000"><b>Not so handy in other cases</b></font></p>
<p>On the other hand, this representation isn't so handy when you need to keep 
track of the location of the individual pixels in terms of rows and columns.&nbsp; 
You have seen code in earlier lessons <i>(see <a href="#Resources">Resources</a>)</i> 
involving a pair of nested <b>for</b> loops that is easier to use in those 
cases.</p>
<p><font color="#FF0000">
<b>Reduce the red color component value by a factor of two</b></font></p>
<p>Listing 15 begins by creating a new <b>Picture</b> object that is a copy of 
the picture shown in Figure 3.</p>
<p>
<b><a name="Listing_15">Listing 15</a>. Reduce the red color component value by 
a factor of two. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>
    Picture pixG = new Picture(pixF);
    pixG.setTitle("pixG");
    Pixel[] pixels = pixG.getPixels();
    int red = 0;
    for(int cnt = 0;cnt &lt; pixels.length;cnt++){
      red = pixels[cnt].getRed();
      pixels[cnt].setRed((int)(red*0.5));
    }//end for loop
    pixG.show();

  }//end run method</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Get a reference to an array containing pixel data</b></font></p>
<p>Then Listing 15 calls the <b>getPixels</b> method on the new <b>Picture</b> 
object to get a reference to a one-dimensional array containing pixel data as 
described <a href="#one-dimensional_array_of_type_Pixel">above</a>.</p>
<p><font color="#FF0000"><b>Iterate on the array modifying the pixel values</b></font></p>
<p>Then Listing 15 executes a <b>for</b> loop in which the value of the red 
color component in each pixel is reduced by a factor of two.</p>
<p><font color="#FF0000"><b>Call the show method</b></font></p>
<p>Finally, Listing 15 shows the modified picture, producing the screen output 
shown in the bottom picture in Figure 4.</p>
<p><font color="#FF0000"><b>The end of the run method and the end of the program</b></font></p>
<p>Listing 14 also signals the end of the <b>run</b> method, causing the <b>run</b> method 
to return control to the <b>main</b> method shown in 
Listing 3.&nbsp; Having nothing more to do, the <b>main</b> method terminates, 
which causes the program to terminate.</p>
<center>
<h2><a name="Run the program"></a>Run the program</h2>
</center>
<p>I encourage you to copy the code from Listing 19, compile 
the code, and execute it.&nbsp; Experiment with the code, making changes, and 
observing the results of your changes.&nbsp; Make certain that you can explain why 
your changes behave as they do.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>I explained and illustrated the following six methods from the <b>SimplePicture</b> class in this lesson:</p>
<ul>
	<li>Picture <b>getPictureWithHeight</b>(int height)</li>
	<li>Picture <b>getPictureWithWidth</b>(int width)</li>
	<li>Pixel[] <b>getPixels</b>()</li>
	<li>void <b>addMessage</b>(String message, int xPos, int yPos)</li>
	<li>void <b>drawString</b>(String text, int xPos, int yPos)</li>
	<li>boolean <b>loadPictureAndShowIt</b>(String fileName)</li>
</ul>
<p>You learned how to:</p>
<ul>
	<li>Cause two or more pictures to have the same width or the same 
height and otherwise maintain their individual aspect ratios.</li>
	<li>Create 
composite pictures containing side-by-side images.</li>
	<li>Draw text on a picture.</li>
	<li>Apply the same operation to every pixel in a <b>Picture</b> 
object.</li>
</ul>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>As I mentioned earlier, with the exception of the <b>explore</b> method, this 
completes the explanation of the <b>SimplePicture</b> class.&nbsp; I will defer 
an explanation of the <b>explore</b> method until the next lesson when I begin 
explaining the <b>PictureExplorer</b> class.</p>
<p>In the next and future lessons, you will learn about the <b>
PictureExplorer</b> class, which allows you to determine the numeric color 
values for any pixel in a picture by placing a cursor on the pixel.&nbsp; The 
pixel position is controlled by clicking or dragging the mouse within the 
picture, clicking buttons, or typing coordinate values.&nbsp; You can also zoom 
in and out to view the pixel in more or less detail and you can see the actual 
color of the pixel in a large square.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li>
	<a rel="license" target="new" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a target="new" href="http://coweb.cc.gatech.edu/mediaComp-plan/101">
	Media Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a target="new" href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a target="new" href="http://drjava.sourceforge.net/">DrJava</a> 
	download site</li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, 
	the JavaPLT group at Rice University</a></li>
	<li><a target="new" href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava 
	Open Source License</a></li>
	<li>
	<a target="new" href="http://www.developer.com/java/article.php/1440571">The 
	Essence of OOP using Java, The this and super Keywords</a></li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java058.htm">
	Threads of Control</a></li>
	<li>
	<a target="new" href="http://java.sun.com/products/jfc/tsc/articles/painting/">
	Painting in AWT and Sw<font size="-1" face="Verdana, Arial, Helvetica">ing</font></a></li>
	<li><a target="new" href="http://en.wikipedia.org/wiki/Turtle_graphics/">
	Wikipedia Turtle Graphics</a></li>
	<li><a target="new" href="http://www.devx.com/tips/Tip/5809">IsA or HasA</a></li>
	<li>
	<a target="new" href="http://www.vectorcad3d.com/support/lathetutorial.htm">
	Vector Cad-Cam XI Lathe Tutorial</a></li>
	<li>
	<a target="new" href="http://local.wasp.uwa.edu.au/~pbourke/geometry/classification/">
	Classification of 3D to 2D projections</a></li>
	<li>
	<a href="http://en.wikipedia.org/wiki/Color_model">Color model</a> from 
Wikipedia</li>
	<li>
	<a href="../Light%20and%20color:%20%20an%20introduction">Light and color:&nbsp; 
an introduction</a> by Norman Koren</li>
	<li>
<a href="http://www.ncsu.edu/scivis/lessons/colormodels/color_models2.html#(HSV)">
Color Principles - Hue, Saturation, and Value</a></li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java200.htm">200</a> 
	Implementing the Model-View-Controller Paradigm using Observer and 
	Observable</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java300.htm">300</a> 
	Java 2D Graphics, Nested Top-Level Classes and Interfaces</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java302.htm">302</a> 
	Java 2D Graphics, The Point2D Class</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java304.htm">304</a> 
	Java 2D Graphics, The Graphics2D Class</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java306.htm">306</a> 
	Java 2D Graphics, Simple Affine Transforms</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java308.htm">308</a> 
	Java 2D Graphics, The Shape Interface, Part 1</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java310.htm">310</a> 
	Java 2D Graphics, The Shape Interface, Part 2</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java312.htm">312</a> 
	Java 2D Graphics, Solid Color Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java314.htm">314</a> 
	Java 2D Graphics, Gradient Color Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java316.htm">316</a> 
	Java 2D Graphics, Texture Fill</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java318.htm">318</a> 
	Java 2D Graphics, The Stroke Interface</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java320.htm">320</a> 
	Java 2D Graphics, The Composite Interface and Transparency</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java322.htm">322</a> 
	Java 2D Graphics, The Composite Interface, GradientPaint, and Transparency</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java324.htm">324</a> 
	Java 2D Graphics, The Color Constructors and Transparency</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3403921">
	400</a> Processing Image Pixels using Java, Getting Started<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3423661">
	402</a> Processing Image Pixels using Java, Creating a Spotlight<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3441391">
	404</a> Processing Image Pixels Using Java: Controlling Contrast and 
	Brightness<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3512456">
	406</a> Processing Image Pixels, Color Intensity, Color Filtering, and Color 
	Inversion <br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3522711">
	408</a> Processing Image Pixels, Performing Convolution on Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3579206">
	410</a> Processing Image Pixels, Understanding Image Convolution in Java<br>
	<a target="new" href="http://www.developer.com/java/ent/article.php/3590351">
	412</a> Processing Image Pixels,<font size="-1" face="Verdana, Arial, Helvetica"> 
	Applying Image Convolution in Java, Part 1 <br>
	</font>
	<a target="new" href="http://www.developer.com/java/other/article.php/3596351">
	414</a> Processing Image Pixels, Applying Image Convolution in Java, Part 2<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3640776">
	416</a> Processing Image Pixels, An Improved Image-Processing Framework in 
	Java<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3650011">
	418</a> Processing Image Pixels, Creating Visible Watermarks in Java<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3645761">
	450</a> A Framework for Experimenting with Java 2D Image-Processing Filters<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3654171">
	452</a> Using the Java 2D LookupOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3670696">
	454</a> Using the Java 2D AffineTransformOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3681466">
	456</a> Using the Java 2D LookupOp Filter Class to Scramble and Unscramble 
	Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3686856">
	458</a> Using the Java 2D BandCombineOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3696676">
	460</a> Using the Java 2D ConvolveOp Filter Class to Process Images<br>
	<a target="new" href="http://www.developer.com/java/other/article.php/3698981">
	462</a> Using the Java 2D ColorConvertOp and RescaleOp Filter Classes to 
	Process Images</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java506.htm">506</a> 
	JavaBeans, Introspection</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/2114451">
	2100</a> Understanding Properties in Java and C#</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3495121">
	2300</a> Generics in J2SE, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3782471">
	340</a> Multimedia Programming with Java, Getting Started</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3788086">
	342</a> Getting Started with the Turtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3791291">
	344</a> Continuing with the SimpleTurtle Class: Multimedia Programming with 
	Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3793401">
	346</a> Wrapping Up the SimpleTurtle Class: Multimedia Programming with Java</li>
	<li><a target="new" href="http://www.dickbaldwin.com/java/Java348.htm">348</a> 
	The Pen and PathSegment Classes: Multimedia Programming with Java</li>
	<li>
	<a target="new" href="http://www.developer.com/java/other/article.php/3795761">
	349</a> A Pixel Editor Program in Java: Multimedia Programming with Java</li>
	<li>
	<a new href="http://www.developer.com/java/other/article.php/3798646%20target=">
	350</a> 3D Displays, Color Distance, and Edge Detection</li>
	<li><a href="http://www.developer.com/java/other/article.php/3801671">351</a> 
	A Slider-Controlled Softening Program for Digital Photos</li>
	<li><a href="http://www.developer.com/java/other/article.php/3806156">352</a> 
	Adding Animated Movement to Your Java Application</li>
	<li><a href="http://www.dickbaldwin.com/java/Java353.htm">353</a> A Slider-Controlled Sharpening Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java354.htm">354</a> The DigitalPicture Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java355.htm">355</a> The HSB Color Model</li>
	<li><a href="http://www.dickbaldwin.com/java/Java356.htm">356</a> The show Method and the PictureFrame Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java357.htm">357</a> An HSB 
	Color-Editing Program for Digital Photos</li>
	<li><a href="http://www.dickbaldwin.com/java/Java358.htm">358</a> Applying 
	Affine Transforms to Picture Objects</li>
	<li><a href="http://www.dickbaldwin.com/java/Java359.htm">359</a> Creating a 
	lasso for editing digital photos in Java</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the programs discussed in this lesson are shown in Listing 
16 through Listing 19 below.
<p>
<b><a name="Listing_16">Listing 16</a>. Source code for Ericson's Picture class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;

/**
 * A class that represents a picture.  This class inherits
 * from SimplePicture and allows the student to add 
 * functionality to the Picture class.
 *
 * Copyright Georgia Institute of Technology 2004-2005
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture
{
  ///////////////////// constructors /////////////////////

  /**
   * Constructor that takes no arguments
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit
     * call to super()
     * child constructors always call a parent constructor
     */
    super();
  }

  /**
   * Constructor that takes a file name and creates the 
   * picture
   * @param fileName the name of the file to create the 
   * picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }

  /**
   * Constructor that takes the width and height
   * @param width the width of the desired picture
   * @param height the height of the desired picture
   */
  public Picture(int width, int height)
  {
    // let the parent class handle this width and height
    super(width,height);
  }

  /**
   * Constructor that takes a picture and creates a
   * copy of that picture
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }

  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
  }

  ////////////////////// methods /////////////////////////

  /**
   * Method to return a string with information about this
   * picture.
   * @return a string with information about the picture 
   * such as fileName, height and width.
   */
  public String toString()
  {
    String output = 
      "Picture, filename " + getFileName() +
      " height " + getHeight()
      + " width " + getWidth();
    return output;

  }

} // this } is the end of class Picture, put all new 
  // methods before this</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_17.">Listing 17.</a> Source code for Ericson's SimplePicture class.</b><table border="1" cols="1" width="477" bgcolor="#ffffbb">
  <tbody>
    <tr>
      <td>
      <pre>import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import java.awt.*;
import java.io.*;
import java.awt.geom.*;

/**
 * A class that represents a simple picture.  A simple
 * picture may have an associated file name and a title.
 * A simple picture has pixels, width, and height.  A
 * simple picture uses a BufferedImage to hold the pixels.
 * You can show a simple picture in a PictureFrame (a
 * JFrame).
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class SimplePicture implements DigitalPicture
{

  /////////////////////// Fields /////////////////////////

  /**
   * the file name associated with the simple picture
   */
  private String fileName;

  /**
   * the title of the simple picture
   */
  private String title;

  /**
   * buffered image to hold pixels for the simple picture
   */
  private BufferedImage bufferedImage;

  /**
   * frame used to display the simple picture
   */
  private PictureFrame pictureFrame;

  /**
   * extension for this file (jpg or bmp)
   */
  private String extension;


 /////////////////////// Constructors ////////////////////

 /**
  * A Constructor that takes no arguments.  All fields
  * will be null. A no-argument constructor must be given
  * in order for a class to be able to be subclassed.  By
  * default all subclasses will implicitly call this in
  * their parent's no argument constructor unless a
  * different call to super() is explicitly made as the
  * first line of code in a constructor.
  */
 public SimplePicture()
 {this(200,100);}

 /**
  * A Constructor that takes a file name and uses the
  * file to create a picture
  * @param fileName the file name to use in creating the
  * picture
  */
 public SimplePicture(String fileName)
 {

   // load the picture into the buffered image
   load(fileName);

 }

 /**
  * A constructor that takes the width and height desired
  * for a picture and creates a buffered image of that
  * size.  This constructor doesn't  show the picture.
  * @param width the desired width
  * @param height the desired height
  */
 public  SimplePicture(int width, int height)
 {
   bufferedImage = new BufferedImage(
               width, height, BufferedImage.TYPE_INT_RGB);
   title = "None";
   fileName = "None";
   extension = "jpg";
   setAllPixelsToAColor(Color.white);
 }

 /**
  * A constructor that takes the width and height desired
  * for a picture and creates a buffered image of that
  * size.  It also takes the color to use for the
  * background of the picture.
  * @param width the desired width
  * @param height the desired height
  * @param theColor the background color for the picture
  */
 public  SimplePicture(
                    int width, int height, Color theColor)
 {
   this(width,height);
   setAllPixelsToAColor(theColor);
 }

 /**
  * A Constructor that takes a picture to copy
  * information from
  * @param copyPicture the picture to copy from
  */
 public SimplePicture(SimplePicture copyPicture)
 {
   if (copyPicture.fileName != null)
   {
      this.fileName = new String(copyPicture.fileName);
      this.extension = copyPicture.extension;
   }
   if (copyPicture.title != null)
      this.title = new String(copyPicture.title);
   if (copyPicture.bufferedImage != null)
   {
     this.bufferedImage =
                 new BufferedImage(copyPicture.getWidth(),
                                  copyPicture.getHeight(),
                              BufferedImage.TYPE_INT_RGB);
     this.copyPicture(copyPicture);
   }
 }

 /**
  * A constructor that takes a buffered image
  * @param image the buffered image
  */
 public SimplePicture(BufferedImage image)
 {
   this.bufferedImage = image;
   title = "None";
   fileName = "None";
   extension = "jpg";
 }

 ////////////////////////// Methods //////////////////////

 /**
  * Method to get the extension for this picture
  * @return the extendsion (jpg or bmp)
  */
 public String getExtension() { return extension; }


 /**
  * Method that will copy all of the passed source
  * picture into the current picture object
  * @param sourcePicture  the picture object to copy
  */
 public void copyPicture(SimplePicture sourcePicture)
 {
   Pixel sourcePixel = null;
   Pixel targetPixel = null;

   // loop through the columns
   for (int sourceX = 0, targetX = 0;
        sourceX &LT; sourcePicture.getWidth() &&
        targetX &LT; this.getWidth();
        sourceX++, targetX++)
   {
     // loop through the rows
     for (int sourceY = 0, targetY = 0;
          sourceY &LT; sourcePicture.getHeight() &&
          targetY &LT; this.getHeight();
          sourceY++, targetY++)
     {
       sourcePixel =
                  sourcePicture.getPixel(sourceX,sourceY);
       targetPixel = this.getPixel(targetX,targetY);
       targetPixel.setColor(sourcePixel.getColor());
     }
   }

 }

 /**
  * Method to set the color in the picture to the passed
  * color
  * @param color the color to set to
  */
 public void setAllPixelsToAColor(Color color)
 {
   // loop through all x
   for (int x = 0; x &LT; this.getWidth(); x++)
   {
     // loop through all y
     for (int y = 0; y &LT; this.getHeight(); y++)
     {
       getPixel(x,y).setColor(color);
     }
   }
 }

 /**
  * Method to get the buffered image
  * @return the buffered image
  */
 public BufferedImage getBufferedImage()
 {
    return bufferedImage;
 }

 /**
  * Method to get a graphics object for this picture to
  * use to draw on
  * @return a graphics object to use for drawing
  */
 public Graphics getGraphics()
 {
   return bufferedImage.getGraphics();
 }

 /**
  * Method to get a Graphics2D object for this picture
  * which can be used to do 2D drawing on the picture
  */
 public Graphics2D createGraphics()
 {
   return bufferedImage.createGraphics();
 }

 /**
  * Method to get the file name associated with the
  * picture
  * @return  the file name associated with the picture
  */
 public String getFileName() { return fileName; }

 /**
  * Method to set the file name
  * @param name the full pathname of the file
  */
 public void setFileName(String name)
 {
   fileName = name;
 }

 /**
  * Method to get the title of the picture
  * @return the title of the picture
  */
 public String getTitle()
 { return title; }

 /**
  * Method to set the title for the picture
  * @param title the title to use for the picture
  */
 public void setTitle(String title)
 {
   this.title = title;
   if (pictureFrame != null)
       pictureFrame.setTitle(title);
 }

 /**
  * Method to get the width of the picture in pixels
  * @return the width of the picture in pixels
  */
 public int getWidth(){ return bufferedImage.getWidth(); }

 /**
  * Method to get the height of the picture in pixels
  * @return  the height of the picture in pixels
  */
 public int getHeight(){
  return bufferedImage.getHeight();
 }

 /**
  * Method to get the picture frame for the picture
  * @return the picture frame associated with this
  * picture (it may be null)
  */
 public PictureFrame getPictureFrame()
                                  { return pictureFrame; }

 /**
  * Method to set the picture frame for this picture
  * @param pictureFrame the picture frame to use
  */
 public void setPictureFrame(PictureFrame pictureFrame)
 {
   // set this picture objects' picture frame to the
   // passed one
   this.pictureFrame = pictureFrame;
 }

 /**
  * Method to get an image from the picture
  * @return  the buffered image since it is an image
  */
 public Image getImage()
 {
   return bufferedImage;
 }

 /**
  * Method to return the pixel value as an int for the
  * given x and y location
  * @param x the x coordinate of the pixel
  * @param y the y coordinate of the pixel
  * @return the pixel value as an integer (alpha, red,
  * green, blue)
  */
 public int getBasicPixel(int x, int y)
 {
    return bufferedImage.getRGB(x,y);
 }

 /**
  * Method to set the value of a pixel in the picture
  * from an int
  * @param x the x coordinate of the pixel
  * @param y the y coordinate of the pixel
  * @param rgb the new rgb value of the pixel (alpha, red,
  * green, blue)
  */
 public void setBasicPixel(int x, int y, int rgb)
 {
   bufferedImage.setRGB(x,y,rgb);
 }

 /**
  * Method to get a pixel object for the given x and y
  * location
  * @param x  the x location of the pixel in the picture
  * @param y  the y location of the pixel in the picture
  * @return a Pixel object for this location
  */
 public Pixel getPixel(int x, int y)
 {
   // create the pixel object for this picture and the
   // given x and y location
   Pixel pixel = new Pixel(this,x,y);
   return pixel;
 }

 /**
  * Method to get a one-dimensional array of Pixels for
  * this simple picture
  * @return a one-dimensional array of Pixel objects
  * starting with y=0
  * to y=height-1 and x=0 to x=width-1.
  */
 public Pixel[] getPixels()
 {
   int width = getWidth();
   int height = getHeight();
   Pixel[] pixelArray = new Pixel[width * height];

   // loop through height rows from top to bottom
   for (int row = 0; row &LT; height; row++)
     for (int col = 0; col &LT; width; col++)
       pixelArray[row * width + col] =
                                  new Pixel(this,col,row);

   return pixelArray;
 }



 /**
  * Method to load the buffered image with the passed
  * image
  * @param image  the image to use
  */
 public void load(Image image)
 {
   // get a graphics context to use to draw on the
   // buffered image
   Graphics2D graphics2d = bufferedImage.createGraphics();

   // draw the image on the buffered image starting
   // at 0,0
   graphics2d.drawImage(image,0,0,null);

   // show the new image
   show();
 }

 /**
  * Method to show the picture in a picture frame
  */
 public void show()
 {
    // if there is a current picture frame then use it
   if (pictureFrame != null)
     pictureFrame.updateImageAndShowIt();

   // else create a new picture frame with this picture
   else
     pictureFrame = new PictureFrame(this);
 }

 /**
  * Method to hide the picture
  */
 public void hide()
 {
   if (pictureFrame != null)
     pictureFrame.setVisible(false);
 }

 /**
  * Method to make this picture visible or not
  * @param flag true if you want it visible else false
  */
 public void setVisible(boolean flag)
 {
   if (flag)
     this.show();
   else
     this.hide();
 }

 /**
  * Method to open a picture explorer on a copy of this
  * simple picture
  */
 public void explore()
 {
   // create a copy of the current picture and explore it
   new PictureExplorer(new SimplePicture(this));
 }

 /**
  * Method to force the picture to redraw itself.  This is
  * very useful after you have changed the pixels in a
  * picture.
  */
 public void repaint()
 {
   // if there is a picture frame tell it to repaint
   if (pictureFrame != null)
     pictureFrame.repaint();

   // else create a new picture frame
   else
     pictureFrame = new PictureFrame(this);
 }

 /**
  * Method to load the picture from the passed file name
  * @param fileName the file name to use to load the
  * picture from
  */
 public void loadOrFail(
                       String fileName) throws IOException
 {
    // set the current picture's file name
   this.fileName = fileName;

   // set the extension
   int posDot = fileName.indexOf('.');
   if (posDot &gt;= 0)
     this.extension = fileName.substring(posDot + 1);

   // if the current title is null use the file name
   if (title == null)
     title = fileName;

   File file = new File(this.fileName);

   if (!file.canRead())
   {
     // try adding the media path
     file = new File(
                 FileChooser.getMediaPath(this.fileName));
     if (!file.canRead())
     {
       throw new IOException(this.fileName + " could not"
       + " be opened. Check that you specified the path");
     }
   }

   bufferedImage = ImageIO.read(file);
 }


 /**
  * Method to write the contents of the picture to a file
  * with the passed name without throwing errors
  * (THIS MAY NOT BE A VALID DESCRIPTION - RGB)
  * @param fileName the name of the file to write the
  * picture to
  * @return true if success else false
  */
 public boolean load(String fileName)
 {
     try {
         this.loadOrFail(fileName);
         return true;

     } catch (Exception ex) {
         System.out.println("There was an error trying"
                                + " to open " + fileName);
         bufferedImage = new BufferedImage(600,200,
                              BufferedImage.TYPE_INT_RGB);
         addMessage("Couldn't load " + fileName,5,100);
         return false;
     }

 }


 /**
  * Method to load the picture from the passed file name
  * this just calls load(fileName) and is for name
  * compatibility
  * @param fileName the file name to use to load the
  * picture from
  * @return true if success else false
  */
 public boolean loadImage(String fileName)
 {
     return load(fileName);
}

 /**
  * Method to draw a message as a string on the buffered
  * image
  * @param message the message to draw on the buffered
  * image
  * @param xPos  the leftmost point of the string in x
  * @param yPos  the bottom of the string in y
  */
 public void addMessage(
                       String message, int xPos, int yPos)
 {
   // get a graphics context to use to draw on the
   // buffered image
   Graphics2D graphics2d = bufferedImage.createGraphics();

   // set the color to white
   graphics2d.setPaint(Color.white);

   // set the font to Helvetica bold style and size 16
   graphics2d.setFont(new Font("Helvetica",Font.BOLD,16));

   // draw the message
   graphics2d.drawString(message,xPos,yPos);

 }

 /**
  * Method to draw a string at the given location on the
  * picture
  * @param text the text to draw
  * @param xPos the left x for the text
  * @param yPos the top y for the text
  */
 public void drawString(String text, int xPos, int yPos)
 {
   addMessage(text,xPos,yPos);
 }

 /**
   * Method to create a new picture by scaling the
   * current picture by the given x and y factors
   * @param xFactor the amount to scale in x
   * @param yFactor the amount to scale in y
   * @return the resulting picture
   */
  public Picture scale(double xFactor, double yFactor)
  {
    // set up the scale transform
    AffineTransform scaleTransform =
                                    new AffineTransform();
    scaleTransform.scale(xFactor,yFactor);

    // create a new picture object that is the right size
    Picture result = new Picture(
                           (int) (getWidth() * xFactor),
                           (int) (getHeight() * yFactor));

    // get the graphics 2d object to draw on the result
    Graphics graphics = result.getGraphics();
    Graphics2D g2 = (Graphics2D) graphics;

    // draw the current image onto the result image
    // scaled
    g2.drawImage(this.getImage(),scaleTransform,null);

    return result;
  }

  /**
   * Method to create a new picture of the passed width.
   * The aspect ratio of the width and height will stay
   * the same.
   * @param width the desired width
   * @return the resulting picture
   */
  public Picture getPictureWithWidth(int width)
  {
    // set up the scale transform
    double xFactor = (double) width / this.getWidth();
    Picture result = scale(xFactor,xFactor);
    return result;
  }

  /**
   * Method to create a new picture of the passed height.
   * The aspect ratio of the width and height will stay
   * the same.
   * @param height the desired height
   * @return the resulting picture
   */
  public Picture getPictureWithHeight(int height)
  {
    // set up the scale transform
    double yFactor = (double) height / this.getHeight();
    Picture result = scale(yFactor,yFactor);
    return result;
  }

 /**
  * Method to load a picture from a file name and show it
  * in a picture frame
  * @param fileName the file name to load the picture
  * from
  * @return true if success else false
  */
 public boolean loadPictureAndShowIt(String fileName)
 {
   boolean result = true;// the default is that it worked

   // try to load the picture into the buffered image from
   // the file name
   result = load(fileName);

   // show the picture in a picture frame
   show();

   return result;
 }

 /**
  * Method to write the contents of the picture to a file
  * with the passed name
  * @param fileName the name of the file to write the
  * picture to
  */
 public void writeOrFail(String fileName)
                                        throws IOException
 {
   //the default is current
   String extension = this.extension;

   // create the file object
   File file = new File(fileName);
   File fileLoc = file.getParentFile();

   // canWrite is true only when the file exists
   // already! (alexr)
   if (!fileLoc.canWrite()) {
       // System.err.println(
       // "can't write the file but trying anyway? ...");
        throw new IOException(fileName +
        " could not be opened. Check to see if you can"
        + " write to the directory.");
   }

   // get the extension
   int posDot = fileName.indexOf('.');
   if (posDot &gt;= 0)
       extension = fileName.substring(posDot + 1);

   //write the contents of the buffered image to the file
   // as jpeg
   ImageIO.write(bufferedImage, extension, file);

 }

 /**
  * Method to write the contents of the picture to a file
  * with the passed name without throwing errors
  * @param fileName the name of the file to write the
  * picture to
  * @return true if success else false
  */
 public boolean write(String fileName)
 {
     try {
         this.writeOrFail(fileName);
         return true;
     } catch (Exception ex) {
         System.out.println(
                     "There was an error trying to write "
                     + fileName);
         return false;
     }

 }

 /**
  * Method to set the media path by setting the directory
  * to use
  * @param directory the directory to use for the media
  * path
  */
 public static void setMediaPath(String directory) {
   FileChooser.setMediaPath(directory);
 }

 /**
  * Method to get the directory for the media
  * @param fileName the base file name to use
  * @return the full path name by appending
  * the file name to the media directory
  */
 public static String getMediaPath(String fileName) {
   return FileChooser.getMediaPath(fileName);
 }

  /**
   * Method to get the coordinates of the enclosing
   * rectangle after this transformation is applied to
   * the current picture
   * @return the enclosing rectangle
   */
  public Rectangle2D getTransformEnclosingRect(
                                    AffineTransform trans)
  {
    int width = getWidth();
    int height = getHeight();
    double maxX = width - 1;
    double maxY = height - 1;
    double minX, minY;
    Point2D.Double p1 = new Point2D.Double(0,0);
    Point2D.Double p2 = new Point2D.Double(maxX,0);
    Point2D.Double p3 = new Point2D.Double(maxX,maxY);
    Point2D.Double p4 = new Point2D.Double(0,maxY);
    Point2D.Double result = new Point2D.Double(0,0);
    Rectangle2D.Double rect = null;

    // get the new points and min x and y and max x and y
    trans.deltaTransform(p1,result);
    minX = result.getX();
    maxX = result.getX();
    minY = result.getY();
    maxY = result.getY();
    trans.deltaTransform(p2,result);
    minX = Math.min(minX,result.getX());
    maxX = Math.max(maxX,result.getX());
    minY = Math.min(minY,result.getY());
    maxY = Math.max(maxY,result.getY());
    trans.deltaTransform(p3,result);
    minX = Math.min(minX,result.getX());
    maxX = Math.max(maxX,result.getX());
    minY = Math.min(minY,result.getY());
    maxY = Math.max(maxY,result.getY());
    trans.deltaTransform(p4,result);
    minX = Math.min(minX,result.getX());
    maxX = Math.max(maxX,result.getX());
    minY = Math.min(minY,result.getY());
    maxY = Math.max(maxY,result.getY());

    // create the bounding rectangle to return
    rect = new Rectangle2D.Double(
              minX,minY,maxX - minX + 1, maxY - minY + 1);
    return rect;
  }

 /**
  * Method to return a string with information about this
  * picture
  * @return a string with information about the picture
  */
 public String toString()
 {
   String output =
     "Simple Picture, filename " + fileName +
     " height " + getHeight() + " width " + getWidth();
   return output;
 }

} // end of SimplePicture class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_18">Listing 18</a>. Source code for Ericson's DigitalPicture interface.
</b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import java.awt.Image;
import java.awt.image.BufferedImage;

/**
 * Interface to describe a digital picture.  A digital
 * picture can have a associated file name.  It can have
 * a title.  It has pixels associated with it and you can
 * get and set the pixels.  You can get an Image from a
 * picture or a BufferedImage.  You can load it from a
 * file name or image.  You can show a picture.  You can 
 * create a new image for it.
 * 
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public interface DigitalPicture 
{
 // get the file name that the picture came from  
 public String getFileName(); 
 
 // get the title of the picture 
 public String getTitle(); 

 // set the title of the picture
 public void setTitle(String title); 

 // get the width of the picture in pixels
 public int getWidth(); 

 // get the height of the picture in pixels
 public int getHeight(); 

 // get the image from the picture
 public Image getImage(); 

 // get the buffered image
 public BufferedImage getBufferedImage(); 

 // get the pixel information as an int   
 public int getBasicPixel(int x, int y); 

 // set the pixel information
 public void setBasicPixel(int x, int y, int rgb); 

 // get the pixel information as an object
 public Pixel getPixel(int x, int y); 

 // load the image into the picture
 public void load(Image image); 

 // load the picture from a file
 public boolean load(String fileName); 

 // show the picture 
 public void show(); 
}</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_19">Listing 19</a>. Source code for the program named 
Java360a. </b>
<table border="1" cols="1" width="477" bgcolor="#ddffff">
  <tbody>
    <tr>
      <td>
      <pre>/*Program Java360a
Copyright R.G.Baldwin 2009

The purpose of this program is to illustrate the use of
the following methods of the Picture class:

boolean loadPictureAndShowIt(String fileName)
Picture getPictureWithWidth(int width)
void drawString(String text,int xPos,int yPos)
void addMessage(String message, int xPos, int yPos)
Picture getPictureWithHeight(int height)
Pixel[] getPixels()

An attempt was also made to illustrate the following 
methods to write Picture objects into image files. 
However, the results were very unreliable. Sometimes the 
program was able to write the file and sometimes it 
wasn't. Sometimes when the file was written, it would 
contain the image and sometimes it would be empty.

boolean write(String fileName)
void writeOrFail(String fileName)throws IOException

This program completes the illustrations of the methods of
the Picture class with the exception of the explore 
method. The explore method will be explained in a future 
lesson that is dedicated to that method alone.

The program begins by calling the loadPictureAndShowIt 
method to load and show a picture of a rose. The title 
shown in the JFrame object is "None"

Then the program reads an image file to create a picture 
of a butterfly, which is much  larger than the picture of
the rose.

Then the program calls the getPictureWithWidth method to 
create a new Picture object containing the butterfly image
with the width being set to match the width of the picture
of the rose. Note that the aspect ratio of the butterfly 
picture is preserved.

Then the program calls the drawString method to draw a 
white text string on the picture of the butterfly. The 
drawString method calls the addMessage method to actually
draw the text on the image. The color white is fixed and 
cannot be changed without modifying the method.

Then the program calls the getPictureWithHeight method 
twice to create pictures of the rose and the butterfly 
with the same height. Again, the original aspect ratio of
each image is preserved.

Then the program calls the Baldwin method named 
translatePicture to copy the picture of the rose into the
right side of a new Picture object. It calls the 
copyPicture method to copy the picture of the butterfly 
into the left side of the same picture. The pictures used
as input to this operation are the pictures with the same
height. This produces a new Picture object containing
side-by-side images of the butterfly and the rose.

Then the program uses the getPixels method to create a 
new picture of the butterfly and the rose side-by-side 
with the value of the red color component reduced by a 
factor of two. This is a very useful approach when you 
want to perform the same operation on every pixel in a 
Picture object.

Tested using Windows Vista Premium Home edition and
Ericson's multimedia library.
*********************************************************/
import java.awt.Graphics2D;
import java.awt.Color;
import java.awt.geom.AffineTransform;


public class Main{
  public static void main(String[] args){
    new Runner().run();
  }//end main method
}//end class Main
//------------------------------------------------------//

class Runner{
  void run(){

    //The following code will load and show the rose with
    // a title of "None"
    Picture pixA = new Picture(1,1);
    pixA.loadPictureAndShowIt("rose.jpg");
    
    //Create a picture of a butterfly, which is much
    // larger than the picture of the rose.
    Picture pixB = new Picture("butterfly1.jpg");
    pixB.setTitle("pixB");
    pixB.show();
    
    //Create a new Picture object containing the butterfly
    // image. The width of the new picture is set to match
    // the width of the picture of the rose. Note that the
    // aspect ratio is preserved.
    Picture pixC = 
                pixB.getPictureWithWidth(pixA.getWidth());
    pixC.setTitle("pixC");
    
    //Draw white text on the picture of the butterfly.
    pixC.drawString("Same width as rose.",20,20);
    pixC.show();
    
    //Create pictures of the rose and the butterfly with 
    // the same height and their original aspect ratios.
    Picture pixD = pixA.getPictureWithHeight(200);
    Picture pixE = pixB.getPictureWithHeight(200);
    
    //Copy the picture of the rose into the right side of
    // a new picture.
    Picture pixF = 
                 translatePicture(pixD,pixE.getWidth(),0);
    
    //Copy the picture of the butterfly into the left side
    // of the same picture. This results in a Picture 
    // object containing side-by-side images of the 
    // butterfly and the rose, both with the same height.
    pixF.copyPicture(pixE);
    pixF.setTitle("pixF");
    pixF.show();
    
    //Create and show a new picture of the butterfly and 
    // the rose side-by-side and reduce the value of the 
    // red color component by a factor of two. The 
    // getPixels method is very useful when you want to 
    // perform the same operation on every pixel in a 
    // picture.
    Picture pixG = new Picture(pixF);
    pixG.setTitle("pixG");
    Pixel[] pixels = pixG.getPixels();
    int red = 0;
    for(int cnt = 0;cnt &lt; pixels.length;cnt++){
      red = pixels[cnt].getRed();
      pixels[cnt].setRed((int)(red*0.5));
    }//end for loop
    pixG.show();

  }//end run method
  //----------------------------------------------------//

  //The following method accepts a reference to a Picture
  // object along with positive x and y translation
  // values. It creates and returns a new Picture object
  // that contains a translated version of the original
  // image with whitespace to the left of and/or above the
  // translated image. If either translation value is
  // negative, the method simply returns a reference to a
  // copy of the original picture.
  public Picture translatePicture(
                         Picture pix,double tx,double ty){
    if((tx &lt; 0.0) || (ty &lt; 0.0)){
      //Negative translation values are not supported.
      // Simply return a reference to a copy of the
      // incoming picture. Note that this constructor
      // creates a new picture by copying the image from
      // an existing picture.
      return new Picture(pix);
    }//end if

    //Set up the transform
    AffineTransform translateTransform =
                                    new AffineTransform();
    translateTransform.translate(tx,ty);

    //Compute the size of a rectangle that is of
    // sufficient size to contain and display the
    // translated image.
    int pixWidth = pix.getWidth() + (int)tx;
    int pixHeight = pix.getHeight() + (int)ty;

    //Create a new picture object that is the correct
    // size.
    Picture result = new Picture(pixWidth,pixHeight);

    //Get the graphics2D object to draw on the result.
    Graphics2D g2 = (Graphics2D)result.getGraphics();

    //Draw the translated image from pix onto the new
    // Picture object, applying the transform in the
    // process.
    g2.drawImage(pix.getImage(),translateTransform,null);

    return result;
  }//end translatePicture
  //----------------------------------------------------//

}//end class Runner</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2009, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
