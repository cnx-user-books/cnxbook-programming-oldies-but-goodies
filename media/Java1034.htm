<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<h2>
Swing from A to Z: Demystifying Glue and Struts, Part 1</h2>
<b>Published&nbsp; </b>December 4, 2000
<br><b>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1034
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next?</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different figures while you are reading about them without
losing your place.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In the lesson entitled <i>Alignment Properties and BoxLayout, Part 1</i>,
I recommended a list of Swing tutorials for you to study prior to embarking
on a study of this set of lessons.
<p>The lessons identified on that list will introduce you to the use of
Swing while avoiding much of the detail included in this series.
<p><b><font color="#FF0000">Where are they located?</font></b>
<p>You will find those lessons published at <a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes my lessons are difficult
to locate there.&nbsp; You will find a consolidated index at
<i>Baldwin's
Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><font color="#000000">The index on my site provides links to the lessons
at Gamelan.com.</font>
<center>
<h2>
<a NAME="Preview"></a>Preview</h2></center>
In this lesson, I will show you some screen shots from a program that is
designed to take the mystery out of glue and struts.&nbsp; This program
doesn't use glue and struts as produced by the factory methods that were
illustrated in the lesson entitled <i>Glue, Struts, and BoxLayout</i>.&nbsp;
Instead, this program makes use of invisible spacer components of my own
design that behave similarly to glue and struts but provide more capability.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<font color="#000000">In the lesson entitled <i>Alignment Properties and
BoxLayout, Part 1</i>, I introduced you to the <b>BoxLayout</b> manager.&nbsp;
I will use <b>BoxLayout</b> in the sample program discussed in this lesson.</font>
<p><b><font color="#FF0000">The mystery of glue and struts</font></b>
<p><font color="#000000">In another lesson entitled <i>Glue, Struts, and
BoxLayout</i>, I introduced you to the use of glue and struts.&nbsp; I
don't know about you, but when I first encountered the use of glue and
struts, they seemed pretty mysterious to me.&nbsp; However, we didn't have
the tools to take the mystery out of glue and struts until we studied the
size properties in the lesson entitled <i>Minimum, Maximum, and Preferred
Sizes</i>.</font>
<p><b><font color="#FF0000">My promise to you</font></b>
<p><font color="#000000">In the lesson entitled <i>Minimum, Maximum, and
Preferred Sizes</i>, I promised you that this lesson would take the mystery
out of glue and struts.&nbsp; I also promised that we would have some fun
in the process.&nbsp; Hopefully I can keep that promise.</font>
<p><b><font color="#FF0000">What are minimum, maximum, and preferred sizes?</font></b>
<p>All components that extend <b>JComponent</b> inherit the following three
properties that support the use of layout managers:
<ul>
<li>
preferredSize</li>

<li>
minimumSize</li>

<li>
maximumSize</li>
</ul>
<b><font color="#FF0000">Why are they needed?</font></b>
<p><font color="#000000">Whenever the size of a container changes, the
layout manager <i>may</i> use these properties to change component sizes
in accordance with the wishes of the programmer.</font>
<p><b><font color="#FF0000">Different layout managers do different things</font></b>
<p><font color="#000000">Different layout managers use these properties
in different ways.&nbsp; The <b>BoxLayout</b> manager honors the width
dimension of all three properties for components placed on a horizontal
line.&nbsp; <i>(It probably also honors the height dimension for components
placed on a vertical line, but we haven't demonstrated that.)</i></font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
This sample program, named <b>Swing20</b> is designed to take the mystery
out of glue and struts as used with <b>BoxLayout</b>.&nbsp; I will show
you some screen shots produced by this program in this lesson, and will
get into the details of the code in the next lesson.
<p><b><font color="#FF0000">Must resize to see the effect</font></b>
<p>This program illustrates the use of invisible fixed-width and elastic
spacers to control the separation between components.&nbsp; In order to
see the effect of the spacers, you must manually resize the <b>JFrame</b>
object to make it larger and smaller.
<p><b><font color="#FF0000">BoxLayout can be used with many containers</font></b>
<p>This program also demonstrates that <b>BoxLayout</b> can be used with
containers other than <b>Box</b>, <i>(even containers that might not ordinarily
be used for this purpose)</i>.
<p><b><font color="#FF0000">Let's make things interesting</font></b>
<p>Just to make things interesting, this program places a <b>JButton</b>
on the content pane in a <b>JFrame</b> and uses that <b>JButton</b> as
a container for several other components.&nbsp; <i>(You should recall that
a JButton, like most components in Swing, is a container.)</i>
<p><b><font color="#FF0000">Why use a JButton as a container?</font></b>
<p>I'm not suggesting that a <b>JButton</b> has any particular usefulness
when used as a container in this fashion.&nbsp; I simply elected to use
it to demonstrate that <b>BoxLayout</b> can be used with a variety of different
container types.
<p><b><font color="#FF0000">A JButton with a BoxLayout manager</font></b>
<p>The layout manager for the <b>JButton</b> is set to <b>BoxLayout.</b>
<p><b>BoxLayout</b> allows you to specify whether the components will be
arranged on a horizontal line, or on a vertical line.&nbsp; In this case,
a horizontal line placement was specified.
<p><b><font color="#FF0000">What does it look like?</font></b>
<p>Three green <b>JButton</b> objects and two yellow <b>JLabel</b> objects
were placed in the large <b>JButton</b> as shown in the screen shot identified
as Figure 1.
<center>
<p><img SRC="java1034a.gif" height=65 width=236>
<p><b>Figure 1.&nbsp; A screen shot at startup</b></center>

<p><b><font color="#FF0000">Also contains invisible spacer components</font></b>
<p>In addition, several invisible spacers were placed between the buttons
and the labels as shown in Figure 1.
<p><b><font color="#FF0000">Custom-designed spacers were used</font></b>
<p>However, in this case, the invisible spacers were not <i>glue</i> and
<i>struts</i>
as described in the lesson entitled <i>Glue, Struts, and BoxLayout</i>.&nbsp;
Rather, the invisible spacers were custom designed using two different
approaches.
<p>Two of these new spacer types have more capability than the standard
glue and struts discussed in the lesson entitled <i>Glue, Struts, and BoxLayout</i>.
<p><b><font color="#FF0000">Is this a better alternative?</font></b>
<p>I'm not necessarily presenting this as a better alternative to glue
and struts.&nbsp; Rather, I am presenting it as a way for you to better
understand the inner-workings of glue and struts.
<p><b><font color="#FF0000">Three different types of spacers</font></b>
<p>When we get to the program code in the next lesson, you will see that
three different types of spacers were created and used:
<ul>
<li>
Fixed Spacer</li>

<li>
Elastic Spacer</li>

<li>
Combination Spacer</li>
</ul>
<b><font color="#FF0000">How do they behave?</font></b>
<p>The fixed spacers behave in a manner very similar to struts when used
with <b>BoxLayout</b>.
<p>The elastic spacers behave like glue, <i>except that you can specify
the maximum amount of "stretch"</i>.&nbsp; When the elastic spacers hit
that limit, they won't stretch any more.
<p>The combination spacers combine the behavior of fixed spacers and elastic
spacers in a single spacer object.
<p><b><font color="#FF0000">Fixed width spacers having different widths</font></b>
<p>Now, please refer back to Figure 1.&nbsp; This is the image that first
appears on the screen when you start the program <i>(before any manual
resizing takes place)</i>.
<p><b><font color="#FF0000">Space increases from left to right</font></b>
<p>Note that each pair of components is separated by progressively more
space moving from left to right across the image.&nbsp; The components
were separated by fixed-width spacers having the following widths:&nbsp;
3, 4, 5, and 6 pixels.
<p><b><font color="#FF0000">What if you make it narrower?</font></b>
<p>Now refer to Figure 2.&nbsp; This screen shot shows the behavior of
the
<b>BoxLayout</b> manager with this set of components when the width
of the container is manually decreased.
<center>
<p><img SRC="java1034c.gif" height=65 width=202>
<p><b>Figure 2.&nbsp; A screen shot after making the Frame narrower.</b></center>

<p><b><font color="#FF0000">Spaces don't decrease</font></b>
<p>As you would expect from your studies on glue and struts, since the
invisible spacers between the button and label components have a fixed
width, the space between them doesn't decrease.
<p><b><font color="#FF0000">Right-most component gets clipped</font></b>
<p>Rather, the visible components remain the same distance apart, and the
right-most component gets clipped when the container is no longer wide
enough to accommodate the total width of the buttons, the labels, and the
fixed-width spacers.
<p><b><font color="#FF0000">An interesting effect</font></b>
<p>There is one interesting aspect of Figure 2 that you may have noticed.&nbsp;
Even though the large <b>JButton</b> object is the actual container, it
appears that the right-most component is not clipped at the "edge" of the
large <b>JButton</b>.&nbsp; Rather, it is clipped at the edge of the client
area of the <b>JFrame</b>.
<p><b><font color="#FF0000">An artifact of the 3D rendering</font></b>
<p>This is an artifact of the three-dimensional rendering of the large
<b>JButton</b>.&nbsp;
The outer edge of the <b>JButton </b>is at the inner edge of the client
area of the <b>JFrame</b> <i>(inside its borders)</i>.&nbsp; All of the
decorations that cause the <b>JButton</b> to exhibit the optical illusion
of being three-dimensional are inside its outer edges.
<p><b><font color="#FF0000">Clipped at the actual outer edge</font></b>
<p>The right-most component is clipped at the actual outer edge of the
<b>JButton</b>,
but this is beyond the "apparent" edge of the three-dimensional representation
of the <b>JButton</b>.
<p><b><font color="#FF0000">Can demonstrate using Metal look and feel</font></b>
<p>You can demonstrate this by modifying the program (discussed in a subsequent
lesson) to cause it to use a Metal look and feel instead of a Windows look
and feel.&nbsp; A <b>JButton</b> in the Metal look and feel has very little
three-dimensional decoration, and the clipping location appears closer
to where you would expect to see it.
<p><b><font color="#FF0000">What if you increase the width?</font></b>
<p>The screen shot in Figure 3 shows what happens when you increase the
width of the <b>JFrame</b>, and hence increase the width of the large <b>JButton</b>
serving as a container for the other components.
<center>
<p><img SRC="java1034b.gif" height=65 width=307>
<p><b>Figure 3.&nbsp; A screen shot after making the Frame wider.</b></center>

<p><b><font color="#FF0000">Elastic spacers were used</font></b>
<p>Elastic spacers were inserted on both sides of the button labeled <b>b2</b>,
and on the left side of the button labeled <b>b3</b>.
<p><b><font color="#FF0000">Can only stretch so far</font></b>
<p>However, unlike glue, these spacers have an upper limit on their elasticity.
<p>Going from left to right, the upper limit is:&nbsp; 6, 12, and 24 pixels
respectively.
<p><b><font color="#FF0000">The maximum stretch limits</font></b>
<p>In other words, the first elastic spacer on the left is allowed to stretch
to a maximum width of six pixels.&nbsp; Each of the other elastic spacers
is allowed to stretch twice as far as the elastic spacer to its left.
<p>As you can see in Figure 3, the space between each pair of components
is approximately (but not exactly) twice the width of the space to its
left.&nbsp; <i>(I will have more to say about this in the next lesson.)</i>
<p><b><font color="#FF0000">What about the big space on the right?</font></b>
<p>I did not insert a spacer on the right-hand side of <b>b3</b>.&nbsp;
However, the space on the right-hand side of <b>b3</b> is the largest of
all.&nbsp; Furthermore, it continues to grow as the width of the <b>JFrame</b>
continues to increase.&nbsp; This indicates that the elastic spacers have
all reached their limit.&nbsp; The remaining required space is being provided
on the right end of the line by the <b>BoxLayout</b> manager.
<p><b><font color="#FF0000">A single combination spacer</font></b>
<p>When we get to a discussion of the program code, you will see that a
single spacer of the Combination Spacer type was inserted to the left of
the button labeled <b>b3</b>.&nbsp; This single spacer component had a
fixed minimum width of six pixels and a maximum width of 24 pixels.
<p><b><font color="#FF0000">A single fixed spacer</font></b>
<p>A single fixed-width spacer component (without an Elastic Spacer) was
inserted to the right of the button labeled <b>b1</b>.&nbsp; This component
had a fixed width of three pixels.&nbsp; Hence, the space between <b>b1</b>
and <b>L1</b> did not increase when the width of the <b>JFrame</b> was
manually increased.
<p><b><font color="#FF0000">Two pairs of spacers</font></b>
<p>A pair of spacers was inserted on each side of the button labeled <b>b2</b>.&nbsp;
Each pair consisted of one spacer of the Fixed Spacer type and one spacer
of the Elastic Spacer type.
<p>The widths of the Fixed Spacers were 4 and 5 pixels respectively.
<p>The maximum widths of the Elastic Spacers were 6 and 12 pixels respectively.
<p><b><font color="#FF0000">Elastic spacers have zero minimum width</font></b>
<p>In all cases, the minimum width of the elastic spacers was zero pixels.
<br>&nbsp;
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In this lesson, I have shown you some screen shots from a program that
is designed to take the mystery out of <i>glue</i> and <i>struts</i>.&nbsp;
This program doesn't use glue and struts as produced by the factory methods
that were illustrated in the lesson entitled <i>Glue, Struts, and BoxLayout</i>.
<p>Instead, this program makes use of invisible spacer components of my
own design that behave similarly to glue and struts but provide more capability.&nbsp;
I am hopeful that an examination of the code for these spacers will serve
to make the behavior of glue and struts more understandable.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will introduce you to the actual code that was used
to produce the screen shots that were shown in this lesson.&nbsp; In that
lesson, you will learn how to design your own invisible spacer components
using two different approaches.
<br>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
