<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JavaBeans, Properties of Beans, Bound Properties<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 510, Revised 02/19/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#introspection on the bean class">Introspection on the Bean Class</a></li>

<li><a href="#overview of properties">Properties</a></li>

<li><a href="#sample bean program">Sample Bean Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments from the
Bean Program</a></li>

<li><a href="#bean program listing">Program Listing for the Bean Program</a></li></ul>

<li><a href="#sample test program">Sample Test Program</a></li>

<ul><li><a href="#interesting code fragments from the test program">Interesting
Code Fragments from the Test Program</a></li>

<li><a href="#program listing for the test program">Program Listing for the
Test Program</a></li></ul>

<li><a href="#using the propertychangesupport class">Using the PropertyChangeSupport
Class</a></li>

<li><a href="#review">Review</a></li></ul>

<hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.

<p>The material in this lesson is extremely important. However, there is
simply too much material to be covered in detail during lecture periods.
Therefore, students in Prof. Baldwin's <b>Advanced Java Programming</b>
classes at ACC will be responsible for studying this material on their
own, and bringing any questions regarding the material to class for discussion.

<p>This lesson was originally written on October 18, 1997 using the software
and documentation in the JDK 1.1.3 download package along with the April
97 release of the BDK 1.0 download package.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
According to the document from JavaSoft entitled <u>Using the Beans Development
Kit 1.0 April 1997 A Tutorial</u>:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>A <b>bound </b>property notifies other objects when its value changes.
Each time its value is changed, the property fires a <b>PropertyChange
</b>event which contains the property name, old, and new values. Notification
granularity is per bean, not per property.</td></tr></table>
In this lesson, we will develop and test a <b>bean </b>class, named <b>Beans03</b>,
that illustrates the use of <i>bound </i>properties.

<p>This <b>bean </b>class is examined with the <b>Introspector</b> and
is tested with a test program designed specifically to exercise the ability
of the bean to broadcast an event to a list of registered <b>listener </b>objects
whenever the value of one of the properties changes.
<center><h2><a name="introspection on the bean class"></a><font color="#ff0000">Introspection
on the Bean Class</font></h2></center>
One way to describe a <b>bean</b> is to describe it from the viewpoint
of a Visual Builder Tool (VBT) using <b>introspection</b>. In an earlier
lesson we developed a Java application named <b>Introspect01 </b>that can
be used to apply <b>introspection </b>to a bean class and to record the
results in a temporary disk file. The following box shows the results of
<b>introspection </b>on the sample bean class that was developed for this
lesson.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>Name of bean:&nbsp; Beans03
Class of bean: class Beans03

==== Properties: ====
Name: preferredSize
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Dimension
&nbsp;Get method: public synchronized java.awt.Dimension&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.getPreferredSize()
&nbsp;Set method: null
Name: theDate
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.util.Date
&nbsp;Get method: null
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.setTheDate(java.util.Date)
Name: theColor
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Color
&nbsp;Get method: public synchronized java.awt.Color&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.getTheColor()
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.setTheColor(java.awt.Color)

<b>==== Events: ====
Event Name: propertyChange
&nbsp;Add Method:&nbsp;&nbsp;&nbsp; public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.PropertyChangeListener)
&nbsp;Remove Method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; java.beans.PropertyChangeListener)
&nbsp;Event Type: propertyChange

</b>==== Methods: ====
makeRed
setTheDate
removePropertyChangeListener
getTheColor
setTheColor
getPreferredSize
addPropertyChangeListener
makeBlue</pre></td></tr></table>
The primary functional difference between this <b>bean </b>class and <b>bean
</b>classes developed in previous lessons is shown in the highlighted section
entitled <b>Events</b>. This section shows the <i>add</i> and <i>remove</i>
methods which provide the ability of the <b>bean</b> to notify a list of
listener objects whenever a change occurs in one of the property values.
(Note that this bean does not notify listeners of changes in the value
of the property named <b>preferredSize </b>but it does notify listeners
of changes in the values of the other two properties.)
<center><h2><a name="overview of properties"></a><font color="#ff0000">Properties</font></h2></center>
There are four kinds of properties:
<ul><li>
Simple</li>

<li>
Indexed</li>

<li>
Bound</li>

<li>
Constrained</li></ul>
A previous lesson discussed <i>Simple</i> and <i>Indexed</i> properties.
This lesson will concentrate on <i>Bound </i>properties. <i>Constrained
</i>properties will be discussed in a future lesson.

<p>The <b>bean</b> class developed for this lesson has the following <i>Bound</i>
properties:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>Name: <b>theDate
</b>&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.util.Date
&nbsp;Get method: null
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.setTheDate(java.util.Date)
Name: <b>theColor
</b>&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Color
&nbsp;Get method: public synchronized java.awt.Color&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.getTheColor()
&nbsp;Set method: public synchronized void&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Beans03.setTheColor(java.awt.Color)</pre></td></tr></table>
The bean maintains a list of objects that request to be notified whenever
there is a change in the value of either of the <i>Bound</i> properties.
This is often referred to as registering <b>listener</b> objects to receive
an event.

<p>Objects that request to be added to the list must be of a class that
implements the <b>PropertyChangeListener </b>interface and defines the
<b>propertyChange()</b> method that is declared in that interface.

<p>Whenever a value is assigned to the instance variables used to maintain
these properties (regardless of whether or not it is a different value)
an event is broadcast to all of the listener objects registered on the
list.

<p>The event is broadcast by invoking the <b>propertyChange()</b> method
on all of the objects on the list. When this method is invoked on a <b>listener
</b>object, an object of type <b>PropertyChangeEvent</b> is passed as a
parameter.

<p>The <b>PropertyChangeEvent </b>object passed as a parameter to the <b>propertyChange()</b>
method in the listener objects contains the following information:
<ul><li>
Object source, //the bean object in this case</li>

<li>
String propertyName, //the name of the changed property</li>

<li>
Object oldValue, //the old value of the changed property</li>

<li>
Object newValue //the new value of the changed property</li></ul>
As you can see, three of the parameters passed to the <b>propertyChange()</b>
method are of type <b>Object</b>, and one is of type <b>String</b>. The
parameters of type <b>Object </b>sometimes need to be downcast to the correct
type to be used in the receiving method.

<p>Notification of the <b>listener </b>objects takes place <u>after</u>
the change in the property value has occurred. This bean class does not
save the <i>old </i>value when it assigns a new value. As a result, it
passes <b>null </b>as the <i>old </i>value of the changed property because
the <i>old </i>value is no longer available when the listener objects are
notified that a change has occurred.

<p>The following methods are available to extract information from the
object passed as a parameter. These methods are defined by the <b>PropertyChangeEvent
</b>class or its superclass, <b>EventObject</b>:
<ul><li>
public Object getSource();</li>

<li>
public Object getNewValue();</li>

<li>
public Object getOldValue();</li>

<li>
public String getPropertyName;</li>

<li>
public void setPropagationId();</li>

<li>
public Object getPropagationId;</li></ul>
The test program (named <b>Beans03Test</b>) used in this lesson to partially
test the <b>bean </b>class uses the first four of these methods. Apparently
the PropagationID is reserved for future use.
<center><h2><a name="sample bean program"></a><font color="#ff0000">Sample Bean Program</font></h2></center>
In this lesson, we will deal with two different programs. One program is
a program that creates a <b>bean </b>class named <b>Beans03.java</b>..
The other program is a program used to partially test the <b>bean </b>named
<b>Beans03Test.java</b>. This section deals with the program used to create
the <b>bean</b>.

<p>This program was designed to be compiled and executed under JDK 1.1.3.
It was tested using JDK 1.1.3 and the Apr97 version of the BDK 1.0 under
Win95.

<p>The purpose of this <b>bean</b> class is to illustrate <i>bound</i>
properties.

<p>This bean contains two bound properties: a <b>Color </b>property named
<b>theColor</b> and a <b>Date</b> property named <b>theDate</b>. The <b>Date</b>
property is a <i>write-only</i> property because no <i>get</i> method is
provided for this property. (The bean class also contains a read-only property
named <b>preferredSize</b> which resulted from providing that information
for the benefit of the layout manager.)

<p>Note that as of this writing in October of 1997, this <b>bean</b> class
has not been tested in the BeanBox. It was tested using the test program
named <b>Beans03Test</b>.

<p>Any of the three methods in the following list can be invoked to assign
a new value to the property named <b>theColor. </b>Whenever any of these
methods are invoked, and after the new value is assigned to the property,
a <b>PropertyChangeEvent</b> is broadcast to all registered <b>listener
</b>objects.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>setTheColor()
makeRed()
makeBlue()</pre></td></tr></table>
Only the one method listed below is available to assign a new value to
the property named <b>theDate. </b>Whenever this method is invoked, a <b>PropertyChangeEvent</b>
is broadcast to all registered <b>listener </b>objects.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>setTheDate()</pre></td></tr></table>
With a little extra programming effort, it would have been possible to
compare the new values being assigned to the properties with the old values
and to broadcast events only when the value actually changed. This probably
would have been more in keeping with the philosophy of a <b>PropertyChangeEvent</b>.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments from the Bean Program</font></h3></center>
This <b>bean</b> class contains a number of interesting code fragments.
The following fragment shows the declaration of two reference variables
used to maintain the <i>bound</i> properties and also shows the instantiation
of a <b>Vector</b> object that is used to maintain the list of registered
<b>listener</b> objects.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; //The following instance variables are used to store
&nbsp; // property values.
&nbsp; protected Color myColor;
&nbsp; protected Date myDate;
&nbsp;&nbsp;
&nbsp; //The following Vector is used to maintain a list of&nbsp;
&nbsp; // listeners who request to be notified of changes in the
&nbsp; // property values.
&nbsp; protected Vector propChangeListeners = new Vector();</pre></td></tr></table>
The following <i>set</i> and <i>get</i> methods, used in conjunction with
the instance variable named <b>myColor</b> constitute a property named
<b>theColor</b>. Note in particular the highlighted statement that causes
a <b>PropertyChangeEvent</b> to be broadcast each time the <b>setTheColor()</b>
method is invoked.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;
&nbsp; public synchronized void <b>setTheColor</b>(Color inColor){
&nbsp;&nbsp;&nbsp; myColor = inColor;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
<b>&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
</b>&nbsp; }//end setTheColor()

&nbsp; public synchronized Color <b>getTheColor</b>(){
&nbsp;&nbsp;&nbsp; return myColor;
&nbsp; }//end getTheColor</pre></td></tr></table>
The following <i>set</i> method used in conjunction with the instance variable
named <b>myDate</b> constitutes a <i>write-only</i> property named <b>theDate</b>.
Again, note the highlighted statement that causes a <b>PropertyChangeEvent</b>
to be broadcast each time the <b>setTheDate()</b> method is invoked.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public synchronized void <b>setTheDate</b>(Date dateIn){
&nbsp;&nbsp;&nbsp; myDate = dateIn;
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;<b>&nbsp; notifyPropertyChange("theDate");
</b>&nbsp; }//end setTheDate()</pre></td></tr></table>
The following two methods are exposed to the builder tool as accessible
methods for switching the value of the property named <b>theColor</b> between
<i>blue </i>and <i>red</i>. Again, note the highlighted statements that
cause a <b>PropertyChangeEvent</b> to be broadcast each time either of
these methods is invoked.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; public synchronized void <b>makeBlue</b>(){
&nbsp;&nbsp;&nbsp; myColor = Color.blue;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;<b>&nbsp; notifyPropertyChange("theColor");
</b>&nbsp; }//end makeBlue()

&nbsp; public synchronized void <b>makeRed</b>(){
&nbsp;&nbsp;&nbsp; myColor = Color.red;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;<b>&nbsp; notifyPropertyChange("theColor");
</b>&nbsp; }//end makeRed()</pre></td></tr></table>
The following two methods are used to maintain a list of registered <b>listener
</b>objects who request to be notified of changes to the properties, or
who request to be removed from the list of registered <b>listener </b>objects.
These methods are consistent with the behavior of the <i>Delegation Event
Model</i> operating in a <i>multicast</i> mode.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;
&nbsp; //<b>Add </b>a property change listener object to the list.
&nbsp; public synchronized void <b>addPropertyChangeListener</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //If the listener is not already registered, add it
&nbsp;&nbsp;&nbsp; // to the list.
&nbsp;&nbsp;&nbsp; if(!propChangeListeners.contains(listener)){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propChangeListeners.addElement(listener);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end addPropertyChangeListener
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //<b>Remove </b>a property change listener from the list.
&nbsp; public synchronized void <b>removePropertyChangeListener</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //If the listener is on the list, remove it
&nbsp;&nbsp;&nbsp; if(propChangeListeners.contains(listener)){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propChangeListeners.removeElement(listener);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end removePropertyChangeListener
&nbsp;&nbsp;</pre></td></tr></table>
The following method is invoked by several of the methods described above,
and is used to notify listener objects of changes in the properties. The
incoming parameter is the name of the property that has changed.

<p>In this case, there are only two <i>bound</i> properties. The incoming
property name is used in a decision tree to determine which of the <i>bound</i>
properties has changed in order to determine the values to be encapsulated
in the <b>PropertyChangeEvent</b> object that is passed as a parameter
when the registered <b>listener </b>objects are notified of the change.

<p>Note that objects maintained in a <b>Vector</b> object are always of
type <b>Object</b>. This leads to the need to downcast the objects in the
list from <b>Object</b> to <b>PropertyChangeListener</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;
&nbsp; protected void <b>notifyPropertyChange</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String changedProperty){
&nbsp;&nbsp;&nbsp; //Instantiate the event object containing information
&nbsp;&nbsp;&nbsp; // about the property that has changed.
&nbsp;&nbsp;&nbsp; <b>PropertyChangeEvent </b>event;
&nbsp;&nbsp;&nbsp; <b>if</b>(changedProperty.compareTo("<b>theColor</b>") == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Change was in theColor property
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event = <b>new </b>PropertyChangeEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this,changedProperty,null,<b>myColor</b>);
&nbsp;&nbsp;&nbsp; <b>else</b>//Change was in the theDate property
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event = <b>new </b>PropertyChangeEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this,changedProperty,null,<b>myDate</b>);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Make a <b>working copy</b> of the list that cannot be&nbsp;
&nbsp;&nbsp;&nbsp; // modified while objects on the list are being&nbsp;
&nbsp;&nbsp;&nbsp; // notified of the change.
&nbsp;&nbsp;&nbsp; Vector tempList;
&nbsp;&nbsp;&nbsp; synchronized(this){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempList = (Vector)propChangeListeners.clone();
&nbsp;&nbsp;&nbsp; }//end synchronized block
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Notify all listener objects on the list.&nbsp; Note the
&nbsp;&nbsp;&nbsp; // requirement to <b>downcast </b>the objects in the list from
&nbsp;&nbsp;&nbsp; // <b>Object </b>to <b>PropertyChangeListener</b>.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempList.size();cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener theListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (PropertyChangeListener)tempList.elementAt(cnt);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the propertyChange() method on theListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theListener.propertyChange(event);
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end notifyPropertyChange
}//end class Beans03.java</pre></td></tr></table>
A consolidated listing of the entire <b>bean</b> class is provided in the
next section.
<center><h3><a name="bean program listing"></a><font color="#ff0000">Program Listing
for the Bean Program</font></h3></center>
This section contains a consolidated listing of the <b>bean</b> class.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Beans03.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

The main purpose of this program is to illustrate the use&nbsp;
of "bound" properties in Beans.

This is a "bean" class that satisfies the interface
requirements for beans using design patterns.

This bean class has two properties named theColor and&nbsp;
theDate.

The current value of the property named theColor is stored
in the instance variable named myColor.

The current value of the property named theDate is stored
in the instance variable named myDate.&nbsp; theDate is a
write-only property because it has a "set" method but does
not have a "get" method.

The program maintains a list of objects that request to be&nbsp;
notified whenever there is a change in the value of either
of the properties.&nbsp; Whenever the value of either property
changes, all of the objects on the list are notified of the
change by invoking their propertyChange() method and&nbsp;
passing an object of type PropertyChangeEvent as a&nbsp;
parameter.

Objects that request to be added to the list must be of a
class that implements the PropertyChangeListener interface
and defines the propertyChange() method that is declared&nbsp;
in that interface.

The PropertyChangeEvent object passed as a parameter to the
propertyChange() method in the listener objects contains&nbsp;
the following information:
&nbsp;&nbsp;
&nbsp; Object source, //the bean object
&nbsp; String propertyName, //the name of the changed property
&nbsp; Object oldValue, //the old value of the changed property
&nbsp; Object newValue&nbsp; //the new value of the changed property
&nbsp;&nbsp;
This program doesn't save the old value and therefore
passes null as the old value of the changed property&nbsp;
because the old value is not available when the listener
objects are notified.
&nbsp;&nbsp;
The following methods are available to extract information
from the object passed as a parameter.&nbsp; These methods are
defined by the PropertyChangeEvent class or its superclass
named EventObject:
&nbsp;&nbsp;
&nbsp; public Object getSource();
&nbsp; public Object getNewValue();
&nbsp; public Object getOldValue();
&nbsp; public String getPropertyName;
&nbsp; public void setPropagationId();
&nbsp; public Object getPropagationId;
&nbsp;&nbsp;
Apparently the PropagationID is reserved for future use.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
The program was compiled and tested under JDK 1.1.3
and Win95.&nbsp; Another program named Beans03Test.java was&nbsp;
used to test the bean.&nbsp; It was not tested in the BeanBox.
//=======================================================//
*/

import java.awt.event.*;
import java.awt.*;
import java.io.Serializable;
import java.util.*;
import java.beans.*;
//=======================================================//
//All beans should implement the Serializable interface
public class Beans03 extends Canvas&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Serializable{

&nbsp; //The following instance variables are used to store
&nbsp; // property values.
&nbsp; protected Color myColor;
&nbsp; protected Date myDate;
&nbsp;&nbsp;
&nbsp; //The following Vector is used to maintain a list of&nbsp;
&nbsp; // listeners who request to be notified of changes in the
&nbsp; // property values.
&nbsp; protected Vector propChangeListeners = new Vector();
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; public Beans03(){//constructor
&nbsp;&nbsp;&nbsp; //This bean is a visible square that is initialized to
&nbsp;&nbsp;&nbsp; // yellow and can then be changed to green, red, and
&nbsp;&nbsp;&nbsp; // blue by invoking methods of the class.
&nbsp;&nbsp;&nbsp; myColor = Color.yellow;
&nbsp;&nbsp;&nbsp; setBackground(myColor);
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //This method defines the preferred display size of the&nbsp;
&nbsp; // bean object.&nbsp;&nbsp;
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()
&nbsp; //-----------------------------------------------------//

&nbsp; //The following "set" and "get" methods in conjunction&nbsp;
&nbsp; // with the instance variable named myColor constitute a
&nbsp; // property named theColor.&nbsp;&nbsp;
&nbsp; public synchronized void setTheColor(Color inColor){
&nbsp;&nbsp;&nbsp; myColor = inColor;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end setTheColor()

&nbsp; public synchronized Color getTheColor(){
&nbsp;&nbsp;&nbsp; return myColor;
&nbsp; }//end getTheColor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following "set" method in conjunction with the&nbsp;
&nbsp; // instance variable named myDate constitute a write-only
&nbsp; // property named theDate.
&nbsp; public synchronized void setTheDate(Date dateIn){
&nbsp;&nbsp;&nbsp; myDate = dateIn;
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; notifyPropertyChange("theDate");
&nbsp; }//end setTheDate()
&nbsp; //-----------------------------------------------------//

&nbsp; //The following two methods are exposed to the builder&nbsp;
&nbsp; // tool as accessible methods.&nbsp;&nbsp;
&nbsp; public synchronized void makeBlue(){
&nbsp;&nbsp;&nbsp; myColor = Color.blue;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end makeBlue()

&nbsp; public synchronized void makeRed(){
&nbsp;&nbsp;&nbsp; myColor = Color.red;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end makeRed()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //The following two methods are used to maintain a list
&nbsp; // of listener objects who request to be notified of&nbsp;
&nbsp; // changes to the properties or who request to be removed
&nbsp; // from the list.
&nbsp;&nbsp;
&nbsp; //Add a property change listener object to the list.
&nbsp; public synchronized void addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //If the listener is not already registered, add it
&nbsp;&nbsp;&nbsp; // to the list.
&nbsp;&nbsp;&nbsp; if(!propChangeListeners.contains(listener)){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propChangeListeners.addElement(listener);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end addPropertyChangeListener
&nbsp;&nbsp;
&nbsp; //Remove a property change listener from the list.
&nbsp; public synchronized void removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //If the listener is on the list, remove it
&nbsp;&nbsp;&nbsp; if(propChangeListeners.contains(listener)){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propChangeListeners.removeElement(listener);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end removePropertyChangeListener
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method is used to notify listener&nbsp;
&nbsp; // objects of changes in the properties.&nbsp; The incoming
&nbsp; // parameter is the name of the property that has&nbsp;
&nbsp; // changed.
&nbsp; protected void notifyPropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String changedProperty){
&nbsp;&nbsp;&nbsp; //Instantiate the event object containing information
&nbsp;&nbsp;&nbsp; // about the property that has changed.
&nbsp;&nbsp;&nbsp; PropertyChangeEvent event;
&nbsp;&nbsp;&nbsp; if(changedProperty.compareTo("theColor") == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Change was in theColor property
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event = new PropertyChangeEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this,changedProperty,null,myColor);
&nbsp;&nbsp;&nbsp; else//Change was in the theDate property
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event = new PropertyChangeEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this,changedProperty,null,myDate);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Make a working copy of the list that cannot be&nbsp;
&nbsp;&nbsp;&nbsp; // modified while objects on the list are being&nbsp;
&nbsp;&nbsp;&nbsp; // notified of the change.
&nbsp;&nbsp;&nbsp; Vector tempList;
&nbsp;&nbsp;&nbsp; synchronized(this){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempList = (Vector)propChangeListeners.clone();
&nbsp;&nbsp;&nbsp; }//end synchronized block
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Notify all listener objects on the list.&nbsp; Note the
&nbsp;&nbsp;&nbsp; // requirement to cast the objects in the list from
&nbsp;&nbsp;&nbsp; // Object to PropertyChangeListener.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempList.size();cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener theListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (PropertyChangeListener)tempList.elementAt(cnt);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the propertyChange() method on theListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theListener.propertyChange(event);
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end notifyPropertyChange
}//end class Beans03.java
//=======================================================//</pre></td></tr></table>

<center><h2><a name="sample test program"></a><font color="#ff0000">Sample Test Program</font></h2></center>
A special test program named <b>Beans03Test</b> was written to partially
test the class named <b>Beans03</b> with special emphasis on the use of
<i>bound</i> properties. The program was tested using JDK 1.1.3 under Win95.

<p>The purpose of this program is to provide the ability to test the bean
class named <b>Beans03 </b>in a Frame.

<p>A <b>Beans03 </b>object is placed in the frame along with five buttons.
The visual manifestation of the <b>bean </b>object is a colored square.

<p>Two of the buttons exercise the "get" and "set" methods used to get
and set the <b>Color </b>value stored in the property named <b>theColor</b>.

<p>One button exercises the "set" method used to set the date and time
in a write-only <b>Date</b> property named <b>theDate</b>.

<p>Two of the buttons invoke the <b>makeRed()</b> and <b>makeBlue()</b>
methods of the <b>bean </b>which modify the value of the property named
<b>theColor</b>.

<p>Two <b>listener </b>objects are instantiated and registered to be notified
by the <b>bean </b>whenever there is a change in the value of either of
the bound properties. Actually the objects are notified whenever a value
is assigned to the instance variables that maintain the property values
regardless of whether or not the new value is different from the old value.

<p>For those cases where information is returned from the <b>bean</b>,
it is displayed on the standard output device.

<p>Clicking the button labeled <i>"Set theColor property"</i> produced
the following output on the screen. As you can see, the two different listener
objects were notified of the same change in the property named <b>theColor</b>.

<p>In this case, the value of the <b>theColor </b>property was changed
to <b>green </b>as indicated by "<b>g=255</b>". The actual color is specified
by percentage contributions from red, green, and blue, where the maximum
contribution of any one of the primary colors is 255 and the minimum contribution
is 0. In this case, both <b>red </b>and <b>blue </b>are showing a contribution
of 0.

<p>The <i>Old property value</i> is shown as <b>null</b> because this particular
<b>bean </b>class doesn't save and return the value of the property that
existed before the change occurred. The event doesn't happen until after
the change has occurred and the old value is no longer available at that
point in time.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>&nbsp;&nbsp;
<b>FirstListener </b>notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: <b>theColor
</b>New property value: java.awt.Color[r=0,<b>g=255</b>,b=0]
Old property value: null

<b>SecondListener </b>notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: <b>theColor
</b>New property value: java.awt.Color[r=0,<b>g=255</b>,b=0]
Old property value: <b>null&nbsp;&nbsp;</b></pre></td></tr></table>
Clicking the button labeled <i>"Get theColor property"</i> produced the
following output on the screen. Since this action didn't cause the property
values to change, the <b>listener </b>objects registered to listen for
changes in property values were <u>not</u> notified of this action.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre>java.awt.Color[r=0,<b>g=255</b>,b=0]</pre></td></tr></table>
Clicking the button labeled <i>"Invoke the makeRed Method"</i> produced
the following output on the screen. Again both listener objects were notified
of the change in the property named <b>theColor </b>with the new value
being <b>red</b>.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre><b>FirstListener </b>notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: <b>theColor
</b>New property value: java.awt.Color[<b>r=255</b>,g=0,b=0]
Old property value: null

<b>SecondListener </b>notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: <b>theColor
</b>New property value: java.awt.Color[<b>r=255</b>,g=0,b=0]
Old property value: null</pre></td></tr></table>
Clicking the button labeled <i>"Invoke the makeBlue Method"</i> produced
the following output on the screen similar to that produced by invoking
the <b>makeRed()</b> method described above, except that the <b>theColor</b>
property was changed to <b>blue</b>.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre><b>FirstListener </b>notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: <b>theColor
</b>New property value: java.awt.Color[r=0,g=0,<b>b=255</b>]
Old property value: null

<b>SecondListener </b>notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: <b>theColor
</b>New property value: java.awt.Color[r=0,g=0,<b>b=255</b>]
Old property value: null</pre></td></tr></table>
Finally, clicking the button labeled <i>"Set theDate property"</i> produced
the following output on the screen. In this case, both listener objects
were notified and the information encapsulated in the event object identified
the changed property as the property named <b>theDate </b>with a new value
as shown.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre><b>FirstListener </b>notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: <b>theDate
</b>New property value: <b>Sat Oct 18 10:24:49 CDT 1997
</b>Old property value: null

<b>SecondListener </b>notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: <b>theDate
</b>New property value: <b>Sat Oct 18 10:24:49 CDT 1997
</b>Old property value: null</pre></td></tr></table>

<center><h3><a name="interesting code fragments from the test program"></a><font color="#ff0000">Interesting
Code Fragments from the Test Program</font></h3></center>
Much of the code in this application has been seen many times before in
these lessons. In this section, we will emphasize the code that is used
to test <i>bound</i> properties.

<p>The beginning of the interesting code appears at the point where we
register action listener objects for all of the buttons on the test panel.
Although this code is straightforward, it will be useful to show it here
to establish the basis for further discussion.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; buttonToSetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToGetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new GetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeRedMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new RedActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeBlueMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BlueActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToSetTheDate.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DateActionListener(myBean));&nbsp;</pre></td></tr></table>
Next, we instantiate and register two different <b>PropertyChangeListener
</b>objects to listen for changes in the<b> bean's </b>properties. These
are identical objects. We instantiated and registered two of them simply
to confirm proper operation of the <i>event multicasting</i> capability
of the <b>bean</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; MyPropertyChangeListener firstListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyChangeListener();
&nbsp;&nbsp;&nbsp; //Store an identifying name in the listener object
&nbsp;&nbsp;&nbsp; firstListener.setTheID("FirstListener");
&nbsp;&nbsp;&nbsp; myBean.<b>addPropertyChangeListener</b>(firstListener);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyPropertyChangeListener secondListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyChangeListener();
&nbsp;&nbsp;&nbsp; //Store an identifying name in the listener object
&nbsp;&nbsp;&nbsp; secondListener.setTheID("SecondListener");
&nbsp;&nbsp;&nbsp; myBean.<b>addPropertyChangeListener</b>(secondListener);</pre></td></tr></table>
In its final form, the test program does <u>not</u> test the ability of
the <b>bean</b> to remove listener objects from the registration list.
Two statements are included in the program as comments which can be used
to test this capability. When one or the other (or both) of the following
two statements is activated by removing the comment indicator, and the
program is recompiled and run, only the <b>listener </b>object that was
not removed from the list is notified of changes in the values of properties
in the <b>bean</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>//&nbsp;&nbsp;&nbsp; myBean.removePropertyChangeListener(firstListener);
//&nbsp;&nbsp;&nbsp; myBean.removePropertyChangeListener(secondListener);</pre></td></tr></table>
An <b>ActionListener</b> object of the following class is registered to
respond to <b>Action</b> events on the button labeled <i>"setTheDate"</i>.
When that button is clicked on the test panel, this object invokes the
<b>setTheDate()</b> method on the <b>bean</b> passing in a new <b>Date</b>
object as a parameter.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;
class DateActionListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; DateActionListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Store the current date and time in the bean property
&nbsp;&nbsp;&nbsp; // named theDate.
&nbsp;&nbsp;&nbsp; myBean.<b>setTheDate</b>(new Date());
&nbsp; }//end actionPerformed()
}//end class DateActionListener</pre></td></tr></table>
An <b>ActionListener</b> object of the following class is registered to
respond to <b>Action</b> events on the button labeled <i>"setTheColor"</i>.
When that button is clicked on the test panel, the <b>setTheColor()</b>
method of the <b>bean</b> is invoked to set the <b>theColor</b> property
to green.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class SetTheColorListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; SetTheColorListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.<b>setTheColor</b>(Color.<b>green</b>);
&nbsp; }//end actionPerformed()
}//end class SetTheColorListener</pre></td></tr></table>
An <b>ActionListener</b> object of the following class is registered to
respond to <b>Action</b> events on the button labeled <i>"getTheColor"</i>.
When that button is clicked on the test panel, the <b>getTheColor()</b>
method of the <b>bean</b> is invoked which returns the current value of
the <b>theColor</b> property. The code in the object displays that color
on the screen.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;
class GetTheColorListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; GetTheColorListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Display value of the theColor property on the
&nbsp;&nbsp;&nbsp; // standard output device.
&nbsp;&nbsp;&nbsp; System.out.println(myBean.<b>getTheColor</b>().toString());
&nbsp; }//end actionPerformed()
}//end class GetTheColorListener</pre></td></tr></table><b>ActionListener</b> objects of the following two classes are registered
to respond to <b>Action</b> events on the buttons which invoke the <b>makeRed()
</b>and <b>makeBlue()</b> methods of the <b>bean</b>. Clicking the corresponding
button on the test panel causes one or the other of these objects to invoke
the method on the <b>bean</b> which in turn causes the <b>theColor</b>
property of the bean to be set to either red or blue.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class RedActionListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; RedActionListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.<b>makeRed</b>();
&nbsp; }//end actionPerformed()
}//end class RedActionListener
//-------------------------------------------------------//

class BlueActionListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; BlueActionListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.<b>makeBlue</b>();
&nbsp; }//end actionPerformed()
}//end class BlueActionListener</pre></td></tr></table>
Two <b>ActionListener</b> objects of the following class are registered
to listen for <b>propertyChange</b> events which are multicast by the <b>bean</b>.
When notified of such changes, code in the <b>propertyChange()</b> method
of this class extracts and displays information about the identification
of the listener object, the source of the event (the <b>bean</b>) and the
property values. Note that this class implements the <b>PropertyChangeListener</b>
interface and defines the <b>propertyChange()</b> method declared in that
interface.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;
class <b>MyPropertyChangeListener&nbsp;
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements <b>PropertyChangeListener</b>{
&nbsp; String theID; //store listener object ID here
&nbsp;&nbsp;
&nbsp; void setTheID(String nameIn){
&nbsp;&nbsp;&nbsp; //method to save the ID of the object
&nbsp;&nbsp;&nbsp; theID = nameIn;
&nbsp; }//end setTheID()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void <b>propertyChange</b>(PropertyChangeEvent event){
&nbsp;&nbsp;&nbsp; //Extract and display information about the event
&nbsp;&nbsp;&nbsp; System.out.println(theID + " notified of change");
&nbsp;&nbsp;&nbsp; System.out.println("Property change source: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.<b>getSource</b>());
&nbsp;&nbsp;&nbsp; System.out.println("Property name: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.<b>getPropertyName</b>());
&nbsp;&nbsp;&nbsp; System.out.println("New property value: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.<b>getNewValue</b>());
&nbsp;&nbsp;&nbsp; System.out.println("Old property value: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.<b>getOldValue</b>());
&nbsp;&nbsp;&nbsp; System.out.println();//blank line
&nbsp; }//end propertyChange()
}//end MyPropertyChangeListener class</pre></td></tr></table>


<p>A consolidated listing of the complete test program is contained in
the next section.
<center><h3><a name="program listing for the test program"></a><font color="#ff0000">Program
Listing for the Test Program</font></h3></center>
This section contains a complete listing of the test program written to
test the <i>bound</i> property behavior of the <b>bean </b>class. The output
from running the test is also contained in the listing.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Beans03Test.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

The purpose of this program is to provide the ability to
test the bean class named Beans03.class in a Frame.

A Beans03 object is placed in the frame along with five&nbsp;
buttons.&nbsp;

The visual manifestation of the Bean object is a colored&nbsp;
square.

Two of the buttons exercise the "get" and "set" methods
used to get and set the color value stored in the property
named theColor.

One button exercises the "set" method used to set the date
and time in a write-only property named theDate.

Two of the buttons invoke the makeRed() and makeBlue()
methods of the Bean which modify the value of the property
named theColor.

Two listener objects are instantiated and registered to
be notified by the bean whenever there is a change in the
value of either of the properties.&nbsp; Actually the objects
are notified whenever a value is assigned to the instance
variables that maintain the property values regardless of
whether or not the new value is different from the old
value.

For those cases where information is returned from the&nbsp;
Bean, it is displayed on the standard output device.

The program was tested using JDK 1.1.3 under Win95.&nbsp;

Clicking the button labeled "Set theColor property"&nbsp;
produced the following output on the screen.&nbsp; As you can
see, the two different listener objects were notified of&nbsp;
the same change in the property named theColor. In this&nbsp;
case, the value of theColor property was changed to green.
&nbsp;&nbsp;
<b>FirstListener notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=0,g=255,b=0]
Old property value: null

SecondListener notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=0,g=255,b=0]
Old property value: null</b>&nbsp;&nbsp;
&nbsp;&nbsp;

Clicking the button labeled "Get theColor property"
produced the following output on the screen.&nbsp; Since&nbsp;
this action didn't cause the property values to change,&nbsp;
the listener objects were not notified of the action.

<b>java.awt.Color[r=0,g=255,b=0]
</b>&nbsp;&nbsp;

Clicking the button labeled "Invoke the makeRed Method"
produced the following output on the screen. Again both
listener objects were notified of the change in the&nbsp;
property named theColor with the new value being red.

<b>FirstListener notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=255,g=0,b=0]
Old property value: null

SecondListener notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=255,g=0,b=0]
Old property value: null
</b>&nbsp;&nbsp;

Clicking the button labeled "Invoke the makeBlue Method"
produced the following output on the screen similar to
that produced by invoking the makeRed() method described
above.

<b>FirstListener notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=0,g=0,b=255]
Old property value: null

SecondListener notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=0,g=0,b=255]
Old property value: null
</b>&nbsp;&nbsp;

Finally, clicking the button labeled "Set theDate&nbsp;
property" produced the following output on the screen.
In this case, both listener objects were notified and
the information encapsulated in the event object&nbsp;
identified the changed property as the property named
theDate with a new value as shown.

<b>FirstListener notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: theDate
New property value: Sat Oct 18 10:24:49 CDT 1997
Old property value: null

SecondListener notified of change
Property change source: Beans03[canvas0,31,33,50x50]
Property name: theDate
New property value: Sat Oct 18 10:24:49 CDT 1997
Old property value: null
</b>&nbsp;&nbsp;&nbsp;&nbsp;
*/

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.util.*;
//=======================================================//
public class Beans03Test extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Beans03Test();
&nbsp; }//end main
&nbsp; //-----------------------------------------------------//

&nbsp; public Beans03Test(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; //instantiate a Bean object
&nbsp;&nbsp;&nbsp; Beans03 myBean = new Beans03();
&nbsp;&nbsp;&nbsp; add(myBean);//Add it to the Frame
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate several test buttons&nbsp;
&nbsp;&nbsp;&nbsp; Button buttonToSetTheColor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Set theColor property");
&nbsp;&nbsp;&nbsp; Button buttonToGetTheColor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Get theColor property");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeRedMethod =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Invoke makeRed Method");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeBlueMethod =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Invoke makeBlue Method");
&nbsp;&nbsp;&nbsp; Button buttonToSetTheDate =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Set theDate property");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the test buttons to the frame&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(buttonToSetTheColor);
&nbsp;&nbsp;&nbsp; add(buttonToGetTheColor);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeRedMethod);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeBlueMethod);
&nbsp;&nbsp;&nbsp; add(buttonToSetTheDate);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Size the frame and make it visible
&nbsp;&nbsp;&nbsp; setSize(250,350);
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //Register action listener objects for all the test&nbsp;
&nbsp;&nbsp;&nbsp; // buttons&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; buttonToSetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToGetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new GetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeRedMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new RedActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeBlueMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BlueActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToSetTheDate.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DateActionListener(myBean));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register two PropertyChangeListener&nbsp;
&nbsp;&nbsp;&nbsp; // objects to listen for changes in the bean's&nbsp;
&nbsp;&nbsp;&nbsp; // properties.
&nbsp;&nbsp;&nbsp; MyPropertyChangeListener firstListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyChangeListener();
&nbsp;&nbsp;&nbsp; //Store an identifying name in the listener object
&nbsp;&nbsp;&nbsp; firstListener.setTheID("FirstListener");
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(firstListener);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyPropertyChangeListener secondListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyChangeListener();
&nbsp;&nbsp;&nbsp; //Store an identifying name in the listener object
&nbsp;&nbsp;&nbsp; secondListener.setTheID("SecondListener");
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(secondListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The following statements can be activated to confirm
&nbsp;&nbsp;&nbsp; // proper operation of the removePropertyChangeListener
&nbsp;&nbsp;&nbsp; // interface of the bean object.&nbsp; When one or the other
&nbsp;&nbsp;&nbsp; // of these statements is activated, and the program is
&nbsp;&nbsp;&nbsp; // recompiled, only the other listener object is&nbsp;
&nbsp;&nbsp;&nbsp; // notified of changes in the values of properties&nbsp;
&nbsp;&nbsp;&nbsp; // in the bean.
//&nbsp;&nbsp;&nbsp; myBean.removePropertyChangeListener(firstListener);
//&nbsp;&nbsp;&nbsp; myBean.removePropertyChangeListener(secondListener);

&nbsp;&nbsp;&nbsp; //terminate when Frame is closed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class Beans03Test
//=======================================================//
//The following class is used to instantiate objects to&nbsp;
// be registered to listen to one of the buttons on the&nbsp;
// test panel.&nbsp; When the setTheDate button is pressed, the&nbsp;
// theDate property is set to the current date and time.
class DateActionListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; DateActionListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Store the current date and time in the bean property
&nbsp;&nbsp;&nbsp; // named theDate.
&nbsp;&nbsp;&nbsp; myBean.setTheDate(new Date());
&nbsp; }//end actionPerformed()
}//end class DateActionListener
//=======================================================//

//The following two classes are used to instantiate objects
// to be registered to listen to two of the buttons on the&nbsp;
// test panel.&nbsp;&nbsp;

// When the setTheColor button is pressed, the theColor&nbsp;
// property is set to green.&nbsp;

// When the getTheColor button is pressed, the current&nbsp;
// color is displayed on the standard output device.

class SetTheColorListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; SetTheColorListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.setTheColor(Color.green);
&nbsp; }//end actionPerformed()
}//end class SetTheColorListener
//-------------------------------------------------------//

class GetTheColorListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; GetTheColorListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Display value of the theColor property on the
&nbsp;&nbsp;&nbsp; // standard output device.
&nbsp;&nbsp;&nbsp; System.out.println(myBean.getTheColor().toString());
&nbsp; }//end actionPerformed()
}//end class GetTheColorListener

//=======================================================//
//The following two classes are used to instantiate objects
// to be registered to listen to two of the buttons on the&nbsp;
// test panel.&nbsp; When the corresponding the buttons are&nbsp;
// pressed, these objects invoke methods of the bean under&nbsp;
// test. The first class invokes the makeRed() method and
// the second class invokes the makeBlue() method.

class RedActionListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; RedActionListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeRed();
&nbsp; }//end actionPerformed()
}//end class RedActionListener
//-------------------------------------------------------//

class BlueActionListener implements ActionListener{
&nbsp; Beans03 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; BlueActionListener(Beans03 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeBlue();
&nbsp; }//end actionPerformed()
}//end class BlueActionListener
//=======================================================//

//The following class is used to instantiate objects that
// will be bound to the bean in such a way as to be&nbsp;
// notified of changes in the property values in the bean&nbsp;
// object.&nbsp; When notified of such changes, code in the
// propertyChange() method of this class extracts and
// displays information about the bean and the properties.
class MyPropertyChangeListener&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements PropertyChangeListener{
&nbsp; String theID; //store listener object ID here
&nbsp;&nbsp;
&nbsp; void setTheID(String nameIn){
&nbsp;&nbsp;&nbsp; //method to save the ID of the object
&nbsp;&nbsp;&nbsp; theID = nameIn;
&nbsp; }//end setTheID()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void propertyChange(PropertyChangeEvent event){
&nbsp;&nbsp;&nbsp; //Extract and display information about the event
&nbsp;&nbsp;&nbsp; System.out.println(theID + " notified of change");
&nbsp;&nbsp;&nbsp; System.out.println("Property change source: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getSource());
&nbsp;&nbsp;&nbsp; System.out.println("Property name: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getPropertyName());
&nbsp;&nbsp;&nbsp; System.out.println("New property value: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getNewValue());
&nbsp;&nbsp;&nbsp; System.out.println("Old property value: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getOldValue());
&nbsp;&nbsp;&nbsp; System.out.println();//blank line
&nbsp; }//end propertyChange()
}//end MyPropertyChangeListener class
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>

<center><h2><a name="using the propertychangesupport class"></a><font color="#ff0000">Using
the PropertyChangeSupport Class</font></h2></center><font color="#000000">Now that you know how to roll your own beans with
<i>bound</i> properties, I am going to let you in on a secret that can
reduce your programming effort a little.</font>

<p><font color="#000000">Java provides the <b>java.beans.PropertyChangeSupport</b>
class that can be used to handle the maintenance of the registration list
as well as the task of firing events to the registered listener objects
on that list. A description of the constructor and methods of the class
is shown below.</font><br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre><b><i><font size=+1>Constructor
</font></i>public PropertyChangeSupport(Object sourceBean)

<i><font size=+1>Methods</font></i></b><i><font size=+1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</font></i><b>public synchronized void addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener)
</b>Adds a PropertyChangeListener to the listener list.&nbsp;

Parameters:&nbsp;
&nbsp; listener - The PropertyChangeListener to be added&nbsp;

<b>public synchronized void removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener)
</b>Removes a PropertyChangeListener from the listener list.&nbsp;

Parameters:&nbsp;
&nbsp; listener - The PropertyChangeListener to be removed&nbsp;

<b>public void firePropertyChange(String propertyName,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object oldValue,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object newValue)

</b>Reports a bound property update to any registered&nbsp;
listeners. No event is fired if old and new are&nbsp;
equal and non-null.&nbsp;

Parameters:&nbsp;
&nbsp; propertyName - The name of the property that was&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changed.&nbsp;
&nbsp; oldValue - The old value of the property.&nbsp;
&nbsp; newValue - The new value of the property.&nbsp;</pre></td></tr></table><font color="#000000">As you can see, an object of this class can be used
to maintain the registration list and to fire the events. This class can
be either extended or inherited. In the case of the sample program in this
section, it is not possible to extend the support class because the <b>bean</b>
class already extends the <b>Canvas</b> class. Therefore, in this sample
program, the support class was instantiated into a separate object that
is used to handle the list-maintenance and event-firing tasks.</font>

<p><font color="#000000">The requirement to instantiate the support class
into a separate object resulted in a small amount of extra programming
effort. In particular, it was necessary to define <i>add</i> and <i>remove</i>
method shells for the <b>bean </b>class and then pass the <b>listener</b>
object parameters received by those method shells to the <i>add</i> and
<i>remove</i> methods in the support object. If the <b>bean</b> class extended
the support class, the <i>add</i> and <i>remove</i> methods of the support
class would be inherited into the <b>bean</b> class.</font>

<p><font color="#000000">Complete listings of the revised <b>bean</b> class
and the corresponding test program follow. Important information is included
in the comments in these two programs.</font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Beans05.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

This bean class is designed to replicate the functionality
of the bean class named Beans04 by making use of the&nbsp;
support class named java.beans.PropertyChangeSupport to&nbsp;
reduce the level of programming effort required.

This support class provides&nbsp; methods for maintaining
the list of registered PropertyChange listeners and for
firing events to all of the listener objects on that list,
thus eliminating the need to code those capabilities by
hand as was done with Beans04.

The support class can either be extended or instantiated.
In this case, because this bean class was already
extending the Canvas class and multiple inheritance is
not allowed, the support class was instantiated.&nbsp; This
made it necessary to do a little extra work in providing
bean interface methods to add and remove listener objects
and then to call the corresponding methods in the support
class object passing the listener references as parameters.
//=======================================================//
*/

import java.awt.event.*;
import java.awt.*;
import java.io.Serializable;
import java.util.*;
import java.beans.*;
//=======================================================//
//All beans should implement the Serializable interface
public class Beans05 extends Canvas&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Serializable{

&nbsp; //The following instance variables are used to store
&nbsp; // property values.
&nbsp; protected Color myColor;
&nbsp; protected Date myDate;
&nbsp;&nbsp;
&nbsp; //The following reference variable is used to access
&nbsp; // the list maintenance and event firing capabilities
&nbsp; // of the PropertyChangeSupport class, an object of
&nbsp; // which is instantiated in the constructor.&nbsp;&nbsp;
&nbsp; PropertyChangeSupport supportObj;
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; public Beans05(){//constructor
&nbsp;&nbsp;&nbsp; //This bean is a visible square that is initialized to
&nbsp;&nbsp;&nbsp; // yellow and can then be changed to green, red, and
&nbsp;&nbsp;&nbsp; // blue by invoking methods of the class.

&nbsp;&nbsp;&nbsp; myColor = Color.yellow;
&nbsp;&nbsp;&nbsp; setBackground(myColor);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate an object of the support class to handle
&nbsp;&nbsp;&nbsp; // list maintenance and event firing tasks.&nbsp; The
&nbsp;&nbsp;&nbsp; // constructor requires this object as the source of
&nbsp;&nbsp;&nbsp; // the events.
&nbsp;&nbsp;&nbsp; supportObj = new PropertyChangeSupport(this);
&nbsp;
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //This method defines the preferred display size of the&nbsp;
&nbsp; // bean object.&nbsp;&nbsp;
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()
&nbsp; //-----------------------------------------------------//

&nbsp; //The following "set" and "get" methods in conjunction&nbsp;
&nbsp; // with the instance variable named myColor constitute a
&nbsp; // property named theColor.&nbsp;&nbsp;
&nbsp; public synchronized void setTheColor(Color inColor){
&nbsp;&nbsp;&nbsp; Color oldColor = myColor;
&nbsp;&nbsp;&nbsp; myColor = inColor;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; if(!myColor.equals(oldColor))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end setTheColor()

&nbsp; public synchronized Color getTheColor(){
&nbsp;&nbsp;&nbsp; return myColor;
&nbsp; }//end getTheColor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following "set" method in conjunction with the&nbsp;
&nbsp; // instance variable named myDate constitute a write-only
&nbsp; // property named theDate.
&nbsp; public synchronized void setTheDate(Date dateIn){
&nbsp;&nbsp;&nbsp; Date oldDate = myDate;
&nbsp;&nbsp;&nbsp; myDate = dateIn;
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; if(!myDate.equals(oldDate))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theDate");
&nbsp; }//end setTheDate()
&nbsp; //-----------------------------------------------------//

&nbsp; //The following two methods are exposed to the builder&nbsp;
&nbsp; // tool as accessible methods.&nbsp;&nbsp;
&nbsp; public synchronized void makeBlue(){
&nbsp;&nbsp;&nbsp; Color oldColor = myColor;
&nbsp;&nbsp;&nbsp; myColor = Color.blue;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; if(!myColor.equals(oldColor))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end makeBlue()

&nbsp; public synchronized void makeRed(){
&nbsp;&nbsp;&nbsp; Color oldColor = myColor;
&nbsp;&nbsp;&nbsp; myColor = Color.red;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; if(!myColor.equals(oldColor))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end makeRed()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //The following two methods are used to maintain a list
&nbsp; // of listener objects who request to be notified of&nbsp;
&nbsp; // changes to the properties or who request to be removed
&nbsp; // from the list.&nbsp; Note that these two methods do&nbsp;
&nbsp; // nothing more than to accept a reference to the
&nbsp; // object requesting registration and pass that reference
&nbsp; // to the list maintenance facility provided by an object
&nbsp; // of the PropertyChangeSupport class.
&nbsp;&nbsp;
&nbsp; //Add a property change listener object to the list.
&nbsp; public synchronized void addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; supportObj.addPropertyChangeListener(listener);
&nbsp; }//end addPropertyChangeListener

//-------------------------------------------------------//&nbsp;&nbsp;

&nbsp; //Remove a property change listener from the list.
&nbsp; public synchronized void removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; supportObj.removePropertyChangeListener(listener);
&nbsp; }//end removePropertyChangeListener()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method is used to notify listener&nbsp;
&nbsp; // objects of changes in the properties.&nbsp; The incoming
&nbsp; // parameter is the name of the property that has&nbsp;
&nbsp; // changed.&nbsp; Note that this method makes use of the&nbsp;
&nbsp; // event-firing capability of an object of the
&nbsp; // PropertyChangeSupport class.
&nbsp; protected void notifyPropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String changedProperty){
&nbsp;&nbsp;&nbsp; if(changedProperty.compareTo("theColor") == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Change was in theColor property
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; supportObj.firePropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changedProperty,null,myColor);
&nbsp;&nbsp;&nbsp; else//Change was in the theDate property
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; supportObj.firePropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; changedProperty,null,myDate);
&nbsp; }//end notifyPropertyChange()
&nbsp;&nbsp;
}//end class Beans05.java
//=======================================================//</pre></td></tr></table><font color="#000000">A listing of the test program follows.</font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Beans05Test.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

The purpose of this program is to provide the ability to
test the bean class named Beans05.class in a Frame.

See the comments in the file named Beans05.java to&nbsp;
understand how this test program and the bean differ from&nbsp;
the test program named Beans04Test and its corresponding&nbsp;
bean.

Briefly, this pair of programs replicates the Beans04
pair in functionality.&nbsp; However, Beans05 uses a support
class named java.beans.PropertyChangedSupport to reduce
the programming effort required for the bean.

See the program named Beans04Test for an operational&nbsp;
description of this program along with sample output
produced by the program.
*/

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.util.*;
//=======================================================//
public class Beans05Test extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Beans05Test();
&nbsp; }//end main
&nbsp; //-----------------------------------------------------//

&nbsp; public Beans05Test(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; //instantiate a Bean object
&nbsp;&nbsp;&nbsp; Beans05 myBean = new Beans05();
&nbsp;&nbsp;&nbsp; add(myBean);//Add it to the Frame
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate several test buttons&nbsp;
&nbsp;&nbsp;&nbsp; Button buttonToSetTheColor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Set theColor property");
&nbsp;&nbsp;&nbsp; Button buttonToGetTheColor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Get theColor property");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeRedMethod =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Invoke makeRed Method");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeBlueMethod =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Invoke makeBlue Method");
&nbsp;&nbsp;&nbsp; Button buttonToSetTheDate =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Set theDate property");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the test buttons to the frame&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(buttonToSetTheColor);
&nbsp;&nbsp;&nbsp; add(buttonToGetTheColor);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeRedMethod);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeBlueMethod);
&nbsp;&nbsp;&nbsp; add(buttonToSetTheDate);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Size the frame and make it visible
&nbsp;&nbsp;&nbsp; setSize(250,350);
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //Register action listener objects for all the test&nbsp;
&nbsp;&nbsp;&nbsp; // buttons&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; buttonToSetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToGetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new GetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeRedMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new RedActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeBlueMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BlueActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToSetTheDate.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DateActionListener(myBean));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register two PropertyChangeListener&nbsp;
&nbsp;&nbsp;&nbsp; // objects to listen for changes in the bean's&nbsp;
&nbsp;&nbsp;&nbsp; // properties.
&nbsp;&nbsp;&nbsp; MyPropertyChangeListener firstListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyChangeListener();
&nbsp;&nbsp;&nbsp; //Store an identifying name in the listener object
&nbsp;&nbsp;&nbsp; firstListener.setTheID("FirstListener");
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(firstListener);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyPropertyChangeListener secondListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyChangeListener();
&nbsp;&nbsp;&nbsp; //Store an identifying name in the listener object
&nbsp;&nbsp;&nbsp; secondListener.setTheID("SecondListener");
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(secondListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The following statements can be activated to confirm
&nbsp;&nbsp;&nbsp; // proper operation of the removePropertyChangeListener
&nbsp;&nbsp;&nbsp; // interface of the bean object.&nbsp; When one or the other
&nbsp;&nbsp;&nbsp; // of these statements is activated, and the program is
&nbsp;&nbsp;&nbsp; // recompiled, only the other listener object is&nbsp;
&nbsp;&nbsp;&nbsp; // notified of changes in the values of properties&nbsp;
&nbsp;&nbsp;&nbsp; // in the bean.
//&nbsp;&nbsp;&nbsp; myBean.removePropertyChangeListener(firstListener);
//&nbsp;&nbsp;&nbsp; myBean.removePropertyChangeListener(secondListener);

&nbsp;&nbsp;&nbsp; //terminate when Frame is closed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class Beans05Test
//=======================================================//
//The following class is used to instantiate objects to&nbsp;
// be registered to listen to one of the buttons on the&nbsp;
// test panel.&nbsp; When the setTheDate button is pressed, the&nbsp;
// theDate property is set to the current date and time.
class DateActionListener implements ActionListener{
&nbsp; Beans05 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; DateActionListener(Beans05 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Store the current date and time in the bean property
&nbsp;&nbsp;&nbsp; // named theDate.
&nbsp;&nbsp;&nbsp; myBean.setTheDate(new Date());
&nbsp; }//end actionPerformed()
}//end class DateActionListener
//=======================================================//

//The following two classes are used to instantiate objects
// to be registered to listen to two of the buttons on the&nbsp;
// test panel.&nbsp;&nbsp;

// When the setTheColor button is pressed, the theColor&nbsp;
// property is set to green.&nbsp;

// When the getTheColor button is pressed, the current&nbsp;
// color is displayed on the standard output device.

class SetTheColorListener implements ActionListener{
&nbsp; Beans05 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; SetTheColorListener(Beans05 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.setTheColor(Color.green);
&nbsp; }//end actionPerformed()
}//end class SetTheColorListener
//-------------------------------------------------------//

class GetTheColorListener implements ActionListener{
&nbsp; Beans05 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; GetTheColorListener(Beans05 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Display value of the theColor property on the
&nbsp;&nbsp;&nbsp; // standard output device.
&nbsp;&nbsp;&nbsp; System.out.println(myBean.getTheColor().toString());
&nbsp; }//end actionPerformed()
}//end class GetTheColorListener

//=======================================================//
//The following two classes are used to instantiate objects
// to be registered to listen to two of the buttons on the&nbsp;
// test panel.&nbsp; When the corresponding the buttons are&nbsp;
// pressed, these objects invoke methods of the bean under&nbsp;
// test. The first class invokes the makeRed() method and
// the second class invokes the makeBlue() method.

class RedActionListener implements ActionListener{
&nbsp; Beans05 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; RedActionListener(Beans05 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeRed();
&nbsp; }//end actionPerformed()
}//end class RedActionListener
//-------------------------------------------------------//

class BlueActionListener implements ActionListener{
&nbsp; Beans05 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; BlueActionListener(Beans05 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeBlue();
&nbsp; }//end actionPerformed()
}//end class BlueActionListener
//=======================================================//

//The following class is used to instantiate objects that
// will be bound to the bean in such a way as to be&nbsp;
// notified of changes in the property values in the bean&nbsp;
// object.&nbsp; When notified of such changes, code in the
// propertyChange() method of this class extracts and
// displays information about the bean and the properties.
class MyPropertyChangeListener&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements PropertyChangeListener{
&nbsp; String theID; //store listener object ID here
&nbsp;&nbsp;
&nbsp; void setTheID(String nameIn){
&nbsp;&nbsp;&nbsp; //method to save the ID of the object
&nbsp;&nbsp;&nbsp; theID = nameIn;
&nbsp; }//end setTheID()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void propertyChange(PropertyChangeEvent event){
&nbsp;&nbsp;&nbsp; //Extract and display information about the event
&nbsp;&nbsp;&nbsp; System.out.println(theID + " notified of change");
&nbsp;&nbsp;&nbsp; System.out.println("Property change source: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getSource());
&nbsp;&nbsp;&nbsp; System.out.println("Property name: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getPropertyName());
&nbsp;&nbsp;&nbsp; System.out.println("New property value: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getNewValue());
&nbsp;&nbsp;&nbsp; System.out.println("Old property value: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getOldValue());
&nbsp;&nbsp;&nbsp; System.out.println();//blank line
&nbsp; }//end propertyChange()
}//end MyPropertyChangeListener class
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table><font color="#000000">.</font><center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - The bean class named Beans03 broadcasts a <b>PropertyChangeEvent </b>whenever
a new value is assigned to one of the instance variables used to maintain
the <i>bound</i> property values regardless of whether the new value is
different from, or the same as the old value.

<p>Without viewing the following solution, upgrade that bean class to produce
a new bean class that will broadcast a <b>PropertyChangeEvent </b>only
if the new value is different from the old value.

<p>Provide a bean test program to demonstrate proper operation of the new
bean class.

<p><font color="#0000ff"><font size=-1>A - See the following bean program
and test program.</font></font>

<p><font color="#0000ff"><font size=-1>Bean program follows:</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File Beans04.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

The bean class named Beans03 broadcasts a PropertyChange
Event whenever a new value is assigned to one of the&nbsp;
instance variables used to maintain the property values
regardless of whether the new value is different from, or
the same as the old value.

Upgrade that bean class to produce a new bean class that
will refrain from broadcasting a PropertyChangeEvent if
the new value is the same as the old value.

Provide a bean test program to demonstrate proper operation
of the new bean class.

The main purpose of this program is to illustrate the use&nbsp;
of "bound" properties in Beans.

This is a "bean" class that satisfies the interface
requirements for beans using design patterns.

This bean class has two properties named theColor and&nbsp;
theDate.

The current value of the property named theColor is stored
in the instance variable named myColor.

The current value of the property named theDate is stored
in the instance variable named myDate.&nbsp; theDate is a
write-only property because it has a "set" method but does
not have a "get" method.

The program maintains a list of objects that request to be&nbsp;

notified whenever there is a change in the value of either
of the properties.&nbsp; Whenever the value of either property
changes, all of the objects on the list are notified of the
change by invoking their propertyChange() method and&nbsp;
passing an object of type PropertyChangeEvent as a&nbsp;
parameter.

Objects that request to be added to the list must be of a
class that implements the PropertyChangeListener interface
and defines the propertyChange() method that is declared&nbsp;
in that interface.

The PropertyChangeEvent object passed as a parameter to the
propertyChange() method in the listener objects contains&nbsp;
the following information:
&nbsp;&nbsp;
&nbsp; Object source, //the bean object
&nbsp; String propertyName, //the name of the changed property
&nbsp; Object oldValue, //the old value of the changed property
&nbsp; Object newValue&nbsp; //the new value of the changed property
&nbsp;&nbsp;
This program doesn't save the old value and therefore
passes null as the old value of the changed property&nbsp;
because the old value is not available when the listener
objects are notified.
&nbsp;&nbsp;
The following methods are available to extract information
from the object passed as a parameter.&nbsp; These methods are
defined by the PropertyChangeEvent class or its superclass
named EventObject:
&nbsp;&nbsp;
&nbsp; public Object getSource();
&nbsp; public Object getNewValue();
&nbsp; public Object getOldValue();
&nbsp; public String getPropertyName;
&nbsp; public void setPropagationId();
&nbsp; public Object getPropagationId;
&nbsp;&nbsp;
Apparently the PropagationID is reserved for future use.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
The program was compiled and tested under JDK 1.1.3
and Win95.&nbsp; Another program named Beans03Test.java was&nbsp;
used to test the bean.&nbsp; It was not tested in the BeanBox.
//=======================================================//
*/

import java.awt.event.*;
import java.awt.*;
import java.io.Serializable;
import java.util.*;
import java.beans.*;
//=======================================================//
//All beans should implement the Serializable interface
public class Beans04 extends Canvas&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements Serializable{

&nbsp; //The following instance variables are used to store
&nbsp; // property values.
&nbsp; protected Color myColor;
&nbsp; protected Date myDate;
&nbsp;&nbsp;
&nbsp; //The following vector is used to maintain a list of&nbsp;
&nbsp; // listeners who request to be notified of changes in the
&nbsp; // property values.
&nbsp; protected Vector propChangeListeners = new Vector();
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; public Beans04(){//constructor
&nbsp;&nbsp;&nbsp; //This bean is a visible square that is initialized to
&nbsp;&nbsp;&nbsp; // yellow and can then be changed to green, red, and
&nbsp;&nbsp;&nbsp; // blue by invoking methods of the class.
&nbsp;&nbsp;&nbsp; myColor = Color.yellow;
&nbsp;&nbsp;&nbsp; setBackground(myColor);
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//

&nbsp; //This method defines the preferred display size of the&nbsp;
&nbsp; // bean object.&nbsp;&nbsp;
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()
&nbsp; //-----------------------------------------------------//

&nbsp; //The following "set" and "get" methods in conjunction&nbsp;
&nbsp; // with the instance variable named myColor constitute a
&nbsp; // property named theColor.&nbsp;&nbsp;
&nbsp; public synchronized void setTheColor(Color inColor){
&nbsp;&nbsp;&nbsp; Color oldColor = myColor;
&nbsp;&nbsp;&nbsp; myColor = inColor;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; if(!myColor.equals(oldColor))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end setTheColor()

&nbsp; public synchronized Color getTheColor(){
&nbsp;&nbsp;&nbsp; return myColor;
&nbsp; }//end getTheColor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following "set" method in conjunction with the&nbsp;
&nbsp; // instance variable named myDate constitute a write-only
&nbsp; // property named theDate.
&nbsp; public synchronized void setTheDate(Date dateIn){
&nbsp;&nbsp;&nbsp; Date oldDate = myDate;
&nbsp;&nbsp;&nbsp; myDate = dateIn;
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; if(!myDate.equals(oldDate))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theDate");
&nbsp; }//end setTheDate()
&nbsp; //-----------------------------------------------------//

&nbsp; //The following two methods are exposed to the builder&nbsp;
&nbsp; // tool as accessible methods.&nbsp;&nbsp;
&nbsp; public synchronized void makeBlue(){
&nbsp;&nbsp;&nbsp; Color oldColor = myColor;
&nbsp;&nbsp;&nbsp; myColor = Color.blue;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; if(!myColor.equals(oldColor))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end makeBlue()

&nbsp; public synchronized void makeRed(){
&nbsp;&nbsp;&nbsp; Color oldColor = myColor;
&nbsp;&nbsp;&nbsp; myColor = Color.red;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp;&nbsp;&nbsp; //notify property listeners of property change
&nbsp;&nbsp;&nbsp; if(!myColor.equals(oldColor))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; notifyPropertyChange("theColor");
&nbsp; }//end makeRed()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //The following two methods are used to maintain a list
&nbsp; // of listener objects who request to be notified of&nbsp;
&nbsp; // changes to the properties or who request to be removed
&nbsp; // from the list.
&nbsp;&nbsp;
&nbsp; //Add a property change listener object to the list.
&nbsp; public synchronized void addPropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //If the listener is not already registered, add it
&nbsp;&nbsp;&nbsp; // to the list.
&nbsp;&nbsp;&nbsp; if(!propChangeListeners.contains(listener)){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propChangeListeners.addElement(listener);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end addPropertyChangeListener
&nbsp;&nbsp;
&nbsp; //Remove a property change listener from the list.
&nbsp; public synchronized void removePropertyChangeListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener listener){
&nbsp;&nbsp;&nbsp; //If the listener is on the list, remove it
&nbsp;&nbsp;&nbsp; if(propChangeListeners.contains(listener)){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; propChangeListeners.removeElement(listener);
&nbsp;&nbsp;&nbsp; }//end if
&nbsp; }//end removePropertyChangeListener
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //The following method is used to notify listener&nbsp;
&nbsp; // objects of changes in the properties.&nbsp; The incoming
&nbsp; // parameter is the name of the property that has&nbsp;
&nbsp; // changed.
&nbsp; protected void notifyPropertyChange(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String changedProperty){
&nbsp;&nbsp;&nbsp; //Instantiate the event object containing information
&nbsp;&nbsp;&nbsp; // about the property that has changed.
&nbsp;&nbsp;&nbsp; PropertyChangeEvent event;
&nbsp;&nbsp;&nbsp; if(changedProperty.compareTo("theColor") == 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Change was in theColor property
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event = new PropertyChangeEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this,changedProperty,null,myColor);
&nbsp;&nbsp;&nbsp; else//Change was in the theDate property
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; event = new PropertyChangeEvent(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this,changedProperty,null,myDate);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Make a working copy of the list that cannot be&nbsp;
&nbsp;&nbsp;&nbsp; // modified while objects on the list are being&nbsp;
&nbsp;&nbsp;&nbsp; // notified of the change.
&nbsp;&nbsp;&nbsp; Vector tempList;
&nbsp;&nbsp;&nbsp; synchronized(this){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tempList = (Vector)propChangeListeners.clone();
&nbsp;&nbsp;&nbsp; }//end synchronized block
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Notify all listener objects on the list.&nbsp; Note the
&nbsp;&nbsp;&nbsp; // requirement to cast the objects in the list from
&nbsp;&nbsp;&nbsp; // Object to PropertyChangeListener.
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; tempList.size();cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PropertyChangeListener theListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (PropertyChangeListener)tempList.elementAt(cnt);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the propertyChange() method on theListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; theListener.propertyChange(event);
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end notifyPropertyChange
}//end class Beans04.java
//=======================================================//</font></pre></td></tr></table><font color="#0000ff"><font size=-1>Test program follows:</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File Beans04Test.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed&nbsp;
under JDK 1.1.3 or later.

The purpose of this program is to provide the ability to
test the bean class named Beans04.class in a Frame.

A Beans04 object is placed in the frame along with five&nbsp;
buttons.&nbsp;

The visual manifestation of the Bean object is a colored&nbsp;
square.

Two of the buttons exercise the "get" and "set" methods
used to get and set the color value stored in the property
named theColor.

One button exercises the "set" method used to set the date
and time in a write-only property named theDate.

Two of the buttons invoke the makeRed() and makeBlue()
methods of the Bean which modify the value of the property
named theColor.

Two listener objects are instantiated and registered to
be notified by the bean whenever there is a change in the
value of either of the properties.&nbsp;

For those cases where information is returned from the&nbsp;
Bean, it is displayed on the standard output device.

The program was tested using JDK 1.1.3 under Win95.&nbsp;

Clicking the button labeled "Set theColor property"&nbsp;
produced the following output on the screen.&nbsp; As you can
see, the two different listener objects were notified of&nbsp;
the same change in the property named theColor. In this&nbsp;
case, the value of theColor property was changed to green.
&nbsp;&nbsp;
FirstListener notified of change
Property change source: Beans04[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=0,g=255,b=0]
Old property value: null

SecondListener notified of change
Property change source: Beans04[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=0,g=255,b=0]
Old property value: null&nbsp;&nbsp;

As discussed below regarding the makeRed() method,&nbsp;
clicking the button labeled "Set theColor property"
several times in succession produces only the single&nbsp;
output shown above.


Clicking the button labeled "Get theColor property"
produced the following output on the screen.&nbsp; Since&nbsp;
this action didn't cause the property values to change,&nbsp;
the listener objects were not notified of the action.

java.awt.Color[r=0,g=255,b=0]
&nbsp;&nbsp;

Clicking the button labeled "Invoke the makeRed Method"
produced the following output on the screen. Again both
listener objects were notified of the change in the&nbsp;
property named theColor with the new value being red.

FirstListener notified of change
Property change source: Beans04[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=255,g=0,b=0]
Old property value: null

SecondListener notified of change
Property change source: Beans04[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=255,g=0,b=0]
Old property value: null


Clicking the button labeled "Invoke the makeRed Method"
several times in succession produces only the single&nbsp;
output shown above.&nbsp; The Beans04 class only broadcasts an&nbsp;
event when the value of the property changes to a new
value, and "changing" the property to the same value
as before does not cause it to broadcast an event.
&nbsp;&nbsp;

Clicking the button labeled "Invoke the makeBlue Method"
produced the following output on the screen similar to
that produced by invoking the makeRed() method described
above.

FirstListener notified of change
Property change source: Beans04[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=0,g=0,b=255]
Old property value: null

SecondListener notified of change
Property change source: Beans04[canvas0,31,33,50x50]
Property name: theColor
New property value: java.awt.Color[r=0,g=0,b=255]
Old property value: null


As discussed above with regard to the makeRed method,
clicking the "Invoke the makeBlue Method" several times
in succession produces only the single output shown
above.&nbsp;&nbsp;


Finally, clicking the button labeled "Set theDate&nbsp;
property" produced the following output on the screen.
In this case, both listener objects were notified and
the information encapsulated in the event object&nbsp;
identified the changed property as the property named
theDate with a new value as shown.

FirstListener notified of change
Property change source: Beans04[canvas0,31,33,50x50]
Property name: theDate
New property value: Sat Oct 18 10:24:49 CDT 1997
Old property value: null

SecondListener notified of change
Property change source: Beans04[canvas0,31,33,50x50]
Property name: theDate
New property value: Sat Oct 18 10:24:49 CDT 1997
Old property value: null

Unlike the previous discussions involving the theColor
property, each time you click the "Set theDate property"
button, a new output will be produced.&nbsp; This is because
the date information being stored in the theDate property
also includes the time and the time always changes&nbsp;
between successive clicks on the button.&nbsp;&nbsp;&nbsp;&nbsp;
*/

import java.awt.*;
import java.awt.event.*;
import java.beans.*;
import java.util.*;
//=======================================================//
public class Beans04Test extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Beans04Test();
&nbsp; }//end main
&nbsp; //-----------------------------------------------------//

&nbsp; public Beans04Test(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; //instantiate a Bean object
&nbsp;&nbsp;&nbsp; Beans04 myBean = new Beans04();
&nbsp;&nbsp;&nbsp; add(myBean);//Add it to the Frame
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate several test buttons&nbsp;
&nbsp;&nbsp;&nbsp; Button buttonToSetTheColor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Set theColor property");
&nbsp;&nbsp;&nbsp; Button buttonToGetTheColor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Get theColor property");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeRedMethod =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Invoke makeRed Method");
&nbsp;&nbsp;&nbsp; Button buttonToInvokeBlueMethod =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Invoke makeBlue Method");
&nbsp;&nbsp;&nbsp; Button buttonToSetTheDate =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button("Set theDate property");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the test buttons to the frame&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(buttonToSetTheColor);
&nbsp;&nbsp;&nbsp; add(buttonToGetTheColor);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeRedMethod);
&nbsp;&nbsp;&nbsp; add(buttonToInvokeBlueMethod);
&nbsp;&nbsp;&nbsp; add(buttonToSetTheDate);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Size the frame and make it visible
&nbsp;&nbsp;&nbsp; setSize(250,350);
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //Register action listener objects for all the test&nbsp;
&nbsp;&nbsp;&nbsp; // buttons&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; buttonToSetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToGetTheColor.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new GetTheColorListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeRedMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new RedActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToInvokeBlueMethod.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new BlueActionListener(myBean));
&nbsp;&nbsp;&nbsp; buttonToSetTheDate.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new DateActionListener(myBean));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register two PropertyChangeListener&nbsp;
&nbsp;&nbsp;&nbsp; // objects to listen for changes in the bean's&nbsp;
&nbsp;&nbsp;&nbsp; // properties.
&nbsp;&nbsp;&nbsp; MyPropertyChangeListener firstListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyChangeListener();
&nbsp;&nbsp;&nbsp; //Store an identifying name in the listener object
&nbsp;&nbsp;&nbsp; firstListener.setTheID("FirstListener");
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(firstListener);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyPropertyChangeListener secondListener =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyPropertyChangeListener();
&nbsp;&nbsp;&nbsp; //Store an identifying name in the listener object
&nbsp;&nbsp;&nbsp; secondListener.setTheID("SecondListener");
&nbsp;&nbsp;&nbsp; myBean.addPropertyChangeListener(secondListener);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The following statements can be activated to confirm
&nbsp;&nbsp;&nbsp; // proper operation of the removePropertyChangeListener
&nbsp;&nbsp;&nbsp; // interface of the bean object.&nbsp; When one or the other
&nbsp;&nbsp;&nbsp; // of these statements is activated, and the program is
&nbsp;&nbsp;&nbsp; // recompiled, only the other listener object is&nbsp;
&nbsp;&nbsp;&nbsp; // notified of changes in the values of properties&nbsp;
&nbsp;&nbsp;&nbsp; // in the bean.
//&nbsp;&nbsp;&nbsp; myBean.removePropertyChangeListener(firstListener);
//&nbsp;&nbsp;&nbsp; myBean.removePropertyChangeListener(secondListener);

&nbsp;&nbsp;&nbsp; //terminate when Frame is closed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class Beans04Test

//=======================================================//
//The following class is used to instantiate objects to&nbsp;
// be registered to listen to one of the buttons on the&nbsp;
// test panel.&nbsp; When the setTheDate button is pressed, the&nbsp;
// theDate property is set to the current date and time.
class DateActionListener implements ActionListener{
&nbsp; Beans04 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; DateActionListener(Beans04 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Store the current date and time in the bean property
&nbsp;&nbsp;&nbsp; // named theDate.
&nbsp;&nbsp;&nbsp; myBean.setTheDate(new Date());
&nbsp; }//end actionPerformed()
}//end class DateActionListener
//=======================================================//

//The following two classes are used to instantiate objects
// to be registered to listen to two of the buttons on the&nbsp;
// test panel.&nbsp;&nbsp;

// When the setTheColor button is pressed, the theColor&nbsp;
// property is set to green.&nbsp;

// When the getTheColor button is pressed, the current&nbsp;
// color is displayed on the standard output device.

class SetTheColorListener implements ActionListener{
&nbsp; Beans04 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; SetTheColorListener(Beans04 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save a reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.setTheColor(Color.green);
&nbsp; }//end actionPerformed()
}//end class SetTheColorListener
//-------------------------------------------------------//

class GetTheColorListener implements ActionListener{
&nbsp; Beans04 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; GetTheColorListener(Beans04 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; //Display value of the theColor property on the
&nbsp;&nbsp;&nbsp; // standard output device.
&nbsp;&nbsp;&nbsp; System.out.println(myBean.getTheColor().toString());
&nbsp; }//end actionPerformed()
}//end class GetTheColorListener

//=======================================================//
//The following two classes are used to instantiate objects
// to be registered to listen to two of the buttons on the&nbsp;
// test panel.&nbsp; When the corresponding the buttons are&nbsp;
// pressed, these objects invoke methods of the bean under&nbsp;
// test. The first class invokes the makeRed() method and
// the second class invokes the makeBlue() method.

class RedActionListener implements ActionListener{
&nbsp; Beans04 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; RedActionListener(Beans04 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeRed();
&nbsp; }//end actionPerformed()
}//end class RedActionListener
//-------------------------------------------------------//

class BlueActionListener implements ActionListener{
&nbsp; Beans04 myBean;//save a reference to the bean here
&nbsp;&nbsp;
&nbsp; BlueActionListener(Beans04 inBean){//constructor
&nbsp;&nbsp;&nbsp; myBean = inBean;//save the reference to the bean
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; myBean.makeBlue();
&nbsp; }//end actionPerformed()
}//end class BlueActionListener
//=======================================================//

//The following class is used to instantiate objects that
// will be bound to the bean in such a way as to be&nbsp;
// notified of changes in the property values in the bean&nbsp;
// object.&nbsp; When notified of such changes, code in the
// propertyChange() method of this class extracts and
// displays information about the bean and the properties.
class MyPropertyChangeListener&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; implements PropertyChangeListener{
&nbsp; String theID; //store listener object ID here
&nbsp;&nbsp;
&nbsp; void setTheID(String nameIn){
&nbsp;&nbsp;&nbsp; //method to save the ID of the object
&nbsp;&nbsp;&nbsp; theID = nameIn;
&nbsp; }//end setTheID()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public void propertyChange(PropertyChangeEvent event){
&nbsp;&nbsp;&nbsp; //Extract and display information about the event
&nbsp;&nbsp;&nbsp; System.out.println(theID + " notified of change");
&nbsp;&nbsp;&nbsp; System.out.println("Property change source: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getSource());
&nbsp;&nbsp;&nbsp; System.out.println("Property name: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getPropertyName());
&nbsp;&nbsp;&nbsp; System.out.println("New property value: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getNewValue());
&nbsp;&nbsp;&nbsp; System.out.println("Old property value: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + event.getOldValue());
&nbsp;&nbsp;&nbsp; System.out.println();//blank line
&nbsp; }//end propertyChange()
}//end MyPropertyChangeListener class
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; //terminate the program when the window is closed&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</font></pre></td></tr></table>
.

<p>-end-<!--end--></body></html>