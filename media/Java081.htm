<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="author" content="richard g. baldwin">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>... in Java by Richard G Baldwin</title>
</head>

<body bgcolor="#FFFFFF">
<!--start-->
<h3 align="center"><b><i>Richard G Baldwin (512) 223-4758, </i></b><a
href="mailto:baldwin@austin.cc.tx.us"><b><i>baldwin@austin.cc.tx.us</i></b></a><b><i>,
</i></b><a href="http://www2.austin.cc.tx.us/baldwin/"><b><i>http://www2.austin.cc.tx.us/baldwin/</i></b></a></h3>

<h2 align="center"><b><!--title-->Swing and the Delegation Event Model<!--endtitle--></b></h2>

<p>Java Programming, Lesson # 81, Revised 05/09/98. </p>

<ul>
    <li><a href="#preface">Preface</a></li>
    <li><a href="#introduction">Introduction</a></li>
    <li><a href="#sample program">Sample Program</a></li>
    <li><ul>
            <li><a href="#interesting code fragments">Interesting
                Code Fragments</a></li>
            <li><a href="#program listing">Program Listing</a></li>
        </ul>
    </li>
    <li><a href="#another sample program">Another Sample Program</a></li>
    <li><ul>
            <li><a
                href="#swingevent09 interesting code fragments">SwingEvent09
                Interesting Code Fragments</a></li>
            <li><a href="#swingevent09 program listing">SwingEvent09
                Program Listing</a></li>
        </ul>
    </li>
    <li><a href="#summary">Summary</a></li>
</ul>

<hr>

<h2 align="center"><a name="preface"></a><font color="#FF0000">Preface</font></h2>

<p align="left">Students in Prof. Baldwin's <b><u>Intermediate
Java Programming</u></b> classes at ACC are responsible for
knowing and understanding all of the material in this lesson. </p>

<h2 align="center"><a name="introduction"></a><font
color="#FF0000"><b>Introduction</b></font></h2>

<p>To begin with, what is Swing? </p>

<p>Swing is the name given to a new set of lightweight components
developed by JavaSoft to supplement (and possibly replace) the
components in the AWT.&nbsp; (The general topic of lightweight
components is covered in a separate lesson.)&nbsp; With the
exception of top-level containers, Swing components are developed
completely using Java and don't depend on the <i>peer</i>
component rendering provided by the operating system. </p>

<p>Swing components have several advantages over AWT components,
and probably some disadvantages as well. </p>

<p>One of the advantages is that because the components are not
rendered on the screen by the operating system, the look and feel
of a component does not change as the application or applet is
executed on different platforms running under different operating
systems. </p>

<p>Furthermore, it is possible to cause Swing components to mimic
the look and feel of a specific platform no matter what platform
the program is running on.&nbsp; This is known as <i>pluggable
look and feel</i>.&nbsp; A complete lesson is dedicated to
pluggable look and feel. </p>

<p>In any event, Swing components are here to stay, and from this
point forward in these tutorial lessons, we will attempt to
incorporate Swing into the lessons in a meaningful way. </p>

<p>Swing components support the JDK 1.1 Delegation Event
Model.&nbsp; They <u>do not support</u> the JDK 1.0 event model,
so if you want to use Swing components, you must program using
the Delegation Event Model. </p>

<p>In some cases, conversion of an application or applet from AWT
components to Swing components involves nothing more complex than
replacing the AWT components with corresponding Swing
components.&nbsp; For example, the Swing component that
corresponds to the AWT <b>Button</b> component is the Swing <b>JButton</b>
component. </p>

<p>In all cases that you use Swing you will need to import, or
otherwise recognize the package that contains the Swing classes
so that the compiler and interpreter will have access to those
classes.&nbsp; Note that the way to do this will probably change
between JDK 1.1.x and JDK 1.2, but hopefully the change won't be
too great. (Rumor has it that Swing will be more tightly
integrated into JDK 1.2 than is the case with JDK 1.1.) </p>

<p>This lesson is designed as a follow-on to the earlier lesson
entitled &quot;Event Handling in JDK 1.1, A First Look,
Delegation Event Model.&quot;&nbsp; As such, material presented
in that lesson will not be repeated here. </p>

<p>The two AWT sample programs in that lesson were converted to
Swing programs for presentation in this lesson using the simple
substitution procedure described above.&nbsp; As you will see,
the Swing version of one of the sample program behaves
essentially the same as its AWT counterpart.&nbsp; The Swing
version of the other sample program does not behave the same as
its AWT counterpart. </p>

<p>So, where does that leave us?&nbsp; Well, fortunately, from an
event handling viewpoint, Swing components operate the same as
AWT components (except that Swing provides a number of new event
types).&nbsp; From other viewpoints, Swing components may or may
not behave the same as their AWT counterparts. </p>

<p>In addition, many Swing components don't have an AWT
counterpart.&nbsp; A number of new and exciting components are
included in the Swing library that don't exist in the AWT
(tooltips, progress bars, trees, etc.). </p>

<p align="left">Since this lesson is primarily concerned with
event handling, we will pursue the Swing components from an
event-handling viewpoint in this lesson and leave other
considerations surrounding Swing components for subsequent
lessons. As you will see, this lesson will raise some interesting
questions regarding the behavior of Swing components, but won't
provide the answers to those questions. &nbsp; </p>

<h3 align="center"><a name="sample program"></a><font
color="#FF0000">Sample Program</font></h3>

<p>The sample program in this section, named <b>SwingEvent08</b>,
was created by replacing each instance of <b>Frame</b> in the
program named <b>Event08</b>, with an instance of <b>JFrame</b>.&nbsp;
In addition, an import statement was added to cause the Swing
classes to be accessible to the compiler and the interpreter. </p>

<p>The event handling in this program is exactly the same as in <b>Event08</b>.&nbsp;
If you haven't reviewed that program, and the lesson on the
Delegation Event Model, you should probably go back and review it
now. </p>

<p>This program illustrates the use of <i>Event Sources</i>,<i>
Event Listeners</i>, and <i>Adapters </i>in the <i>Delegation
Event Model</i> for Swing components. </p>

<p>Briefly, this application instantiates an object which creates
a user interface consisting of a simple J<b>Frame </b>object.
This object is an <i>Event Source</i> which notifies two
different <i>Event Listener</i> objects of <b>Window </b>events. </p>

<p>One of the <b>Listener </b>objects <i>implements </i>the <b>WindowListener
</b>interface and defines <u>all</u> of the methods declared in
that interface. </p>

<p>The other <b>Listener </b>object <i>extends </i>the <b>Adapter
</b>class named <b>WindowAdapter</b>. As explained in the earlier
lesson, the purpose of <b>Adapter </b>classes (as used in this
context) is to implement the <b>Listener </b>interfaces and to
define all of the methods with empty methods. (Adapter classes
are viewed in a broader context in the advanced lessons on the
Reflection API.) </p>

<p>Classes which <i>extend </i>the <b>Adapter </b>classes can
then <u>selectively override</u> only those methods of interest.
This Listener object <u>overrides only two</u> of the methods. </p>

<p>Note that this application does <u>not</u> terminate and
return control to the operating system. You must forcefully
terminate it. </p>

<p>This program was tested using JDK 1.1.6 and Swing 1.0.1 under
Win95. </p>

<p align="left">The output produced by running the program is
presented in the comments at the beginning of the program
listing. </p>

<h3 align="center"><a name="interesting code fragments"></a><font
color="#FF0000">Interesting Code Fragments</font></h3>

<p>The first and only code fragment, that I am going to show and
discuss is the beginning of the constructor for the <b>GUI</b>
class that illustrates that this program uses the <b>JFrame</b>
class to instantiate a top-level container for the graphical user
interface. &nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>class GUI{
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create a new JFrame object
&nbsp;&nbsp;&nbsp; <b>JFrame</b> displayWindow = new <b>JFrame()</b>;
&nbsp;&nbsp;&nbsp; displayWindow.setSize(300,200);
&nbsp;&nbsp;&nbsp; displayWindow.setTitle(&quot;Copyright 1998, R.G.Baldwin&quot;);</pre>
        </td>
    </tr>
</table>

<p align="left">If you compile and run this program, you will see
that it behaves essentially the same as its AWT counterpart named
<b>Event08</b> that was discussed extensively in an earlier
lesson. </p>

<h3 align="center"><a name="program listing"></a><font
color="#FF0000">Program Listing</font></h3>

<p>This section contains a complete listing of the program.</p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>/*File SwingEvent08.java Copyright 1998, R.G.Baldwin
Rev 05/09/98

This is a Swing version of the program named Event08.

The purpose of this program is to illustrate that in many
respects, programming with Swing components is no different
from programming with AWT components.

Conversion of this program from AWT to Swing involved
nothing more complex than using the search and replace
feature of an editor to replace all instances of Frame
with JFrame and to import the swing package.

Illustrates the use of Event Sources, Event Listeners, and
Adapters in the Delegation Event Model for Swing
components.

Briefly, this application instantiates an object which&nbsp;
creates a user interface consisting of a simple JFrame&nbsp;
object.&nbsp; This object is an Event Source which notifies two
different Event Listener objects of Window events.

One of the Listener objects implements the WindowListener
interface and overrides all of the methods declared in&nbsp;
that interface.

The other Listener object extends the Adapter class named&nbsp;
WindowAdapter.&nbsp; The purpose of Adapter classes is to
implement the&nbsp; Listener interfaces and to define all of
the methods with empty methods.&nbsp; Classes which extend the
Adapter classes can then selectively override only those
methods of interest.&nbsp; This Listener object overrides only
two of the methods.

Note that this application does not terminate and return
control to the operating system.&nbsp; You must forcefully
terminate it.

Tested using JDK 1.1.6 and Swing 1.0.1 under Win95.

When executed, this application places a simple empty&nbsp;
JFrame object on the screen.&nbsp;&nbsp;

Starting the program produces screen output similar to
the following:
&nbsp;&nbsp;
WProc1 windowActivated test msg
Wproc1 windowOpened test msg

Pressing the minimize button on the JFrame produces the&nbsp;
output similar to the following:

WProc1 windowIconified test msg
******** WProc2 windowIconified test msg
WProc1 windowDeactivated test msg

Restoring the JFrame after minimization produces the&nbsp;
output similar to the following:

WProc1 windowActivated test msg
WProc1 windowDeiconified test msg
******** WProc2 windowDeiconified test msg
WProc1 windowActivated test msg

Closing the JFrame by pressing the X-icon in the upper&nbsp;
right of the JFrame produces output similar to the&nbsp;
following:

WProc1 windowClosing test msg
WProc1 windowDeactivated test msg
WProc1 windowClosed test msg
**********************************************************/

import java.awt.*;
import java.awt.event.*;
import com.sun.java.swing.*;

public class SwingEvent08 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUInterface object
&nbsp; }//end main
}//end class SwingEvent08
//=======================================================//

//The following class is used to instantiate a user&nbsp;
// interface object, to instantiate two Listener objects,
// and to register those two objects for notification&nbsp;
// whenever a Window event occurs.
class GUI{
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create a new JFrame object
&nbsp;&nbsp;&nbsp; JFrame displayWindow = new JFrame();
&nbsp;&nbsp;&nbsp; displayWindow.setSize(300,200);
&nbsp;&nbsp;&nbsp; displayWindow.setTitle(&quot;Copyright 1998, R.G.Baldwin&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two Listener objects which will process
&nbsp;&nbsp;&nbsp; // Window events
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1(displayWindow);
&nbsp;&nbsp;&nbsp; WProc2 winProcCmd2 = new WProc2();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Register the Listener objects for notification of
&nbsp;&nbsp;&nbsp; // Window events. This object is the Event Source.
&nbsp;&nbsp;&nbsp; displayWindow.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp; displayWindow.addWindowListener(winProcCmd2);

&nbsp;&nbsp;&nbsp; //windowActivated and windowOpened test messages
&nbsp;&nbsp;&nbsp; // are produced here
&nbsp;&nbsp;&nbsp; displayWindow.setVisible(true);

&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//The following two classes can be used to instantiate&nbsp;
// Listener objects. Note that this class implements the&nbsp;
// WindowListener interface.&nbsp; This requires that all the
// methods declared in the interface be overridden in this
// class. This class overrides all of the methods&nbsp; and
// displays a descriptive message whenever one of the
// methods is invoked.
class WProc1 implements WindowListener{
&nbsp; //used to save a reference to the JFrame object
&nbsp; JFrame displayWindowRef;
&nbsp;&nbsp;
&nbsp; WProc1(JFrame windowIn){//constructor
&nbsp;&nbsp;&nbsp; // save ref to JFrame object
&nbsp;&nbsp;&nbsp; this.displayWindowRef = windowIn;
&nbsp; }//end constructor

&nbsp; public void windowClosed(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(&quot;WProc1 windowClosed test msg&quot;);
&nbsp; }//end windowClosed()
&nbsp;&nbsp;
&nbsp; public void windowIconified(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(&quot;WProc1 windowIconified test msg&quot;);
&nbsp; }//end windowIconified()
&nbsp;&nbsp;
&nbsp; public void windowOpened(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(&quot;WProc1 windowOpened test msg&quot;);
&nbsp; }//end windowOpened()

&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(&quot;WProc1 windowClosing test msg&quot;);
&nbsp;&nbsp;&nbsp; displayWindowRef.dispose();//generate WindowClosed
&nbsp; }//end windowClosing()

&nbsp; public void windowDeiconified(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;WProc1 windowDeiconified test msg&quot;);
&nbsp; }//end windowDeiconified()

&nbsp; public void windowActivated(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(&quot;WProc1 windowActivated test msg&quot;);
&nbsp; }//end windowActivated()

&nbsp; public void windowDeactivated(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;WProc1 windowDeactivated test msg&quot;);
&nbsp; }//end windowDeactivated()
}//end class WProc1
//=======================================================//

//This and the previous class can be used to instantiate&nbsp;
// Listener objects. Note that this class extends an&nbsp;
// Adapter class which can be used to avoid the&nbsp;
// requirement to define all of the methods of the
// actual Listener class named WindowListener. This class
// overrides only two of the methods declared in the&nbsp;
// interface.&nbsp; It displays a message whenever one of the
// methods is invoked.
class WProc2 extends WindowAdapter{
&nbsp;&nbsp;
&nbsp; public void windowIconified(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;******** WProc2 windowIconified test msg&quot;);
&nbsp; }//end windowIconified()
&nbsp;&nbsp;
&nbsp; public void windowDeiconified(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;******** WProc2 windowDeiconified test msg&quot;);
&nbsp; }//end windowDeiconified()

}//end class WProc2</pre>
        </td>
    </tr>
</table>

<p align="left">. &nbsp; </p>

<h2 align="center"><a name="another sample program"></a><font
color="#FF0000">Another Sample Program</font></h2>

<p>This is a Swing version of the program named <b>Event09</b>. </p>

<p>The purpose of this program is to illustrate that in some
cases, conversion of an AWT program to a Swing program isn't as
simple as importing the Swing package and replacing the AWT
components with their Swing counterparts. </p>

<p>That is what was done with this program.&nbsp; This program is
identical to the AWT program named <b>Event09</b> except that all
instances of <b>Frame</b> were replaced by <b>JFrame</b> and the
Swing package was imported. </p>

<p>The intended behavior of this program (go back and review <b>Event09</b>
if necessary) is to display the coordinates of the mouse pointer
each time that the mouse is clicked inside the client area of the
<b>JFrame</b>. </p>

<p>Initially, this program appears to work correctly. However, as
each new click occurs on the client area of the <b>JFrame</b>, a
new pair of coordinate values is displayed, but the previous
pairs of coordinate values does not disappear as is the case with
the program named <b>Event09</b>.&nbsp; Thus, the behavior is
significantly different under JDK 1.1.6 and Swing 1.0.1 under
Win95. </p>

<p>Furthermore, in some cases, while this GUI is on the screen,
if focus is transferred to a different application, all of the
coordinate values except the last one that was created will
disappear. </p>

<p>It will be left as an exercise for the student to dig into the
(currently very sparse) documentation on Swing in order to
understand and explain this behavior. </p>

<p>As explained earlier, this lesson is concerned with event
handling in Swing and this program is adequate to illustrate the
use of the Delegation Event Model with Swing.&nbsp; We will leave
the subtle behavior of the Swing components for discussion in
subsequent lessons. </p>

<p align="left">If you compile and execute this program, whenever
you click the mouse inside the J<b>Frame</b>, you should see the
coordinates of the mouse pointer displayed above the mouse
pointer. </p>

<h3 align="center"><a
name="swingevent09 interesting code fragments"></a><font
color="#FF0000">SwingEvent09 Interesting Code Fragments</font></h3>

<p>The only code fragment that will be highlighted is the one
that illustrates how this program extends <b>JFrame</b> into a
new class named <b>MyFrame</b> to make it possible to override
the <b>paint()</b> method of the <b>JFrame</b> class. Recall that
in the program named <b>Event09</b>, the <b>Frame</b> class was
extended in a similar way. <br>
&nbsp; </p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>class MyFrame extends <b>JFrame</b>{
&nbsp; int clickX;
&nbsp; int clickY;
&nbsp;&nbsp;
&nbsp; public void <b>paint</b>(Graphics g){
&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot; + clickX + &quot;, &quot; + clickY, clickX, clickY);
&nbsp; }//end paint()
}//end class MyFrame</pre>
        </td>
    </tr>
</table>

<p align="center">&nbsp; </p>

<h3 align="center"><a name="swingevent09 program listing"></a><font
color="#FF0000">SwingEvent09 Program Listing</font></h3>

<p>This section contains a complete listing of the program.</p>

<table border="1" bgcolor="#FFFF80">
    <tr>
        <td><pre>/*File SwingEvent09.java Copyright 1998, R.G.Baldwin
Rev 5/9/98 by RGB
This is a Swing version of the program named Event09.

The purpose of this program is to illustrate that in some
cases, conversion of an AWT program to a Swing program
isn't as simple as importing the Swing package and replacing
the AWT components with Swing components.

That is what was done with this program.&nbsp; In other words,
this program is identical to the AWT program named Event09
except that all instances of Frame were replaced by JFrame
and the Swing package was imported.

At the surface, the program appears to work correctly.
However, as each new click occurs on the client area of
the JFrame, a new pair of coordinate values is displayed,
but the previous pairs of coordinate values don't disappear
as is the case with the program named Event09.

Furthermore, in some cases, while this GUI is on the screen,
if focus is transferred to a different application, all of
the coordinate values except the last one created will&nbsp;
disappear.

It will be left as an exercise for the student to dig into
the (currently very sparse) documentation on Swing in order
to understand and explain this behavior.

Illustrates the use of Event Sources, Event Listeners, and&nbsp;
Adapters in the Delegation Event Model for Swing.

This program instantiates a Listener object to process&nbsp;
mouse events. When a mouse press occurs in a JFrame object,
the program gets the coordinates and then displays those
coordinates near the point of the mouse press.

Tested using JDK 1.1.6 and Swing 1.0.1 under Win95.
**********************************************************/
import java.awt.*;
import java.awt.event.*;
import com.sun.java.swing.*;

public class SwingEvent09 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class SwingEvent09
//=======================================================//

//Subclass JFrame in order to override the paint method.
class MyFrame extends JFrame{
&nbsp; int clickX;
&nbsp; int clickY;
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;&quot; + clickX + &quot;, &quot; + clickY, clickX, clickY);
&nbsp; }//end paint()
}//end class MyFrame
//=======================================================//

//The following class is used to instantiate a&nbsp;
// graphical user interface object.
class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create a new JFrame object, set size, title, etc.
&nbsp;&nbsp;&nbsp; MyFrame displayWindow = new MyFrame();
&nbsp;&nbsp;&nbsp; displayWindow.setSize(300,300);
&nbsp;&nbsp;&nbsp; displayWindow.setTitle(&quot;Copyright 1998, R.G.Baldwin&quot;);
&nbsp;&nbsp;&nbsp; displayWindow.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register an anonymous Listener&nbsp;
&nbsp;&nbsp;&nbsp; // object which will terminate the program when the&nbsp;
&nbsp;&nbsp;&nbsp; // user closes the JFrame.
&nbsp;&nbsp;&nbsp; displayWindow.addWindowListener(new WProc1());
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register an anonymous Listener&nbsp;
&nbsp;&nbsp;&nbsp; // object that will process mouse events to determine
&nbsp;&nbsp;&nbsp; // and display the coordinates when the user presses
&nbsp;&nbsp;&nbsp; // the mouse button in the client area of the JFrame.
&nbsp;&nbsp;&nbsp; displayWindow.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseProc(displayWindow));
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and&nbsp;
// displays the coordinates of the mouse pointer when the
// mouse is pressed on the source object. Note that this
// class extends is an adapter class.
class MouseProc extends MouseAdapter{
&nbsp; MyFrame refToWin; //save a reference to the source here
&nbsp;&nbsp;
&nbsp; MouseProc(MyFrame inWin){//constructor
&nbsp;&nbsp;&nbsp; refToWin = inWin;//save ref to window
&nbsp; }//end constructor

&nbsp; //Override the mousePressed method to determine and&nbsp;
&nbsp; // display the coordinates when the mouse is pressed.
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Get X and Y coordinates of mouse pointer and store
&nbsp;&nbsp;&nbsp; // in an instance variable of the JFrame object
&nbsp;&nbsp;&nbsp; refToWin.clickX = e.getX();
&nbsp;&nbsp;&nbsp; refToWin.clickY = e.getY();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Force the JFrame object to be repainted in order to
&nbsp;&nbsp;&nbsp; // display the coordinate information.
&nbsp;&nbsp;&nbsp; refToWin.repaint();
&nbsp; }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to terminate the program
// when the user closes the frame.&nbsp; Note that this class
// extends an adapter class.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=======================================================//</pre>
        </td>
    </tr>
</table>

<h2 align="center"><a name="summary"></a><font color="#FF0000">Summary</font></h2>

<p>Swing provides a new set of lightweight components that can be
programmed using the Delegation Event Model first introduced in
JDK 1.1. </p>

<p>The Swing components cannot be programmed using the event
model from JDK 1.0. </p>

<p>In some cases, all that is necessary to convert a program
built around AWT components to a program built around Swing
components is to import the Swing classes and replace all
instances of AWT components with their Swing counterparts. </p>

<p>In other cases, a simple substitution as described above will
not produce the same behavior. </p>

<p>Many of the new Swing components do not have an AWT
counterpart. The Swing classes contain a number of new components
that were never added to the AWT component library. </p>

<p>This lesson has dealt exclusively with the use of the
Delegation Event Model for programming Swing components and has
left some unanswered questions regarding how the behavior of
Swing components does, and in some cases does not, mirror that of
their AWT counterparts. </p>

<p>-end-<!--end--></p>
</body>
</html>
