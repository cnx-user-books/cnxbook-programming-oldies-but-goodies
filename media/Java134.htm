<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, The TextField, TextArea, and Label Classes<!--endtitle--></b></h2></center>
Java Programming, Lesson # 134, Revised 01/14/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#text input and output components">Text Input and Output Components</a></li>

<li><a href="#textfield">TextField</a></li>

<ul><li><a href="#sample program for textfield">Sample Program for TextField</a></li>

<li><a href="#interesting code fragments in textfield program">Interesting
Code Fragments in TextField Program</a></li>

<li><a href="#program listing for textfield program">Program Listing for TextField
Program</a></li></ul>

<li><a href="#textarea">TextArea</a></li>

<ul><li><a href="#sample program for textarea class">Sample Program for TextArea
Class</a></li>

<li><a href="#interesting code fragments from textarea program">Interesting
Code Fragments from TextArea Program</a></li>

<li><a href="#program listing for textarea program">Program Listing for TextArea
Program</a></li></ul>

<li><a href="#label">Label</a></li>

<ul><li><a href="#sample program for the label class">Sample Program for the Label
Class</a></li>

<li><a href="#interesting code fragments from the label program">Interesting
Code Fragments from the Label Program</a></li>

<li><a href="#program listing for the label program">Program Listing for the
Label Program</a></li></ul>

<li><a href="#review">Review</a></li>


<p><hr width="100%"></ul>

<center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b><u>Advanced Java Programming</u></b> classes
at ACC are responsible for knowing and understanding all of the material
in this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This series of lessons is concentrating on the package <b>java.awt </b>where
most of the functionality exists for providing the user interface to your
application or applet.

<p>We have learned how to handle events in both JDK 1.0.2 and JDK 1.1 and
we have learned how to use the layout managers in JDK 1.1 (which isn't
greatly different from using layout managers in JDK 1.0.2). These two topics
form the basis for the design and implementation of a Graphical User Interface.

<p>The next step is to take a look at the variety of components that are
available to combine with layout and event handling to produce an effective
Graphical User Interface.

<p>The available components are defined by classes in the package <b>java.awt</b>.
Our approach will be to group those classes into categories and study the
material on a category basis. We have discussed container classes and non-text
classes. As of this writing, it looks as if the remaining categories will
be:
<ul><li>
Text Input and Output Classes, TextField, TextArea, and Label</li>

<li>
The Scrollbar Class</li>

<li>
The Dialog Class</li>

<li>
The Canvas Class</li>

<li>
Menus</li>

<li>
Graphics - Shapes, Fonts, Images</li>

<li>
The PrintJob Class</li>

<li>
The Toolkit Class</li></ul>
However, as things develop, I may find it necessary to modify these groupings.
<center><h2><a name="text input and output components"></a><font color="#ff0000">Text
Input and Output Components</font></h2></center>
This lesson will deal with the classes <b>TextField </b>and <b>TextArea
</b>along with the class <b>Label</b>.

<p>The <b>TextField </b>class can be used to produce a component that will
accept one line of user text as input. It can also be used to display one
line of text in a "non-editable" fashion with a border.

<p>The <b>TextArea </b>class can be used to produce a component that will
accept multiple lines of user text as input. It can also be used to display
multiple lines of scrollable text in a "non-editable" fashion.

<p><b>TextField </b>and <b>TextArea </b>extend <b>TextComponent </b>which
extends <b>Component</b>.

<p>The <b>Label </b>class can be used to display one line of text. This
component is inherently non-editable and that attribute cannot be modified
by the program.
<center><h2><a name="textfield"></a><font color="#ff0000">TextField</font></h2></center>
The <b>TextField </b>class can be used to instantiate components that allow
the editing of a single line of text. The class can also be used to display
non-editable text in a single-line format with a border.

<p>The <b>TextField </b>class extends the <b>TextComponent </b>class which
extends the <b>Component </b>class. Thus, the many different methods which
are defined in the<b>TextComponent,</b> <b>Component </b>and <b>Object
</b>classes are also available to objects of the <b>TextField </b>class.

<p>Before going on, we need to take a look at the <b>TextComponent </b>class
which is so important to both the <b>TextField </b>and <b>TextArea </b>classes.

<p>According to the JDK 1.1 documentation, the description of the <b>TextComponent
</b>class, which is the superclass of both the <b>TextField </b>class and
the <b>TextArea </b>class is:
<table border bgcolor="#80ffff" ><tr><td>"A TextComponent is a component that allows the editing of some text."</td></tr></table>
The <b>TextComponent </b>class has one <i>field</i> and <u>no public constructors</u>.

<p>Therefore, it is not possible to instantiate an object of the <b>TextComponent
</b>class.

<p>However, the <b>TextComponent </b>class is the repository for a large
number of methods which are inherited not only by <b>TextField </b>but
also by other class that subclasses <b>TextComponent</b>.

<p>Some of the methods of the <b>TextComponent </b>class which are particularly
interesting include the following:
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>addTextListener</b>(TextListener) -- Adds the specified text event listener
to receive text events from this textcomponent.&nbsp;</li>

<li><b>removeTextListener</b>(TextListener) -- Removes the specified text event
listener so that it no longer receives text events from this textcomponent&nbsp;</li>

<li><b>getSelectedText</b>() -- Returns the selected text contained in this
TextComponent.&nbsp;</li>

<li><b>getSelectionEnd</b>() -- Returns the selected text's end position.&nbsp;</li>

<li><b>getSelectionStart</b>() -- Returns the selected text's start position.&nbsp;</li>

<li><b>getText</b>() -- Returns the text contained in this TextComponent.&nbsp;</li>

<li><b>select</b>(int, int) -- Selects the text found between the specified
start and end locations.&nbsp;</li>

<li><b>selectAll</b>() -- Selects all the text in the TextComponent.&nbsp;</li>

<li><b>setSelectionEnd</b>(int) -- Sets the selection end to the specified
position.&nbsp;</li>

<li><b>setSelectionStart</b>(int) -- Sets the selection start to the specified
position.&nbsp;</li>

<li><b>setCaretPosition</b>(int) -- Sets the position of the text insertion
caret for the TextComponent&nbsp;</li>

<li><b>getCaretPosition</b>() -- Returns the position of the text insertion
caret for the text component.&nbsp;</li>

<li><b>setEditable</b>(boolean) -- Sets the specified boolean to indicate whether
or not this TextComponent should be editable.&nbsp;</li>

<li><b>isEditable</b>() -- Returns the boolean indicating whether this TextComponent
is editable or not.&nbsp;</li>

<li><b>setText</b>(String) -- Sets the text of this TextComponent to the specified
text.&nbsp;</li></ul></td></tr></table>
We will be using some of these methods in the sample programs in this lesson.

<p>Now back to our discussion of the <b>TextField </b>class. As of 3/13/97,
the <b>TextField </b>class has no <i>fields </i>and has the following public
<i>constructors</i>:
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>TextField</b>() -- Constructs a new TextField.&nbsp;</li>

<li><b>TextField</b>(int) -- Constructs a new empty TextField with the specified
number of columns.&nbsp;</li>

<li><b>TextField</b>(String) -- Constructs a new TextField initialized with
the specified text.&nbsp;</li>

<li><b>TextField</b>(String, int) -- Constructs a new TextField initialized
with the specified text and columns.&nbsp;</li></ul></td></tr></table>
Also as of 3/13/97, the <b>TextField </b>class provides about twenty methods,
many of which are <i>deprecated</i>. The following partial list of methods
indicates some of the capabilities available with objects of class <b>TextField</b>.
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>addActionListener</b>(ActionListener) -- Adds the specified action listener
to receive action events from this textfield.&nbsp;</li>

<li><b>removeActionListener</b>(ActionListener) -- Removes the specified action
listener so that it no longer receives action events from this textfield.&nbsp;</li>

<li><b>getColumns</b>() -- Returns the number of columns in this TextField.&nbsp;</li>

<li><b>setColumns</b>(int) -- Sets the number of columns in this TextField.&nbsp;</li>

<li><b>getMinimumSize</b>() -- Returns the minimum size Dimensions needed for
this TextField.&nbsp;</li>

<li><b>getMinimumSize</b>(int) -- Returns the minimum size Dimensions needed
for this TextField with the specified amount of columns.&nbsp;</li>

<li><b>getPreferredSize</b>() -- Returns the preferred size Dimensions needed
for this TextField.&nbsp;</li>

<li><b>getPreferredSize</b>(int) -- Returns the preferred size Dimensions needed
for this TextField with the specified amount of columns.&nbsp;</li>

<li><b>setEchoChar</b>(char) -- Sets the echo character for this TextField.
This is useful for fields where the user input shouldn't be echoed to the
screen, as in the case of a TextField that represents a password.&nbsp;</li>

<li><b>echoCharIsSet</b>() -- Returns true if this TextField has a character
set for echoing.&nbsp;</li>

<li><b>getEchoChar</b>() -- Returns the character to be used for echoing.&nbsp;</li></ul></td></tr></table>
We will make use of some of these methods as well as methods inherited
from the superclasses of <b>TextField</b> in the following sample program.
<center><h3><a name="sample program for textfield"></a><font color="#ff0000">Sample
Program for TextField</font></h3></center>
This program is designed to be compiled and run under JDK 1.1

<p>The program places a <b>TextField </b>object in a <b>Frame </b>object.
The String <i>"Initial text" </i>is initially displayed in the <b>TextField
</b>object at program startup.

<p>An <b>ActionListener </b>object is instantiated and registered on the
<b>TextField </b>object. An action event occurs when the user presses the
<i>Enter </i>key while the <b>TextField </b>object has the <i>focus</i>.
The purpose of the <b>ActionListener </b>object in this program is to extract
and display the text in the <b>TextField </b>object in two different ways:
<ul><li>
Display all the text in the <b>TextField </b>object.</li>

<li>
Display only that portion of the text that has been <u>selected</u> by
the user using any of the available ways of selecting text on a particular
platform.</li></ul>
When the user presses the <i>Enter </i>key while the <b>TextField </b>object
has the <i>focus</i>, an event is trapped by the overridden <b>actionPerformed()</b>
method of the <b>ActionListener </b>object. Code in the overridden method
uses the <b>getSelectedText()</b> method of the <b>TextField </b>class
to access and display the text that has been selected by the user.

<p>Code in the overridden <b>actionPerformed()</b> method also uses the
<b>getText()</b> method of the <b>TextComponent </b>class to access and
display all of the text in the <b>TextField </b>object.

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1.3 running under Win95.
<center><h3><a name="interesting code fragments in textfield program"></a><font color="#ff0000">Interesting
Code Fragments in TextField Program</font></h3></center>
In this section, we will concentrate on code fragments which are peculiar
to the <b>TextField </b>class and skip over the other code.

<p>The first interesting code fragment instantiates a <b>TextField </b>object
with an initial text string. Then an <b>ActionListener </b>object is instantiated
and registered on the <b>TextField </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; TextField myTextField = new TextField("Initial Text");&nbsp;
&nbsp;&nbsp;&nbsp; myTextField.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(myTextField));</pre></td></tr></table>
There are a number of lines of code following this which we have already
covered in earlier lessons. Therefore, we will skip over them.

<p>The next interesting code fragment is the overridden <b>actionPerformed()</b>
method which uses the <b>getSelectedText()</b> method from the <b>TextField
</b>class and the <b>getText()</b> method from the <b>TextComponent </b>class
to obtain and display the selected portion of the text followed by all
the text.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Selected text is: " + aTextField.getSelectedText());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "All text is: " + aTextField.getText());
&nbsp;&nbsp;&nbsp; }//end actionPerformed()</pre></td></tr></table>
A listing of the program complete with comments is contained in the next
section.
<center><h3><a name="program listing for textfield program"></a><font color="#ff0000">Program
Listing for TextField Program</font></h3></center>
This section contains a complete listing of the program. See the sections
above for an operational description of the program.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File TextField01.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

The program places a TextField object in a Frame object.&nbsp;&nbsp;

The String "Initial text" is initially displayed in the&nbsp;
TextField object at program startup.

An ActionListener object is instantiated and registered on
the TextField object.&nbsp; An action event occurs when the&nbsp;
user presses the Enter key while the TextField object has
the focus.&nbsp; The purpose of the ActionListener object is to
extract and display the text in the TextField object in two
different ways:

1.&nbsp; Display all the text in the TextField object.
2.&nbsp; Display only that portion of the text that has been&nbsp;
&nbsp;&nbsp;&nbsp; selected by by the user using any of the available&nbsp;
&nbsp;&nbsp;&nbsp; ways of selecting text.
&nbsp;&nbsp;&nbsp;&nbsp;
When the user presses the Enter key while the TextField&nbsp;
object has the focus, an event is trapped in the overridden
actionPerformed() method of the ActionListener object.&nbsp;&nbsp;
Code in the overridden method uses the getSelectedText()
method of the TextField class to access and display the
text that has been selected by the user.

Code in the overridden actionPerformed() method also uses
the getText() method to access and display all of the text
in the TextField object.

A windowClosing() event listener object is instantiated&nbsp;
and registered on the frame to terminate the program when
the frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class TextField01 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class TextField01
//=======================================================//


class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Instantiate a TextField object and place an initial
&nbsp;&nbsp;&nbsp; // String in it.
&nbsp;&nbsp;&nbsp; TextField myTextField = new TextField("Initial Text");

&nbsp;&nbsp;&nbsp; //Instantiate and register an ActionListener object on
&nbsp;&nbsp;&nbsp; // the TextField object.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myTextField.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyActionListener(myTextField));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Place the TextField object in a Frame object
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(myTextField);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//Class to listen for ActionListener events on the&nbsp;
// TextField object
class MyActionListener implements ActionListener{
&nbsp; TextField aTextField;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; MyActionListener(TextField inTextField){//constructor
&nbsp;&nbsp;&nbsp; aTextField = inTextField;//save reference to TextField
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; //Override the actionPerformed() method of the&nbsp;
&nbsp; // ActionListener interface.
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Selected text is: " + aTextField.getSelectedText());
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "All text is: " + aTextField.getText());
&nbsp; }//end actionPerformed()
}//end class MyActionListener
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
.
<center><h2><a name="textarea"></a><font color="#ff0000">TextArea</font></h2></center>
According to the JDK 1.1 documentation,
<table border bgcolor="#80ffff" ><tr><td>"A <b>TextArea </b>object is a multi-line area that displays text.
It can be set to allow editing or read-only modes."</td></tr></table>
Like the <b>TextField </b>class above, the <b>TextArea </b>class extends
the <b>TextComponent </b>class meaning that all the methods defined in
the <b>TextComponent </b>class are available to objects of the <b>TextArea
</b>class.

<p>As of 3/13/97, the <b>TextArea </b>class has four <i>fields</i>, all
of which are <i>constants</i>, and all of which have to do with the establishment
of horizontal and vertical scrollbars for a <b>TextArea </b>object. A list
of these symbolic constants will be provided later.

<p>Also as of 3/13/97, the <b>TextArea </b>class has the following public
constructors:
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>TextArea</b>() -- Constructs a new TextArea.&nbsp;</li>

<li><b>TextArea</b>(int, int) -- Constructs a new empty TextArea with the specified
number of rows and columns.&nbsp;</li>

<li><b>TextArea</b>(String) -- Constructs a new TextArea with the specified
text displayed.&nbsp;</li>

<li><b>TextArea</b>(String, int, int) -- Constructs a new TextArea with the
specified text and number of rows and columns.&nbsp;</li>

<li><b>TextArea</b>(String, int, int, int) -- Constructs a new TextArea with
the specified text and number of rows, columns, and scrollbar&nbsp;</li></ul></td></tr></table>
The symbolic constants that can be used to specify information about the
scrollbar in the fourth version of the constructor are:
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>SCROLLBARS_BOTH</b> Create and display both vertical and horizontal
scrollbars.&nbsp;</li>

<li><b>SCROLLBARS_HORIZONTAL_ONLY</b> Create and display horizontal scrollbar
only.&nbsp;</li>

<li><b>SCROLLBARS_NONE</b> Do not create or display any scrollbars for the
text area.&nbsp;</li>

<li><b>SCROLLBARS_VERTICAL_ONLY</b> Create and display vertical scrollbar only.&nbsp;</li></ul></td></tr></table>
As of 3/13/97, the <b>TextArea </b>class contains about twenty-one methods,
many of which are <i>deprecated</i>. A few of the particularly interesting
methods follow:
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>append</b>(String) -- Appends the given text to the end.&nbsp;</li>

<li><b>insert</b>(String, int) -- Inserts the specified text at the specified
position.&nbsp;</li>

<li><b>replaceRange</b>(String, int, int) -- Replaces text from the indicated
start to end position with the new text specified.&nbsp;</li></ul></td></tr></table>
Don't forget that there many other methods defined in the <b>TextArea </b>class
and in the <b>TextComponent</b>, <b>Component</b>, and <b>Object </b>classes
that are also available to objects of the <b>TextArea </b>class.
<center><h3><a name="sample program for textarea class"></a><font color="#ff0000">Sample
Program for TextArea Class</font></h3></center>
This program is designed to be compiled and run under JDK 1.1

<p>The program places a <b>TextArea </b>object in a <b>Frame </b>object.
The <b>TextArea </b>object is specified to have a vertical <b>Scrollbar</b>.

<p>An <i>initial string</i> consisting of ten separate lines of text is
placed in the <b>TextArea </b>object when it is instantiated.

<p>A <b>TextListener </b>object is instantiated and registered on the <b>TextArea
</b>object. A <b>TextEvent </b>occurs <u>whenever there is a change</u>
in the value of the text contained in the <b>TextArea </b>object.

<p>The purpose of the <b>TextListener </b>object in this program is to
display all of the text in the <b>TextArea </b>object whenever its value
changes.

<p>When the text value changes in the <b>TextArea </b>object, an event
is trapped by the overridden <b>textValueChanged()</b> method of the <b>TextListener
</b>object. Code in the overridden <b>textValueChanged()</b> method uses
the <b>getText()</b> method of the <b>TextComponent </b>class to access
and display <u>all of the text</u> in the <b>TextArea </b>object.

<p>Note that this program is processing text at a very low level. An event
occurs every time an individual character changes.

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h3><a name="interesting code fragments from textarea program"></a><font color="#ff0000">Interesting
Code Fragments from TextArea Program</font></h3></center>
This section will concentrate on only that portion of the code that is
peculiar to the <b>TextArea </b>class and the <b>TextListener </b>interface.

<p>The first interesting code fragment is the code used to instantiate
the object of the <b>TextArea </b>class with a vertical scrollbar and then
place ten separate lines of text in the object. Note that the <b>append()</b>
method of the <b>TextArea </b>class is used to place the text in the object.
Any of several other methods could also have been used for that purpose.
<table border bgcolor="#ffff80" ><tr><td><pre>TextArea myTextArea =&nbsp;
&nbsp; new TextArea("", 5, 20,&nbsp; TextArea.SCROLLBARS_VERTICAL_ONLY);
for(int cnt = 0; cnt &lt; 10; cnt++)&nbsp;
&nbsp; myTextArea.<b>append</b>("Line " + cnt + "");</pre></td></tr></table>
The next interesting code fragment instantiates and registers a <b>TextListener
</b>object on the <b>TextArea </b>object.
<table border bgcolor="#ffff80" ><tr><td><pre>myTextArea.addTextListener(new MyTextListener(myTextArea));</pre></td></tr></table>
The final interesting code fragment is the overridden <b>textValueChanged()</b>
method that uses the <b>getText()</b> method of the <b>TextComponent </b>class
to access and display all the text in the <b>TextArea </b>object whenever
there is a change in the value of the text in the object.
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; public void textValueChanged(TextEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(aTextArea.getText());
&nbsp;&nbsp;&nbsp; }//end textValueChanged()</pre></td></tr></table>
A complete listing of the program is provided in the next section.
<center><h3><a name="program listing for textarea program"></a><font color="#ff0000">Program
Listing for TextArea Program</font></h3></center>
This section contains a complete listing of the program with additional
comments. See the sections above for an operational description of the
program.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File TextArea01.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

The program places a TextArea object in a Frame object. The
TextArea object is specified to have a vertical Scrollbar.

An initial string consisting of 10 separate lines of text&nbsp;
is placed in the TextArea object when it is instantiated.

A TextListener object is instantiated and registered on&nbsp;
the TextArea object.&nbsp; A TextEvent occurs whenever there is
a change in the value of the text contained in the TextArea
object. The purpose of the TextListener object is to&nbsp;
display the text in the TextArea object whenever its value
changes.
&nbsp;&nbsp;&nbsp;&nbsp;
When the text value changes in the TextArea object, an&nbsp;
event is trapped by the overridden textValueChanged()&nbsp;
method of the TextListener object. Code in the overridden
textValueChanged() method uses the getText() method of the
TextComponent class to access and display all of the text&nbsp;
in the TextArea object.

Note that this program is processing text at a very low&nbsp;
level - every time a character changes.

A windowClosing() event listener object is instantiated and
registered on the frame to terminate the program when the
frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/


import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class TextArea01 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class TextArea01
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a TextArea object with a vertical&nbsp;
&nbsp;&nbsp;&nbsp; // scrollbar and initialize the object with ten lines
&nbsp;&nbsp;&nbsp; // of text.
&nbsp;&nbsp;&nbsp; TextArea myTextArea = new TextArea(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "", 5, 20,&nbsp; TextArea.SCROLLBARS_VERTICAL_ONLY);
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; 10; cnt++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myTextArea.append("Line " + cnt + "\n");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a TextListener object on the
&nbsp;&nbsp;&nbsp; // TextArea object.&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myTextArea.addTextListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyTextListener(myTextArea));
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Place the TextArea object in a Frame object
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(myTextArea);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

&nbsp; //Class to listen for TextListener events on the&nbsp;
&nbsp; // TextArea object
&nbsp; class MyTextListener implements TextListener{
&nbsp;&nbsp;&nbsp; TextArea aTextArea;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyTextListener(TextArea inTextArea){//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; aTextArea = inTextArea;//save a reference
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Override the textValueChanged() method of the&nbsp;
&nbsp;&nbsp;&nbsp; // TextListener interface.
&nbsp;&nbsp;&nbsp; public void textValueChanged(TextEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(aTextArea.getText());
&nbsp;&nbsp;&nbsp; }//end textValueChanged()
&nbsp; }//end class MyTextListener
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program&nbsp;&nbsp;
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
.
<center><h2><a name="label"></a><font color="#ff0000">Label</font></h2></center>
An object of class <b>Label </b>is an object that can be used to display
a single line of <u>read-only</u> text. It is <u>not possible </u>for the
user to enter text into a <b>Label </b>object.

<p>The <b>Label </b>class extends the <b>Component </b>class.

<p>As of 3/13/97, the <b>Label </b>class has the following fields which
are all constants. The names of the fields are self-explanatory.
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>CENTER </b>The center alignment.&nbsp;</li>

<li><b>LEFT </b>The left alignment.&nbsp;</li>

<li><b>RIGHT </b>The right alignment.&nbsp;</li></ul></td></tr></table>
Also as of 3/13/97, the <b>Label </b>class has the following public constructors:
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>Label</b>() -- Constructs an empty label.&nbsp;</li>

<li><b>Label</b>(String) -- Constructs a new label with the specified String
of text.&nbsp;</li>

<li><b>Label</b>(String, int) -- Constructs a new label with the specified
String of text and the specified alignment.&nbsp;</li></ul></td></tr></table>
These are self-explanatory as well.

<p>As of 3/13/97, the <b>Label </b>class has six methods mostly involved
with getting and setting text and dealing with alignment. For our purposes
in this lesson, the most interesting subset of the available methods follows:
<table border bgcolor="#80ffff" ><tr><td><ul><li><b>getAlignment</b>() Gets the current alignment of this label.&nbsp;</li>

<li><b>getText</b>() Gets the text of this label.&nbsp;</li>

<li><b>setAlignment</b>(int) Sets the alignment for this label to the specified
alignment.&nbsp;</li>

<li><b>setText</b>(String) Sets the text for this label to the specified text.&nbsp;</li></ul></td></tr></table>
The next section contains a very simple program showing how to use an object
of the <b>Label </b>class in its most common form -- a read-only single
line of text.

<p>The program does not provide any event handling because events are not
ordinarily generated by labels.

<p>Remember however that since the <b>Label </b>class is a subclass of
the <b>Component </b>class, any of the low-level event listeners defined
in that class apply to <b>Label </b>objects also.

<p>Therefore, <b>Label</b> objects can be the sources of low-level events,
and event listener objects can be instantiated and registered on those
<b>Label</b> objects.

<p>You might want to go back and review some of the lessons on event handling
in JDK 1.1 where it was shown that contrary to normal operation, objects
of the <b>Label </b>class can generate low-level events such as <i>mouse
</i>events, <i>key </i>events, and <i>focus</i> events.
<center><h3><a name="sample program for the label class"></a><font color="#ff0000">Sample
Program for the Label Class</font></h3></center>
This program is designed to be compiled and run under JDK 1.1

<p>The program places a <b>Label </b>object in a <b>Frame </b>object. The
string <i>"Initial Text"</i> is placed in the <b>Label </b>object when
it is instantiated.

<p>The <b>Label </b>object behaves as a <u>non-editable</u> single line
of text and doesn't generate events (at least there are no listener objects
registered to listen for events).

<p>A <b>windowClosing()</b> event listener object is instantiated and registered
on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1 running under Win95.
<center><h3><a name="interesting code fragments from the label program"></a><font color="#ff0000">Interesting
Code Fragments from the Label Program</font></h3></center>
For purposes of this lesson, the only interesting code fragment in this
program is the instantiation of the <b>Label </b>object as follows:
<table border bgcolor="#ffff80" ><tr><td><pre>Label myLabel = new Label("Initial Text");</pre></td></tr></table>
A complete listing of the program is provided in the next section.
<center><h3><a name="program listing for the label program"></a><font color="#ff0000">Program
Listing for the Label Program</font></h3></center>
This section contains a complete listing of the program with comments.
For an operational description of the program, see the previous sections
of this lesson.
<table border bgcolor="#ffff80" ><tr><td><pre>/*File label3.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

The program places a Label object in a Frame object. The&nbsp;
string "Initial Text" is placed in the Label object when&nbsp;
it is instantiated.&nbsp;

The label object behaves as a read-only single line of&nbsp;
text and doesn't generate events.

A windowClosing() event listener object is instantiated&nbsp;
and registered on the frame to terminate the program when
the frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class label3 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class label3
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor

&nbsp;&nbsp;&nbsp; //Instantiate a Label object with an initial text&nbsp;
&nbsp;&nbsp;&nbsp; // string.
&nbsp;&nbsp;&nbsp; Label myLabel = new Label("Initial Text");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Place the Label object in a Frame object
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Copyright 1997, R.G.Baldwin");&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.setLayout(new FlowLayout());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.add(myLabel);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,150);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//</pre></td></tr></table>

<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Most of the previous lessons have provided review problems and review questions
to reinforce the material presented in the lesson.

<p>It is this author's belief that by the time you reach this point in
your study of Java programming, you should be working at a sufficiently
independent level that such review information should no longer be necessary.

<p>In particular, you should be working at a level that allows you to create
your own review questions and programs, particularly tuned to the work
that you are doing in Java.

<p>Therefore, review questions and programs will rarely be provided for
the remaining lessons in this set of Java programming tutorials.

<p>-end-<!--end--></body></html>