<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Transparency and Preferred Size</h2></center>
<b><i>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1015
<p>August 14, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to really understand what
Swing is all about.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is recommended that in addition to studying this set of lessons,
you also study my earlier lessons on Swing.&nbsp; A list of some of my
Swing lessons can be found in an earlier <a href="Java1005.htm#titles">lesson</a>
in this series.&nbsp; The lessons themselves can be found at
<i>Baldwin's
Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p>The earlier lessons will introduce you to the use of Swing while avoiding
much of the detail included in this series.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">Properties, events, and methods</font></b>
<p><font color="#000000">In an earlier lesson, I provided lists of <i>properties</i>,
<i>events</i>,
and <i>methods</i> that are defined in <b>JComponent</b> and its superclasses:
<b>Container</b>,
<b>Component</b>,
and <b>Object</b>.</font>
<p><b><font color="#FF0000">Default appearance and behavior</font></b>
<p><font color="#000000">I explained that because most Swing components
extend <b>JComponent</b> either directly or indirectly, the properties,
events, and methods defined in these classes provide the default appearance
and behavior of most of the Swing components.</font>
<p><b><font color="#FF0000">Understanding common properties, events, and
methods</font></b>
<p><font color="#000000">I also explained that the next few lessons would
concentrate on an understanding of these common properties, events, and
methods in order to provide an overall knowledge of the appearance and
behavior of Swing components.</font>
<p><b><font color="#FF0000">Will discuss specialized appearance and behavior
later</font></b>
<p><font color="#000000">After I have illustrated this common appearance
and behavior of Swing components, I will embark on a study of the additional
specialized appearance and behavior associated with individual components.</font>
<p><b><font color="#FF0000">What's in this lesson?</font></b>
<p><font color="#000000">This lesson emphasizes an understanding of the
<i>opaque</i>
and <i>preferredSize</i> properties that are common to most Swing components.</font>
<p><font color="#000000">I will also illustrate several other properties,
including the following:</font>
<ul>
<li>
<font color="#000000">layout</font></li>

<li>
<font color="#000000">background</font></li>

<li>
<font color="#000000">foreground</font></li>

<li>
<font color="#000000">title</font></li>

<li>
<font color="#000000">size</font></li>

<li>
<font color="#000000">visible</font></li>

<li>
<font color="#000000">text</font></li>

<li>
<font color="#000000">contentPane</font></li>

<li>
<font color="#000000">source</font></li>
</ul>
<i>(Note that not all of these properties are defined in <b>JComponent</b>
and its superclasses.&nbsp; Some are specialized properties of specific
Swing components.)</i>
<p><b><font color="#FF0000">All but <i>contentPane</i> should be familiar</font></b>
<p>Except for <i>contentPane</i>, none of these properties are peculiar
to Swing.&nbsp; They are also commonly used with the AWT.
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
The name of the sample program is <b>Swing12</b>.&nbsp; As mentioned above,
this program is designed specifically to illustrate the use and behavior
of the <i>opaque</i> and <i>preferredSize</i> properties.
<p><b><font color="#FF0000">A screen shot</font></b>
<p>A screen shot of the GUI that is produced when the program is started
is shown below.
<p><img SRC="Java1015A.gif" height=101 width=330>
<p>When the program is started, a <b>JFrame</b> object, about 330 pixels
wide, appears on the screen.&nbsp; It contains a <b>JButton</b> component
and a <b>JLabel</b> component in a container being managed by a <b>FlowLayout</b>
manager.
<p><b><font color="#FF0000">FlowLayout manager</font></b>
<p>One of the characteristics of the <b>FlowLayout</b> manager is that
it attempts to honor the <i>preferredSize</i> of each component in both
the horizontal and vertical dimensions.
<p>Other layout managers don't necessarily honor the <i>preferredSize</i>
in either or both dimensions.&nbsp; Some honor one dimension, others honor
the other dimension, and some (such as <b>GridLayout</b>) don't honor either
dimension.
<p>I discuss the behavior of several layout managers in some of my other
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a><font color="#000000">.</font>
<p><b><font color="#FF0000">Initial states of the label and button</font></b>
<p>Initially at startup, the label contains blue text on an opaque yellow
background as shown in the above screen shot.
<p>The text showing initially on the face of the button reads "Make Label
Transparent."
<p><b><font color="#FF0000">Click the button</font></b>
<p>When the button is clicked, the appearance of the GUI changes to that
shown below.
<p><img SRC="Java1015B.gif" height=101 width=330>
<p><font color="#000000">Basically, two things happen when the button is
clicked.</font>
<ol>
<li>
<font color="#000000">The background of the label becomes transparent,
allowing the gray background of the <b>JFrame</b> object to show through.&nbsp;
This is accomplished by setting the <i>opaque</i> property of the label
to false.&nbsp; As a result, the yellow background disappears.</font></li>

<li>
<font color="#000000">The text on the face of the button changes to a shorter
text string ("Make Label Opaque").&nbsp; However, the size of the button
doesn't change.&nbsp; The <i>preferredSize</i> property of the button is
used to cause the size of the button to remain constant regardless of the
length of its text string.</font></li>
</ol>
<b><font color="#FF0000">Click the button again</font></b>
<p><font color="#000000">If the button is clicked again, the appearance
of the GUI reverts back to its original state.</font>
<p><font color="#000000">Successively clicking the button causes the GUI
to toggle between these two states.</font>
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will discuss the program in fragments.&nbsp; A complete listing of the
program is provided in <a href="Java1015-fig09.htm">Figure 9</a> near the
end of the lesson.
<p><b><font color="#FF0000">The controlling class</font></b>
<p><a href="Java1015-fig01.htm">Figure 1</a> shows the beginning of the
controlling class, along with the declaration and population of two reference
variables, one for the button and one for the label.
<p><b><font color="#FF0000">Extends JFrame</font></b>
<p>Note that the controlling class extends <b>JFrame</b>.&nbsp; Therefore,
an object of the controlling class is a GUI that can be displayed directly
on the desktop.
<p><b><font color="#FF0000">The main() method</font></b>
<p><font color="#000000"><a href="Java1015-fig02.htm">Figure 2</a> shows
the <b>main()</b> method for the application.&nbsp; This method simply
instantiates an object of the controlling class, causing a <b>JFrame</b>
object to appear on the screen.</font>
<p><b><font color="#FF0000">The constructor</font></b>
<p><font color="#000000"><a href="Java1015-fig03.htm">Figure 3</a> shows
the beginning of the constructor.&nbsp; This fragment sets the values of
three properties.</font>
<p><b><font color="#FF0000">The layout property</font></b>
<p><font color="#000000">First, the code in <a href="Java1015-fig03.htm">Figure
3</a> sets the <i>layout</i> property of the <i>content pane</i> of the
<b>JFrame</b>
object to
<b>FlowLayout</b>.</font>
<p><font color="#000000">This layout manager places components in the container
from left to right, top to bottom, while attempting to honor the <i>preferredSize</i>
value of each component.</font>
<p><b><font color="#FF0000">The default preferred size</font></b>
<p><font color="#000000">Each component has a default preferred size, and
it differs from one type of component to another.</font>
<p><font color="#000000">The default preferred size for both a <b>JButton</b>
and a <b>JLabel</b> is a size that reasonably accommodates the text showing
on the button or on the label.</font>
<p><b><font color="#FF0000">The <i>preferredSize</i> property is easy to
control in Swing</font></b>
<p><font color="#000000">Unlike the AWT, it is possible to modify the <i>preferredSize</i>
property of a Swing component without a requirement to extend the component.</font>
<p><b><font color="#FF0000">Overriding getPreferredSize() in the AWT</font></b>
<p><font color="#000000">With the AWT, the only way that I have found to
control the preferred size of a component is to extend the component and
override the <b>getPreferredSize()</b> method.</font>
<p><font color="#000000">By doing that, it is possible to return a value
for preferred size that is different from the default value.</font>
<p><b><font color="#FF0000">Swing has a <i>preferredSize</i> property</font></b>
<p><font color="#000000">Swing has a <i>setter</i> method for the preferred
size property that makes it easy to change the value of the property.</font>
<p><b><font color="#FF0000">Changing value may not result in a change in
size</font></b>
<p><font color="#000000">Be aware, however, that many layout managers will
ignore the value of the <i>preferredSize</i> property when placing the
component in a container.</font>
<p><b><font color="#FF0000">Transparency is controlled by the <i>opaque</i>
property</font></b>
<p><font color="#000000">The transparency, or lack thereof, of the background
of a Swing component is controlled by the value of the <i>opaque</i> property.</font>
<p><font color="#000000">If this property has a value of true, the background
is opaque (not transparent).</font>
<p><font color="#000000">If the value of the property is false, the background
is transparent, allowing whatever is behind the component to show through.</font>
<p><b><font color="#FF0000">Default values for <i>opaque</i> property</font></b>
<p><font color="#000000">The default value of the <i>opaque</i> property
of a Swing <b>JLabel</b> is false.</font>
<p><font color="#000000">By default, the background of the label is transparent
allowing whatever is behind the <b>JLabel</b> object to show through.</font>
<p><b><font color="#FF0000">Text in the label is opaque</font></b>
<p><font color="#000000">Only the text characters are opaque by default.</font>
<p><font color="#000000">If the <i>opaque</i> property is set to true,
the default background color of the <b>JLabel</b> appears to be gray, so
it still looks to be transparent against a gray container background.</font>
<p><font color="#FF0000"><b>Default transparency for a</b> <b>JButton</b></font>
<p><font color="#000000">On the other hand, the default value of the <i>opaque</i>
property of a Swing <b>JButton</b> is true.</font>
<p><font color="#000000">When instantiated, the default color of the <b>JButton</b>
is gray.</font>
<p><b><font color="#FF0000">JButton can become transparent</font></b>
<p><font color="#000000">If the value of the <i>opaque</i> property of
a
<b>JButton</b> is set to false, the background becomes transparent allowing
whatever is behind the button to show through.&nbsp; Only the text and
the border of the button remain opaque.</font>
<p><b><font color="#FF0000">Make it happen</font></b>
<p><font color="#000000"><a href="Java1015-fig04.htm">Figure 4</a> shows
the statement that overrides the default and causes the background of the
label to be opaque when the program starts running.</font>
<p><b><font color="#FF0000">Typical JavaBeans <i>setter</i> method</font></b>
<p><font color="#000000">This is a typical <i>setter</i> method for a JavaBean
property.</font>
<p><b><font color="#FF0000">The name of the property</font></b>
<p><font color="#000000">Note that the name of the property in this case
is
<i>opaque</i> with a lower-case "o".&nbsp; (I explained the property
naming conventions of JavaBean properties in an earlier lesson.)</font>
<p><b><font color="#FF0000">Some ordinary code</font></b>
<p><font color="#000000">The code in <a href="Java1015-fig05.htm">Figure
5</a> is rather ordinary,</font>
<ul>
<li>
<font color="#000000">Adding the button and the label to the <i>contentPane</i>
of the <b>JFrame</b> object, and</font></li>

<li>
<font color="#000000">Setting values for the properties named <i>title</i>,
<i>size</i>,
and <i>visible</i>.</font></li>
</ul>
<b><font color="#FF0000">What is getContentPane()?</font></b>
<p><font color="#000000">I explained the requirement to use <b>getContentPane()</b>
in an earlier lesson on Swing.&nbsp; You must invoke this method whenever
you need to add a component to a <b>JFrame</b>, or whenever you need to
set the layout manager for a <b>JFrame</b>.</font>
<p><b><font color="#FF0000">The preferredSize setter method</font></b>
<p><font color="#000000">As I mentioned earlier, unlike the AWT, Swing
makes it possible to control the value of the <i>preferredSize</i> property
using an ordinary <i>setter</i> method, as shown in <a href="Java1015-fig06.htm">Figure
6</a>.</font>
<p><b><font color="#FF0000">I planned to change the <i>text</i> property
value</font></b>
<p><font color="#000000">In this case, I planned to change the value of
the <i>text</i> property for the button at runtime. (The <i>text </i>property
controls the string value displayed on the face of the <b>JButton</b>).</font>
<p><b><font color="#FF0000">Didn't want the size of the button to change</font></b>
<p><font color="#000000">I wanted to make certain that the size of the
button did not change when I changed the value of the <i>text</i> property.</font>
<p><font color="#000000">I knew that the initial value of the <i>text</i>
property (the text showing on the button at startup) required more physical
space for display than would be required for the display of later values
of the <i>text</i> property.</font>
<p><b><font color="#FF0000">Used startup button size as preferred size</font></b>
<p><font color="#000000">Therefore, I used the <i>getter</i> method shown
in <a href="Java1015-fig06.htm">Figure 6</a> to get the current value of
the <i>size</i> property of the button after the GUI first became visible.</font>
<p><font color="#000000">I used that value to set the <i>preferredSize</i>
property for the button, causing the actual size of the button to remain
constant from that point forward, even though the value of the <i>text</i>
property changed to a value requiring less physical space for display.</font>
<p><b><font color="#FF0000">Order of these operations is important</font></b>
<p><font color="#000000">The order of operations was important here.&nbsp;
It was necessary to set the <i>visible</i> property of the <b>JFrame</b>
object to true before getting the value of the <i>size</i> property of
the button.&nbsp; Until that time, the <i>getter</i> method for the <i>size</i>
property of the button returned zero for both width and height.&nbsp; Apparently
the size property is not set until the GUI is actually rendered on the
screen.</font>
<p><b><font color="#FF0000">An anonymous inner class action listener</font></b>
<p><font color="#000000">This program uses an anonymous inner class, containing
an <b>if/else</b> statement, as an action listener registered on the button.&nbsp;
This action listener toggles the GUI between its two states.</font>
<p><b><font color="#FF0000">The <i>if</i> clause</font></b>
<p><font color="#000000">The first half of that action listener, including
the <b>if</b> clause, is shown in <a href="Java1015-fig07.htm">Figure 7</a>.</font>
<p><font color="#000000">The <b>else</b> clause is shown later in <a href="Java1015-fig08.htm">Figure
8</a>.</font>
<p><b><font color="#FF0000">Use a getter method of type <i>is...</i></font></b>
<p><font color="#000000">Now please refer back to the <b>if</b> clause
of <a href="Java1015-fig07.htm">Figure 7</a>.&nbsp; The code in the <b>actionPerformed()</b>
method of Figure 7 uses <b>label.isOpaque()</b> as the conditional expression
in the <b>if</b> statement.&nbsp; This is an optional form of a <i>getter</i>
method that can be used for boolean properties.</font>
<p><b><font color="#FF0000">Toggle the value of the <i>opaque</i> property</font></b>
<p><font color="#000000">If the conditional expression returns true, the
value of the <i>opaque</i> property of the label is set to <b>false</b>,
causing the background of the label to become transparent (not opaque).</font>
<p><b><font color="#FF0000">Request a repaint for the label</font></b>
<p><font color="#000000">The <b>repaint()</b> method is used to send a
message to the operating system asking it to render the new transparent
representation of the area of the screen occupied by the label.</font>
<p><b><font color="#FF0000">Get a reference to the button</font></b>
<p><font color="#000000">Then the <b>getSource()</b> method of the incoming
<b>ActionEvent</b>
object is used to get a reference to the <b>JButton</b> component that
fired the event.</font>
<p><b><font color="#FF0000">Modify the value of the <i>text</i> property</font></b>
<p><font color="#000000">This reference is used to modify the value of
the <i>text</i> property of the button.</font>
<p><b><font color="#FF0000">Downcast is necessary</font></b>
<p><font color="#000000">Note that it is necessary to downcast the reference
to the source of the event before accessing the <i>text</i> property.&nbsp;
The <b>getSource()</b> method returns a reference to the source of the
event as type <b>Object</b>.</font>
<p><b><font color="#FF0000">Text on button is automatically repainted</font></b>
<p><font color="#000000">It is interesting to note that the text on the
face of the button is automatically repainted without the necessity of
a call to <b>repaint()</b>.&nbsp; However, it is necessary to call <b>repaint()</b>
to cause the background of the label to be repainted.</font>
<p><font color="#000000">I'm sure that there is a rule for this somewhere,
but I haven't found it yet.</font>
<p><b><font color="#FF0000">The else clause</font></b>
<p><font color="#000000"><a href="Java1015-fig08.htm">Figure 8</a> shows
the <b>else</b> clause of the <b>if/else</b> statement.&nbsp; This clause
is executed if the value of the <i>opaque</i> property is false (meaning
that the background of the label is transparent).</font>
<p><b><font color="#FF0000">Reverse the previous action</font></b>
<p><font color="#000000">The code in <a href="Java1015-fig08.htm">Figure
8</a> reverses the action of the
<b>if</b> clause in Figure 7, returning
the values of the <i>opaque </i>property of the label and the <i>text</i>
property of the button to their original values.</font>
<p><b><font color="#FF0000">Toggle each time the button is clicked</font></b>
<p><font color="#000000">The effect is to cause the GUI to toggle back
and forth between two states each time the button is clicked.</font>
<p><b><font color="#FF0000">The remaining code</font></b>
<p><font color="#000000">The remaining code, which you can view in <a href="Java1015-fig09.htm">Figure
9</a>, is uninteresting.&nbsp; It consists simply of an anonymous inner
class used to terminate the program when the user closes the <b>JFrame</b>
object.</font>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<b><font color="#FF0000">The purpose</font></b>
<p>The primary purpose of this lesson was to illustrate the use of the
<i>opaque</i>
and <i>preferredSize</i> properties of Swing components.
<p><b><font color="#FF0000">Using the <i>opaque </i>property</font></b>
<p>I have illustrated how to use the <i>opaque</i> property to control
the background transparency of a <b>JLabel</b> object.
<p>The approach used here should work with any Swing component that supports
transparency.
<p><b><font color="#FF0000">Using the <i>preferredSize</i> property</font></b>
<p>I have also illustrated how to use the <i>preferredSize</i> property
to control the size of a <b>JButton</b> object.
<p>This approach should also work with any Swing component that supports
the <i>preferredSize</i> property.
<p><b><font color="#FF0000">Layout manager may not cooperate</font></b>
<p>Note, however, that even though a Swing component may support the <i>preferredSize</i>
property, the <i>layout</i> property of the container that contains that
component may specify a layout manager that won't honor the preferred size
even if the component supports it.
<p>For example, the <b>GridLayout</b> manager doesn't support the preferred
size in either dimension.&nbsp; Rather, all components in a <b>GridLayout</b>
are rendered the same size regardless of their preferred size.
<p><b><font color="#FF0000">Several other properties were illustrated</font></b>
<p>In the process of illustrating the use of the <i>opaque</i> and
<i>preferredSize</i>
properties, I have illustrated several other properties as well.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
<font color="#000000"><a href="Java1015-fig09.htm">Figure 9</a></font>
contains a complete listing of the program discussed in this lesson.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
