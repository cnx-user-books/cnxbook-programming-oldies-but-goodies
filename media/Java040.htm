<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Exceptions in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Access Control<!--endTitle--></H2>
<P>Java Programming, Lecture Notes # 40, Revised 10/03/99. </P>
<P><!-toc file=Java040a.htm words=Preface-><A HREF="#Preface">Preface</A><BR>
<!--endtoc--><!-toc file=Java040b.htm words=Introduction-><A HREF="#Introduction">Introduction</A><BR>
<!--endtoc--><!-toc file=Java040c.htm words=Access Control in Java-><A HREF="#AccessControlinJava">Access Control in Java</A><BR>
<!--endtoc--><!-toc file=Java040d.htm words=Access Control in C++-><A HREF="#AccessControlinCpp">Access Control in C++</A><BR>
<!--endtoc--><!-toc file=Java040e.htm words=Review-><A HREF="#Review">Review</A><!--endtoc--> </P>
<P><!-next=Java040a.htm><!-first=Java040.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Introductory Java Programming</B></U> classes at ACC are responsible for knowing and understanding all of the material in this lesson (except that they are not responsible for detailed information that is specific to C++). </P>
<P>The detailed material on C++ is provided as supplementary material for the benefit of persons already familiar with C++ who are making the transition into Java. </P>
<P>The material in this lesson is very important. However, there is simply too much material to be covered in <BR>
detail during lecture periods. Therefore, students in Prof. Baldwin's Introductory Java Programming <BR>
classes at ACC will be responsible for studying this material on their own, and bringing any questions <BR>
regarding the material to class for discussion.</P>
<P><!-prev=Java040.htm-><!-next=Java040b.htm><!-first=Java040.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Introduction"></A>Introduction</H2>
</FONT><P>Both Java and C++ support the notion of <U>controlling access</U> to the <U>individual members</U> of a class (either variables or methods). </P>
<P>Java also supports the notion of controlling <U>access to the class</U> itself. </P>
<P>Also, both languages support the notion of inheritance. With inheritance, it is possible to <U>create a new class</U> by inheriting the attributes of an existing class. </P>
<P>The class being inherited from is often called the <I>base</I> class or the <I>superclass</I>. The class which is inherited is often called the <I>derived</I> class or the <I>subclass</I>. </P>
<P>When an object is instantiated from a subclass, that object contains all the members of the new class, plus all the members of the inherited class, plus all the members of its ancestors. </P>
<P>However, access to the members of that object may be impacted by the access control modifiers applied to the members of the superclass. </P>
<P><!-prev=Java040a.htm-><!-next=Java040c.htm><!-first=Java040.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="AccessControlinJava"></A>Access Control in Java</H2>
</FONT><BLOCKQUOTE><A HREF="#Protected">Protected</A><BR>
<A HREF="#Package">Package</A><BR>
<A HREF="#Private">Private</A><BR>
<A HREF="#Public">Public</A></BLOCKQUOTE>
<P>Access control in Java is difficult for some students to understand. It is also difficult to explain in ways that people can understand. I own many good books on Java programming, and none of them explain access control to my satisfaction. </P>
<P>Don't depend entirely on this lesson, or any other single source for your understanding of access control. Because of its complexity, I recommend that you go to a bookstore and read what a large number of Java books have to say about this topic. This will give you an understanding of access control from the viewpoint of many different authors. In particular, I recommend that you take a look at the "rules of thumb" given by David Flanagan in his excellent book, <U>Java in a Nutshell</U>.</P>
<P>This lesson is my attempt to explain access control. I am hopeful that you will understand it when you finish this lesson. </P>
<P>Because of the complexity of access control, it is also very easy to make technical errors when producing an explanatory document like this. I have been as careful as I know how to avoid technical errors in my explanation of access control, but some errors may have crept in. </P>
<P>I will welcome email messages from readers who find and identify such errors. If you find an error, please describe it and provide sufficient technical backup that I can evaluate your description. </P>
<P>Access control is implemented in Java by applying access modifiers to individual members in the class definition. Java implements four different access modifiers that may be applied to any individual member of a class: </P>

<UL>
<LI>public </LI>
<LI>private </LI>
<LI>protected </LI>
<LI>package (none) </LI></UL>

<P>Let me explain the last modifier in the list a little further. If no modifier is applied to a member of a class, then that member has what I will refer to as <B>package</B> access. </P>
<P>The first two, <B>public</B> and <B>private</B> are pretty simple and don't lead to a lot of complexity. The complexity arises with <B>protected</B> and <B>package</B>, and particularly with respect to the interaction of these two modifiers with the inheritance of classes in the same or different packages. </P>
<P>In Java, special access privileges are afforded to members of other objects which are instantiated from classes contained in the same <I>package </I>and this occurs by way of the <B>package</B> access modifier. </P>
<P>In addition, special access privileges are afforded to certain members of superclasses and this occurs by way of the <B>protected</B> modifier. </P>
<P>I am going to start with some statements regarding access control that I believe to be true although in some cases, they don't present the complete picture. Hopefully the tables that follow will provide the complete picture. </P>
<P>In the following statements, when I speak of the <I>collective</I> superclass, I am speaking not only of the immediate superclass, but of all of the classes in the inheritance hierarchy from that class up to and including the class named <B>Object</B>. </P>
<P>I didn't include any sample programs in this lesson. I wrote and tested literally dozens of short sample programs to confirm what I thought to be true about access control. However, none of them were sufficiently complicated to merit being included in the lesson and if I had included them all, they would have consumed many pages of space. </P>
<P>At this point in the course, you should have no difficulty writing your own programs to test any given hypothesis about access control. </P>
<P>I'm going to begin with a couple of statements about access control at he <B>class</B> level. This is a fairly simple topic so I won't have any more to say about it following these statements. </P>

<UL>
<B><LI>Class </B>Access: Any code in any object can access and instantiate an object of any class in any <I>package</I> that has a <B>public</B> modifier (unless it also has an <B>abstract</B> modifier, in which case it can't be instantiated under any circumstance). There is no such thing as a <B>private</B> or <B>protected</B> modifier for a class, only <B>public, abstract, </B>and<B> final</B>. The <B>abstract</B> and <B>final</B> modifiers are mutually exclusive. </LI>
<B><LI>Class </B>Access: Only code in the same <I>package</I> can access and instantiate an object of a class that does not have a <B>public</B> modifier (if the class has an <B>abstract</B> modifier, it can't be instantiated). </LI></UL>

<P>Now I will present some statements that bear on access control of individual members of a class. Unfortunately, they tend to read like a contract, but I don't know how to avoid that situation.</P>
<B><P>Same Class</B> Member Access:</P>

<UL>
<LI>Code in a method that is a member of a class can access any member of any object of that same class (within its scope) regardless of the access modifier applied to that member except that, if a <B>private </B>member is inherited from a superclass, it is not accessible. Also <B>package </B>members inherited from a superclass in a different package are not accessible. </LI>
<LI>Access control is imposed at the class level and not at the object level. This is an important aspect of access control that is not often discussed in the books. </LI></UL>

<B><P>Subclass</B> access:</P>

<UL>
<LI>From the viewpoint of an object of a subclass attempting to access members of the superclass that is <U>in the same package</U>, by way of itself (an object of the subclass effectively accessing by way of the <B>this</B> reference), <B>public</B>, <B>protected</B>, and <B>package </B>members are accessible. <B>private </B>members are not accessible. </LI>
<LI>From the viewpoint of an object of a subclass attempting to access members of the superclass that is <U>not in the same package</U>, by way of itself, <B>public </B>and <B>protected </B>members are accessible. <B>private </B>and <B>package </B>members are not accessible. </LI></UL>

<B><P>private </B>Member Access:</P>

<UL>
<U><LI>Only</U> the code in member methods of a class have access to <B>private</B> members of an object of that same class, and as indicated above, that code has access to the <B>private</B> members of <U>any object of that class</U> within its scope. </LI></UL>

<B><P>public </B>Member Access:</P>

<UL>
<LI>Any code in any object can access all <B>public</B> members of any other object within its scope. In other words, if it can access the object, it can access all of its <B>public</B> members. </LI></UL>

<B><P>protected</B> Member Access:</P>

<UL>
<LI>Any code in an object that is a subclass of another class has access to any <B>protected </B>members of the (collective) superclass, but, and <U>this is very important</U>, <B><I>that universal access is available only through an object of the subclass</B></I> and <U>may not</U> be available by accessing an object of the superclass (see below). </LI>
<LI>Any code in an object that is a subclass of another class has access to any <B>protected </B>members of an <U>object of the superclass</U> if the superclass is in the same <I>package</I> as the subclass (except that <B>protected </B>members inherited into the superclass may not be accessible depending on additional package considerations). </LI>
<LI>Code in an object that is a subclass of another class does <U>not</U> have access to <B>protected </B>members of an object of the superclass if the superclass is <U>not</U> in the same <I>package</I> as the subclass. </LI>
<LI>Code in an object of a class has access to the <B>protected</B> members of an object of a different class if that object is in the same <I>package</I>. This includes <B>protected </B>members that were inherited into the second class, provided they were inherited from a superclass in the same package. </LI></UL>

<B><P>package</B> Member Access:</P>

<UL>
<B><LI>package </B>Member Access: Any code in an object has access to any member of any object instantiated from any class in the same <I>package</I> if that member has the <B>package </B>access modifier (no modifier), except that <B>package</B> members that were inherited into the object may not be accessible depending on further package considerations. </LI></UL>

<P>As mentioned earlier, <B>public</B> and <B>private</B> access control isn't too difficult to understand. <B>package</B> access can become complicated when you overlay it with package considerations involving inheritance. </P>
<P>Most of the confusion revolves around <B>protected</B> access control, and this confusion derives from the fact that the behavior differs depending on whether you are discussing access of <B>protected </B>members of a superclass </P>

<UL>
<LI>by way of an object of the <U>subclass</U>, or </LI>
<LI>by way of an object of the <U>superclass</U>. </LI></UL>

<P>Most practical programming scenarios probably involve the first of the two situations listed above. If you can remember the rules governing that situation, you will probably have most of your bases covered. A large portion of the remainder of this lesson is dedicated to explaining and clarifying the complex rules governing the second situation listed above in case you encounter that situation.</P>
<P>Most of the books attempt to encapsulate this complexity into a two-dimensional chart which is about four or five cells on each side. I have yet to see such a two-dimensional chart in any book that does justice to the topic of access control of <B>protected</B> members, and to some extent <B>package</B> members as well.. </P>
<P>In fact, most of the charts in most of the books tend to lead to erroneous conclusions regarding access control of <B>protected</B> and <B>package</B> members because they don't take <I>inherited</I> members into account in a satisfactory manner. And you don't need charts to describe <B>public</B> and <B>private</B>, so most of the charts that I have seen are not very useful. (Hopefully mine will be more useful, but that will be for you to decide.) </P>
<P>The situation can be represented reasonably well by a <U>three-dimensional chart</U>, but three-dimensional charts are difficult to display on a flat surface. In this lesson, I have essentially created a three-dimensional chart (a cube with four layers) and have presented the four individual layers for your consideration. My charts don't include all possible situations, but I believe you will find that they do cover most of the situations that you will encounter. </P>
<P>To understand the charts, assume that there are two objects named A and B. Code in object A is attempting to access members of object B. </P>
<P>The members of object B can have <B>public, private, protected, </B>or <B>package</B> access. The members of object B can either be defined in the class definition from which object B is instantiated, or can be inherited from a superclass of that class. (It is this latter possibility that leads to much of the complexity.) </P>
<P>I have attempted to identify most of the interesting relationships between object A and object B, and describe the accessibility of the members of object B by the code in object A. </P>
<P>There are several situations that we must consider, each of which has two states. The situations are: </P>
<P>Object B <U>may or may not</U> be the <U>same object</U> as object A. If so, object A is attempting to access its own members which may have originated in its own class definition, or may have originated in a superclass of that class. </P>
<P>Object B may or may not be of the same class as Object A. (By the way, when I say that object B is <I>"of the same class"</I> what I really mean is <I>"was instantiated from the same class." </I>I use the shorter form for brevity.) </P>
<P>Object B may or may not be of a class that is in the same package as object A. </P>
<P>The class of object B may or may not be a superclass of object A. </P>
<P>The class member of interest may or may not be inherited into the object from a superclass. </P>
<P>If the member was inherited into the object, it is a member of a class that may or may not be in the same package as the object that it was inherited into. </P>
<P>If all possible combinations of these various situations were possible, this would give us very large number of different scenarios that we would need to consider. Fortunately, many of the possible combinations are not possible. For example, if object B is of the same class as object A, then it cannot possibly be of a superclass of object A, because a class cannot extend itself. </P>
<P>Therefore, after we eliminate impossible combinations of the possible situations, we are left with a manageable number of scenarios to consider. We must consider each scenario for each of the four access control modifiers: <B>public, private, protected, </B>and <B>package.</B> </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Protected"></A>Protected</H3>
</FONT><P>As mentioned earlier, the <B>protected</B> modifier probably leads to the most confusion, so I will begin with it. I will present four tables with the same format, one table for each of the access control modifiers. </P>
<P>The format of the table identifies the access control modifier applied to the class member of interest in the upper left-hand corner. </P>
<P>For each row in the table, the first column indicates whether or not a class member with the specified access control modifier in object B is accessible to code in object A for the set of conditions listed in the cells to the right of the first column. </P>
<P>In addition, notes are referenced in the table and presented following the table that attempt to explain each answer. </P>
<P>While all of the rows contain important information, you should pay particular attention to the last row. This is the situation where object B and object A are the same object as described earlier. </P>
<P>The last row describes the situation where code in the methods of an object is attempting to access the other members of that same object. This is an especially important case for <B>protected</B> members, because this is how access to certain members is passed down the inheritance hierarchy without opening access to those members up to the rest of the world. </P>
<P>All of the other rows represent the case where code in the methods of one object is attempting to access the members of a different object. </P>
<P>Remember, this table represents one layer of a cube that has four layers. The other three layers will be presented later in this lesson. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Member of object B is <B>protected</B></TD>
<TD VALIGN="MIDDLE" COLSPAN=5 BGCOLOR="#00ffff">
<P ALIGN="CENTER">Object B in relation to object A:</TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is member of object B Accessible by code in object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B the same object as object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B of the same class as object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is the class of object B in the same package as the class of object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B of a class that is a superclass of the class of Object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is the member inherited, and if so, from what package? </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No - See note 1 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care</TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No - See note 1 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care</TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes - See note 2</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes - See note 2 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes, from same package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - See note 2 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes, from different package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes - See note 3</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes - See note 3 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes, from same package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - See note 3 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes, from different package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes - See note 4</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No - Can't Be</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes - See note 4 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - Can't Be </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes, from same package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes - See note 4 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - Can't Be </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes, from different package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - See note 5</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - Must be</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - Must be</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">No - Can't Be</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Don't care</B></I> </TD>
</TR>
</TABLE>

<P>Note 1 - <B>protected</B> members of object B are not accessible by code in object A if object B is in a different package regardless of whether or not object B is of a class that is a superclass of object A. </P>
<P>Note 2 - <B>protected</B> members of object B are accessible by code in object A if the class of object B is in the same package as object A. Note however, that <B>package</B> members of object B that are inherited from a superclass are accessible by object A only if the superclass is in the same package as the class of object A. </P>
<P>Note 3 - When the class of object B is a superclass of the class of object A, <B>protected</B> members of object B are accessible by code in object A if the class of object B is in the same package as object A. Note however, that <B>protected</B> members of object B that are inherited from a superclass are accessible by object A only if the superclass is in the same package as the class of object A. </P>
<P>Note 4 - When object A and object B are of the same class, <B>protected </B>members of object B are accessible by code in object A. Note that <B>protected </B>members of object B that are inherited from a superclass are accessible by object A <U>even if</U> the superclass is <U>not in the same package</U> as the class of object A. </P>
<P>Note 5: When object A and object B are the same object, all <B>protected </B>members of that object are accessible within the code of the object whether those <B>protected</B> members are defined in the class of the object, or in a superclass of the object irrespective of the package in which the superclass resides. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Package"></A>Package</H3>
</FONT><P>The next most complicated modifier is <B>package</B>. At the surface, this sounds like an easy modifier to describe and to understand, and it is until you start taking into account that <B>package</B> members can be inherited into an object from a superclass that may, or may not be in the same package. </P>
<P>Therefore, you can't simply say that code in an object has access to the members of all other objects instantiated from classes in the same package. Whether or not access is granted for a particular <B>package</B> member depends on how the member came to be part of the object in the first place: </P>

<UL>
<LI>by definition in that class, or </LI>
<LI>by inheritance from a superclass that is either</LI></UL>
<DIR>
<DIR>

<P>part of the same package, or</P>
<P>not part of the same package.</P></DIR>
</DIR>

<P>Again, in this case, pay particular attention to the last three rows. These three rows represent the situation where object A and object B are the same object. These three rows address the possibility of members with <B>package</B> access being contained in the object: </P>

<UL>
<LI>without inheritance, </LI>
<LI>as inherited from a superclass in the same package, and </LI>
<LI>as inherited from a superclass in a different package. </LI></UL>

<P>As you will see, the accessibility of the <B>package</B> members within the object is not the same across these three cases. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Member of object B is <B>package</B></TD>
<TD VALIGN="MIDDLE" COLSPAN=5 BGCOLOR="#00ffff">
<P ALIGN="CENTER">Object B in relation to object A:</TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is member of object B Accessible by code in object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B the same object as object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B of the same class as object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is the class of object B in the same package as the class of object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B of a class that is a superclass of the class of Object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is the member inherited, and if so, from what package? </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No - See note 1</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Don't care </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No - See note 1</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Don't care </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes - See note 2</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes - See note 2 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes from same package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - See note 2 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes from different package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes - See note 3</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes - See note 3 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes from same package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - See note 3 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes from different package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes - See note 4</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No - Can't Be</TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes - See note 4 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - Can't Be </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes from same package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - See note 4 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>No - Can't Be </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Yes from different package </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - See note 5</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - Must be</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - Must be</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">No - Can't Be</B></I></TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>No</B></I> </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes - See note 5</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes - Must be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes - Must be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>No - Can't Be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes from same package</B></I> </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>No - See note 5</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes - Must be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes - Must be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>No - Can't Be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes from different package</B></I> </TD>
</TR>
</TABLE>

<P>Note 1 - <B>package</B> members of object B are not accessible by code in object A if object B is in a different package regardless of whether or not object B is of a class that is a superclass of object A. </P>
<P>Note 2 - <B>package</B> members of object B are accessible by code in object A if the class of object B is in the same package as object A. Note however, that <B>package</B> members of object B that are inherited from a superclass are accessible by object A only if the superclass is in the same package as the class of object A. </P>
<P>Note 3 - When the class of object B is a superclass of the class of object A, <B>package</B> members of object B are accessible by code in object A if the class of object B is in the same package as the class of object A. Note however that <B>package</B> members of object B that are inherited from a superclass are accessible by object A only if the superclass is in the same package as the class of object A. </P>
<P>Note 4 - When object A and object B are of the same class, <B>package</B> members of object B are accessible by code in object A. Note however that <B>package</B> members of object B that are inherited from a superclass are accessible by object A only if the superclass is in the same package as the class of object A. </P>
<P>Note 5 - When object A and object B are the same object, <B>package</B> members of that object are accessible by the code in that object so long as they are defined in the class of the object, or are inherited from a superclass that is in the same package as the class of the object. However, <B>package</B> members that are defined in a superclass in a different package are not accessible. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Private"></A>Private</H3>
</FONT><P>As mentioned earlier, <B>private</B> access control is pretty easy to understand. Because of its relative simplicity, it was possible for me to collapse the table into three rows that represent two different cases: in one case, object A and object B are not the same object, and in the other case, they are the same object. </P>
<P>The second case was subdivided into two sub-cases: one where the <B>private</B> member was not inherited, and the other case where it was inherited. As you will see, in one of these two latter cases, the <B>private</B> member is accessible and in the other case it is not accessible. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Member of object B is <B>private</B></TD>
<TD VALIGN="MIDDLE" COLSPAN=5 BGCOLOR="#00ffff">
<P ALIGN="CENTER">Object B in relation to object A:</TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is member of object B Accessible by code in object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B the same object as object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B of the same class as object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is the class of object B in the same package as the class of object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B of a class that is a superclass of the class of Object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is the member inherited, and if so, from what package? </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No - See note 1 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">No </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Don't care </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - See note 2</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - Must be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">Yes - Must be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P ALIGN="CENTER">No - Can't Be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>No</B></I> </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>No - See note 2</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes - Must be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes - Must be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>No - Can't Be</B></I> </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<B><I><P>Yes from same or different package</B></I> </TD>
</TR>
</TABLE>

<P>Note 1 - <B>private </B>members of object B are not accessible by code in object A unless object B is the same object as object A. <B>private</B> members can only be accessed by code defined in the same class where the <B>private</B> member is defined. </P>
<P>Note 2 - <B>private</B> members of object B are accessible by code in object A if object B and object A are the same object, except that <B>private</B> members of object B that are inherited from a superclass are not accessible by object A regardless of the package of the superclass. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Public"></A>Public</H3>
</FONT><P>The simplest case of all is the case of <B>public</B> members. In fact, this case is so simple that I was able to collapse the entire table into a single row with the answer being that: <B>yes</B>, the <B>public</B> member of object B is accessible by code in object A without regard to the answers to the questions posed by columns 2 through 6. </P>
<P>Be aware that if I were going to attempt to use these tables to construct the three-dimensional, four-layer cube that I talked about earlier, it would not be possible for me to do this collapsing. All four tables would have to have the same dimensions. That would simply mean that there would be cells in the table containing redundant information because the collapsing was accomplished by removing redundancies. </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Member of object B is <B>public</B></TD>
<TD VALIGN="MIDDLE" COLSPAN=5 BGCOLOR="#00ffff">
<P ALIGN="CENTER">Object B in relation to object A:</TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is member of object B Accessible by code in object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B the same object as object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B of the same class as object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is the class of object B in the same package as the class of object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is object B of a class that is a superclass of the class of Object A? </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Is the member inherited, and if so, from what package? </TD>
</TR>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Yes - See note 1 </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P ALIGN="CENTER">Don't care </TD>
<TD VALIGN="MIDDLE" BGCOLOR="#00ffff">
<P>Don't care </TD>
</TR>
</TABLE>

<P>Note 1 - <B>public </B>members of object B are accessible by code in object A or code in any other object that is within the scope of object B.</P>
<P><!-prev=Java040b.htm-><!-next=Java040d.htm><!-first=Java040.htm-></P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#00ff00">
<H2 ALIGN="CENTER"><A NAME="AccessControlinCpp"></A><FONT COLOR="#ff0000">Access Control in C++</FONT> </H2>
<P>In C++, any individual member of a class in can be designated as <I>private</I>, <I>public </I>or <I>protected</I>. A member which is designated <I>private </I>can be accessed only by other members of the same class. This is the most restrictive of the three designations. </P>
<P>Note that a <I>private</I> member of a base class cannot be accessed by members of an inherited class, regardless of the application of access control at the inheritance interface as discussed below. </P>
<P>A member which is designated as <I>public </I>can be accessed by any code within the scope of an object instantiated from that class. This is the least restrictive of the three designations. </P>
<P>The <I>protected</I> designation comes into play only when inheritance is involved. Stated simply, a member which is designated as <I>protected</I> appears to be <I>public </I>to members of classes which are derived from that class and appears to be <I>private </I>otherwise (subject to the application of additional access control at the inheritance interface as discussed below). </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Access_Control_at_the_Inheritance_Interf"></A>Access Control at the Inheritance Interface</FONT> </H3>
<P>The first dimension of access control in C++ which was discussed above has its analog in Java. </P>
<P>Access control in C++ has a second dimension for which there is no Java analog. </P>
<P>Whenever one class is inherited from another class, a second level of access control is specified <U>at the inheritance interface</U> using the same three keywords: <I>public</I>, <I>private</I>, and <I>protected</I>. </P>
<P>Let's begin this discussion with two statements: </P>

<UL>
<LI>The access control applied to a particular member of a class <U>cannot be made less restrictive</U> through the application of access control at the inheritance interface. </LI>
<LI>Application of access control at the inheritance interface <U>will elevate the access restriction</U> applied to an individual member to the level specified at the inheritance interface if it is not already at that level or above. </LI></UL>

<P>Applying <I>public</I> access control at the inheritance interface will have no effect on the accessibility of members of the original class in objects of the derived class. </P>
<P>Applying <I>private</I> access control at the inheritance interface will cause all members of the original class to become private members of the derived class. </P>
<P>Applying <I>protected</I> access control at the inheritance interface will cause all <I>public </I>members of the original class to become <I>protected </I>members of the new class, and will cause all <I>protected </I>members of the original class to become <I>protected </I>members of the new class. <I>Private </I>members of the original class remain <I>private </I>and cannot be accessed by members of the new class. </P>
<P>It is important to note that access control is applied <U>at the class level</U> and <U>not at the object level</U>. That is to say, the instance methods of any object of a particular class have direct access to the private members of any other object <U>of the same class</U>. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="Friend_Functions"></A>Friend Functions</FONT> </H3>
<P>There is one additional aspect of access control in C++ that must be noted. A function can be designated as a <I>friend</I> of a class, in which case it has direct access to all the private and protected members of that class. That function can be a member function (method) of another class, or can simply be a stand-alone function (stand-alone functions are not supported in Java). </P>
<P>Java has no direct analogy to <I>friend</I> functions in C++.</TD>
</TR>
</TABLE>

<P><!-prev=Java040c.htm-><!-next=Java040e.htm><!-first=Java040.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="Review"></A>Review</H2>
</FONT><P>Q - Three keywords are used in Java to specify access control. What are they? </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - The three keywords used to specify access control in Java are <B>public, private, </B>and <B>protected.</B></FONT> </P>
<P>Q - Java provides three different levels of access control- <B>public</B>, <B>private</B>, and <B>protected</B>: True or False? If false explain your answer. </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. Java has four levels of access control. Java implements three access specifiers using the keywords <I>public</I>, <I>private</I>, and <I>protected</I>, and in addition, implements a fourth level of access control if none of the other three are specified in the class definition. (This access control level is often referred to as <I>package,</I> <I>default</I> or <I>friendly</I>.) Prior to JDK 1.1, there were five levels of access control including <I>private protected</I>. However, <I>private protected is not supported by JDK 1.1.</I></FONT> </P>
<P>Q - In Java, special access privileges are afforded to other members of the same <I>package</I>: True or False? If false, explain your answer. </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - True. In Java, special access privileges are afforded to other members of the same <I>package.</I></FONT> </P>
<P>Q - As a guideline, you should use <B><I>private protected</B></I> access for methods and variables that aren't necessary to use the class, but that may be of interest to anyone extending the class. True or False? If false, explain your answer. </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - False. <B><I>private protected</B></I> access is no longer allowed in JDK 1.1.1.</FONT> </P>
<P><!-prev=Java040d.htm-><!-first=Java040.htm-></P>
<P>-end- </P>
<P><!--end--></P></BODY>
</HTML>
