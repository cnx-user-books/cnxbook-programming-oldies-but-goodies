<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2 align="center">Using the Java 2D ColorConvertOp and RescaleOp Filter Classes 
to Process Images</h2>
<i>Learn how to write programs that use the RescaleOp and ColorConvertOp classes 
of the Java 2D API to perform a variety of filtering operations on images.</i><p><b>Published:</b>&nbsp; 
September 11, 2007<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 462</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#Constructing_images">Constructing images</a></li>
	<li><a href="#The_framework_program_named_ImgMod05">The framework program 
	named ImgMod05</a></li>
	<li><a href="#RescaleOp_Examples">RescaleOp examples</a></li>
	<li><a href="#ColorConvertOp_Examples">ColorConvertOp example</a></li>
</ul>
	</li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a></li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listing</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p>In an earlier lesson titled &quot;A Framework for Experimenting with Java 2D 
Image-Processing Filters&quot; <i>(see <a href="#Resources">Resources</a>)</i>, 
I taught you how to write a framework program that makes it easy to use the 
image-filtering classes of the Java 2D API to process the pixels in an image and 
to display the processed image.</p>
<p>At the close of that lesson, I told you that future lessons would teach you 
how to use the following image-filtering classes from the Java 2D
<a name="FilterClassList">API</a>:</p>
<ul>
	<li><b>LookupOp</b></li>
	<li><b>AffineTransformOp</b> </li>
	<li><b>BandCombineOp</b> </li>
	<li><b>ConvolveOp</b> </li>
	<li><b>RescaleOp</b> </li>
	<li><b>ColorConvertOp</b> </li>
</ul>
<p>In several of the previous lessons listed in the
<a href="#Resources">Resources</a> section, I taught you how to 
use the <b>LookupOp</b>, <b>AffineTransformOp</b>, <b>BandCombineOp</b>, and <b>ConvolveOp</b> 
image-filtering classes.</p>
<p>In this final lesson of the series, I will teach you how to use the <b>RescaleOp</b> 
and<b> ColorConvertOp </b>image-filtering classes.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Image with all three colors inverted.</li>
	<li><a href="#Figure_2">Figure 2</a>. Image with only one color inverted.</li>
	<li><a href="#Figure_3">Figure 3</a>. Use of RescaleOp to adjust contrast 
	and brightness.</li>
	<li><a href="#Figure_4">Figure 4</a>. Conversion of color space to CS_GRAY.</li>
	<li><a href="#Figure_5">Figure 5</a>. User input GUI with the ColorConvertOp 
	tab selected.</li>
	<li><a href="#Figure_6">Figure 6</a>. User input GUI with the RescaleOp tab 
	selected.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Beginning of the class definition.</li>
	<li><a href="#Listing_2">Listing 2</a>. Creation of components used to 
	construct the ColorConvertOp page.</li>
	<li><a href="#Listing_3">Listing 3</a>. Creation of components used to 
	construct the RescaleOp page.</li>
	<li><a href="#Listing_4">Listing 4</a>. The primary constructor.</li>
	<li><a href="#Listing_5">Listing 5</a>. The constructColorConvertPage 
	method.</li>
	<li><a href="#Listing_6">Listing 6</a>. The processColorConvertPage method.</li>
	<li><a href="#Listing_7">Listing 7</a>. The constructColorRescalePage 
	method.</li>
	<li><a href="#Listing_8">Listing 8</a>. The processColorRescalePage method.</li>
	<li><a href="#Listing_9">Listing 9</a>. The processImg method.</li>
	<li><a href="#Listing_10">Listing 10</a>. Complete listing of the ImgMod43 
	class.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online Java tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="Constructing_images">Constructing images</a></h3>
<p>Before getting into the programming details, it may be useful for you to 
review the concept of how images are constructed, stored, transported, and 
rendered in Java <i>(and in most modern computers for that matter).&nbsp; </i>I 
provided a great deal of information on these topics in the earlier lesson 
titled &quot;Processing Image Pixels using Java, Getting Started&quot; <i>(see
<a href="#Resources">Resources</a>)</i>.&nbsp; Therefore, I won't repeat that 
information here.&nbsp; Rather, I will simply refer you back to the earlier lesson.</p>
<h3><b><a name="The_framework_program_named_ImgMod05">The framework program 
named ImgMod05</a></b></h3>
<p>It will also be useful for you to understand the behavior of the framework 
program named <b>ImgMod05</b>.&nbsp; Therefore, I strongly recommend that you study 
the earlier lesson titled &quot;A Framework for Experimenting with Java 2D 
Image-Processing Filters&quot; <i>(see <a href="#Resources">Resources</a>)</i>.</p>
<p>However, if you don't have the time to do that, you should take a look at the 
earlier lesson titled &quot;Using the Java 2D LookupOp Filter Class to Process 
Images&quot; <i>(see <a href="#Resources">Resources</a>)</i>, in which I summarized 
the behavior of the framework program named <b>ImgMod05</b>.</p>
<h3><a name="RescaleOp_Examples">RescaleOp examples</a></h3>
<p>The <b>RescaleOp</b> class can be used to multiply the color value for each 
pixel by a user-specified scale factor, and then to add a user-specified 
constant to the product.&nbsp; Separate scale factors and additive constants are 
provided for each of the red, green, and blue colors.</p>
<p>Color values that fall outside the allowable range from 0 to 255 are simply 
clipped to 0 and 255.</p>
<p><font color="#ff0000"><b>Color inversion</b></font></p>
<p>Several previous lessons have discussed inverting the colors in an image.&nbsp; This is another class that makes it easy to invert the colors.&nbsp; In this case, 
the scale factor for all three bands would be set to -1 and the additive 
constant would be set to 255.&nbsp; This would produce an inverted output image like that 
shown in Figure 1.&nbsp;</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Image with all three colors inverted. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java462a01.jpg" width="164" height="327"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Just in case you have a need to do so, each color band can be inverted separately producing results like 
those shown in Figure 2.&nbsp; Figure 2 shows the result of inverting only the 
blue pixels in an image without modifying the red and green pixels.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Image with only one color inverted. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java462a02.jpg" width="164" height="327"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Adjusting the contrast and brightness</b></font></p>
<p>Perhaps more importantly, the <b>RescaleOp</b> class can also be used to 
adjust the contrast and brightness of an image using the concepts that I 
explained in the earlier lesson titled &quot;Processing Image Pixels Using Java: Controlling Contrast and Brightness&quot;
<i>(see <a href="#Resources">Resources</a>)</i>.</p>
<p>Figure 3 shows the result of using 
the <b>RescaleOp</b> class to improve the contrast and brightness of the input 
image.&nbsp; In this case, each color value was multiplied by 3 and then a value of 
-160 was added to each product.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. Use of RescaleOp to adjust contrast and 
	brightness. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java462e01.jpg" width="305" height="690"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>The statistical changes</b></font></p>
<p>Multiplying the color values by a scale factor widens the distribution as 
shown in the <a href="http://www.developer.com/java/other/article.php/3441391">earlier lesson</a>.&nbsp; This increases the contrast.&nbsp; Adding the constant adjusts 
the mean value, thus modifying the brightness.&nbsp; <i>(See the histogram in 
<a href="http://www.developer.com/java/other/article.php/3441391">Figure 2</a> 
in the earlier 
	lesson.)</i></p>
<p>Note that although the methodology used here isn't exactly the same as that 
used in the earlier lesson, the result shown in Figure 3 above compares favorably with 
<a href="http://www.developer.com/java/other/article.php/3441391">Figure 1</a> in the earlier lesson 
indicating that the standard deviation and the mean for the output image in
Figure 3 is probably very similar to the standard deviation and the mean for the 
output image shown in
<a href="http://www.developer.com/java/other/article.php/3441391">Figure 1</a> 
in the earlier lesson.</p>
<p><font color="#ff0000"><b>Assessment</b></font></p>
<p>As demonstrated in the earlier lesson, it is not difficult to write your own 
program to replicate the behavior of the <b>RescaleOp</b> class.&nbsp; However, if 
the <b>RescaleOp</b> class will serve your needs, use it, don't reinvent it.</p>
<p><font color="#ff0000"><b>One major difference</b></font></p>
<p>There is, however, one aspect of my implementation in the
earlier lesson 
that I consider to be superior to the implementation of the <b>RescaleOp</b> 
class, particularly when used for the purpose of adjusting the contrast and 
brightness of an image.</p>
<p>The mean value modification in my earlier implementation is specified by the user as 
a multiplier, such as 1.25.&nbsp; This would, for example, cause the new mean value 
to be 1.25 times greater than the old mean value.</p>
<p>With the <b>RescaleOp</b> class, a constant must be added or subtracted from 
the product in order to move the mean value.&nbsp; You usually won't know what the 
actual mean value is, so you will have to do a lot of guesswork in order to 
determine the proper additive value.</p>
<p>On the other hand, the <b>RescaleOp</b> class can be used for other purposes
<i>(such as color inversion)</i> where an 
additive constant is more appropriate than a multiplicative factor so it is a 
more general implementation.</p>
<h3><a name="ColorConvertOp_Examples">ColorConvertOp example</a></h3>
<p>The apparent purpose of this class is to make it possible for you to convert 
an image from one <b>ColorSpace</b> to another <b>ColorSpace</b>.</p>
<blockquote>
	<p><i>(I will leave it up to you to go to the Sun documentation to learn 
	about the <b>ColorSpace</b> class.)</i>&nbsp; </p>
</blockquote>
<p>In any event, when deciding upon a new color space, several possibilities are available.&nbsp; 
They are defined as constants in the <b>ColorSpace</b> class.</p>
<p><font color="#ff0000"><b>Conversion to grayscale</b></font></p>
<p>Figure 4 coverts the color space of 
the input image to type <b>ColorSpace.CS_GRAY</b>.&nbsp; As you can see, this changed 
the image from a color image to what would probably be called a grayscale
image.</p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Conversion of color space to CS_GRAY.</b><table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java462f01.jpg" width="311" height="477"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#ff0000"><b>Assessment</b></font></p>
<p>In my opinion, writing your own program to replicate the behavior of the <b>
ColorConvertOp</b> class would be very difficult.&nbsp; If you need this capability, 
by all means, use the <b>ColorConvertOp</b> class and don't attempt to reinvent it.</p>
<p><font color="#ff0000"><b>A caveat</b></font></p>
<p>This is the one case that I have found where programs that use the 
image-filtering classes of the Java 2D API are incompatible with the framework 
program named <b>ImgMod05</b>.&nbsp; If you modify the color space of an image, the 
code in <b>ImgMod05</b> that attempts to write the output image into a JPEG file 
will throw an error.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b>General comments</b><br>
				General comments regarding the uses of classes such as this one 
				can be found in the class named <b>ImgMod038</b> in the lesson 
				named &quot;Using the Java 2D LookupOp Filter Class to Process 
				Images&quot; <i>(see <a href="#Resources">Resources</a>)</i>.
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<p>In this lesson, I will present and explain a program named <b>ImgMod43</b> 
that illustrates the use of the <b>ColorConvertOp</b> and <b>RescaleOp</b> 
classes of the Java 2D API.</p>
<p>Except for problems encountered when writing the output jpeg file described 
below, this class is compatible with the use of the driver program named <b>
ImgMod05</b>.</p>
<p><font color="#FF0000"><b>Writing an output jpeg file</b></font></p>
<p>The driver program named <b>ImgMod05</b> displays the original and the 
modified images in the format shown in Figure 1.&nbsp; It also writes the 
modified image into an output file in JPEG format.&nbsp; The name of the output 
file is <b>junk.jpg</b> and it is written into the current directory.&nbsp; Note 
however that changing the type of the <b>ColorSpace</b> using <b>ColorConvertOp</b> 
causes a failure in the attempt to write the processed image into an output jpeg 
file in <b>ImgMod05</b>.&nbsp; In two cases, that code throws an exception and 
doesn't write the file.&nbsp; In the third case, the output file doesn't contain 
a valid copy of the processed image.</p>
<p><font color="#FF0000"><b>A user input GUI</b></font></p>
<p>Image processing programs such as this one may provide a GUI for data input 
making it possible for the user to modify the behavior of the image processing 
method each time the <b>Replot</b> button <i>(shown at the top of Figure 1)</i> 
is clicked.&nbsp; </p>
<p>This program creates a user input GUI 
consisting of a tabbed pane containing two pages.&nbsp; The tabs on the pages are 
labeled:</p>
<ul>
	<li><b>ColorConvertOp</b></li>
	<li><b>RescaleOp</b></li>
</ul>
<p>Each page contains a set of controls that make it 
possible to process the image in a way that illustrates the processing concept 
indicated by the labels on the tabs.</p>
<p>Figure 5 shows 
a screen shot of the user input GUI for this program with the <b>ColorConvertOp</b> 
tab selected.</p>
<p>
 <b><a name="Figure_5">Figure 5</a>. User input GUI with the ColorConvertOp 
tab selected. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java462b01.jpg" width="469" height="301"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Figure 6 shows a screen shot of the user input GUI with the <b>RescaleOp</b> 
tab selected.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. User input GUI with the RescaleOp tab 
	selected.</b><table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java462b02.jpg" width="469" height="301"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Usage</b></font></p>
<p>Enter the following at the command line to run this program:</p>
<p><font face="monospace"><b>java ImgMod05 
ImgMod43 ImageFileName</b></font></p>
<p>If the program is unable to load the image file within 
ten seconds, it will abort with an error message.</p>
<p>The program was tested using J2SE 6 under WinXP.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<font color="#ff0000"><b>Will discuss in fragments</b></font><p>A complete 
listing of this class is presented in Listing 10 near the end of the lesson.&nbsp; As 
is my custom, I will present and explain this class in fragments.</p>
<p><font color="#ff0000"><b>Beginning of the class definition</b></font></p>
<p>The class definition begins in the first program fragment shown in Listing 
1.&nbsp; Note that it is necessary for this class to implement the interface named <b>
ImgIntfc05</b> in order to be compatible with the driver program named <b>
ImgMod05</b>.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Beginning of the class definition. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>class ImgMod43 extends Frame implements ImgIntfc05{

  JTabbedPane tabbedPane = new JTabbedPane();</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 1 declares and instantiates a <b>JTabbedPane</b> object, which is the 
primary container used to construct the GUI as shown in Figures 5 and 6.</p>
<p><font color="#FF0000">
<b>Creation of components used to construct the ColorConvertOp page</b></font></p>
<p>Listing 2 creates some of the components that are used to construct the <b>
ColorConvertOp</b> page shown in Figure 5.&nbsp; Note that other required 
components are created locally closer to where they are needed.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. Creation of components used to construct the ColorConvertOp page. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  Panel colorConvertPage = new Panel();
  CheckboxGroup buttonGroup = new CheckboxGroup();
  Checkbox CS_CIEXYZ = 
              new Checkbox("CS_CIEXYZ",buttonGroup,false);
  Checkbox CS_GRAY = 
                 new Checkbox("CS_GRAY",buttonGroup,true);
  Checkbox CS_LINEAR_RGB = 
          new Checkbox("CS_LINEAR_RGB",buttonGroup,false);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Creation of components used to construct the RescaleOp page</b></font></p>
<p>Listing 3 creates some of the components that are required to construct the
<b>RescaleOp</b> page shown in Figure 6.&nbsp; Once again, other required 
components are created locally closer to where they are needed.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Creation of components used to construct the RescaleOp page. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  Panel colorRescalePage = new Panel();
  TextField redScaleField = new TextField("1.0");
  TextField redOffsetField = new TextField("0.0");
  TextField greenScaleField = new TextField("1.0");
  TextField greenOffsetField = new TextField("0.0");
  TextField blueScaleField = new TextField("1.0");
  TextField blueOffsetField = new TextField("0.0");
  
  //The following Label is used to notify of data entry
  // errors.
  String okMessage = "No data entry errors detected.";
  Label errorMsg = new Label(okMessage);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>The primary constructor</b></font></p>
<p>The primary constructor is shown in Listing 4.&nbsp; It calls other methods to separate the construction of the GUI into easily understandable units.&nbsp; Each method that it calls constructs one page in the tabbed pane.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. The primary constructor. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  ImgMod43(){//constructor
  
    //Construct the pages and add them to the tabbed pane.
    constructColorConvertPage();
    tabbedPane.add(colorConvertPage);
    
    constructColorRescalePage();
    tabbedPane.add(colorRescalePage);
  
    add(tabbedPane);//Add tabbedPane to the Frame.

    setTitle("Copyright 2007, R.G.Baldwin");
    setBounds(555,0,470,300);
    setVisible(true);

    //Define a WindowListener to terminate the program.
    addWindowListener(
      new WindowAdapter(){
        public void windowClosing(WindowEvent e){
          System.exit(1);
        }//end windowClosing
      }//end windowAdapter
    );//end addWindowListener
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>The constructColorConvertPage method</b></font></p>
<p>Listing 5 shows the method that is used to construct the page in the tabbed pane 
shown in Figure 5.&nbsp; This method is called from the primary constructor to 
actually construct the page.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. The constructColorConvertPage method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  void constructColorConvertPage(){
    colorConvertPage.setName("ColorConvertOp");//Tab label
    colorConvertPage.setLayout(new BorderLayout());
    
    //Create and add the instructional text to the page.
    // This text appears in a disabled text area at the
    // top of the page in the tabbed pane.
    String text ="COLOR TYPE CONVERSION\n"
      + "This page illustrates the use of the "
      + "ColorConvertOp filter class.\n\n"
      + "Select the appropriate radio button below, and "
      + "click the Replot button to cause the program to "
      + "convert the ColorSpace to the type indicated by "
      + "the radio button.\n\n"
      + "Note that changing the type of the ColorSpace "
      + "causes the later attempt to write the processed "
      + "image into an output jpg file in ImgMod05 to "
      + "fail.  In two cases, that code throws an "
      + "exception.  In the third case, the output file "
      + "doesn't contain a valid copy of the processed "
      + "image.";
      
    //Note:  The number of columns specified for the
    // following TextArea is immaterial because the
    // TextArea object is placed in the NORTH location of
    // a BorderLayout.
    TextArea textArea = new TextArea(text,10,1,
                                TextArea.SCROLLBARS_NONE);
    colorConvertPage.add(textArea,BorderLayout.NORTH);
    textArea.setEnabled(false);

    //Construct the control panel and add it to the page.
    Panel controlPanel = new Panel();
    controlPanel.add(CS_CIEXYZ);
    controlPanel.add(CS_GRAY);
    controlPanel.add(CS_LINEAR_RGB);
    colorConvertPage.add(
                        controlPanel,BorderLayout.CENTER);
  }//end constructColorConvertPage</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in Listing 5 is straightforward and shouldn't require further 
explanation.</p>
<p><font color="#FF0000"><b>The processColorConvertPage method</b></font></p>
<p>The method named
<b>processColorConvertPage </b>is shown in Listing 6.&nbsp; This method 
processes the image according to the radio buttons shown in Figure 5.&nbsp; </p>
<p>This method uses the <b>ColorConvertOp</b> filter class to process the image 
and to convert it to the <b>ColorSpace</b> type indicated by a radio button 
selected by the user.</p>
<p>This method illustrates only three of the many <b>ColorSpace</b> types 
defined in the <b>ColorSpace</b> class.&nbsp; It is called from within a <b>
switch</b> statement in the method named <b>processImg</b>, which is the primary 
image processing method in this program.&nbsp; The <b>processImg</b> method is 
called by the driver program named <b>ImgMod05</b>.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. The processColorConvertPage method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  BufferedImage processColorConvertPage(
                                  BufferedImage theImage){
    //Examine the radio buttons.  Cause the ColorSpace of
    // the image to be converted to the type indicated
    // by the radio button.
    int colorSpaceType;
    if(CS_CIEXYZ.getState() == true){
      colorSpaceType = ColorSpace.CS_CIEXYZ;
    }else if(CS_GRAY.getState() == true){
      colorSpaceType = ColorSpace.CS_GRAY;
    }else{//CS_LINEAR_RGB must be selected
      colorSpaceType = ColorSpace.CS_LINEAR_RGB;
    }//end else

    //Create the filter object.
    ColorConvertOp filterObj = new ColorConvertOp(
             ColorSpace.getInstance(colorSpaceType),null);
    
    //Apply the filter and return the result.
    return filterObj.filter(theImage,null);

  }//end processColorConvertPage</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Except for the instantiation of the <b>ColorConvertOp</b> object <i>(as 
opposed to instantiating an object of one of the other filter classes defined in 
the Java 2D API)</i>, there is nothing in Listing 6 that is new to this lesson.&nbsp; 
Therefore, the code in Listing 6 shouldn't require further explanation provided 
that you take a look at the constructor for the <b>ColorConvertOp</b> class in 
the Sun documentation.</p>
<p><font color="#FF0000">
<b>The constructColorRescalePage method</b></font></p>
<p>Listing 7 shows the method that is used to construct the page shown in Figure 
6.&nbsp; This method is called from the primary constructor.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. The constructColorRescalePage method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  void constructColorRescalePage(){
    colorRescalePage.setName("RescaleOp");//Tab label.
    colorRescalePage.setLayout(new BorderLayout());
    
    //Create and add the instructional text to the page.
    String text = "COLOR RESCALING\n"
      + "This page illustrates the use of the RescaleOp "
      + "filter\n\n"
      + "Enter new scale and offset values for each "
      + "color in the text fields below and then click "
      + "the Replot button.\n\n"
      + "This will cause the color values for each color "
      + "to be multiplied by the scale factor specified "
      + "for that color.  Then the offset value for that "
      + "color will be added to the scaled color values.";
      
    //Note:  The number of columns specified for the
    // following TextArea is immaterial because the
    // TextArea object is placed in the NORTH location of
    // a BorderLayout.
    TextArea textArea = new TextArea(text,9,1,
                                TextArea.SCROLLBARS_NONE);
    colorRescalePage.add(textArea,BorderLayout.NORTH);
    textArea.setEnabled(false);
    
    //Construct the control panel and add it to the page.
    Panel controlPanel = new Panel();
    controlPanel.setLayout(new GridLayout(3,5));
    controlPanel.add(new Label("Red"));
    controlPanel.add(new Label("Scale = "));
    controlPanel.add(redScaleField);
    controlPanel.add(new Label("Offset = "));
    controlPanel.add(redOffsetField);
    
    controlPanel.add(new Label("Green"));
    controlPanel.add(new Label("Scale = "));
    controlPanel.add(greenScaleField);
    controlPanel.add(new Label("Offset = "));
    controlPanel.add(greenOffsetField);
    
    controlPanel.add(new Label("Blue"));
    controlPanel.add(new Label("Scale = "));
    controlPanel.add(blueScaleField);
    controlPanel.add(new Label("Offset = "));
    controlPanel.add(blueOffsetField);
    
    colorRescalePage.add(
                        controlPanel,BorderLayout.CENTER);
    
    //Add the errorMsg label.
    colorRescalePage.add(errorMsg,BorderLayout.SOUTH);
    errorMsg.setBackground(Color.GREEN);
    
  }//end constructColorRescalePage</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Although Listing 7 is rather long and tedious, there is nothing in Listing 7 
that is new to this lesson.&nbsp; Therefore, a further explanation of Listing 7 
should not be required.</p>
<p><font color="#FF0000">
<b>The processColorRescalePage method</b></font></p>
<p>This method processes the image according to the controls shown on the page 
in Figure 6.&nbsp; This method is called from within the <b>switch</b> statement 
in the method named <b>processImg</b>.</p>
<p>This method uses the scale and offset values specified by the user to modify 
the red, green, and blue color values.&nbsp; The new color value for each pixel 
is the old value multiplied by the scale factor for that color plus the offset 
value for that color.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. The processColorRescalePage method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  BufferedImage processColorRescalePage(
                                  BufferedImage theImage){
    
    //Reset the error message to the default.
    errorMsg.setText(okMessage);
    errorMsg.setBackground(Color.GREEN);

    //Create the arrays required to contain the scale and
    // offset values.
    float[] scale = new float[3];
    float[] offset = new float[3];
    
    //Populate the scale and offset arrays using data from
    // the text fields.
    try{//Get input value from the text field.
      scale[0] = 
                Float.parseFloat(redScaleField.getText());
      offset[0] = 
               Float.parseFloat(redOffsetField.getText());
      scale[1] = 
              Float.parseFloat(greenScaleField.getText());
      offset[1] = 
             Float.parseFloat(greenOffsetField.getText());
      scale[2] = 
               Float.parseFloat(blueScaleField.getText());
      offset[2] = 
              Float.parseFloat(blueOffsetField.getText());
    }catch(java.lang.NumberFormatException e){
      //Set the error message.
      errorMsg.setText("Bad input data.");
      errorMsg.setBackground(Color.RED);
      
      //Make the output image black.
      scale[0] = 0;
      offset[0] = 0;
      scale[1] = 0;
      offset[1] = 0;
      scale[2] = 0;
      offset[2] = 0;
    }//end catch
    
    //Create the filter object.
    RescaleOp filterObj = 
                         new RescaleOp(scale,offset,null);
    
    //Apply the filter and return the result.
    return filterObj.filter(theImage,null);

  }//end processColorRescalePage</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Once again, although this method is rather long and tedious, that is nothing 
in Listing 8 that should cause you any difficulty if you take a look at the 
constructor requirement for the <b>RescaleOp</b> class in the Sun documentation.&nbsp; 
Therefore, a further explanation of the code in Listing 8 should not be 
necessary.</p>
<p><font color="#FF0000">
<b>The processImg method</b></font></p>
<p>This method must be defined to implement the <b>ImgIntfc05</b> interface and 
to make the class compatible with the driver program named<b> ImgMod05</b>.&nbsp; 
This&nbsp;method is called by the driver program named <b>ImgMod05</b>.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. The processImg method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public BufferedImage processImg(BufferedImage theImage){
    
    BufferedImage outputImage = null;
    
    //Process the page in the tabbed pane that has been
    // selected by the user.
    switch(tabbedPane.getSelectedIndex()){
      case 0:outputImage = 
                        processColorConvertPage(theImage);
             break;
      case 1:outputImage = 
                        processColorRescalePage(theImage);
             break;
    }//end switch

    return outputImage;
  }//end processImg

}//end class ImgMod43</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This method simply calls the appropriate method to process the page shown in 
Figure 5 and Figure 6 that has been selected by the user.</p>
<center>
<h2><a name="Run the program"></a>Run the program</h2>
</center>
<p>I encourage you to copy the code from Listing 10 into your text
editor, compile it, and execute it.&nbsp; Experiment with it, making
changes, and observing the results of your changes.</p>
<p>Keep in mind that you will also need to compile and use the program named <b>
ImgMod05</b>.&nbsp; You will find the source code for <b>ImgMod05</b> in the earlier 
lesson titled &quot;A Framework for Experimenting with Java 2D Image-Processing 
Filters&quot; <i>(see <a href="#Resources">Resources</a>)</i>.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>This series of lessons began with a promise that I would teach you how to use 
the following image-filtering classes from the Java 2D API:</p>
<ul>
	<li><b>LookupOp</b></li>
	<li><b>AffineTransformOp</b> </li>
	<li><b>BandCombineOp</b> </li>
	<li><b>ConvolveOp</b> </li>
	<li><b>RescaleOp</b> </li>
	<li><b>ColorConvertOp</b> </li>
</ul>
<p>In previous lessons listed in the <a href="#Resources">Resources</a> section, 
I taught you how to use the <b>LookupOp</b>, <b>AffineTransformOp</b>, <b>
BandCombineOp</b>, and <b>ConvolveOp</b> image-filtering classes.</p>
<p>In this lesson, I taught you how to use the <b>RescaleOp</b> and <b>
ColorConvertOp</b> image-filtering classes.</p>
<p>Thus, my promise is fulfilled, and that wraps up this series on the 
image-filtering classes from the Java 2D API.</p>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listing</h2>
</center>
A complete listing of the class discussed in this lesson is provided in Listing 
10 below.
<p>
<b><a name="Listing_10">Listing 10</a>. Complete listing of the ImgMod43 class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File ImgMod43.java
Copyright 2007, R.G.Baldwin

The purpose of this program is to illustrate the use of 
the ColorConvertOp and RescaleOp classes of the Java 2D 
API.

See general comments in the class named ImgMod038.

Except for problems encountered when writing the output 
jpg file described below, this class is compatible with 
the use of the driver program named ImgMod05.

The driver program named ImgMod05 displays the original 
and the modified images.  It also writes the modified 
image into an output file in JPEG format.  The name of 
the output file is junk.jpg and it is written into the 
current directory.

Note however that changing the type of the ColorSpace 
using ColorConvertOp causes a failure in the attempt to 
write the processed image into an output jpg file in 
ImgMod05.  In two cases, that code throws an exception
and doesn't write the file.  In the third case, the 
output file doesn't contain a valid copy of the 
processed image.

Image processing programs such as this one may provide a 
GUI for data input making it possible for the user to 
modify the behavior of the image processing method each 
time the Replot button is clicked.  Such a GUI is provided
for this program.

Enter the following at the command line to run this 
program:

java ImgMod05 ImgMod43 ImageFileName

If the program is unable to load the image file within ten
seconds, it will abort with an error message.

This program creates a GUI consisting of a tabbed pane 
containing two pages.  The tabs on the pages are labeled:

ColorConvertOp
RescaleOp

Each page contains a set of controls that make it possible
to process the image in a way that illustrates the 
processing concept indicated by the labels on the tabs.
Processing details for each page are provided in the 
comments in the code used to construct and process the 
individual pages.

Tested using J2SE 6 under WinXP.
**********************************************************/

import java.awt.image.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.awt.color.ColorSpace;

class ImgMod43 extends Frame implements ImgIntfc05{
  //Primary container used to construct the GUI.
  JTabbedPane tabbedPane = new JTabbedPane();
  
  //Components used to construct the ColorConvertOp page
  // in the JTabbedPane.
  // Components that require local access only are defined
  // locally.  Others are defined here as instance
  // variables.
  Panel colorConvertPage = new Panel();
  CheckboxGroup buttonGroup = new CheckboxGroup();
  Checkbox CS_CIEXYZ = 
              new Checkbox("CS_CIEXYZ",buttonGroup,false);
  Checkbox CS_GRAY = 
                 new Checkbox("CS_GRAY",buttonGroup,true);
  Checkbox CS_LINEAR_RGB = 
          new Checkbox("CS_LINEAR_RGB",buttonGroup,false);

  //Components used to construct the RescaleOp page in
  // the JTabbedPane. Components that require local access
  // only are defined locally.  Others are defined here as
  // instance variables.
  Panel colorRescalePage = new Panel();
  TextField redScaleField = new TextField("1.0");
  TextField redOffsetField = new TextField("0.0");
  TextField greenScaleField = new TextField("1.0");
  TextField greenOffsetField = new TextField("0.0");
  TextField blueScaleField = new TextField("1.0");
  TextField blueOffsetField = new TextField("0.0");
  
  //The following Label is used to notify of data entry
  // errors.
  String okMessage = "No data entry errors detected.";
  Label errorMsg = new Label(okMessage);
  //-----------------------------------------------------//
  
  //This is the primary constructor.  It calls other
  // methods to separate the construction of the GUI into
  // easily understandable units.  Each method that it
  // calls constructs one page in the tabbed pane.
  ImgMod43(){//constructor
  
    //Construct the pages and add them to the tabbed pane.
    constructColorConvertPage();
    tabbedPane.add(colorConvertPage);
    
    constructColorRescalePage();
    tabbedPane.add(colorRescalePage);
  
    add(tabbedPane);//Add tabbedPane to the Frame.

    setTitle("Copyright 2007, R.G.Baldwin");
    setBounds(555,0,470,300);
    setVisible(true);

    //Define a WindowListener to terminate the program.
    addWindowListener(
      new WindowAdapter(){
        public void windowClosing(WindowEvent e){
          System.exit(1);
        }//end windowClosing
      }//end windowAdapter
    );//end addWindowListener
  }//end constructor
  //-----------------------------------------------------//
  
  //This method constructs the page in the tabbed pane
  // that shows ColorConvertOp on the tab.  This method is
  // called from the primary constructor.
  void constructColorConvertPage(){
    colorConvertPage.setName("ColorConvertOp");//Tab label
    colorConvertPage.setLayout(new BorderLayout());
    
    //Create and add the instructional text to the page.
    // This text appears in a disabled text area at the
    // top of the page in the tabbed pane.
    String text ="COLOR TYPE CONVERSION\n"
      + "This page illustrates the use of the "
      + "ColorConvertOp filter class.\n\n"
      + "Select the appropriate radio button below, and "
      + "click the Replot button to cause the program to "
      + "convert the ColorSpace to the type indicated by "
      + "the radio button.\n\n"
      + "Note that changing the type of the ColorSpace "
      + "causes the later attempt to write the processed "
      + "image into an output jpg file in ImgMod05 to "
      + "fail.  In two cases, that code throws an "
      + "exception.  In the third case, the output file "
      + "doesn't contain a valid copy of the processed "
      + "image.";
      
    //Note:  The number of columns specified for the
    // following TextArea is immaterial because the
    // TextArea object is placed in the NORTH location of
    // a BorderLayout.
    TextArea textArea = new TextArea(text,10,1,
                                TextArea.SCROLLBARS_NONE);
    colorConvertPage.add(textArea,BorderLayout.NORTH);
    textArea.setEnabled(false);

    //Construct the control panel and add it to the page.
    Panel controlPanel = new Panel();
    controlPanel.add(CS_CIEXYZ);
    controlPanel.add(CS_GRAY);
    controlPanel.add(CS_LINEAR_RGB);
    colorConvertPage.add(
                        controlPanel,BorderLayout.CENTER);
  }//end constructColorConvertPage
  //-----------------------------------------------------//

  //This method processes the image according to the
  // controls located on the page in the tabbed pane that
  // shows ColorConvertOp on the tab.
  //This method uses the ColorConvertOp filter class to
  // process the image and to convert it to the
  // ColorSpace type indicated by a radio button selected
  // by the user.  This method illustrates only three of
  // the many ColorSpace types defined in the ColorSpace
  // class.
  //This method is called from within the switch statement
  // in the method named processImg, which is the primary
  // image processing method in this program.
  BufferedImage processColorConvertPage(
                                  BufferedImage theImage){
    //Examine the radio buttons.  Cause the ColorSpace of
    // the image to be converted to the type indicated
    // by the radio button.
    int colorSpaceType;
    if(CS_CIEXYZ.getState() == true){
      colorSpaceType = ColorSpace.CS_CIEXYZ;
    }else if(CS_GRAY.getState() == true){
      colorSpaceType = ColorSpace.CS_GRAY;
    }else{//CS_LINEAR_RGB must be selected
      colorSpaceType = ColorSpace.CS_LINEAR_RGB;
    }//end else

    //Create the filter object.
    ColorConvertOp filterObj = new ColorConvertOp(
             ColorSpace.getInstance(colorSpaceType),null);
    
    //Apply the filter and return the result.
    return filterObj.filter(theImage,null);

  }//end processColorConvertPage
  //-----------------------------------------------------//
  
  //This method constructs the page in the tabbed pane
  // that shows RescaleOp on the tab.  This method is
  // called from the primary constructor.
  void constructColorRescalePage(){
    colorRescalePage.setName("RescaleOp");//Tab label.
    colorRescalePage.setLayout(new BorderLayout());
    
    //Create and add the instructional text to the page.
    String text = "COLOR RESCALING\n"
      + "This page illustrates the use of the RescaleOp "
      + "filter\n\n"
      + "Enter new scale and offset values for each "
      + "color in the text fields below and then click "
      + "the Replot button.\n\n"
      + "This will cause the color values for each color "
      + "to be multiplied by the scale factor specified "
      + "for that color.  Then the offset value for that "
      + "color will be added to the scaled color values.";
      
    //Note:  The number of columns specified for the
    // following TextArea is immaterial because the
    // TextArea object is placed in the NORTH location of
    // a BorderLayout.
    TextArea textArea = new TextArea(text,9,1,
                                TextArea.SCROLLBARS_NONE);
    colorRescalePage.add(textArea,BorderLayout.NORTH);
    textArea.setEnabled(false);
    
    //Construct the control panel and add it to the page.
    Panel controlPanel = new Panel();
    controlPanel.setLayout(new GridLayout(3,5));
    controlPanel.add(new Label("Red"));
    controlPanel.add(new Label("Scale = "));
    controlPanel.add(redScaleField);
    controlPanel.add(new Label("Offset = "));
    controlPanel.add(redOffsetField);
    
    controlPanel.add(new Label("Green"));
    controlPanel.add(new Label("Scale = "));
    controlPanel.add(greenScaleField);
    controlPanel.add(new Label("Offset = "));
    controlPanel.add(greenOffsetField);
    
    controlPanel.add(new Label("Blue"));
    controlPanel.add(new Label("Scale = "));
    controlPanel.add(blueScaleField);
    controlPanel.add(new Label("Offset = "));
    controlPanel.add(blueOffsetField);
    
    colorRescalePage.add(
                        controlPanel,BorderLayout.CENTER);
    
    //Add the errorMsg label.
    colorRescalePage.add(errorMsg,BorderLayout.SOUTH);
    errorMsg.setBackground(Color.GREEN);
    
  }//end constructColorRescalePage
  //-----------------------------------------------------//

  //This method processes the image according to the
  // controls located on the page in the tabbed pane that
  // shows RescaleOp on the tab.  This method is called
  // from within the switch statement in the method named
  // processImg.  This method uses the scale and offset
  // values specified by the user to modify the red,
  // green, and blue color values.  The new color value
  // for each pixel is the old value multiplied by the
  // scale factor for that color plus the offset value for
  // that color.
  BufferedImage processColorRescalePage(
                                  BufferedImage theImage){
    
    //Reset the error message to the default.
    errorMsg.setText(okMessage);
    errorMsg.setBackground(Color.GREEN);

    //Create the arrays required to contain the scale and
    // offset values.
    float[] scale = new float[3];
    float[] offset = new float[3];
    
    //Populate the scale and offset arrays using data from
    // the text fields.
    try{//Get input value from the text field.
      scale[0] = 
                Float.parseFloat(redScaleField.getText());
      offset[0] = 
               Float.parseFloat(redOffsetField.getText());
      scale[1] = 
              Float.parseFloat(greenScaleField.getText());
      offset[1] = 
             Float.parseFloat(greenOffsetField.getText());
      scale[2] = 
               Float.parseFloat(blueScaleField.getText());
      offset[2] = 
              Float.parseFloat(blueOffsetField.getText());
    }catch(java.lang.NumberFormatException e){
      //Set the error message.
      errorMsg.setText("Bad input data.");
      errorMsg.setBackground(Color.RED);
      
      //Make the output image black.
      scale[0] = 0;
      offset[0] = 0;
      scale[1] = 0;
      offset[1] = 0;
      scale[2] = 0;
      offset[2] = 0;
    }//end catch
    
    //Create the filter object.
    RescaleOp filterObj = 
                         new RescaleOp(scale,offset,null);
    
    //Apply the filter and return the result.
    return filterObj.filter(theImage,null);

  }//end processColorRescalePage
  //-----------------------------------------------------//

  //The following method must be defined to implement the
  // ImgIntfc05 interface.  It is called by the driver
  // program named ImgMod05.
  public BufferedImage processImg(BufferedImage theImage){
    
    BufferedImage outputImage = null;
    
    //Process the page in the tabbed pane that has been
    // selected by the user.
    switch(tabbedPane.getSelectedIndex()){
      case 0:outputImage = 
                        processColorConvertPage(theImage);
             break;
      case 1:outputImage = 
                        processColorRescalePage(theImage);
             break;
    }//end switch

    return outputImage;
  }//end processImg

}//end class ImgMod43
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2007, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a href="http://www.developer.com/java/other/article.php/3403921">400</a> 
	Processing Image Pixels using Java, Getting Started</li>
	<li><a href="http://www.developer.com/java/other/article.php/3423661">402</a> 
	Processing Image Pixels using Java, Creating a Spotlight</li>
	<li><a href="http://www.developer.com/java/other/article.php/3441391">404</a> 
	Processing Image Pixels Using Java: Controlling Contrast and Brightness</li>
	<li><a href="http://www.developer.com/java/other/article.php/3512456">406</a> 
	Processing Image Pixels, Color Intensity, Color Filtering, and Color 
	Inversion</li>
	<li><a href="http://www.developer.com/java/other/article.php/3522711">408</a> 
	Processing Image Pixels, Performing Convolution on Images</li>
	<li><a href="http://www.developer.com/java/other/article.php/3579206">410</a> 
	Processing Image Pixels, Understanding Image Convolution in Java</li>
	<li><a href="http://www.developer.com/java/ent/article.php/3590351">412</a> 
	Processing Image Pixels, Applying Image Convolution in Java, Part 1</li>
	<li><a href="http://www.developer.com/java/other/article.php/3596351">414</a> 
	Processing Image Pixels, Applying Image Convolution in Java, Part 2</li>
	<li><a href="http://www.developer.com/java/other/article.php/3640776">416</a> 
	Processing Image Pixels, An Improved Image-Processing Framework in Java</li>
	<li><a href="http://www.developer.com/java/other/article.php/3645761">450</a> 
	A Framework for Experimenting with Java 2D Image-Processing Filters</li>
	<li><a href="http://www.developer.com/java/other/article.php/3654171">452</a> 
	Using the Java 2D LookupOp Filter Class to Process Images</li>
	<li><a href="http://www.developer.com/java/other/article.php/3670696">454</a> 
	Using the Java 2D AffineTransformOp Filter Class to Process Images</li>
	<li><a href="http://www.developer.com/java/other/article.php/3681466">456</a> 
	Using the Java 2D LookupOp Filter Class to Scramble and Unscramble Images</li>
	<li><a href="http://www.developer.com/java/other/article.php/3686856">458</a> 
	Using the Java 2D BandCombineOp Filter Class to Process Images</li>
	<li><a href="http://www.developer.com/java/other/article.php/3696676">460</a> Using the Java 2D ConvolveOp Filter Class to Process Images</li>
</ul>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
java 2D image pixel framework filter&nbsp;ColorConvertOp RescaleOp</p>
<p>-end- </p>
<p>&nbsp;</p>
<p> <br>
&nbsp; </p>
<br>
<br>
<br>
<br>
</body>
</html>
