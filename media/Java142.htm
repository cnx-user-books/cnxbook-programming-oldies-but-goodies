<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, Checkbox Menus<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 142, Revised 01/27/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#menus">Menus</a></li>

<li><a href="#checkboxmenuitem class">CheckboxMenuItem Class</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This series of lessons is concentrating on package <b>java.awt </b>where
most of the functionality exists for providing the user interface to your
application or applet.

<p>We have learned how to handle events and use layout managers.These two
topics form the basis for the design and implementation of a Graphical
User Interface.

<p>Now we are learning about the various components that we can combine
with layout and event handling to produce an effective Graphical User Interface.

<p>The available components are defined by classes in the package <b>java.awt</b>.
Our approach is to group those classes into categories and study the material
on a category basis. As of this writing, it looks as if the remaining categories
are:
<ul><li><b>Checkbox Menus</b></li>

<li>
Popup Menus</li>

<li>
The Canvas Class</li>

<li>
Graphics - Shapes, Fonts, Images</li>

<li>
The PrintJob Class</li>

<li>
The Toolkit Class</li></ul>
As things develop, it may be necessary to modify these groupings.
<center><h2><a name="menus"></a><font color="#ff0000">Menus</font></h2></center>
The inheritance hierarchy for menus is as shown below.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>java.lang.Object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----MenuShortcut&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuComponent&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuBar
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.MenuItem&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.Menu
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.<b>CheckboxMenuItem
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.PopupMenu</pre></td></tr></table>
There are a number of interesting issues associated with menus which are
being discussed in this series of documents.

<p>Previous lessons discussed and provided sample programs for the following
classes.
<ul><li><b>MenuComponent Class </b>- Super class of all menu related components.</li>

<li><b>MenuShortcut Class </b>- Represents a keyboard accelerator for a MenuItem.</li>

<li><b>MenuItem Class </b>- Represents a choice in a menu.</li>

<li><b>Menu Class </b>- A component of a menu bar.</li>

<li><b>MenuBar Class </b>- Encapsulates the platform's concept of a menu bar
bound to a Frame.</li></ul>
This lesson will discuss and and provide a sample program for
<ul><li><b>CheckboxMenuItem Class </b>- Produces a checkbox that represents a choice
in a menu.</li></ul>
A subsequent lesson will deal with:
<ul><li><b>PopupMenu Class </b>- Implements a menu which can be dynamically popped
within a component.</li></ul>
A sample program in a previous lesson made use of the <b>Menu</b>, <b>MenuItem</b>,
<b>MenuBar</b>, and <b>MenuShortcut </b>classes.

<p>This lesson will make use of the same set of classes, except this time
we will <u>substitute</u> <b>CheckboxMenuItem</b> in place of <b>MenuItem</b>.

<p>In addition, whereas the previous lesson used an <b>ActionListener </b>class
to process the events generated by selecting menu items, this lesson will
use an <b>ItemListener </b>class for processing events generated by selecting
menu items.

<p>We will defer detailed consideration of the <b>PopupMenu </b>class to
a subsequent lesson.

<p>A previous lesson discussed the <b>MenuComponent, Menu</b>, <b>MenuItem</b>,
<b>MenuBar</b>, and <b>MenuShortcut </b>classes in detail. We won't repeat
that here. We will begin our detailed discussion her with the <b>CheckboxMenuItem
</b>class.
<center><h2><a name="checkboxmenuitem class"></a><font color="#ff0000">CheckboxMenuItem
Class</font></h2></center>
The <b>CheckboxMenuItem</b> class is used to instantiate objects which
can become the choices in a menu.

<p>Unlike the ordinary menu items discussed in a previous lesson, these
menu items behave much like checkbox components behave. An operational
description of the behavior of menu items of this type is contained in
the discussion of the sample program that follows.

<p><b>CheckboxMenuItem </b>has no <i>fields </i>and the following public
<i>constructors</i>:
<ul><li><b>CheckboxMenuItem</b>() -- Creates a checkbox menu item with an empty
label, initially set to off (false state).</li>

<li><b>CheckboxMenuItem</b>(String) -- Creates the checkbox item with the specified
label, initially set to off (false state).</li>

<li><b>CheckboxMenuItem</b>(String, boolean) -- Creates a checkbox menu item
with the specified label and state.</li></ul>
As you have probably figured out from reading the descriptions of the constructors,
menu items of type <b>CheckboxMenuItem </b>have a <b>boolean</b> <i>state
</i>value which is either <i>true </i>or <i>false. </i>Menu items of this
type either do or do not display a <i>checkmark </i>or other visible indication
of having been <i>checked </i>or <i>unchecked</i>. When such a menu item
has a check mark, its state is <i>true</i>. Otherwise, it is <i>false</i>.

<p>This class provides about nine methods, with some of the more interesting
ones listed below.
<ul><li><b>addItemListener</b>(ItemListener) -- Adds the specified item listener
to receive item events from this checkbox menu item.</li>

<li><b>getSelectedObjects</b>() -- Returns an array containing the checkbox
menu item label or null if the checkbox is not selected.</li>

<li><b>getState</b>() -- Returns the state of this MenuItem.</li>

<li><b>removeItemListener</b>(ItemListener) -- Removes the specified item listener
so it no longer receives item events from this checkbox menu item.</li>

<li><b>setState</b>(boolean) -- Sets the state of this MenuItem if it is a
Checkbox.</li></ul>
The <b>addItemListener() </b>method is not very familiar to us. Whenever
a menu item is chosen, an <b>ItemEvent </b>is generated. In order to cause
the selection of that menu item to cause a specific action, we will instantiate
and register an <b>ItemListener </b>object which contains an overridden
<b>itemStateChanged()</b> method to produce the desired action.

<p>In the case of our sample program, the desired action will simply be
to display the identification and state of the menu item that was selected.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
This program is designed to be compiled and run under JDK 1.1. It illustrates
the use of checkbox menus.

<p>This application places one menu in a <b>Frame </b>object. The menu
contains three items of type <b>CheckboxMenuItem</b>. An item of this type
in a menu looks pretty much like an ordinary menu item until you select
it. When you select it, a <i>checkmark </i>or other visual indication that
it has been selected appears on the menu. Selecting the item again causes
the checkmark to be removed. These operations cause the <i>"state"</i>
of the item to change. A <i>checked </i>item has a state of <i>true </i>and
an <i>unchecked </i>item has a state of <i>false</i>.

<p>Selection of an item generates an <b>ItemEvent </b>that can be trapped
using an object of type <b>ItemListener </b>which overrides the method
<b>itemStateChanged(ItemEvent e)</b>.

<p>When such an event is trapped, several pieces of important information
including the new <i>state</i>, the item <i>label</i>, and the item <i>name
</i>are contained in the <b>ItemEvent </b>object passed in as a parameter.
This information can be used to identify which item has changed state and
to implement the required action.

<p>In this program, the action of the overridden <b>itemStateChanged()</b>
method is to display a line of text on the screen showing the source information
contained in the <b>ItemEvent </b>object.

<p>Typical screen outputs for menu items being selected and deselected
are shown below. Line breaks were manually inserted in this material to
make it fit on the screen.
<br>&nbsp;
<table border bgcolor="#00ffff" ><tr><td><pre>java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem0,label=First Item,state=true]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem1,label=Second Item,state=true]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem2,label=Third Item,state=true]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem0,label=First Item,state=false]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem1,label=Second Item,state=false]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem2,label=Third Item,state=false]</pre></td></tr></table>
A <b>windowClosing()</b> event listener object is also instantiated and
registered on the frame to terminate the program when the frame is closed.

<p>The program was tested using JDK 1.1.3 running under Win95.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
There is some <u>repetitious code</u> in this sample program due to the
fact that essentially the same code is required to create each menu item
and register a <b>Listener </b>object on it.

<p>The order that items are instantiated and associated is important. The
first interesting code fragment instantiates several <b>CheckboxMenuItem
</b>objects which will be added to a <b>Menu </b>object to produce a menu
with several choices.

<p>The <b>Menu </b>object will be added to a <b>MenuBar </b>object to produce
a menu bar assembly with one menu.

<p>The <b>MenuBar </b>object will then be associated with the <b>Frame
</b>object.

<p>That's the structural overview. Now let's go back to the <b>CheckboxMeunItem
</b>objects. The following code is typical of that required to instantiate
those objects.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp; CheckboxMenuItem firstMenuItem =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckboxMenuItem("First Item");</pre></td></tr></table>
The next code fragment is interesting only because it makes use of a type
of <b>Listener </b>class that we haven't used before. The code fragment
is typical of that required to instantiate and register an <b>ItemListener
</b>object on each <b>CheckboxMenuItem</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; CheckBoxMenuProcessor eventProcessor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckBoxMenuProcessor();
&nbsp;&nbsp;&nbsp; firstMenuItem.addItemListener(eventProcessor);</pre></td></tr></table>
Following this, there is code to instantiate a <b>Menu </b>object and add
the <b>CheckboxMenuItems </b>to it. That code is essentially the same as
was used in our sample program for <i>Ordinary Menus</i>. Also there is
similar code to add the <b>Menu </b>object to a <b>MenuBar </b>object,
and code to associate the <b>MenuBar </b>object to the <b>Frame </b>object.
That is also old stuff by now.

<p>The next interesting code fragment is class that implements the <b>ItemListener</b>
interface. Again, it is only interesting because it implements an interface
that we haven't used before and overrides a method that we haven't used
before. Otherwise, the code in the class definition is straightforward.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class CheckBoxMenuProcessor implements <b>ItemListener</b>{
&nbsp; public void <b>itemStateChanged</b>(ItemEvent e){
&nbsp;&nbsp;&nbsp; //Display the menu item that generated the ItemEvent
&nbsp;&nbsp;&nbsp; System.out.println(e.<b>getSource</b>());
&nbsp; }//end itemStateChanged
}//end class CheckBoxMenuProcessor</pre></td></tr></table>
The remaining code is similar to that which you have seen in many previous
example programs. A complete listing of the program is provided in the
next section.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
This section contains a complete listing of the program. See the previous
sections for an operational description of the program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Menu03.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

Illustrates use of checkbox menus.

This application places one menu in a Frame object.&nbsp; The&nbsp;
menu contains three items of type CheckboxMenuItem.&nbsp; An&nbsp;
item of this type in a menu looks like an ordinary menu&nbsp;
item until you select it.&nbsp; When you select it, a checkmark
or other visual indication that it has been selected&nbsp;
appears on the menu.&nbsp; Selecting the item again causes the
checkmark to be removed.&nbsp; These operations cause the&nbsp;
"state" of the item to change.&nbsp; A checked item has a state
of true and an unchecked item has a state of false.

Selection of an item generates an ItemEvent that can
be trapped using a Listener object of type ItemListener&nbsp;
which overrides the method itemStateChanged(ItemEvent e).
When such an event is trapped, several pieces of important
information including the new state, the item label, and
the item name are contained in the ItemEvent object passed
in as a parameter.&nbsp; This information can be used to&nbsp;
identify which item has changed state and to implement the
required action.

In this program, the action of the overridden&nbsp;
itemStateChanged() method is to display a line of text on
the screen showing the information contained in the&nbsp;
ItemEvent object.

Typical screen outputs (with line breaks manually inserted)
when menu items are selected and deselected are:

java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem0,label=First Item,state=true]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem1,label=Second Item,state=true]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem2,label=Third Item,state=true]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem0,label=First Item,state=false]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem1,label=Second Item,state=false]
java.awt.CheckboxMenuItem[
&nbsp; chkmenuitem2,label=Third Item,state=false]

A windowClosing() event listener object is instantiated&nbsp;
and registered on the frame to terminate the program when
the frame is closed.

The program was tested using JDK 1.1.3 running under Win95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class Menu03 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class Menu03
//=======================================================//

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate CheckboxMenuItem objects&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; CheckboxMenuItem firstMenuItem =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckboxMenuItem("First Item");
&nbsp;&nbsp;&nbsp; CheckboxMenuItem secondMenuItem =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckboxMenuItem("Second Item");
&nbsp;&nbsp;&nbsp; CheckboxMenuItem thirdMenuItem =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckboxMenuItem("Third Item");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate an ItemListener object and register it&nbsp;
&nbsp;&nbsp;&nbsp; // on the CheckboxMenuItem objects.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; CheckBoxMenuProcessor eventProcessor =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new CheckBoxMenuProcessor();
&nbsp;&nbsp;&nbsp; firstMenuItem.addItemListener(eventProcessor);
&nbsp;&nbsp;&nbsp; secondMenuItem.addItemListener(eventProcessor);
&nbsp;&nbsp;&nbsp; thirdMenuItem.addItemListener(eventProcessor);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Menu object and add the&nbsp;
&nbsp;&nbsp;&nbsp; // CheckboxMenuItem objects to it
&nbsp;&nbsp;&nbsp; Menu menuA = new Menu("Menu A");
&nbsp;&nbsp;&nbsp; menuA.add(firstMenuItem);
&nbsp;&nbsp;&nbsp; menuA.add(secondMenuItem);
&nbsp;&nbsp;&nbsp; menuA.add(thirdMenuItem);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a MenuBar object and add the Menu&nbsp;
&nbsp;&nbsp;&nbsp; // objects to it&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MenuBar menuBar = new MenuBar();
&nbsp;&nbsp;&nbsp; menuBar.add(menuA);&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Frame object and associate the MenuBar
&nbsp;&nbsp;&nbsp; // object with the Frame object.&nbsp; Note that this is&nbsp;
&nbsp;&nbsp;&nbsp; // NOT a typical myFrame.add() method invocation, but
&nbsp;&nbsp;&nbsp; // rather is a special form of method invocation that
&nbsp;&nbsp;&nbsp; // is required to associate a MenuBar object with a
&nbsp;&nbsp;&nbsp; // Frame object.
&nbsp;&nbsp;&nbsp; Frame myFrame =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Frame("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setMenuBar(menuBar);
&nbsp;&nbsp;&nbsp; myFrame.setSize(250,100);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //Instantiate and register a window listener to&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the Frame is closed.&nbsp;
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(new Terminate());
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//Class to instantiate an ItemListener object to be&nbsp;
// registered on the menu items.
class CheckBoxMenuProcessor implements ItemListener{
&nbsp; public void itemStateChanged(ItemEvent e){
&nbsp;&nbsp;&nbsp; //Display the menu item that generated the ItemEvent
&nbsp;&nbsp;&nbsp; System.out.println(e.getSource());
&nbsp; }//end itemStateChanged
}//end class CheckBoxMenuProcessor
//=======================================================//

class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp; }//end windowClosing
}//end class Terminate
//=======================================================//</pre></td></tr></table>
-end-<!--end--></body></html>