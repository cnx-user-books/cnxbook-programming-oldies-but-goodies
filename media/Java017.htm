<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>Introduction to Applets in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MICROSOFT OFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Introduction to Graphical User Interfaces (GUI)<!--endtitle--></H2>
<P>Java Programming, Lecture Notes # 17, Revised 10/03/99. </P>
<P><!-toc file=Java017a.htm words=Preface-><A HREF="#preface">Preface</A><BR>
<!--endtoc--><!-toc file=Java017b.htm words=Introduction-><A HREF="#introduction">Introduction</A><BR>
<!--endtoc--><!-toc file=Java017c.htm words=The "Hello World" GUI Program-><A HREF="#thehelloworldguiprogram">The "Hello World" GUI Program</A><BR>
<!--endtoc--><!-toc file=Java017d.htm words=Interesting Code Fragments-><A HREF="#interestingcodefragments">Interesting Code Fragments</A><BR>
<!--endtoc--><!-toc file=Java017e.htm words=Program Listing-><A HREF="#programlisting">Program Listing</A> <A NAME="preface"></A><!--endtoc--></P>
<!-next=Java017a.htm><!-first=Java017.htm->
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER">Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Introductory Java Programming</B></U> classes at ACC are <U>not</U> responsible for knowing and understanding the material in this lesson.&nbsp; Rather, this material is presented simply as a preview of what is to come for those students. However, students in Prof. Baldwin's <U><STRONG>Intermediate Java Programming</U></STRONG> classes and <U><STRONG>Advanced Java Programming</U></STRONG> classes are responsible for knowing and understanding the material in this lesson.</P>
<P>Upgraded to JDK 1.2 on 12/16/98.</P>
<P><!-prev=Java017.htm-><!-next=Java017b.htm><!-first=Java017.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="introduction"></A>Introduction</H2>
</FONT><P>This lesson provides a very brief introduction to the programming of a Graphical User Interface (GUI) often pronounced "gooey." </P>
<P>As a practical matter, most Java programs use a GUI for communication between the program and the user.&nbsp; Many books on Java programming jump right into the development of such interfaces without providing adequate background instruction because, quite frankly, programming GUIs is more fun than programing the more mundane stuff that is necessary to learn Java programming fundamentals. </P>
<P>My teaching philosophy is that the student needs to have a firm grip on many important Java programming concepts before taking the step into GUI programming. </P>
<P>Therefore, in hopes of stemming the student's desire to skip over the fundamentals, I am going to provide this lesson for illustration purposes where I will show and discuss the mechanics of creating a GUI.&nbsp; I will discuss the GUI at a relatively high level of programming knowledge, so don't be disappointed if you don't understand the discussion at this point.&nbsp; Stick with me and you will gain that understanding as we progress through Java programming one step at a time. </P>
<P>If you really do understand the discussion of this program, you probably don't need to be enrolled in the Introductory Java Programming class.&nbsp; The level of your knowledge is well beyond the introductory stage. </P>
<P>After this, we will cover many more lessons before returning to the important topics surrounding GUI programming </P>
<P><!-prev=Java017a.htm-><!-next=Java017c.htm><!-first=Java017.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="thehelloworldguiprogram"></A>The "Hello World" GUI Program</H2>
</FONT><P>The purpose of this program is to illustrate some of the code in a relatively simple Graphical User Interface. </P>
<P>Note that this program uses Swing components.&nbsp; Therefore, the Swing class library must be installed and accessible to the compiler before you will be able to compile and run this program.&nbsp; As of the original date of this writing (5/7/98), Swing 1.0.1 was freely available for downloading from the JavaSoft site. </P>
<P>This program begins with a heavyweight <B>Frame</B> object on the screen.&nbsp; The <B>Frame</B> contains five components: <BR>
&nbsp; </P>
<OL>

<LI>A heavyweight <B>Button</B> with the caption "Toggle Color"</LI>
<LI>A lightweight <B>JButton</B> with the caption "Say Hello"</LI>
<LI>A lightweight <B>JButton</B> with the caption "Say Goodbye"</LI>
<LI>A green heavyweight <B>Label</B> with an initial caption of&nbsp;&nbsp; "Color Me".&nbsp; This is the output or display component for the&nbsp;&nbsp; program.</LI>
<LI>A red heavyweight <B>Label</B> with the caption "Toggle Color".&nbsp;&nbsp; This <B>Label</B> functions as a counterfeit <B>Button</B> object.</LI></OL>

<P>The lightweight components exhibit the JavaSoft <I>metal</I> look and feel.&nbsp; The heavyweight components exhibit the look and feel of the underlying operating system. </P>
<P>If you click the heavyweight <B>Button</B> object, the background color of the display toggles between yellow and green. If you click the heavyweight <B>Label</B> object with the "Toggle Color" caption, a mouse listener on this component creates a counterfeit <B>ActionEvent</B> object and posts it to the system event queue, and blames it on the heavyweight <B>Button</B> object.&nbsp; When the event emerges from the queue, the system thinks that someone has clicked the actual <B>Button</B> object and it toggles the background color of the display just as though the <B>Button</B> object had been clicked. </P>
<P>The heavyweight <B>Label</B> that serves as a counterfeit <B>Button</B> has no knowledge of the outcome.&nbsp; All it knows is that it creates a counterfeit <B>ActionEvent</B> object and posts it to the event queue with the <B>Button</B> specified as the source of the event. </P>
<P>If you click either of the two lightweight buttons, the caption in the display changes to either <I>"Hello"</I> or <I>"Goodbye"</I> depending on which lightweight button you click. </P>
<P>Note that the controlling class for this program implements the <B>ActionListener</B> interface and therefore, an object of this class can serve as an action listener registered on its own components.&nbsp; This leads to a compact, but somewhat cryptic programming style. </P>
<P>The program was tested using JDK 1.1.6 and Swing 1.0.1 under Win95. It was also tested using JDK 1.2 under Win95.<BR>
&nbsp; </P>
<P><!-prev=Java017b.htm-><!-next=Java017d.htm><!-first=Java017.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="interestingcodefragments"></A>Interesting Code Fragments</H2>
</FONT><P>This section highlights a number of code fragments that are important to your understanding of Java programming in order for you to be prepared to deal with GUIs. <BR>
&nbsp; <BR>
The first fragment shows the requirement to import the required packages (or use an alternative, but longer programming style). <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>import java.awt.*;
import java.awt.event.*;
import com.sun.java.swing.*;//JDK 1.1 version
//import javax.swing.*;//JDK 1.2 version</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
The next fragment shows the beginning of the controlling class, which in this case implements the <B>ActionListener</B> interface.&nbsp; Because it implements this interface, an object of this class can serve as a listener for action events on components contained in the object. <BR>
&nbsp; <BR>
The fragment also declares two reference variables as instance variables that are used later in the program. (Later you will learn the difference between <I>instance</I> variables and <I>class</I> variables.) One of the instance variables is used by the action event handler to toggle the color of the display between <I>yellow</I> and <I>green</I>. </P>
<P>The other instance variable is a reference to a <B>Label</B> object that serves as the output or display component for the program. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>public class Gui01 extends Frame implements ActionListener{
&nbsp; boolean toggle = false;
&nbsp; Label display;</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
All Java applications require a <B>main()</B> method.&nbsp; The main method for this program is shown in the next fragment.&nbsp; In this case, the method is short.&nbsp; All it does is instantiate the object of this type that will serve as a listener on several of the components. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; Gui01 displayWindow = new Gui01();
&nbsp; }//end main</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
The constructor for this class, as shown in the next several fragments, is pretty long.&nbsp; Therefore, we will break it up and discuss it as several different fragments. <BR>
&nbsp; <BR>
The next fragment shows the beginning of the constructor along with the invocation of two different property set methods to set the title of the <B>Frame</B> object and the layout of the object.&nbsp; The layout establishes how GUI components are placed inside the <B>Frame.</B> <B>FlowLayout</B> places the components left-to-right, top-to-bottom. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public Gui01(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1998, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());//set layout for container</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
Following this, we instantiate and set properties on several of the components of the GUI.&nbsp; In doing this, we invoke the parameterized constructors for the objects and also invoke some of the property set methods of the objects. Note in particular the use of the static symbolic constants of the <B>Color</B> class such as <B>Color.green</B>.&nbsp; Additional comments regarding the instantiation of these components are provided in the full listing of the program that appears later in this lesson. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; Button toggleColorButton = new Button("Toggle Color");
&nbsp;&nbsp;&nbsp; display = new Label("Color Me");
&nbsp;&nbsp;&nbsp; display.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; Label toggleColorLabel = new Label("Toggle Color");
&nbsp;&nbsp;&nbsp; toggleColorLabel.setBackground(Color.red);&nbsp;
&nbsp;&nbsp;&nbsp; JButton sayHelloButton = new JButton("Say Hello");
&nbsp;&nbsp;&nbsp; JButton sayGoodbyeButton = new JButton("Say Goodbye");</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
The next fragment adds the components instantiated above to the <B>Frame</B> object according to the position specifications of the layout manager specified earlier. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; this.add(toggleColorButton);
&nbsp;&nbsp;&nbsp; this.add(display);
&nbsp;&nbsp;&nbsp; this.add(toggleColorLabel);
&nbsp;&nbsp;&nbsp; this.add(sayHelloButton);
&nbsp;&nbsp;&nbsp; this.add(sayGoodbyeButton);</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
Finally, we establish the size of the <B>Frame</B> object in pixels and make it visible.&nbsp; At this point, we have a completely <U>non-functional</U> graphical user interface.&nbsp; If the program were left in this condition, the GUI would appear on the screen, but it wouldn't do anything.&nbsp; It would be necessary to abort the program (ctrl-c) to force it to terminate. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; setSize(300,150);//Set frame size&nbsp;
&nbsp;&nbsp;&nbsp; setVisible(true);//Display the frame</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
To make our user interface functional, we must develop an event handling design and create listener objects containing event handlers which implement the behavior required by that design. <BR>
&nbsp; <BR>
We begin by registering a mouse listener object on the <B>Label</B> object that will behave as a counterfeit <B>Button</B>.&nbsp; The behavior of the mouse listener event handler when a <B>mouseClicked</B> event occurs on the <B>Label</B> will be to generate a counterfeit action event and "blame" it on the <B>Button</B> object.&nbsp; We will see how that is accomplished when we examine the code for the <B>MouseListener</B> class that we will define later in the program. </P>
<P>Note that in this case, we are registering an anonymous object of an external top-level class named <B>MyMouseListener</B> on the <B>Label</B>.&nbsp; We pass a reference to the <B>Button</B> object to the constructor for this anonymous object. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; toggleColorLabel.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMouseListener(toggleColorButton));</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
Next we register <B>this</B> object as an action listener on the heavyweight <B>Button</B> object and the two lightweight <B>JButton</B> objects.&nbsp; Recall again that it is possible to register <B>this</B> object as an action listener because <B>this</B> class implements the <B>ActionListener</B> interface. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; toggleColorButton.addActionListener(this);
&nbsp;&nbsp;&nbsp; sayHelloButton.addActionListener(this);
&nbsp;&nbsp;&nbsp; sayGoodbyeButton.addActionListener(this);</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
The single statement that follows in the next fragment instantiates an anonymous inner class object of type <B>WindowAdapter</B>, and&nbsp; registers it for handling a <B>windowClosing</B> event on the <B>Frame</B> object.&nbsp; This code uses the abbreviated syntax which defines the listener class anonymously (the&nbsp; listener class does not have a class name and the object instantiated from the class does not have a name). The behavior of this listener object causes the program to terminate when the window is closed. <BR>
&nbsp; <BR>
This is the last statement in the constructor for <B>this</B> object. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addWindowListener

&nbsp; }//end constructor</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
This next fragment is the <B>actionPerformed</B> method for <B>this</B> object. This method is invoked whenever one of the buttons is clicked, or a counterfeit action event is posted with the <B>Button</B> object as the specified source object. The code in this method causes the color of the&nbsp; display to toggle between <I>yellow</I> and <I>green</I> or causes it to display <I>Hello</I> or <I>Goodbye</I>, depending upon which component is clicked. </P>
<P>The logic is fairly straightforward.&nbsp; The code determines the source of the event by extracting the <I>action command</I> from the <B>ActionEvent</B> object passed in as a parameter and uses the source identification to decide what to do to the display. </P>
<P>This is the end of the controlling class named <B>Gui01</B>. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; if(e.getActionCommand().equals("Toggle Color")){&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!toggle){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toggle = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toggle = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp; }else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getActionCommand().equals("Say Hello"))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display.setText("Hello");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else display.setText("Goodbye");
&nbsp; }//end actionPerformed()
&nbsp; //-----------------------------------------------------//
&nbsp;
}//end class Gui01</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
The next fragment shows the external top-level class that is used to monitor for mouse clicks on a <B>Label</B> object. </P>
<P>Whenever the user clicks on the <B>Label</B>, the code in an object of this class creates a counterfeit <B>ActionEvent</B> object and posts it to the <B>SystemEventQueue</B>. </P>
<P>The source of the event is specified to be a <B>Button</B> object that is passed in when an object of this class is instantiated. Thus, the <B>Label</B> object "claims" to be the <B>Button</B> object and posts <B>ActionEvent</B> objects that are interpreted by the runtime system as originating at the <B>Button</B> object. </P>
<P>The type of <B>ActionEvent</B> generated is an <B>ACTION_PERFORMED</B> event. You will see where this information is used when instantiating the <B>ActionEvent</B> object for posting to the system event queue. </P>
<P>The posted events are automatically delivered to the <B>actionPerformed()</B> method of an <B>ActionListener</B> object registered on the <B>Button</B>. <BR>
&nbsp; <BR>
Note that this class definition does not implement the <B>MouseListener</B> interface.&nbsp; Rather, it extends the <B>MouseAdapter</B> class. </P>
<P>The class definition includes an overridden <B>mouseClicked()</B> method that is declared in the <B>MouseListener</B> interface and defined as an empty method in the <B>MouseAdapter</B> class. </P>
<P>This method contains one long and fairly complex statement that I won't attempt to explain at this point.&nbsp; It is fully explained in the lesson that discusses the posting of events to the system event queue. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>class MyMouseListener extends MouseAdapter{
&nbsp; Button toggleColorButton;//reference to the Button

&nbsp; MyMouseListener(Button toggleColorButton){//constructor
&nbsp;&nbsp;&nbsp; this.toggleColorButton = toggleColorButton;
&nbsp; }//end constructor
&nbsp;
&nbsp; //Overridden mouseClicked() method
&nbsp; public void mouseClicked(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Note that the following is a single statement
&nbsp;&nbsp;&nbsp; Toolkit.getDefaultToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSystemEventQueue().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; postEvent(new ActionEvent(toggleColorButton,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionEvent.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ACTION_PERFORMED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Toggle Color"));
&nbsp; }//end overridden mouseClicked() method
}//end MyMouseListener</PRE></TD>
</TR>
</TABLE>

<P>&nbsp; <BR>
So there you have it.&nbsp; The actual code required to implement a relatively simple GUI with three buttons and two labels where four of the five components are capable of multicasting events. <BR>
&nbsp; </P>
<P><!-prev=Java017c.htm-><!-next=Java017e.htm><!-first=Java017.htm-></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="programlisting"></A>Program Listing</H2>
</FONT><P>A complete listing of the program with extensive comments is provided in this section. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1 WIDTH=480>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Gui01.java Copyright 1998, R.G.Baldwin

The purpose of this program is to illustrate some of the
code in a relatively simple Graphical User Interface.

Note that this program uses Swing components.&nbsp; Therefore,&nbsp;
the Swing class library must be installed and accessible
to the compiler.

This program begins with a heavyweight Frame object on the
screen.&nbsp; The Frame contains five components:

A heavyweight Button with the caption "Toggle Color"
A lightweight JButton with the caption "Say Hello"
A lightweight JButton with the caption "Say Goodbye"
A green heavyweight Label with an initial caption of
&nbsp; "Color Me".&nbsp; This is the output component for the
&nbsp; program.
A red heavyweight label with the caption "Toggle Color".
&nbsp; This Label functions as a counterfeit Button object.
&nbsp;&nbsp;
The lightweight components exhibit the JavaSoft metal
look and feel.&nbsp; The heavyweight components exhibit the
look and feel of the underlying operating system.

If you click the heavyweight Button object, the background
color of the display toggles between yellow and green.
If you click the heavyweight Label object with the "Toggle
Color" caption, a mouse listener on this component creates
a counterfeit ActionEvent object and posts it to the&nbsp;
system event queue, attributed to the heavyweight Button
object.&nbsp; When it emerges from the queue, the system thinks
that someone clicked the actual Button object and toggles
the background color of the display just as though the&nbsp;
Button object had been clicked.

If you click either of the two lightweight buttons, the
caption in the display changes to either "Hello" or
"Goodbye" depending on which lightweight button was
clicked.

Note that the controlling class implements
the ActionListener interface and therefore, an object of
this class can serve as an action listener registered
on its own components.&nbsp; This leads to a compact, but&nbsp;
somewhat cryptic programming style.

The program was tested using JDK 1.1.6 and Swing 1.0.1
under Win95.
*********************************************************/
//Import required packages
import java.awt.*;
import java.awt.event.*;
import com.sun.java.swing.*;//JDK 1.1 version
//import javax.swing.*;//JDK 1.2 version

//=======================================================

public class Gui01 extends Frame implements ActionListener{
&nbsp; //Instance variables required to respond to the
&nbsp; // action event on the Button object.
&nbsp; boolean toggle = false;
&nbsp;&nbsp;
&nbsp; //Instance variable used as the output display.
&nbsp; Label display;
&nbsp;&nbsp;
&nbsp; //All applications have a main method
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //Instantiate and object of this type
&nbsp;&nbsp;&nbsp; Gui01 displayWindow = new Gui01();
&nbsp; }//end main
&nbsp; //-----------------------------------------------------

&nbsp; public Gui01(){//constructor
&nbsp;&nbsp;&nbsp; //Invoke property methods to set the title and the
&nbsp;&nbsp;&nbsp; // layout for the outer object of type Frame.
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1998, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());//set layout for container
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a new object of type Button
&nbsp;&nbsp;&nbsp; Button toggleColorButton = new Button("Toggle Color");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate the display as an object of type Label
&nbsp;&nbsp;&nbsp; // and initialize its color to green using a static
&nbsp;&nbsp;&nbsp; // constant of the Color class.
&nbsp;&nbsp;&nbsp; display = new Label("Color Me");
&nbsp;&nbsp;&nbsp; display.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a Label object that will be used as a
&nbsp;&nbsp;&nbsp; // fake button to generate counterfeit action events
&nbsp;&nbsp;&nbsp; // and attribute them to the Button object.&nbsp; Color
&nbsp;&nbsp;&nbsp; // it red.
&nbsp;&nbsp;&nbsp; Label toggleColorLabel = new Label("Toggle Color");
&nbsp;&nbsp;&nbsp; toggleColorLabel.setBackground(Color.red);&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two lightweight buttons of the Swing
&nbsp;&nbsp;&nbsp; // class JButton that will be used to cause the words
&nbsp;&nbsp;&nbsp; // Hello and Goodbye to be displayed in the display.
&nbsp;&nbsp;&nbsp; // Note the different appearance of these buttons as
&nbsp;&nbsp;&nbsp; // compared to the Button object instantiated above.
&nbsp;&nbsp;&nbsp; JButton sayHelloButton = new JButton("Say Hello");
&nbsp;&nbsp;&nbsp; JButton sayGoodbyeButton = new JButton("Say Goodbye");

&nbsp;&nbsp;&nbsp; //Add all of the components to the Frame object
&nbsp;&nbsp;&nbsp; this.add(toggleColorButton);
&nbsp;&nbsp;&nbsp; this.add(display);
&nbsp;&nbsp;&nbsp; this.add(toggleColorLabel);
&nbsp;&nbsp;&nbsp; this.add(sayHelloButton);
&nbsp;&nbsp;&nbsp; this.add(sayGoodbyeButton);

&nbsp;&nbsp;&nbsp; setSize(300,150);//Set frame size&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setVisible(true);//Display the frame

&nbsp;&nbsp;&nbsp; //Register listener objects.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //First register a mouse listener on the Label object.
&nbsp;&nbsp;&nbsp; // The behavior of this event handler when a mouse
&nbsp;&nbsp;&nbsp; // event occurs on the label will be to generate a
&nbsp;&nbsp;&nbsp; // counterfeit action event and attribute it to the
&nbsp;&nbsp;&nbsp; // Button object.
&nbsp;&nbsp;&nbsp; toggleColorLabel.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMouseListener(toggleColorButton));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Register this object as a listener object on the
&nbsp;&nbsp;&nbsp; // Button object as well as on the two JButton&nbsp;
&nbsp;&nbsp;&nbsp; // lightweight button objects.
&nbsp;&nbsp;&nbsp; toggleColorButton.addActionListener(this);
&nbsp;&nbsp;&nbsp; sayHelloButton.addActionListener(this);
&nbsp;&nbsp;&nbsp; sayGoodbyeButton.addActionListener(this);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The statement which follows instantiates anonymous
&nbsp;&nbsp;&nbsp; // inner class object of type WindowAdapter, and&nbsp;
&nbsp;&nbsp;&nbsp; // registers it for handling a windowClosing event on
&nbsp;&nbsp;&nbsp; // Frame object.&nbsp;This code uses the abbreviated syntax
&nbsp;&nbsp;&nbsp; // which defines the listener class anonymously (the&nbsp;
&nbsp;&nbsp;&nbsp; // listener class does not have a class name and the
&nbsp;&nbsp;&nbsp; // object instantiated from the class does not have
&nbsp;&nbsp;&nbsp; // a name).The behavior of this listener object causes
&nbsp;&nbsp;&nbsp; // the program to terminate when the window is closed.
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;
&nbsp; //This is the actionPerformed method for this object.
&nbsp; // This method is invoked whenever one of the buttons
&nbsp; // is clicked, or a counterfeit action event is posted
&nbsp; // with the Button object as the specified source object.
&nbsp; // The code in this method causes the color of the&nbsp;
&nbsp; // display to toggle between yellow and green or causes
&nbsp; // it to display Hello or Goodbye, depending upon which
&nbsp; // component is clicked.
&nbsp;&nbsp;
&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp; if(e.getActionCommand().equals("Toggle Color")){&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(!toggle){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toggle = true;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toggle = false;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display.setBackground(Color.green);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else

&nbsp;&nbsp;&nbsp; }else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getActionCommand().equals("Say Hello"))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; display.setText("Hello");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else display.setText("Goodbye");
&nbsp; }//end actionPerformed()
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;&nbsp;
}//end class Gui01
//=========================================================

/*This top level class is used to monitor for mouse&nbsp;
clicks on a Label object.&nbsp; Whenever the user clicks on the&nbsp;
label, the code in an object of this class creates a&nbsp;
counterfeit ActionEvent object and posts it to the&nbsp;
SystemEventQueue.&nbsp; The source of the event is specified to&nbsp;
be a particular Button object that is passed in when an&nbsp;
object of this class is instantiated.&nbsp; Thus, the Label&nbsp;
object "claims" to be the Button object and posts&nbsp;
ActionEvent objects that are interpreted by the runtime&nbsp;
system as originating at the Button object.&nbsp; The type of
ActionEvents generated are ACTION_PERFORMED events.&nbsp; The&nbsp;
events are automatically delivered to the actionPerformed()
method of an ActionListener object registered on the&nbsp;
Button. */

class MyMouseListener extends MouseAdapter{
&nbsp; Button toggleColorButton;//reference to the Button
&nbsp; //-----------------------------------------------------//

&nbsp; MyMouseListener(Button toggleColorButton){//constructor
&nbsp;&nbsp;&nbsp; //Save reference to Button&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.toggleColorButton = toggleColorButton;
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;&nbsp;
&nbsp; //This is an overridden mouseClicked() method that is
&nbsp; // declared in the MouseListener interface and defined
&nbsp; // as an empty method in the MouseAdapter class.
&nbsp; public void mouseClicked(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Note that the following is a single statement
&nbsp;&nbsp;&nbsp; Toolkit.getDefaultToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getSystemEventQueue().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; postEvent(new ActionEvent(toggleColorButton,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ActionEvent.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ACTION_PERFORMED,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Toggle Color"));
&nbsp; }//end overridden mouseClicked() method
}//end MyMouseListener
//=======================================================//</PRE></TD>
</TR>
</TABLE>

<P><!-prev=Java017d.htm-><!-first=Java017.htm-></P>
<P>-end-<!--end--></P></BODY>
</HTML>
