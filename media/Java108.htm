<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">
<meta name="AUTHOR" content="Richard G. Baldwin">
<meta name="GENERATOR" content="Microsoft FrontPage Express 2.0">
<title>... in Java by Richard G Baldwin</title>
</head>

<body bgcolor="#FFFFFF">
<!--start-->
<h3 align="center"><b><i>Richard G Baldwin (512) 223-4758, </i></b><a
href="mailto:baldwin@austin.cc.tx.us"><b><i>baldwin@austin.cc.tx.us</i></b></a><b><i>,
</i></b><a href="http://www2.austin.cc.tx.us/baldwin/"><b><i>http://www2.austin.cc.tx.us/baldwin/</i></b></a></h3>

<h2 align="center"><b><!--title-->Printing with AWT and Swing<!--endTitle--></b></h2>

<p>Java Programming, Lecture Notes # 108, Revised 11/02/98. </p>

<ul>
    <li><a href="#Preface">Preface</a></li>
    <li><a href="#Introduction">Introduction</a></li>
    <li><a href="#Sample Program using printAll Method">Sample
        Program using printAll Method</a></li>
    <li><ul>
            <li><a
                href="#Interesting Code Fragments for printAll Method">Interesting
                Code Fragments for printAll Method</a></li>
            <li><a href="#Program Listing for printAll Method">Program
                Listing for printAll Method</a></li>
        </ul>
    </li>
    <li><a
        href="#Sample Program for Painting on the Paper with AWT">Sample
        Program for Painting on the Paper with AWT</a></li>
    <li><ul>
            <li><a
                href="#Interesting Code Fragments for Painting on the Paper with AWT">Interesting
                Code Fragments for Painting on the Paper with AWT</a></li>
            <li><a
                href="#Program Listing for Painting on the Paper with AWT">Program
                Listing for Painting on the Paper with AWT</a></li>
        </ul>
    </li>
    <li><a
        href="#Sample Program for Painting on the Paper with Swing">Sample
        Program for Painting on the Paper with Swing</a></li>
    <li><ul>
            <li><a
                href="#Program Listing for Painting on the Paper with Swing">Program
                Listing for Painting on the Paper with Swing</a></li>
        </ul>
    </li>
</ul>

<hr>

<h2 align="center"><a name="Preface"></a><font color="#FF0000"><b>Preface</b></font></h2>

<p>Students in Prof. Baldwin's <b><u>Intermediate Java
Programming</u></b> classes at ACC are responsible for knowing
and understanding all of the material in this lesson. </p>

<p align="left">This lesson was originally written on May 8,
1998, using the software and documentation in the JDK 1.1.6 and
Swing 1.0.1 download packages. </p>

<h2 align="center"><a name="Introduction"></a><font
color="#FF0000">Introduction</font></h2>

<p>In an earlier lesson, we learned about the <b>Toolkit</b>
class.&nbsp; We learned that the <b>Toolkit</b> class provides a
platform-independent interface to platform-specific services such
as printing, fonts, images, and display parameters. </p>

<p>The <b>Toolkit</b> constructor is abstract and therefore, we
never directly instantiate an object of type <b>Toolkit</b>.
Rather, we obtain a <b>Toolkit</b> object by invoking the <b>getDefaultToolkit()</b>
method. This gives us an object that is appropriate for our
system. </p>

<p>There are many methods in the <b>Toolkit</b> class. The method
that is of primary interest in this program is shown below.</p>

<table border="1" bgcolor="#80FFFF">
    <tr>
        <td><b>getPrintJob</b>() - Gets a <b>PrintJob </b>object
        to use for printing&nbsp;</td>
    </tr>
</table>

<p>There are at least two different ways to print in Java.&nbsp;
One way is to get a <b>Graphics</b> object that represents the
paper in the printer and draw or paint on that object. </p>

<p>The other way is to ask a component to print itself and all of
the components that it contains using the <b>printAll()</b>
method.&nbsp; Either of these methods should work for both AWT
and Swing components.&nbsp; However, as of 5/7/98, there is a bug
that prevents <b>printAll()</b> from working properly with Swing
1.0.1 and JDK 1.1.6 under Win95. </p>

<p align="left">This lesson contains three sample programs which
illustrate the two different ways to print, both with AWT and
Swing </p>

<h2 align="center"><a name="Sample Program using printAll Method"></a><font
color="#FF0000">Sample Program using printAll Method</font></h2>

<p>The purpose of this program is to demonstrate the ability to
print the components in an AWT container that is either a
top-level container, or is embedded inside another AWT container.
</p>

<p>Even though this application only works with AWT components,
it is hoped that it can be made to work with Swing components
once the bugs are all worked out of Swing and the JDK. </p>

<p>This program places one of two selectable <b>Panel</b> objects
and four <b>Button</b> objects in a <b>Frame</b> object. </p>

<p>One of the buttons has a listener that causes the currently
selected <b>Panel</b> and all the components contained in the <b>Panel</b>
to be printed. (See comment below regarding the printing of the <b>Panel</b>.)
</p>

<p>Another of the buttons has a listener that causes the
top-level <b>Frame</b> container and all the components contained
in the <b>Frame</b> to be printed. </p>

<p>Actually, with JDK 1.1.6 under Win95, the <b>Frame</b> itself
isn't printed.&nbsp; Only its contents are printed.&nbsp; This
seems to contradict the specifications for the <b>printAll()</b>
method in the JavaSoft documentation which contains the following
description of the <b>printAll()</b> method:&nbsp; </p>

<table border="1" bgcolor="#66FFFF" cols="1">
    <tr>
        <td>&quot;Prints this component and all of its
        subcomponents.&quot;</td>
    </tr>
</table>

<p>The same is probably true for the <b>Panel</b>, but a <b>Panel</b>
doesn't have any distinguishing characteristics that would make
it apparent that it is or isn't being printed. </p>

<p>Both of the above mentioned buttons actually share the same
listener object, but the end result is as described above. </p>

<p>The other two buttons are used to select between two different
<b>Panel</b> objects.&nbsp; In other words, the user can select
between two different panels and cause the one currently
installed in the <b>Frame</b> to be printed. </p>

<p>When the selected <b>Panel</b> is printed, the other
components in the Frame are ignored. </p>

<p>When the <b>Frame</b> is printed, all of the components in the
<b>Frame</b>, including the currently installed <b>Panel</b>, are
printed. </p>

<p>Simply for illustration, one of the selectable <b>Panel</b>
objects contains a <b>Label</b>, a <b>TextField</b>, and a <b>Button</b>
that is not active. </p>

<p>The other selectable <b>Panel</b> contains a <b>Label</b>, a <b>TextField</b>
and two <b>Button</b> objects that are not active. </p>

<p align="left">This program was tested using JDK 1.1.6 under
Win95 </p>

<h3 align="center"><a
name="Interesting Code Fragments for printAll Method"></a><font
color="#FF0000">Interesting Code Fragments for printAll Method</font></h3>

<p>This section contains a number of interesting code fragments
along with explanations of those fragments.&nbsp; A complete
listing of the program which shows all of the fragments in
context is provided in a later section. </p>

<p>Just to start things off, the first fragment shows the
controlling class, containing a <b>main()</b> method that
instantiates an object of the <b>GUI</b> class.&nbsp; The object
of the <b>GUI</b> class actually appears on the screen. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>public class Print04 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Print04</pre>
        </td>
    </tr>
</table>

<p>The next fragment shows the beginning of the GUI class,
including the declaration of several reference variables. </p>

<p>The container named <b>myFrame</b> and all of the components
that it contains will be printed or sent to a print file when the
<b>Button</b> with the caption <i>&quot;Print the Frame&quot;</i>
is clicked. (With JDK 1.1.6, only the components that it contains
are printed. I don't know if this is a bug or an interpretation
issue regarding the specifications for the method named <b>printAll</b>.)
</p>

<p>The container named <b>panelToPrint</b> and all of the
components that it contains will be printed or sent to a print
file when the <b>Button</b> with the caption <i>&quot;Print the
Panel&quot;</i> is clicked. (With JDK 1.1.6, it is probable that
only the components that it contains are printed but this is not
obvious because a <b>Panel</b> has no distinguishing features
that would cause the viewer to be able to determine if the <b>Panel</b>
is printed or not.) </p>

<p>The references to the two <b>Panel</b> objects are references
to the two selectable panels. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>class GUI{
&nbsp; Frame myFrame = new Frame(&quot;Copyright 1997, R.G.Baldwin&quot;);
&nbsp; Panel panelToPrint = null;
&nbsp;&nbsp;
&nbsp; //References to two selectable panels
&nbsp; Panel panel0;
&nbsp; Panel panel1;</pre>
        </td>
    </tr>
</table>

<p>The following fragment shows the beginning of the constructor
for the <b>GUI</b> object.&nbsp; It also shows a number of
components being instantiated and added to the <b>Frame</b>.&nbsp;
By now, this should be &quot;old stuff&quot; to you so I won't
waste your time with an explanation.&nbsp; The material is being
included in this section only for the purpose of providing
continuity. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //The following buttons cause the Panel and Frame
&nbsp;&nbsp;&nbsp; // containers to be printed.
&nbsp;&nbsp;&nbsp; Button printPanelButton = new Button(&quot;Print the Panel&quot;);
&nbsp;&nbsp;&nbsp; printPanelButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PrintActionListener());
&nbsp;&nbsp;&nbsp; myFrame.add(printPanelButton,&quot;North&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button printFrameButton = new Button(&quot;Print the Frame&quot;);
&nbsp;&nbsp;&nbsp; printFrameButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PrintActionListener());
&nbsp;&nbsp;&nbsp; myFrame.add(printFrameButton,&quot;South&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The following buttons are used to select between two
&nbsp;&nbsp;&nbsp; // different panels for display
&nbsp;&nbsp;&nbsp; Button selectPanel0Button =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button(&quot;Select Panel 0&quot;);
&nbsp;&nbsp;&nbsp; selectPanel0Button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SelectPanel0Listener());
&nbsp;&nbsp;&nbsp; myFrame.add(selectPanel0Button,&quot;West&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button selectPanel1Button =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button(&quot;Select Panel 1&quot;);
&nbsp;&nbsp;&nbsp; selectPanel1Button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SelectPanel1Listener());
&nbsp;&nbsp;&nbsp; myFrame.add(selectPanel1Button,&quot;East&quot;);</pre>
        </td>
    </tr>
</table>

<p>Code in the following fragment is used to construct the
selectable <b>Panel</b> objects that will be assigned to the <b>panelToPrint</b>
reference when a selection is made. The print routine causes the
container referenced by <b>panelToPrint</b> and all of its
components to be printed. (See earlier comments regarding whether
the container or just its contents should be printed.) </p>

<p>Again, this code should be very familiar to you by now and is
being included here simply to provide continuity.&nbsp; Some
additional code that should be familiar to you was omitted for
brevity, and that is the end of the <b>GUI</b> constructor. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp; panel0 = new Panel();
&nbsp;&nbsp;&nbsp; Label panel0Label = new Label(&quot;Panel 0&quot;);
&nbsp;&nbsp;&nbsp; panel0.add(panel0Label);
&nbsp;&nbsp;&nbsp; TextField panel0TextField = new TextField(&quot;TextField&quot;);
&nbsp;&nbsp;&nbsp; panel0.add(panel0TextField);
&nbsp;&nbsp;&nbsp; panel0.add(new Button(&quot;Dummy Button&quot;));
&nbsp;&nbsp;&nbsp; panel0.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; panel1 = new Panel();
&nbsp;&nbsp;&nbsp; Label panel1Label = new Label(&quot;Panel 1&quot;);
&nbsp;&nbsp;&nbsp; panel1.add(panel1Label);
&nbsp;&nbsp;&nbsp; TextField panel1TextField = new TextField(&quot;TextField&quot;);
&nbsp;&nbsp;&nbsp; panel1.add(panel1TextField);
&nbsp;&nbsp;&nbsp; panel1.add(new Button(&quot;One Dummy Button&quot;));
&nbsp;&nbsp;&nbsp; panel1.add(new Button(&quot;Another Dummy Button&quot;));
&nbsp;&nbsp;&nbsp; panel1.setBackground(Color.pink);

&nbsp;&nbsp;&nbsp; // code omitted here
&nbsp; }//end constructor</pre>
        </td>
    </tr>
</table>

<p>The code beginning is the next fragment is what this lesson is
all about. This code begins the definition of an inner class of
the <b>GUI</b> class that is used to cause the <b>Panel</b>
referenced by <b>panelToPrint</b> or the <b>Frame</b> referenced
by <b>myFrame</b> to be printed. </p>

<p>This class is an action listener class and the code inside the
<b>actionPerformed()</b> method actually causes the printing to
take place. </p>

<p>Because of the importance of this code to this lesson, we will
break it up into small fragments and discuss each fragment in
some detail. </p>

<p>The first fragment is used to get a <b>PrintJob</b>
object.&nbsp; This causes the system-standard print dialog to
appear on the screen.&nbsp; If the user closes the dialog without
allowing printing, the <b>getPrintJob()</b> method will return
null. </p>

<p>On most systems, the standard print dialog allows the user to
specify the printer that is to receive the material, select the
print quality, send the material to a print file, or make other
standard selections regarding printing on that system.</p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>&nbsp; class PrintActionListener implements ActionListener{

&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintJob myPrintJob = myFrame.getToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>getPrintJob</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame, &quot;Copyright 1998 R.G.Baldwin&quot;, null);</pre>
        </td>
    </tr>
</table>

<p>As mentioned above, the user can cause the <b>getPrintJob()</b>
method to return <b>null</b>.&nbsp; Therefore, the following
fragments begins with a test for <b>null</b> and if not null,
proceeds with the printing process. </p>

<p>The first step is to use the <b>getGraphics()</b> method to
get a <b>Graphics</b> object that can probably be thought of as
representing the paper in the printer.&nbsp; This object is
required as a parameter for the <b>printAll()</b> method that is
invoked shortly thereafter. </p>

<p>A test is performed to confirm that a valid <b>Graphics</b>
object was obtained, and if true, the program proceeds with the
printing process. </p>

<p>The next requirement in this program is to determine which
component is to be printed: </p>

<ul>
    <li>The outer container which is a <b>Frame</b> object.</li>
    <li>An inner container which is a <b>Panel</b> object.</li>
</ul>

<p>This is accomplished by invoking the <b>getActionCommand()</b>
method on the incoming <b>ActionEvent</b> object to identify the
source of the event. </p>

<p>Then, depending on the source, the <b>printAll()</b> method is
invoked on either the <b>Panel</b> or the <b>Frame</b>, passing
the <b>Graphics</b> object as a parameter. </p>

<p>As discussed earlier, the JavaSoft documentation for JDK 1.1.6
indicates that this will cause the container on which the method
is invoked and all of the components that it contains to be
printed on the printer.&nbsp; Also, as mentioned earlier, in JDK
1.1.6 under Win95, only the components that it contains are
actually printed.&nbsp; The container is not printed. </p>

<p>Since the system is actually painting graphics components onto
the paper, the quality will depend on the printer being
used.&nbsp; For the components being used in this sample program,
the quality is actually quite good on a Cannon BJC-4000 printer
operating in black-and-white mode. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(myPrintJob != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Graphics printGraphics = myPrintJob.getGraphics();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(printGraphics != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getActionCommand().equals(&quot;Print the Panel&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panelToPrint.printAll(printGraphics);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else myFrame.printAll(printGraphics);</pre>
        </td>
    </tr>
</table>

<p>After the material is painted on the paper, we need to force a
form feed on the printer to eject the paper. We also need to free
up the resources that are tied up by the <b>Graphics</b>
object.&nbsp; This is accomplished by invoking the <b>dispose()</b>
method on the <b>Graphics</b> object as shown in the following
code fragment. </p>

<p>This fragment also invokes the <b>end()</b> method on the <b>PrintJob</b>
object, which, according to the JavaSoft documentation in JDK
1.1.6: </p>

<table border="1" bgcolor="#66FFFF" cols="1">
    <tr>
        <td>&quot;Ends the print job and does any necessary
        cleanup.&quot;</td>
    </tr>
</table>

<p>This fragment also shows the <b>else</b> side of a couple of
earlier<b> if</b> statements that were used to confirm that the <b>PrintJob</b>
and <b>Graphics</b> objects were valid.&nbsp; If they were not
valid, the printing process is aborted with some messages
displayed on the screen (would probably be better to throw an
exception).</p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printGraphics.dispose();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Didn't get print graphics object&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myPrintJob.end<b>()</b>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;PrintJob cancelled by user&quot;);
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener</pre>
        </td>
    </tr>
</table>

<p align="left">The program contains two additional <b>ActionListener</b>
class definitions that are used to control the process of
selecting one of two <b>Panel</b> objects for display.&nbsp;
Since that is not really the thrust of this lesson, a discussion
of these classes&nbsp; will not be provided in this
section.&nbsp; However, there is some important information
provided there that is not provided in other lessons of this
tutorial.&nbsp; You should take the opportunity to study those
classes in the complete program listing that follows.</p>

<h3 align="center"><a name="Program Listing for printAll Method"></a><font
color="#FF0000">Program Listing for printAll Method</font></h3>

<p>This section contains a complete listing of the program. The
lesson resumes following this section with a discussion of a
printing program that paints material on the paper using AWT. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>/*File Print04.java
Copyright 1998 R.G.Baldwin

The purpose of this program is to demonstrate the ability
to print the components in an AWT container that
is either a top-level container, or is embedded inside&nbsp;
another AWT container.

Even though this application only works with AWT&nbsp;
components, it is hoped that it can be made to work with
Swing components once the bugs are all worked out of Swing
and the JDK.

This program places one of two selectable Panels and four
Buttons in a Frame.

One of the buttons has a listener that causes the currently
selected Panel and all the components contained in the&nbsp;
Panel to be printed. (See comment below regarding the&nbsp;
printing of the Panel.)

Another of the buttons has a listener that causes the
top-level Frame container and all the components contained
in the Frame to be printed.&nbsp;

Actually, with JDK 1.1.6 under Win95, the Frame itself
isn't printed.&nbsp; Only its contents are printed.&nbsp; This seems
to contradict the specifications for the printAll()
method in the JavaSoft documentation which contains the
following description of the printAll() method:
&nbsp;&nbsp;
&quot;Prints this component and all of its subcomponents.&quot;&nbsp;&nbsp;

The same is probably true for the Panel, but a Panel
doesn't have any distinguishing characteristics that would
make it apparent that it is or isn't being printed.
&nbsp;&nbsp;
Both of the above mentioned buttons actually share
the same listener object, but the end result is as&nbsp;
described above.

The other two buttons are used to select between two&nbsp;
different Panels.&nbsp; In other words, the user can select
between two different panels and cause the one currently
installed in the Frame to be printed.

When the selected Panel is printed, the other components in
the Frame are ignored.

When the Frame is printed, all of the components in the
Frame, including the currently installed Panel, are&nbsp;
printed.

Simply for illustration, one of the selectable Panels&nbsp;
contains a Label, a TextField, and a Button that is not&nbsp;
active.

The other selectable Panel contains a Label, a TextField&nbsp;
and two Buttons that are not active.

Tested using JDK 1.1.6 under Win95
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class Print04 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Print04
//=======================================================//

//This class is used to instantiate a Graphical User
// Interface object
class GUI{
&nbsp; //The container named myFrame and all of the
&nbsp; // components that it contains will be printed or sent
&nbsp; // to a print file when the Button with the caption
&nbsp; // &quot;Print the Frame&quot; is clicked. (With JDK 1.1.6, only
&nbsp; // the components that it contains are printed. Don't
&nbsp; // know if this is a bug or an interpretation issue
&nbsp; // regarding the specifications for the method named
&nbsp; // printAll().)&nbsp;
&nbsp; Frame myFrame = new Frame(&quot;Copyright 1997, R.G.Baldwin&quot;);
&nbsp;&nbsp;
&nbsp; //The container named panelToPrint and all of the
&nbsp; // components that it contains will be printed or sent
&nbsp; // to a print file when the Button with the caption
&nbsp; // &quot;Print the Panel&quot; is clicked. (With JDK 1.1.6, it is
&nbsp; // probable that only the components that it contains are
&nbsp; // printed but this is not obvious because a Panel has
&nbsp; // no distinguishing features that would cause the&nbsp;
&nbsp; // viewer to be able to determine if the Panel is printed
&nbsp; // or not.)&nbsp;
&nbsp; Panel panelToPrint = null;
&nbsp;&nbsp;
&nbsp; //References to two selectable panels
&nbsp; Panel panel0;
&nbsp; Panel panel1;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //The following button causes the panelToPrint
&nbsp;&nbsp;&nbsp; // container to be printed.
&nbsp;&nbsp;&nbsp; Button printPanelButton = new Button(&quot;Print the Panel&quot;);
&nbsp;&nbsp;&nbsp; printPanelButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PrintActionListener());
&nbsp;&nbsp;&nbsp; myFrame.add(printPanelButton,&quot;North&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button printFrameButton = new Button(&quot;Print the Frame&quot;);
&nbsp;&nbsp;&nbsp; printFrameButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PrintActionListener());
&nbsp;&nbsp;&nbsp; myFrame.add(printFrameButton,&quot;South&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The following buttons are used to select between two
&nbsp;&nbsp;&nbsp; // different panels for display
&nbsp;&nbsp;&nbsp; Button selectPanel0Button =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button(&quot;Select Panel 0&quot;);
&nbsp;&nbsp;&nbsp; selectPanel0Button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SelectPanel0Listener());
&nbsp;&nbsp;&nbsp; myFrame.add(selectPanel0Button,&quot;West&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button selectPanel1Button =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button(&quot;Select Panel 1&quot;);
&nbsp;&nbsp;&nbsp; selectPanel1Button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SelectPanel1Listener());
&nbsp;&nbsp;&nbsp; myFrame.add(selectPanel1Button,&quot;East&quot;);

&nbsp;&nbsp;&nbsp; //Construct the selectable Panels that will be assigned
&nbsp;&nbsp;&nbsp; // to the panelToPrint reference when a selection is
&nbsp;&nbsp;&nbsp; // made.&nbsp; The print routine causes the container&nbsp;
&nbsp;&nbsp;&nbsp; // referenced by panelToPrint and all of its components
&nbsp;&nbsp;&nbsp; // to be printed. (See earlier comments regarding&nbsp;
&nbsp;&nbsp;&nbsp; // whether the container or just its contents should
&nbsp;&nbsp;&nbsp; // be printed.)
&nbsp;&nbsp;&nbsp; panel0 = new Panel();
&nbsp;&nbsp;&nbsp; Label panel0Label = new Label(&quot;Panel 0&quot;);
&nbsp;&nbsp;&nbsp; panel0.add(panel0Label);
&nbsp;&nbsp;&nbsp; TextField panel0TextField = new TextField(&quot;TextField&quot;);
&nbsp;&nbsp;&nbsp; panel0.add(panel0TextField);
&nbsp;&nbsp;&nbsp; panel0.add(new Button(&quot;Dummy Button&quot;));
&nbsp;&nbsp;&nbsp; panel0.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; panel1 = new Panel();
&nbsp;&nbsp;&nbsp; Label panel1Label = new Label(&quot;Panel 1&quot;);
&nbsp;&nbsp;&nbsp; panel1.add(panel1Label);
&nbsp;&nbsp;&nbsp; TextField panel1TextField = new TextField(&quot;TextField&quot;);
&nbsp;&nbsp;&nbsp; panel1.add(panel1TextField);
&nbsp;&nbsp;&nbsp; panel1.add(new Button(&quot;One Dummy Button&quot;));
&nbsp;&nbsp;&nbsp; panel1.add(new Button(&quot;Another Dummy Button&quot;));
&nbsp;&nbsp;&nbsp; panel1.setBackground(Color.pink);

&nbsp;&nbsp;&nbsp; //Need a valid reference in panelToPrint to prevent a
&nbsp;&nbsp;&nbsp; // null pointer exception when a selection is made and
&nbsp;&nbsp;&nbsp; // an attempt is made to remove the old reference.
&nbsp;&nbsp;&nbsp; panelToPrint = panel0;

&nbsp;&nbsp;&nbsp; myFrame.setSize(340,200);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //This is an anonymous inner class of the GUI class&nbsp;
&nbsp;&nbsp;&nbsp; // used to terminate the program when the user closes
&nbsp;&nbsp;&nbsp; // the Frame
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // the container referenced by panelToPrint or the Frame
&nbsp; // referenced by myFrame to be printed.
&nbsp; class PrintActionListener implements ActionListener{

&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a PrintJob object.&nbsp; This causes the system-
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // standard print dialog to appear.&nbsp; Closing the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // dialog without allowing printing will return null.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintJob myPrintJob = myFrame.getToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getPrintJob(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame, &quot;Copyright 1998 R.G.Baldwin&quot;, null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(myPrintJob != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a graphics object for printing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Graphics printGraphics = myPrintJob.getGraphics();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(printGraphics != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the printAll() method of the Panel
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object or the Frame object to cause the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // components contained in the Panel or the Frame
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to be drawn on the graphics object and painted
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // onto the paper in the printer.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getActionCommand().equals(&quot;Print the Panel&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panelToPrint.printAll(printGraphics);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else myFrame.printAll(printGraphics);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Cause a form feed on the printer and free
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the resources tied up by the graphics object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printGraphics.dispose();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Didn't get print graphics object&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //End the print job and do any necessary cleanup.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myPrintJob.end();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;PrintJob cancelled by user&quot;);

&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // panel0 to be selected for display and printing.
&nbsp; class SelectPanel0Listener implements ActionListener{

&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.remove(panelToPrint);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panelToPrint = panel0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.add(panelToPrint,&quot;Center&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.invalidate();//force a redraw
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.repaint();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Note that repaint() can be used here instead of
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // setVisible() if setVisible() has been previously
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // invoked on the Frame containing this panel at
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // some previous time in the program.&nbsp; I don't know
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // which is most efficient.&nbsp; If repaint() is most
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // efficient, one possibility would be to cycle&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // through all the possible panels when the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // starts invoking setVisible(true) for each of them
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and then using repaint() here instead of&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // setVisible().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//

&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // panel1 to be selected for display and printing.
&nbsp; class SelectPanel1Listener implements ActionListener{

&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.remove(panelToPrint);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panelToPrint = panel1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.add(panelToPrint,&quot;Center&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.invalidate();//force a redraw
//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.repaint(); //see comment above
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//

}//end class GUI
//=======================================================//</pre>
        </td>
    </tr>
</table>

<h2 align="center"><a
name="Sample Program for Painting on the Paper with AWT"></a><font
color="#FF0000">Sample Program for Painting on the Paper with AWT</font></h2>

<p>The purpose of this program is to demonstrate the ability to <i>selectively</i>
print the contents of the components in an AWT container that is
embedded inside another AWT container. </p>

<p>The word <i>selectively</i> is used in this case to
differentiate the approach to printing used in this program from
the approach used in the program named <b>Print04</b> as
described earlier in this lesson.&nbsp; That program used the <b>printAll()
</b>method to print all of the components in a container.&nbsp;
This program has the ability to select which components are to be
printed.&nbsp; It also has the ability to print selected
information about those components. </p>

<p>Similar to the program named <b>Print04</b>, this program
places one of two selectable custom <b>Panel</b> objects and
three <b>Button</b> objects in a <b>Frame</b>. The <b>Panel</b>
objects know how to print themselves when their overridden <b>paint()</b>
method is invoked. </p>

<p>One of the buttons has a listener that causes the currently
selected <b>Panel</b> to print itself.&nbsp; This requires that
each panel have an overridden <b>paint()</b> method which in turn
requires that each panel be a custom <b>Panel</b> type that
extends <b>Panel</b>.&nbsp; The overridden<b> paint()</b> method
defines the manner in which the panel prints itself. </p>

<p>The two other buttons are used to select between the two <b>Panel</b>
objects for display and printing.&nbsp; In other words, the user
can select between two different panels and cause the one
currently installed in the <b>Frame</b> to be printed. </p>

<p>When the selected <b>Panel</b> is printed, the other
components in the <b>Frame</b> are ignored. </p>

<p>For purposes of illustration, one of the selectable <b>Panel</b>
objects contains a <b>Label</b>, a <b>TextField</b>, and a <b>Button</b>
that is not active. </p>

<p>The other selectable <b>Panel</b> contains a <b>Label</b>, a <b>TextField</b>
and two <b>Button</b> objects that are not active. </p>

<p>The print format defined in the overridden <b>paint() </b>methods
causes the current text from the <b>Label</b> and the <b>TextField</b>
to be printed and causes the captions on the <b>Button</b>
objects to be printed.&nbsp; This print format is for
illustration only. Using this approach, you have total freedom to
decide how to print the information associated with each of the
components in your program. </p>

<p align="left">This program was tested using JDK 1.1.6 under
Win95 </p>

<h3 align="center"><a
name="Interesting Code Fragments for Painting on the Paper with AWT"></a><font
color="#FF0000">Interesting Code Fragments for Painting on the
Paper with AWT</font></h3>

<p>Much of the code in this program is either identical or very
similar to the code in the previously discussed program named <b>Print04</b>.&nbsp;
We will not repeat that discussion.&nbsp; Rather, we will attempt
to present and discuss only the code that represents new
programming concepts in this section.&nbsp; A complete listing of
the program is provided in a later section. </p>

<p>In some cases, I will provide a skeleton showing <b>//snip</b>
to indicate that code has been omitted for brevity. </p>

<p>Consider first the <b>GUI</b> class as shown in the following
fragment. </p>

<p>This fragment shows references to two selectable custom panels
that can be installed in the <b>Frame</b> object. </p>

<p>Significantly different from the previous program is the fact
that&nbsp; they are of custom panel type <b>MyPanelTypeX</b>.&nbsp;
They cannot be of type <b>Panel</b> as in the previous program
because it will later be necessary to provide an overridden <b>paint()</b>
method.&nbsp; Therefore, they must be of a type that extends <b>Panel</b>.&nbsp;
Also, they must be of different types because their appearance is
different and the manner in which they print themselves is
different. &nbsp; </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>class GUI {
&nbsp; //snip
&nbsp; MyPanelType0 panel0;
&nbsp; MyPanelType1 panel1;</pre>
        </td>
    </tr>
</table>

<p>The constructor for the <b>GUI</b> class is very similar to
the previous program except that the instantiation of the custom
panels invokes the constructors for the custom panel classes as
shown in the following fragment. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //snip

&nbsp;&nbsp;&nbsp; panel0 = new MyPanelType0();
&nbsp;&nbsp;&nbsp; panel1 = new MyPanelType1();

&nbsp;&nbsp;&nbsp; //snip
&nbsp; }//end constructor
&nbsp; //=====================================================//</pre>
        </td>
    </tr>
</table>

<p>This brings us to an inner class of the <b>GUI</b> class that
is used to cause the custom panel object referenced by the
reference variable named <b>areaToPrint</b> to print
itself.&nbsp; This is accomplished by getting a printer context
and passing it to the overridden <b>paint()</b> method for the
custom panel referenced by <b>areaToPrint</b>. </p>

<p>Most of the code in this class is the same as or very similar
to the code in the previous program.&nbsp; The following fragment
highlights the code that is significantly different between the
two. </p>

<p>The fragment picks up with the <b>actionPerformed()</b> method
of the <b>PrintActionListener</b> class where we invoke the
custom <b>paint()</b> method of the object referred to by <b>areaToPrint</b>
passing the <b>printGraphics</b> object as a parameter. This will
cause the object to print itself. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //snip
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(myPrintJob != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get graphics object for printing
&nbsp;<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Graphics printGraphics = myPrintJob.getGraphics()</strong>;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(printGraphics != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke custom paint() method of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object referred to by areaToPrint passing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // PrintGraphics object as parameter. This
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // will cause object to print itself.
<strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; areaToPrint.paint(printGraphics);</strong>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Cause form feed on printer and free
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // resources tied up by graphics object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printGraphics.dispose();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //snip
&nbsp;&nbsp;&nbsp; }//end actionPerformed()</pre>
        </td>
    </tr>
</table>

<p>That brings us to the class from which the custom panels are
instantiated.&nbsp; Objects of this class know how to print
themselves when their overridden <b>paint()</b> method is invoked
and passed a <b>PrintGraphics</b> object as a parameter.&nbsp;
The format in which the material is printed is defined in the
overridden <b>paint()</b> method. </p>

<p>Some of the code in this class is pretty standard stuff, so I
will snip it out for brevity. </p>

<p>An important point to note is that this class extends the <b>Panel</b>
class.&nbsp; That makes it possible to override the <b>paint()</b>
method of the <b>Panel</b> class. </p>

<p>I will preserve the overridden <b>paint()</b> method because
it contains information that you need to know. </p>

<p>In the overridden <b>paint()</b> method, it is necessary to
separate screen painting from printer painting. Otherwise, this
material that is intended for printing would also appear on the
screen when the object is painted on the screen. </p>

<p>A test is performed to execute the primary code in the
overridden paint method only if the <b>Graphics</b> object is of
type <b>PrintGraphics</b>. If not, the default paint method of
the superclass is invoked to preserve the ability to paint on the
screen. </p>

<p>This overridden version of <b>paint()</b> prints a header line
and then simply extracts data from the components in the panel
and prints that data on successive lines.&nbsp; This is where you
would insert the code required to print your data in your format.
</p>

<p>I will continue this discussion following the box containing
the fragment. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>&nbsp; class MyPanelType0 extends Panel{
&nbsp;&nbsp;&nbsp; //Components containing data to be printed.
&nbsp;&nbsp;&nbsp; Label panel0Label;
&nbsp;&nbsp;&nbsp; TextField panel0TextField;
&nbsp;&nbsp;&nbsp; Button panel0Button0;

&nbsp;&nbsp;&nbsp; //snip the constructor

&nbsp;&nbsp;&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>if(g instanceof PrintGraphics)</b>{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int leftMargin = 10;//X-position of each line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int topMargin = 20;//Y-position of first line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int lineIncrement = 13;//height of each line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.BOLD, 18));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(&quot;Hello from Panel 0&quot;,leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.PLAIN, 10));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of Label: &quot; + panel0Label.getText(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftMargin,topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of TextField: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0TextField.getText(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftMargin,topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Caption on Button: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0Button0.getLabel(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else//g is not a PrintGraphics object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the paint method of the Panel class.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.paint(g);
&nbsp;&nbsp;&nbsp; }//end overridden paint()
&nbsp; }//end class MyPanelType0
&nbsp; //=====================================================//</pre>
        </td>
    </tr>
</table>

<p>Note that printing contexts do not have a default font. You
must set it or the system will crash under Win95 (as of JDK
1.1.6). </p>

<p>As you can see, printing consists simply of invoking the <b>drawString()</b>
method on the <b>PrintGraphics</b> object in much the same way
that we programmed the <i>Hello World</i> applet way back at the
beginning of the Introductory Java Tutorial. </p>

<p>You can think of this simply as painting on the paper.&nbsp;
This means that you&nbsp; have the ability to place virtually any
graphics on the paper that you could place on the screen
(circles, lines, boxes, etc.).&nbsp; Therefore, you don't have to
be satisfied with simple text output.&nbsp; In this respect, you
are limited only by your own creativity. </p>

<p>At the end of this overridden <b>paint()</b> method (on the <b>else</b>
side of an <b>if-else</b> statement) is a statement that invokes
the <b>paint()</b> method of the superclass (<b>Panel</b> in this
case) when the overridden <b>paint()</b> method is invoked but it
is not invoked with a parameter of type <b>PrintGraphics</b>.&nbsp;
This is needed to preserve the ability to paint the custom panel
on the screen. </p>

<p>This class is followed by another very similar class for the
other custom panel.&nbsp; I will omit that class for brevity, but
you can view it in the complete program listing that follows
later. </p>

<p>This is also followed by two class definitions for action
listeners that are used to select the custom panel to be
installed in the <b>Frame</b> for viewing and printing.&nbsp;
These class definitions are essentially the same as in the
program named <b>Print04</b>.&nbsp; Therefore, we will also omit
them for brevity. </p>

<p align="left">And that concludes the discussion of interesting
code fragments for this sample program.</p>

<h3 align="center"><a
name="Program Listing for Painting on the Paper with AWT"></a><font
color="#FF0000">Program Listing for Painting on the Paper with
AWT</font></h3>

<p>A complete listing of the program is contained in this
section.&nbsp; One additional sample program follows this one
which deals with using the paint method to print Swing
components. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>/*File Print05.java
Copyright 1998 R.G.Baldwin

The purpose of this program is to demonstrate the ability
to selectively print the contents of the components in an
AWT container that is embedded inside another AWT&nbsp;
container.

The word selectively is used in this case to differentiate
the approach to printing used in this program from the
approach used in the program named Print04.&nbsp; That program
used the printAll() method to print all of the components
in a container.&nbsp; This program has the ability to select
which components are to be printed.&nbsp; It also has the&nbsp;
ability to print selected information about those
components.

Similar to the program named Print04, this program places
one of two selectable custom Panel objects and three
Button objects in a Frame. The Panel objects know how to
print themselves when their overridden paint() method is
invoked.

One of the buttons has a listener that causes the currently
selected Panel to print itself.&nbsp; This requires that each&nbsp;
panel have an overridden paint() method which in turn&nbsp;
requires that each panel be a custom panel type that&nbsp;
extends Panel.&nbsp; The overridden paint() method defines the&nbsp;
manner in which the panel prints itself.

The two other buttons are used to select between the two&nbsp;
Panels for display and printing.&nbsp; In other words, the user
can select between two different panels and cause the one&nbsp;
currently installed in the Frame to be printed.

When the selected Panel is printed, the other components in
the Frame are ignored.

For purposes of illustration, one of the selectable Panel
objects contains a Label, a TextField, and a Button that
is not active.

The other selectable Panel contains a Label, a TextField&nbsp;
and two Button objects that are not active.

The print format defined in the overridden paint() methods
causes the current text from the Label and the TextField to
be printed and causes the labels from the Button objects
to be printed.&nbsp; This print format is for illustration only.
Using this approach, you have total freedom to decide how
to print the information associated with the components
in your program.

Tested using JDK 1.1.6 under Win95
**********************************************************/

import java.awt.*;
import java.awt.event.*;
//=======================================================//

public class Print05 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Print05
//=======================================================//

//This class is used to instantiate a Graphical User
// Interface object
class GUI {
&nbsp; Frame myFrame = new Frame(&quot;Copyright 1997, R.G.Baldwin&quot;);
&nbsp;&nbsp;
&nbsp; //The container objects referenced by areaToPrint will be
&nbsp; // asked to print themselves.
&nbsp; Panel areaToPrint = null;
&nbsp;&nbsp;
&nbsp; //Two selectable custom panels that can be installed
&nbsp; // in the Frame object.&nbsp; Note that they are of custom
&nbsp; // panel type MyPanelTypeX.&nbsp; They must be of different
&nbsp; // types because their appearance is different and the
&nbsp; // manner in which they print themselves is different.
&nbsp; MyPanelType0 panel0;
&nbsp; MyPanelType1 panel1;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //The following button causes the container object
&nbsp;&nbsp;&nbsp; // currently referred to by areaToPrint to print&nbsp;
&nbsp;&nbsp;&nbsp; // itself.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button printButton = new Button(&quot;Print&quot;);
&nbsp;&nbsp;&nbsp; printButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PrintActionListener());
&nbsp;&nbsp;&nbsp; myFrame.add(printButton,&quot;North&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The following buttons are used to select different
&nbsp;&nbsp;&nbsp; // panels for display and printing.
&nbsp;&nbsp;&nbsp; Button selectPanel0Button =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button(&quot;Select Panel 0&quot;);
&nbsp;&nbsp;&nbsp; selectPanel0Button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SelectPanel0Listener());
&nbsp;&nbsp;&nbsp; myFrame.add(selectPanel0Button,&quot;West&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Button selectPanel1Button =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Button(&quot;Select Panel 1&quot;);
&nbsp;&nbsp;&nbsp; selectPanel1Button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SelectPanel1Listener());
&nbsp;&nbsp;&nbsp; myFrame.add(selectPanel1Button,&quot;East&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Construct the selectable Panels that will be assigned
&nbsp;&nbsp;&nbsp; // to the areaToPrint reference when a selection is
&nbsp;&nbsp;&nbsp; // made.&nbsp; When these panels print themselves, the print
&nbsp;&nbsp;&nbsp; // routine causes the contents of the components in the
&nbsp;&nbsp;&nbsp; // container to be printed.
&nbsp;&nbsp;&nbsp; panel0 = new MyPanelType0();
&nbsp;&nbsp;&nbsp; panel1 = new MyPanelType1();

&nbsp;&nbsp;&nbsp; //Need a valid reference in areaToPrint to prevent a
&nbsp;&nbsp;&nbsp; // null pointer exception when a selection is made and
&nbsp;&nbsp;&nbsp; // an attempt is made to remove the old reference.
&nbsp;&nbsp;&nbsp; areaToPrint = panel0;

&nbsp;&nbsp;&nbsp; myFrame.setSize(340,200);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //This is an anonymous inner class of the GUI class&nbsp;
&nbsp;&nbsp;&nbsp; // used to terminate the program when the user closes
&nbsp;&nbsp;&nbsp; // the Frame
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // the container referenced by areaToPrint to print
&nbsp; // itself.&nbsp; This is accomplished by getting a printer
&nbsp; // context and passing it to the overridden paint()
&nbsp; // method for the container referenced by areaToPrint.
&nbsp; class PrintActionListener implements ActionListener{

&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a PrintJob object.&nbsp; This causes the system-
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // standard print dialog to appear.&nbsp; Closing the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // dialog without allowing printing will return null.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintJob myPrintJob = myFrame.getToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getPrintJob(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame, &quot;Copyright R.G.Baldwin&quot;, null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(myPrintJob != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a graphics object for printing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Graphics printGraphics = myPrintJob.getGraphics();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(printGraphics != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the custom paint() method of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object referred to by areaToPrint passing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the PrintGraphics object as a parameter. This
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // will cause the object to print itself.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; areaToPrint.paint(printGraphics);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Cause a form feed on the printer and free
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the resources tied up by the graphics object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printGraphics.dispose();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Didn't get print graphics object&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //End the print job and do any necessary cleanup.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myPrintJob.end();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;PrintJob cancelled by user&quot;);

&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//

&nbsp; //This is a custom Panel class.&nbsp; Objects of this class
&nbsp; // know how to print themselves when their overridden
&nbsp; // paint() method is called and passed a PrintGraphics
&nbsp; // object as a parameter.&nbsp; The format in which the
&nbsp; // object is printed is defined in the overridden
&nbsp; // paint() method.
&nbsp; class MyPanelType0 extends Panel{
&nbsp;&nbsp;&nbsp; //These are the components in the object that contain
&nbsp;&nbsp;&nbsp; // data to be printed.
&nbsp;&nbsp;&nbsp; Label panel0Label;
&nbsp;&nbsp;&nbsp; TextField panel0TextField;
&nbsp;&nbsp;&nbsp; Button panel0Button0;
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//

&nbsp;&nbsp;&nbsp; //This is the constructor for the custom Panel object
&nbsp;&nbsp;&nbsp; MyPanelType0(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0Label = new Label(&quot;Panel 0&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel0Label);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0TextField = new TextField(&quot;TextField&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel0TextField);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0Button0 = new Button(&quot;panel0Button0&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel0Button0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Override paint() here.&nbsp; Did not attempt to handle
&nbsp;&nbsp;&nbsp; // fontsize in order to produce pleasing output.
&nbsp;&nbsp;&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Separate screen painting from printer painting.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Only execute the following code if the Graphics
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object is of type PrintGraphics.&nbsp; Otherwise, this
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // material would appear on the screen when the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object is painted on the screen.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(g instanceof PrintGraphics){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //This overridden version of paint() prints a
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // header line and then simply extracts data from
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the components in the panel and prints that
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // data on successive lines.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int leftMargin = 10;//X-position of each line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int topMargin = 20;//Y-position of first line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int lineIncrement = 13;//height of each line

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Printing contexts do not have a default font. You
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // MUST set it or the system will crash under Win95
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.BOLD, 18));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(&quot;Hello from Panel 0&quot;,leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.PLAIN, 10));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of Label: &quot; + panel0Label.getText(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftMargin,topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of TextField: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0TextField.getText(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftMargin,topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Caption on Button: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0Button0.getLabel(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else//g is not a PrintGraphics object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the paint method of the Panel class.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.paint(g);
&nbsp;&nbsp;&nbsp; }//end overridden paint()
&nbsp; }//end class MyPanelType0
&nbsp; //=====================================================//

&nbsp; //This is a custom Panel class.&nbsp; Objects of this class
&nbsp; // know how to print themselves when their overridden
&nbsp; // paint() method is called and passed a PrintGraphics
&nbsp; // object as a parameter.&nbsp; See explanatory comments in
&nbsp; // the definition of the class named MyPanelType0.
&nbsp; class MyPanelType1 extends Panel{
&nbsp;&nbsp;&nbsp; Label panel1Label;
&nbsp;&nbsp;&nbsp; TextField panel1TextField;
&nbsp;&nbsp;&nbsp; Button panel1Button0;
&nbsp;&nbsp;&nbsp; Button panel1Button1;
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyPanelType1(){//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Label = new Label(&quot;Panel 1&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel1Label);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1TextField = new TextField(&quot;TextField&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel1TextField);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Button0 = new Button(&quot;panel1Button0&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel1Button0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Button1 = new Button(&quot;panel1Button1&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel1Button1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBackground(Color.pink);
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//

&nbsp;&nbsp;&nbsp; //Override paint() here.&nbsp; Did not attempt to handle
&nbsp;&nbsp;&nbsp; // fontsize well and produce pleasing output.
&nbsp;&nbsp;&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Separate screen painting from printer painting
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(g instanceof PrintGraphics){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int leftMargin = 10;//X-position of each line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int topMargin = 20;//Y-position of first line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int lineIncrement = 13;//height of each line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Printing contexts do not have a default font. You
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // must set it or the system will crash under Win95
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.BOLD, 18));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(&quot;Hello from Panel 1&quot;,leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.PLAIN, 10));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of Label: &quot; + panel1Label.getText(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftMargin,topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of TextField: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1TextField.getText(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Caption on Button: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Button0.getLabel(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Caption on Button: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Button1.getLabel(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else//g is not a PrintGraphics object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.paint(g);
&nbsp;&nbsp;&nbsp; }//end overridden paint()
&nbsp; }//end class MyPanelType1
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // panel0 to be selected for display and printing.
&nbsp; // Obviously, this and the next class could be combined
&nbsp; // into a single class that would use the source of the
&nbsp; // event to determine which panel to display.
&nbsp; class SelectPanel0Listener implements ActionListener{
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.remove(areaToPrint);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; areaToPrint = panel0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.add(areaToPrint,&quot;Center&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.invalidate();//force a redraw
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//

&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // panel1 to be selected for display and printing.
&nbsp; class SelectPanel1Listener implements ActionListener{
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.remove(areaToPrint);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; areaToPrint = panel1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.add(areaToPrint,&quot;Center&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.invalidate();//force a redraw
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//

}//end class GUI
//=======================================================//</pre>
        </td>
    </tr>
</table>

<h2 align="center"><a
name="Sample Program for Painting on the Paper with Swing"></a><font
color="#FF0000">Sample Program for Painting on the Paper with
Swing</font></h2>

<p>This is a Swing version of the program named Print05.java. </p>

<p>The only significant modifications required to convert Print05
to this Swing version were: </p>

<ul>
    <li>replace all the AWT components (such as <b>Button</b>)
        with Swing components (such as <b>JButton</b>)</li>
    <li>apply the <b>getContentPane()</b> method invocation to
        all operations that deal with the layer in the <b>JFrame</b>
        where the components reside.</li>
</ul>

<p align="left">Otherwise, this program is essentially the same
as the previous program named Print05 and therefore, no further
discussion will be provided.</p>

<h3 align="center"><a
name="Program Listing for Painting on the Paper with Swing"></a><font
color="#FF0000">Program Listing for Painting on the Paper with
Swing</font></h3>

<p>This section provides a complete listing of the program. </p>

<table border="1" bgcolor="#FFFF99">
    <tr>
        <td><pre>/*File Print06.java
Copyright 1998 R.G.Baldwin

This is a Swing version of the program named Print05.java.

The only significant modifications required to convert
Print05 to this Swing version was to replace all the AWT
components (such as Button) with Swing components (such
as JButton), and then to apply the getContentPane()
method invocation to all operations that deal with the
layer in the JFrame where the components reside.

The purpose of this program is to demonstrate the ability
to selectively print the contents of Swing components in
a Swing container that is embedded inside another Swing&nbsp;
container.

The word selectively is used in this case to differentiate
the approach to printing used in this program from the
approach used in the program named Print04.&nbsp; That program
used the printAll() method to print all of the components
in a container.&nbsp; This program has the ability to select
which components are to be printed.&nbsp; It also has the&nbsp;
ability to print selected information about those
components.

Similar to the program named Print04, this program places
one of two selectable custom JPanel objects and three
JButton objects in a JFrame. The JPanel objects know how to
print themselves when their overridden paint() method is
invoked.

One of the buttons has a listener that causes the currently
selected JPanel to print itself.&nbsp; This requires that each&nbsp;
panel have an overridden paint() method which in turn&nbsp;
requires that each panel be a custom panel type that&nbsp;
extends JPanel.&nbsp; The overridden paint() method defines the&nbsp;
manner in which the panel prints itself.

The two other buttons are used to select between the two&nbsp;
JPanel objects for display and printing.&nbsp; In other words,
the user can select between two different panels and cause
the one currently installed in the JFrame to be printed.

When the selected JPanel is printed, the other components in
the JFrame are ignored.

For purposes of illustration, one of the selectable JPanel
objects contains a JLabel, a JTextField, and a JButton that
is not active.

The other selectable JPanel contains a JLabel, a JTextField&nbsp;
and two JButton objects that are not active.

The print format defined in the overridden paint() methods
causes the current text from the JLabel and the JTextField to
be printed and causes the captions from the JButton objects
to be printed.&nbsp; This print format is for illustration only.
Using this approach, you have total freedom to decide how
to print the information associated with the components
in your program.

Tested using JDK 1.1.6 and Swing 1.0.1 under Win95
**********************************************************/

import java.awt.*;
import java.awt.event.*;
import com.sun.java.swing.*;
//=======================================================//

public class Print06 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Print06
//=======================================================//

//This class is used to instantiate a Graphical User
// Interface object
class GUI {
&nbsp; JFrame myFrame = new JFrame(&quot;Copyright 1997, R.G.Baldwin&quot;);
&nbsp;&nbsp;
&nbsp; //The container objects referenced by areaToPrint will be
&nbsp; // asked to print themselves.
&nbsp; JPanel areaToPrint = null;
&nbsp;&nbsp;
&nbsp; //Two selectable custom panels that can be installed
&nbsp; // in the JFrame object.&nbsp; Note that they are of custom
&nbsp; // panel type MyPanelTypeX.&nbsp; They must be of different
&nbsp; // types because their appearance is different and the
&nbsp; // manner in which they print themselves is different.
&nbsp; MyPanelType0 panel0;
&nbsp; MyPanelType1 panel1;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //The following button causes the container object
&nbsp;&nbsp;&nbsp; // currently referred to by areaToPrint to print&nbsp;
&nbsp;&nbsp;&nbsp; // itself.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; JButton printButton = new JButton(&quot;Print&quot;);
&nbsp;&nbsp;&nbsp; printButton.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new PrintActionListener());
&nbsp;&nbsp;&nbsp; myFrame.getContentPane().add(printButton,&quot;North&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //The following buttons are used to select different
&nbsp;&nbsp;&nbsp; // panels for display and printing.
&nbsp;&nbsp;&nbsp; JButton selectPanel0Button =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JButton(&quot;Select JPanel 0&quot;);
&nbsp;&nbsp;&nbsp; selectPanel0Button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SelectPanel0Listener());
&nbsp;&nbsp;&nbsp; myFrame.getContentPane().add(selectPanel0Button,&quot;West&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; JButton selectPanel1Button =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new JButton(&quot;Select JPanel 1&quot;);
&nbsp;&nbsp;&nbsp; selectPanel1Button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new SelectPanel1Listener());
&nbsp;&nbsp;&nbsp; myFrame.getContentPane().add(selectPanel1Button,&quot;East&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Construct the selectable Panels that will be assigned
&nbsp;&nbsp;&nbsp; // to the areaToPrint reference when a selection is
&nbsp;&nbsp;&nbsp; // made.&nbsp; When these panels print themselves, the print
&nbsp;&nbsp;&nbsp; // routine causes the contents of the components in the
&nbsp;&nbsp;&nbsp; // container to be printed.
&nbsp;&nbsp;&nbsp; panel0 = new MyPanelType0();
&nbsp;&nbsp;&nbsp; panel1 = new MyPanelType1();

&nbsp;&nbsp;&nbsp; //Need a valid reference in areaToPrint to prevent a
&nbsp;&nbsp;&nbsp; // null pointer exception when a selection is made and
&nbsp;&nbsp;&nbsp; // an attempt is made to remove the old reference.
&nbsp;&nbsp;&nbsp; areaToPrint = panel0;

&nbsp;&nbsp;&nbsp; myFrame.setSize(400,200);
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);

&nbsp;&nbsp;&nbsp; //This is an anonymous inner class of the GUI class&nbsp;
&nbsp;&nbsp;&nbsp; // used to terminate the program when the user closes
&nbsp;&nbsp;&nbsp; // the JFrame
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // the container referenced by areaToPrint to print
&nbsp; // itself.&nbsp; This is accomplished by getting a printer
&nbsp; // context and passing it to the overridden paint()
&nbsp; // method for the contrainer referenced by areaToPrint.
&nbsp; class PrintActionListener implements ActionListener{

&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a PrintJob object.&nbsp; This causes the system-
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // standard print dialog to appear.&nbsp; Closing the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // dialog without allowing printing will return null.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PrintJob myPrintJob = myFrame.getToolkit().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getPrintJob(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame, &quot;Copyright R.G.Baldwin&quot;, null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(myPrintJob != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get a graphics object for printing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Graphics printGraphics = myPrintJob.getGraphics();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(printGraphics != null){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the custom paint() method of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object referred to by areaToPrint passing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the PrintGraphics object as a parameter. This
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // will cause the object to print itself.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; areaToPrint.paint(printGraphics);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Cause a form feed on the printer and free
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the resources tied up by the graphics object.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printGraphics.dispose();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Didn't get print graphics object&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //End the print job and do any necessary cleanup.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myPrintJob.end();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(&quot;PrintJob cancelled by user&quot;);

&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//

&nbsp; //This is a custom JPanel class.&nbsp; Objects of this class
&nbsp; // know how to print themselves when their overridden
&nbsp; // paint() method is called and passed a PrintGraphics
&nbsp; // object as a parameter.&nbsp; The format in which the
&nbsp; // object is printed is defined in the overridden
&nbsp; // paint() method.
&nbsp; class MyPanelType0 extends JPanel{
&nbsp;&nbsp;&nbsp; //These are the components in the object that contain
&nbsp;&nbsp;&nbsp; // data to be printed.
&nbsp;&nbsp;&nbsp; JLabel panel0Label;
&nbsp;&nbsp;&nbsp; JTextField panel0TextField;
&nbsp;&nbsp;&nbsp; JButton panel0Button0;
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//

&nbsp;&nbsp;&nbsp; //This is the constructor for the custom JPanel object
&nbsp;&nbsp;&nbsp; MyPanelType0(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0Label = new JLabel(&quot;JPanel 0&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel0Label);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0TextField = new JTextField(&quot;JTextField&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel0TextField);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0Button0 = new JButton(&quot;panel0Button0&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel0Button0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Override paint() here.&nbsp; Did not attempt to handle
&nbsp;&nbsp;&nbsp; // fontsize in order to produce pleasing output.
&nbsp;&nbsp;&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Separate screen painting from printer painting.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Only execute the following code if the Graphics
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object is of type PrintGraphics.&nbsp; Otherwise, this
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // material would appear on the screen when the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object is painted on the screen.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(g instanceof PrintGraphics){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //This overridden version of paint() prints a
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // header line and then simply extracts data from
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the components in the panel and prints that
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // data on successive lines.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int leftMargin = 10;//X-position of each line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int topMargin = 20;//Y-position of first line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int lineIncrement = 13;//height of each line

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Printing contexts do not have a default font. You
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // MUST set it or the system will crash under Win95
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.BOLD, 18));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(&quot;Hello from JPanel 0&quot;,leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.PLAIN, 10));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of JLabel: &quot; + panel0Label.getText(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftMargin,topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of JTextField: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0TextField.getText(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftMargin,topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Caption on JButton: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel0Button0.getText(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else//g is not a PrintGraphics object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke the paint method of the JPanel class.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.paint(g);
&nbsp;&nbsp;&nbsp; }//end overridden paint()
&nbsp; }//end class MyPanelType0
&nbsp; //=====================================================//

&nbsp; //This is a custom JPanel class.&nbsp; Objects of this class
&nbsp; // know how to print themselves when their overridden
&nbsp; // paint() method is called and passed a PrintGraphics
&nbsp; // object as a parameter.&nbsp; See explanatory comments in
&nbsp; // the definition of the class named MyPanelType0.
&nbsp; class MyPanelType1 extends JPanel{
&nbsp;&nbsp;&nbsp; JLabel panel1Label;
&nbsp;&nbsp;&nbsp; JTextField panel1TextField;
&nbsp;&nbsp;&nbsp; JButton panel1Button0;
&nbsp;&nbsp;&nbsp; JButton panel1Button1;
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyPanelType1(){//constructor
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Label = new JLabel(&quot;JPanel 1&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel1Label);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1TextField = new JTextField(&quot;JTextField&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel1TextField);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Button0 = new JButton(&quot;panel1Button0&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel1Button0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Button1 = new JButton(&quot;panel1Button1&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(panel1Button1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.setBackground(Color.pink);
&nbsp;&nbsp;&nbsp; }//end constructor
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//

&nbsp;&nbsp;&nbsp; //Override paint() here.&nbsp; Did not attempt to handle
&nbsp;&nbsp;&nbsp; // fontsize well and produce pleasing output.
&nbsp;&nbsp;&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Separate screen painting from printer painting
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(g instanceof PrintGraphics){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int leftMargin = 10;//X-position of each line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int topMargin = 20;//Y-position of first line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int lineIncrement = 13;//height of each line
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Printing contexts do not have a default font. You
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // must set it or the system will crash under Win95
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.BOLD, 18));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(&quot;Hello from JPanel 1&quot;,leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.setFont(new Font(&quot;Serif&quot;, Font.PLAIN, 10));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of JLabel: &quot; + panel1Label.getText(),
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; leftMargin,topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Contents of JTextField: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1TextField.getText(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Caption on JButton: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Button0.getText(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &quot;Caption on JButton: &quot; +&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; panel1Button1.getText(),leftMargin,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; topMargin += lineIncrement);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else//g is not a PrintGraphics object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; super.paint(g);
&nbsp;&nbsp;&nbsp; }//end overridden paint()
&nbsp; }//end class MyPanelType1
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // panel0 to be selected for display and printing.
&nbsp; // Obviously, this and the next class could be combined
&nbsp; // into a single class that would use the source of the
&nbsp; // event to determine which panel to display.
&nbsp; class SelectPanel0Listener implements ActionListener{
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.getContentPane().remove(areaToPrint);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; areaToPrint = panel0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.getContentPane().add(areaToPrint,&quot;Center&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.getContentPane().invalidate();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.repaint();
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//

&nbsp; //This is an inner class of the GUI class used to cause
&nbsp; // panel1 to be selected for display and printing.
&nbsp; class SelectPanel1Listener implements ActionListener{
&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.getContentPane().remove(areaToPrint);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; areaToPrint = panel1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.getContentPane().add(areaToPrint,&quot;Center&quot;);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.getContentPane().invalidate();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myFrame.repaint();
&nbsp;&nbsp;&nbsp; }//end actionPerformed()
&nbsp; }//end class PrintActionListener
&nbsp; //=====================================================//

}//end class GUI
//=======================================================//</pre>
        </td>
    </tr>
</table>

<p>-end- </p>
<!--end-->
</body>
</html>
