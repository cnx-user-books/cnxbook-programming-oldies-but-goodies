<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
The border Property</h2></center>

<center>
<h2>
Part 1, EtchedBorder</h2></center>
<b><i>By <a href="mailto:baldwin.richard@iname.com">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1020
<p>August 21, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to really understand what
Swing is all about.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is recommended that in addition to studying this set of lessons,
you also study my earlier lessons on Swing.&nbsp; A list of some of my
Swing lessons can be found in an earlier <a href="Java1005.htm#titles">lesson</a>
in this series.&nbsp; The lessons themselves can be found at
<i>Baldwin's
Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p>The earlier lessons will introduce you to the use of Swing while avoiding
much of the detail included in this series.
<p><b><font color="#FF0000">A recommended lesson</font></b>
<p>Since this lesson deals with borders, I particularly recommend the lesson
entitled <i>"<b>Swing, Hidden Buttons with Icons, Icon Images, Borders,
Tool Tips, Nested Buttons, and Other Fun Stuff</b>."</i>&nbsp; That lesson
illustrates some very interesting uses of borders with buttons to cause
buttons to rise up from the surface when you point at them with the mouse.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">Properties, events, and methods</font></b>
<p><font color="#000000">In an earlier lesson, I provided lists of <i>properties</i>,
<i>events</i>,
and <i>methods</i> defined in <b>JComponent</b> and its superclasses:
<b>Container</b>,
<b>Component</b>,
and <b>Object</b>.</font>
<p><b><font color="#FF0000">Default appearance and behavior</font></b>
<p><font color="#000000">Because most Swing components extend <b>JComponent</b>,
the properties, events, and methods defined in those classes provide the
default appearance and behavior of most of the Swing components.</font>
<p><b><font color="#FF0000">Understanding common properties, events, and
methods</font></b>
<p><font color="#000000">The next few lessons concentrate on understanding
of these common properties, events, and methods in order to provide an
overall knowledge of the appearance and behavior of Swing components.</font>
<p><b><font color="#FF0000">Will discuss specialized appearance and behavior
later</font></b>
<p><font color="#000000">After I have illustrated this common appearance
and behavior, I will embark on a study of the additional specialized appearance
and behavior associated with individual components.</font>
<p><b><font color="#FF0000">What's in this lesson?</font></b>
<p><font color="#000000">This is the first of several lessons that emphasize
an understanding of the <i>border</i> property along with the use of that
property to construct components having different border styles.</font>
<p><b><font color="#FF0000">Several parts are needed</font></b>
<p><font color="#000000">Because of the large amount of material involved,
I have decided to break this discussion into several parts.&nbsp; This
is Part 1.&nbsp; It sets the background for future discussions, and also
deals specifically with the use of the <b>EtchedBorder</b> class.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
<b><font color="#FF0000">A screen shot</font></b>
<p>The name of the sample program that I will discuss to illustrate borders
is <b>Swing13</b>.
<p>A screen shot of the GUI that is produced when the program is run is
shown below as Figure 1.
<p><img SRC="Java1020.gif" height=501 width=330>
<br>Figure 1 Screen Shot of the GUI<b><font color="#FF0000"></font></b>
<p><b><font color="#FF0000">Twelve JLabel objects</font></b>
<p><font color="#000000">The program creates and displays twelve different
<b>JLabel</b>
objects, applying a different border style to each of them.</font>
<p><font color="#000000">As you can see, a wide variety of possible border
styles are available, and this is just a sampling of the possibilities.</font>
<p><b><font color="#FF0000">Apply to all Swing components</font></b>
<p><font color="#000000">These different border styles can be applied to
all Swing components that extend <b>JComponent</b>, either directly or
indirectly.</font>
<p><b><font color="#FF0000">Can also define your own borders</font></b>
<p><font color="#000000">If you want to, you can also define your own custom
borders as well.</font>
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will discuss the program in fragments.&nbsp; A complete listing of the
program is provided later as Listing 6.
<p><b><font color="#FF0000">The controlling class</font></b>
<p>Listing 1 shows the beginning of the controlling class and the <b>main()</b>
method.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>class
<b>Swing13</b>
extends <b>JFrame</b>{</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
public static void <b>main</b>(String args[]) {</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new <b>Swing13</b>();</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
}//end main()</font></font>
<p><b><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Listing
1</font></font></b></td>
</tr>
</table>

<p><font color="#000000">The controlling class extends <b>JFrame</b> so
that an object of the controlling class is a GUI that can be placed directly
on the desktop.</font>
<p><b><font color="#FF0000">Instantiate an object of the controlling class</font></b>
<p><font color="#000000">The <b>main()</b> method instantiates an object
of the controlling class, causing the GUI to appear on the screen.</font>
<p><b><font color="#FF0000">The makeLabel() method</font></b>
<p><font color="#000000">Listing 2 shows the beginning of a convenience
method named <b>makeLabel()</b>.&nbsp; This method is designed to instantiate
and to return a reference to an opaque
<b>JLabel</b> object with a specified
border and a pink background.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
JLabel <b>makeLabel</b>(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String content,Border borderType){</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
JLabel label = new JLabel();</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2><b>&nbsp;</b>&nbsp;&nbsp;
label.<b>setBorder</b>(borderType);</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
label.setOpaque(true);</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
label.setBackground(Color.pink);</font></font>
<p><b><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Listing
2</font></font></b></td>
</tr>
</table>

<p><b><font color="#FF0000">A convenience method</font></b>
<p><font color="#000000">This method is provided to reduce the amount of
code required to instantiate the twelve <b>JLabel</b> objects with borders.&nbsp;
By using this method, it is possible to avoid the requirement to repeat
the same code twelve times.</font>
<p><b><font color="#FF0000">Text content of the label</font></b>
<p><font color="#000000">The text content of the label is provided as the
first incoming parameter to the method.</font>
<p><b><font color="#FF0000">The required border style</font></b>
<p><font color="#000000">The required border style is provided as the second
incoming parameter.&nbsp; Note that this parameter is a reference to an
object of type <b>Border</b>.</font>
<p><b><font color="#FF0000">The new code</font></b>
<p><font color="#000000">The only thing new in the code in Listing 2 is
the use of the <b>setBorder()</b> method to set the <i>border</i> property
of the label object.&nbsp; This setter method requires a parameter that
is a reference to an object of a class that implements the <b>Border</b>
interface (a reference to an object of type <b>Border</b>).</font>
<p><b><font color="#FF0000">What does Sun have to say?</font></b>
<p><font color="#000000">Here is what Sun has to say about the <b>setBorder()</b>
method.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Arial Narrow"><font size=-1>Sets
the border of this component. The <b>Border</b> object is responsible for
defining the insets for the component (overriding any insets set directly
on the component) and for optionally rendering any border decorations within
the bounds of those insets.&nbsp;</font></font>
<p><font face="Arial Narrow"><font size=-1>Borders should be used (rather
than insets) for creating both decorative and non-decorative (e.g. margins
and padding) regions for a swing component.&nbsp;</font></font>
<p><font face="Arial Narrow"><font size=-1>Compound borders can be used
to nest multiple borders within a single component.&nbsp;</font></font></td>
</tr>
</table>

<p><b><font color="#FF0000">The insets</font></b>
<p>The term insets is a term that is used to describe the width of the
border in pixels.
<p>The <b>getInsets()</b> method returns the value of the <i>insets</i>
property of the object on which the method is invoked.&nbsp; This value
is returned as a reference to an object of the <b>Insets</b> class.
<p><b><font color="#FF0000">The Insets class</font></b>
<p>An object of the <b>Insets</b> class encapsulates four <b>public</b>
fields of type <b>int</b>.&nbsp; The four fields contain the widths in
pixels of the left, right, bottom, and top sections of the border.
<p>Because they are public, these field values can be accessed simply by
joining the name of the field to the name of a reference to the <b>Insets</b>
object.&nbsp; (No accessor method is required.)
<p><b><font color="#FF0000">The remainder of the makeLabel() method</font></b>
<p>Listing 3 shows the remainder of the method named <b>makeLabel()</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
label.setText(content + ","&nbsp;</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+label.<b>getInsets</b>().left + ","</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+label.<b>getInsets</b>().top);</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
return label;</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
}//end makeLabel()</font></font>
<p><b><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Listing
3</font></font></b></td>
</tr>
</table>

<p>The <b>getInsets()</b> method is used to get the inset values for the
left border and top border.&nbsp; These two values are concatenated with
the specified text content so that they will be displayed as the text on
the label when the label is rendered.
<p><b><font color="#FF0000">Returns a JLabel object</font></b>
<p>The method returns a reference to a <b>JLabel</b> object, with an opaque
pink background, having the specified borders, and having a <i>text</i>
property whose value is the concatenation of the specified text value and
the inset values for the left and top borders.
<p><b><font color="#FF0000">The constructor</font></b>
<p>Listing 4 shows the beginning of the constructor, which sets the layout
manager to <b>FlowLayout</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
Swing13(){//constructor</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().setLayout(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FlowLayout());</font></font>
<p><b><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Listing
4</font></font></b></td>
</tr>
</table>

<p><b><font color="#FF0000">Will honor preferred size of the labels</font></b>
<p>As mentioned in an earlier lesson, this layout manager will attempt
to honor both dimensions of the preferred size while displaying each label.
<p>In this case, the value of the <i>preferredSize</i> property is automatically
set, taking the borders and the text content of the label into account.
<p><b><font color="#FF0000">The rest of the constructor</font></b>
<p><font color="#000000">Following this, the constructor contains twelve
fairly complex statements.&nbsp; Each of the twelve statements causes a
<b>JLabel</b>
object to be displayed with</font>
<ul>
<li>
<font color="#000000">A specified border style,</font></li>

<li>
<font color="#000000">The specified text content, and</font></li>

<li>
<font color="#000000">The left and top insets for the specified border
style.</font></li>
</ul>
<b><font color="#FF0000">Open in another browser window</font></b>
<p><font color="#000000">At this point, it may be helpful for you to open
a copy of this lesson in another browser window so you can see the screen
shot of the GUI while I discuss the different border styles.</font>
<p><b><font color="#FF0000">EtchedBorder,2,2</font></b>
<p>Listing 5 shows the code fragment that causes the label in the upper-left
corner of the screen shot to be added to the <b>JFrame</b> container.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"<b>EtchedBorder</b>",<b>new EtchedBorder()</b>));</font></font>
<p><b><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Listing
5</font></font></b></td>
</tr>
</table>

<p><b><font color="#FF0000">Uses the makeLabel() method</font></b>
<p><font color="#000000">This fragment invokes the <b>makeLabel()</b> method
discussed above, passing the two required parameters.</font>
<p><b><font color="#FF0000">The specified text content</font></b>
<p><font color="#000000">The first parameter is the string "EtchedBorder"
that is to become part of the text content of the label.</font>
<p><font color="#000000">As you will recall, this string is concatenated
with the inset values for the border and set into the <i>text</i> property
for the label.&nbsp; This, in turn, causes the concatenated string to be
displayed as the text on the face of the label.&nbsp; For this case, the
resulting text on the face of the label is:</font>
<center>
<p><b><font color="#000099">EtchedBorder,2,2</font></b></center>

<p><b><font color="#FF0000">The specified border style</font></b>
<p><font color="#000000">The second parameter to the <b>makeLabel()</b>
method is a reference to a new object of the class <b>EtchedBorder</b>.&nbsp;
This class (as well as the other classes that I will discuss in the following
paragraphs) extends the class named <b>AbstractBorder</b>.</font>
<p><b><font color="#FF0000">AbstractBorder</font></b>
<p><font color="#000000">The <b>AbstractBorder</b> class implements the
<b>Border</b>
interface.&nbsp; Therefore, a reference to an object of the
<b>EtchedBorder</b>
class satisfies the requirement that the second parameter to the <b>makeLabel()</b>
method be a reference to an object of type <b>Border</b>.</font>
<p><b><font color="#FF0000">Creating your own borders</font></b>
<p><font color="#000000">If you decide to create your own custom borders,
probably the best way to do so is to extend the <b>AbstractBorder</b> class.</font>
<p><b><font color="#FF0000">Now back to EtchedBorder</font></b>
<p><font color="#000000">Here is part of what Sun has to say about the
<b>EtchedBorder</b>
class.</font>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#66FFFF" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Arial Narrow"><font size=-1>A
class which implements a simple etched border which can either be etched-in
or etched-out.&nbsp;</font></font>
<p><font face="Arial Narrow"><font size=-1>If no highlight/shadow colors
are initialized when the border is created, then these colors will be dynamically
derived from the background color of the component argument passed into
the paintBorder() method.&nbsp;</font></font></td>
</tr>
</table>

<p><b><font color="#FF0000">The default case</font></b>
<p>The default case for the <i>noarg</i> constructor that I used is to
produce a border that appears to be etched or chiseled out of the surface
(a ditch).&nbsp; It has a very modest three-dimensional appearance created
using highlights and shadows.
<p><b><font color="#FF0000">Other constructors available</font></b>
<p>As you can probably surmise from the Sun text provided above, there
are other constructors that allow you to cause the border to appear as
a small hill instead of a ditch.&nbsp; It is also possible to specify the
colors used for highlights and shadows as well.
<p><b><font color="#FF0000">The size of the label</font></b>
<p>As you can see from the screen shot, the default size of the label object
with the etched border is barely large enough to accommodate its text,
particularly on the ends.&nbsp; All in all, it is pretty ugly.
<p>We will see how to remedy this situation later by using a compound border.
<p><b><font color="#FF0000">The inset values</font></b>
<p>As you can also see from the text displayed in the label in the screen
shot, the inset (width) of the left border and the inset of the top border
are each two pixels.
<p>Although I didn't display the inset for the right border and the bottom
border, they appear to be the same for this border style.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In this lesson, I have introduced you to the general concept of applying
borders to Swing components.&nbsp; I have illustrated the specific border
style known as an <b>EtchedBorder</b>.
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
I will discuss two different versions of the border style known as <b>BevelBorder</b>
in the next lesson.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in Listing 6.&nbsp; The purpose
of this lesson was to introduce you to the use of borders in Swing.&nbsp;
As you saw from the screen shot, this program produces a large number and
variety of border styles.&nbsp; I have discussed only a small part of the
program, along with only one border style in this lesson.&nbsp; I will
continue discussing the program is future lessons.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="330" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="330" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>/*File
Swing13</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Rev
3/28/00</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Copyright
2000, R.G.Baldwin</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Illustrates
the border property.&nbsp; This</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>program
creates and displays several</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>different
border types surrounding a</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>JLabel
object.</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Tested
using JDK 1.2.2 under WinNT 4.0 WkStn</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>**********************************/</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>import
java.awt.*;</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>import
java.awt.event.*;</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>import
javax.swing.*;</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>import
javax.swing.border.*;</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>class
Swing13 extends JFrame{</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
//---------------------------------------//&nbsp;</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
public static void main(String args[]) {</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new Swing13();</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
}//end main()</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
//---------------------------------------//</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
//The purpose of this method is to create</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
// and return an opaque pink JLabel with</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
// a border.&nbsp; The text content of the&nbsp;</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
// lable is provided as the first</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
// parameter.&nbsp; The border type is provided</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
// as the second parameter.&nbsp; When the</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
// label is displayed, the left and top</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
// insets are displayed following the&nbsp;</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
// text content of the label.</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
JLabel makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
String content,Border borderType){</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
JLabel label = new JLabel();</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
label.setBorder(borderType);</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
label.setOpaque(true);</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
label.setBackground(Color.pink);</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
label.setText(content + ","&nbsp;</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
+label.getInsets().left + ","</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
+label.getInsets().top);</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
return label;</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
}//end makeLabel()</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
//---------------------------------------//</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
Swing13(){//constructor</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().setLayout(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new FlowLayout());</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"EtchedBorder",new EtchedBorder()));</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"BevelBorder RAISED",new BevelBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BevelBorder.RAISED)));</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"BevelBorder LOWERED",new BevelBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BevelBorder.LOWERED)));</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"EmptyBorder",new EmptyBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5)));</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Compound, Empty + BevelBorder RAISED",</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new CompoundBorder(new BevelBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
BevelBorder.RAISED),new EmptyBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5))));</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;
"Compound, Empty + BevelBorder LOWERED",</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;
new CompoundBorder(new BevelBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;
BevelBorder.LOWERED),new EmptyBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5))));</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;
"Compound, Empty + SoftBevelBorder " +</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"RAISED",</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new CompoundBorder(new SoftBevelBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SoftBevelBorder.RAISED),new EmptyBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5))));</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Compound, Empty + SoftBevelBorder " +</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"LOWERED",</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new CompoundBorder(new SoftBevelBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SoftBevelBorder.LOWERED),</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new EmptyBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5))));</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Compound, Empty + LineBorder",</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new CompoundBorder(new LineBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Color.blue,5),new EmptyBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5))));</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Compound, Empty + MatteBorder Image",</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new CompoundBorder(new MatteBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
19,19,19,19,new ImageIcon(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"blue-ball.gif")),new EmptyBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
5,5,5,5))));</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Compound, Empty + MatteBorder Color",</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new CompoundBorder(new MatteBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
19,19,19,19,Color.blue),</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new EmptyBorder(5,5,5,5))));</font></font>
<br>&nbsp;
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
getContentPane().add(makeLabel(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Compound, Empty + TitledBorder",</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new CompoundBorder(new TitledBorder(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"Title"),new EmptyBorder(5,5,5,5))));</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
setTitle("Copyright 2000, R.G.Baldwin");</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
setSize(329,500);</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
setVisible(true);</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
//.....................................//</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
//Anonymous inner terminator class</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
this.addWindowListener(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
new WindowAdapter(){</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
public void windowClosing(</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
WindowEvent e){</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
System.exit(0);</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}//end windowClosing()</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
}//end WindowAdapter</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
);//end addWindowListener</font></font>
<br><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;&nbsp;&nbsp;
//.....................................//</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>&nbsp;
}//end constructor</font></font>
<p><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>}//end
class Swing13</font></font>
<p><b><font face="Andale Mono, Verdana, Arial, Helvetica"><font size=-2>Listing
6</font></font></b></td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
