<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">Getting Back to Basics with GUIs</h2>
<p><i>Learn the basics of creating your own custom GUI components by creating a 
pair of buttons used to turn the pages in a Greenfoot Java scenario.</i></p>
<p><b>Published:</b>&nbsp; August 26, 2008<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 2600</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a></li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#The_class_named_ArrowButton02">The class named ArrowButton02</a></li>
	<li><a href="#Operational_results">Operational results</a></li>
	<li><a href="#The_class_named_ArrowButtonManager02">The class named 
	ArrowButtonManager02</a></li>
	<li><a href="#The_class_named_RightArrow">The class named RightArrow</a></li>
	<li><a href="#The_class_named_LeftArrow">The class named LeftArrow</a></li>
</ul>
	</li>
	<li><a href="#An_online_version_of_the_scenario">An online version of the 
	scenario</a></li>
	<li><a href="#Run%20the%20program">Run the scenario</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p> Most of us have come to appreciate the use of relatively standardized GUI 
components, often based either on the AWT or on Swing.&nbsp; However, Swing and 
AWT components aren't always appropriate.&nbsp; For example, what if your 
clientele has absolutely no appreciation for standardized GUI components and may not even 
be able to read.&nbsp; What if your business is writing educational 
software for children in the five to ten year age range.&nbsp; You will probably 
agree that the standardized Swing GUI components are not particularly 
appropriate for children in that age range.</p>
<p> Or, your business may be writing game software for older 
children and adults.&nbsp; In that case, your will probably want the look and 
feel of the GUI to be based on the theme of the game.&nbsp; You certainly won't 
want it look like a word processing or spreadsheet program.</p>
<p> In those cases, you must get back to basics and either find an API of GUI 
components appropriate for the purpose, or develop the GUI components yourself.</p>
<p> That is what this tutorial lesson is all about.&nbsp; In this lesson, I will 
introduce you to the methodology for creating your own custom GUI components 
using Greenfoot by creating a pair of buttons used to turn the pages in a 
Greenfoot scenario.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Buttons for turning the page.</li>
	<li><a href="#Figure_2">Figure 2</a>. Class diagram for scenario named 
	ArrowButton02.</li>
	<li><a href="#Figure_3">Figure 3</a>. The six arrow images used in the 
	scenario</li>
	<li><a href="#Figure_4">Figure 4</a>. Button states for each of three pages.</li>
	<li><a href="#Figure_5">Figure 5</a>. Description of the mouseMoved method.</li>
	<li><a href="#Figure_6">Figure 6</a>. Description of the mouseClicked 
	method.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Beginning of the class named 
	ArrowButton02.</li>
	<li><a href="#Listing_2">Listing 2</a>. Constructor for ArrowButton02.</li>
	<li><a href="#Listing_3">Listing 3</a>. Beginning of the class named 
	ArrowButtonManager02.</li>
	<li><a href="#Listing_4">Listing 4</a>. Making background images available.</li>
	<li><a href="#Listing_5">Listing 5</a>. Beginning of the class named 
	RightArrow.</li>
	<li><a href="#Listing_6">Listing 6</a>. The constructor for the RightArrow 
	class.</li>
	<li><a href="#Listing_7">Listing 7</a>. Beginning of the <i>act</i> method.</li>
	<li><a href="#Listing_8">Listing 8</a>. Display red or green image on the 
	button.</li>
	<li><a href="#Listing_9">Listing 9</a>. Responding to a click on the 
	RightArrow button.</li>
	<li><a href="#Listing_10">Listing 10</a>. Source code for the class named 
	ArrowButton02.</li>
	<li><a href="#Listing_11">Listing 11</a>. Source code for the class named 
	ArrowButtonManager02.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<p>Sometimes its easy to forget that despite the sophistication of the JavaBeans 
event model and the components that are included in the Swing API, a GUI is 
nothing more than a bunch of images rendered on the screen along with the 
ability to detect various mouse and keyboard operations in and among those 
images.&nbsp; The following list identifies some of the custom GUI 
components that may be needed if your software needs a custom GUI.</p>
<ul>
	<li>Toggle switches</li>
	<li>Text in various forms</li>
	<li>Sliders</li>
	<li>Scoreboards</li>
	<li>Counters</li>
	<li>Sound effects</li>
	<li>Various kinds of buttons</li>
	<li>Menus</li>
	<li>Checkboxes</li>
	<li>Radio buttons</li>
	<li>Lists and combo boxes</li>
	<li>Dialogs</li>
	<li>Progress bars</li>
	<li>Spinners</li>
	<li>Tooltips</li>
</ul>
<p>Obviously, we won't be able to cover all of these GUI components in this 
lesson, or even in this series of lessons.&nbsp; But, we'll do the best we can 
to cover as many as we can.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>In this lesson, I will show you how to create and test a pair of 
buttons of the kind as shown on the left and right sides Figure 1.&nbsp; <i>(Note that 
the two buttons at the bottom are part of the Greenfoot runtime environment that was used to 
develop and test these buttons.)</i></p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Buttons for turning the page. </b>
<table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java2600a01.jpg" width="467" height="551"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b><a name="An_online_version_is_available">An online version is available</a></b></font></p>
<p>I have published an online version of this scenario named <b>ArrowButton02</b> 
at the Greenfoot gallery <i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; 
You can run the scenario online at that URL and I encourage you do so while 
you are reading this lesson.</p>
<p><font color="#FF0000"><b>Buttons for turning the page</b></font></p>
<p>The buttons on the left and right side of Figure 1 are the kind of buttons 
that you might see in a child's educational game that could be used to allow the 
child to <i>&quot;turn a page&quot;</i> or to progress back and forth through different 
scenes or worlds.</p>
<p><font color="#FF0000"><b>Mouse is touching the right button</b></font></p>
<p>In Figure 1, the mouse <i>(which doesn't show in the 
screen shot)</i> is touching the button on the right.&nbsp; That button has 
turned green indicating that it is okay to click the button to turn to the next 
page.&nbsp; If the last page was currently showing in the display area, the 
button would turn red <i>(see Figure 4)</i> instead of green and clicking the button would have no 
effect.</p>
<p><font color="#FF0000"><b>Will use Greenfoot</b></font></p>
<p>For a variety of reasons that I won't bore you with here, I have elected to 
use the Greenfoot IDE in this lesson.&nbsp; <i>(See Getting Started with the Java IDE named Greenfoot 
in <a href="#Resources">Resources</a>.)</i> &nbsp; If you haven't 
done so already, I recommend that you download and install the free Greenfoot IDE so that you can replicate 
the sample scenario that I will explain in this lesson.&nbsp; <i>(Greenfoot 
projects are commonly referred to as scenarios.&nbsp; See <a href="#Resources">
Resources</a></i> <i>for a link to the Greenfoot download page.)</i></p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<p><font color="#FF0000"><b>Will explain in fragments</b></font></p>
<p>This scenario consists of two classes of my own design:</p>
<ul>
	<li><b>ArrowButton02</b></li>
	<li><b>ArrowButtonManager02</b></li>
</ul>
<p>The buttons shown on the left and right sides of Figure 1 were instantiated 
from static top-level classes encapsulated in the second class in the above list.&nbsp; An object of the first class 
in the above list places the buttons in the world shown in Figure 1 so that they can be exercised.</p>
<p>The class diagram for this scenario is shown in Figure 2.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Class diagram for scenario named 
	ArrowButton02. </b>
<table border="1" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java2600a02.jpg" width="259" height="242"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A brief discussion of Greenfoot</b></font></p>
<p>If this is your first exposure to Greenfoot, I suggest that you go back and 
read the lesson titled <i>Getting Started with the Java IDE named Greenfoot (see
<a href="#Resources">Resources</a>)</i> before continuing with this lesson.</p>
<p>Briefly, however, the classes named <b>World</b> and <b><a name="Actor">Actor</a></b> 
in Figure 2 are part of 
the <b>IDE</b>.&nbsp; To create and run a scenario in Greenfoot, the programmer 
extends the <b>World</b> class to create a specific world, and extends the <b>
Actor</b> class to create one or more actors that perform in that world.&nbsp; 
There are many other possibilities as well, but that explanation should suffice for this 
scenario.</p>
<h3><a name="The_class_named_ArrowButton02">The class named ArrowButton02</a></h3>
<p>The class named <b>ArrowButton02</b>, which begins in Listing 1, is 
relatively straightforward.&nbsp; This is the class that defines my custom world 
in which the actors perform.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Beginning of the class named 
ArrowButton02. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class ArrowButton02 extends World{
  <b>ArrowButtonManager02.RightArrow</b> rightArrow;
  ArrowButtonManager02.LeftArrow leftArrow;
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 1 begins by declaring reference variables that will hold references 
to the two button objects shown on the right and the left in Figure 1.&nbsp; The 
classes from which the buttons will be instantiated are named <b>RightArrow</b> 
and <b>LeftArrow</b>.&nbsp; Each of those classes is a static top-level class that is 
encapsulated in the class named <b>ArrowButtonManager02</b>.&nbsp; Therefore, it 
is necessary to qualify the name of the class when it is referred to as shown by 
the boldface code in Listing 1.</p>
<p><font color="#FF0000"><b>Constructor for ArrowButton02</b></font></p>
<p>The constructor for this class, which is shown in Listing 2, does the following:</p>
<ul>
	<li>Sets the size and grid pattern of the world.</li>
	<li>Instantiates the right and left arrow buttons shown in Figure 1.</li>
	<li>Adds the two buttons to the world in specified locations.</li>
	<li>Sets the initial background image for the world.</li>
</ul>
<p>
<b><a name="Listing_2">Listing 2</a>. Constructor for 
ArrowButton02. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public ArrowButton02(){//constructor
    <b>super(450,450,1);</b>
    rightArrow = new ArrowButtonManager02.RightArrow();
    leftArrow = new ArrowButtonManager02.LeftArrow();
    addObject(rightArrow,400,225);
    addObject(leftArrow,50,225);
    setBackground(new GreenfootImage("bathroom-tile.gif"));
  }//end constructor
}//end class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Except for the boldface <b>super</b> statement that sets the size and grid 
pattern of the world, the code in Listing 2 should be fairly obvious based on 
the method names and your prior knowledge of Java programming.</p>
<p><font color="#FF0000"><b>Review of the grid structure</b></font></p>
<p>A Greenfoot world consists of a uniform rectangular grid of square cells.&nbsp; 
The first two parameters to the <b>super</b> statement in Listing 2 specify the width and 
the height of 
the world respectively as measured in cells.&nbsp; The third parameter specifies the 
length of each side of 
each square cell in pixels.&nbsp; Because I specified that length as 1, 
each cell is a single pixel.&nbsp; Therefore, my world is a rectangular grid 450 
pixels wide by 450 pixels high.</p>
<p>The origin of the grid is at the upper-left corner with positive horizontal dimensions 
extending to the right and positive vertical dimensions extending down.</p>
<p><font color="#FF0000"><b>Placement of the arrow images</b></font></p>
<p>Each arrow is a rectangular image 71 pixels wide and 53 pixels high with some 
portions being transparent.&nbsp; Greenfoot considers the geometric center of 
the rectangle to be the <i>&quot;handle&quot;</i> for the image.&nbsp; Thus, the first 
call to the <b>addObject</b> method in Listing 2 causes that image to be added 
to the world with the center of the image being placed at a coordinate value of 
400x225 pixels.&nbsp; The second call to the <b>addObject</b> method causes the 
other image to be placed at a coordinate value of 50x225 pixels.</p>
<p><font color="#FF0000"><b>Setting the background</b></font></p>
<p>Finally, the last statement in the constructor uses an image file named <i>
&quot;bathroom-tile.gif&quot;</i> to create an object of the <b>GreenfootImage</b> class 
and uses that object to establish the initial background for the world shown in 
Figure 1.&nbsp; Note that <b>Actor</b> images that are added to the world, such as the 
arrow images in this case, always appear in front of the background image and 
can move around in front of the background image leaving it intact.</p>
<p><font color="#FF0000"><b>Setting the z-order</b></font></p>
<p>Although it is not an issue in this scenario, it is possible for two actors 
to occupy the same space and the question then arises as to which actor object will 
be painted on top the other.&nbsp; The <b>World</b> class provides a method 
named <b>setPaintOrder</b> that lets you specify the painting order <i>(z-order)</i> 
of actors instantiated from different classes.&nbsp; However, the z-order of 
objects of the same class cannot be specified.&nbsp; It appears experimentally 
that objects are painted on top of objects of the same class that were added to 
the world earlier but I don't know if you can count on that always being the 
case.</p>
<h3><a name="Operational_results">Operational results</a></h3>
<p>It would probably be a good idea to show you some operational results before 
getting into the technical details of the code that produces those results.&nbsp;
<i>(Once again, I recommend that you run the
<a href="#An_online_version_is_available">online</a> version and observe its 
behavior while you are reading this material.)</i></p>
<p><font color="#FF0000"><b>The arrow images</b></font></p>
<p>Each arrow button actually consists of three images as shown by the six 
images in Figure 3.&nbsp; The three images in the top row of figure 3 were used 
for one of the buttons and the three images in the bottom row were used for the 
other button.</p>

<p><b><a name="Figure_3">Figure 3</a>. The six arrow images used in the 
scenario.</b>
<table border="1" bgcolor="#ffffff" >
	<tr>
		<td><img border="0" src="java2600a03.jpg" width="143" height="107"></td>
		<td><img border="0" src="java2600a04.jpg" width="143" height="107"></td>
		<td><img border="0" src="java2600a05.jpg" width="143" height="107"></td>
	</tr>
		<tr>
		<td><img border="0" src="java2600a06.jpg" width="143" height="107"></td>
		<td><img border="0" src="java2600a07.jpg" width="143" height="107"></td>
		<td><img border="0" src="java2600a08.jpg" width="143" height="107"></td>
	</tr>
</table>
</p>


<p>Note that the image files that are displayed in Figure 3 are in JPEG format.&nbsp; 
I used the free GNU Image Manipulation Program <i>(see gimp in
<a href="#Resources">Resources</a>)</i> to convert the files to PNG format with 
all of the white areas converted to transparent areas before using them in the 
scenario.&nbsp; Had I not done that, the white rectangular border and the white 
arrows would have shown in Figure 1 producing a rather ugly result.</p>
<p><font color="#FF0000"><b>Image scaling</b></font></p>
<p>You may also have noticed that the images in Figure 3 are twice the size 
of the images in Figure 1.&nbsp; Later, I will show you where the size of each 
image is reduced by a factor of two in the Java code.&nbsp; Obviously, I could 
have done that in gimp, but I purposely left the images too large in order to 
illustrate how to scale images in Greenfoot.</p>
<p><font color="#FF0000"><b>Operational sequence</b></font></p>
<p>This scenario consists of three different pages or scenes.&nbsp; The user 
progresses from one page to the next by pressing one of the two arrows on the 
left and right sides of the individual images shown in the six frames in Figure 4.</p>




<p><b><a name="Figure_4">Figure 4</a>. Button states for each of three pages.</b>
<table border="1" bgcolor="#ffffff" >
	<tr>
		<td><img border="0" src="java2600a09.jpg" width="200" height="236"></td>
		<td><img border="0" src="java2600a10.jpg" width="200" height="237"></td>
	</tr>
	<tr>
		<td><img border="0" src="java2600a11.jpg" width="200" height="235"></td>
		<td><img border="0" src="java2600a12.jpg" width="200" height="236"></td>
	</tr>
	<tr>
		<td><img border="0" src="java2600a13.jpg" width="200" height="238"></td>
		<td><img border="0" src="java2600a14.jpg" width="200" height="235"></td>
	</tr>

</table></p>
<p><font color="#FF0000"><b>Arrow button on the three sequential pages</b></font></p>
<p>The three sequential pages in this scenario are shown from top to bottom in 
Figure 4.&nbsp; When the mouse is not touching a button, the button always 
displays the neutral image with the background image showing through.&nbsp; 
However, when the mouse touches a button, the image that is displayed turns 
either red or green to indicate whether it is possible to move forward or 
backward to another page.</p>
<p><font color="#FF0000"><b>The first page in the sequence</b></font></p>
<p>For example, the top-left frame in Figure 4 is displaying the first page in 
the sequence.&nbsp; Touching the left arrow on that page with the mouse causes the button to 
turn red indicating that clicking the button will be of no effect.&nbsp; 
However, touching the right button, as shown in the top-right frame in Figure 
4, causes the button to turn green, indicating that clicking the button will 
turn the page to the center-left frame showing the brick wall.</p>
<p><font color="#FF0000"><b>The middle page in the sequence</b></font></p>
<p>The center-left and center-right frames in Figure 4 show the middle page of 
the three pages in the sequence.&nbsp; Both buttons turn green when touched by 
the mouse on this page because it is allowable to click the left-arrow button and turn 
back to the first page, or click the right-arrow button and turn forward to the third 
page.</p>
<p><font color="#FF0000"><b>The third and final page in the sequence</b></font></p>
<p>Finally, the red button in the bottom-right frame indicates that 
clicking that button will be of no effect because there are no more pages to 
turn to.&nbsp; However, the green button in the bottom-left frame indicates that 
it is allowable to click that button to turn the page back to the previous page 
in the sequence.</p>
<h3><a name="The_class_named_ArrowButtonManager02">The class named 
ArrowButtonManager02</a></h3>
<p>The purpose of this class, which begins in Listing 3, is to encapsulate a pair of static top-level classes from which a
<b>RightArrow</b> object and a <b>LeftArrow</b> object can be instantiated.</p>
<p>Because objects of these two classes are intended to work in concert, and because they need to share some information, the two classes were encapsulated inside this class as
<i>static top-level classes</i>.</p>
<p>This class also maintains the information that objects of the 
<b>RightArrow</b> and
<b>LeftArrow</b> classes need to share.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Beginning of the class named 
ArrowButtonManager02. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class <b>ArrowButtonManager02</b> extends Actor{
  protected static int rightClickCnt = 0;
  protected final static int rightClickLim = 2;
  protected final static int leftClickLim = 2;
  protected static int leftClickCnt = leftClickLim;</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Behavior of the variables and constants</b></font></p>
<p>When the scenario starts, the user is viewing the first page in the sequence 
by default.&nbsp; The variable named <b>rightClickCnt</b> in Listing 3 indicates 
which page the user is currently viewing.&nbsp; This variable has a value of 
zero when the user is viewing the first page <a name="in_the_sequence">in the sequence</a>.&nbsp; It is 
incremented by one each time the user clicks a green right-arrow button and is 
decremented by one each time the user clicks a green left-arrow button.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Some redundancy</b><br />
<font size="3" face="arial">
	I just this moment realized that the constants named <i>rightClickLim</i> 
	and <i>leftClickLim</i> are redundant.&nbsp; A single constant could have 
	been used for both purposes since the number of pages is the same regardless 
	of the direction in which the pages are being turned.&nbsp; I also could 
	have gotten by having both arrows share a common click counter.</font></td></tr></table>
</td>
</tr>
</table>
<p>The constant named <b>rightClickLim</b> is used to specify the number of 
pages in the sequence.&nbsp; The value of this constant should be set to one 
less than the actual number of pages in the sequence.</p>
<p>The variable named <b>leftClickCnt</b> is incremented by one each time the 
user clicks a green left-arrow button and is decremented by one each time the 
user clicks a green right-arrow button.&nbsp; Therefore, this variable has a 
value of 2 when the first page is being viewed and has a value of 0 when the 
third page is being viewed.</p>
<p><font color="#FF0000"><b>The background images</b></font></p>
<p>As the user turns the pages by clicking the right and left-arrow buttons, the 
background image for the world is switched among the three images shown in 
Figure 4.&nbsp; Listing 4 instantiates three objects of type <b>GreenfootImage</b> 
from the three image files shown and stores references to those files in an 
array for access by the control code in later parts of the program.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Making background images available. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  protected final static GreenfootImage[] backgrounds = {
                   new GreenfootImage("bathroom-tile.gif"),
                   new GreenfootImage("brick.jpg"),
                   new GreenfootImage("burlap.jpg")};

  //Note that this class doesn't need a constructor or an
  // act method.</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The image files</b></font></p>
<p>Unlike the arrow images required to create the buttons, the three image files 
in Listing 4 are in the standard Greenfoot distribution along with many other 
images.&nbsp; Therefore, they 
will be readily available to you if you choose to replicate this scenario.&nbsp; 
Although I didn't find any arrow images in the standard distribution, there are 
some smiley faces there that could easily be substituted for the arrow images 
that I used in my implementation of this scenario.&nbsp; Or, you can download 
the source code for my implementation of this scenario <i>(see
<a href="#Resources">Resources</a>)</i> and extract the arrow images from the 
downloaded zip file.</p>
<p><font color="#FF0000"><b>No constructor or act method required</b></font></p>
<p>The class named <b>ArrowButtonManager02</b> is simply a container for the 
static variables and constants described above and the static classes that I 
will explain shortly.&nbsp; Therefore, this class doesn't need either a 
constructor or an <b>act</b> method.</p>
<p><font color="#FF0000"><b>What is an act method?</b></font></p>
<p>If you have studied my earlier lessons on the Greenfoot IDE <i>(see
<a href="#Resources">Resources</a>)</i>, you will already know that every object 
instantiated from a class that extends the <b><a href="#Actor">Actor</a></b> 
class <i>(see Figure 2)</i> may override an inherited <b>act</b> method.&nbsp; 
The code that is written into the overridden version of the <b>act</b> method 
controls the behavior of the actor in the world.</p>
<p>


<p>Figure 1 shows a <b>Reset</b> button and a <b>Pause</b> button.&nbsp; When 
the scenario is loaded, the <b>Pause</b> button is a <b>Run</b> button.&nbsp; 
Clicking the <b>Run</b> button causes it to change into a <b>Pause</b> button.&nbsp; 
Clicking the <b>Pause</b> button causes it to change back into a <b>Run</b> 
button.&nbsp; Clicking the <b>Reset</b> button stops the execution and resets 
the state of the program to the state that it had immediately following 
compilation.</p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>The Act button and the slider</b><br />
  When you export a scenario, you have the option of including or excluding the
	Act button and the speed slider.&nbsp; They were excluded when the 
	scenario that produced Figure 1 was exported.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Not the actual IDE</b></font></p>
<p>The screen shot image shown in Figure 1 is not a screen shot of the actual IDE.&nbsp; 
<i>(The IDE is too wide to fit in this narrow publication format without making 
it smaller and reducing the legibility of the text.)</i>&nbsp; Rather, Figure 1 
shows a 
screen shot of an exported executable version of the scenario.</p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Controlling the act order</b><br />
  You can call the World method named setActOrder to control the order in which 
	the act methods are executed.&nbsp; Act order is specified by class: objects 
	of one class will always act before objects of some other class. The order 
	of objects of the same class cannot be specified.</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>The Act button and the speed slider</b></font></p>
<p>In addition to the <b>Run/Pause</b> button, the IDE also contains an <b>Act</b> 
button and an animation speed slider.&nbsp; Each time you click the <b>Act</b> 
button, the <b>act</b> method belonging to every <b>Actor</b> object is executed 
once.&nbsp; This makes it possible for you to execute the animation one step at 
a time.&nbsp; If you click the <b>Run</b> button, the <b>act</b> method 
belonging to every actor is executed repeatedly.&nbsp; Thus, the <b>Run</b> 
button triggers an animation loop, the speed of which can be controlled either 
through program code or manually using the speed slider.</p>
<h3><a name="The_class_named_RightArrow">The class named RightArrow</a></h3>
<p>The class named <b>ArrowButtonManager02</b> extends the <b>Actor</b> class <i>
(see Listing 3)</i> and encapsulates two static top-level classes named <b>
RightArrow</b> and <b>LeftArrow</b>.&nbsp; 
<a name="These_two_classes_are_very_similar">These two classes are very similar</a>, 
differing only to the extent necessary to accommodate the fact that an object of 
one is used to turn the pages forward and the other is used to turn the pages 
backwards.</p>
<p>The class named <b>RightArrow</b> is used to instantiate a button object of 
the type shown on the right side of the image in Figure 1.&nbsp; While a button 
of this type might be useful for a number of purposes, its primary use in this 
scenario is to &quot;turn the pages&quot; of a multi-page scenario in a forward direction 
as described earlier.&nbsp; This button is similar to one that you might see in 
a children's educational game, or perhaps in an online picture gallery.</p>
<p><font color="#FF0000"><b>Three images are used</b></font></p>
<p>As I described earlier, the bottom three images in Figure 3 are used to represent the 
button in its three different states.&nbsp; All three images consist of a filled blue 
oval with a cutout of an arrow pointing to the right.&nbsp; The NEUTRAL version 
of the button in the bottom left in Figure 3 has a transparent cutout. The 
&quot;STOP&quot; version has the cutout colored red and the &quot;GO&quot; version has the cutout 
colored green.&nbsp; All three versions consist of the oval in a rectangle, but 
the area outside of the oval is transparent so that the background image 
shows through the edges of the rectangle as shown in Figure 4.</p>
<p><font color="#FF0000"><b>Behavior of the buttons</b></font></p>
<p>The neutral version of the button is displayed whenever the mouse is not 
touching the button.&nbsp; The green version is displayed when the user touches 
the button with the mouse and there are more pages to be explored in the 
direction indicated by the arrow.&nbsp; The red version is displayed when the user touches the button 
with the mouse and there are no more pages to be explored in that direction.</p>
<p>Clicking a green <b>RightArrow</b> button with the mouse causes the next<br>
page to the right to be displayed.&nbsp; Clicking a red <b>RightArrow</b> button has no effect at 
all.</p>
<p>As explained earlier, variables and constants in the containing class named
<b>ArrowButtonManager02</b> are used to track the number of the page currently 
being viewed, along with the limit on the number of total pages that may be 
viewed.</p>
<p>Also, as explained earlier, an array in the superclass is used to maintain 
references to a set of <b>GreenfootImage</b> objects that are used to set the 
background for each page.</p>
<p>In the ideal case, only the data in the containing class needs to be changed 
to use this button with worlds&nbsp;having different numbers of pages and 
different background images on those pages.<br>
&nbsp;<br>
An object of this class is intended to be used in conjunction with an object of 
a companion class named <b>LeftArrow</b>. For that reason, this class and the 
companion class were encapsulated inside the superclass as static top-level 
classes.</p>
<p><font color="#FF0000">
<b>Beginning of the class named RightArrow</b></font></p>
<p>The class named <b>RightArrow</b> begins in Listing 5.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. Beginning of the class named RightArrow.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
public static class <b>RightArrow</b> 
                              extends ArrowButtonManager02{
  GreenfootImage goRightArrow;
  GreenfootImage stopRightArrow;
  GreenfootImage neutralRightArrow;</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 5 declares three variables of type <b>GreenfootImage</b> that will be 
used to store references to three objects containing the png versions of the 
images shown in the bottom row in Figure 3.</p>
<p><font color="#FF0000">
<b>The constructor for the RightArrow class</b></font></p>
<p>The constructor for the <b>RightArrow</b> class is shown in Listing 6.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. The constructor for the RightArrow class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public <b>RightArrow</b>(){//constructor
    //Construct and scale the three GreenfootImage objects
    // that are used to represent the button in the world.
    goRightArrow = new GreenfootImage("gorightarrow.png");
    goRightArrow.scale(goRightArrow.getWidth()/2,
                       goRightArrow.getHeight()/2);
    stopRightArrow = 
                  new GreenfootImage("stoprightarrow.png");
    stopRightArrow.scale(stopRightArrow.getWidth()/2,
                         stopRightArrow.getHeight()/2);
    neutralRightArrow = 
               new GreenfootImage("neutralrightarrow.png");
    neutralRightArrow.scale(neutralRightArrow.getWidth()/2,
                          neutralRightArrow.getHeight()/2);
                          
    //Set the default image on the button.
    setImage(neutralRightArrow);
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The constructor begins by instantiating <b>GreenfootImage</b> objects for 
each of the three png files containing the arrows shown in the bottom row of 
Figure 3 and then scaling those images to one-half their original size.&nbsp; 
Note that the width and the height of an image must be scaled independently of 
one another.</p>
<p>The last statement in the constructor sets the default image for the button 
to be the same as the bottom left image in Figure 3 where all of the white area 
in Figure 3 is transparent allowing the background image to show through.</p>
<p><font color="#FF0000">
<b>Beginning of the <i>act</i> method</b></font></p>
<p>The beginning of the <b>act</b> method for the <b>RightArrow</b> class is 
shown in Listing 7.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. Beginning of the <i>act</i> method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public void <b>act</b>(){
    if(Greenfoot.<b>mouseMoved</b>(getWorld())){
      <b>setImage</b>(neutralRightArrow);
    }//end if</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Greenfoot provides a mouse-event handling methodology that is somewhat 
simplified relative to that which you experience when programming with the 
JavaBeans event model.&nbsp; <i>(Note, however, that you are not prevented from 
using the JavaBeans event model if you choose to do so.)</i></p>
<p>Listing 7 uses the static method named <b>mouseMoved</b> of the class named
<b>Greenfoot</b> to return the button to the state that displays the neutral 
image when the mouse is moved from touching the button to touching the 
world.</p>
<p><font color="#FF0000"><b>Description of the mouseMoved method</b></font></p>
<p>A partial description of the <b>mouseMoved</b> method is provided in Figure 5.</p>
<p><b><a name="Figure_5">Figure 5</a>. Description of the mouseMoved method. </b>
<table border="1" cols="1" width="477" bgcolor="#EFE9B8" >
  <tbody>
    <tr>
      <td>
      <b>public static boolean mouseMoved(java.lang.Object&nbsp;obj)</b><p>Returns 
		true if the mouse has been moved on the given object.</p>
		<p>The mouse is considered to be moved on an object if the mouse pointer 
		is above that object. </p>
		<p>If the parameter is an <b>Actor</b> the method will only return true 
		if the move is on the given actor. If there are several actors at the 
		same place, only the top-most actor will receive the move.</p>
		<p>If the parameter is a <b>World</b> then true will be returned if the 
		move was on the world background.</p>
		<p>If the parameter is <b>null</b>, then true will be returned for any 
		move, independent of the target under the move location.
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Calling the getWorld method</b></font></p>
<p>In this case, the return value from the <b>getWorld</b> method was passed as 
a parameter to the <b>mouseMoved</b> method.&nbsp; <i>(According to the 
Greenfoot documentation, the getWorld method 
returns a reference to the world that the button actor lives in.)</i>&nbsp; </p>
<p>Keep in mind that the <b>act</b> method is executed repetitively and the call 
to the <b>mouseMoved</b> method is made each time the <b>act</b> method is 
executed.&nbsp; Therefore, if the mouse was more recently moved on the world 
background than on the button actor, the <b>setImage</b> method in Listing 7 
will be executed causing the neutral image to be displayed on the button.</p>
<p><font color="#FF0000">
<b>Display red or green image on the button</b></font></p>
<p>If the mouse was most recently moved on the <b>RightArrow</b> object, either 
the red or green image needs to be displayed on the button.&nbsp; The code in 
Listing 8 determines which page is currently being viewed and uses that 
information to select either the red image or the green image and to display that 
image on the button.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. Display red or green image on the button. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    if(Greenfoot.<b>mouseMoved</b>(this) && 
                          (rightClickCnt < rightClickLim)){
      //Set the image to the green button
      setImage(goRightArrow);
    }else{
      if(Greenfoot.mouseMoved(this) && 
                         (rightClickCnt >= rightClickLim)){
        //Set the image to the red button.
        setImage(stopRightArrow);
      }//end if
    }//end else</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The mouseClicked method</b></font></p>
<p>A partial description of the <b>mouseClicked</b> method of the <b>Greenfoot</b> 
class is provided in Figure 6.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. Description of the mouseClicked method. </b>
<table border="1" cols="1" width="477" bgcolor="#EFE9B8" >
  <tbody>
    <tr>
      <td>
      <b>public static boolean mouseClicked(java.lang.Object&nbsp;obj)</b><p>Returns 
		true if the mouse has been clicked <i>(pressed and released)</i> on the 
		given object.</p>
		<p>If the parameter is an <b>Actor</b> the method will only return true 
		if the mouse has been clicked on the given actor. If there are several 
		actors at the same place, only the top most actor will receive the 
		click.</p>
		<p>If the parameter is a <b>World</b> then true will be returned if the 
		mouse was clicked on the world background.</p>
		<p>If the parameter is <b>null</b>, then true will be returned for any 
		click, independent of the target clicked on.
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Other code may be required</b><br />
  In a more elaborate scenario, it may be necessary to perform other operations 
	in addition to simply changing the background image when the button is 
	clicked.
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000">
<b>Responding to a click on the RightArrow button</b></font></p>
<p>When the <b>RightArrow</b> button is clicked and the user is viewing the 
first or second of the three pages in the scenario <i>(the button turns green)</i>, 
the program should turn to the next page by displaying the background image that 
is appropriate for that page.&nbsp; <i>(See the three background images in 
Figure 4.)</i></p>
<p>If the viewer is already viewing the third page when the button is clicked <i>
(the button turns red)</i>, the click should simply be ignored.&nbsp; These 
operations are 
accomplished by the code in Listing 9.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. Responding to a click on the RightArrow 
button. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    if(Greenfoot.mouseClicked(this) && 
                          (rightClickCnt < rightClickLim)){
      rightClickCnt++;
      leftClickCnt--;
      //Add code here to completely populate the new scene
      // in addition to changing the background.
      getWorld().setBackground(backgrounds[rightClickCnt]);
      
      //Cause the arrow to turn red at the limit.
      if(rightClickCnt >= backgrounds.length - 1){
        setImage(stopRightArrow);
      }//end if
      
    }//end if
  }//end act
}//end static top-level class named RightArrow</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Update the state variables</b></font></p>
<p>In addition, if the page is turned, the variable named <b>rightClickCnt</b> 
is incremented and the variable named <b>leftClickCnt</b> is decremented as 
described <a href="#in_the_sequence">earlier</a>.</p>
<p><font color="#FF0000"><b>End of the <i>act</i> method and end of the <i>
RightArrow</i> class</b></font></p>
<p>Listing 9 also signals the end of the method named <b>act</b> and the end of 
the class named <b>RightArrow</b>.</p>
<h3><a name="The_class_named_LeftArrow">The class named LeftArrow</a></h3>
<p>A static top-level class named <b>LeftArrow</b> is also encapsulated in the 
class named <b>ArrowButtonManager02</b>.&nbsp; An object of this class is used 
for the arrow on the left side of Figure 1.&nbsp; As mentioned
<a href="#These_two_classes_are_very_similar">earlier</a>, this class is very 
similar to the <b>RightArrow</b> class, differing only to the extent necessary 
to accommodate the fact that an object of one class is used to turn the pages 
forward and an object of the other class is used to turn the pages backwards.&nbsp; 
Therefore, an explanation of the <b>LeftArrow</b> class shouldn't be needed.</p>
<h2 align="center"><a name="An_online_version_of_the_scenario">An online version 
of the scenario</a></h2>
<p>I have published an online version of this scenario named <b>ArrowButton02
</b>at the Greenfoot gallery
<i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; You can run the scenario 
online at that URL and I encourage you do so while you are reading this 
lesson.</p>
<p>You can also download the source code for the scenario, including both the png 
and the jpg versions of the six image files used for the buttons.&nbsp; </p>
<center>
<h2><a name="Run the program"></a>Run the scenario</h2>
</center>
<p>I encourage you to either download my source code from the Greenfoot gallery, 
or copy the code from Listing 10 and Listing 11 and create your own version of 
the scenario.&nbsp; Experiment with the code, making changes, and 
observing the results of your changes.&nbsp; Make certain that you can explain why 
your changes behave as they do. </p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I introduced you to the methodology for creating your own 
custom GUI components using Greenfoot by creating a pair of buttons used to turn 
the pages in a Greenfoot scenario.</p>
<ul>
</ul>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>Future lessons in this series will develop more complex GUI components using 
more complex Greenfoot scenarios.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a href="http://www.greenfoot.org/index.html">Greenfoot Home</a></li>
	<li><a href="http://www.greenfoot.org/download/">Greenfoot Download Page</a></li>
	<li><a href="http://greenfootgallery.org/">The Greenfoot Gallery</a></li>
	<li><a href="http://www.developer.com/java/other/article.php/3761811">Hs00301</a> Getting Started with the Java IDE named Greenfoot</li>
	<li><a href="http://www.dickbaldwin.com/homeschool/Hs00305.htm">Hs00305</a> Introduction to Methods with Greenfoot</li>
	<li><a href="http://www.dickbaldwin.com/homeschool/Hs00310.htm">Hs00310</a> Variables and Literals <i>(including Greenfoot)</i></li>
	<li><a href="http://www.gimp.org/">GNU Image Manipulation Program<i> (gimp)</i></a></li>
	<li><a href="http://www.ociweb.com/jnb/jnbAug2008.html">Greenfoot, a live 
	object world for students</a></li>
	<li><a href="http://greenfootgallery.org/scenarios/180">Online version of 
	Baldwin's ArrowButton02 scenario</a></li>
	<li><a href="http://www.dickbaldwin.com/homeschool/Hs00310.htm">Online 
	version of Baldwin's Infestation scenario</a></li>
	<li><a href="http://greenfootgallery.org/scenarios/181">Online version of 
	Baldwin's Infestation01 scenario</a></li>
	<li><a href="http://greenfootgallery.org/scenarios/224">Online version of 
	Baldwin's Menu02 scenario</a></li>
	<li><a href="http://greenfootgallery.org/scenarios/195">Online version of 
	Baldwin's TextBox01 scenario</a></li>
	<li><a href="http://greenfootgallery.org/scenarios/226">Online version of 
	Baldwin's TextBox02 scenario</a></li>
	<li><a href="Online%20version%20of%20Baldwin's%20TextLabel01%20scenario">
	Online version of Baldwin's TextLabel01 scenario</a></li>
	<li><a href="http://greenfootgallery.org/scenarios/230">Online version of 
	Baldwin's MathGame01 scenario</a></li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the source code for the scenario discussed in this lesson 
are shown in Listing 10 and Listing 11 below.<p>
<b><a name="Listing_10">Listing 10</a>. Source code for the class named ArrowButton02. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import greenfoot.*;
/**
 * This is the world class for a scenario that is designed
 * to illustrate how to use custom arrow buttons to scroll
 * the background of the world right and left through
 * three different scenes.
 * 
 * This scenario illustrates the kind of behavior that you
 * might see in a child's educational game where the player
 * is allowed to progress back and forth through different
 * scenes or worlds.
 * 
 * @author Dick Baldwin 
 * @version July 6, 2008
 */
public class ArrowButton02 extends World{
  ArrowButtonManager02.RightArrow rightArrow;
  ArrowButtonManager02.LeftArrow leftArrow;
  
  public ArrowButton02(){//constructor
    //Set the size of the world, populate the world with
    // two custom buttons, and set the initial background
    // for the world. Note that the classes from which the
    // button objects are instantiated are static top-level
    // classes of the class named ArrowButtonManager02.
    super(450,450,1);
    rightArrow = new ArrowButtonManager02.RightArrow();
    leftArrow = new ArrowButtonManager02.LeftArrow();
    addObject(rightArrow,400,225);
    addObject(leftArrow,50,225);
    setBackground(new GreenfootImage("bathroom-tile.gif"));
  }//end constructor
}//end class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_11">Listing 11</a>. Source code for the class named ArrowButtonManager02.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import greenfoot.*;

/**
 * The purpose of this class is to encapsulate a pair of
 * static top-level classes from which a RightArrow object
 * and a LeftArrow object can be instantiated.  Because
 * objects of these two classes are intended to work in
 * concert, and because they need to share some 
 * information, the two classes were encapsulated inside
 * this class as static top-level classes.
 * 
 * This class also maintains the information that objects
 * of the RightArrow and LeftArrow classes need to share.
 * 
 * @author Dick Baldwin 
 * @version July 6, 2008
 */
public class ArrowButtonManager02 extends Actor{
  //The following variables are used to keep track of how
  // many times the user has scrolled the scene to the
  // right and to the left. They are also used to determine
  // when the user has scrolled to the limit in either 
  // direction.  Set the limit values to one less than the
  // number of scenes in the world.
  protected static int rightClickCnt = 0;
  protected final static int rightClickLim = 2;
  protected final static int leftClickLim = 2;
  protected static int leftClickCnt = leftClickLim;
  
  //The following array stores references to GreenfootImage
  // objects that are used to set the background of the
  // world each time the user clicks one of the buttons.
  protected final static GreenfootImage[] backgrounds = {
                   new GreenfootImage("bathroom-tile.gif"),
                   new GreenfootImage("brick.jpg"),
                   new GreenfootImage("burlap.jpg")};

  //Note that this class doesn't need a constructor or an
  // act method.

  //Here is the beginning of a pair of static top-level
  // classes.
  
//=======================================================//
/**
 * This is a class from which a "right arrow" button can
 * be constructed.  While the button may be useful for a
 * variety of purposes, the primary intended purpose is to
 * scroll a world right and left through several different 
 * background scenes, much as you might see in a children's
 * educational game where the child can progress forward 
 * and backwards through a sequence of different "worlds."
 * 
 * Three different images are used to represent the button.
 * All three images consist of a filled blue oval with a
 * cutout of an arrow pointing to the right.  The NEUTRAL
 * version of the button has a transparent cutout.  The
 * "GO" version has the cutout colored green.  The "STOP"
 * version has the cutout colored red.
 * 
 * The neutral version is displayed whenever the mouse is
 * not over the button.  The green version is displayed 
 * when the user points to the button with the mouse and
 * there are more worlds to the right for the user to
 * explore.  The red version is displayed when the user
 * points to the button with the mouse and there are no 
 * more worlds to the right to be explored.
 * 
 * Clicking a green button with the mouse causes the next
 * scene to the right to be displayed in the world.  
 * Clicking a red button has no effect at all.
 * 
 * Variables and constants in the containing class named
 * ArrowButtonManager02 are used to track the number
 * of times the user has scrolled to the right along with
 * the limit on the number of allowable scrolls to the 
 * right
 * 
 * An array in the superclass is used to maintain 
 * references to a set of GreenfootImage objects that are
 * used to set the background for each of the scenes.
 * 
 * In the ideal case, only the data in the containing class
 * needs to be changed to use this button with worlds 
 * having different numbers of background scenes and 
 * different actual background images.
 * 
 * An object of this class is intended to be used in
 * conjunction with an object of a companion class named
 * LeftArrow.  For that reason, this class and the 
 * companion class were encapsulated inside the superclass
 * as static top-level classes.
 * 
 * @author Dick Baldwin 
 * @version July 6, 2008
 */
public static class RightArrow 
                              extends ArrowButtonManager02{
  GreenfootImage goRightArrow;
  GreenfootImage stopRightArrow;
  GreenfootImage neutralRightArrow;
  
  public RightArrow(){//constructor
    //Construct and scale the three GreenfootImage objects
    // that are used to represent the button in the world.
    goRightArrow = new GreenfootImage("gorightarrow.png");
    goRightArrow.scale(goRightArrow.getWidth()/2,
                       goRightArrow.getHeight()/2);
    stopRightArrow = 
                  new GreenfootImage("stoprightarrow.png");
    stopRightArrow.scale(stopRightArrow.getWidth()/2,
                         stopRightArrow.getHeight()/2);
    neutralRightArrow = 
               new GreenfootImage("neutralrightarrow.png");
    neutralRightArrow.scale(neutralRightArrow.getWidth()/2,
                          neutralRightArrow.getHeight()/2);
                          
    //Set the default image on the button.
    setImage(neutralRightArrow);
  }//end constructor

  public void act(){
    //Cause the image representing the button to return to
    // the neutral version when the mouse is not over the
    // button.
    if(Greenfoot.mouseMoved(getWorld())){
      setImage(neutralRightArrow);
    }//end if
    
    //Cause the cutout arrow portion of the button to
    // change from transparent to either red or green
    // depending on whether the user has already scrolled
    // to the right as far as is allowed whenever the
    // user points the mouse at the button.
    if(Greenfoot.mouseMoved(this) && 
                          (rightClickCnt < rightClickLim)){
      //Set the image to the green button
      setImage(goRightArrow);
    }else{
      if(Greenfoot.mouseMoved(this) && 
                         (rightClickCnt >= rightClickLim)){
        //Set the image to the red button.
        setImage(stopRightArrow);
      }//end if
    }//end else

    //When the button is clicked and the user hasn't 
    // already scrolled as far to the right as is allowed
    // (meaning the button will turn green), increment and 
    // decrement the counters that are maintained in the 
    // superclass named ArrowButtonManager02. Ignore the
    // click if the user has already scrolled as far to the
    // right as is allowed.
    //Also use the new value of the counter to set the
    // background of the world to the correct background
    // image.
    if(Greenfoot.mouseClicked(this) && 
                          (rightClickCnt < rightClickLim)){
      rightClickCnt++;
      leftClickCnt--;
      //Add code here to completely populate the new scene
      // in addition to changing the background.
      getWorld().setBackground(backgrounds[rightClickCnt]);
      
      //Cause the arrow to turn red at the limit.
      if(rightClickCnt >= backgrounds.length - 1){
        setImage(stopRightArrow);
      }//end if
      
    }//end if
  }//end act
}//end static top-level class named RightArrow
//=======================================================//

/**
 * See the description of the class named RightArrow. This
 * class is similar to that one except that the arrow
 * button instantiated from this class points to the left 
 * instead of to the right.
 * 
 * @author Dick Baldwin 
 * @version July 6, 2008
 */
public static class LeftArrow extends ArrowButtonManager02{
  GreenfootImage goLeftArrow;
  GreenfootImage stopLeftArrow;
  GreenfootImage neutralLeftArrow;
  
  public LeftArrow(){//constructor
    goLeftArrow = new GreenfootImage("goleftarrow.png");
    goLeftArrow.scale(goLeftArrow.getWidth()/2,
                      goLeftArrow.getHeight()/2);
    stopLeftArrow = 
                   new GreenfootImage("stopleftarrow.png");
    stopLeftArrow.scale(stopLeftArrow.getWidth()/2,
                        stopLeftArrow.getHeight()/2);
    neutralLeftArrow = 
                new GreenfootImage("neutralleftarrow.png");
    neutralLeftArrow.scale(neutralLeftArrow.getWidth()/2,
                           neutralLeftArrow.getHeight()/2);
    
    setImage(neutralLeftArrow);
  }//end constructor

  public void act(){
    if(Greenfoot.mouseMoved(getWorld())){
      setImage(neutralLeftArrow);
    }//end if
    
    if(Greenfoot.mouseMoved(this) && 
                            (leftClickCnt < leftClickLim)){
      setImage(goLeftArrow);
    }else{
      if(Greenfoot.mouseMoved(this) && 
                           (leftClickCnt >= leftClickLim)){
        setImage(stopLeftArrow);
      }//end if
    }//end else

    if(Greenfoot.mouseClicked(this) && 
                            (leftClickCnt < leftClickLim)){
      leftClickCnt++;
      rightClickCnt--;
      getWorld().setBackground(backgrounds[rightClickCnt]);
      
      //Cause the arrow to turn red at the limit.
      if(leftClickCnt >= backgrounds.length - 1){
        setImage(stopLeftArrow);
      }//end if
      
    }//end if
  }//end act
}//end static top-level class named LeftArrow
//=======================================================//

}//end class ArrowButtonManager02</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2008, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
<p>keywords: GUI button Greenfoot</p>
</font>
</body>
</html>
