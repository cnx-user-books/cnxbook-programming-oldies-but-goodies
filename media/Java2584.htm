<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2 align="center">Using Forms and Items in MIDlets</h2>
<p><i>Learn about the class named Item.&nbsp; Then learn how to create a Form 
and how to populate it with objects of the following classes:&nbsp; String, 
StringItem, Image, ImageItem, ChoiceGroup, DateField, Gauge (interactive), Gauge 
(non-interactive), Spacer, and TextField.&nbsp; Also learn about layout 
directives and appearance modes.</i></p>
<p><b>Published:</b>&nbsp; May 20, 2008<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 2584</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#The_Form_class">The Form class</a></li>
	<li><a href="#The_Item_class">The Item class</a></li>
	<li><a href="#The_StringItem_class">The StringItem class</a></li>
	<li><a href="#The_ImageItem_class">The ImageItem class</a></li>
	<li><a href="#The_ChoiceGroup_class">The ChoiceGroup</a> </li>
	<li><a href="#The_DateField_class">The DateField class</a></li>
	<li><a href="#The_Gauge_class">The Gauge class</a></li>
	<li><a href="#The_Spacer_class">The Spacer class</a></li>
	<li><a href="#The_TextField_class">The TextField class</a></li>
</ul>
	</li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a></li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listing</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p>This is one in a series of tutorial lessons designed to teach you how to 
write programs using the Sun Java Wireless Toolkit for CLDC.&nbsp; The first lesson 
was titled <i>Getting Started with MIDlets and the Sun Java Wireless Toolkit for 
CLDC</i>.&nbsp; The previous lesson was titled <i>Using Lists in MIDlets (see
<a href="#Resources">Resources</a>)</i>.</p>
<p><font color="#ff0000"><b>What you will learn</b></font></p>
<p>In this lesson, you will learn about the class named <b>Item</b>.&nbsp; Then you 
will learn how to create a <b>Form</b> and how to populate it with objects of 
the following classes:</p>
<ul>
	<li>String</li>
	<li>StringItem</li>
	<li>Image</li>
	<li>ImageItem</li>
	<li>ChoiceGroup</li>
	<li>DateField</li>
	<li>Gauge <i>(interactive)</i></li>
	<li>Gauge <i>(non-interactive)</i></li>
	<li>Spacer</li>
	<li>TextField</li>
</ul>
<p>You will also learn about layout directives and appearance modes.</p>
<p><font color="#ff0000"><b>A MIDlet development framework</b></font></p>
<p>For this lesson, you will need the updated version of the MIDlet development 
framework named <b>WTKFramework03</b>, which was provided in the earlier lesson 
titled <i>Using Alerts, Images, Timers, and Gauges in MIDlets (see
<a href="#Resources">Resources</a>)</i>.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Partial class hierarchy for MIDP 2.0.</li>
	<li><a href="#Figure_2">Figure 2</a>. Methods of the Form class.</li>
	<li><a href="#Figure_3">Figure 3</a>. Initial output from the MIDlet named 
	Form01.</li>
	<li><a href="#Figure_4">Figure 4</a>. Methods of the Item class.</li>
	<li><a href="#Figure_5">Figure 5</a>. Selecting an element within a 
	ChoiceGroup Item.</li>
	<li><a href="#Figure_6">Figure 6</a>. Methods of the DateField class.</li>
	<li><a href="#Figure_7">Figure 7</a>. System generated screen for editing 
	the DateField object contents.</li>
	<li><a href="#Figure_8">Figure 8</a>. Result of editing the contents of the 
	DateField object.</li>
	<li><a href="#Figure_9">Figure 9</a>. Display of interactive Gauge object 
	with the focus.</li>
	<li><a href="#Figure_10">Figure 10</a>. Scroll down and view the TextField 
	object.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Adding StringItem objects to the 
	Form.</li>
	<li><a href="#Listing_2">Listing 2</a>. Calling the shorthand method for 
	ImageItem objects.</li>
	<li><a href="#Listing_3">Listing 3</a>. Create and append an ImageItem 
	object to the Form.</li>
	<li><a href="#Listing_4">Listing 4</a>. Create and append a ChoiceGroup 
	object.</li>
	<li><a href="#Listing_5">Listing 5</a>. Create a DateField object and add it 
	to the Form.</li>
	<li><a href="#Listing_6">Listing 6</a>. Creating an interactive Gauge object 
	and adding it to the Form.</li>
	<li><a href="#Listing_7">Listing 7</a>. Create a Spacer and add it to the 
	Form.</li>
	<li><a href="#Listing_8">Listing 8</a>. Beginning of the class named Form01.</li>
	<li><a href="#Listing_9">Listing 9</a>. The remaining code in the class 
	named Form01.</li>
	<li><a href="#Listing_10">Listing 10</a>. Source code for the MIDlet named 
	Form01.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online Java tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<p>A partial class hierarchy for MIDP 2.0 is shown in Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Partial class hierarchy for MIDP 2.0. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li>Object<ul>
		<li><i><b>Displayable</b></i><ul>
			<li><i><b>Screen</b></i><ul>
				<li><i><b>TextBox</b></i></li>
				<li><i><b>Alert</b></i></li>
				<li><i><b>List</b></i></li>
				<li><b>Form</b></li>
			</ul>
			</li>
			<li>Canvas <i>(abstract)</i><ul>
				<li>GameCanvas <i>(abstract)</i></li>
			</ul>
			</li>
		</ul>
		</li>
		<li><i><b>Display</b></i></li>
		<li><b><i>Ticker</i></b></li>
		<li><i><b>AlertType</b></i></li>
		<li><i><b>Image</b></i></li>
		<li><b>Item</b><ul>
			<li><i><b>Gauge</b></i></li>
			<li><b>ChoiceGroup</b></li>
			<li>CustomItem</li>
			<li><b>DateField</b></li>
			<li><b>ImageItem</b></li>
			<li><b>Spacer</b></li>
			<li><b>StringItem</b></li>
			<li><b>TextField</b></li>
		</ul>
		</li>
		<li><i><b>Timer</b></i></li>
		<li><i><b>TimerTask</b></i></li>
	</ul>
	</li>
</ul>
<p>&nbsp;</td>
    </tr>
  </tbody>
</table>
</p>
<p>I have discussed and illustrated the classes shown in boldface Italics in 
earlier lessons <i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; I will discuss 
and illustrate the following classes in this lesson:</p>
<ul>
	<li>Form</li>
	<li>Item</li>
	<li>ChoiceGroup</li>
	<li>DateField</li>
	<li>ImageItem</li>
	<li>Spacer</li>
	<li>StringItem</li>
	<li>TextField</li>
</ul>
<p>I will discuss and illustrate the<b> Canvas</b> and <b>GameCanvas</b> classes 
in future lessons.&nbsp; I will leave <b>CustomItem</b> as an exercise for the 
student.</p>
<h3><a name="The_Form_class">The Form class</a></h3>
<p>As you can see in Figure 1, the <b>Form</b> class is one of four classes that 
extend the <b>Screen</b> class.&nbsp; These four classes constitute the 
high-level user interface components that are available in MIDP 2.0.&nbsp; The use of 
the <b>Form</b> class is considerably more complicated than the use of any of 
the other three.</p>
<p>Here is part of what Sun has to say about the <b>Form</b> class:</p>
<blockquote>
	<p><i>&quot;A <b>Form</b> is a <b>Screen</b> that contains an arbitrary mixture 
	of items: images, read-only text fields, editable text fields, editable date 
	fields, gauges, choice groups, and custom items. In general, any subclass of 
	the <b>Item</b> class may be contained within a form. The implementation 
	handles layout, traversal, and scrolling. The entire contents of the <b>Form</b> 
	scrolls together.&quot;</i></p>
</blockquote>
<p><font color="#FF0000">
 <b>Methods of the Form class</b></font></p>
<p>Perhaps the best way to begin understanding that complexity is to take a look 
at the methods belonging to the <b>Form</b> class.</p>
<p>
 <b><a name="Figure_2">Figure 2</a>. Methods of the Form class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li><i><b>Group 1</b></i> 
	------------------------------------------------------------</li>
	<li><b>append(Item&nbsp;item)</b> - Adds an Item into the Form.</li>
	<li><b>insert(int&nbsp;itemNum, Item&nbsp;item)</b> - Inserts an item into the Form 
	just prior to the item specified.</li>
	<li><b>set(int&nbsp;itemNum, Item&nbsp;item)</b> - Sets the item referenced by itemNum 
	to the specified item, replacing the previous item.</li>
	<li><i><b>Group 2</b></i> 
	------------------------------------------------------------</li>
	<li><b>append(String&nbsp;str)</b> - Adds an item consisting of one String to the 
	Form.</li>
	<li><b>append(Image&nbsp;img)</b> - Adds an item consisting of one Image to the 
	Form.</li>
	<li><i><b>Group 3</b></i> 
	------------------------------------------------------------</li>
	<li><b>delete(int&nbsp;itemNum)</b> - Deletes the Item referenced by itemNum.</li>
	<li><b>deleteAll()</b> - Deletes all the items from this Form, leaving it 
	with zero items.</li>
	<li><i><b>Group 4</b></i> 
	------------------------------------------------------------</li>
	<li><b>get(int&nbsp;itemNum)</b> - Gets the item at given position.</li>
	<li><b>getHeight()</b> - Returns the height in pixels of the displayable 
	area available for items.</li>
	<li><b>getWidth()</b> - Returns the width in pixels of the displayable area 
	available for items.</li>
	<li><b>size()</b> - Gets the number of items in the Form.</li>
	<li><i><b>Group 5</b></i> 
	------------------------------------------------------------</li>
	<li><b>setItemStateListener(ItemStateListener&nbsp;iListener)</b> <br>
	- Sets the ItemStateListener for the Form, replacing any previous 
	ItemStateListener.</li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Adding items to a Form</b></font></p>
<p>I have separated the methods in Figure 2 into five functional groups to make 
it easer to understand them.&nbsp; The three methods in the first group are used 
to add items to the <b>Form</b>.&nbsp; The thing that these three methods have 
in common is that they all require an incoming parameter of type <b>Item</b>.</p>
<p><font color="#FF0000"><b>Adding strings and images to a Form</b></font></p>
<p>The two methods in the second group are also used to add items to the <b>Form</b>.&nbsp; 
The thing that sets them apart from the first group is that they don't require 
incoming parameters of type <b>Item</b>.&nbsp; Note however, that the behavior 
of these two methods is identical to the following:</p>
<ul>
	<li>append(new <b>StringItem</b>(null, str))</li>
	<li>append(new <b>ImageItem</b>(null, img, ImageItem.LAYOUT_DEFAULT, null))</li>
</ul>
<p>Thus, these two methods are <a name="simply_specialized_shorthand_versions">simply specialized shorthand versions</a> of the first method in 
the first group for use with strings and images.&nbsp; <i>(You will learn more 
about the classes named <b>StringItem</b> and <b>ImageItem</b> later in this 
lesson.&nbsp; Suffice it for now to say that they are both subclasses of the <b>
Item</b> class.)</i></p>
<p><font color="#FF0000"><b>Deleting items from a Form</b></font></p>
<p>The <i>delete</i> methods in Group 3 are self-explanatory.</p>
<p><font color="#FF0000"><b>The getter methods</b></font></p>
<p>The first <b>get</b> method in Group 4 gets a reference to the item at the 
specified index without changing the contents of the <b>Form</b>.&nbsp; The 
remaining three <i>getter</i> methods in Group 4 are used to get the values of 
common properties of the <b>Form</b>.</p>
<p><font color="#FF0000"><b>Interactive programming</b></font></p>
<p>The single method in Group 5 is used for interactive programming, which will 
be the topic of a future lesson.</p>
<p><font color="#FF0000"><b>Numeric indices</b></font></p>
<p>Items within a <b>Form</b> are referred to by numeric indices ranging from 
zero to <b>size()-1</b>.&nbsp; The index value zero refers to the first item in 
the <b>Form</b>.</p>
<p><font color="#FF0000"><b><a name="Form_layout">Form layout</a></b></font></p>
<p>The layout of a form is far too complex to be explained in detail in this 
lesson, so you are encouraged to avail yourself of the Sun documentation.&nbsp; Here are a few layout highlights.</p>
<p><font color="#FF0000"><b>Layout is based on rows</b></font></p>
<p>The layout of a <b>Form</b> is based on rows of items.&nbsp; All rows in a <b>
Form</b> have the same width.</p>
<p><font color="#FF0000"><b>The height of a Form</b></font></p>
<p><b>Forms</b> grow vertically and scroll vertically as necessary. For example, 
with the Sun cell phone emulator, a <b>Form</b> that is taller than the screen 
can be scrolled vertically using the up and down arrow keys on the cell phone 
keypad <i>(see Figure 3)</i>.&nbsp; 
The height of a <b>Form</b> varies depending upon the number of rows and the 
height of each row. The height of each row is determined by the items that are 
positioned on that row. Rows need not all have the same height.</p>
<p><font color="#FF0000"><b>Multiple items can appear on each row</b></font></p>
<p>A cell phone may choose to lay out <b>Items</b> in a left-to-right or 
right-to-left direction depending upon the language conventions in use.</p>
<p>According to Sun,</p>
<blockquote>
	<p><i>&quot;Items are laid out at the beginning of each row, proceeding across 
	each row in the chosen layout direction, packing as many Items onto each row 
	as will fit, unless a condition occurs that causes the packing of a row to 
	be terminated early. A new row is then added, and Items are packed onto it 
	as described above. Items are packed onto rows, and new rows are added below 
	existing rows as necessary until all Items have been processed by the layout 
	algorithm.&quot;</i></p>
</blockquote>
<p>Also according to Sun,</p>
<blockquote>
	<p><i>&quot;The layout algorithm generally attempts to place an item on the same 
	row as the previous item, unless certain conditions occur that cause a &quot;row 
	break.&quot; When there is a row break, the current item will be placed at the 
	beginning of a new row instead of being placed after the previous item, even 
	if there is room.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>Conditions for &quot;row breaks&quot;</b></font></p>
<p>There are a variety of conditions that can produce a <i>&quot;row break&quot;</i> 
including, for example, the inclusion of &quot;\n&quot; in the contents of a <b>String</b> 
or <b>StringItem</b>.&nbsp; The process for determining whether a new item will 
appear on the same row or on the next row is very complicated.&nbsp; If you are 
planning on producing J2ME products, I recommend that you study this portion of 
the documentation very carefully.</p>
<p><font color="#FF0000"><b>The current alignment</b></font></p>
<p>The layout algorithm has a concept of a current alignment with the following 
values:</p>
<ul>
	<li>Item.LAYOUT_LEFT</li>
	<li>Item.LAYOUT_CENTER</li>
	<li>Item.LAYOUT_RIGHT</li>
</ul>
<p>If the layout direction is left-to-right, the initial alignment value is 
LAYOUT_LEFT.&nbsp; Similarly, if the layout direction is right-to-left, the 
initial alignment is LAYOUT_RIGHT.</p>
<p>The current alignment persists as new items are added to the form.&nbsp; The 
current alignment can be changed by adding a new <b>Item</b> that was 
constructed using a layout directive that is different from the current 
alignment.&nbsp; Not all constructors for <b>Item</b> subclasses allow for a 
layout directive.&nbsp; However, all subclasses of <b>Item</b> inherit a method 
named <b>setLayout</b>, which can be used to change the current alignment.</p>
<p><font color="#FF0000"><b>A sample Form</b></font></p>
<p>Before going further, it will probably be useful to show you the initial 
output produced on the Sun cell phone emulator for the MIDlet named <b>Form01</b>.&nbsp; 
That output is shown in Figure 3.&nbsp; Some of the items in the <b>Form</b> 
are interactive.&nbsp; Figure 3 shows the output before any user interaction 
has taken place.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. Initial output from the MIDlet named 
	Form01. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2584a1.jpg" width="313" height="474"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The contents of the Form</b></font></p>
<p>Starting at the top left and working down and to the right, you can see the 
following items in Figure 3.</p>
<ul>
	<li>A <b>String</b> object with the default initial alignment of Item.LAYOUT_LEFT.&nbsp; 
	</li>
	<li>A <b>StringItem</b> object with no change in the current alignment.</li>
	<li>Three <b>Image</b> objects on the same row with no change in the current 
	alignment.</li>
	<li>An <b>ImageItem</b> object with the layout directive set to 
	Item.LAYOUT_CENTER.&nbsp; This changes the current alignment.</li>
	<li>A <b>ChoiceGroup</b> object containing three elements with the layout 
	directive set to Item.LAYOUT_DEFAULT.&nbsp; This is essentially the same as 
	a <b>List</b> object placed in a <b>Form</b>.&nbsp; Also, this does not 
	change the current alignment value of Item.LAYOUT_CENTER.</li>
	<li>A <b>DateField</b> object with no change in the current alignment.</li>
	<li>An interactive <b>Gauge</b> object with no change in the current 
	alignment.</li>
	<li>A <b>Spacer</b> object with a size of 10x10 pixels and no change in the 
	current alignment.</li>
	<li>A non-interactive <b>Gauge</b> object with no change in the current 
	alignment <i>(partially off the bottom of the cell phone emulator screen)</i></li>
	<li>A <b>TextField</b> object with no change in the current alignment that 
	is completely off the bottom of the screen and is therefore not visible in 
	Figure 3.</li>
</ul>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b><a name="Using_the_computer_keyboard">
				Using the computer keyboard</a></b><br>
				Note that in some cases, keys on the computer keyboard can be 
				used to simulate pressing the buttons on the emulator keypad.&nbsp; 
				For example, the up and down arrow keys on the computer keyboard 
				simulate the up and down arrow keys on the emulator keypad.&nbsp; The 
				Enter key on the computer keyboard simulates the large square 
				button on the emulator keypad.
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<p><font color="#FF0000"><b>Visual indication of off-screen items</b></font></p>
<p>The tiny arrow in the gray area immediately below Gauge #2 is a visual 
indication that there are items that are not visible off the bottom of the 
screen.&nbsp; They can be exposed using the down arrow key on the cell phone 
keypad.&nbsp; If you scroll all the way down and cause some items to go off the 
top of the screen, <a name="the_direction_of_the_tiny_arrow_changes">the direction of the tiny arrow changes</a> so that it is 
pointing up.&nbsp; If there are items that are off the screen at both the top 
and the bottom, the tiny arrow is replaced by two arrows that point up and down.</p>
<h3><a name="The_Item_class">The Item class</a></h3>
<p>According to Sun, the <b>Item</b> class is </p>
<blockquote>
	<p><i>&quot;A superclass for components 
that can be added to a <b>Form</b>.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>Forms require objects of type Item</b></font></p>
<p>Regardless of the fact that there are
<a href="#simply_specialized_shorthand_versions">shorthand</a> methods that seem 
to make it possible to place objects of type <b>String</b> and type <b>Image</b> 
in a form, only objects of type <b>Item</b> can be placed in a <b>Form</b>.&nbsp;
<i>(The <b>String</b> object and the <b>Image</b> object are used to construct 
objects of type <b>StringItem</b> and <b>ImageItem</b> behind the scenes when 
these two shorthand methods are called.)</i>&nbsp; Therefore, it will be useful 
for us to examine the <b>Item</b> class in some detail.</p>
<p><font color="#FF0000"><b>The item label</b></font></p>
<p>All <b>Item</b> objects have a label field.&nbsp; This field contains a <b>
String</b>, <i>(which may be null)</i>.&nbsp; Unless null, the label is 
typically displayed near the component when it is displayed on the screen.&nbsp; 
For example, all of the items in Figure 3 display a label except for the <b>
String</b> at the top and the three <b>Image</b> objects on the third row.&nbsp; 
As explained <a href="#simply_specialized_shorthand_versions">earlier</a>, these 
objects were used to create <b>Item</b> objects for which the label was set to 
null.</p>
<p>According to Sun,</p>
<blockquote>
	<p><i>&quot;The implementation should attempt to distinguish label strings from 
	other textual content, possibly by displaying the label in a different font, 
	aligning it to a different margin, or appending a colon to it if it is 
	placed on the same line as other string content. If the screen is scrolling, 
	the implementation should try to keep the label visible at the same time as 
	the Item.&quot;</i></p>
</blockquote>
<p>In Figure 3, for example, the Sun cell phone emulator displayed all of the 
labels in boldface.</p>
<p><font color="#FF0000"><b><a name="Switching_to_a_system-generated_screen">Switching to a system-generated screen</a></b></font></p>
<p>Also according to Sun,</p>
<blockquote>
	<p><i>&quot;In some cases, when the user attempts to interact with an Item, the 
	system will switch to a system-generated screen where the actual interaction 
	takes place. If this occurs, the label will generally be carried along and 
	displayed within this new screen in order to provide the user with some 
	context for the operation. For this reason it is recommended that 
	applications supply a label to all interactive Item objects. However, this 
	is not required, and a null value for a label is legal and specifies the 
	absence of a label.&quot;</i></p>
</blockquote>
<p>We will see an example of a system-generated screen later when we examine the
<b>DateField</b> class.</p>
<p><font color="#FF0000"><b>More on layout</b></font></p>
<p>In the earlier discussion of <a href="#Form_layout">Form layout</a>, I told 
you that layout is a very complex topic and provided a few highlights.&nbsp; To 
reinforce the complexity of layout, the following list shows a large number of 
constants that can be used for layout directives in addition to left, right, 
and center alignment:</p>
<ul>
	<li>LAYOUT_DEFAULT </li>
	<li>LAYOUT_LEFT </li>
	<li>LAYOUT_RIGHT </li>
	<li>LAYOUT_CENTER </li>
	<li>LAYOUT_TOP </li>
	<li>LAYOUT_BOTTOM </li>
	<li>LAYOUT_VCENTER </li>
	<li>LAYOUT_NEWLINE_BEFORE </li>
	<li>LAYOUT_NEWLINE_AFTER </li>
	<li>LAYOUT_SHRINK </li>
	<li>LAYOUT_VSHRINK </li>
	<li>LAYOUT_EXPAND </li>
	<li>LAYOUT_VEXPAND </li>
	<li>LAYOUT_2 </li>
</ul>
<p>Some of these layout directives are mutually exclusive, such as left, center, 
and right alignment.&nbsp; Other layout directives can be combined using the 
bit-wise inclusive OR operator ( | ) to compose a layout directive value.&nbsp; Beyond that, 
I will leave it as an exercise for the student to study this topic in detail.</p>
<p><font color="#FF0000"><b>The size of an Item</b></font></p>
<p>Another relatively complex topic is the size of an <b>Item</b>.&nbsp; This 
includes the concept of a minimum size and a preferred size, both of which refer 
to the total area of the <b>Item</b>.&nbsp; The total area includes space for 
the item's contents and the item's label plus other space that is significant 
with respect to layout.</p>
<p>According to Sun,</p>
<blockquote>
	<p><i>&quot;The minimum size is the smallest size at which the Item can function 
	and display its contents, though perhaps not optimally.&quot;</i></p>
</blockquote>
<p>Continuing with information from Sun, </p>
<blockquote>
	<p><i>&quot;The preferred size is generally a size based on the Item's contents 
	and is the smallest size at which no information is clipped and text 
	wrapping (if any) is kept to a tolerable minimum.&quot;</i></p>
</blockquote>
<p>Beyond this brief introduction, I will leave the study of item sizes as an 
exercise for the student.</p>
<p><font color="#FF0000"><b>The appearance mode</b></font></p>
<p>The <b>StringItem</b> and <b>ImageItem</b> classes, <i>(which we will discuss 
later)</i> have an appearance mode attribute that can be set in their 
constructors.</p>
<ul>
	<li>Item.PLAIN</li>
	<li>Item.HYPERLINK</li>
	<li>Item.BUTTON</li>
</ul>
<p>Although the words HYPERLINK and BUTTON suggest interactive capability, it is important to understand that these modes apply to the appearance of the
<b>Item</b> and not to the interactive nature of the <b>Item</b>.&nbsp; To 
support interactive programming, you must associate one or more Commands and a 
CommandListener with the <b>Item</b>.&nbsp; <i>(Commands and CommandListeners 
will be the topic of a future lesson.)</i></p>
<p>Also as you will see later, setting the appearance mode to BUTTON may have no 
impact on the appearance at all.</p>
<p><font color="#FF0000"><b>Methods of the Item class</b></font></p>
<p>The <b>Item</b> class is an abstract class.&nbsp; Only objects instantiated 
from subclasses of <b>Item</b> can be added to a <b>Form</b>.&nbsp; All 
subclasses of <b>Item</b> inherit all of the methods that are defined in the <b>
Item</b> class, which they may or may not choose to override.&nbsp; Therefore, before 
attacking the subclasses of the <b>Item</b> class, it will be useful to 
understand the methods defined in the <b>Item</b> class.</p>
<p>Figure 4 shows the name, formal argument list, and a description of each 
method.</p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Methods of the Item class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li><i><b>Group 1</b></i> 
	------------------------------------------------------------</li>
	<li><b>setLabel(String&nbsp;label)</b> - Sets the label of the Item.</li>
	<li><b>setLayout(int&nbsp;layout)</b> - Sets the layout directives for this item.</li>
	<li><b>setPreferredSize(int&nbsp;width, int&nbsp;height)</b> - Sets the preferred 
	width and height for this Item.</li>
	<li><i><b>Group 2</b></i> 
	------------------------------------------------------------</li>
	<li><b>getLabel()</b> - Gets the label of this Item object.</li>
	<li><b>getLayout()</b> - Gets the layout directives used for placing the 
	item.</li>
	<li><b>getMinimumHeight()</b> - Gets the minimum height for this Item.</li>
	<li><b>getMinimumWidth()</b> - Gets the minimum width for this Item.</li>
	<li><b>getPreferredHeight()</b> - Gets the preferred height of this Item.</li>
	<li><b>getPreferredWidth()</b> - Gets the preferred width of this Item.</li>
	<li><i><b>Group 3</b></i> 
	------------------------------------------------------------</li>
	<li><b>addCommand(Command&nbsp;cmd)</b> - Adds a context sensitive Command to the 
	item.</li>
	<li><b>removeCommand(Command&nbsp;cmd)</b> - Removes the context sensitive 
	command from item.</li>
	<li><b>setDefaultCommand(Command&nbsp;cmd)</b> - Sets default Command for this 
	Item.</li>
	<li><b>setItemCommandListener(ItemCommandListener&nbsp;l)</b> - Sets a listener 
	for Commands to this Item, replacing any previous ItemCommandListener.</li>
	<li><b>notifyStateChanged()</b> - Causes this Item's containing Form to 
	notify the Item's ItemStateListener.</li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Separated into groups</b></font></p>
<p>I have separated the methods in Figure 4 into functional groups.</p>
<p>The three methods in Group 1 are typical <i>setter</i> methods, which should 
not require any explanation beyond the name and the brief description.</p>
<p>Similarly, the methods in Group 2 are typical <i>getter</i> methods.&nbsp; 
These methods are also straightforward and should not require further 
explanation.</p>
<p>The methods in Group 3 are a little more complex.&nbsp; They deal with 
Commands and interactive programming, which will be the topic of a future 
lesson, so I won't mention them further in this lesson.</p>
<h3><a name="The_StringItem_class">The StringItem class</a></h3>
<p>Now that we understand what an <b>Item</b> is, we are prepared to understand 
the various subclasses of the <b>Item</b> class.&nbsp; I will discuss and 
explain these classes in the same order that they were used to produce the 
display shown in Figure 3.</p>
<p><font color="#FF0000"><b>Two StringItem objects</b></font></p>
<p>A <b>StringItem</b> object is an <b>Item</b> that contains a <b>String</b> 
label and a <b>String</b> text.&nbsp; The label and the text can be modified by 
the MIDlet code but cannot be modified by the user.&nbsp; The visual 
representation of the label may differ from that of the text.</p>
<p>The first 
line of text on the cell phone emulator screen in Figure 3 is a <b>StringItem</b> object with a null label that 
was produced by calling the <a href="#simply_specialized_shorthand_versions">
shorthand</a> <b>append</b>(<b>String)</b> method of the <b>Form</b> class.&nbsp; 
In this case, there is no visible label.</p>
<p>The second line of screen text in Figure 3 is a <b>StringItem</b> object that 
was appended to the <b>Form</b>.&nbsp; When viewed in the Sun cell phone 
emulator, the label is boldface and the text is not boldface.</p>
<p><font color="#FF0000"><b>Will explain using code fragments</b></font></p>
<p>The image in Figure 3 was produced by a MIDlet named <b>Form01</b>.&nbsp; A 
complete listing of the MIDlet is provided in Listing 10 near the end of the 
lesson.&nbsp; I will illustrate some of the discussion in this part of the 
lesson using code fragments from the MIDlet.</p>
<p><font color="#FF0000"><b>Code for the two StringItem objects</b></font></p>
<p>The first statement in Listing 1 creates a new <b>Form</b> object.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Adding StringItem objects to the Form.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    form = new Form("Form Title");

    form.append("This is a String.\n");
    
    StringItem stringItem = new StringItem(
                                   "This is a StringItem",
                                   "StringItem text\n",
                                   Item.BUTTON);
    form.append(stringItem);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The second statement in Listing 1 adds the <b>String</b> at the very top of 
the screen in Figure 3 by using the
<a href="#simply_specialized_shorthand_versions">shorthand</a> method to append 
the <b>String</b> to the <b>Form</b>.</p>
<p>The third statement in Listing 1 creates a new <b>StringItem</b> object and 
the fourth statement appends the new object to the <b>Form</b>.</p>
<p><font color="#FF0000"><b>The BUTTON appearance mode and a newline character</b></font></p>
<p>Note that the use of the BUTTON appearance mode doesn't seem to have had any 
visual effect when the MIDlet is viewed in the Sun cell phone emulator.&nbsp; 
Also note the use of the newline escape character to force the next <b>Item</b> to be 
displayed on a new row in the Sun cell phone emulator.</p>
<h3><a name="The_ImageItem_class">The ImageItem class</a></h3>
<p>An object of the <b>ImageItem</b> class is an <b>Item</b> object that can 
contain a reference to an <b>Image</b> object.</p>
<p><font color="#FF0000"><b>Three Image objects on the same row</b></font></p>
<p>The code in Listing 3 puts the three <b>Image</b> objects shown on the third 
row in Figure 3 in the form.&nbsp; </p>
<p>
<b><a name="Listing_2">Listing 2</a>. Calling the shorthand method for ImageItem 
objects. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    form.append(redBallImage);
    form.append(greenBallImage);
    form.append(blueBallImage);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>These three <b>Image</b> objects were placed in the form by calling the <a href="#simply_specialized_shorthand_versions">
shorthand</a> <b>append</b>(<b>Image)</b> method of the <b>Form</b> class three 
times in succession.&nbsp; This produces<b> </b>three<b> ImageItem</b> objects 
with null for the label and null for the alternate text.&nbsp; Therefore, in 
this case, there is no visible label.&nbsp; Note that all three images are 
displayed on the same row in the Sun cell phone emulator.</p>
<p><font color="#FF0000"><b>An ImageItem object on a row by itself</b></font></p>
<p>Listing 3 creates and appends an <b>ImageItem</b> object to the <b>Form</b>.&nbsp; 
This is the red ball image that is centered in the screen with the label <b>
ImageItem</b> above the image.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Create and append an ImageItem object to 
the Form. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    ImageItem imageItem = new ImageItem(
                                     "ImageItem",
                                     redBallImage,
                                     Item.LAYOUT_CENTER,
                                     "Alt Text",
                                     Item.BUTTON);
    form.append(imageItem);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A change in the current alignment</b></font></p>
<p>The call to the <b>ImageItem</b> constructor includes a layout directive 
value of <b>Item.LAYOUT_CENTER</b>.&nbsp; This not only causes this object 
to be centered on the screen, it also causes the <i>current alignment</i> to 
be changed from LAYOUT_LEFT to LAYOUT_CENTER.&nbsp; This new alignment will persist 
until either an item constructor or the <b>setLayout</b> method shown in Figure 
4 is used to change the current alignment to either LAYOUT_LEFT or LAYOUT_RIGHT.</p>
<p><font color="#FF0000"><b>Alternate text and BUTTON appearance</b></font></p>
<p>The constructor call in Listing 3 also provides non-null alternate text and 
an appearance mode of <b>Item.BUTTON</b>.&nbsp; Neither seems to have any effect 
when the MIDlet is viewed in the Sun cell phone emulator.&nbsp; This is to be 
expected in this case for the alternate text parameter because the image is 
small and easily displayed on the cell phone screen.&nbsp; According to Sun,</p>
<blockquote>
	<p><i>&quot;The altText parameter specifies a string to be displayed in place of 
	the image if the image exceeds the capacity of the display.&quot;</i></p>
</blockquote>
<h3><a name="The_ChoiceGroup_class">The ChoiceGroup class</a></h3>
<p>A <b>ChoiceGroup</b> object is essentially a <b>List</b> object that can be 
embedded in a <b>Form</b>.&nbsp; You learned about <b>List</b> objects in the 
earlier lesson titled <i>Using Lists in MIDlets (see <a href="#Resources">
Resources</a>)</i>.</p>
<p>The code in Listing 4 creates a <b>ChoiceGroup</b> object and appends it to the 
<b>Form</b>.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Create and append a ChoiceGroup object. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    ChoiceGroup choiceGroup = new ChoiceGroup(
                                        "ChoiceGroup",
                                        Choice.EXCLUSIVE);
    choiceGroup.append("Zero",redBallImage);
    choiceGroup.append("One",greenBallImage);
    choiceGroup.append("Two",blueBallImage);
    choiceGroup.setLayout(Item.LAYOUT_DEFAULT);
    
    form.append(choiceGroup);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 4 also sets the alignment for the ChoiceGroup object to the default 
alignment for this type of <b>Item</b> and sets the selection mode to EXCLUSIVE.&nbsp;
<i>(You learned about selection modes in the lesson on the <b>List</b> object.)</i>&nbsp; 
Note that since this does not set the alignment to either left or right it does 
not change the current alignment.&nbsp; The current alignment remains 
LAYOUT_CENTER, and this is reflected in the next <b>Item</b> that is added 
to the <b>Form</b>.</p>
<p><font color="#FF0000"><b>Calling the setLayout method</b></font></p>
<p>Note that the <b>ChoiceGroup</b> constructor does not have a layout directive 
parameter.&nbsp; However, the alignment can be set on the object by calling the
<b>setLayout</b> method of the <b>Item</b> class.&nbsp; This appears to have 
been ineffective in this case.&nbsp; Even if the alignment of the <b>ChoiceGroup</b> 
object is set to LAYOUT_CENTER, this alignment is not honored by the Sun cell 
phone emulator and the <b>ChoiceGroup</b> object continues to be displayed in a 
left-aligned position.&nbsp; According to Sun,</p>
<blockquote>
	<p><i>&quot;Some directives have no defined behavior in some contexts. A layout 
	directive is ignored if its behavior is not defined for the particular 
	context within which the Item resides.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>Setting the focus in the Sun cell phone emulator</b></font></p>
<p>Note that the <b>String</b> at the top of Figure 3 is enclosed in a box.&nbsp; 
I will refer to this as the <i>focus</i>.&nbsp; You can move the focus up and 
down, left and right by pressing the arrow keys on the Sun cell phone emulator 
keypad.</p>
<p><font color="#FF0000"><b>Moving the focus to the ChoiceGroup object</b></font></p>
<p>For example, you can use the arrow keys to move the focus to the <b>
ChoiceGroup</b> object as shown in Figure 5.&nbsp; Then you can use the arrow 
keys some more to highlight a specific element in the group and press the large 
button in Figure 5 <i>(just like you learned to do with a <b>List</b>)</i> to 
select a specific element within the group.</p>
<p>
 <b><a name="Figure_5">Figure 5</a>. Selecting an element within a ChoiceGroup 
	Item. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2584a2.jpg" width="313" height="492"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Note that the entire <b>ChoiceGroup</b> is contained in the box that 
indicates the focus in Figure 5.</p>
<p><font color="#FF0000"><b>Methods of the ChoiceGroup class</b></font></p>
<p>The methods of the <b>ChoiceGroup</b> class are very similar to the methods 
that you learned about earlier belonging to the <b>List</b> class <i>(see
<a href="#Resources">Resources</a>)</i>.&nbsp; Therefore, I will simply refer 
you to that earlier lesson and the Sun documentation, and won't repeat that 
explanation here.</p>
<h3><a name="The_DateField_class">The DateField class</a></h3>
<p>A <b>DateField</b> object presents date and time information and may be 
placed in a <b>Form</b>.&nbsp; The information encapsulated in the object can be 
edited by the user.</p>
<p>The constructor does not have a parameter for setting the date, time, or 
date/time value.&nbsp; However, the value can be set immediately after the 
object is instantiated by calling the <b>setDate</b> method and passing a <b>
Date</b> object as a parameter.</p>
<p>If the value is left unset, this is indicated by the visual representation of 
the object in the <b>Form</b>.&nbsp; For example, Figure 3 shows a<b> DateField</b> 
object for which the date value was not set by program code.</p>
<p><font color="#FF0000"><b>Date or time or both</b></font></p>
<p>When the object is instantiated, the object can be configured to accept date 
information, time information, or both.&nbsp; This is accomplished by passing 
one of the following to the second <i>(input mode)</i> constructor parameter:</p>
<ul>
	<li>DateField.DATE</li>
	<li>DateField.TIME</li>
	<li>DateField.DATE_TIME</li>
</ul>
<p>The <b>DateField</b> object in Figure 3 was configured to accept date 
information only.</p>
<p><font color="#FF0000"><b>Constructors of the DateField class</b></font></p>
<p>This class has two overloaded constructors.&nbsp; One constructor requires 
the following parameters:</p>
<ul>
	<li>label - item label</li>
	<li>mode - the input mode as described above </li>
	<li>timeZone - a specific time zone, or null for the default time zone </li>
</ul>
<p>When this version of the constructor is used, the third parameter must be a 
reference to an object of the <b>TimeZone</b> class.</p>
<p>The other overloaded constructor requires only the first two parameters.&nbsp; 
In this case, the <b>timeZone</b> parameter is set to null by default.</p>
<p><font color="#FF0000"><b>Methods of the DateField class</b></font></p>
<p>This class defines only the four methods shown in Listing 6</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. Methods of the DateField class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li><b>setDate(Date&nbsp;date)</b> - Sets a new value for this field.</li>
	<li><b>getDate()</b> - Returns date value of this field.</li>
	<li><b>setInputMode(int&nbsp;mode)</b> - Set input mode for this date field.</li>
	<li><b>getInputMode()</b> - Gets input mode for this date field.</li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The names and brief descriptions of the methods in Figure 6 are 
self-explanatory, so no further explanation should be required.</p>
<p><font color="#FF0000">
<b>Create a DateField object and add it to the Form</b></font></p>
<p>The code in Listing 5 creates a <b>DateField</b> object and adds it to the <b>
Form</b>.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. Create a DateField object and add it to 
the Form. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    DateField dateField = new DateField("DateField",
                                        DateField.DATE);
    form.append(dateField);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Knowing what you now know about the constructor, this code shouldn't require 
any further explanation.</p>
<p><font color="#FF0000"><b>Manually editing the date information</b></font></p>
<p>I explained <a href="#Switching_to_a_system-generated_screen">earlier</a> that in some cases, when the user attempts to interact 
with an <b>Item</b>, the system switches to a system-generated screen where 
the actual interaction takes place.&nbsp; This is true for a <b>DateField</b> 
object.&nbsp; At least it is true when the editing takes place using the Sun 
cell phone emulator.</p>
<p>As I mentioned earlier, Figure 3 shows the display of the <b>DateField</b> 
object when the date information has not been set.&nbsp; Figure 7 shows what 
happens when you navigate the focus to the <b>DateField</b> object and press the 
large square button on the cell phone emulator keypad.</p>
<p>
 <b><a name="Figure_7">Figure 7</a>. System generated screen for editing the 
	DateField object contents. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2584a3.jpg" width="314" height="488"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Setting and saving the date</b></font></p>
<p>Note first that a <b>Save</b> operation is associated with the top right soft 
key below the screen.</p>
<p>Once this display appears on the screen, you can use the arrow keys to move 
the highlight to a different year, a different month, and a specific day within 
the month.&nbsp; If you do this and then click the soft key to <b>Save</b> the 
results, the <b>Form</b> display changes to something similar to that shown in 
Figure 8.</p>
<p>
 <b><a name="Figure_8">Figure 8</a>. Result of editing the contents of the 
	DateField object. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2584a4.jpg" width="313" height="492"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As you can see in Figure 8, the new contents of the <b>DateField</b> object 
are rendered in text form in the visual representation of the <b>DateField</b> 
object.&nbsp; When you navigate the focus away from the <b>DateField</b> object, 
the text will return to a normal black on white format instead of being white in 
a black background as shown in Figure 8.</p>
<h3><a name="The_Gauge_class">The Gauge class</a></h3>
<p>You learned quite a lot about the <b>Gauge</b> class in the earlier lesson 
titled <i>Using Alerts, Images, Timers, and Gauges in MIDlets (see
<a href="#Resources">Resources</a>)</i>.&nbsp; However, <b>Gauge</b> objects can 
be made interactive or non-interactive.&nbsp; In the earlier lesson, I purposely 
avoided discussing the interactive capability.</p>
<p>The <b>Gauge</b> object with the label <b>Gauge #1</b> in Figure 3 is an 
interactive <b>Gauge</b> object.&nbsp; The code that produced this object and 
added it to the <b>Form</b> is shown in Listing 6.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Creating an interactive Gauge object and 
adding it to the Form. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    Gauge gauge01 = new Gauge("Gauge #1",true,6,3);
    form.append(gauge01);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Constructor for the Gauge class</b></font></p>
<p>There is only one constructor for the <b>Gauge</b> class and it requires the 
following parameters:</p>
<ul>
	<li>String&nbsp;label</li>
	<li><b>boolean&nbsp;interactive</b></li>
	<li>int&nbsp;maxValue</li>
	<li>int&nbsp;initialValue</li>
</ul>
<p>The only parameter that you didn't see illustrated in the earlier lesson is 
the second parameter that is highlighted in boldface.&nbsp; If this parameter 
value is true, the <b>Gauge</b> is interactive.&nbsp; If false, the <b>Gauge</b> 
is not interactive.</p>
<p>As you can see in Listing 6, this parameter was set to true for the <b>Gauge</b> 
with the label <b>Gauge #1</b>.&nbsp; The value of six for the <b>maxValue</b> 
parameter in Listing 6 causes the <b>Gauge</b> to have six bars in Figure 3.&nbsp; 
The value of three for the <b>initialValue</b> parameter in Listing 6 causes the 
leftmost three bars to be black in Figure 3.</p>
<p><font color="#FF0000"><b>What makes it interactive?</b></font></p>
<p>If you navigate the focus to <b>Gauge #1</b>, the visual manifestation of the 
interactive <b>Gauge</b> in the Sun cell phone emulator will change to look something like that shown in Figure 
9.&nbsp; <i>(Note the arrows on either side of the bar graph.)</i></p>
<p>
 <b><a name="Figure_9">Figure 9</a>. Display of interactive Gauge object with 
	the focus. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2584a5.jpg" width="312" height="489"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Interacting with the Gauge</b></font></p>
<p>When the interactive <b>Gauge</b> has the focus as shown in Figure 9, you can 
use the horizontal arrow keys on the cell phone emulator keypad to cause more or 
fewer of the bars in the bar chart to be colored black.&nbsp; Then you can call 
the <b>getValue</b> method on the <b>Gauge</b> object to determine how many bars 
were set to black by the user.&nbsp; You could use this approach, for example, 
to adjust the volume for audio output, or for any purpose that the user needs to 
manually provide very granular integer input data to the MIDlet.</p>
<p><font color="#FF0000"><b>Gauge #2</b></font></p>
<p>The <b>Gauge</b> object with the label <b>Gauge #2</b> in Figure 3 is a 
non-interactive Gauge.&nbsp; You learned about non-interactive <b>Gauge</b> 
objects in the earlier lesson.&nbsp; You can view the code that was used to 
create this non-interactive <b>Gauge</b> and add it to the <b>Form</b> in 
Listing 10.</p>
<h3><a name="The_Spacer_class">The Spacer class</a></h3>
<p>An object of the <b>Spacer</b> class provides a blank non-interactive <b>Item</b> 
for which the width and the height in pixels can be set by the program.</p>
<p>The ability to set the width makes a <b>Spacer</b> object useful for creating 
a programmable amount of space between objects on the same row.&nbsp; For 
example, I could have used <b>Spacer</b> objects to separate the red, green, and 
blue ball images on the third row in Figure 3.</p>
<p>The ability to set the height is useful for inserting space between rows.&nbsp; 
For example, a 10x10 <b>Spacer</b> was used to provide vertical separation 
between Gauge #1 and Gauge #2 in Figure 3.</p>
<p>A <b>Spacer</b> object's primary purpose is to position other items.&nbsp; 
Having a label on the <b>Spacer</b> would not be consistent with that purpose.&nbsp; 
Therefore, the label for a <b>Spacer</b> object is always null.</p>
<p><font color="#FF0000"><b>Constructor for a Spacer</b></font></p>
<p>The <b>Spacer</b> class has a single constructor with two required 
parameters.&nbsp; The first parameter sets the width in pixels and the second 
parameter sets the height in pixels.&nbsp; If either value is negative, an 
IllegalArgumentException will be thrown.</p>
<p><font color="#FF0000"><b>Methods for the Spacer class</b></font></p>
<p>The <b>Spacer</b> class defines four methods.&nbsp; Two of the methods have 
to do with commands and interactive programming, which will be the topic of a 
future lesson.&nbsp; The other two methods are:</p>
<ul>
	<li><b>setLabel</b> - Set the <b>String</b> value of the label.</li>
	<li><b>setMinimumSize</b> - Set the minimum size <i>(width and height)</i> in pixels.</li>
</ul>
<p>Sun has this to say about the first method named <b>setLabel</b>:</p>
<blockquote>
	<p><i>&quot;Spacers are restricted to having null labels, so this method will 
	always throw IllegalStateException whenever it is called.&quot;</i></p>
</blockquote>
<p>You might wonder why the class would define a method that simply throws an 
exception if called.&nbsp; The reason is probably because the <b>setLabel</b> 
method is inherited from the <b>Item</b> class.&nbsp; A label is not needed for 
a <b>Spacer</b> object, so the inherited method is overridden to disable it.</p>
<p><font color="#FF0000">
<b>Create a Spacer and add it to the Form</b></font></p>
<p>Listing 7 shows the code that was used to create the <b>Spacer</b> and add it 
to the <b>Form</b>, producing the vertical separation between the two <b>Gauge</b> 
objects in Figure 3.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. Create a Spacer and add it to the Form. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    Spacer spacer = new Spacer(10,10);
    form.append(spacer);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<h3><a name="The_TextField_class">The TextField class</a></h3>
<p>A <b>TextField</b> object is essentially a <b>TextBox</b> object embedded in 
a <b>Form</b>.&nbsp; You learned about <b>TextBox</b> objects in the earlier 
lesson titled <i>Introduction to the MIDlet User Interface, Part 1 (see
<a href="#Resources">Resources</a>).&nbsp; </i>Aside from appending the <b>
TextField</b> object to the <b>Form</b>, there is little, if anything about a <b>
TextField</b> that is 
new to this lesson.&nbsp; Therefore, an explanation of the <b>TextField</b> 
class is not needed.</p>
<p><font color="#FF0000">
 <b>Scroll down and view the TextField object</b></font></p>
<p>A portion of <b>Gauge #2</b> and the entire <b>TextField</b> object is off 
the bottom of the screen in Figure 3.</p>
<p>Figure 10 shows the result of scrolling the cell phone emulator screen down 
far enough to be able to see the entire <b>Gauge #2</b> object and the T<b>extField</b> object.&nbsp; 
<i>(Note the
<a href="#the_direction_of_the_tiny_arrow_changes">tiny arrow</a> pointing up, 
indicating that part of the<b> Form </b>is not visible because it is off the top 
of the screen.)</i></p>
<p>
 <b><a name="Figure_10">Figure 10</a>. Scroll down and view the TextField 
	object. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2584a6.jpg" width="311" height="476"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><b>The code that created the TextField</b></p>
<p>You can view the code used to produce the <b>TextField</b> object and add it 
to the <b>Form</b> in Listing 10 near the end of the lesson.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
Normally I don't include discussions of code in the previous section on the 
technical background.&nbsp; Rather, I normally save code discussions for this 
section.&nbsp; However, in this lesson, it seemed appropriate to discuss the 
code as I went along while providing background information.&nbsp; As a result, there 
is very little remaining code to be discussed in this section.<p>
<font color="#FF0000"><b>The MIDlet named Form01</b></font></p>
<p>The purpose of this MIDlet is to illustrate the creation and use of a <b>Form</b>.&nbsp; 
The MIDlet creates a <b>Form</b> and populates it with the following <b>Item</b> 
objects:</p>
<ul>
	<li>A simple <b>String</b> using a shorthand method for <b>StringItem</b>.</li>
	<li>A <b>StringItem</b>.</li>
	<li>Three <b>Image</b> objects using a shorthand method for <b>ImageItem</b>.</li>
	<li>An <b>ImageItem</b>.</li>
	<li>A <b>ChoiceGroup</b> containing three elements each of which has an 
	image and a text part.&nbsp; The <b>ChoiceGroup</b> is essentially a <b>List</b> 
	embedded in a <b>Form</b> and it is configured for EXCLUSIVE mode selection.</li>
	<li>A <b>DateField</b> configured to contain only a date as opposed to 
	containing both a date and a time.</li>
	<li>An interactive <b>Gauge</b>.</li>
	<li>A <b>Spacer</b>.</li>
	<li>A non-interactive <b>Gauge</b>.</li>
	<li>A <b>TextField</b> configured to allow for the entry of ANY text.</li>
</ul>
<p>The height of the <b>Form</b> is greater than the height of the Sun cell 
phone emulator screen.&nbsp; Therefore it is necessary to scroll down to see the
<b>TextField</b> and the bottom portion of the non-interactive <b>Gauge</b> as 
shown in Figure 10.</p>
<p>The MIDlet displays the form and allows the user 100 seconds to experiment 
with the <b>Form</b>.&nbsp; Then it enters the destroyed state.</p>
<p>The MIDlet was tested using a Java SE 6 compiler, targeted at a V1.4virtual 
machine, and WTK 2.5.2 running under Windows XP.</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>A complete listing of this MIDlet is provided in Listing 10.&nbsp; Most of 
the code in the MIDlet was explained in the earlier section.&nbsp; I will 
discuss the remaining code in fragments.</p>
<p><font color="#FF0000">
<b>Beginning of the class named Form01</b></font></p>
<p>Listing 8 shows the beginning of the class down through the end of the 
constructor.&nbsp; The code that I explained earlier has been deleted from Listing 8 
for brevity.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. Beginning of the class named Form01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class Form01 extends MIDlet{
  Image redBallImage;
  Image greenBallImage;
  Image blueBallImage;
  Form form;
  //----------------------------------------------------//
  
  public Form01(){//constructor
    System.out.println("Construct MIDlet");
    
    try{
      System.out.println("Construct Image objects");
      //Make certain that the image files specified
      // below are in the same directory as the source
      // file.
      redBallImage = Image.createImage(
                                   "/Form01/redball.PNG");
      greenBallImage = Image.createImage(
                                 "/Form01/greenball.PNG");
      blueBallImage = Image.createImage(
                                  "/Form01/blueball.PNG");
    }catch(Exception e){
      e.printStackTrace();
    }//end catch
    
    //...Code deleted for brevity...
    
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p align="left"><font color="#ff0000"><b>Instance variables</b></font></p>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b>Allowable image file types</b><br>
				See the discussion in the earlier lesson titled <i>Using Alerts, 
				Images, Timers, and Gauges in MIDlets (see
				<a href="#Resources">Resources</a>)</i> regarding 
				the allowable image file types.</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<p>The class begins by declaring several instance variables, including three 
variables of type <b>Image</b> that will be used to represent the red, green, 
and blue ball images shown in Figure 3.&nbsp; To run this MIDlet, you will need to 
put three small image files in the same directory as the source code.&nbsp; You can 
either give the files the following names, or you can modify the code in Listing 
8 to match the names of your image files:</p>
<ul>
	<li>blueball.PNG</li>
	<li>greenball.PNG</li>
	<li>redball.PNG</li>
</ul>
<p><font color="#ff0000"><b>The constructor</b></font></p>
<p>The only code in the constructor that I didn't explain earlier is the code 
required to create the three objects of type <b>Image</b>.&nbsp; This code is 
straightforward and should not require further explanation.</p>
<p><font color="#FF0000">
<b>The remaining code in the class</b></font></p>
<p>Listing 9 shows the <b>startApp</b>, <b>pauseApp</b>, and <b>destroyApp</b> methods in their 
entirety.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. The remaining code in the class named 
Form01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public void <b>startApp</b>(){

    //Make the Form the current display.
    System.out.println("Display form");
    Display.getDisplay(this).setCurrent(form);

    //Sleep for 100 seconds.
    try{Thread.currentThread().sleep(100000);
    } catch(Exception e){}

    //Enter the destroyed state.
    this.destroyApp(true);
  }//end startApp
  //----------------------------------------------------//

  public void <b>pauseApp</b>(){
  }//end pauseApp
  //----------------------------------------------------//

  public void <b>destroyApp</b>(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Form01</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Assuming that you have been studying the earlier lessons in this series, you 
should find the code in Listing 9 to be straightforward with no further 
explanation required.</p>
<p><font color="#FF0000"><b>The end of the MIDlet program</b></font></p>
<p>Listing 9 also signals the end of the <b>Form01</b> class and the end of the 
MIDlet program.</p>
<center>
<h2><a name="Run the program"></a>Run the program</h2>
</center>
<p>I encourage you to copy the MIDlet code from Listing 10.&nbsp; Run the MIDlet in 
the updated MIDlet development framework named <b>WTKFramework03</b> that I 
provided in the lesson titled <i>Using Alerts, Images, Timers, and Gauges in 
MIDlets (see <a href="#Resources">Resources</a>)</i>.</p>
<p>Experiment with the 
MIDlet code, making changes and running your modified MIDlets in the framework program.&nbsp; See if you can explain the 
effects of your 
changes.</p>
<p>Don't forget that you will need to download and install the latest version of 
the Sun Java Wireless Toolkit for CLDC <i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; 
As of the date this lesson is being written, the latest version of the toolkit 
is WTK2.5.2.</p>
<p>In addition you will need three small image files to replace the 
red, green, and blue ball images in Figure 3.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, you learned about the class named <b>Item</b>.&nbsp; Then you 
learned how to create a <b>Form</b> and how to populate it with objects of the 
following classes:</p>
<ul>
	<li>String</li>
	<li>StringItem</li>
	<li>Image</li>
	<li>ImageItem</li>
	<li>ChoiceGroup</li>
	<li>DateField</li>
	<li>Gauge <i>(interactive)</i></li>
	<li>Gauge <i>(non-interactive)</i></li>
	<li>Spacer</li>
	<li>TextField</li>
</ul>
<p>You also learned something about layout directives and appearance modes.</p>
<ul>
</ul>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>In the next lesson, you will learn how to add commands to a MIDlet and how 
those commands are presented to the user in the Sun cell phone emulator.&nbsp; You 
will also learn how to produce interactive behavior in a MIDlet through the use 
of a <b>CommandListener</b> object and an <b>ItemCommandListener</b> object.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a href="http://java.sun.com/products/sjwtoolkit/download-2_5.html">
	Download</a> Sun Java Wireless Toolkit 2.5 for CLDC Release</li>
	<li><a href="http://en.wikipedia.org/wiki/MIDlet">MIDlet</a>: From 
	Wikipedia, the free encyclopedia</li>
	<li><a href="http://www.scmad.com/j2me-glossary1.php">MIDlet</a>: According 
	to SCMAD Certification Center</li>
	<li><a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html">J2ME 
	Tutorial, Part 1: Creating MIDlets</a> by Vikram Goyal</li>
	<li>
	<a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html?page=2#step4">
	Pre-verifying</a> MIDlet code according to Vikram Goyal</li>
	<li>
	<a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html?page=2#step7">
	Deploying</a> a MIDlet according to Vikram Goyal</li>
	<li><span class="style2">
	<a href="http://developers.sun.com/mobility/device/device;jsessionid=3F91C410E754F34B1A44DEBCE011ED18">
	The Java ME Device Table</a></span></li>
	<li><span class="style2">
	<a href="http://developers.sun.com/mobility/midp/ttips/getAppProperty/index.html">
	Retrieving MIDlet Attributes</a> by Richard Marejka</span></li>
	<li><a href="http://developers.sun.com/mobility/learn/midp/lifecycle/">
	Learning Path: MIDlet Life Cycle</a></li>
	<li><span class="style2">
	<a href="http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html?page=1">
	When Runtime.exec() won't</a> By </span>Michael C. Daconta</li>
	<li>
	<a href="http://en.wikipedia.org/wiki/Connected_Limited_Device_Configuration">
	Connected Limited Device Configuration</a> <i>(CLDC)</i> from
	<span class="style2">Wikipedia</span></li>
	<li><span class="style2">
	<a href="http://en.wikipedia.org/wiki/Mobile_Information_Device_Profile">
	Mobile Information Device Profile</a> <i>(MIDP)</i> from Wikipedia</span></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr030/">CLDC 1.0</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr139/">CLDC 1.1</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr037/">MIDP 1.0</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr118/">MIDP 2.0</a></li>
	<li><a href="http://www.pictureresize.org/online-images-converter.html">Free 
	Online Image Converter</a></li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3719111">
	2570</a> Getting Started with MIDlets and the Sun Java Wireless Toolkit for 
	CLDC</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3721706">
	2572</a> Capturing Output Produced by Programs Running in a Child Process</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3724381">
	2574</a> Back to Basics with MIDlets and the Sun Java Wireless Toolkit for 
	CLDC</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3727396">
	2576</a> Introduction to the MIDlet User Interface, A First Look</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3730141">
	2578</a> Handling Life-Cycle Issues with the MIDlet User Interface</li>
	<li><a href="http://www.developer.com/java/j2me/article.php/3736301">2580</a> 
	Using Alerts, Images, Timers, and Gauges in MIDlets</li>
	<li><a href="http://www.developer.com/java/other/article.php/3742196">2582</a> Using Lists in MIDlets</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listing</h2>
</center>
A complete listing of the program discussed in this lesson is shown in Listing 
10 below.
<p>
<b><a name="Listing_10">Listing 10</a>. Source code for the MIDlet named Form01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*Form01.java
Copyright 2007, R.G.Baldwin

The purpose of this MIDlet is to illustrate the creation 
and use of a Form.

The MIDlet creates a Form and populates it with the 
following Item objects:

A simple String using a shorthand method for StringItem.

A StringItem. The appearance is set to BUTTON but that 
doesn't seem to have any effect on the visual appearance 
in the Sun cell phone emulator.

Three images using a shorthand method for ImageItem.

An ImageItem. The appearance is set to BUTTON and 
alternate text is provided. However, this doesn't seem to
have any effect in the Sun cell phone emulator. 

A ChoiceGroup containing three elements each of which has
an image and a text part. The ChoiceGroup is essentially
a List embedded in a Form and it is configured as 
EXCLUSIVE.

A DateField configured to contain only a date as opposed 
to containing both a date and a time.

An interactive Gauge.

A Spacer.

A non-interactive Gauge.

A TextField configured to allow for the entry of ANY text.

The height of the Form is greater than the height of the 
Sun cell phone emulator screen.  Therefore it is necessary
to scroll down to see the TextField and the bottom
portion of the non-interactive Gauge.

The MIDlet displays the form and allows the user 100
seconds to experiment with the Form.  Then it enters the 
destroyed state.

Tested using a Java SE 6 compiler, targeted at a V1.4
virtual machine, and WTK 2.5.2 running under Windows XP.
*********************************************************/

package Form01;

import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.Form;
import javax.microedition.midlet.MIDlet;
import javax.microedition.lcdui.Item;
import javax.microedition.lcdui.Image;
import javax.microedition.lcdui.ImageItem;
import javax.microedition.lcdui.Choice;
import javax.microedition.lcdui.ChoiceGroup;
import javax.microedition.lcdui.DateField;
import javax.microedition.lcdui.Gauge;
import javax.microedition.lcdui.Spacer;
import javax.microedition.lcdui.StringItem;
import javax.microedition.lcdui.TextField;

public class Form01 extends MIDlet{
  Image redBallImage;
  Image greenBallImage;
  Image blueBallImage;
  Form form;
  //----------------------------------------------------//
  
  public Form01(){//constructor
    System.out.println("Construct MIDlet");
    
    try{
      System.out.println("Construct Image objects");
      //Make certain that the image files specified
      // below are in the same directory as the source
      // file.
      redBallImage = Image.createImage(
                                   "/Form01/redball.PNG");
      greenBallImage = Image.createImage(
                                 "/Form01/greenball.PNG");
      blueBallImage = Image.createImage(
                                  "/Form01/blueball.PNG");
    }catch(Exception e){
      e.printStackTrace();
    }//end catch
    
    System.out.println("Create Form");
    form = new Form("Form Title");
    
    //Append a String to the form.  This is a shorthand
    // for StringItem
    form.append("This is a String.\n");
    
    //Append a StringItem to the form.  Note that the use
    // of the BUTTON appearance doesn't seem to have any
    // effect.  Also note the use of the newline character
    // to force the next Item to be displayed on a new
    // row in the Sun cell phone emulator.
    StringItem stringItem = new StringItem(
                                   "This is a StringItem",
                                   "StringItem text\n",
                                   Item.BUTTON);
    form.append(stringItem);
    
    //Put three images in the form.  This is a shorthand
    // for ImageItem. All three images end up in the same
    // row in the Sun cell phone emulator.
    form.append(redBallImage);
    form.append(greenBallImage);
    form.append(blueBallImage);
    
    //Create and append an ImageItem.  Note that the 
    // BUTTON appearance designation doesn't seem to have
    // any effect. The same is true of the Alt Text.
    ImageItem imageItem = new ImageItem(
                                     "ImageItem",
                                     redBallImage,
                                     Item.LAYOUT_CENTER,
                                     "Alt Text",
                                     Item.BUTTON);
    form.append(imageItem);
    
    //Create a ChoiceGroup and append it to the Form. Set
    // the alignment to the default layout for this type
    // of Item. This is like an embedded List. Set the
    // selection mode to EXCLUSIVE.
    ChoiceGroup choiceGroup = new ChoiceGroup(
                                        "ChoiceGroup",
                                        Choice.EXCLUSIVE);
    choiceGroup.append("Zero",redBallImage);
    choiceGroup.append("One",greenBallImage);
    choiceGroup.append("Two",blueBallImage);
    choiceGroup.setLayout(Item.LAYOUT_DEFAULT);
    form.append(choiceGroup);
    
    //Create a new DateField and append it to the form.
    DateField dateField = new DateField("DateField",
                                        DateField.DATE);
    form.append(dateField);
    
    //Create two Gauges separated by a Spacer. The first
    // Gauge is interactive.  The second is not
    // interactive.
    Gauge gauge01 = new Gauge("Gauge #1",true,6,3);
    form.append(gauge01);
    
    Spacer spacer = new Spacer(10,10);
    form.append(spacer);
    
    Gauge gauge02 = new Gauge("Gauge #2",false,6,2);
    form.append(gauge02);
    
    //Create a TextField and append it to the form. This
    // item is below the bottom of the screen. Scrolling
    // is required to expose this item. It will accept
    // ANY input character. This is similar to a TextBox
    // embedded in a Form.
    TextField textField = new TextField("TextField",
                                        "Initial Text",
                                        30,
                                        TextField.ANY);
    form.append(textField);
  }//end constructor
  //----------------------------------------------------//

  public void startApp(){

    //Make the Form the current display.
    System.out.println("Display form");
    Display.getDisplay(this).setCurrent(form);

    //Sleep for 100 seconds.
    try{Thread.currentThread().sleep(100000);
    } catch(Exception e){}

    //Enter the destroyed state.
    this.destroyApp(true);
  }//end startApp
  //----------------------------------------------------//

  public void pauseApp(){
  }//end pauseApp
  //----------------------------------------------------//

  public void destroyApp(boolean unconditional){
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class Form01</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2008, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
java J2ME MIDlet &quot;cell phone emulator&quot; &quot;wireless toolkit&quot; WTK MIDP CLDC 
Displayable TextBox Ticker TextField Alerts Images Timers Gauges Lists Forms 
Items String StringItem ImageItem ChoiceGroup DateField</p>
<p>-end- </p>
</body>
</html>
