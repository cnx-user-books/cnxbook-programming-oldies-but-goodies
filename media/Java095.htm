<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MSOFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Event Handling in JDK 1.1, Container Events and More on Inner Classes<!--endtitle--></H2>
<P>Java Programming, Lecture Notes # 95, Revised 02/24/99. </P>

<UL>
<LI><A HREF="#preface">Preface</A> </LI>
<LI><A HREF="#introduction">Introduction</A> </LI>
<LI><A HREF="#overview">Overview</A> </LI>
<LI><A HREF="#first_sample_program">First Sample Program</A> </LI>

<UL>
<LI><A HREF="#interesting_code_fragments">Interesting Code Fragments</A> </LI>
<LI><A HREF="#first_sample_program_listing">First Sample Program Listing</A></LI></UL>

<LI><A HREF="#second_sample_program_discussion">Second Sample Program Discussion</A> </LI>

<UL>
<LI><A HREF="#second_sample_program_listing">Second Sample Program Listing</A></LI></UL>
</UL>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Intermediate Java Programming</B></U> classes at ACC are responsible for knowing and understanding all of the material in this lesson. </P>
<P>On 2/24/99, the sample programs in this lesson were confirmed to operate properly under JDK 1.2.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="introduction"></A>Introduction</H2>
</FONT><P>This lesson was originally written on December 10, 1997, using the JDK 1.1.3 download package. The purpose of this lesson is to illustrate the use of container events, and to further illustrate the use of inner classes, both named and anonymous. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="overview"></A>Overview</H2>
</FONT><P>If you instantiate an object of type <B>ContainerListener</B> and register that object on a <B>Container</B> object, the listener object will be notified whenever an object is added to or removed from the container. Information regarding the object that was added is passed into the <B>ContainerListener </B>methods in the form of an object of type <B>ContainerEvent</B>. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="first_sample_program"></A>First Sample Program</H2>
</FONT><P>This program illustrates container events. It also further illustrates the use of inner classes, both named and anonymous. </P>
<P>The program also illustrates a <U>programming style</U> involving the use of the <U>controlling class as a listener class</U> that <U>implements multiple listener interfaces</U>. In this situation, the listener methods are defined as methods of the controlling class rather than being defined as methods of separately compiled listener classes. </P>
<P>Finally, it illustrates the fact that the code in one event handler can <U>register event listeners for other components</U>. </P>
<P>In this program, a <B>ContainerListener </B>object monitors for the addition of buttons to a <B>Frame </B>object. Each time a new button is added to the <B>Frame</B>, an <B>ActionEvent </B>listener is registered on that new <B>Button </B>object. All of the <B>ActionEvent </B>listener objects that are registered on the buttons are of the same <B>ActionEvent </B>class. </P>
<P>To make the whole thing interesting, this program creates the keyboard and provides the skeleton code for a four-function calculator, including the event handler needed to respond to calculator keystrokes (pressing the buttons on the calculator with the mouse) and identify the button that was pressed on the calculator keyboard. </P>
<P>The program <U>does not provide</U> the code that would be required to process the keystrokes to do the calculations, or to display the results of the calculations since that is not the primary purpose of the program. </P>
<P>However, the program does provide a place to display results in the form of a yellow <B>Label </B>object and it uses that display area to display the text on the button each time a calculator button is pressed.. </P>
<P>When you run the program and click on the buttons in the <B>Frame </B>object, the labels on the buttons are displayed in the yellow <B>Label</B> object. </P>
<P>This program was tested using JDK 1.1.3 under Win95. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="interesting_code_fragments"></A>Interesting Code Fragments</H3>
</FONT><P>Because of its unusual structure, this program contains a number of interesting code fragments. We will begin with the first few lines of the definition of the controlling class. Note in particular that the <U>controlling class implements two listener interfaces</U>. Having done this, the listener methods declared in these interfaces can be (must be) defined in the controlling class, and an object of the controlling class (<B>this</B>) is the listener object which gets registered on itself (<B>this</B>). </P>
<P>We also declare an instance variable named <B>displayLabel</B>. Later we will use this variable to refer to a yellow <B>Label</B> object that has been added to the <B>Frame</B> object to serve as a display window. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>class Event32 extends Frame
&nbsp; <B>implements ContainerListener,ActionListener</B>{
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Label displayLabel;//reference to a Label for display</PRE></TD>
</TR>
</TABLE>

<P>We will skip the <B>main</B> method (that does nothing but instantiate an instance of the controlling class) and move on to a method that will add a series of buttons to the <B>Frame</B> object. The number of buttons added and the labels on the buttons are determined from the length and the substring values of an incoming <B>String </B>object. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; void <B>addButtons</B>(String labels){
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; labels.<B>length</B>();cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(new Button(labels.<B>substring</B>(cnt,cnt+1)));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end addButtons()&nbsp;&nbsp;</PRE></TD>
</TR>
</TABLE>

<P>That brings us to the constructor where we set the layout manger to <B>GridLayout </B>with four columns and an unspecified number of rows. (Setting the number of rows to zero causes it to be unspecified.) We also set a vertical and horizontal gap size of three pixels between the components that are to be placed in the container. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; this.setLayout(new <B>GridLayout</B>(0,4,3,3));</PRE></TD>
</TR>
</TABLE>

<P>The next interesting code fragment is a statement in the constructor to register a listener object to be notified of container events. This listener object will receive an event notification each time a component is added to the container. </P>
<P>The most interesting thing about this code fragment is the dual use of the <B>this</B> reference. The object of the controlling class is the <I>source </I>of events. In this case, it is a <B>Frame</B> object. </P>
<P>The <I>listener </I>object that is being registered to receive notification of events is <U>also the object of the controlling class</U>. This is possible because the controlling class implements the <B>ContainerListener</B> interface and contains definitions of the two methods declared in that interface. </P>
<P>Thus, this statement <U>registers the object of the controlling class as a listener on itself as a source</U> (hence <B>this </B>as both a source and a listener). <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; <B>this</B>.addContainerListener(<B>this</B>);</PRE></TD>
</TR>
</TABLE>

<P>Next, we invoke the <B>addButtons()</B> method, defined above, to add a series of buttons to this <B>Frame </B>object with the labels being determined by the individual characters in the <B>String </B>object passed as a parameter. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; this.<B>addButtons</B>("789+456-123=0.X/C");</PRE></TD>
</TR>
</TABLE>

<P>We also add a display label and make it yellow. This is a quick and easy way to create a place to display information but the placement of the display area <U>doesn't look much like a calculator</U>. A better way would be to construct two <B>Panel</B> objects, one for the display and the other for the keyboard, and to place one above the other in the layout. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp; displayLabel = <B>new Label</B>("00000");
&nbsp;&nbsp;&nbsp; this.add(displayLabel);
&nbsp;&nbsp;&nbsp; displayLabel.setBackground(Color.yellow);</PRE></TD>
</TR>
</TABLE>

<P>Following this, we register an anonymous <B>WindowListener</B> object using an anonymous <B>WindowListener</B> class. This listener object will cause the program to terminate when the user clicks the <I>close</I> button on the <B>Frame</B> object. Note that this class automatically <B>extends</B> the <B>WindowAdapter</B> class. </P>
<P>If you don't understand this syntax, you should go back and review the lesson on inner classes. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp;&nbsp;&nbsp;&nbsp; this.<B>addWindowListener</B>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new <B>WindowAdapter</B>(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <B>windowClosing</B>(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<B>exit</B>(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp; }//end constructor</PRE></TD>
</TR>
</TABLE>

<P>That completes the interesting code in the constructor. </P>
<P>Following the constructor, we define the <B>componentAdded</B> method that is declared in the <B>ContainerListener</B> class (which is implemented by the controlling class of this program). This method is invoked each time a new component is added to this <B>Frame </B>object. </P>
<P>Each time a component is added, this method confirms that the new component is a button, and if so, it registers an <B>ActionListener</B> object to process action events on that individual button. All of the <B>ActionListener</B> objects are of the same <B>ActionListener</B> class. The <B>ActionListener</B> class is this extended <B>Frame </B>class which implements the <B>ActionListener </B>interface and defines the <B>actionPerformed</B> method of that interface. </P>
<P>Again note that <B>this</B> object is the action listener object being registered because the controlling class implements the <B>ActionListener</B> interface, and the <B>actionPerformed()</B> method is defined in the controlling class. </P>
<P>The <B>getChild()</B> method of the <B>ContainerEvent</B> object returns a reference to the component that was added to the container creating the event in the first place. The reference is returned as type <B>Component, </B>cast to a <B>Button</B>, and assigned to the reference variable named <B>button</B>. The object named <B>button</B> then becomes the source on which the <B>ActionListener</B> object is registered. </P>
<P>We also define an empty <B>componentRemoved()</B> method to satisfy the compiler (all methods declared in the <B>ContainerListener</B> interface must be defined). <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public void <B>componentAdded</B>(ContainerEvent e){
&nbsp;&nbsp;&nbsp; <B>if</B>(e.getID() == ContainerEvent.<B>COMPONENT_ADDED</B>){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>if</B>(e.getChild() instanceof <B>Button</B>){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button <B>button </B>= (Button)e.<B>getChild</B>();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Register an ActionListener object on the button
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button.<B>addActionListener</B>(<B>this</B>);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp; }//end if statement&nbsp;&nbsp;
&nbsp; }//end componentAdded()


&nbsp; public void <B>componentRemoved</B>(ContainerEvent e){}</PRE></TD>
</TR>
</TABLE>

<P>Finally, we see the <B>actionPerformed </B>method that is invoked whenever the user clicks one of the buttons that are added to the <B>Frame </B>object. </P>
<P>All this method does is display the button's label. However, if you wanted to expend the programming effort, you could implement the calculator logic at this point. <BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>&nbsp; public void <B>actionPerformed</B>(ActionEvent e){
&nbsp;&nbsp;&nbsp; displayLabel.setText(e.getActionCommand());
&nbsp; }//end actionPerformed</PRE></TD>
</TR>
</TABLE>

<P>A complete listing of the first sample program is presented in the next section. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="first_sample_program_listing"></A>First Sample Program Listing</H3>
</FONT><P>Many of the interesting code fragments are highlighted in <B>boldface</B> in the following program listing to assist you in viewing them in context. <BR>
&nbsp; </P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 WIDTH=495>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Event32.java
Copyright 1997, R.G.Baldwin

This program illustrates container events.&nbsp;&nbsp;

It also illustrates the use of inner classes.&nbsp;&nbsp;

It also illustrates the use of the controlling class as a&nbsp;
listener class that implements multiple listener&nbsp;
interfaces.&nbsp; In this situation, the listener methods are
defined as methods of the controlling class rather than
being defined as methods of separately compiled listener
classes.

It also illustrates the fact that the code in one event&nbsp;
handler can register event listeners for other components.

In particular, a ContainerListener object monitors for the&nbsp;
addition of buttons to a Frame object.&nbsp; Each time a new
button is added to the Frame, an ActionEvent listener is
registered on that new Button object.&nbsp; All of the&nbsp;
ActionEvent listener objects that are registered on the
buttons are of the same ActionEvent class.

To make the whole thing interesting, this program creates&nbsp;
the keyboard and provides the skeleton code for a&nbsp;
four-function calculator, including the event handler&nbsp;
needed to respond to keystrokes and identify the key.&nbsp;&nbsp;
However, it does not provide the code that would be&nbsp;
required to process the keystrokes or display the results&nbsp;
of the calculations since that is not the primary purpose&nbsp;
of the program. It does provide a place to display results
in the form of a yellow Label object.

When you run the program and click on the buttons in the
Frame object, the labels on the buttons are displayed in
the yellow display area.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This program was tested using JDK 1.1.3 under Win95.

**********************************************************/
import java.awt.*;
import java.awt.event.*;

//Note that the controlling class implements both the
// ContainerListener interface and the ActionListener
// interface.
class Event32 extends Frame
<B>&nbsp; implements ContainerListener,ActionListener</B>{
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Label displayLabel;//reference to a Label for display
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Event32();//instantiate this object
&nbsp;&nbsp; }//end main
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //This method adds a series of Button objects to this
&nbsp; // Frame object.&nbsp; The number of buttons added and the&nbsp;
&nbsp; // labels on the buttons are determines from the length&nbsp;
&nbsp; // and the substring values of an incoming String object.
&nbsp; void <B>addButtons</B>(String labels){
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; labels.<B>length</B>();cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(new Button(labels.<B>substring</B>(cnt,cnt+1)));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end addButtons()&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; public Event32(){//constructor

&nbsp;&nbsp;&nbsp; //Set the layout manager to GridLayout with 4 col and
&nbsp;&nbsp;&nbsp; // an unspecified number of rows (0) with a three-pixel
&nbsp;&nbsp;&nbsp; // horizontal and vertical gap.
&nbsp;&nbsp;&nbsp; this.setLayout(new <B>GridLayout</B>(0,4,3,3));

&nbsp;&nbsp;&nbsp; this.setSize(280,280);
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997 R.G.Baldwin");

&nbsp;&nbsp;&nbsp; //Add a container listener which will receive an event
&nbsp;&nbsp;&nbsp; // notification each time a component is added to the&nbsp;
&nbsp;&nbsp;&nbsp; // container. The container is this Frame object.&nbsp; Also
&nbsp;&nbsp;&nbsp; // the listener class that implements the&nbsp;
&nbsp;&nbsp;&nbsp; // ContainerListener interface is this extended Frame&nbsp;
&nbsp;&nbsp;&nbsp; // class (hence this as an argument).
&nbsp;&nbsp;&nbsp; <B>this</B>.addContainerListener(<B>this</B>);

&nbsp;&nbsp;&nbsp; //Add a series of buttons to this Frame object with
&nbsp;&nbsp;&nbsp; // the labels determined by the individual characters
&nbsp;&nbsp;&nbsp; // in the String object passed as a parameter.
&nbsp;&nbsp;&nbsp; this.<B>addButtons</B>("789+456-123=0.X/C");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add a display label and make it yellow.
&nbsp;&nbsp;&nbsp; displayLabel = new Label("00000");
&nbsp;&nbsp;&nbsp; this.add(displayLabel);
&nbsp;&nbsp;&nbsp; displayLabel.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; this.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp; //Anonymous inner-class listener to terminate program
&nbsp;&nbsp;&nbsp; this.<B>addWindowListener</B>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new <B>WindowAdapter</B>(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <B>windowClosing</B>(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.<B>exit</B>(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp; }//end constructor&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; //=====================================================//
&nbsp; //This is the overridden componentAdded method of the
&nbsp; // ContainerListener class.&nbsp; It is invoked each time a
&nbsp; // new component is added to this Frame object.&nbsp; Note
&nbsp; // that each time a component is added, it confirms that
&nbsp; // the component is a button, and if so, it registers an
&nbsp; // ActionListener object to process Action events on that
&nbsp; // individual button.&nbsp; All of the ActionListener objects
&nbsp; // are of the same class.&nbsp; The ActionListener class is
&nbsp; // this extended Frame class which implements the
&nbsp; // ActionListener interface and overrides the&nbsp;
&nbsp; // actionPerformed method of that interface.&nbsp;&nbsp;
&nbsp; public void <B>componentAdded</B>(ContainerEvent e){
&nbsp;&nbsp;&nbsp; <B>if</B>(e.getID() == ContainerEvent.<B>COMPONENT_ADDED</B>){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <B>if</B>(e.getChild() instanceof <B>Button</B>){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button <B>button </B>= (Button)e.<B>getChild</B>();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Register an ActionListener object on the button
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button.<B>addActionListener</B>(<B>this</B>);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp; }//end if statement&nbsp;&nbsp;
&nbsp; }//end componentAdded()

&nbsp; //This empty method is required to satisfy the compiler
&nbsp; // because this extended Frame class implements the
&nbsp; // ContainerListener interface.
&nbsp; public void <B>componentRemoved</B>(ContainerEvent e){}

&nbsp; //=====================================================//
&nbsp; //This is the actionPerformed method that is invoked
&nbsp; // whenever the user clicks one of the buttons that are
&nbsp; // added to the Frame object.&nbsp; All it does is display
&nbsp; // the button's label.
&nbsp; // However, if you wanted to expend the programming
&nbsp; // effort, you could implement the calculator at this
&nbsp; // point.&nbsp;
&nbsp; public void <B>actionPerformed</B>(ActionEvent e){
&nbsp;&nbsp;&nbsp; displayLabel.setText(e.getActionCommand());
&nbsp; }//end actionPerformed
&nbsp; //=====================================================//
}//end class Event32&nbsp;&nbsp;&nbsp;
//=======================================================//</PRE></TD>
</TR>
</TABLE>
</CENTER></P>

<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="second_sample_program_discussion"></A>Second Sample Program Discussion</H2>
</FONT><P>This program replicates the functionality of the previous program named Event32.java. However, it does so using <U>only anonymous inner classes</U>. This program is provided so that you can compare the syntax using only anonymous inner classes with the comparable version named Event32 that uses named inner classes for the listener classes. </P>
<P>This program was tested using JDK 1.1.3 under Win95. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="second_sample_program_listing"></A>Second Sample Program Listing</H3>
</FONT><P>The anonymous inner classes in this program are highlighted using either <B>boldface</B> or <I>Italics</I>. Note that this program illustrates <U>nested</U> anonymous inner classes. In particular, the anonymous inner class for the <B>ActionListener</B> (<I>Italics</I>) is nested inside the anonymous inner class for the <B>ContainerListener </B>(highlighted in <B>boldface</B>). <BR>
&nbsp; </P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1 WIDTH=509>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Event33.java
Copyright 1997, R.G.Baldwin

This program replicates the functionality of the program
named Event32.java.&nbsp; However, it does so using only
anonymous inner classes.&nbsp; This program is provided so
that you can compare the syntax using only anonymous
inner classes with a comparable version named Event32 that
uses named inner classes for the listener classes.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
This program was tested using JDK 1.1.3 under Win95.

**********************************************************/
import java.awt.*;
import java.awt.event.*;

//Note that this controlling class does not implement any
// listener interfaces.&nbsp; They are effectively implemented
// in the inner classes.
class Event33 extends Frame{
&nbsp;&nbsp;
&nbsp; Label displayLabel;//reference to a Label for display
&nbsp;&nbsp;
&nbsp; //=====================================================//
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Event33();//instantiate this object
&nbsp;&nbsp; }//end main
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; //This method adds a series of Button objects to this
&nbsp; // Frame object.&nbsp; The number of buttons added and the&nbsp;
&nbsp; // labels on the buttons are determines from the length&nbsp;
&nbsp; // and the substring values of an incoming String object.
&nbsp; void addButtons(String labels){
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; labels.length();cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this.add(new Button(labels.substring(cnt,cnt+1)));
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp; }//end addButtons()&nbsp;&nbsp;
&nbsp; //=====================================================//
&nbsp;&nbsp;
&nbsp; public Event33(){//constructor
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setLayout(new GridLayout(0,4,3,3));
&nbsp;&nbsp;&nbsp; this.setSize(280,280);
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997 R.G.Baldwin");

&nbsp;
&nbsp;&nbsp;&nbsp; //The following anonymous class definition registers an&nbsp;
&nbsp;&nbsp;&nbsp; // anonymous ContainerListener object on this Frame
&nbsp;&nbsp;&nbsp; // object.&nbsp; The ContainerListener object in turn&nbsp;
&nbsp;&nbsp;&nbsp; // registers an anonymous Action Listener object on
&nbsp;&nbsp;&nbsp; // each of the buttons that are added to the Frame
&nbsp;&nbsp;&nbsp; // object.
<B>&nbsp;&nbsp;&nbsp; this.addContainerListener(//add anonymous Listener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ContainerListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void componentAdded(ContainerEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getID() == ContainerEvent.COMPONENT_ADDED){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(e.getChild() instanceof Button){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Button button = (Button)e.getChild();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The following code registers an anonymous
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ActionListener object on each button&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // object that is added to the Frame object.
</B><I>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; button.addActionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ActionListener(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void actionPerformed(ActionEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; displayLabel.setText(e.getActionCommand());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end actionPerformed
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end new actionListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; );//end add anonymous ActionListener
</I><B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if statement&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end componentAdded()
</B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The following empty method is required to satisfy
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the requirement to define all of the methods
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // that are declared in the ContainerListener
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // interface.<B>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void componentRemoved(ContainerEvent e){}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end new ContainerListener&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; );//end add anonymous ContainerListener

</B>&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp; //Add a series of buttons to this Frame object with
&nbsp;&nbsp;&nbsp; // the labels determined by the individual characters
&nbsp;&nbsp;&nbsp; // in the String object passed as a parameter.
&nbsp;&nbsp;&nbsp; this.addButtons("789+456-123=0.X/C");

&nbsp;&nbsp;&nbsp; //Add a display label and make it yellow.
&nbsp;&nbsp;&nbsp; displayLabel = new Label("00000");
&nbsp;&nbsp;&nbsp; this.add(displayLabel);
&nbsp;&nbsp;&nbsp; displayLabel.setBackground(Color.yellow);
&nbsp;&nbsp;&nbsp; this.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //---------------------------------------------------//
&nbsp;&nbsp;&nbsp; //Anonymous inner-class listener to terminate program
<B>&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){//anonymous class definition
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
</B>&nbsp; }//end constructor&nbsp;
&nbsp; //=====================================================//
}//end class Event33&nbsp;&nbsp;&nbsp;
//=======================================================//</PRE></TD>
</TR>
</TABLE>
</CENTER></P>

<P ALIGN="CENTER">-end-<!--end--></P></BODY>
</HTML>
