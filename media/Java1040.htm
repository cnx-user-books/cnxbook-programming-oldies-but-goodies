<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Using Focus in Swing, Part 1</h2></center>
<b><i>By <a href="#About the author">Richard G. Baldwin</a></i></b>
<p>Java Programming, Lecture Notes # 1040
<p>November 20, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled <i>Swing from A to Z</i>, discusses the
capabilities and features of Swing in quite a lot of detail.&nbsp; This
series is intended for those persons who need to understand Swing at a
detailed level.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the figures and listings while you are reading about them,
without losing your place.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>In an <a href="Java1030.htm">earlier</a> lesson, I recommended a list
of my earlier Swing tutorials for you to study prior to embarking on a
study of this set of lessons.
<p><b><font color="#FF0000">Where are they located?</font></b>
<p>You will find those lessons published at Gamelan.com.&nbsp; I also maintain
a consolidated Table of Contents at
<i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a></i><font color="#000000"> that may make
it easier for you to locate specific lessons.&nbsp; The Table of Contents
on my site provides links back to each of the lessons at Gamelan.com.</font>
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">The previous lesson</font></b>
<p><font color="#000000">In a <a href="Java1036.htm">previous</a> lesson,
I told you that one</font> of the major weaknesses of the AWT, as compared
to other GUI programming environments, is the handling of focus.
<p><b><font color="#FF0000">Swing is better</font></b>
<p>Swing rectifies that weakness by providing a significantly improved
capability for the programmer to control the focus.&nbsp; This lesson is
the first lesson in a new miniseries on the use of Swing and focus.
<p><b><font color="#FF0000">Swing components are beans</font></b>
<p>In another earlier lesson entitled <a href="Java1005.htm">Swing from
A to Z, Some Simple Components</a>, I told you that <font color="#000000">Swing
components are JavaBean components.&nbsp; <i>(You will find quite a lot
of information about JavaBean components in my earlier lessons.)</i></font>
<p><font color="#000000">When we discuss JavaBean components, we are usually
interested in the interface to those components as determined by the <i>methods</i>,
<i>events</i>,
and <i>properties</i> of the bean.</font>
<p><b><font color="#FF0000">Swing components extend JComponent</font></b>
<p><font color="#000000">Most swing components extend <b>JComponent</b>
either directly or indirectly.&nbsp; <b>JComponent</b> extends <b>Container</b>,
which in turn extends <b>Component</b>.</font>
<p><font color="#000000">Therefore, most Swing components inherit the methods,
events, and properties from these three classes.&nbsp; <i>(Many Swing components
also supplement these inherited characteristics in the definition of other
classes that extend JComponent.)</i></font>
<p><b><font color="#FF0000">Understanding Swing components as a group</font></b>
<p><font color="#000000">If you understand the characteristics that Swing
components inherit from these three classes, you already know a lot about
a Swing component even before you begin examining it individually.&nbsp;
In other words, we can learn a lot about Swing components by examining
the three classes listed above.</font>
<p><b><font color="#FF0000">JComponent and focus</font></b>
<p><font color="#000000">If we examine the API documentation from Sun,
we find the following methods in the <b>JComponent</b> class.</font>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="100%" BGCOLOR="#CCFFFF" >
<tr>
<td>
<ul>
<li>
<b>isFocusCycleRoot()</b> - Override this method and return true if your
component is the root of a component tree with its own focus cycle.</li>

<li>
<b>isFocusTraversable()</b> - Identifies whether or not this component
can receive the focus.</li>

<li>
<b>isManagingFocus()</b> - Override this method and return true if your
JComponent manages focus.</li>

<li>
<b>isRequestFocusEnabled()</b> - Return whether the receiving component
can obtain the focus by calling requestFocus</li>

<li>
<b>getNextFocusableComponent()</b> - Return the next focusable component
or null if the focus manager should choose the next focusable component
automatically</li>
</ul>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Components inherit these methods</font></b>
<p><font color="#000000">Every component class that extends <b>JComponent</b>
inherits these methods, and is free to use them as is, or to override them
to provide behavior that is more appropriate for objects instantiated from
that class.</font>
<p><b><font color="#FF0000">Methods define properties</font></b>
<p><font color="#000000">Hopefully, you will recognize that these methods
define a set of properties having the following names&nbsp; <i>(if not,
you may want to review some of my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">earlier</a>
lessons on the properties of JavaBean components):</i></font>
<ul>
<li>
<font color="#000000">focusCycleRoot</font></li>

<li>
<font color="#000000">focusTraversable</font></li>

<li>
<font color="#000000">managingFocus</font></li>

<li>
<font color="#000000">requestFocusEnabled</font></li>

<li>
<font color="#000000">nextFocusableComponent</font></li>
</ul>
<b><font color="#FF0000">Using the focus properties</font></b>
<p><font color="#000000">The lessons in this miniseries will teach you
how to use these properties in your Swing programs.&nbsp; The miniseries
will also contain lessons on how to design and use your own <b>FocusManager</b>
class as an alternative to the default Swing focus manager.</font>
<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
This sample program, named <b>Swing22</b>, is the first in a series of
programs designed to illustrate the use of focus in Swing.
<p>The screen shot in Figure 1 shows what the screen looks like when this
sample program starts running.
<center>
<p><img SRC="java1040a.gif" height=101 width=301>
<br><b><font face="Arial Narrow"><font size=-1>Figure 1&nbsp; A Screen
Shot of the Running Program</font></font></b></center>

<p><b><font color="#FF0000">Doesn't deal directly with Swing yet...</font></b>
<p>However, this program doesn't deal directly with Swing just yet.&nbsp;
Rather, it uses the AWT as a baseline to illustrate the focus traversal
cycle.
<p>The program illustrates how the focus traverses its cycle among AWT
components.&nbsp; This will be contrasted <i>(in a subsequent lesson)</i>
with the way in which the focus traverses its cycle in Swing.
<p><b><font color="#FF0000">Two important points</font></b>
<p>This program illustrates two important aspects of AWT and Swing focus
handling:
<p><b><font color="#FF0000">Order of focus traversal</font></b>
<p>First, the order of focus traversal for the AWT is the order in which
the components are placed in the container.&nbsp; <i>(We will see later
that Swing treats the order of focus traversal differently from the AWT.)</i>
<p><b><font color="#FF0000">Requesting the focus</font></b>
<p>Second, it is possible, with both the AWT and Swing, to request that
the focus be shifted to a specific component by invoking the <b>requestFocus()</b>
method on that component.
<p><b><font color="#FF0000">What is the default starting point?</font></b>
<p>The default is for the first component placed in the container to have
the focus when the program starts running.&nbsp; In this case, that would
be the East Button <i>(later you will see that the East button is the first
component placed in the container).</i>
<p><b><font color="#FF0000">Overriding the default</font></b>
<p>However, a <b>ComponentEvent</b> handler in this program requests that
the focus be shifted to the North Button immediately after the GUI is made
visible.&nbsp; As shown in Figure 1, this causes the focus to reside on
the North button by the time the GUI is available to the user.
<p><b><font color="#FF0000">Order of focus traversal</font></b>
<p>Thus, based on the order that the components were placed in the container,
the order of focus traversal is North, Center, East, West, South, and back
to North.
<p><b><font color="#FF0000">How do I traverse the focus?</font></b>
<p>Focus traversal can be observed by repeatedly pressing the Tab key.
<p>Repeatedly pressing Shift-Tab will reverse the order of focus traversal
among the components.
<p><b><font color="#FF0000">Event handlers</font></b>
<p>There are no event handlers registered on the five buttons placed in
the <b>Frame</b>.&nbsp; However, as mentioned above, a component listener
is registered on the <b>Frame</b> to invoke <b>requestFocus()</b> on the
North button when the <b>Frame</b> becomes visible.&nbsp; <i>(You can only
request focus on a component after it becomes visible.)</i>
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
I will break this program down and discuss it in fragments.&nbsp; A listing
of the entire program is provided in Listing 5.
<p><b><font color="#FF0000">The controlling class</font></b>
<p>Listing 1 shows the beginning of the controlling class named <b>Swing22</b>
along with the <b>main()</b> method.&nbsp; The fragment also shows the
instantiation of a new <b>Button</b> object with a label of "North".&nbsp;
A subsequent code fragment will invoke the <b>requestFocus()</b> method
to purposely shift the focus to this <b>Button</b> component.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing22.java Rev 8/17/00
Copyright 2000, R.G.Baldwin
**********************************/

import java.awt.*;
import java.awt.event.*;

class <b>Swing22</b> extends <b>Frame</b>{
&nbsp; Button northBtn = <b>new Button("North");
</b>&nbsp;&nbsp;
&nbsp; public static void <b>main</b>(String args[]) {
&nbsp;&nbsp;&nbsp; <b>new Swing22();
</b>&nbsp; }//end main()

<b>Listing 1</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The controlling class extends Frame</font></b>
<p>Note that the controlling class extends the <b>Frame</b> class. <b>Frame</b>
is a top-level class of the AWT.&nbsp; Therefore the instance of the controlling
class created in the <b>main()</b> method appears on the screen as a graphical
user interface (GUI) once it becomes visible.
<p><b><font color="#FF0000">The constructor</font></b>
<p>Listing 2 shows the beginning of the constructor.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;
&nbsp; Swing22(){//Constructor
<b>&nbsp;&nbsp;&nbsp; add(new Button("East"),"East");
&nbsp;&nbsp;&nbsp; add(new Button("West"),"West");
&nbsp;&nbsp;&nbsp; add(new Button("South"),"South");
&nbsp;&nbsp;&nbsp; add(northBtn,"North");
&nbsp;&nbsp;&nbsp; add(new Button("Center"),"Center");
</b>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setSize(300,100);

<b>Listing 2</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The layout manager</font></b>
<p>The default layout manager for a <b>Frame</b> object is <b>BorderLayout</b>.
<i>(At
the risk of boring you, let me mention one more time that you can learn
more about BorderLayout and other layout managers in my earlier lessons.)</i>
<p><b><font color="#FF0000">Place components in the Frame</font></b>
<p>The first five statements in the constructor (highlighted in boldface)
instantiate four anonymous <b>Button</b> objects and place them, along
with the <b>Button</b> object instantiated earlier, in the East, West,
South, North, and Center locations of the <b>Frame</b> component.
<p><b><font color="#FF0000">Focus traversal order matches order of placement</font></b>
<p>As explained earlier, the focus traversal order of components in an
AWT container matches the order in which the components are placed in the
container.&nbsp; This causes the focus traversal order among the buttons
to be:&nbsp; East, West, South, North, Center, and back to East.
<p><b><font color="#FF0000">Set title and size properties</font></b>
<p>The remaining code in Listing 2 simply sets the title property and the
size property of the <b>Frame</b>.
<p><b><font color="#FF0000">An anonymous ComponentEvent listener</font></b>
<p>Listing 3 is an anonymous <b>ComponentEvent</b> listener class that
is used to cause the focus to reside on the North button when the GUI becomes
available to the user.&nbsp; <i>(By now you should know where you can learn
more about anonymous inner classes if this syntax is not familiar to you.)</i>
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; //Register component listener to request
&nbsp;&nbsp;&nbsp; // focus on the north Button after the
&nbsp;&nbsp;&nbsp; // Frame becomes visible.
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; this.addComponentListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ComponentAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void <b><font color="#000000">componentShown</font></b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ComponentEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; northBtn.<b>requestFocus();
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end componentShown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ComponentAdapter
&nbsp;&nbsp;&nbsp; );//end addComponentListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp;&nbsp;&nbsp; //Make the Frame visible
&nbsp;&nbsp;&nbsp; setVisible(true);

<b>Listing 3</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">What does this code do?</font></b>
<p>This code invokes the <b>requestFocus()</b> method on the reference
to the North button to cause the focus to shift to that button.&nbsp; However,
as mentioned earlier, this can only be done (successfully) after the component
becomes visible.&nbsp; <i>(If you request focus on a component that is
not visible, the focus is not shifted to the component.)</i>
<p><b><font color="#FF0000">A componentShown() event</font></b>
<p>Whenever a component becomes visible, that component multicasts a <b>ComponentEvent</b>
to all registered listeners, and invokes the <b>componentShown()</b> method
on those listeners.&nbsp; That event is used in this program to determine
when the <b>Frame</b> actually becomes visible.
<p><b><font color="#FF0000">Shift the focus</font></b>
<p>When the <b>Frame</b> becomes visible, the <b>requestFocus()</b> method
is invoked on the reference to the North button to cause the focus to shift
to that button.
<p><b><font color="#FF0000">Make the Frame visible</font></b>
<p>The remaining code in Listing 3 sets the visible property to true, causing
the <b>Frame</b> to become visible on the screen.&nbsp; This is what actually
triggers the <b>componentShown()</b> event discussed above.
<p><b><font color="#FF0000">The terminator...</font></b>
<p>The code in Listing 4 registers an anonymous object that causes the
program to terminate when the user clicks the <i>close</i> button on the
<b>Frame</b>.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
}//end class Swing22

<b>Listing 4</b></font></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Another approach</font></b>
<p>JDK 1.3 provides an alternative way to accomplish the same result, but
so far, I am still using the old way for the benefit of those persons who
have not yet downloaded and installed JDK 1.3.&nbsp; <i>(In some future
lesson, I will show you the alternative way to terminate an application
using JDK 1.3.)</i>
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
In this lesson, I have introduced you to:
<ul>
<li>
The five focus properties of the <b>JComponent</b> class that are inherited
by most Swing components.</li>

<li>
The focus traversal cycle.</li>

<li>
The use of the <b>requestFocus()</b> method.</li>
</ul>

<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In this lesson, I provided the AWT baseline for focus traversal.&nbsp;
In the next lesson, I will extend the concept to include focus traversal
in Swing, and will contrast the two different versions of the focus traversal
cycle.
<p>Subsequent lessons will discuss the use of all five of the focus properties
of Swing, and will show you how to create and use your own focus manager
as a replacement for the default focus manager.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in Listing 5.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier"><font size=-1>/*File Swing22.java Rev 8/17/00
Copyright 2000, R.G.Baldwin

This is the first in a series of programs
designed to illustrate the use of focus in
Swing.

However, this particular program is not about
Swing.&nbsp; Rather, it illustrates how the focus
traverses its cycle among AWT components.&nbsp;&nbsp;
This will be contrasted with the manner in
which the focus traverses its cycle in&nbsp;
Swing.

Illustrates two important aspects of AWT
focus handling:
&nbsp;&nbsp;
First, the order of focus traversal is the
order in which the components are placed in
the container.

Second, it is possible to request that focus
be moved to a specific component by invoking
the requestFocus() method on that component.
Like Swing, the default is for the first&nbsp;
component placed in the container to have&nbsp;
the focus when the program starts running.&nbsp;&nbsp;
In this case, that would be the East Button.
A ComponentEvent handler requests focus on&nbsp;
the North Button immediately after the GUI&nbsp;
is made visible, which causes the focus to&nbsp;
reside on the North Button by the time the&nbsp;
GUI is available to the user.

Thus, the order of focus traversal is&nbsp;
North, Center, East, West, South, and back
to North.&nbsp; Focus traversal can be observed
by repeatedly pressing the Tab key.&nbsp;&nbsp;
Repeatedly pressing Shift-Tab will reverse
the order of focus traversal among the
components.

There are no event handlers registered on&nbsp;
the five buttons placed in the Frame.&nbsp;&nbsp;
However, a component listener is registered
on the Frame to invoke requestFocus() on the
North button when the Frame becomes visible.
(You can only request focus on a component
after it becomes visible.)

Tested using JDK 1.2.2 under WinNT 4.0 WkStn
*********************************/

import java.awt.*;
import java.awt.event.*;

class Swing22 extends Frame{
&nbsp; Button northBtn = new Button("North");
&nbsp;&nbsp;
&nbsp; public static void main(String args[]) {
&nbsp;&nbsp;&nbsp; new Swing22();
&nbsp; }//end main()
&nbsp; //---------------------------------------//
&nbsp;&nbsp;
&nbsp; Swing22(){//Constructor
&nbsp;&nbsp;&nbsp; add(new Button("East"),"East");
&nbsp;&nbsp;&nbsp; add(new Button("West"),"West");
&nbsp;&nbsp;&nbsp; add(new Button("South"),"South");
&nbsp;&nbsp;&nbsp; add(northBtn,"North");
&nbsp;&nbsp;&nbsp; add(new Button("Center"),"Center");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setTitle("Copyright 2000, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setSize(300,100);

&nbsp;&nbsp;&nbsp; //Register component listener to request
&nbsp;&nbsp;&nbsp; // focus on the north Button after the
&nbsp;&nbsp;&nbsp; // Frame becomes visible.
&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; this.addComponentListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ComponentAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void componentShown(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ComponentEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; northBtn.requestFocus();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end componentShown
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end ComponentAdapter
&nbsp;&nbsp;&nbsp; );//end addComponentListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp;&nbsp;&nbsp; //Make the Frame visible
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //.....................................//
&nbsp;&nbsp;&nbsp; //Anonymous inner terminator class
&nbsp;&nbsp;&nbsp; this.addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing()
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end WindowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp;&nbsp;&nbsp; //.....................................//

&nbsp; }//end constructor
}//end class Swing22

<b>Listing 5</b></font></font></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
