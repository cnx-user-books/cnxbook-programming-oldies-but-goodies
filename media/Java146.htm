<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->The AWT Package, The Canvas Component<!--endtitle--></b></h2></center>
Java Programming, Lesson # 146, Revised 02/03/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#canvas">Canvas</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul>

<li><a href="#review">Review</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This series of lessons is concentrating on the package <b>java.awt </b>where
most of the functionality exists for providing the user interface to your
application or applet.

<p>We learned earlier how to handle events and how to use layout managers.These
two topics form the basis for the design and implementation of a Graphical
User Interface (GUI).

<p>Now we are learning about the various components that we can combine
with layout and event handling to produce an effective Graphical User Interface.

<p>The available components are defined by classes in the package <b>java.awt</b>.
Our approach is to group those classes into categories and study the material
on a category basis. As of this writing, the remaining categories are:
<ul><li><b>The Canvas Class</b></li>

<li>
Graphics - Shapes, Fonts, Images</li>

<li>
The PrintJob Class</li>

<li>
The Toolkit Class</li></ul>
This lesson will concentrate on the <b>Canvas</b> class. As things develop,
it may be necessary to modify these groupings.
<center><h2><a name="canvas"></a><font color="#ff0000">Canvas</font></h2></center>
The inheritance hierarchy for the <b>Canvas</b> class is as shown below.
<br>&nbsp;
<center><table border bgcolor="#80ffff" ><tr><td><pre>java.lang.Object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.Component&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----java.awt.<b>Canvas</b></pre></td></tr></table></center>
According to the JavaSoft documentation:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>"A <b>Canvas </b>component represents a blank rectangular area of the
screen onto which the application can draw or from which the application
can trap input events from the user.&nbsp;

<p>An application must subclass the <b>Canvas </b>class in order to get
useful functionality such as creating a custom component. The paint method
must be overridden in order to perform custom graphics on the canvas."</td></tr></table>
According to Campione and Walrath:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>"The <b>Canvas </b>class exists to be subclassed. It does nothing on
its own; it merely provides a way for you to implement a custom Component.
For example, Canvases are useful as display areas for images and custom
graphics, whether or not you wish to handle events that occur within the
display area."</td></tr></table>
An important caution provided by Campione and Walrath follows:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>"When implementing a <b>Canvas </b>subclass, take care to implement
the <b>minimumSize() </b>and <b>preferredSize()</b> methods to properly
reflect your canvas's size. Otherwise, depending on the layout your canvas's
container uses, your canvas could end up too small -- perhaps even invisible."</td></tr></table>
This particular caution wasn't important in the main sample program that
follows because the layout manager being used (BorderLayout) ignores the
two size parameters mentioned above and fills the available space in the
<i>Center</i> of the layout with the <b>Canvas</b> object. However, there
is another sample program at the end of this lesson that does deal with
the size of the canvas. You should become familiar with both of these programs.

<p>In summary, a <b>Canvas </b>object emulates its namesake in the art
world. It provides a workspace on which you can draw or paint.

<p>However, unlike its namesake in the art world, it also provides a surface
on which you can recognize events.
<center><h2><a name="canvas class"></a><font color="#ff0000">Canvas Class</font></h2></center>
The <b>Canvas </b>class is very simple consisting of a single constructor
with no arguments and two methods.

<p>The two methods of the class are as follows:
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td><pre><b>addNotify()</b> Creates the peer of the canvas.&nbsp;

<b>paint(Graphics)</b> This method is called to repaint this canvas.&nbsp;</pre></td></tr></table>

<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
This program is designed to illustrate the use of the <b>Canvas </b>class.

<p>It also illustrates the ability to instantiate <b>listener </b>objects
that can manipulate the <b>source </b>objects on which they are registered
without the requirement to pass references to those source objects when
the listener objects are instantiated.

<p>Thus, no parameterized constructors are used in the instantiation of
listener objects in this program.

<p>When the program first appears on the screen, four <u>non-functional</u><b>Button </b>objects and a green <b>Canvas </b>object appear in a <b>Frame
</b>object. The objects are separated by horizontal and vertical gaps of
thirty pixels. The <b>Button</b> objects are provided simply to cause the
<b>Frame</b> object to contain something other than the <b>Canvas</b> object.

<p>The four <b>Button</b> objects are placed at the borders of the <b>Frame
</b>object using the <b>BorderLayout </b>manager. The <b>Canvas </b>object
is placed in the <i>Center</i> of the <b>Frame </b>object. As mentioned
earlier, the <b>BorderLayout</b> manager fills all the available space
with the object in the <i>Center</i> and therefore, the preferredSize<b></b>and minimumSize parameters weren't a consideration in this program.

<p>When you click on the green <b>Canvas </b>object, the coordinates of
the mouse pointer are displayed on that object. If you have studied earlier
lessons in this tutorial, you will recognize this program to be very similar
to an earlier program where the coordinates of a mouse click were displayed
in the client area of a <b>Frame</b> object. The main difference is that
in the earlier program, the <b>Frame</b> object itself was the <b>source
</b>of the <b>mouse</b> events, and in this program, a <b>Canvas</b> object
that is placed in a <b>Frame</b> object is the <b>source</b> for <b>mouse</b>
events.

<p>No listener objects were registered for the <b>Frame</b> object or for
any of the <b>Button</b> objects. Therefore, clicking in the gaps or clicking
on the buttons has <u>no effect</u> on the program.

<p>Clicking on the close button on the <b>Frame </b>object terminates the
program and returns control to the operating system.

<p>These results were produced using JDK 1.1.3, running under Windows 95.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
As mentioned above, this program is very similar to a program in a previous
lesson which displays the coordinates of mouse clicks in the client area
of a <b>Frame</b> object.

<p>The first interesting code fragment in this version of the program is
the code in which we subclass the <b>Canvas</b> class in order to override
the <b>Paint</b> method, and also to cause the object to be green when
it is first instantiated.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class MyCanvas <b>extends Canvas</b>{
&nbsp; int clickX;
&nbsp; int clickY;
&nbsp;&nbsp;
&nbsp; public MyCanvas(){//constructor
&nbsp;&nbsp;&nbsp; this.setBackground(Color.<b>green</b>);
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; //Override the paint() method.
&nbsp; public void <b>paint</b>(Graphics g){
&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "" + clickX + ", " + clickY, clickX, clickY);
&nbsp; }//end paint()
}//end class MyCanvas</pre></td></tr></table>
The next interesting code fragment is the code used to create a <b>BorderLayout
</b>manager,with horizontal and vertical gaps, for the <b>Frame </b>object.
Although the default layout manager for <b>Frame</b> is <b>BorderLayout,
</b>gaps are not included in the default. If gaps are desired, it is necessary
to use a named layout manager on which to invoke the methods to set the
gaps.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; //Create a border layout with gaps.
&nbsp;&nbsp;&nbsp; BorderLayout myLayout = new BorderLayout();
&nbsp;&nbsp;&nbsp; myLayout.<b>setVgap(30)</b>;
&nbsp;&nbsp;&nbsp; myLayout.<b>setHgap(30)</b>;
&nbsp;&nbsp;&nbsp; this.setLayout(myLayout);//Apply layout to the Frame object</pre></td></tr></table>
The next interesting code fragment instantiates the <b>Canvas</b> object
from the class named <b>MyCanvas</b> that extends <b>Canvas</b> and adds
it to the center position of the <b>Frame</b> object. The <b>MyCanvas</b>
object is not instantiated as an anonymous object. Rather, it is instantiated
as a named object so that a mouse listener object can be registered on
it later.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp;&nbsp; MyCanvas myCanvasObject = <b>new MyCanvas()</b>;
&nbsp;&nbsp;&nbsp;&nbsp; this.add(myCanvasObject,"Center");</pre></td></tr></table>
This is followed by some code that you have seen many times in the past
to add some buttons to the <b>Frame </b>object and make the composite of
all the objects visible. There is also some code to register a <b>WindowListener</b>
object to terminate the program when the user clicks the close button on
the <b>Frame</b> object. That code is not shown here.

<p>The next interesting code fragment instantiates and registers a Listener
object which will process mouse events to determine and display the coordinates
when the user presses the mouse button on the <b>MyCanvas </b>object.

<p>Note that the Listener object is instantiated anonymously and no reference
to the <b>MyCanvas </b>object is passed to the constructor for the <b>Listener
</b>object. Therefore, the listener object must identify the component
on which to display coordinate information from within its own code. We
will see later that the identification is based on the <b>MouseEvent</b>
object that is passed to the event listener when the event occurs.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; myCanvasObject.addMouseListener(new MouseProc());</pre></td></tr></table>
The final interesting code fragment is the definition of the listener class
that displays the coordinates of the mouse pointer when the left mouse
button is pressed on an object for which an object of the class is registered.

<p>This version uses the <b>getComponent() </b>method on the incoming <b>MouseEvent
</b>object to identify the component that was the <b>source</b> of the
event. This method returns a reference to an object of type <b>Component</b>
which must be downcast to type <b>MyCanvas</b> before it can be used to
access the instance variables of an object of type <b>MyCanvas</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>class MouseProc extends MouseAdapter{
&nbsp; //Override the mousePressed method
&nbsp; public void <b>mousePressed</b>(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Get x and y coordinates of the mouse pointer and
&nbsp;&nbsp;&nbsp; // store in the instance variables of the MyCanvas
&nbsp;&nbsp;&nbsp; // object.
&nbsp;&nbsp;&nbsp; <b>((MyCanvas)e.getComponent()).clickX = e.getX();
</b>&nbsp;&nbsp;&nbsp; ((MyCanvas)e.getComponent()).clickY = e.getY();
&nbsp;&nbsp;&nbsp; //display coordinate information&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; e.getComponent().<b>repaint</b>();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end mousePressed()
}//end class MouseProc</pre></td></tr></table>
The remaining code in this program is code that you have seen many times
in the past and therefore will not be highlighted in this section.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>
This section contains a complete listing of the program.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Canvas01.java Copyright 1997, R.G.Baldwin
Illustrates the use of the Canvas class.

Also illustrates the ability to instantiate listener
objects that can manipulate the source objects on which
they are registered without the requirement to pass
references to those source objects when the listener
objects are instantiated.

No parameterized constructors are used in the
instantiation of listener objects in this program.

When the program first appears on the screen, four non-
functional buttons and a green Canvas object appear in a
Frame object.&nbsp; The objects are separated by horizontal and
vertical gaps of thirty pixels.

The four buttons are placed at the borders of the Frame
object using the BorderLayout manager.&nbsp; The Canvas object
is placed in the Center of the Frame object.

When you click on the green Canvas object, the coordinates
of the mouse pointer are displayed.

Clicking in the gaps or clicking on the buttons has no
effect on the program.

Clicking on the close button on the Frame object&nbsp;
terminates the program and returns control to the&nbsp;
operating system.

These results were produced using JDK 1.1.3, running under&nbsp;
Windows 95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;

//=======================================================//

//Subclass Canvas in order to override the paint method
// and to make it green when instantiated.
class MyCanvas extends Canvas{
&nbsp; int clickX;
&nbsp; int clickY;
&nbsp;&nbsp;
&nbsp; public MyCanvas(){//constructor
&nbsp;&nbsp;&nbsp; this.setBackground(Color.green);
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; //Override the paint() method.
&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "" + clickX + ", " + clickY, clickX, clickY);
&nbsp; }//end paint()
}//end class MyCanvas
//=======================================================//

class Canvas01 extends Frame{//controlling class
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate an object of this type
&nbsp;&nbsp;&nbsp; new Canvas01();
&nbsp; }//end main&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; public Canvas01(){//constructor
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a border layout with gaps.
&nbsp;&nbsp;&nbsp; BorderLayout myLayout = new BorderLayout();
&nbsp;&nbsp;&nbsp; myLayout.setVgap(30);
&nbsp;&nbsp;&nbsp; myLayout.setHgap(30);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setLayout(myLayout);//Apply layout to the Frame
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setSize(300,300);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate a green customized Canvas object
&nbsp;&nbsp;&nbsp; MyCanvas myCanvasObject = new MyCanvas();
&nbsp;
&nbsp;&nbsp;&nbsp; //Add the MyCanvas object to the center of the&nbsp;
&nbsp;&nbsp;&nbsp; // Frame object.
&nbsp;&nbsp;&nbsp; this.add(myCanvasObject,"Center");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add four nonfunctional buttons to the borders
&nbsp;&nbsp;&nbsp; // of the Frame object
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.add(new Button("North"),"North");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.add(new Button("South"),"South");
&nbsp;&nbsp;&nbsp; this.add(new Button("East"),"East");
&nbsp;&nbsp;&nbsp; this.add(new Button("West"),"West");
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setVisible(true);//make it all visible
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes the&nbsp;
&nbsp;&nbsp;&nbsp; // Frame.
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; this.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // process mouse events to determine and display the&nbsp;
&nbsp;&nbsp;&nbsp; // coordinates when the user presses the mouse button
&nbsp;&nbsp;&nbsp; // on the MyCanvas object.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; // Note that the Listener object is instantiated
&nbsp;&nbsp;&nbsp; // anonymously and no reference to the MyCanvas object
&nbsp;&nbsp;&nbsp; // is passed to the constructor for the Listener&nbsp;
&nbsp;&nbsp;&nbsp; // object.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myCanvasObject.addMouseListener(new MouseProc());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class Canvas01 definition
//=======================================================//

//This listener class monitors for mouse presses and&nbsp;
// displays the coordinates of the mouse pointer when the&nbsp;
// mouse is pressed on the object for which it is
// registered.
class MouseProc extends MouseAdapter{
&nbsp; //Override the mousePressed method
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Get x and y coordinates of the mouse pointer and
&nbsp;&nbsp;&nbsp; // store in the instance variables of the MyCanvas
&nbsp;&nbsp;&nbsp; // object.&nbsp; Note the requirement to cast the component
&nbsp;&nbsp;&nbsp; // to the type of MyCanvas in order to access the&nbsp;
&nbsp;&nbsp;&nbsp; // instance variables.
&nbsp;&nbsp;&nbsp; ((MyCanvas)e.getComponent()).clickX = e.getX();
&nbsp;&nbsp;&nbsp; ((MyCanvas)e.getComponent()).clickY = e.getY();
&nbsp;&nbsp;&nbsp; //display coordinate information&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to terminate the program&nbsp;
// when the user closes the frame.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=======================================================//</pre></td></tr></table>
.
<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Without viewing the solution that follow, write a Java application
that meets the specifications given in the comments at the beginning of
the following program.

<p><font color="#0000ff"><font size=-1>A - See the specifications and the
solution below.</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg140.java Copyright 1997, R.G.Baldwin
Illustrates the use of the Canvas class <b>along with the
requirement to establish the size of a Canvas object
</b>for use with certain types of layout managers.

Also illustrates the ability to instantiate listener
objects that can manipulate the source objects on which
they are registered without the requirement to pass
references to those source objects when the listener
objects are instantiated.

No parameterized constructors are used in the
instantiation of listener objects in this program.

When the program first appears on the screen, two green&nbsp;
Canvas objects appear in a Frame object. The Frame object
is approximately 300 by 300 pixels in size.

One of the green Canvas objects is 100 pixels wide and 150
pixels in height.&nbsp; The other green Canvas object is 50
pixels wide and 150 pixels in height.&nbsp;

The green Canvas objects&nbsp; are separated by a horizontal gap
of 30 pixels when they are side-by-side and are separated
by a vertical gap of 30 pixels when they are arranged in
a column.

When you click on either of the green Canvas objects, the&nbsp;
coordinates of the mouse pointer are displayed near the
mouse pointer.

Clicking in the gaps between the Canvas objects, or&nbsp;
clicking in the other area outside the Canvas objects has
no effect on the program.

Clicking on the close button on the Frame object&nbsp;
terminates the program and returns control to the&nbsp;
operating system.

These results were produced using JDK 1.1.3, running under&nbsp;
Windows 95.
*/
//=======================================================//
import java.awt.*;
import java.awt.event.*;

//=======================================================//

//Subclass Canvas in order to override the paint method
// and to set the size and color of the Canvas object
// when it is instantiated.
class MyCanvas extends Canvas{
&nbsp; int clickX;
&nbsp; int clickY;
&nbsp;&nbsp;
&nbsp; public MyCanvas(int width, int height){//constructor
&nbsp;&nbsp;&nbsp; this.setBackground(Color.green);
&nbsp;&nbsp;&nbsp; <b>this.setSize(width,height);
</b>&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; //Override the paint() method to display coordinate data
&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; g.drawString(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "" + clickX + ", " + clickY, clickX, clickY);
&nbsp; }//end paint()
}//end class MyCanvas
//=======================================================//

class SampProg140 extends Frame{//controlling class
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate an object of this type
&nbsp;&nbsp;&nbsp; new SampProg140();
&nbsp; }//end main&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp; public SampProg140(){//constructor
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a flow layout with gaps.
&nbsp;&nbsp;&nbsp; <b>FlowLayout </b>myLayout = new FlowLayout();
&nbsp;&nbsp;&nbsp; myLayout.setVgap(30);
&nbsp;&nbsp;&nbsp; myLayout.setHgap(30);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setLayout(myLayout);//Apply layout to the Frame
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setSize(300,300);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate <b>two </b>green customized Canvas objects
&nbsp;&nbsp;&nbsp; MyCanvas oneCanvasObject = new MyCanvas(<b>100,150</b>);
&nbsp;&nbsp;&nbsp; MyCanvas anotherCanvasObject = new MyCanvas(<b>50,100</b>);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Add the MyCanvas objects to the Frame object.
&nbsp;&nbsp;&nbsp; this.add(oneCanvasObject);
&nbsp;&nbsp;&nbsp; this.add(anotherCanvasObject);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.setVisible(true);//make it all visible
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes the&nbsp;
&nbsp;&nbsp;&nbsp; // Frame.
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; this.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener objects which will&nbsp;
&nbsp;&nbsp;&nbsp; // process mouse events to determine and display the&nbsp;
&nbsp;&nbsp;&nbsp; // coordinates when the user presses the mouse button
&nbsp;&nbsp;&nbsp; // on <b>either </b>MyCanvas object.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; // Note that the Listener objects are instantiated
&nbsp;&nbsp;&nbsp; // anonymously and no reference to the MyCanvas object
&nbsp;&nbsp;&nbsp; // is passed to the constructors for the Listener&nbsp;
&nbsp;&nbsp;&nbsp; // objects.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; oneCanvasObject.<b>addMouseListener</b>(new MouseProc());&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; anotherCanvasObject.<b>addMouseListener</b>(new MouseProc());
&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class SampProg140 definition
//=======================================================//

//This listener class responds to mouse presses and&nbsp;
// displays the coordinates of the mouse pointer when the&nbsp;
// mouse is pressed on the object for which it is
// registered.
class MouseProc extends MouseAdapter{
&nbsp; //Override the mousePressed method
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Get x and y coordinates of the mouse pointer and
&nbsp;&nbsp;&nbsp; // store in the instance variables of the MyCanvas
&nbsp;&nbsp;&nbsp; // object.&nbsp; Note the requirement to cast the component
&nbsp;&nbsp;&nbsp; // to the type of MyCanvas in order to access the&nbsp;
&nbsp;&nbsp;&nbsp; // instance variables.
&nbsp;&nbsp;&nbsp; ((MyCanvas)e.getComponent()).clickX = e.getX();
&nbsp;&nbsp;&nbsp; ((MyCanvas)e.getComponent()).clickY = e.getY();
&nbsp;&nbsp;&nbsp; //display coordinate information&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to terminate the program&nbsp;
// when the user closes the frame.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=======================================================//</font></pre></td></tr></table>
-end-<!--end--></body></html>