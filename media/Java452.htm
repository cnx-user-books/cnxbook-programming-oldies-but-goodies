<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2 align="center">Using the Java 2D LookupOp Filter Class to Process Images</h2>
<i>Learn how to write programs that use the <b>LookupOp</b> image-filtering class of 
the Java 2D API for a variety of image-processing purposes.</i><b> </b>
<p><b>Published:</b>&nbsp; January 16, 2007<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 452</p>
<ul>
  <li> <a href="#Preface">Preface</a></li>
  <li> <a href="#General%20Background%20Information">General
Background Information</a></li>
  <li> <a href="#Preview">Preview</a></li>
  <li> <a href="#Discussion%20and%20Sample%20Programs">Discussion and
Sample Code</a></li>
	<ul><li> <a href="#The_Program_Named_ImgMod38">The Program Named ImgMod38</a></li>
		<li> <a href="#The_Program_Named_ImgMod39">The Program Named ImgMod39</a></li>
		<ul><li> <a href="#The_Color_Inversion_Page">The Color Inversion Page</a></li>
			<li> <a href="#The_Posterizing_Page">The Posterizing Page</a></li>
			<li> <a href="#The_Custom_Transforms_Page">The Custom Transforms Page</a></li></ul></ul>
  <li> <a href="#Run%20the%20program">Run the Programs</a></li>
  <li> <a href="#Summary">Summary</a></li>
  <li> <a href="#Whats%20Next">What's Next?</a></li>
	<li> <a href="#References">References</a></li>
  <li> <a href="#Complete%20Program%20Listings">Complete Program
Listings</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p> <font color="#FF0000"><b>One lesson in a series</b></font></p>
<p> In the earlier lesson entitled 
<a href="http://www.developer.com/java/other/article.php/3645761">A Framework for Experimenting with Java 
2D Image-Processing Filters</a>, I taught you a little about the image-filtering 
classes of the Java 2D API.&nbsp; I also taught you how to write a framework 
program that makes it easy to use those image-filtering classes to modify the 
pixels in an image and to display the modified image.</p>
<p> I told you that future lessons would teach you how to use the following 
image-filtering classes from the Java 2D <a name="FilterClassList">API</a>:</p>
<ul>
	<li><b>LookupOp</b> </li>
	<li><b>AffineTransformOp</b> </li>
	<li><b>BandCombineOp</b> </li>
	<li><b>ConvolveOp</b> </li>
	<li><b>RescaleOp</b> </li>
	<li><b>ColorConvertOp</b> </li>
</ul>
<p> In this lesson, I will keep that promise and teach you how to use the <b>
LookupOp</b> class for a variety of purposes.&nbsp; I will teach you how to use 
the other classes from the above list in future lessons.</p>
<p> <b><font color="#ff0000">Viewing tip</font></b> </p>
<p>You may find it useful to open another copy of this lesson in a
separate browser window.&nbsp; That will make it easier for you to
scroll back
and forth among the different listings and figures while you are
reading
about them.</p>
<p><b><font color="#ff0000">Supplementary material</font></b> </p>
<p>I recommend that you also study the other lessons in my extensive
collection of online Java tutorials.&nbsp; You will find those lessons
published
at <a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a
consolidated index of my Java tutorial lessons, and sometimes they are
difficult to locate there.&nbsp; You will find a consolidated index at <font
 color="#000000"> <a href="http://www.dickbaldwin.com/">www.DickBaldwin.com</a>.</font></p>
<p>I also recommend that you pay particular attention to the lessons listed in 
the <a href="#References">References</a> section of this document.
</p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General Background Information</a></font></h2>
<p><font color="#FF0000"><b>Constructing images</b></font></p>
<p>Before getting into the programming details, it may be useful for you to 
review the concept of how images are constructed, stored, transported, and 
rendered in Java <i>(and in most modern computers for that matter).</i></p>
<p>I provided a great deal of information on those topics in the earlier lesson 
entitled
<a href="http://www.developer.com/java/other/article.php/3403921#Background_Information">
Processing Image Pixels using Java, Getting Started</a>.&nbsp; Therefore, I won't 
repeat that information here.&nbsp; Rather, I will simply refer you back to the
<a href="http://www.developer.com/java/other/article.php/3403921#Background_Information">
earlier lesson</a>.</p>
<p><font color="#FF0000"><b>The framework program named ImgMod05</b></font></p>
<p>It will also be useful for you to understand the behavior of the framework 
program named <b>ImgMod05</b>.&nbsp; Therefore, I strongly recommend that you 
study the earlier lesson entitled 
<a href="http://www.developer.com/java/other/article.php/3645761">A Framework for Experimenting with Java 
2D Image-Processing Filters</a>.</p>
<p>However, if you don't have the time to do that, I can summarize that 
framework program as follows:</p>
<p><font color="#FF0000"><b>Purpose of ImgMod05</b></font></p>
<p>The purpose of <b>ImgMod05</b> is to make it easy for you to experiment with 
the modification of images using the image-filtering classes of the Java 2D API 
and to display the modified version of the image along with the original image.</p>
<p><font color="#ff0000"><b>The Replot button</b></font></p>
<p>The <b>ImgMod05</b> program GUI contains a <b>Replot</b> button <i>(as shown 
in <a href="#Figure_1">Figure 1</a>)</i>.&nbsp; At the 
beginning of the run, and each time thereafter that the <b>Replot</b> button is 
clicked:</p>
<ul>
	<li>The image-processing method belonging to an object of specified 
	image-processing class is invoked.</li>
	<li>The original image is passed to the image-processing method, which 
	returns a reference to a modified image.</li>
	<li>The resulting modified image is displayed along with the original image.</li>
	<li>The modified image is written into an output JPEG file named <b>junk.jpg</b>.</li>
</ul>
<p><font color="#ff0000"><b>Display of the images</b></font></p>
<p>When the <b>ImgMod05</b> program is started, the original image and the 
processed version of the image are displayed in a frame with the original image 
above the processed image <i>(as shown in <a href="#Figure_1">Figure 1</a>)</i>.&nbsp; The program attempts 
to set the size of the display so as to accommodate both images.&nbsp; If both images 
are not totally visible, the user can manually resize the display frame.</p>
<p><font color="#ff0000"><b>Input and output file format</b></font></p>
<p>The <b>ImgMod05</b> program will read gif and jpg input files and possibly 
some other input file types as well.&nbsp; The output file is always a JPEG file.</p>
<p><font color="#ff0000"><b>Typical usage</b></font></p>
<p>Enter the following at the command-line to run the <b>ImgMod05</b> program:</p>
<pre><b>java ImgMod05 ProcessingProgramName ImageFileName</b></pre>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>In this lesson, I will present and explain two different image-processing 
programs that are compatible with the framework program named <b>ImgMod05</b>.</p>
<p><font color="#FF0000"><b>The program named ImgMod38</b></font></p>
<p>The first program, named <b>ImgMod38</b>, is designed to show the <i>
essential requirements</i> of writing a program that runs under control of the 
framework program named <b>ImgMod05</b> and uses an image-filtering class of the 
Java 2D API to modify an image.</p>
<p><font color="#FF0000"><b>The program named ImgMod39</b></font></p>
<p>The second program, named <b>ImgMod39</b>, is designed to show how you can 
expand on those essential requirements to create a program that allows for user 
input and supports a great deal of experimentation.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Code</font></h2>
</center>
I will discuss the two programs in this lesson in fragments.&nbsp; A complete 
listing of <b>ImgMod38</b> is provided in <a href="#Listing_37">Listing 37</a> near the end of the lesson.&nbsp; 
A complete listing of <b>ImgMod39</b> is provided in <a href="#Listing_38">Listing 38</a> near the end of 
the lesson.<p>Complete listings of the framework program named <b>ImgMod05</b> 
and its required interface named <b>ImgIntfc05</b> were provided at the end of 
the earlier lesson entitled 
<a href="http://www.developer.com/java/other/article.php/3645761">A Framework for Experimenting with Java 2D 
Image-Processing Filters</a>.</p>
<h3><a name="The_Program_Named_ImgMod38">The Program Named ImgMod38</a></h3>
<p><font color="#FF0000"><b>Purpose</b></font></p>
<p>

<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Secondary purpose</b><br />
  A secondary purpose of this program is to provide program comments 
	that will be referred to by future programs to avoid repetition of those 
	comments.
</td></tr></table>
</td>
</tr>
</table>


The purpose of this program is to provide a simple example of an 
image-processing class that is compatible with the use of the framework program 
named <b>ImgMod05</b>, and which illustrates a single usage of the <b>LookupOp</b> 
image-filtering class from the Java 2D API.</p>
<p><font color="#FF0000"><b>Must implement the interface named ImgIntfc05</b></font></p>
<p>A class that is compatible with the framework program named <b>ImgMod05</b> is required to implement the 
interface named <b>ImgIntfc05</b>.&nbsp; This, in turn, requires the class to 
define the method named <b>processImg</b>, which receives one parameter of type
<b>BufferedImage</b> and returns a reference of type <b>BufferedImage</b>.</p>
<p>The required signature for the <b>processImg</b> method is:</p>
<p><pre><b>public BufferedImage processImg(BufferedImage input);</b></pre></p>
<p>The <b>processImg</b> method receives a reference to a <b>BufferedImage</b> object 
containing the image that is to be processed.&nbsp; The <b>processImg</b> method must return a 
reference to a <b>BufferedImage</b> object containing the processed image.</p>
<p><font color="#FF0000"><b>A color-inverter method</b></font></p>
<p>In this 
example, the method named <b>processImg</b> is a color inverter method.&nbsp; 
<a href="#Figure_1">Figure 1</a> shows a sample of the output produced by this program when it is run 
under control of the framework program named <b><a name="Figure_1">ImgMod05</a></b>.</p>






<p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java452a01.jpg" width="211" height="455"><br></pre>
      <pre><b><a href="#Figure_1">Figure 1</a></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Inverting the colors</b></font></p>
<p>The method named 
<b>processImg</b> as defined in this class receives an incoming reference to an image 
as a parameter of type <b>BufferedImage</b>.&nbsp; The method returns a reference to an image 
as type <b>BufferedImage</b> where all of the color values in the pixels have been 
inverted by subtracting the color values from 255.</p>
<p><font color="#FF0000"><b>The type of the image</b></font></p>
<p>The method has been 
demonstrated to work properly only for the case where the incoming <b>BufferedImage</b> 
object was constructed for image type <b>BufferedImage.TYPE_INT_RGB</b>.&nbsp; However, it may 
work properly for other image types as well.</p>
<p><font color="#FF0000"><b><a name="No_constructor_parameters_are_allowed">No constructor 
parameters are allowed</a></b></font></p>
<p>Note that this class does not define 
a constructor.&nbsp; However, if it did define a constructor, that constructor would 
not be allowed to receive parameters.&nbsp; This is because the class named <b>ImgMod05</b> 
instantiates an object of this class by invoking the <b>newInstance</b> method of the 
class named 
<b>Class</b> using the name of this class as a <b>String</b>.&nbsp; That process does not allow for constructor parameters for the class 
being instantiated.</p>
<p><font color="#FF0000"><b>Program output</b></font></p>
<p>The framework program named <b>ImgMod05</b> displays the original and the 
modified images in the format shown in <a href="#Figure_1">Figure 1</a>, with the original image at the 
top and the modified image at the bottom.</p>
<p>The program named<i> </i><b>ImgMod05</b><i> </i>also writes the modified image into an output file in 
JPEG format.&nbsp; The name of the output file is <b>junk.jpg</b> and it is written into the 
current directory.</p>
<p><font color="#FF0000"><b>The Replot button</b></font></p>
<p>As shown in <a href="#Figure_1">Figure 1</a>, the GUI for the framework program named <b>ImgMod05</b> contains 
a <b>Replot</b> button.&nbsp; At the beginning of the run, and each time thereafter that the 
<b>Replot</b> button is clicked:</p>
<ul>
	<li>The image processing method belonging to an object of the specified image 
processing class is invoked.</li>
	<li>The resulting modified image is displayed along 
with the original image.</li>
	<li>The modified image is written into the output JPEG file named <b>
	junk.jpg</b>.</li>
</ul>
<p><font color="#FF0000"><b>An image-processing program GUI</b></font></p>
<p>

<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>ImgMod39</b><br />
  The use of an image-processing program GUI will be illustrated by the 
	program named <b>ImgMod39</b>.
</td></tr></table>
</td>
</tr>
</table>

Image processing programs such as this one may provide a 
GUI for data input making it possible for the user to modify the behavior of the 
image processing method each time the <b>Replot</b> button is clicked.&nbsp; However, no such 
GUI is provided by this program and clicking the <b>Replot</b> button is of no 
consequence.</p>
<p><font color="#FF0000"><b>File formats</b></font></p>
<p>The framework program named <b>ImgMod05</b> reads gif and jpg input files and 
possibly some other input file types as well.&nbsp; The output file is always a JPEG 
file.</p>
<p>If the 
program is unable to load the image file within ten seconds, it will abort with 
an error message.</p>
<p><font color="#FF0000"><b>Usage</b></font></p>
<p>Enter the following at the command line to run this program:</p>
<p><pre><b>java ImgMod05 ImgMod38 ImageFileName</b></pre></p>
<p>The image file must be provided by the 
user.&nbsp; However, it doesn't have to be in the current directory if a path to the 
file is included along with the file name on the command line.</p>
<p><font color="#FF0000"><b>The size of the display frame</b></font></p>
<p>When the program 
is started, the original image and the processed version of the image are 
displayed in a frame with the original image above the processed image as shown 
in <a href="#Figure_1">Figure 1</a>.</p>
<p>The framework 
program named <b>ImgMod05</b> attempts to adjust the size of the display frame to 
accommodate both images.&nbsp; However, if the processed image doesn't fit in the display, the 
user can manually resize the display frame in order to view both images.</p>
<p><font color="#FF0000"><b>Program testing</b></font></p>
<p>This program was tested using J2SE5.0 under WinXP.</p>
<p><font color="#FF0000"><b>The class named ImgMod38</b></font></p>
<p>This program consists of the single class named <b>ImgMod38</b>.&nbsp; That 
class begins in <a name="Listing_1" href="#Listing_1">Listing 1</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>class <b>ImgMod38</b> implements <b>ImgIntfc05</b>{

  public BufferedImage <b>processImg</b>(BufferedImage theImage){<br><br><b><font face="Courier New,Courier"><a href="#Listing_1">Listing 1</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As shown in <a href="#Listing_1">Listing 1</a>, the class implements the required interface named <b>
ImgIntfc05</b>.&nbsp; This in turn requires the class to define the method named
<b>processImg</b>.</p>
<p>The beginning of the required method definition also begins in <a href="#Listing_1">Listing 1</a>.</p>
<p><font color="#FF0000"><b>A lookup table is required</b></font></p>
<p>This class uses the <b>LookupOp</b> class from the Java 2D API to invert all of the color values in the pixels.&nbsp;
<i>(The alpha value belonging to the pixel is not modified.)</i></p>
<p>The <b>filter</b> method that is later invoked on an object of the <b>
LookupOp</b> class to modify the image uses a color value from a pixel as an 
ordinal index into a lookup table.&nbsp; It replaces the color value in the pixel 
with the value stored in the lookup table at that index.&nbsp; Thus, you can modify 
the color values in the pixels using just about any substitution algorithm that 
you can devise.</p>
<p><font color="#FF0000"><b>Constructing the lookup table</b></font></p>
<p>The lookup table can be constructed as an object of either of the following 
classes, both of which are subclasses of the abstract <b>LookupTable</b> class:</p>
<ul>
	<li><b>ByteLookupTable</b></li>
	<li><b>ShortLookupTable</b></li>
</ul>
<p>The examples in this lesson will use lookup tables constructed from the <b>
ShortLookupTable</b> class.</p>
<p><font color="#FF0000"><b>One or more substitution arrays can be used</b></font></p>
<p>The <b>LookupTable</b> object can be constructed from one or more data arrays 
containing substitution values.&nbsp; If a single substitution array is used to 
construct the lookup table, that substitution array is applied to each of the 
red, green, and blue color bands.&nbsp; If three different substitution arrays 
are used to construct the lookup table, different substitution arrays are 
applied to each of the three color bands.&nbsp; This makes it possible to process 
the three color bands in different ways.</p>
<p>This program uses a single array to construct the lookup table.&nbsp; The use 
of three different arrays to construct the lookup table will be illustrated 
later in the program named <b>ImgMod39</b>.</p>
<p><font color="#FF0000"><b>Prepare the data for the lookup table</b></font></p>
<p><a href="#Listing_2">Listing 2</a> creates a single data array of type <b>short</b>, containing 256 
elements, where the value of each element is equal to 255 minus the element 
index.&nbsp; This is the basis of the color inversion algorithm illustrated by 
<a href="#Figure_1" name="Listing_2">Figure 1</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    short[] lookupData = new short[256];

    for (int cnt = 0; cnt &lt; 256; cnt++){
      lookupData[cnt] = (short)(255-cnt);
    }//end for loop<br><br><b><font face="Courier New,Courier"><a href="#Listing_2">Listing 2</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Create the lookup table</b></font></p>
<p><a href="#Listing_3">Listing 3</a> instantiates a new object of the <b>ShortLookupTable</b> class, 
passing a reference to the substitution array object as the second parameter to 
the constructor for the <a name="Listing_3">class</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    ShortLookupTable lookupTable = 
                        new ShortLookupTable(0,lookupData);<br><br><b><font face="Courier New,Courier"><a href="#Listing_3">Listing 3</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Two overloaded constructors available</b></font></p>
<p>
<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>The other overloaded constructor</b><br />
  The other overloaded version of the constructor will be used in the 
	program named <b>ImgMod39</b> later in this lesson.</td></tr></table>
</td>
</tr>
</table>

As of the date of this writing, there are two overloaded constructors for the
<b>ShortLookupTable</b> class.&nbsp; The version used in <a href="#Listing_3">Listing 3</a> is the 
version that should be used when the values in a single substitution array are 
to be applied to the pixel color values in all three of the red, green, and blue 
color bands.</p>
<p><font color="#FF0000"><b>The first parameter to the constructor</b></font></p>
<p>According to Sun, the first constructor parameter is an offset, the value of 
which is <i>&quot;subtracted from the input values before indexing into the array.&quot;</i>&nbsp; 
In other words, this makes it possible to specify a set of 256 consecutive 
elements in the substitution array when the <b>length</b> of the array is 
greater than 256.&nbsp; In this program, the <b>length</b> of the 
substitution array is 256 and the offset value is 0.</p>
<p><font color="#FF0000"><b>Create the filter object</b></font></p>
<p><a href="#Listing_4">Listing 4</a> instantiates a new object of the <b>LookupOp</b> class and saves 
that object's reference in a variable of type <b><a name="Listing_4">BufferedImageOp</a></b>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    BufferedImageOp thresholdOp = 
                            new LookupOp(lookupTable,null);<br><br><b><font face="Courier New,Courier"><a href="#Listing_4">Listing 4</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The BufferedImageOp interface</b></font></p>
<p>
<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Some other differences</b><br />
  The <b>BandCombineOp</b> class differs from the other image-filtering 
	classes in some other ways as well, which I will describe in a future lesson 
	that deals specifically with that class.</td></tr></table>
</td>
</tr>
</table>

<b>BufferedImageOp</b> is an interface that is implemented by the <b>LookupOp</b> 
class, and by all of the image-filtering classes in the earlier
<a href="#FilterClassList">list</a> except for the <b>BandCombineOp</b> class.</p>
<p><font color="#FF0000"><b>The LookupOp constructor</b></font></p>
<p>
<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>A RenderingHints object</b><br />
  Briefly, a <b>RenderingHints</b> object makes it possible for you to 
	have some control over the quality of the final rendering of the image by 
	controlling properties such as
	<a href="http://www.webstyleguide.com/graphics/dither.html">dithering</a> 
	and <a href="http://www.widearea.co.uk/designer/anti.html">anti-aliasing</a>.</td></tr></table>
</td>
</tr>
</table>

As of the date of this writing, there is only one constructor for the <b>
LookupOp</b> class.&nbsp; The first parameter to the constructor is a reference 
to the lookup table object that was created in <a href="#Listing_3">Listing 3</a>.&nbsp; The second 
parameter is an optional reference to a <b>RenderingHints</b> object.</p>
<p>Note that I elected not use a <b>RenderingHints</b> object for the programs 
in this lesson.</p>
<p><font color="#FF0000"><b>Apply the filter to the incoming image</b></font></p>
<p><a href="#Listing_5">Listing 5</a> invokes the <b>filter</b> method of the <b>LookupOp</b> class to filter the incoming image and 
to return a reference to the filtered image object as type <b>
<a name="Listing_5">BufferedImage</a></b>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    return thresholdOp.filter(theImage, null);
  }//end processImg

}//end class ImgMod38<br><br><b><font face="Courier New,Courier"><a href="#Listing_5">Listing 5</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Two overloaded versions of the filter method</b></font></p>
<p>As of the date of this writing, there are two overloaded versions of the <b>
filter</b> method defined for the <b>LookupOp</b> class.</p>
<p>The overloaded version used in <a href="#Listing_5">Listing 5</a> accepts a reference to the incoming 
image as type <b>BufferedImage</b> and returns a reference to the filtered image 
as type <b>BufferedImage</b>.&nbsp; The other version accepts a reference to the 
incoming image as type <b>Raster</b>, and returns a reference to the filtered 
image as type <b>WritableRaster</b>.</p>
<p><b><font color="#FF0000">The second parameter</font></b></p>
<p>The second parameter to the <b>filter</b> method in <a href="#Listing_5">Listing 5</a> can optionally 
specify an existing <b>BufferedImage</b> object to serve as a destination for 
the processed image, in addition to returning a reference to the processed image 
object.</p>
<p><font color="#FF0000"><b>Will defer explanation of the Raster class</b></font></p>
<p>With the exception of the <b>BandCombineOp</b> class, all of the classes in 
the earlier <a href="#FilterClassList">list</a> can operate on the image either 
as type <b>BufferedImage</b> or as type <b>Raster</b>.&nbsp; However, the <b>
BandCombineOp</b> class can only operate on images as type <b>Raster</b>.&nbsp; 
Therefore, I will defer a discussion of the use of the <b>Raster</b> class until 
a future lesson in which I will explain the use of the <b>BandCombineOp</b> 
class.</p>
<p><font color="#FF0000"><b>The end of the program named ImgMod38</b></font></p>
<p><a href="#Listing_5">Listing 5</a> signals the end of the <b>processImg</b> method as well as the end 
of the program named <b>ImgMod38</b>.&nbsp; Hopefully, this simple program has taught you the essentials of using the framework program named <b>ImgMod05</b>, 
along with the <b>LookupOp</b> image filtering class of the Java 2D API for the 
filtering of images.</p>
<p>As you can see, when there is no need to provide for a variation in 
image-processing parameters, it is a simple task to write an 
<i>ImgMod05-compatible</i> program to implement a color substitution algorithm.&nbsp; 
As an upgrade, the program named <b>ImgMod39</b> will provide for user-defined 
image-processing parameters.</p>
<h3><a name="The_Program_Named_ImgMod39">The Program Named ImgMod39</a></h3>
<p>Image-processing programs such as this one may provide a GUI for 
user data input making it possible for the user to modify the behavior of the 
image-processing method each time the <b>Replot</b> button is clicked.&nbsp; Such a GUI is 
provided for this program.</p>
<p><font color="#FF0000"><b>Purpose of the program</b></font></p>
<p>The purpose of this program is to illustrate a variety of different uses for 
the <b>LookupOp</b> class of the Java 2D API.&nbsp; Three such uses are illustrated 
by the three tabbed pages in the program GUI shown in <a href="#Figure_2">Figure 2</a>, <a href="#Figure_3">Figure 3</a>, and <a href="#Figure_4">Figure 4</a>.</p>
<p><font color="#FF0000"><b>Color inversion</b></font></p>
<p>The GUI for this program is constructed using a <b>JTabbedPane</b> object.&nbsp; 
The page shown in <a href="#Figure_2">Figure 2</a> makes it possible for the user to invert the colors 
on none, or on any combination of the red, green, and blue color bands of the 
input 
<a name="Figure_2">image</a>.</p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java452b01.jpg" width="482" height="301"><br></pre>
      <pre><b><a href="#Figure_2">Figure 2</a></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Posterizing</b></font></p>
<p>The page shown in <a href="#Figure_3">Figure 3</a> makes it possible for the user to apply a process 
to the image commonly known as <i>posterizing</i> the image.&nbsp; I will 
explain what is meant by <i>posterizing</i> in conjunction with the explanation 
of the program later in this <a name="Figure_3">lesson</a>.</p>
<p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java452b02.jpg" width="482" height="301"><br></pre>
      <pre><b><a href="#Figure_3">Figure 3</a></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Custom transforms</b></font></p>
<p>The page shown in <a href="#Figure_4">Figure 4</a> makes it possible for the user to apply either of 
two different custom transforms to the image.&nbsp; I will explain the custom transforms 
in conjunction with the explanation of the program <a name="Figure_4">later</a>.</p>

<p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java452b03.jpg" width="482" height="301"><br></pre>
      <pre><b><a href="#Figure_4">Figure 4</a></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Three substitution arrays are used</b></font></p>
<p>In each of the three cases illustrated by <a href="#Figure_2">Figure 2</a> 
through <a href="#Figure_4">Figure 4</a>, the program uses three different substitution arrays to process the red, green, 
and blue color bands individually or in combination <i>(as opposed to the use of 
a single substitution array in the case of the earlier program named <b>
ImgMod38</b>)</i>.</p>
<p><font color="#FF0000"><b>The procedure for running the program</b></font></p>
<p>The general comments provided for the program named <b>ImgMod38</b> apply to 
this program also.&nbsp; Enter the following at the command line to run 
this program:</p>
<p><pre><b>java ImgMod05 ImgMod39 ImageFileName</b></pre></p>
<p>If the program is unable to load 
the image file within ten seconds, it will abort with an error message.</p>
<p><font color="#FF0000"><b>A JTabbedPane object</b></font></p>
<p>As mentioned earlier, this program creates a GUI consisting of a <b>
JTabbedPane</b> object containing three pages.&nbsp; As shown in <a href="#Figure_2">Figure 2</a>, the tabs 
on the pages are labeled:</p>
<ul>
	<li>Color Inversion</li>
	<li>Posterizing</li>
	<li>Custom Transforms</li>
</ul>
<p>Each page 
in the tabbed pane contains a set of controls that make it possible to process 
an image in a way 
that illustrates the image-processing concepts indicated by the labels on the tabs.&nbsp; Processing 
details for each page will be provided in the discussion of the code later.</p>
<p><font color="#FF0000"><b>A complete program listing</b></font></p>
<p>A complete listing of the program is provided in <a href="#Listing_38">Listing 38</a> near the end of 
the lesson.&nbsp; The program was tested using J2SE 5.0 under 
WinXP.</p>
<p><font color="#FF0000"><b>The ImgMod39 class</b></font></p>
<p>The class definition for the <b>ImgMod39</b> class begins in <a href="#Listing_6">Listing 6</a>.&nbsp; 
The class extends the <b>Frame</b> class, making an object of the class eligible 
to serve as 
its own GUI.&nbsp; The class also implements the <b>ImgIntfc05</b> interface 
making it eligible for being executed under control of the program named <b>
<a name="Listing_6">ImgMod05</a>.</b></p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>class ImgMod39 extends Frame implements ImgIntfc05{

  JTabbedPane tabbedPane = new JTabbedPane();<br><br><b><font face="Courier New,Courier"><a href="#Listing_6">Listing 6</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_6">Listing 6</a> also instantiates an object of the <b>JTabbedPane</b> class, which 
serves as the primary GUI as shown in <a href="#Figure_2">Figure 2</a>.</p>
<p><font color="#FF0000"><b>Components for the <i>Color Inversion</i> page</b></font></p>
<p><a href="#Listing_7">Listing 7</a> declares and initializes some of the components required to 
construct the <i>Color Inversion</i> page shown in <a href="#Figure_2">Figure 2</a>.&nbsp; Those components that require local access only are defined locally 
where they are needed.&nbsp; The others are defined in <a href="#Listing_7">Listing 7</a> as instance 
<a name="Listing_7">variables</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  Panel page00 = new Panel();
  Checkbox page00RedCkBx = new Checkbox("Red");
  Checkbox page00GreenCkBx = new Checkbox("Green");
  Checkbox page00BlueCkBx = new Checkbox("Blue");<br><br><b><font face="Courier New,Courier"><a href="#Listing_7">Listing 7</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Components for the <i>Posterizing</i> page</b></font></p>
<p><a href="#Listing_8">Listing 8</a> declares and initializes some of the components needed to construct the
<i>Posterizing</i> page shown in <a href="#Figure_3">Figure 3</a>.&nbsp; Once again, components that require local access only are defined locally 
where they are needed.&nbsp; Others are defined in <a href="#Listing_8">Listing 8</a> as instance 
<a name="Listing_8">variables</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  Panel page01 = new Panel();
  TextField page01TextField = new TextField("128",6);
  Checkbox page01RedCkBx = new Checkbox("Red");
  Checkbox page01GreenCkBx = new Checkbox("Green");
  Checkbox page01BlueCkBx = new Checkbox("Blue");<br><br><b><font face="Courier New,Courier"><a href="#Listing_8">Listing 8</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Components for the <i>Custom Transforms</i> page</b></font></p>
<p>Finally, <a href="#Listing_9">Listing 9</a> declares and initializes some of the components needed to construct the
<i>Custom Transforms</i> page shown in <a href="#Figure_4">Figure 4</a>.&nbsp; As before, components that require local access only are defined locally 
close to where they are needed.&nbsp; Others are defined in <a href="#Listing_9">Listing 9</a> as instance 
<a name="Listing_9">variables</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  Panel page02 = new Panel();
  TextField page02TextField = new TextField("1.0",6);
  Checkbox page02RedCkBx = new Checkbox("Red");
  Checkbox page02GreenCkBx = new Checkbox("Green");
  Checkbox page02BlueCkBx = new Checkbox("Blue");
  CheckboxGroup group = new CheckboxGroup();
  Checkbox page02LogRadioButton = 
                  new Checkbox("Log Transform",group,true);
  Checkbox page02LinearRadioButton = 
              new Checkbox("Linear Transform",group,false);<br><br><b><font face="Courier New,Courier"><a href="#Listing_9">Listing 9</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The constructor</b></font></p>
<p><a href="#Listing_10">Listing 10</a> shows the constructor for the <b>ImgMod39</b> class.&nbsp; Recall 
that this constructor is not allowed to receive parameters because of the way 
that an object of the class is <a href="#No_constructor_parameters_are_allowed">instantiated</a>
<i>(using the <b>newInstance</b> method of the class named <b>Class</b>)</i>.</p>
<p><font color="#FF0000"><b>Sub-divide the construction process</b></font></p>
<p><a href="#Listing_10">Listing 10</a> contains the primary constructor.&nbsp; The code in <a href="#Listing_10">Listing 10</a> calls other methods to 
construct the individual GUI pages shown in <a href="#Figure_2">Figure 2</a> through <a href="#Figure_4">Figure 4</a>.&nbsp; 
This serves to separate the construction of the GUI into easily understandable units.&nbsp; Each method that it calls constructs one page in the tabbed 
<a name="Listing_10">pane</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  <b>ImgMod39</b>(){//constructor
  
    <b>constructPage00</b>();
    tabbedPane.add(page00);//Add page to the tabbedPane.
    
    <b>constructPage01</b>();
    tabbedPane.add(page01);//Add page to the tabbedPane.
    
    <b>constructPage02</b>();
    tabbedPane.add(page02);//Add page to the tabbedPane.
    
    add(tabbedPane);//Add tabbedPane to the Frame.

    setTitle("Copyright 2006, R.G.Baldwin");
    setBounds(555,0,470,300);
    setVisible(true);

    //Define a WindowListener to terminate the program.
    addWindowListener(
      new WindowAdapter(){
        public void windowClosing(WindowEvent e){
          System.exit(1);
        }//end windowClosing
      }//end windowAdapter
    );//end addWindowListener
  }//end constructor<br><br><b><font face="Courier New,Courier"><a href="#Listing_10">Listing 10</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in <a href="#Listing_10">Listing 10</a> is straightforward and shouldn't require further 
explanation.</p>
<h4><a name="The_Color_Inversion_Page">The Color Inversion Page</a></h4>
<p><font color="#FF0000"><b>Construct the Color Inversion page</b></font></p>
<p><a href="#Listing_11">Listing 11</a> shows the beginning of the method named <b>constructPage00</b>, 
which is used to construct the <i>Color Inversion</i> page shown in <a href="#Figure_2">Figure 2</a>.&nbsp; 
This method is called from the primary constructor shown in <a name="Listing_11"><a href="#Listing_10">Listing 10</a></a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  void constructPage00(){
    page00.<b>setName</b>("Color Inversion");//Label on the tab.
    page00.<b>setLayout</b>(new BorderLayout());<br><br><b><font face="Courier New,Courier"><a href="#Listing_11">Listing 11</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The label on the tab</b></font></p>
<p><a href="#Listing_11">Listing 11</a> sets the <b><i>name</i></b> property of the page <i>(which is 
actually a <b>Panel</b> object)</i> to the <b>String</b> value <i>Color 
Inversion</i>.&nbsp; This property is used by the system to establish the label 
that appears on the tab in <a href="#Figure_2">Figure 2</a>.</p>
<p><font color="#FF0000"><b>The layout manager</b></font></p>
<p><a href="#Listing_11">Listing 11</a> also sets the <i><b>layout</b></i> property for the page to <b>
BorderLayout</b>.&nbsp; The <b>TextArea</b> object shown in <a href="#Figure_2">Figure 2</a> will be 
placed in the <b>BorderLayout.NORTH</b> location on the page.&nbsp; The three <b>
Checkbox</b> objects will be placed in another <b>Panel</b> object, which in 
turn will be placed in the <b>BorderLayout.CENTER</b> location on the page.</p>
<p><font color="#FF0000"><b>Create and place the TextArea object</b></font></p>
<p><a href="#Listing_12">Listing 12</a> creates and populates a disabled <b>TextArea</b> object containing 
usage instructions and adds it to the page.&nbsp; You can view this component in 
<a href="#Figure_2" name="Listing_12">Figure 2</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    String text ="COLOR INVERSION USING MULTIPLE ARRAYS\n"
      + "This page illustrates the use of the LookupOp "
      + "filter class for multiple lookup arrays.  By "
      + "checking the appropriate checkboxes below, you "
      + "can cause the program to invert the colors on "
      + "none, or on any combination of color bands.";
      
    //Note:  The number of columns specified for the
    // following TextArea is immaterial because the
    // TextArea object is placed in the NORTH location of
    // a BorderLayout.
    TextArea textArea = new TextArea(text,4,1,
                                 TextArea.SCROLLBARS_NONE);
    page00.add(textArea,BorderLayout.NORTH);
    textArea.setEnabled(false);<br><br><b><font face="Courier New,Courier"><a href="#Listing_12">Listing 12</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in <a href="#Listing_12">Listing 12</a> is straightforward and shouldn't require further 
explanation.</p>
<p><font color="#FF0000"><b>Construct the control panel</b></font></p>
<p><a href="#Listing_13">Listing 13</a> constructs a control panel containing the three <b>Checkbox</b> 
objects and adds it to the <a name="Listing_13">page</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    Panel page00ControlPanel = new Panel();
    page00ControlPanel.add(page00RedCkBx);
    page00ControlPanel.add(page00GreenCkBx);
    page00ControlPanel.add(page00BlueCkBx);
    page00.add(page00ControlPanel,BorderLayout.CENTER);
  }//end constructPage00<br><br><b><font face="Courier New,Courier"><a href="#Listing_13">Listing 13</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_13">Listing 13</a> also signals the end of the method named <b>constructPage00</b>.</p>
<p><font color="#FF0000"><b>An aside - The processImg method</b></font></p>
<p>Lest we forget, in order to be compatible with the framework program named <b>
ImgMod05</b>, this class must define a method named <b>processImg</b> with a 
signature matching that given in the interface named <b>ImgIntfc05</b>.&nbsp; 
This method is called by the framework program named <b>ImgMod05</b> in order to 
process the image.</p>
<p>The <b>processImg</b> method is shown in its entirety in <a href="#Listing_14">Listing 14</a>.&nbsp; It 
receives a reference to an input image encapsulated in an object of type <b>
BufferedImage</b> and returns a reference to a modified version of the image encapsulated in another object 
of type <b><a name="Listing_14">BufferedImage</a></b>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  public BufferedImage processImg(BufferedImage theImage){
    
    BufferedImage outputImage = null;
    
    //Process the page in the tabbed pane that has been
    // selected by the user.
    switch(tabbedPane.getSelectedIndex()){
      case 0:outputImage = processPage00(theImage);
             break;
      case 1:outputImage = processPage01(theImage);
             break;
      case 2:outputImage = processPage02(theImage);
             break;
    }//end switch

    return outputImage;
  }//end processImg<br><br><b><font face="Courier New,Courier"><a href="#Listing_14">Listing 14</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The switch statement</b></font></p>
<p>The most interesting thing about <a href="#Listing_14">Listing 14</a> is the use of a <b>switch</b> 
statement, in conjunction with the <b>getSelectedIndex</b> method of the <b>
JTabbedPane</b> class, to determine which page in <a href="#Figure_2">Figure 2</a> has been selected by 
the user.</p>
<p>The return value from the <b>getSelectedIndex</b> method is 0 if the 
user has selected the leftmost tab <i>(the Color Inversion page</i>) in
<a href="#Figure_2">Figure 2</a>.<i>&nbsp; </i>The return value increases by 1 
to indicate the selection of each successive tab going from left to right in <a href="#Figure_2">Figure 2</a>.&nbsp; 
Depending on the value of the returned index value, the <b>switch</b> statement 
causes one of the following three methods to be invoked to process the image:</p>
<ul>
	<li>processPage00</li>
	<li>processPage01</li>
	<li>processPage02</li>
</ul>
<p><font color="#FF0000"><b>Returning the processed image</b></font></p>
<p>In each case, the reference to the modified image that is returned by the 
image-processing method is stored in the variable named <b>outputImage</b>.&nbsp; 
That reference is then returned to the framework program named <b>ImgMod05</b> 
as the return value from the method named <b>processImg</b>.</p>
<p><font color="#FF0000"><b>The processPage00 method</b></font></p>
<p>
<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>The processPage00 method</b><br />

The method named <b>processPage00 </b> is also called as the default image-processing method at startup.</td></tr></table>
</td>
</tr>
</table>

The method named <b>processPage00</b> begins in <a href="#Listing_15">Listing 15</a>.&nbsp; This method 
is called to process the image whenever the user selects the <i>Color Inversion</i> 
page in <a href="#Figure_2">Figure 2</a> and then clicks the <b>Replot</b> button in <a href="#Figure_1">Figure 1</a>.</p>
<p>This method processes the image according to the check boxes that have been 
checked by the user in <a href="#Figure_2">Figure 2</a>.&nbsp; The method uses the <b>LookupOp</b> image-filtering class to process the image using lookup data from three separate arrays, one each for the red, green, and blue color bands.</p>
<p>This method performs color inversion as illustrated in <a href="#Figure_1">Figure 1</a>.&nbsp; 
<i>(The effect of color inversion is to produce an output in which the image is similar to the negative of a color photograph.)</i></p>
<p><font color="#FF0000"><b>Why invert?</b></font></p>
<p>I explained in the earlier lesson entitled 
<a href="http://www.developer.com/java/other/article.php/3645761">A Framework for Experimenting 
with Java 2D Image-Processing Filters</a> that color inversion has certain 
properties that make it useful for a variety of purposes.&nbsp; One of those uses is 
changing the colors in an image that has been <i>selected</i> during an editing 
process.</p>
<p>For example, <a href="#Figure_5">Figure 5</a> below shows a cropped screen shot taken from the 
WYSIWYG HTML editor that I am using to write this lesson with the image in 
<a href="#Figure_1">Figure 1</a> above having been <i><a name="Figure_5">selected</a> </i>
in the editor.&nbsp; <i>(Selection of the image for editing caused the colors in 
the image to change.)</i></p>
<p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java452c01.jpg" width="245" height="527"><br></pre>
      <pre><b><a href="#Figure_5">Figure 5</a></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The colors are inverted</b></font></p>
<p>If you compare <a href="#Figure_5">Figure 5</a> with <a href="#Figure_1">Figure 1</a>, you will see that <i>selection</i> of 
the image in <a href="#Figure_1">Figure 1</a> caused all of the colors to be inverted.&nbsp; As a 
result, the top image in <a href="#Figure_1">Figure 1</a> looks like the bottom image in <a href="#Figure_5">Figure 5</a>, and 
the top image in <a href="#Figure_5">Figure 5</a> looks like the bottom image in <a href="#Figure_1">Figure 1</a>.</p>

<p><font color="#FF0000"><b>Enough talk, let's see some code</b></font></p>
<p>The method named <b>processPage00</b> begins in <a href="#Listing_15">Listing 15</a>.&nbsp; As you can 
see, the method receives an incoming parameter referring to the input image 
object and returns a reference to the processed 
<a name="Listing_15">image</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>
  BufferedImage processPage00(BufferedImage theImage){

    short[] red = null;
    short[] green = null;
    short[] blue = null;<br><br><b><font face="Courier New,Courier"><a href="#Listing_15">Listing 15</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_15">Listing 15</a> declares references to three one-dimensional array objects of type
<b>short[]</b> that will be populated with data that is used later to populate the lookup table.</p>
<p><font color="#FF0000"><b>Create a <i>straight</i> array object and an <i>
inverting</i> array object</b></font></p>
<p><a href="#Listing_16">Listing 16</a> creates and populates two one-dimensional array objects of type<b> 
short[]</b>.&nbsp;&nbsp; One of the array objects <i>(noInvert)</i> is populated 
with data values that will simply reproduce the colors in the image being 
processed.&nbsp; The other array object <i>(invert)</i> is populated with data 
values that will invert the colors in the image being <a name="Listing_16">processed</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    short[] noInvert = new short[256];
    short[] invert = new short[256];
    for(int cnt = 0;cnt &lt; 256;cnt++){
      invert[cnt] = (short)(255 - cnt);//inverted data
      noInvert[cnt] = (short)cnt;//straight lookup data
    }//end for loop

  }//end processPage00<br><br><b><font face="Courier New,Courier"><a href="#Listing_16">Listing 16</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Establish the default case of no color inversion</b></font></p>
<p><a href="#Listing_17">Listing 17</a> points the three references declared in <a href="#Listing_15">Listing 15</a> to the array 
object containing data values that will simply reproduce the colors in the image 
being processed.&nbsp; This is the default case if no checkboxes are 
<a name="Listing_17">checked</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    red = noInvert;
    green = noInvert;
    blue = noInvert;<br><br><b><font face="Courier New,Courier"><a href="#Listing_17">Listing 17</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Re-point array references based on selected check 
boxes</b></font></p>
<p><a href="#Listing_18">Listing 18</a> examines the <i>Red</i>, <i>Green</i>, and
<i>Blue</i> check boxes in <a href="#Figure_2">Figure 2</a>.&nbsp; If any checkbox has been checked, 
the code in <a href="#Listing_18">Listing 18</a> modifies the reference to the substitution array for that 
color.&nbsp; If the checkbox has been checked, the reference is caused to point 
to the array object containing data values that will cause the colors in the 
image being processed to be <a name="Listing_18">inverted</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    if(page00RedCkBx.getState() == true){
      red = invert;
    }//end if
    if(page00GreenCkBx.getState() == true){
      green = invert;
    }//end if
    if(page00BlueCkBx.getState() == true){
      blue = invert;
    }//end if<br><br><b><font face="Courier New,Courier"><a href="#Listing_18">Listing 18</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Thus, any combination <i>(including none)</i> of the three color bands can be inverted by 
checking the appropriate checkbox in <a href="#Figure_2">Figure 2</a> and then clicking the <b>Replot</b> 
button in <a href="#Figure_1">Figure 1</a>.</p>
<p><font color="#FF0000"><b>Inverting individual color bands</b></font></p>
<p>For example, whereas the bottom image in <a href="#Figure_1">Figure 1</a> shows the result of inverting all three color 
bands in the color wheel in the top image, the bottom image in the left panel in <a href="#Figure_6">Figure 6</a> shows the result of 
inverting only the red color band, and the bottom image in the right panel in 
<a href="#Figure_6">Figure 6</a> shows the result of inverting only the green color <a name="Figure_6">band</a>.</p>

<p>
<table border="1" bgcolor="#ccffff">
	<tr>
		<td><img border="0" src="java452c02.jpg" width="211" height="455"></td>
		<td><img border="0" src="java452c03.jpg" width="211" height="455"></td>
	</tr>
	<tr>
	<td colspan="2" >
<pre><b><a href="#Figure_6">Figure 6</a></b></pre></td>
	</tr>
</table>
<p><font color="#FF0000"><b>Process the image and return the result</b></font></p>

<p><a href="#Listing_19">Listing 19</a> invokes the method named <b>processImageForThePage</b> to actually 
process the image, passing a reference to the image along with the three substitution arrays to 
the method.&nbsp; <i>(This is a common method that will be used by all three 
image-processing schemes illustrated by this <a name="Listing_19">program</a>.)</i></p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    return <b>processImageForThePage</b>(theImage,red,green,blue);
  }//end processPage00
<br><b><font face="Courier New,Courier"><a href="#Listing_19">Listing 19</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_19">Listing 19</a> signals the end of the method named <b>processPage00</b>.</p>
<p><font color="#FF0000"><b>The method named processImageForThePage</b></font></p>
<p>The common image-processing method named <b>processImageForThePage</b> begins 
in <a href="#Listing_20">Listing 20</a>.</p>
<p>This method uses the <b>LookupOp</b> class from the Java 2D API along with three separate data 
substitution arrays to process the color values in the corresponding color bands.&nbsp; 
One substitution array is applied to the red color band, one is applied to the 
green color band, and one is applied to the blue color band.</p>
<p><font color="#FF0000"><b>Create and populate a 2D array of type short[][]</b></font></p>
<p><a href="#Listing_20">Listing 20</a> creates and populates a 2D array of type <b>short[][]</b> with data for the lookup table.&nbsp; 
<i>(Note that this is a 2D array, rather than a 1D array 
as was the case in <a href="#Listing_2">Listing 2</a> where a single substitution data array was used to process all three color 
<a name="Listing_20">bands</a>.)</i></p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  BufferedImage processImageForThePage(
                                    BufferedImage theImage,
                                    short[] red,
                                    short[] green,
                                    short[] blue){

    short[][] lookupData = new short[][]{red,green,blue};<br><br><b><font face="Courier New,Courier"><a href="#Listing_20">Listing 20</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Create the lookup table and the filter object</b></font></p>
<p><a href="#Listing_21">Listing 21</a> executes code that is essentially the same as the code that was 
explained in <a href="#Listing_3">Listing 3</a> and <a href="#Listing_4">Listing 4</a> to create the lookup table and the filter 
<a name="Listing_21">object</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    //Create the lookup table.  The first parameter is an
    // offset for extracting data from the array object.
    //In this case, all of the data is extracted from the
    // array object beginning at an index of 0.
    ShortLookupTable lookupTable = 
                        new ShortLookupTable(0,lookupData);

    //Create the filter object. The second parameter
    // provides the opportunity to use RenderingHints.
    BufferedImageOp filterObject = 
                            new LookupOp(lookupTable,null);<br><br><b><font face="Courier New,Courier"><a href="#Listing_21">Listing 21</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Display the lookup table</b></font></p>
<p>For illustration purposes only, the code in <a href="#Listing_22">Listing 22</a> invokes a method named
<b>displayTableData</b> to work backwards from the <b>filterObject</b> to get and display some data from the lookup table.&nbsp; Note that this is not an image-processing 
<a name="Listing_22">requirement</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    displayTableData(filterObject);<br><br><b><font face="Courier New,Courier"><a href="#Listing_22">Listing 22</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>I will leave it up to you to examine and understand the code in the method 
named <b>displayTableData</b>, which you will find in <a href="#Listing_38">Listing 38</a>.</p>
<p><font color="#FF0000"><b>Apply the filter and return the filtered image</b></font></p>
<p><a href="#Listing_23">Listing 23</a> applies the filter to the incoming image and returns a reference to the resulting
<b>BufferedImage</b> <a name="Listing_23">object</a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    return filterObject.filter(theImage, null);
  }//end processImageForThePage<br><br><b><font face="Courier New,Courier"><a href="#Listing_23">Listing 23</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in <a href="#Listing_23">Listing 23</a> is essentially the same as the code that I explained 
in <a href="#Listing_5">Listing 5</a>.</p>
<p><a href="#Listing_23">Listing 23</a> signals the end of the method named <b>processImageForThePage</b>.</p>
<p><a href="#Listing_23">Listing 23</a> also signals the end of the explanation for the <i>Color Inversion</i> 
page shown in <a href="#Figure_2">Figure 2</a>.</p>
<h4><a name="The_Posterizing_Page">The Posterizing Page</a></h4>
<p>Posterizing is a process of reducing the number of colors in an image to a relatively small number.&nbsp; The effect is to cause the image to look similar to a painting that was painted using a
<i>"paint by numbers" </i>set where the smooth transitions from one color to the next have been eliminated.&nbsp; This is accomplished by limiting the number of different colors that appear in the image.</p>
<p>For example, <a href="#Figure_7">Figure 7</a> shows an image that has been posterized to what I 
believe should be 27 <a name="Figure_7">colors</a>.</p>
      
<p>
<table border="1" cols="1" bgcolor="#ccffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java452d01.jpg" width="164" height="327"><br></pre>
      <pre><b><a href="#Figure_7">Figure 7</a></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Posterizing results with a color wheel</b></font></p>
<p>The left panel of <a href="#Figure_8">Figure 8</a> shows the result of eliminating all the colors from the color wheel 
except red and then posterizing the resulting image into only three shades 
of <a name="Figure_8">red</a>.</p><p>
<table border="1" bgcolor="#ccffff">
	<tr>
		<td><img border="0" src="java452d02.jpg" width="211" height="455"></td><td>
		<img border="0" src="java452d03.jpg" width="211" height="455"></td></tr><tr>
	<td colspan="2" >
<pre><b><a href="#Figure_8">Figure 8</a></b></pre></td></tr></table>
<p>The right panel of <a href="#Figure_8">Figure 8</a> shows the result of eliminating all the colors from the color wheel 
except green and then posterizing the resulting image into three shades 
of green.</p><p>
<p>
</p>
<p>Similarly, the left panel of <a href="#Figure_9">Figure 9</a> shows the result of eliminating all the colors from the 
color wheel except blue and then posterizing the resulting image into three shades of 
<a name="Figure_9">blue</a>.</p>

<p>
<table border="1" bgcolor="#ccffff">
	<tr>
		<td><img border="0" src="java452d04.jpg" width="211" height="455"></td><td>
		<img border="0" src="java452d05.jpg" width="211" height="455"></td></tr><tr>
	<td colspan="2" >
<pre><b><a href="#Figure_9">Figure 9</a></b></pre></td></tr></table>
</p>

<p>
<p>
</p>
<p>Finally, the right panel of <a href="#Figure_9">Figure 9</a> shows the result of putting the 
posterized versions of red, 
green, and blue back together to produce a posterized version of the original 
color wheel.</p>
<p><font color="#FF0000"><b>Should have 27 colors</b></font></p>
<p>According to my calculations, when each of the three colors is allowed to 
have three shades, then the maximum number of possible colors in the posterized 
version of the color wheel should be three cubed or 27.&nbsp; However, the 
differences between some of those colors must be very subtle because I am only 
able to count about twenty different colors in the bottom image of <a href="#Figure_9">Figure 9</a>.</p><p>
<p>
</p>
<p><font color="#FF0000"><b>Now for some code</b></font></p>

<p>That is probably enough posterizing examples to give you an idea of the 
behavior of posterizing.&nbsp; Now let's look at the code that accomplishes 
posterizing.</p>
<p><font color="#FF0000"><b>The method named constructPage01</b></font></p>
<p>The method named <b>constructPage01</b> is shown in its entirety in 
<a href="#Listing_24">Listing 
24</a>.&nbsp; This method constructs the <i>Posterizing</i> page shown in <a href="#Figure_3">Figure 3</a>.&nbsp; 
The method is called from the primary constructor in <a name="Listing_24"><a href="#Listing_10">Listing 10</a></a>.</p>
      <p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  void constructPage01(){
    page01.setName("Posterizing");//Label on the tab.
    page01.setLayout(new BorderLayout());
    
    //Create and add the instructional text to the page.
    String text = "POSTERIZING\n"
      + "The effect of posterizing is to cause the image "
      + "to look similar to a painting that was painted "
      + "using a \"paint by numbers\" set where the smooth"
      + "transitions from one color to the next have been "
      + "eliminated.  This is accomplished by limiting "
      + "the number of different colors that appear in "
      + "the image.\n\n"
      + "To posterize an image, decide how many levels "
      + "you want to see for each of the three colors, "
      + "red, green, and blue.  Enter that number in the "
      + "text field below.  Select the colors that you "
      + "want to mix by checking the matching check boxes "
      + "and click the Replot button.";
      
    //Note:  The number of columns specified for the
    // following TextArea is immaterial because the
    // TextArea object is placed in the NORTH location of
    // a BorderLayout.
    TextArea textArea = new TextArea(text,9,1,
                                 TextArea.SCROLLBARS_NONE);
    page01.add(textArea,BorderLayout.NORTH);
    textArea.setEnabled(false);
    
    //Construct the control panel and add it to the page.
    Panel page01ControlPanel = new Panel();
    page01ControlPanel.add(page01TextField);
    page01ControlPanel.add(page01RedCkBx);
    page01ControlPanel.add(page01GreenCkBx);
    page01ControlPanel.add(page01BlueCkBx);
    page01.add(page01ControlPanel,BorderLayout.CENTER);
    
  }//end constructPage01<br><br><b><font face="Courier New,Courier"><a href="#Listing_24">Listing 24</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>You should have no difficulty understanding the code in <a href="#Listing_24">Listing 24</a> if you 
compare the code with the image in <a href="#Figure_3">Figure 3</a>.&nbsp; Therefore, further explanation of the code in 
<a href="#Listing_24">Listing 24</a> should not be necessary.</p>
<p><font color="#FF0000"><b>The method named processPage01</b></font></p>
<p>The method named <b>processPage01</b> begins in <a href="#Listing_25">Listing 25</a>.&nbsp; This method 
applies a posterizing algorithm to the image using the controls located on the
<i>Posterizing</i> page in <a href="#Figure_3">Figure 3</a>.&nbsp; The method is called from within the
<b>switch</b> statement in the method named <b>processImg</b> in <a href="#Listing_14">Listing 14</a>.&nbsp; Note that this method processes the image using three 
separate 
<a name="Listing_25">arrays</a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  BufferedImage processPage01(BufferedImage theImage){

    int numberLevels = 1;
    try{//Get input value from the text field.
      numberLevels = 
               Integer.parseInt(page01TextField.getText());
    }catch(java.lang.NumberFormatException e){
      page01TextField.setText("Bad Input");
      numberLevels = 1;//Override bad user input.
    }//end catch

    //Guarantee that the number of levels falls within the
    // allowable range.  Don't allow divison by 0.
    if((numberLevels &lt;= 0) || (numberLevels &gt' 256)){
      page01TextField.setText("Bad Input");
      numberLevels = 1;//Override bad user input.
    }//end if<br><br><b><font face="Courier New,Courier"><a href="#Listing_25">Listing 25</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Get the number of levels</b></font></p>
<p>The <b>processPage01</b> method in <a href="#Listing_25">Listing 25</a> begins by getting user input 
specifying the number of levels or shades that will be allowed for each of the 
primary colors, red, green, and blue.&nbsp; The code in <a href="#Listing_25">Listing 25</a> is 
straightforward.</p>
<p><font color="#FF0000"><b>Compute the bin size</b></font></p>
<p>Limiting the number of allowable shades for each primary color will cause the 
number of different values contained in the substitution arrays to be less than 
256.&nbsp; The values in the substitution arrays will represent a stair-step 
arrangement of values with several adjacent elements containing the same value 
at each level.&nbsp; <a href="#Listing_26">Listing 26</a> computes the number of adjacent elements that 
will contain the same value on the basis of the number of <a name="Listing_26">levels</a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    int binSize = 256/numberLevels;<br><br><b><font face="Courier New,Courier"><a href="#Listing_26">Listing 26</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Create the substitution array objects</b></font></p>
<p><a href="#Listing_27">Listing 27</a> creates array objects that will be populated with substitution data that is used to populate the lookup table.&nbsp; Note that by default these arrays are populated with all zero 
<a name="Listing_27">values</a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    short[] red = new short[256];
    short[] green = new short[256];
    short[] blue = new short[256];<br><br><b><font face="Courier New,Courier"><a href="#Listing_27">Listing 27</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Populate a master substitution array</b></font></p>
<p><a href="#Listing_28">Listing 28</a> implements an algorithm that creates the substitution data in the 
stair-step fashion described above.&nbsp; This code creates and populates an array object with master data that will be used to populate the specific arrays for the colors that are to be 
<a name="Listing_28">posterized</a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    short[] masterData = new short[256];
    for(int cnt = 0;cnt &lt; 256;cnt++){
      short value = 
              (short)((cnt/binSize)*binSize + binSize - 1);
      //Clip the values at 0 and 255.
      if(value &gt'= 256) value = 255;
      if(value &lt; 0) value = 0;//Probably not possible.
      masterData[cnt] = value;
    }//end for loop<br><br><b><font face="Courier New,Courier"><a href="#Listing_28">Listing 28</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Set up the substitution arrays</b></font></p>
<p><a href="#Listing_29">Listing 29</a> examines the check boxes in <a href="#Figure_3">Figure 3</a> to determine which colors are 
to be posterized.&nbsp; If any checkbox has been checked, <a href="#Listing_29">Listing 29</a> causes the corresponding array 
reference to point to the array containing the stair-step data created in 
<a href="#Listing_28">Listing 28</a>.&nbsp; Otherwise, the array reference will point to an array that contains all zero values by 
<a name="Listing_29">default</a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    if(page01RedCkBx.getState() == true){
      red = masterData;
    }//end if
    if(page01GreenCkBx.getState() == true){
      green = masterData;
    }//end if
    if(page01BlueCkBx.getState() == true){
      blue = masterData;
    }//end if<br><br><b><font face="Courier New,Courier"><a href="#Listing_29">Listing 29</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Filter the image and return the resulting modified 
image</b></font></p>
<p><a href="#Listing_30">Listing 30</a> calls the method named <b>processImageForThePage</b> to filter the 
image and to return the resulting modified image.&nbsp; This is the same method 
that was used to process the image for the <i>Color Inversion</i> page that I 
explained earlier <i>(see <a name="Listing_30"><a href="#Listing_20">Listing 20</a></a>)</i>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    return <b>processImageForThePage</b>(theImage,red,green,blue);

  }//end processPage01<br><br><b><font face="Courier New,Courier"><a href="#Listing_30">Listing 30</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_30">Listing 30</a> also signals the end of the method named 
<b>processPage01</b>, and the 
end of the discussion of the <i>Posterizing</i> page shown in <a href="#Figure_3">Figure 3</a>.</p>
<h4><a name="The_Custom_Transforms_Page">The Custom Transforms Page</a></h4>
<p>The <i>Custom Transforms</i> page is shown in <a href="#Figure_4">Figure 4</a>.&nbsp; This page makes 
it possible for the user to select either of two custom substitution arrays to 
transform the color values from the input image into a different set of color 
values in the output image.&nbsp; The main purpose of this page is not to 
provide color transformations that are particularly useful.&nbsp; Rather, the 
purpose is to illustrate that you can easily implement any custom color substitution 
algorithm that you can devise that would be useful for your purposes.</p>
<p><font color="#FF0000"><b>Linear Transform</b></font></p>
<p>The left panel in <a href="#Figure_10">Figure 10</a> shows the result of filtering an image by 
checking all three checkboxes, selecting the <i>Linear Transform</i> radio 
button, and setting the <i>Slope</i> to 0.9 in the <i>Custom Transforms</i> page 
shown in <a name="Figure_10"><a href="#Figure_4">Figure 4</a></a>.</p><p>
<table border="1" bgcolor="#ccffff">
	<tr>
		<td><img border="0" src="java452e01.jpg" width="164" height="327"></td><td>
		<img border="0" src="java452e02.jpg" width="164" height="327"></td></tr><tr>
	<td colspan="2" >
<pre><b><a href="#Figure_10">Figure 10</a></b></pre></td></tr></table><p>
<font color="#FF0000"><b>The output is lighter</b></font></p>
<p>As you can see, the output image 
in the left panel is somewhat lighter than the input image.&nbsp; Setting the <i>
Slope</i> to 1.0 would cause the output image to be an unmodified copy of the 
input image.&nbsp; Setting the <i>Slope</i> to lower values would cause the 
output image to be progressively lighter, with a value of 0.1 causing the output 
image to be almost completely white.</p>
<p><font color="#FF0000"><b>Log Transform</b></font></p>
<p>The right panel in <a href="#Figure_10">Figure 10</a> shows the result of filtering an image by 
checking all three checkboxes and selecting the <i>Log Transform</i> radio 
button in the <i>Custom Transforms</i> page shown in <a href="#Figure_4">Figure 4</a>.</p>
<p>
<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Similar to decibel conversion</b><br />
  For those who may be interested, this is somewhat analogous to 
	converting a 3D surface to decibels through a log base 10 conversion of the 
	elevation values.&nbsp; See the earlier lesson entitled
	<a href="http://www.developer.com/java/other/article.php/3508706">Plotting 
	3D Surfaces using Java</a>.</td></tr></table>
</td>
</tr>
</table>

This option doesn't allow any user input parameters <i>(such as the Slope in 
the Linear Transform)</i>.&nbsp; As you can see, the output image is very light 
in the bottom-right panel of <a href="#Figure_10">Figure 10</a>.&nbsp; Thus, the log transform is a 
rather severe lightening filter.</p>
<p><font color="#FF0000"><b>The method named constructPage02</b></font></p>
<p>The method named <b>constructPage02</b> is shown in its entirety in <a href="#Listing_31">Listing 31</a>.&nbsp; This method 
is used to construct the page shown in <a href="#Figure_4">Figure 4</a>.&nbsp; The method is called from the primary constructor 
in <a name="Listing_31"><a href="#Listing_10">Listing 10</a></a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  void constructPage02(){
    page02.setName("Custom Transforms");//Tab label.
    page02.setLayout(new BorderLayout());
    
    //Create and add the instructional text to the page.
    String text = "CUSTOM TRANSFORMS\n"
      + "This page illustrates the use of two different "
      + "custom transforms, one based on the log to the "
      + "base 10, and the other based on the equation of "
      + "a straight line.  Both transforms are designed "
      + "to boost the intensity of pixels with low color "
      + "values.\n\n"
      + "Specify the color bands that you want to process "
      + "by checking the checkboxes.\n\n"
      + "Select a radio button to select a transform.  "
      + "For the linear transform, enter a positive slope "
      + "that is &lt;= 1.0.  Try a slope of 0.85 for "
      + "example\n\n"
      + "Then click the Replot button.";
      
    //Note:  The number of columns specified for the
    // following TextArea is immaterial because the
    // TextArea object is placed in the NORTH location of
    // a BorderLayout.
    TextArea textArea = new TextArea(text,9,1,
                                 TextArea.SCROLLBARS_NONE);
    page02.add(textArea,BorderLayout.NORTH);
    textArea.setEnabled(false);
    
    //Construct the control panel and add it to the page.
    Panel page02ControlPanel = new Panel();
    page02ControlPanel.setLayout(new GridLayout(3,1));
    
    Panel subControlPanel00 = new Panel();
    subControlPanel00.add(page02RedCkBx);
    subControlPanel00.add(page02GreenCkBx);
    subControlPanel00.add(page02BlueCkBx);
    page02ControlPanel.add(subControlPanel00);
    
    Panel subControlPanel01 = new Panel();
    subControlPanel01.setLayout(
                          new FlowLayout(FlowLayout.LEFT));
    subControlPanel01.add(page02LogRa
    page02ControlPanel.add(subControlPanel01);
    
    Panel subControlPanel02 = new Panel();
    subControlPanel02.setLayout(
                          new FlowLayout(FlowLayout.LEFT));
    subControlPanel02.add(page02LinearRadioButton);
    subControlPanel02.add(new Label("  Slope ="));
    subControlPanel02.add(page02TextField);
    subControlPanel02.add(
                   new Label("must be &gt'= 0.0 and &lt;= 1.0"));
    page02ControlPanel.add(subControlPanel02);
    
    page02.add(page02ControlPanel,BorderLayout.CENTER);
    
  }//end constructPage02<br><br><b><font face="Courier New,Courier"><a href="#Listing_31">Listing 31</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Tedious but straightforward</b></font></p>
<p>Although somewhat tedious, the code in <a href="#Listing_31">Listing 31</a> is straightforward.&nbsp; 
If you use <a href="#Figure_4">Figure 4</a> as a guide, you should have no trouble understanding the 
code in <a href="#Listing_31">Listing 31</a>.</p>
<p><font color="#FF0000"><b>The method named processPage02</b></font></p>
<p>The method named <b>processPage02</b> begins in <a href="#Listing_32">Listing 32</a>.&nbsp; This method processes the image according to the controls 
shown on the <i>Custom Transforms</i> page in <a href="#Figure_4">Figure 4</a>.&nbsp; This method is called from within a
<b>switch</b> statement in <a href="#Listing_14">Listing 14</a>.&nbsp; Note that as with the pages in 
<a href="#Figure_2">Figure 2</a> and <a href="#Figure_3">Figure 3</a>, this method processes the image using three different 
substitution arrays, one each for red, green, and blue.</p>
<p>The method named <b>processPage02</b> transforms the values in the color bands according to either a 
<i>log</i> transform, or a <i>linear</i> transform.&nbsp; 
The choice of which transform algorithm to use is determined by the radio button 
selected by the user in <a href="#Figure_4">Figure 4</a>.</p>
<p>The net effect of both transforms is to emphasize or boost the intensity of colors having low values, thus causing the image to become brighter.&nbsp; 
However, the two transforms achieve this effect in different ways.</p>
<p><font color="#FF0000"><b>Create substitution array objects</b></font></p>
<p><a href="#Listing_32">Listing 32</a> creates array objects that will be populated with data that is 
later used to populate the lookup table.&nbsp; By default these arrays are populated with all zero 
<a name="Listing_32">values</a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>  BufferedImage processPage02(BufferedImage theImage){
    
    short[] red = new short[256];
    short[] green = new short[256];
    short[] blue = new short[256];<br><br><b><font face="Courier New,Courier"><a href="#Listing_32">Listing 32</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Create and populate the master data array object</b></font></p>
<p><a href="#Listing_33">Listing 33</a> shows the beginning of the algorithm that will create and populate an array object with master data that will be used to populate the specific arrays for the colors that are selected to be 
<a name="Listing_33">processed</a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    short[] masterData = new short[256];
    for(int cnt = 0;cnt &lt; 256;cnt++){
      short value = 0;<br><br><b><font face="Courier New,Courier"><a href="#Listing_33">Listing 33</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Populate according to linear or log selection</b></font></p>
<p><a href="#Listing_34">Listing 34</a> shows the<b> if</b> portion of an<b> if-else</b> statement that is 
used to select between a log or linear transform based on the state of the two radio 
buttons in <a href="#Figure_4">Figure 4</a>.&nbsp; The code in <a href="#Listing_34">Listing 34</a> creates the substitution data 
values for a log conversion of the color <a name="Listing_34">values</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      if(page02LogRadioButton.getState() == true){
        //Perform a log conversion
        if(cnt == 0){
          //Avoid computing the log of 0.  Substitute the
          // log of 1 instead.  (Note that with J2SE 5.0,
          // I could have used a static import directive
          // in order to eliminate the explicit reference
          // to the Math class in the following
          // expressions.)
          value =
              (short)(Math.log10(1.0)*255/Math.log10(255));
        }else{
          value = 
              (short)(Math.log10(cnt)*255/Math.log10(255));
        }//end else<br><br><b><font face="Courier New,Courier"><a href="#Listing_34">Listing 34</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Purpose is not to explain logarithms</b></font></p>
<p>Since my purpose here is not to teach you about logarithms, I won't attempt 
to explain the rationale behind the code in <a href="#Listing_34">Listing 34</a>.&nbsp; If you already 
understand logarithms, you should have no trouble understanding the code in 
<a href="#Listing_34">Listing 34</a>.&nbsp; If not, just accept the code in <a href="#Listing_34">Listing 34</a> as one of many 
possible transform algorithms that can be used to convert the color values in 
the input image into a different set of color values in the output image through 
substitution.</p>
<p><font color="#FF0000"><b>The else clause</b></font></p>
<p><a href="#Listing_35">Listing 35</a> shows the <b>else</b> portion of the <b>if-else</b> statement that 
began in <a name="Listing_35"><a href="#Listing_34">Listing 34</a></a>.</p><p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>      }else{//Linear conversion must have been selected
        //Perform a linear conversion
        double slope = 0;
        try{//Get the slope from the text field.
          slope = 
             Double.parseDouble(page02TextField.getText());
        }catch(java.lang.NumberFormatException e){
          page02TextField.setText("Bad Input");
          slope = 0.0;//Override user input on bad input.
        }//end catch

        //Guarantee that the slope is positive and &lt;= 1.0.
        if((slope &lt; 0.0) || (slope &gt' 1.0)){
          page02TextField.setText("Bad Input");
          slope = 0.0;//Override user input on bad input.
        }//end if
        
        //Compute the intercept of a straight line with the
        // y-axis using the slope provided by the user. 
        // Cause the line to go through a y-value of 255
        // at an x-value of 255.
        int yIntercept = (int)(255.0 - 255.0*slope);
        
        //Compute the value of y for each value of x(cnt)
        // using the equation of a straight line, which
        // is, y = slope*x + yIntercept
        value = (short)(slope*cnt + yIntercept);
        
        //Guard against roundoff errors that might cause
        // the color values to go slightly outside their
        // allowed range of 0 through 255.
        if(value &lt; 0) value = 0;
        if(value &gt' 255) value = 255;
      }//end else

      masterData[cnt] = value;
    }//end for loop<br><br><b><font face="Courier New,Courier"><a href="#Listing_35">Listing 35</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in <a href="#Listing_35">Listing 35</a> creates a set of substitution values based on the 
<i>slope</i> and the <i>y-intercept</i> using the equation for a straight line.</p>
<p><font color="#FF0000"><b>Purpose is not to explain analytical geometry</b></font></p>
<p>Once again, since my purpose here is not to teach you analytical geometry, I 
won't attempt to explain the rationale behind the code in <a href="#Listing_35">Listing 35</a>.&nbsp; If 
you already understand such things as the equation of a straight line, you 
should have no trouble understanding the code in <a href="#Listing_35">Listing 35</a>.&nbsp; If not, just 
accept the code in <a href="#Listing_35">Listing 35</a> as another one of many possible transform 
algorithms that can be used to convert the color values in the input image into 
a different set of color values in the output image through substitution.</p>
<p><font color="#FF0000"><b>Many different custom transforms are possible</b></font></p>
<p>There are many ways to come up with the substitution values for the custom 
transforms and the purpose of this section of the lesson is simply to 
illustrate two of them.&nbsp; You may find other ways to develop substitution 
values that better serve your image-processing needs.</p>
<p><font color="#FF0000"><b>Wrapping it up</b></font></p>
<p>The remainder of the <b>processPage02</b> method is shown in <a href="#Listing_36">Listing 36</a>.&nbsp; 
This code is very similar to the code in the previously-explained methods, and 
therefore shouldn't require further <a name="Listing_36">explanation</a>.</p>
<p>
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>    //Examine the check boxes.  If any checkbox has been
    // checked, reset the corresponding array to point it
    // to the array containing the master data.  Otherwise,
    // it will contain all zero values by default.
    if(page02RedCkBx.getState() == true){
      red = masterData;
    }//end if
    if(page02GreenCkBx.getState() == true){
      green = masterData;
    }//end if
    if(page02BlueCkBx.getState() == true){
      blue = masterData;
    }//end if
    
    //Process the image and return the processed result.
    return processImageForThePage(theImage,red,green,blue);

  }//end processPage02<br><br><b><font face="Courier New,Courier"><a href="#Listing_36">Listing 36</a></font></b></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><a href="#Listing_36">Listing 36</a> signals the end of the explanation for the program named <b>
ImgMod39</b>.<br>
</p>
<center>
<h2><a name="Run the program"></a>Run the Programs</h2></center><p>I encourage you to copy the code from 
<a href="#Listing_37">Listing 37</a> and <a href="#Listing_38">Listing 38</a> into your text
editor, compile it, and execute it.&nbsp; Experiment with it, making
changes, and observing the results of your changes.</p>
<p>Remember, you will also need to compile the code for the framework program 
named <b>ImgMod05</b> and the interface named <b>ImgIntfc05</b>.&nbsp; You will 
find that source code in the earlier lesson entitled 
<a href="http://www.developer.com/java/other/article.php/3645761">A Framework for 
Experimenting with Java 2D Image-Processing Filters</a>.</p>
<p>You will also need one or more JPEG image files to experiment with.&nbsp; You 
should have no difficulty finding such files at a variety of locations on the 
web.&nbsp; I recommend that you stick with relatively small images so that both 
the original image and the processed image will fit in the vertical space on 
your screen.</p><h2 align="center"><a name="Summary">Summary</a></h2><p>In this 
lesson, I provided and explained two different image-processing programs that 
are compatible with the framework program named <b>ImgMod05</b>.&nbsp; The 
purpose of these two programs is to show you how to write such programs, and 
also to illustrate a variety of different uses for the <b>LookupOp</b> class of 
the Java 2D API.&nbsp; Three specific uses of the <b>LookupOp</b> class were 
illustrated, and you should be able to devise many more.</p>
<p>Along the way, I also showed you how to construct and use a <b>JTabbedPane</b> 
object as a program GUI.&nbsp; <i>(If my memory serves me correctly, this is the 
first time that I have used a <b>JTabbedPane</b> in a lesson that I have 
published.)</i></p>
<h2 align="center"><a name="Whats Next">What's Next?</a></h2>
<p>Future lessons in this series will teach you how to use the following image-filtering 
classes from the Java 2D API:</p>
<ul>
	<li><b>AffineTransformOp</b> </li>
	<li><b>BandCombineOp</b> </li>
	<li><b>ConvolveOp</b> </li>
	<li><b>RescaleOp</b> </li>
	<li><b>ColorConvertOp</b> </li>
</ul>
<h2 align="center"><a name="References">References</a></h2><ul>
	<li><a href="http://www.developer.com/java/other/article.php/3403921">400</a> 
	Processing Image Pixels using Java, Getting Started</li><li><a href="http://www.developer.com/java/other/article.php/3423661">402</a> 
	Processing Image Pixels using Java, Creating a Spotlight</li><li><a href="http://www.developer.com/java/other/article.php/3441391">404</a> 
	Processing Image Pixels Using Java: Controlling Contrast and Brightness</li><li><a href="http://www.developer.com/java/other/article.php/3512456">406</a> 
	Processing Image Pixels, Color Intensity, Color Filtering, and Color 
	Inversion</li><li><a href="http://www.developer.com/java/other/article.php/3522711">408</a> 
	Processing Image Pixels, Performing Convolution on Images</li><li><a href="http://www.developer.com/java/other/article.php/3579206">410</a> 
	Processing Image Pixels, Understanding Image Convolution in Java</li><li><a href="http://www.developer.com/java/ent/article.php/3590351">412</a> 
	Processing Image Pixels, Applying Image Convolution in Java, Part 1</li><li><a href="http://www.developer.com/java/other/article.php/3596351">414</a> 
	Processing Image Pixels, Applying Image Convolution in Java, Part 2</li><li>
	<a href="http://www.developer.com/java/other/article.php/3640776">416</a> Processing Image Pixels, An Improved Image-Processing Framework in 
	Java</li><li>
	<a href="http://www.developer.com/java/other/article.php/3645761">450</a> A Framework for Experimenting with Java 2D Image-Processing 
	Filters</li></ul><center>
<h2> <a name="Complete Program Listings"></a>Complete Program Listings</h2></center>
Complete listings of the programs discussed in this lesson are shown in 
<a href="#Listing_37">Listing 
37</a> and <a href="#Listing_38">Listing 38</a> <a name="Listing_37">below</a>. <br>
&nbsp;
<table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File ImgMod38.java
Copyright 2006, R.G.Baldwin

The purpose of this class is to provide a simple example of
an image processing class that is compatible with the use
of the program named ImgMod05, and which illustrates a
single usage of the LookupOp class from the image
processing portion of the Java 2D API.&nbsp; (Future programs
will illustrate other uses of the LookupOp class.)

A class that is compatible with ImgMod05 is required to
implement the interface named ImgIntfc05. This, in turn,
requires the class to define the method named processImg,
which receives one parameter of type BufferedImage and
returns a reference of type BufferedImage.

The required signature for the processImg method is:

public BufferedImage processImg(BufferedImage input);

The processImg method receives a reference to a
BufferedImage object containing the image that is to be
processed

The processImg method must return a reference to a
BufferedImage object containing the processed image.

In this example, the method named processImg is a color
inverter method.

The method named processImg as defined in this class
receives an incoming reference to an image as a parameter
of type BufferedImage.&nbsp; The method returns a reference to
an image as type BufferedImage where all of the color
values in the pixels have been inverted by subtracting the
color values from 255.

The method has been demonstrated to work properly only for
the case where the incoming BufferedImage object was
constructed for image type BufferedImage.TYPE_INT_RGB.&nbsp;
However, it may work properly for other image types as
well.

Note that this class does not define a constructor.
However, if it did define a constructor, that constructor
would not be allowed to receive parameters. This is because
the class named ImgMod05 instantiates an object of this
class by invoking the newInstance method of the Class
class passing the name of this class to the newInstance
method as a String parameter.&nbsp; That process does not allow
for constructor parameters for the class being
instantiated.

The driver program named ImgMod05 displays the original and
the modified images.&nbsp; It also writes the modified image
into an output file in JPEG format.&nbsp; The name of the output
file is junk.jpg and it is written into the current
directory.

The output GUI for the driver program named ImgMod05
contains a Replot button.&nbsp; At the beginning of the run, and
each time thereafter that the Replot button is clicked:
-The image processing method belonging to the image
&nbsp;processing object is invoked,
-The resulting modified image is displayed along with the
&nbsp;original image.

Image processing programs such as this one may provide a
GUI for data input making it possible for the user to
modify the behavior of the image processing method each
time the Replot button is clicked.&nbsp; However, no such GUI
is provided by this program and clicking the Replot
button is of no consequence.

The driver program named ImgMod05 reads gif and jpg input
files and possibly some other input file types as well.&nbsp;
The output file is always a JPEG file.

Usage:

Enter the following at the command line to run this
program:

java ImgMod05 ImgMod38 ImageFileName

The image file must be provided by the user.&nbsp; However, it
doesn't have to be in the current directory if a path to
the file is included along with the file name on the
command line.

When the program is started, the original image and the
processed version of the image are displayed in a frame
with the original image above the processed image.

The driver program named ImgMod05 attempts to adjust the
size of the display frame to accommodate both images.&nbsp; If
the processed image doesn't fit in the display, the user
can manually resize the display frame in order to view both
images.

If the program is unable to load the image file within ten
seconds, it will abort with an error message.

Tested using J2SE5.0 under WinXP.
**********************************************************/

import java.awt.image.*;

class ImgMod38 implements ImgIntfc05{

&nbsp; //The following method must be defined to implement the
&nbsp; // ImgIntfc05 interface.
&nbsp; public BufferedImage processImg(BufferedImage theImage){

&nbsp;&nbsp;&nbsp; //Use the LookupOp class from the Java 2D API to
&nbsp;&nbsp;&nbsp; // invert all of the color values in the pixels.&nbsp; The
&nbsp;&nbsp;&nbsp; // alpha value is not modified.

&nbsp;&nbsp;&nbsp; //Create the data for the lookup table.
&nbsp;&nbsp;&nbsp; short[] lookupData = new short[256];
&nbsp;&nbsp;&nbsp; for (int cnt = 0; cnt &lt; 256; cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lookupData[cnt] = (short)(255-cnt);
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create the lookup table
&nbsp;&nbsp;&nbsp; ShortLookupTable lookupTable =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ShortLookupTable(0,lookupData);

&nbsp;&nbsp;&nbsp; //Create the filter object.
&nbsp;&nbsp;&nbsp; BufferedImageOp thresholdOp =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new LookupOp(lookupTable,null);

&nbsp;&nbsp;&nbsp; //Apply the filter to the incoming image and return
&nbsp;&nbsp;&nbsp; // a reference to the resulting BufferedImage object.
&nbsp;&nbsp;&nbsp; return thresholdOp.filter(theImage, null);
&nbsp; }//end processImg

}//end class ImgMod38
<br><br><b><font face="Courier New,Courier"><a href="#Listing_37">Listing 37</a></font></b></pre></td></tr></tbody></table><p> </p>
<p><a name="Listing_38"><a href="#Listing_38">Listing 38</a></a></p><table border="1" cols="1" width="482" bgcolor="#ffff00">
  <tbody>
    <tr>
      <td>
      <pre>/*File ImgMod39.java
Copyright 2006, R.G.Baldwin

The purpose of this class is to illustrate a variety of
different uses for the LookupOp class of the Java 2D API.
In each case, the program uses three data arrays to
process the red, green, and blue color bands individually
or in combination.

See general comments in the class named ImgMod038.

This class is compatible with the use of the driver program
named ImgMod05.

The driver program named ImgMod05 displays the original and
the modified images.&nbsp; It also writes the modified image
into an output file in JPEG format.&nbsp; The name of the output
file is junk.jpg and it is written into the current
directory.

Image-processing programs such as this one may provide a
GUI for user data input making it possible for the user to
modify the behavior of the image-processing method each
time the Replot button is clicked.&nbsp; Such a GUI is provided
for this program.

Enter the following at the command line to run this
program:

java ImgMod05 ImgMod39 ImageFileName

If the program is unable to load the image file within ten
seconds, it will abort with an error message.

This program creates a GUI consisting of a tabbed pane
containing three pages.&nbsp; The tabs on the pages are labeled:

Color Inversion
Posterizing
Custom Transforms

Each page contains a set of controls that make it possible
to process the image in a way that illustrates the
processing concept indicated by the labels on the tabs.
Processing details for each page are provided in the
comments in the code used to construct and process the
individual pages.

Tested using J2SE 5.0 under WinXP.
**********************************************************/

import java.awt.image.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

class ImgMod39 extends Frame implements ImgIntfc05{
&nbsp; //Primary container used to construct the GUI.
&nbsp; JTabbedPane tabbedPane = new JTabbedPane();
&nbsp;
&nbsp; //Components used to construct the page in the
&nbsp; // JTabbedPane that shows Color Inversion on the tab.
&nbsp; // Components that require local access only are defined
&nbsp; // locally.&nbsp; Others are defined here as instance
&nbsp; // variables.
&nbsp; Panel page00 = new Panel();
&nbsp; Checkbox page00RedCkBx = new Checkbox("Red");
&nbsp; Checkbox page00GreenCkBx = new Checkbox("Green");
&nbsp; Checkbox page00BlueCkBx = new Checkbox("Blue");

&nbsp; //Components used to construct the Posterizing page in
&nbsp; // the JTabbedPane. Components that require local access
&nbsp; // only are defined locally.&nbsp; Others are defined here as
&nbsp; // instance variables.
&nbsp; Panel page01 = new Panel();
&nbsp; TextField page01TextField = new TextField("128",6);
&nbsp; Checkbox page01RedCkBx = new Checkbox("Red");
&nbsp; Checkbox page01GreenCkBx = new Checkbox("Green");
&nbsp; Checkbox page01BlueCkBx = new Checkbox("Blue");
&nbsp;
&nbsp; //Components used to construct the Custom Transforms
&nbsp; // page in the JTabbedPane.&nbsp; Components that require
&nbsp; // local access only are defined locally.&nbsp; Others are
&nbsp; // defined here as instance variables.
&nbsp; Panel page02 = new Panel();
&nbsp; TextField page02TextField = new TextField("1.0",6);
&nbsp; Checkbox page02RedCkBx = new Checkbox("Red");
&nbsp; Checkbox page02GreenCkBx = new Checkbox("Green");
&nbsp; Checkbox page02BlueCkBx = new Checkbox("Blue");
&nbsp; CheckboxGroup group = new CheckboxGroup();
&nbsp; Checkbox page02LogRadioButton =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Checkbox("Log Transform",group,true);
&nbsp; Checkbox page02LinearRadioButton =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Checkbox("Linear Transform",group,false);
&nbsp;
&nbsp; //-----------------------------------------------------//
&nbsp;
&nbsp; //This is the primary constructor.&nbsp; It calls other
&nbsp; // methods to separate the construction of the GUI into
&nbsp; // easily understandable units.&nbsp; Each method that it
&nbsp; // calls constructs one page in the tabbed pane.
&nbsp; ImgMod39(){//constructor
&nbsp;
&nbsp;&nbsp;&nbsp; constructPage00();
&nbsp;&nbsp;&nbsp; tabbedPane.add(page00);//Add page to the tabbedPane.
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; constructPage01();
&nbsp;&nbsp;&nbsp; tabbedPane.add(page01);//Add page to the tabbedPane.
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; constructPage02();
&nbsp;&nbsp;&nbsp; tabbedPane.add(page02);//Add page to the tabbedPane.
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; add(tabbedPane);//Add tabbedPane to the Frame.

&nbsp;&nbsp;&nbsp; setTitle("Copyright 2006, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setBounds(555,0,470,300);
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; //Define a WindowListener to terminate the program.
&nbsp;&nbsp;&nbsp; addWindowListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new WindowAdapter(){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.exit(1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowClosing
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end windowAdapter
&nbsp;&nbsp;&nbsp; );//end addWindowListener
&nbsp; }//end constructor
&nbsp; //-----------------------------------------------------//
&nbsp;
&nbsp; //This method constructs the page in the tabbed pane that
&nbsp; // shows Color Inversion on the tab.&nbsp; This method is
&nbsp; // called from the primary constructor.&nbsp; It illustrates
&nbsp; // color inversion using three arrays, one for each of
&nbsp; // the red, green, and blue color bands.
&nbsp; void constructPage00(){
&nbsp;&nbsp;&nbsp; page00.setName("Color Inversion");//Label on the tab.
&nbsp;&nbsp;&nbsp; page00.setLayout(new BorderLayout());
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create and add the instructional text to the page.
&nbsp;&nbsp;&nbsp; // This text appears in a disabled text area at the
&nbsp;&nbsp;&nbsp; // top of the page in the tabbed pane.
&nbsp;&nbsp;&nbsp; String text ="COLOR INVERSION USING MULTIPLE ARRAYS\n"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "This page illustrates the use of the LookupOp "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "filter class for multiple lookup arrays.&nbsp; By "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "checking the appropriate checkboxes below, you "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "can cause the program to invert the colors on "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "none, or on any combination of color bands.";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Note:&nbsp; The number of columns specified for the
&nbsp;&nbsp;&nbsp; // following TextArea is immaterial because the
&nbsp;&nbsp;&nbsp; // TextArea object is placed in the NORTH location of
&nbsp;&nbsp;&nbsp; // a BorderLayout.
&nbsp;&nbsp;&nbsp; TextArea textArea = new TextArea(text,4,1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TextArea.SCROLLBARS_NONE);
&nbsp;&nbsp;&nbsp; page00.add(textArea,BorderLayout.NORTH);
&nbsp;&nbsp;&nbsp; textArea.setEnabled(false);

&nbsp;&nbsp;&nbsp; //Construct the control panel and add it to the page.
&nbsp;&nbsp;&nbsp; Panel page00ControlPanel = new Panel();
&nbsp;&nbsp;&nbsp; page00ControlPanel.add(page00RedCkBx);
&nbsp;&nbsp;&nbsp; page00ControlPanel.add(page00GreenCkBx);
&nbsp;&nbsp;&nbsp; page00ControlPanel.add(page00BlueCkBx);
&nbsp;&nbsp;&nbsp; page00.add(page00ControlPanel,BorderLayout.CENTER);
&nbsp; }//end constructPage00
&nbsp; //-----------------------------------------------------//

&nbsp; //This method processes the image according to the
&nbsp; // controls located on the page in the tabbed pane that
&nbsp; // shows Color Inversion on the tab.
&nbsp; //This method uses the LookupOp image-filtering class to
&nbsp; // process the image using lookup data from three
&nbsp; // separate arrays, one each for the red, green, and blue
&nbsp; // color bands.
&nbsp; //This method is called from within a switch statement in
&nbsp; // the method named processImg, which is the primary
&nbsp; // image-processing method in this program.
&nbsp; //This method illustrates color inversion.&nbsp; The effect of
&nbsp; // color inversion is to produce an output in which the
&nbsp; // image is similar to the negative of a color
&nbsp; // photograph.
&nbsp; BufferedImage processPage00(BufferedImage theImage){
&nbsp;&nbsp;&nbsp; //Create array objects that will be populated with data
&nbsp;&nbsp;&nbsp; // that is used later to populate the lookup table.
&nbsp;&nbsp;&nbsp; short[] red = null;
&nbsp;&nbsp;&nbsp; short[] green = null;
&nbsp;&nbsp;&nbsp; short[] blue = null;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create and populate arrays for straight (noInvert)
&nbsp;&nbsp;&nbsp; // lookup data and inverted lookup data.
&nbsp;&nbsp;&nbsp; short[] noInvert = new short[256];
&nbsp;&nbsp;&nbsp; short[] invert = new short[256];
&nbsp;&nbsp;&nbsp; for(int cnt = 0;cnt &lt; 256;cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; invert[cnt] = (short)(255 - cnt);//inverted data
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; noInvert[cnt] = (short)cnt;//straight lookup data
&nbsp;&nbsp;&nbsp; }//end for loop
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Point the three color arrays to the array containing
&nbsp;&nbsp;&nbsp; // the data that doesn't invert the colors.&nbsp; This is
&nbsp;&nbsp;&nbsp; // the default case if no checkboxes are checked.
&nbsp;&nbsp;&nbsp; red = noInvert;
&nbsp;&nbsp;&nbsp; green = noInvert;
&nbsp;&nbsp;&nbsp; blue = noInvert;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Examine the check boxes.&nbsp; If any checkbox has been
&nbsp;&nbsp;&nbsp; // checked, point the corresponding color array to the
&nbsp;&nbsp;&nbsp; // array containing the inversion data.
&nbsp;&nbsp;&nbsp; if(page00RedCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; red = invert;
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; if(page00GreenCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; green = invert;
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; if(page00BlueCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blue = invert;
&nbsp;&nbsp;&nbsp; }//end if

&nbsp;&nbsp;&nbsp; //Use the LookupOp class from the Java 2D API along
&nbsp;&nbsp;&nbsp; // with three separate data arrays to process the
&nbsp;&nbsp;&nbsp; // color values in the selected color bands.&nbsp; The
&nbsp;&nbsp;&nbsp; // alpha value is not modified.
&nbsp;&nbsp;&nbsp; return processImageForThePage(theImage,red,green,blue);

&nbsp; }//end processPage00
&nbsp; //-----------------------------------------------------//
&nbsp;
&nbsp; //This method constructs the page in the tabbed pane that
&nbsp; // shows Posterizing on the tab.&nbsp; This method is called
&nbsp; // from the primary constructor.&nbsp; It illustrates
&nbsp; // posterizing.
&nbsp; //Posterizing is a process of reducing the number of
&nbsp; // colors in an image to a relatively small number.&nbsp; The
&nbsp; // effect is to cause the image to look similar to a
&nbsp; // painting that was painted using a "paint by numbers"
&nbsp; // set where the smooth transitions from one color to the
&nbsp; // next have been eliminated.&nbsp; This is accomplished by
&nbsp; // limiting the number of different colors that appear
&nbsp; // in the image.
&nbsp; void constructPage01(){
&nbsp;&nbsp;&nbsp; page01.setName("Posterizing");//Label on the tab.
&nbsp;&nbsp;&nbsp; page01.setLayout(new BorderLayout());
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create and add the instructional text to the page.
&nbsp;&nbsp;&nbsp; String text = "POSTERIZING\n"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "The effect of posterizing is to cause the image "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "to look similar to a painting that was painted "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "using a \"paint by numbers\" set where the smooth"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "transitions from one color to the next have been "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "eliminated.&nbsp; This is accomplished by limiting "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "the number of different colors that appear in "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "the image.\n\n"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "To posterize an image, decide how many levels "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "you want to see for each of the three colors, "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "red, green, and blue.&nbsp; Enter that number in the "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "text field below.&nbsp; Select the colors that you "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "want to mix by checking the matching check boxes "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "and click the Replot button.";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Note:&nbsp; The number of columns specified for the
&nbsp;&nbsp;&nbsp; // following TextArea is immaterial because the
&nbsp;&nbsp;&nbsp; // TextArea object is placed in the NORTH location of
&nbsp;&nbsp;&nbsp; // a BorderLayout.
&nbsp;&nbsp;&nbsp; TextArea textArea = new TextArea(text,9,1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TextArea.SCROLLBARS_NONE);
&nbsp;&nbsp;&nbsp; page01.add(textArea,BorderLayout.NORTH);
&nbsp;&nbsp;&nbsp; textArea.setEnabled(false);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Construct the control panel and add it to the page.
&nbsp;&nbsp;&nbsp; Panel page01ControlPanel = new Panel();
&nbsp;&nbsp;&nbsp; page01ControlPanel.add(page01TextField);
&nbsp;&nbsp;&nbsp; page01ControlPanel.add(page01RedCkBx);
&nbsp;&nbsp;&nbsp; page01ControlPanel.add(page01GreenCkBx);
&nbsp;&nbsp;&nbsp; page01ControlPanel.add(page01BlueCkBx);
&nbsp;&nbsp;&nbsp; page01.add(page01ControlPanel,BorderLayout.CENTER);
&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructPage01
&nbsp; //-----------------------------------------------------//

&nbsp; //This method processes the image according to the
&nbsp; // controls located on the page in the tabbed pane that
&nbsp; // shows Posterizing on the tab.&nbsp; This method is called
&nbsp; // from within a switch statement in the method named
&nbsp; // processImg.&nbsp; Note that this method processes the image
&nbsp; // using three arrays.
&nbsp; BufferedImage processPage01(BufferedImage theImage){

&nbsp;&nbsp;&nbsp; int numberLevels = 1;
&nbsp;&nbsp;&nbsp; try{//Get input value from the text field.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numberLevels =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Integer.parseInt(page01TextField.getText());
&nbsp;&nbsp;&nbsp; }catch(java.lang.NumberFormatException e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page01TextField.setText("Bad Input");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numberLevels = 1;//Override bad user input.
&nbsp;&nbsp;&nbsp; }//end catch
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Guarantee that the number of levels falls within the
&nbsp;&nbsp;&nbsp; // allowable range.&nbsp; Don't allow divison by 0.
&nbsp;&nbsp;&nbsp; if((numberLevels &lt;= 0) || (numberLevels &gt; 256)){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page01TextField.setText("Bad Input");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; numberLevels = 1;//Override bad user input.
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Compute the number of adjacent elements that will
&nbsp;&nbsp;&nbsp; // specify the same color value.
&nbsp;&nbsp;&nbsp; int binSize = 256/numberLevels;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create array objects that will be populated with
&nbsp;&nbsp;&nbsp; // data that is used to populate the lookup table.
&nbsp;&nbsp;&nbsp; //Note that by default these arrays are populated with
&nbsp;&nbsp;&nbsp; // all zero values.
&nbsp;&nbsp;&nbsp; short[] red = new short[256];
&nbsp;&nbsp;&nbsp; short[] green = new short[256];
&nbsp;&nbsp;&nbsp; short[] blue = new short[256];
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create and populate an array object with master data
&nbsp;&nbsp;&nbsp; // that will be used to populate the specific arrays
&nbsp;&nbsp;&nbsp; // for the colors that are to be processed.
&nbsp;&nbsp;&nbsp; short[] masterData = new short[256];
&nbsp;&nbsp;&nbsp; for(int cnt = 0;cnt &lt; 256;cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short value =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (short)((cnt/binSize)*binSize + binSize - 1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Clip the values at 0 and 255.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(value &gt;= 256) value = 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(value &lt; 0) value = 0;//Probably not possible.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; masterData[cnt] = value;
&nbsp;&nbsp;&nbsp; }//end for loop

&nbsp;&nbsp;&nbsp; //Examine the check boxes.&nbsp; If any checkbox has been
&nbsp;&nbsp;&nbsp; // checked, reset the corresponding array to point it
&nbsp;&nbsp;&nbsp; // to the array containing the master data.&nbsp; Otherwise,
&nbsp;&nbsp;&nbsp; // it will contain all zero values by default.
&nbsp;&nbsp;&nbsp; if(page01RedCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; red = masterData;
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; if(page01GreenCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; green = masterData;
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; if(page01BlueCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blue = masterData;
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Process the image and return the result.
&nbsp;&nbsp;&nbsp; return processImageForThePage(theImage,red,green,blue);

&nbsp; }//end processPage01
&nbsp; //-----------------------------------------------------//
&nbsp;
&nbsp; //This method constructs the page in the tabbed pane that
&nbsp; // shows Custom Transforms on the tab.&nbsp; This method is
&nbsp; // called from the primary constructor.&nbsp; This page
&nbsp; // illustrates the use of custom transformations of the
&nbsp; // values in the color bands.
&nbsp; void constructPage02(){
&nbsp;&nbsp;&nbsp; page02.setName("Custom Transforms");//Tab label.
&nbsp;&nbsp;&nbsp; page02.setLayout(new BorderLayout());
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create and add the instructional text to the page.
&nbsp;&nbsp;&nbsp; String text = "CUSTOM TRANSFORMS\n"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "This page illustrates the use of two different "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "custom transforms, one based on the log to the "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "base 10, and the other based on the equation of "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "a straight line.&nbsp; Both transforms are designed "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "to boost the intensity of pixels with low color "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "values.\n\n"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "Specify the color bands that you want to process "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "by checking the checkboxes.\n\n"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "Select a radio button to select a transform.&nbsp; "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "For the linear transform, enter a positive slope "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "that is &lt;= 1.0.&nbsp; Try a slope of 0.85 for "
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "example\n\n"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "Then click the Replot button.";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Note:&nbsp; The number of columns specified for the
&nbsp;&nbsp;&nbsp; // following TextArea is immaterial because the
&nbsp;&nbsp;&nbsp; // TextArea object is placed in the NORTH location of
&nbsp;&nbsp;&nbsp; // a BorderLayout.
&nbsp;&nbsp;&nbsp; TextArea textArea = new TextArea(text,9,1,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TextArea.SCROLLBARS_NONE);
&nbsp;&nbsp;&nbsp; page02.add(textArea,BorderLayout.NORTH);
&nbsp;&nbsp;&nbsp; textArea.setEnabled(false);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Construct the control panel and add it to the page.
&nbsp;&nbsp;&nbsp; Panel page02ControlPanel = new Panel();
&nbsp;&nbsp;&nbsp; page02ControlPanel.setLayout(new GridLayout(3,1));
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel subControlPanel00 = new Panel();
&nbsp;&nbsp;&nbsp; subControlPanel00.add(page02RedCkBx);
&nbsp;&nbsp;&nbsp; subControlPanel00.add(page02GreenCkBx);
&nbsp;&nbsp;&nbsp; subControlPanel00.add(page02BlueCkBx);
&nbsp;&nbsp;&nbsp; page02ControlPanel.add(subControlPanel00);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel subControlPanel01 = new Panel();
&nbsp;&nbsp;&nbsp; subControlPanel01.setLayout(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FlowLayout(FlowLayout.LEFT));
&nbsp;&nbsp;&nbsp; subControlPanel01.add(page02LogRadioButton);
&nbsp;&nbsp;&nbsp; page02ControlPanel.add(subControlPanel01);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Panel subControlPanel02 = new Panel();
&nbsp;&nbsp;&nbsp; subControlPanel02.setLayout(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new FlowLayout(FlowLayout.LEFT));
&nbsp;&nbsp;&nbsp; subControlPanel02.add(page02LinearRadioButton);
&nbsp;&nbsp;&nbsp; subControlPanel02.add(new Label("&nbsp; Slope ="));
&nbsp;&nbsp;&nbsp; subControlPanel02.add(page02TextField);
&nbsp;&nbsp;&nbsp; subControlPanel02.add(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new Label("must be &gt;= 0.0 and &lt;= 1.0"));
&nbsp;&nbsp;&nbsp; page02ControlPanel.add(subControlPanel02);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; page02.add(page02ControlPanel,BorderLayout.CENTER);
&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructPage02
&nbsp; //-----------------------------------------------------//

&nbsp; //This method processes the image according to the
&nbsp; // controls located on the page in the tabbed pane that
&nbsp; // shows Custom Transforms on the tab.&nbsp; This method is
&nbsp; // called from within a switch statement in the method
&nbsp; // named processImg.&nbsp; Note that this method processes the
&nbsp; // image using three arrays.&nbsp; It transforms the values
&nbsp; // in the color bands according to either a log
&nbsp; // transform, or a linear transform, with the choice
&nbsp; // being made by the user through the selection of a
&nbsp; // radio button.&nbsp; The net effect of both transforms is to
&nbsp; // emphasize or boost the intensity of colors having low
&nbsp; // values, thus causing the image to become brighter.
&nbsp; // The two transforms achieve this effect in different
&nbsp; // ways, however.
&nbsp; BufferedImage processPage02(BufferedImage theImage){
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create array objects that will be populated with
&nbsp;&nbsp;&nbsp; // data that is used to populate the lookup table.
&nbsp;&nbsp;&nbsp; // Note that by default these arrays are populated with
&nbsp;&nbsp;&nbsp; // all zero values.
&nbsp;&nbsp;&nbsp; short[] red = new short[256];
&nbsp;&nbsp;&nbsp; short[] green = new short[256];
&nbsp;&nbsp;&nbsp; short[] blue = new short[256];
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create and populate an array object with master data
&nbsp;&nbsp;&nbsp; // that will be used to populate the specific arrays
&nbsp;&nbsp;&nbsp; // for the colors that are selected to be processed.
&nbsp;&nbsp;&nbsp; short[] masterData = new short[256];
&nbsp;&nbsp;&nbsp; for(int cnt = 0;cnt &lt; 256;cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short value = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Select between log or linear transformation based
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // on the state of two radio buttons.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(page02LogRadioButton.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Perform a log conversion
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(cnt == 0){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Avoid computing the log of 0.&nbsp; Substitute the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // log of 1 instead.&nbsp; (Note that with J2SE 5.0,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // I could have used a static import directive
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // in order to eliminate the explicit reference
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // to the Math class in the following
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // expressions.)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (short)(Math.log10(1.0)*255/Math.log10(255));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (short)(Math.log10(cnt)*255/Math.log10(255));
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }else{//Linear conversion must have been selected
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Perform a linear conversion
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; double slope = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try{//Get the slope from the text field.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; slope =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Double.parseDouble(page02TextField.getText());
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }catch(java.lang.NumberFormatException e){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page02TextField.setText("Bad Input");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; slope = 0.0;//Override user input on bad input.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end catch

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Guarantee that the slope is positive and &lt;= 1.0.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if((slope &lt; 0.0) || (slope &gt; 1.0)){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; page02TextField.setText("Bad Input");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; slope = 0.0;//Override user input on bad input.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Compute the intercept of a straight line with the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // y-axis using the slope provided by the user.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Cause the line to go through a y-value of 255
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // at an x-value of 255.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int yIntercept = (int)(255.0 - 255.0*slope);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Compute the value of y for each value of x(cnt)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // using the equation of a straight line, which
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // is, y = slope*x + yIntercept
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; value = (short)(slope*cnt + yIntercept);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Guard against roundoff errors that might cause
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // the color values to go slightly outside their
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // allowed range of 0 through 255.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(value &lt; 0) value = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(value &gt; 255) value = 255;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end else

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; masterData[cnt] = value;
&nbsp;&nbsp;&nbsp; }//end for loop

&nbsp;&nbsp;&nbsp; //Examine the check boxes.&nbsp; If any checkbox has been
&nbsp;&nbsp;&nbsp; // checked, reset the corresponding array to point it
&nbsp;&nbsp;&nbsp; // to the array containing the master data.&nbsp; Otherwise,
&nbsp;&nbsp;&nbsp; // it will contain all zero values by default.
&nbsp;&nbsp;&nbsp; if(page02RedCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; red = masterData;
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; if(page02GreenCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; green = masterData;
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; if(page02BlueCkBx.getState() == true){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; blue = masterData;
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Process the image and return the processed result.
&nbsp;&nbsp;&nbsp; return processImageForThePage(theImage,red,green,blue);

&nbsp; }//end processPage02
&nbsp; //-----------------------------------------------------//
&nbsp;
&nbsp; //Use the LookupOp class from the Java 2D API along
&nbsp; // with three separate data arrays to process the
&nbsp; // color values in the selected color bands.&nbsp; The
&nbsp; // alpha value is not modified.&nbsp; This is a common method
&nbsp; // that is called by the code that processes each
&nbsp; // individual page in the tabbed pane.
&nbsp; BufferedImage processImageForThePage(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BufferedImage theImage,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short[] red,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short[] green,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; short[] blue){
&nbsp;&nbsp;&nbsp; //Create and populate a 2D array with data for the
&nbsp;&nbsp;&nbsp; // lookup table.&nbsp; Note that this is a 2D array, rather
&nbsp;&nbsp;&nbsp; // than a 1D array, which is the case when a single
&nbsp;&nbsp;&nbsp; // data array is used to process all three color bands.
&nbsp;&nbsp;&nbsp; short[][] lookupData = new short[][]{red,green,blue};

&nbsp;&nbsp;&nbsp; //Create the lookup table.&nbsp; The first parameter is an
&nbsp;&nbsp;&nbsp; // offset for extracting data from the array object.
&nbsp;&nbsp;&nbsp; //In this case, all of the data is extracted from the
&nbsp;&nbsp;&nbsp; // array object beginning at an index of 0.
&nbsp;&nbsp;&nbsp; ShortLookupTable lookupTable =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new ShortLookupTable(0,lookupData);

&nbsp;&nbsp;&nbsp; //Create the filter object. The second parameter
&nbsp;&nbsp;&nbsp; // provides the opportunity to use RenderingHints.
&nbsp;&nbsp;&nbsp; BufferedImageOp filterObject =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new LookupOp(lookupTable,null);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //For illustration purposes only, work backwards from
&nbsp;&nbsp;&nbsp; // the filterObject to get and display some data
&nbsp;&nbsp;&nbsp; // from the lookup table.&nbsp; Note that this is not an
&nbsp;&nbsp;&nbsp; // image-processing requirement.
&nbsp;&nbsp;&nbsp; displayTableData(filterObject);

&nbsp;&nbsp;&nbsp; //Apply the filter to the incoming image and return
&nbsp;&nbsp;&nbsp; // a reference to the resulting BufferedImage object.
&nbsp;&nbsp;&nbsp; // The second parameter can optionally specify an
&nbsp;&nbsp;&nbsp; // existing BufferedImage object to serve as a
&nbsp;&nbsp;&nbsp; // destination for the processed image.
&nbsp;&nbsp;&nbsp; return filterObject.filter(theImage, null);
&nbsp; }//end processImageForThePage
&nbsp; //-----------------------------------------------------//

&nbsp; //Print some column headers followed by data from the
&nbsp; // lookup table.&nbsp; Print every 32nd row beginning with
&nbsp; // row 0.&nbsp; Then print the data for row 255.
&nbsp; void displayTableData(BufferedImageOp filterObject){
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //First, get a 2D array containing data from the lookup
&nbsp;&nbsp;&nbsp; // table.
&nbsp;&nbsp;&nbsp; ShortLookupTable theTable = ((ShortLookupTable)(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (LookupOp)filterObject).getTable());
&nbsp;&nbsp;&nbsp; short[][] tableData = theTable.getTable();
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.out.println("Row\tRed\tGreen\tBlue");
&nbsp;&nbsp;&nbsp; for(int row = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; row&lt;tableData[0].length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; row += 32){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print((row) + "\t");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for(int col = 0;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col&lt;tableData.length;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; col++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(tableData[col][row] + "\t");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }//end inner loop
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp;&nbsp;&nbsp; }//end outer loop
&nbsp;&nbsp;&nbsp; System.out.println(255 + "\t" + tableData[0][255]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + "\t" + tableData[1][255] + "\t"
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + tableData[2][255]);
&nbsp;&nbsp;&nbsp;
&nbsp; }//end displayTableData
&nbsp;
&nbsp; //-----------------------------------------------------//

&nbsp; //The following method must be defined to implement the
&nbsp; // ImgIntfc05 interface.&nbsp; It is called by the framework
&nbsp; // program named ImgMod05.
&nbsp; public BufferedImage processImg(BufferedImage theImage){
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; BufferedImage outputImage = null;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Process the page in the tabbed pane that has been
&nbsp;&nbsp;&nbsp; // selected by the user.
&nbsp;&nbsp;&nbsp; switch(tabbedPane.getSelectedIndex()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 0:outputImage = processPage00(theImage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 1:outputImage = processPage01(theImage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case 2:outputImage = processPage02(theImage);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;
&nbsp;&nbsp;&nbsp; }//end switch

&nbsp;&nbsp;&nbsp; return outputImage;
&nbsp; }//end processImg

}//end class ImgMod39<b><font face="Courier New,Courier">

<a href="#Listing_38">Listing 38</a></font></b></pre></td></tr></tbody></table><p> </p>
<hr align="center" size="3" width="100%">
<p>Copyright 2006, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h4>About the author</h4><b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
java 2D image pixel framework filter&nbsp;LookupOp </p>
<p>-end- </p>
<p>&nbsp;</p>
<p> <br>
&nbsp; </p>
<br>
<br>
<br>
<br>
</body>
</html>
