<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->JavaBeans, Properties of Beans, Simple and Indexed<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 508, Revised 02/19/98.
<li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#overview of properties">Overview of Properties</a></li>

<li><a href="#design patterns for simple properties">Design Patterns for Simple
Properties</a></li>

<li><a href="#design patterns for boolean properties">Design Patterns for Boolean
Properties</a></li>

<li><a href="#design patterns for indexed properties">Design Patterns for Indexed
Properties</a></li>

<li><a href="#sample bean program">Sample Bean Program</a></li>

<li><a href="#sample test program">Sample Test Program</a></li>

<li><a href="#interesting code fragments from the bean program">Interesting
Code Fragments from the Bean Program</a></li>

<li><a href="#interesting code fragments from the test program">Interesting
Code Fragments from the Test Program</a></li>

<li><a href="#program listing for the bean program">Program Listing for the
Bean Program</a></li>

<li><a href="#program listing for the test program">Program Listing for the
Test Program</a></li>


<p><hr align=left width="100%"><center><h2><a name="preface"></a><b><font color="#ff0000">Preface</font></b></h2></center>
Students in Prof. Baldwin's <b>Advanced Java Programming</b> classes at
ACC are responsible for knowing and understanding all of the material in
this lesson.

<p>The material in this lesson is extremely important. However, there is
simply too much material to be covered in detail during lecture periods.
Therefore, students in Prof. Baldwin's <b>Advanced Java Programming</b>
classes at ACC will be responsible for studying this material on their
own, and bringing any questions regarding the material to class for discussion.

<p>JDK 1.1 was released on February 18, 1997 and JDK 1.1.1 was released
on March 27, 1997. This lesson was originally written on April 13, 1997
using the software and documentation in the JDK 1.1.1 download package
along with the April 97 release of the BDK 1.0 download package.

<p>You may be wondering why I continue to provide this information. The
reason is simple. The Java JDK and BDK continue to evolve at a very rapid
rate with bugs being fixed with each new release. For example, you may
read a lesson and test the programs in that lesson using a later version
of the JDK and BDK than was used when the lesson was originally written.
In some cases, you may get different results. In that case, you need to
be aware that things may have changed with the development software.

<p>For example, earlier lessons which were based on the Beta 3 version
of JDK 1.1 discussed a coordinate offset problem when extracting mouse
coordinates from a mouse event. As of JDK 1.1.1, that problem no longer
exists. I don't know whether it was fixed in JDK 1.1 Final or JDK 1.1.1,
but it has been fixed.

<p>Also, an earlier lesson based on the February 1997 release of BDK 1.0
had an undocumented and unexpected requirement for special code to properly
size a bean when it is placed in the BeanBox. That requirement no longer
exists in the April 1997 version and in that respect, the BeanBox seems
to behave as would be expected. Apparently that was a bug that has also
been fixed.
<center><h2><a name="introduction"></a><font color="#ff0000">Introduction</font></h2></center>
This lesson summarizes information presented earlier on <i>Simple </i>properties
and provides information not previously discussed on <i>Indexed </i>properties.
An example <b>bean </b>class is developed that includes <i>Indexed</i>
properties. This <b>bean </b>class is examined with the <b>Introspector</b>
and is tested with a test program designed specifically to exercise the
<b>get</b> and <b>set</b> methods for the <i>Indexed</i> property.

<p>According to JavaSoft,
<ul>"A Java Bean is a reusable software component that can be manipulated
visually in a builder tool."</ul>
The purpose of a Bean is to be installed in the toolbox of a visual builder
tool (<b>VBT)</b> so that it can be incorporated into new applications
and applets with <u>no requirement</u> to recompile the code for the Bean.
Furthermore, two or more Beans should be able to be installed in such an
application and caused to communicate with one another without the requirement
to recompile either of them.

<p>The following five attributes are common to Beans:
<ul><li>
Introspection</li>

<li>
Properties</li>

<li>
Events</li>

<li>
Customization</li>

<li>
Persistence</li></ul>
Previous lessons have provided a general introduction to beans, have provided
instructions on how to use the BeanBox, and have discussed Introspection
in detail. This lesson will concentrate on certain aspects of Properties.
Future lessons will continue the discussion of Properties and will discuss
the other attributes as well.
<center><h2><a name="overview of properties"></a><font color="#ff0000">Overview of
Properties</font></h2></center>
In the simplest case, a property of a Bean is represented by an instance
variable whose value can be manipulated using a pair of <i>set</i> and
<i>get</i> methods. The <b>Introspector </b>uses <i>design patterns</i>
to identify propeties.

<p>If the <i>set</i> method exists without a corresponding <i>get</i> method,
then the property is a <i>write-only</i> property. Similarly, if the <i>get</i>
method exists whthout a corresponding <i>set</i> method, then the property
is a <i>read-only</i> property.

<p>It is also possible to forego <i>design patterns</i> and provide explicit
information regarding various aspects of the interface including Properties.

<p>The <b>Introspector </b>will accept an <i>is</i> method as an alternative
to or in addition to a <i>get</i> method for the special case of <b>boolean</b>
properties.

<p>There are four kinds of properties:
<ul><li>
Simple</li>

<li>
Indexed</li>

<li>
Bound</li>

<li>
Constrained</li></ul>
This lesson will concentrate on <i>Simple </i>and <i>Indexed </i>properties.
<i>Bound </i>and <i>Constrained </i>properties will be discussed in a future
lesson. Explicit specification of properties will also be covered in a
future lesson.
<center><h2><a name="design patterns for simple properties"></a><font color="#ff0000">Design
Patterns for Simple Properties</font></h2></center>
The <b>Introspector </b>uses <i>design patterns</i> to locate properties
by looking for methods having signatures of the form
<ul><tt>public void set&lt;PropertyName>(&lt;PropertyType> a)</tt>

<p><tt>public &lt;PropertyType> get&lt;PropertyName>()</tt></ul>
The existence of a matching pair of such methods is regarded as defining
a <i>read-write </i>property whose name will be &lt;propertyName>. (Note
the change in case of the first letter in the property name. The rules
for upper and lower case were explained in the lesson on the <b>Introspector</b>.)

<p>The two methods are used to <i>get</i> and <i>set</i> the property values
as the names of the methods imply.

<p>Both methods in the pair may be located either in the same class, or
one may be in a subclass and the other may be in a superclass.

<p>If only one of the methods from the pair exists, then it is regarded
either as a <i>read-only</i> or a <i>write-only</i> property.

<p>The default assumption is that the property is neither <i>bound </i>nor
<i>constrained</i>. As mentioned earlier, this will be discussed in more
detail in a subsequent lesson.

<p>Reflecting the above general description in more concrete terms might
result in the following pair of methods for a property named <b>myProperty</b>
of type <b>int</b>.
<ul><tt>public void setMyProperty(int a){//...};</tt>

<p><tt>public int getMyProperty(){//...};</tt></ul>

<center><h2><a name="design patterns for boolean properties"></a><font color="#ff0000">Design
Patterns for Boolean Properties</font></h2></center>
As a special case for <b>boolean</b> properties, the <b>Introspector </b>will
recognize the following form either in place of or in addition to the <i>get</i>
method.
<ul><tt>public boolean is&lt;PropertyName>()</tt></ul>
In either case, if the “is&lt;PropertyName>” method is present for a boolean
property then it will be used to read the property value.

<p>An example for a boolean property named <b>ready</b> might be:
<ul><tt>public boolean isReady(){//...}</tt>

<p><tt>public void setReady(boolean m){//...}</tt></ul>
It is important to remember that the instance variable used to maintain
the value of the property is not required to have the same name as the
property, but it may have the same name.
<center><h2><a name="design patterns for indexed properties"></a><font color="#ff0000">Design
Patterns for Indexed Properties</font></h2></center>
An indexed property is a property having multiple values stored in an array.
The following design patterns are regarded as indicating a property of
this type.
<ul><tt>public &lt;PropertyElementType> get&lt;PropertyName>(int a)</tt>

<p><tt>public void set&lt;PropertyName>(int a, &lt; PropertyElementType>
b)</tt></ul>
where the value passed to the integer parameter is the <u>index</u> of
the element of interest.

<p>The following example program defines a property according to this design
pattern. Application of the <b>Introspector </b>using JDK 1.1.1 found but
did not successfully report the accessor methods for this property. This
may be a bug in the JDK 1.1.1 Introspector, or may be an error in my program.
I'm not certrain as of this writing (April 14, 1997).

<p>It is also possible to have accessor methods which read and/or write
the <u>entire array</u>. This results in design patterns of the following
form:
<ul><tt>public &lt;PropertyType>[] get&lt;PropertyName>()</tt>

<p><tt>public void set&lt;PropertyName>(&lt;PropertyType> a[])</tt></ul>
Taking all of this into account might lead to the following four methods
in the design pattern for an indexed property of type <b>MyType</b> named
<b>myProperty</b>.
<ul><tt>public MyType getMyProperty(int a) //return an element</tt>

<p><tt>public void setMyProperty(int a, MyType b) //set an element</tt>

<p><tt>public MyType[] getMyProperty() //return an array</tt>

<p><tt>public void setMyProperty(MyType a[]) //set an array</tt></ul>

<center><h2><a name="sample bean program"></a><font color="#ff0000">Sample Bean Program</font></h2></center>
In this lesson, we will deal with two different programs. One program is
a program that creates a bean. The other program is a program used to partially
test the bean. This section deals with the program used to create the bean.

<p>This program was designed to be compiled and executed under JDK 1.1.1.
It was tested using JDK 1.1.1 and the Apr97 version of the BDK 1.0 under
Win95. As mentioned earlier, this is important information. Testing the
same program using a later version of the JDK or BDK may yield different
results.

<p>The purpose of this program is to illustrate <i>simple </i>and <i>indexed
</i>properties. An illustration of <i>bound </i>and <i>constrained </i>properties
is deferred until a future lesson.

<p>This bean contains three properties: a <i>simple </i><b>Color </b>property
named <b>color</b>, a <i>simple </i><b>boolean </b>property named <b>ready</b>,
and an <i>indexed </i><b>int </b>property named <b>indexedProperty</b>.
(It also contains a read-only property named <b>preferredSize</b> which
resulted from providing that information for the benefit of the layout
manager.)

<p>The behavior of the properties was first tested by installing the bean
in the BeanBox and observing the behavior.

<p>The bean contains a method named <b>makeBlue() </b>which sets the background
color of the bean to blue by invoking the <i>set </i>method of the <b>color
</b>property. This method was included for the sole purpose of illustrating
the setting of a property by invoking its <i>set</i> method under program
control.

<p>A button was installed in the BeanBox along with this bean. By linking
the <b>actionPerformed()</b> event of the button to the <b>makeBlue()</b>
method of the bean, that button was used to invoke the <b>makeBlue()</b>
method which in turn demonstrated the ability to set the color property
under program control. When the button was clicked, the background color
of the bean burned blue.

<p>It was also observed that the <b>color </b>property and the <b>ready
</b>property both appeared in the <i>property editor</i> of the BeanBox
and behaved as would be expected, both for setting and getting the values
of the properties. This was considered to be an adequate test of both of
the <i>simple </i>properties.

<p>The fact that the bean appeared in the BeanBox at the correct size was
considered to be an adequate test of the simple read-only property named
<b>preferredSize</b>.

<p>The <i>indexed </i>property <u>did not appear</u> in the <i>property
editor</i> of the BeanBox. I was unable to find anything in the documentation
on the BeanBox regarding the use of the property editor with <i>indexed
</i>properties, so I really am not certain what we should expect in this
regard.

<p>Primarily because we were unable to test the <i>indexed </i>property
using the BeanBox, the bean was tested further using two other approaches.

<p>First, a special test program named <b>Beans02Test</b> was written to
test the <i>indexed </i>property of the bean. This program tested the ability
to <i>set </i>and <i>get </i>the individual elements of the <i>indexed
</i>property under program control. It also tested the ability to <i>set
</i>and <i>get </i>the entire indexed property array under program control.

<p>The results of those tests appeared to be successful and are contained
in the comments in the program listing for that program. They will be discussed
in a later section.

<p>Next, an <b>Introspection </b>program named <b>Introspect01 </b>was
applied to the bean to report on its properties. The program named <b>Introspect01
</b>is a program developed in an earlier lesson that applies introspection
and reports on the <i>properties</i>, <i>events</i>, and <i>methods </i>of
a bean. Application of the <b>Introspect01</b> program to this bean produced
the following output (since this bean was developed to illustrate properties,
only that portion of the report dealing with properties is shown).

<p><hr width="100%"><pre>Name of bean:&nbsp; Beans02
Class of bean: class Beans02

==== Properties: ====
Name: indexedProperty
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class [I
&nbsp;Get method: public synchronized int[] Beans02.getIndexedProperty()
&nbsp;Set method: public synchronized void Beans02.setIndexedProperty(int[])
Name: preferredSize
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Dimension
&nbsp;Get method: public synchronized java.awt.Dimension Beans02.getPreferredSize()
&nbsp;Set method: null
Name: color
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; class java.awt.Color
&nbsp;Get method: public synchronized java.awt.Color Beans02.getColor()
&nbsp;Set method: public synchronized void Beans02.setColor(java.awt.Color)
Name: ready
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boolean
&nbsp;Get method: public synchronized boolean Beans02.isReady()
&nbsp;Set method: public synchronized void Beans02.setReady(boolean)
===========================================================================</pre>
The report on all of the <i>simple </i>properties look correct.

<p>The <b>Type </b>specification for the <i>indexed </i>property looks
a little strange. Otherwise, the report looks correct insofar as the <i>set
</i>and <i>get </i>methods for setting and getting the <u>entire array</u>
of indexed property values is concerned.

<p>However, it is bothersome that the <b>Introspector </b>did not also
report the <i>set </i>and <i>get </i>methods for setting and getting a
single indexed element for the <i>indexed </i>property.

<p>To further investigate this, the methods that <i>set </i>and <i>get
</i>the entire indexed property were removed from the program. Then the
program was recompiled and tested again using the <b>Introspector</b>.
When this was done, the <b>Introspector </b>reported the following regarding
the indexed property:

<p><hr width="100%"><pre>Name: indexedProperty
&nbsp;Type:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; null
&nbsp;Get method: null
&nbsp;Set method: null
===========================================================================</pre>
This is definitely <u>not what we would hope to see</u>. The <b>Introspector
</b>appears to be able to recognize the existence of the <i>indexed </i>property,
but does not properly report on the accessor methods for the individual
elements. I don't know if this is a bug in the system or an error in my
program. Again, for the record, these results were obtained using JDK 1.1.1.
Performing the same tests with a later version may produce different results.
<br>&nbsp;
<table border bgcolor="#80ffff" ><tr><td>Note: This same test was performed again in October 1997 using JDK
1.1.3 and the results were the same. The <b>Introspector</b> still didn't
seem to be able to properly report on the accessor methods for the individual
elements.</td></tr></table>
With respect to getting different results from later versions of the JDK
and BDK, note that the undocumented requirement for a special <b>sizeToFit()</b>
method that existed in the Feb97 version of BDK 1.0 was eliminated in the
Apr97 version. For more details on this, see the earlier lesson on the
skeleton bean. It now appears that this was a bug in the Feb97 version
that was eliminated in the Apr97 version.

<p>For the record, the batch file used to install this bean in the beanbox
contained the following:
<ul><tt>jar cfm ..\jars\Beans02.jar Beans02.mft sunw\demo\beans02\*.class</tt></ul>
The manifest file named <b>Beans02.mft</b> used in conjunction with the
batch file to install the bean in the beanbox contained the following:
<ul><tt>Name: sunw/demo/beans02/Beans02.class</tt><br><tt>Java-Bean: True</tt></ul>
The following package specification was required to install the Bean in
the BeanBox. Note that the package specification changes depending on where
the Bean is installed in the directory structure.
<ul><tt>package sunw.demo.beans02;</tt></ul>

<center><h2><a name="sample test program"></a><font color="#ff0000">Sample Test Program</font></h2></center>
As mentioned above, the BeanBox could not be adequately used to test the
<i>indexed</i> property of this bean. Therefore, a special test program
was written to test just that aspect of the bean.

<p>This program was designed to be compiled and executed under JDK 1.1.1.
The program was tested using JDK 1.1.1 under Win95.

<p>This is a minimal test program for <b>Beans02.java</b>. It is designed
to test only the <i>indexed </i>property of <b>Beans02</b>. The other properties
of <b>Beans02 </b>can be tested adequately in the BeanBox.

<p>The program executes a series of statements that invoke the <i>set </i>and
<i>get </i>methods of the <i>indexed </i>property of the bean both for
individual elements and for the entire indexed property array.

<p>The test appeared to be completely successful. The code in this test
program is almost trivial and is interesting only because it is being used
to test an <i>indexed </i>property of a bean. Since it is so simple, it
won't be discussed in detail at this point. However, the entire program
listing as well as the output produced by the program is provided at the
end of this lesson for your review.
<center><h2><a name="interesting code fragments from the bean program"></a><font color="#ff0000">Interesting
Code Fragments from the Bean Program</font></h2></center>
The first interesting code fragment is the declaration of the three instance
variables that are used to maintain the property values. This is followed
immediately by the constructor that, among other things, instantiates an
array object for maintenance of the values of the <i>indexed </i>property.
Recall that in Java, you must declare a reference variable for an array
and then instantiate an actual array object which is referenced by that
reference variable.
<pre><hr width="100%">
&nbsp; protected Color myColor;
&nbsp; protected boolean readyPropertyValue = true;
&nbsp; protected int[] myIndexedInstanceVariable;
&nbsp;&nbsp;
&nbsp; public Beans02(){//constructor
&nbsp;&nbsp;&nbsp; myColor = Color.yellow;//initialize the background color to yellow
&nbsp;&nbsp;&nbsp; setBackground(myColor);
&nbsp;&nbsp;&nbsp; //Instantiate an array object to maintain the indexed property
&nbsp;&nbsp;&nbsp; myIndexedInstanceVariable = new int[3];
&nbsp; }//end constructor</pre>
The next interesting code fragment is the pair of <i>set</i> and <i>is</i>
methods which, along with the instance variable named <b>readyPropertyValue,</b>
constitutes the <i>simple</i> property named <b>ready</b>. Recall that
for the special case of <b>boolean</b> properties, either a <i>get</i>
method or an <i>is</i> method will satisfy the <i>design pattern</i> requirement.
<pre><hr width="100%">
&nbsp; public synchronized boolean isReady(){
&nbsp;&nbsp;&nbsp; return readyPropertyValue;
&nbsp; }//end isDummyInstanceVariable()
&nbsp;&nbsp;
&nbsp; public synchronized void setReady(boolean data){
&nbsp;&nbsp;&nbsp; readyPropertyValue = data;
&nbsp; }//end setReady
</pre>
The next interesting code fragment is the pair of <i>set</i> and <i>get</i>
methods which, along with the instance variable named <b>myColor,</b> constitute
the <i>simple</i> property named <b>color</b>.
<pre><hr width="100%">
&nbsp; public synchronized void setColor(Color inColor){
&nbsp;&nbsp;&nbsp; myColor = inColor;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp; }//end setColor()

&nbsp; public synchronized Color getColor(){
&nbsp;&nbsp;&nbsp; return myColor;
&nbsp; }//end getColor</pre>
The next interesting code fragment is the method named <b>makeBlue()</b>
that was included in the bean solely to illustrate the ability to modify
the <b>color</b> property under program control by invoking its <i>set</i>
method. Properties are often modified at design time using property editors
in builder tools, and are often modified at runtime by invoking <i>set</i>
methods under program control.
<pre><hr width="100%">
&nbsp; public synchronized void makeBlue(){
&nbsp;&nbsp;&nbsp; this.setColor(Color.blue);
&nbsp; };//end makeBlue()

</pre>
That brings us to the interesting code fragments for the <i>indexed</i>
properties. The following two methods are intended to satisfy the <i>design
pattern</i> requirement for setting and getting individual elements in
an <i>indexed </i>property. Although these methods seem to match the specifications,
they don't seem to be properly recognized by the <b>Introspector </b>in
JDK 1.1.1 as discussed in an earlier section.

<p>They do respond properly to the test program which is listed at the
end of the lesson. It seems as if the <i>design pattern</i> matching capability
of the <b>Introspector</b> doesn't work correctly for the case where the
<i>get</i> method signature contains an argument and the <i>set</i> method
signature contains two arguments which is the requirement for getting and
setting individual indexed values for an <i>indexed</i> property.
<pre><hr width="100%">
&nbsp; public synchronized int getIndexedProperty(int a){
&nbsp;&nbsp;&nbsp; return myIndexedInstanceVariable[a];
&nbsp; }//end getIndexedProperty

&nbsp; public synchronized void setIndexedProperty(int a, int b){
&nbsp;&nbsp;&nbsp; myIndexedInstanceVariable[a] = b;&nbsp;&nbsp;
&nbsp; }//end setIndexedProperty</pre>
The next interesting code fragment is the following pair of methods that
satisfy the <i>design pattern</i> requirement for setting and getting the
entire array that maintains the values of an <i>indexed</i> property. Although
the <i>design pattern</i> for setting and getting individual elements in
the indexed property don't seem to work properly, the <i>design pattern</i>
for setting and getting all of the elements as a group does seem to work
properly. See the discussion in an earlier section.
<pre><hr width="100%">
&nbsp; public synchronized int[] getIndexedProperty(){
&nbsp;&nbsp;&nbsp; return myIndexedInstanceVariable;&nbsp;&nbsp;
&nbsp; }//end int[] getIndexedProperty()

&nbsp; public synchronized void setIndexedProperty(int a[]){
&nbsp;&nbsp;&nbsp; myIndexedInstanceVariable = a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//
</pre>
The next interesting code fragment is interesting only because it represents
a bug fix in the Apr97 version of BDK 1.0. This is a relatively standard
method for establishing the size of a component at display time. The Feb97
version of the BDK did not properly use this method to set the size of
the bean, but that problem has been fixed in the Apr97 version.
<pre><hr width="100%">
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()
</pre>

<center><h2><a name="interesting code fragments from the test program"></a><font color="#ff0000">Interesting
Code Fragments from the Test Program</font></h2></center>
As mentioned earlier, the test program is so simple that it really doesn't
contain any interesting code fragments. The program simply invokes the
<i>set</i> and <i>get</i> methods of the <i>indexed</i> property, both
for individual elements and for the complete set of <i>indexed</i> property
values. The results are entirely as would be expected. A listing of the
program and the output produced by the program is included at the end of
the lesson.
<center><h2><a name="program listing for the bean program"></a><font color="#ff0000">Program
Listing for the Bean Program</font></h2></center>
This section contains a commented listing of the bean program. See the
previous sections for an operational description of the program.

<p><hr width="100%"><pre>/*File Beans02.java.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed under JDK 1.1.1.
It was tested using JDK 1.1.1 and the Apr97 version of the BDK 1.0&nbsp;
under Win95.&nbsp;&nbsp;

The purpose of this program is to illustrate simple and indexed&nbsp;
properties.

The following package specification was required to install the Bean in&nbsp;
the BeanBox.&nbsp; Note that the package specification changes depending on&nbsp;
where the Bean is installed in the directory structure.
*/
package sunw.demo.beans02;

import java.awt.event.*;
import java.awt.*;
import java.io.Serializable;
//=========================================================================
public class Beans02 extends Canvas implements Serializable{

&nbsp; //The following three instance variables are used for properties
&nbsp; protected Color myColor;
&nbsp; protected boolean readyPropertyValue = true;
&nbsp; protected int[] myIndexedInstanceVariable;
&nbsp;&nbsp;
&nbsp; public Beans02(){//constructor
&nbsp;&nbsp;&nbsp; myColor = Color.yellow;//initialize the background color to yellow
&nbsp;&nbsp;&nbsp; setBackground(myColor);
&nbsp;&nbsp;&nbsp; //Instantiate an array object to maintain the indexed property
&nbsp;&nbsp;&nbsp; myIndexedInstanceVariable = new int[3];
&nbsp; }//end constructor

&nbsp; //----------------------------------------------------------------------
&nbsp; //The following "set" and "is" methods in conjunction with the instance
&nbsp; // variable readyPropertyValue constitute a boolean property named ready.
&nbsp; // For boolean properties, either a "get" method or an "is" method will
&nbsp; // support the design pattern requirement.
&nbsp; public synchronized boolean isReady(){
&nbsp;&nbsp;&nbsp; return readyPropertyValue;
&nbsp; }//end isDummyInstanceVariable()
&nbsp;&nbsp;
&nbsp; public synchronized void setReady(boolean data){
&nbsp;&nbsp;&nbsp; readyPropertyValue = data;
&nbsp; }//end setReady
&nbsp;&nbsp;
&nbsp; //----------------------------------------------------------------------
&nbsp; //The following "set" and "get" methods in conjunction with the instance
&nbsp; // variable myColor constitute a property of type Color named color.&nbsp;&nbsp;
&nbsp; public synchronized void setColor(Color inColor){
&nbsp;&nbsp;&nbsp; myColor = inColor;
&nbsp;&nbsp;&nbsp; this.setBackground(myColor);
&nbsp; }//end setColor()

&nbsp; public synchronized Color getColor(){
&nbsp;&nbsp;&nbsp; return myColor;
&nbsp; }//end getColor

&nbsp; //---------------------------------------------------------------------
&nbsp; //The following method is included to demonstrate that the color
&nbsp; // property can be set under program control by invoking its set access
&nbsp; // method.
&nbsp; public synchronized void makeBlue(){
&nbsp;&nbsp;&nbsp; this.setColor(Color.blue);
&nbsp; };//end makeBlue()
&nbsp; //---------------------------------------------------------------------
&nbsp;&nbsp;
&nbsp; //The following two methods are intended to satisfy the design pattern&nbsp;
&nbsp; // for setting and getting elements from an indexed property.&nbsp; See the
&nbsp; // comments at the beginning of the program for a further discussion
&nbsp; // on this.

&nbsp; public synchronized int getIndexedProperty(int a){
&nbsp;&nbsp;&nbsp; return myIndexedInstanceVariable[a];
&nbsp; }//end getIndexedProperty

&nbsp; public synchronized void setIndexedProperty(int a, int b){
&nbsp;&nbsp;&nbsp; myIndexedInstanceVariable[a] = b;&nbsp;&nbsp;
&nbsp; }//end setIndexedProperty
&nbsp; //---------------------------------------------------------------------
&nbsp;&nbsp;
&nbsp; //The following two methods satisfy the design pattern for setting and
&nbsp; // getting the entire array for an indexed property.
&nbsp;&nbsp;
&nbsp; public synchronized int[] getIndexedProperty(){
&nbsp;&nbsp;&nbsp; return myIndexedInstanceVariable;&nbsp;&nbsp;
&nbsp; }//end int[] getIndexedProperty()

&nbsp; public synchronized void setIndexedProperty(int a[]){
&nbsp;&nbsp;&nbsp; myIndexedInstanceVariable = a;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//
&nbsp;&nbsp;
&nbsp; //---------------------------------------------------------------------
&nbsp; //This method defines the display size of the object when it appears
&nbsp; // in the BeanBox.&nbsp; It is called automatically by the layout manager
&nbsp; // or whatever is controlling the placement and size of components&nbsp;
&nbsp; // in the display window.&nbsp; Note that the Feb97 version of BDK 1.0 did
&nbsp; // not properly support this approach but the Apr97 version does
&nbsp; // support it.
&nbsp; public synchronized Dimension getPreferredSize(){
&nbsp;&nbsp;&nbsp; return new Dimension(50,50);
&nbsp; }//end getPreferredSize()
&nbsp;&nbsp;&nbsp;&nbsp;
}//end class Beans02.java</pre>

<center><h2><a name="program listing for the test program"></a><font color="#ff0000">Program
Listing for the Test Program</font></h2></center>
This section contains a listing of a test program written to test the <i>indexed</i>
property of the bean program. The output from running the test is also
contained in the listing.

<p><hr width="100%"><pre>/*File Beans02Test.java.java Copyright 1997, R.G.Baldwin
This program was designed to be compiled and executed under JDK 1.1.1.
The program was tested using JDK 1.1.1 and the Apr97 version of&nbsp;
BDK 1.0 under Win95.&nbsp;&nbsp;

This is a minimal test program for Beans02.java.&nbsp; It is designed to
test only the indexed property of Beans02.&nbsp; The other properties of
Beans02 can be tested adequately in the BeanBox.

Output from the program is:

Set, get, and display value of 30 in index 2
30
Get, display, and modify entire property array
0
0
30
Using modified array, set, get, and display entire property array
0
1


*/

import java.awt.*;
import java.awt.event.*;
//==========================================================
public class Beans02Test extends Frame{
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; new Beans02Test();
&nbsp; }//end main

&nbsp; public Beans02Test(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setLayout(new FlowLayout());
&nbsp;&nbsp;&nbsp; Beans02 myBean = new Beans02();//instantiate a Bean object
&nbsp;&nbsp;&nbsp; add(myBean);//Add it to the Frame
&nbsp;&nbsp;&nbsp; setSize(250,200);
&nbsp;&nbsp;&nbsp; setVisible(true);

&nbsp;&nbsp;&nbsp; System.out.println("Set, get, and display value of 30 in index 2");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myBean.setIndexedProperty(2,30);//store value of 30 in index 2
&nbsp;&nbsp;&nbsp; System.out.println(myBean.getIndexedProperty(2));//get and display it

&nbsp;&nbsp;&nbsp; System.out.println("Get, display, and modify entire property array");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; int[] myArray = myBean.getIndexedProperty();//get the entire property array
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; myArray.length; cnt++){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(myArray[cnt]); //display it
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; myArray[cnt] = cnt;//modify it
&nbsp;&nbsp;&nbsp; }//end for loop

&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Using modified array, set, get, and display entire property array");&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myBean.setIndexedProperty(myArray);//set property with modified array
&nbsp;&nbsp;&nbsp; myArray = myBean.getIndexedProperty();//get the entire property array
&nbsp;&nbsp;&nbsp; for(int cnt = 0; cnt &lt; myArray.length; cnt++)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(myArray[cnt]); //display the modified version
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; this.addWindowListener(new Terminate());//terminate when Frame is closed&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class Beans02Test.java

//==================================================================
class Terminate extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);//terminate the program when the window is closed&nbsp;&nbsp;
&nbsp; }//end windowClosing
}//end class Terminate
//==================================================================</pre>
-end-<!--end--></body></html>