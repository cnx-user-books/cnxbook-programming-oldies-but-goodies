<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="author" content="richard g. baldwin">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">
<!--start-->
<center>
<h2>
<!--title-->JavaServer Pages and JavaBean Components, Part II</h2></center>
<b><i>by Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 764
<p>July 2, 2000
<ul>
<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#JavaBean Design Patterns">JavaBean Design Patterns</a></li>

<li>
<a href="#What If I Don't Want to Use Design Patterns">What If I Don't
Want to Use Design Patterns</a></li>

<li>
<a href="#Jack and the JavaBean Stalk">Jack and the JavaBean Stalk</a></li>

<li>
<a href="#The jsp:setProperty tag">The jsp:setProperty tag</a></li>

<li>
<a href="#The jsp:getProperty tag">The jsp:getProperty tag</a></li>

<li>
<a href="#JSP Syntax Summary">JSP Syntax Summary</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Introduction"></a><font color="#FF0000">Introduction</font></h2></center>
<b><font color="#FF0000">What is JSP?</font></b>
<p>JSP makes it possible to embed Java code fragments into special HTML
tags.
<p>A JSP engine automatically creates, compiles, and executes servlets
to implement the behavior of the combined HTML and embedded Java code.
<p><b><font color="#FF0000">Previous Lessons</font></b>
<p>Previous lessons have explained the use of the following JSP elements:
<ul>
<li>
Output comments</li>

<li>
Hidden comments</li>

<li>
Declarations</li>

<li>
Expressions</li>

<li>
Scriptlets</li>

<li>
The include directive</li>

<li>
The page directive</li>

<li>
The <b><font face="Arial Narrow">&lt;jsp.forward></font></b> tag</li>

<li>
The <font face="Arial Narrow"><b>&lt;jsp:useBean.../></b> </font>tag</li>
</ul>
<b><font color="#FF0000">JavaBean components, a broad subject</font></b>
<p>Because of the breadth of the JavaBean component aspect of JSP, I have
broken this topic into several lessons.&nbsp; The <a href="Java762.htm">previous</a>
lesson taught you how to
<ul>
<li>
Prepare a Bean for use,</li>

<li>
Invoke its setter and getter methods for simple properties, and</li>

<li>
Invoke ordinary exposed methods on the bean.</li>
</ul>
<b><font color="#FF0000">Digging deeper into Beans</font></b>
<p>This and subsequent lessons will continue the discussion of the use
of JavaBean components with JSP.
<p>In this lesson, I will provide some additional information on <i>design
patterns</i>.&nbsp; I will also show you how to set and get Bean property
values using the <b><font face="Arial Narrow">jsp:setProperties</font></b>
and
<b><font face="Arial Narrow">jsp:getProperties</font></b> tags of the
JSP engine.
<center>
<h2>
<a NAME="JavaBean Design Patterns"></a><font color="#FF0000">JavaBean Design
Patterns</font></h2></center>
JavaBean components are reusable software components.&nbsp; They are designed
to be integrated into a development environment (such as a Visual Builder
Tool or JSP) that can take advantage of their capabilities.
<p><b><font color="#FF0000">Integrated at the compiled level</font></b>
<p>Furthermore, they are not intended to be integrated at the source code
level making use of cut-and-past, or <i>include</i> methodology.&nbsp;
Rather, they are intended to be included at the compiled level.
<p><b><font color="#FF0000">Learning about the Bean</font></b>
<p>The development environment must be able to learn enough about the Bean
to be able to combine it with other beans, or other Java code.
<p>Furthermore, the development environment must be able to learn that
information from the compiled version of the Bean.
<p><b><font color="#FF0000">Properties, methods, and events</font></b>
<p>We normally say that the development environment must be able to learn
about the Bean's <i>properties</i>, <i>methods</i>, and <i>events</i>.
<p><b><font color="#FF0000">Reflection and introspection</font></b>
<p>This is accomplished using Java capabilities often referred to as low-level
reflection and introspection.&nbsp; (There are several lessons in my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">online</a>
Java tutorials discussing these topics.)
<p><b><font color="#FF0000">Concentrate on properties and methods</font></b>
<p>In these JSP lessons, I will concentrate on properties and methods.&nbsp;
Please see my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">online</a>
Java programming tutorials to learn about events, and also to learn more
about properties and methods.
<p><b><font color="#FF0000">What is a property?</font></b>
<p>A Bean is an object.&nbsp; A property of the Bean is a stored value,
or set of values, that helps to define the current state of the Bean.
<p>For example, the text value that comprises the caption displayed on
a common GUI button is a property of the <b>Button</b> object.
<p>Likewise, the size value for a frame is a property of a <b>Frame</b>
object.
<p><b><font color="#FF0000">Two flavors are available</font></b>
<p>Like ice cream, properties come in two flavors (obviously, ice cream
comes in more than two flavors).&nbsp; The two flavors of properties are:
<ul>
<li>
Simple</li>

<li>
Indexed</li>
</ul>
A <i>simple</i> property is a property that can have only one value at
any instant in time.
<p>An <i>indexed</i> property is a property that can have multiple values
accessible through a simple numeric index.
<p><b><font color="#FF0000">What distinguishes a property?</font></b>
<p>We also say that ordinary instance variables in an object help to define
its state at any instant in time.
<p>So, you say, "what is it that distinguishes a property from an ordinary
instance variable?" -- Good question!
<p><b><font color="#FF0000">Properties can be bound or constrained</font></b>
<p>One of the characteristics that distinguish between properties and ordinary
instance variables is that Java provides features for optionally causing
a property to be <i>bound</i> or <i>constrained</i>.
<p>Although you could do the same for ordinary instance variables, you
would have to write the code from scratch because there are no special
provisions for doing so.
<p><b><font color="#FF0000">What do I mean by bound or constrained?</font></b>
<p>Also like ice cream, either flavor of property can be delivered in three
forms (analogous to ice cream cones, ice cream sodas, and ice cream sundaes).&nbsp;
The three constructions are:
<ul>
<li>
Plain</li>

<li>
Bound</li>

<li>
Constrained</li>
</ul>
A plain property is one that doesn't have any special callback/registration
attributes.&nbsp; (If you are unfamiliar with callbacks and registration
in Java, see my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">online</a>
Java tutorials.)&nbsp; This is the default case.
<p><b><font color="#FF0000">Bound properties</font></b>
<p>A bound property is a property that has the ability to register one
or more interested listeners (or observers, or whatever you choose to call
them), and to notify each of them when the value of the property changes.
<p><b><font color="#FF0000">Constrained properties</font></b>
<p>A constrained property is one that has the ability to
<ul>
<li>
Register one or more interested listeners,</li>

<li>
Notify each of them immediately prior to a change in value of the property,
and</li>

<li>
Deal with the fact that any one of the listeners has the right to veto
the change.</li>
</ul>
A planned change that is vetoed by a listener doesn't take place.
<p><b><font color="#FF0000">Design patterns</font></b>
<p>Another thing that distinguishes between properties and ordinary instance
variables is the use of JavaBean design patterns.
<p><b><font color="#FF0000">What are JavaBean design patterns?</font></b>
<p>JavaBean design patterns make it possible for the Bean programmer to
notify the development environment of the existence of properties in the
Bean simply by adhering to a specific naming convention for the property's
<i>set</i>
and <i>get</i> methods.
<p>These methods are often referred to as <i>setters</i> and <i>getters.</i>
<p><b><font color="#FF0000">Tell me more about design patterns</font></b>
<p>I won't go into design patterns in detail in this lesson (see my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">online</a>
Java tutorials for more information).
<p>Basically, however, the existence of methods of the following form will
notify a Beans-compatible development environment that the Bean has a simple
property named <b>size</b>.&nbsp; This will be true regardless of whether
the properties are plain, bound, or constrained.
<p><b><font face="Arial Narrow">public void setSize(int inputValue){//...}</font></b>
<br><b><font face="Arial Narrow">public int getSize(){//...}</font></b>
<p>The design patterns specify names that include the words <i>set</i>
and <i>get</i>.&nbsp; That is probably why they are often called <i>setter</i>
and <i>getter</i> methods.
<p><b><font color="#FF0000">An alternative design pattern for boolean properties</font></b>
<p>If the type of the property is <b><font face="Arial Narrow">boolean</font></b>,
an alternative form of the getter method for a simple property named <b>finished</b>
is shown below:
<p><b><font face="Arial Narrow">public boolean isFinished(){//...}</font></b>
<p>This is a useful, self-documenting construct for the use of a boolean
property getter in a conditional clause, such as in an <b>if</b> statement,
for example.
<p><b><font face="Arial Narrow">if( theBean.isFinished() )...</font></b>
<p><b><font color="#FF0000">Note the change in case</font></b>
<p>Note the change in the case of the first letter of the property name
when used to construct the setter and getter method signatures.&nbsp; This
is important when you must specify the name of a property, such as when
using the <b><font face="Arial Narrow">jsp:setProperties</font></b> tag.
<p>There are some other special rules regarding case, but this is the most
common situation.
<p><b><font color="#FF0000">Other design patterns</font></b>
<p>Similar design-pattern concepts are used for indexed properties, as
well as for exposed ordinary methods and events.
<p><b><font color="#FF0000">A sample JavaBean component</font></b>
<p><a href="Java764-fig01.htm">Figure 1</a> is a sample JavaBean component
that makes use of design patterns to expose one simple property and one
ordinary method.
<p><font color="#FF0000"><b>The </b>size<b> property</b></font>
<p>The simple property named <b>size</b> is exposed as a result of the
inclusion of the following two methods in the class definition:
<p><b><font face="Arial Narrow">public void setSize(String size){//...}</font></b>
<br><b><font face="Arial Narrow">public String getSize(){//...}</font></b>
<p>I highlighted those two method signatures in red in Figure 1 to make
them easy to spot.
<p><b><font color="#FF0000">An ordinary method</font></b>
<p><a href="Java764-fig01.htm">Figure 1</a> also uses design patterns to
expose an ordinary method with the following signature:
<p><b><font face="Arial Narrow">public String exposedMethod(){//...}</font></b>
<p>I highlighted this method signature using green in <a href="Java764-fig01.htm">Figure
1</a> to make it easy to spot.
<p>For ordinary methods, the design-pattern rule is simply that all public
methods are exposed methods.
<center>
<h2>
<a NAME="What If I Don't Want to Use Design Patterns"></a><b><font color="#FF0000">What
If I Don't Want to Use Design Patterns</font></b></h2></center>
If you don't want to use design patterns, that is OK too.
<p>It is not necessary to use design patterns to expose the required <i>properties</i>,
<i>methods</i>,
and <i>events</i> when you design a Bean.&nbsp; However, if you don't use
design patterns, you will be required to do some extra work.
<p>I will show you how to design Beans without using design patterns in
a subsequent lesson
<center>
<h2>
<a NAME="Jack and the JavaBean Stalk"></a><font color="#FF0000">Jack and
the JavaBean Stalk</font></h2></center>
<font color="#000000">This is where things start feeling like the children's
story about "Jack and the JavaBean Stalk."&nbsp; You remember, Jack's mother
sent him to sell the cow to buy some food, but he traded the cow for a
bag full of magic JavaBean components.&nbsp; When he planted the Beans,
they did magic things.</font>
<p><font color="#000000">Our Beans, in conjunction with the JSP engine
will also do some magic things, as I will illustrate in the remainder of
this and the next lesson.</font>
<p><b><font color="#FF0000">JSP property tags</font></b>
<p><a href="Java764-fig02.htm">Figure 2</a> is a JSP page that contains
<b><font face="Arial Narrow">jsp:setProperty</font></b>
and <b><font face="Arial Narrow">jsp:getProperty</font></b> tags to set
and get values in the property named <b>size</b> in the bean referred to
by the variable named <b>theBean</b>.
<p>According to the <b><font face="Arial Narrow">jsp:useBean</font></b>
tag (shown in blue), the variable named <b>theBean</b> refers to the bean
named <b>BaldwinBeans.jspBeanTest001.</b>
<p><font color="#FF0000"><b>setSize()</b> <b>and</b> <b>getSize() not invoked
directly</b></font>
<p>The important thing to note here is that the Java code in this page
never directly invokes the <b>setSize()</b> and <b>getSize()</b> methods
of the Bean.
<p><b><font color="#FF0000">Java invokes property tags instead</font></b>
<p>Rather, the Java code executes tags named <b><font face="Arial Narrow">jsp:setProperty</font></b>
and <b><font face="Arial Narrow">jsp:getProperty</font></b>.
<p><b><font color="#FF0000">Property name and reference are specified</font></b>
<p>In both cases, the name of the property (<b>size)</b> is specified as
an attribute along with the name of the variable that refers to the Bean
(<b>theBean)</b>.
<p><b><font color="#FF0000">Here is magic</font></b>
<p>Since the Java code doesn't invoke the setter and getter methods directly,
this means that the JSP engine uses design patterns to find and execute
the corresponding <b>setSize()</b> and <b>getSize()</b> methods on the
Bean referred to by <b>theBean</b>.
<p><b><font color="#FF0000">Low-level reflection</font></b>
<p>Although it isn't obvious here, the JSP engine uses something referred
to as <i>low-level reflection</i> to accomplish this task.
<p>In the next lesson, we will see something that is even more magic commonly
referred to as <i>introspection</i>.
<p><b><font color="#FF0000">The browser output</font></b>
<p><a href="Java764-fig03.htm">Figure 3</a> is a replica of the output
from my browser when it is used to access the JSP page shown earlier in
<a href="Java764-fig02.htm">Figure
2</a>.
<p>As you can see by examining the two figures, the<b><font face="Arial Narrow">
jsp:getProperty</font></b> tag is first used to get and display the default
value of the property named <b>size</b>.&nbsp; (An HTML font tag is wrapped
around the <b><font face="Arial Narrow">jsp:getProperty</font></b> tag
to cause the value returned by the action of that tag to be displayed in
red.)
<p><b><font color="#FF0000">Default value is Medium</font></b>
<p>The value displayed is "Medium" as defined in the declaration of the
property's reference variable in <a href="Java764-fig01.htm">Figure 1</a>.
<p><b><font color="#FF0000">Change the value of the property</font></b>
<p>Then the <b><font face="Arial Narrow">jsp:setProperty</font></b> tag
is used to change the value of the property from "Medium" to "Small".
<p><b><font color="#FF0000">Get and display new property value</font></b>
<p>Then, the<b><font face="Arial Narrow"> jsp:getProperty</font></b> tag
is used again to get and display the new value of the property.
<p><b><font color="#FF0000">Review</font></b>
<p>In this example, the JSP engine uses JavaBean design patterns along
with low-level reflection to find the methods needed to set and get the
values of the property.
<p>Then it automatically invokes those methods to cause the specified action
to take place.
<p>My JSP page and my Bean code didn't provide any information to the JSP
engine about how to set and get the value of the property named
<b>size
</b>(other
than the use of design patterns).
<center>
<h2>
<a NAME="The jsp:setProperty tag"></a><font color="#FF0000">The jsp:setProperty
tag</font></h2></center>
I can't end this lesson without providing at least a small amount of technical
information.
<p>This tag can be used to set the value of one or more properties in a
JavaBean component.&nbsp; As illustrated in this lesson, the JSP engine
knows how to use the <i>set</i> methods of the Bean to set the properties.
<p>I will illustrate in the next lesson that the JSP engine also knows
how to use introspection along with an object of a class that implements
the <b>BeanInfo</b> interface to set the values of the properties.
<p><b><font color="#FF0000">Syntax of the tag</font></b>
<p>The syntax of the tag is as follows:
<p><font face="Arial Narrow"><font size=-2>&lt;jsp:setProperty</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
name="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp; {&nbsp; property=
"*" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" [ param="parameterName" ] |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" value=</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"{ string | &lt;%= expression %> }"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; }</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;/></font></font>
<p><b><font color="#FF0000">Usage</font></b>
<p>As you can see, the syntax can be rather complicated, indicating that
quite a lot of flexibility is available for setting the property value.
<p><b><font color="#FF0000">Using HTML form parameters</font></b>
<p>There are several ways by which you can use parameters submitted via
an HTML form to set the properties of a Bean.&nbsp; However, an understanding
of those techniques requires an understanding of HTML forms and servlets
and is beyond the scope of this lesson.
<p><b><font color="#FF0000">Getting more information</font></b>
<p>(If you have a further interest, you should first study my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">online</a>
tutorials on servlets, and then go to the Sun web site to obtain more detailed
information about the usage of the <b><font face="Arial Narrow">jsp:setProperties</font></b>
tag.)
<p><b><font color="#FF0000">What about indexed properties</font></b>
<p>Although this lesson deals only with simple properties, the <b><font face="Arial Narrow">jsp:setProperties</font></b>
tag can also be used to set the value of an indexed property in a Bean.&nbsp;
This involves providing a property value, which is a reference to an array.&nbsp;
The values stored in the array are used to set the individual values in
the indexed property.
<center>
<h2>
<a NAME="The jsp:getProperty tag"></a><font color="#FF0000">The jsp:getProperty
tag</font></h2></center>
This tag gets the value of a Bean property so that you can display it in
a result page.
<p>The tag gets a Bean property value using the property's <i>get</i> method,
converts the value of a Bean property to a <b>String</b> and stores it
in the out object.
<p><b><font color="#FF0000">Can also use introspection</font></b>
<p>As you will see in the next lesson, the JSP engine can also use this
tag to get the value of a property even when there aren't any get methods
defined by design patterns.&nbsp; In that case, the actual name of each
get method is defined by an object of a class that implements the <b>BeanInfo</b>
interface.
<p><b><font color="#FF0000">Syntax</font></b>
<p>Relative to the <b><font face="Arial Narrow">jsp:setProperty</font></b>
tag, the syntax of this tag is pretty simple.
<p><font face="Arial Narrow"><font size=-1>&lt;jsp:getProperty name="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" /></font></font>
<p><b><font color="#FF0000">Attribute values</font></b>
<p>The <i>beanInstanceName</i> is the name of the variable that refers
to the Bean.&nbsp; In the previous example, it was <b>theBean</b>.
<p>The <i>propertyName</i> is the name by which the Bean knows the property.&nbsp;
In the previous example, it was <b>size</b>.
<p><b><font color="#FF0000">Limitations</font></b>
<p>According to Sun, there are a few limitations that you need to be aware
of as described below:
<br>&nbsp;
<table BORDER=2 COLS=1 WIDTH="329" BGCOLOR="#66FFFF" >
<tr>
<td>"In JSP 1.0, &lt;jsp:getProperty> has a few limitations you should
be aware of:&nbsp;
<ul>
<li>
You cannot use &lt;jsp:getProperty> to retrieve the values of an indexed
property.&nbsp;</li>

<li>
You can use &lt;jsp:getProperty> with JavaBeans components, but not with
enterprise beans. You can get around this limitation by writing a JSP application
in which a JSP file gets values from a Bean, and the Bean in turns calls
an enterprise bean."</li>
</ul>
</td>
</tr>
</table>

<center>
<h2>
<a NAME="JSP Syntax Summary"></a><font color="#FF0000">JSP Syntax Summary</font></h2></center>
In this and previous lessons, I have discussed the following JSP syntax:
<p><b><font face="Arial Narrow"><font size=-1>Output comments:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;!-- comment [ &lt;%= expression
%> ] --></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Hidden comments:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%-- hidden comment --%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Declarations:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%! declarations %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Expressions:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%= expression %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Scriptlets:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;% code fragment %></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Include Directive:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%@ include file="relativeURL"
%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>Page Directive:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;%@ page</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ language="java" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ extends="package.class"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ import= "{ package.class
|</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; package.*
}, ..." ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ session="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ buffer="none|8kb|sizekb"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ autoFlush="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ isThreadSafe="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ info="text" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ errorPage="relativeURL"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ contentType="mimeType
[</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; ;charset=characterSet
]" |</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp; "text/html
; charset=ISO-8859-1" ]</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp; [ isErrorPage="true|false"
]</font></font>
<br><font face="Arial Narrow"><font size=-1>%></font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:forward tag:</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;jsp:forward page=</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp; "{
relativeURL | &lt;%= expression %> }" /></font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:useBean tag:</font></font></b>
<br><font face="Arial Narrow"><font size=-2>&lt;jsp:useBean</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
id="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
scope="page|request|session|application"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
class="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
type="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
class="package.class" type="package.class" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
beanName="{ package.class | &lt;%= expression %> }"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
type="package.class"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; }</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
/> | > other tags &lt;/jsp:useBean>&nbsp; }</font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:setProperty</font></font></b>
<br><font face="Arial Narrow"><font size=-2>&lt;jsp:setProperty</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
name="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp; {&nbsp; property=
"*" |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" [ param="parameterName" ] |</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" value=</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"{ string | &lt;%= expression %> }"</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;&nbsp;&nbsp; }</font></font>
<br><font face="Arial Narrow"><font size=-2>&nbsp;/></font></font>
<p><b><font face="Arial Narrow"><font size=-1>jsp:getProperty</font></font></b>
<br><font face="Arial Narrow"><font size=-1>&lt;jsp:getProperty name="beanInstanceName"</font></font>
<br><font face="Arial Narrow"><font size=-1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
property="propertyName" /></font></font>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-<!--end-->
</body>
</html>
