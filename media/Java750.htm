<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="author" content="richard g. baldwin">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">
<!--start-->
<center>
<h2>
<!--title-->JavaServer Pages, Introduction to JSP</h2></center>
<b><i>by Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 750
<p>April 18, 2000
<ul >
<li>
<a href="#_Introduction">Introduction</a></li>

<li>
<a href="#_A_First_Look">A First Look at JSP</a></li>

<li>
<a href="#_Tell_Me_More">Tell Me More</a></li>

<li>
<a href="#_Getting_Started">Getting Started</a></li>

<li>
<a href="#_Installation_and_Setup">Installation and Setup</a></li>

<li>
<a href="#_Starting_and_Stopping">Starting and Stopping the Server</a></li>

<li>
<a href="#_Accessing_HTML_and">Accessing HTML and JSP Files</a></li>

<li>
<a href="#_Sample_HTML_and">Sample HTML and JSP Files</a></li>

<li>
<a href="#_Accessing_Servlet_Files">Accessing Servlet Files</a></li>
</ul>

<hr size=3 width="100%" align=center>
<h2>
<a NAME="_Introduction"></a>Introduction</h2>
<b><font color="#FF0000">Plain servlets</font></b>
<p>Other lessons in this online <i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorial</a></i>
series teach you how to write and execute Java servlets that generate HTML
text and cause that text to be sent to a web browser.&nbsp; Writing the
code to produce the HTML text in servlets is often very tedious, and is
not a fun thing to do.
<p><b><font color="#FF0000">What is JSP?</font></b>
<p>JSP makes it possible for you to encode fragments of Java code into
special HTML tags.
<p><b><font color="#FF0000">JSP engine creates a servlet</font></b>
<p>When the HTML page containing the Java code fragments is presented to
a JSP engine, the JSP engine automatically creates, compiles, and executes
servlets to implement the behavior of the HTML and the embedded Java code.
<p>For certain kinds of applications, this is a less-tedious approach than
writing servlets to generate the HTML.
<p><b><font color="#FF0000">How do they differ?</font></b>
<p>The JSP approach is almost exactly the opposite of the approach where
you write and compile the servlet.
<p>In that approach, you can write servlets that automatically generate
HTML “on the fly” when they execute.
<p>With JSP, you can write HTML containing embedded Java that automatically
generates and executes a servlet.
<p><b><font color="#FF0000">JSP can become very complex</font></b>
<p>Of course, if you aren't careful, it is possible to cause your HTML
page containing embedded Java code to become extremely complex.&nbsp; Debugging
such a page tends to be more difficult for me than debugging a pure Java
program.
<p><b><font color="#FF0000">The best of both worlds</font></b>
<p>The best of both worlds can be achieved by using the embedded Java code
fragments to execute Java Beans or other servlets.
<p>With this combination approach, you can keep the HTML page relatively
simple.&nbsp; You can also separate functionality on your HTML page.
<p><b><font color="#FF0000">Similar to MVC</font></b>
<p>One way to look at this is to view it in a Model View Control (MVC)
paradigm sense.
<p>In this case, the bean approximates the model while the HTML page approximates
a combination of the control and the view.&nbsp; (If you aren't familiar
with the MVC paradigm, see the <i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorial</a></i>
lesson where I discuss MVC.)
<p><b><font color="#FF0000">Combining HTML and reusable Java</font></b>
<p>Thus, the judicious use of JSP makes it possible to combine the best
of HTML and reusable Java software components for server-side applications.
<p><b><font color="#FF0000">What's in this lesson?</font></b>
<p>In this lesson, I will introduce you to JavaServer (TM) Pages by way
of a very simple JSP file.
<p>I will also show you how to download, install, and configure the JavaServer
Web Development Kit (JSWDK) from Sun.
<p>I will provide you with a couple of sample files that you can use to
confirm proper installation and configuration of the JSWDK on your machine.
<p><b><font color="#FF0000">What about future lessons?</font></b>
<p>I will be using the JSWDK for demonstration purposes in several future
lessons where I will discuss various aspects of JSP.
<center>
<h2>
<a NAME="_A_First_Look"></a><b>A First Look at JSP</b></h2></center>
To get started, I am going to show you a very simple JavaServer Page or
JSP file (see <a href="Java750-fig01.htm">Figure 1</a>).&nbsp; I am assuming
that you already have a rudimentary knowledge of HTML.&nbsp; If not, there
are dozens of good HTML tutorials available on the web.
<p><b><font color="#FF0000">What does this file do?</font></b>
<p>If you install this file on a JSP-compatible web server and access it
with your browser, an output very similar to that shown in&nbsp; <a href="Java750-fig02.htm">Figure
2</a> will appear in your browser window.
<p><b><font color="#FF0000">First access may be slow</font></b>
<p>The first time you access a JSP file, there may be a slight pause while
the server automatically creates, compiles, and executes a servlet representing
the page.
<p>If you then force a reload, the results should appear much more quickly
the second time due to the fact that the corresponding servlet already
exists on the web server in executable form.
<p><b><font color="#FF0000">Where's the Java?</font></b>
<p>This JSP file contains only one Java code fragment as shown in .
<br><a href="Java750-fig03.htm">Figure 3</a>
<p>I have highlighted (in boldface) the special HTML tags that surround
the Java code (although depending on your display, that might not be apparent).&nbsp;
I will be discussing these tags at some length in subsequent lessons.
<p><b><font color="#FF0000">A Java for loop</font></b>
<p>As you can probably surmise from your prior knowledge of Java, this
code fragment executes a <b>for</b> loop.&nbsp; Exactly what happens inside
the for loop won't become clear until later when I discuss the line of
HTML code that reads
<br>&nbsp;
<table BORDER WIDTH="330" BGCOLOR="#FFFF99" >
<tr>
<td>
<pre><font face="Courier New,Courier">&lt;%= i %></font></pre>
</td>
</tr>
</table>

<center>
<h2>
<a NAME="_Tell_Me_More"></a><b>Tell Me More</b></h2></center>
JavaServer Pages (JSP) are based on servlet technology.&nbsp; When combined
with the use of JavaBean components, JSP promises to provide a capability
that is at least as powerful as servlets, possibly more powerful than raw
servlets, and potentially much easier to use.
<p><b><font color="#FF0000">Each technology does what it does best</font></b>
<p>JSP makes it possible for you to combine Java code with either HTML
or XML in such a way as to allow each technology to be used for what it
does best.
<p><b><font color="#FF0000">Creation and compilation of the servlet is
automatic</font></b>
<p>Each JSP page is automatically compiled into a servlet by the JSP engine.&nbsp;
(You can only use JSP on web servers that are JSP compatible.)
<p><b><font color="#FF0000">Occurs on first access</font></b>
<p>The automatic creation and compilation of the servlet occurs the first
time the page is accessed.&nbsp; Depending on the behavior of the web server,
the servlet will be saved for some period of time to be used over and over
without the need to recreate and recompile it.
<p><b><font color="#FF0000">May be a pause on first access</font></b>
<p>Thus, the first time the page is accessed, there may be a pause while
the web server creates and compiles the servlet.&nbsp; After that, access
to the page should be much faster.
<p><b><font color="#FF0000">How are JavaServer Pages used?</font></b>
<p>There are many different ways in which you can combine JSP, beans, and
servlets.
<p>As mentioned earlier, the judicious use of JSP makes it possible to
combine the best capabilities of HTML and reusable software components
for server-side applications.
<p><b><font color="#FF0000">Separating business logic from presentation</font></b>
<p>This makes it practical to separate the business logic from the presentation
of data.
<p>Hence, programmers who are skilled in writing Java Beans can provide
reusable software components that implement the business logic.
<p>Page designers skilled in HTML can embed calls to those beans in HTML
without the need to become skilled Java programmers.
<h2>
<a NAME="_Getting_Started"></a><b>Getting Started</b></h2>
I recommend that you to study Java with my tutorials in one hand and a
Java compiler and virtual machine in the other.&nbsp; Then you can copy,
compile and execute the sample programs and produce your own outputs as
you study.
<p><b><font color="#FF0000">Needed, one JSP server</font></b>
<p>As is the case with servlets and JDBC, to test your JSP files, you will
need more than a Java compiler and virtual machine.
<p>In addition to those items, you will need a JSP-compatible web server
in which to test your sample programs.
<p>As of February 6, 2000, such a web server is available free of charge
from Sun.&nbsp; You can download the server at
<p><a href="http://java.sun.com/products/jsp/download.html">http://java.sun.com/products/jsp/</a>
<br><a href="http://java.sun.com/products/jsp/download.html">download.html</a>.
<p>Here is what Sun has to say about the downloadable web server:
<br>&nbsp;
<table BORDER WIDTH="330" BGCOLOR="#00FFFF" >
<tr>
<td><b>JavaServer (TM) Web Development Kit (JSWDK) 1.0.1 Reference Implementation
- Final Release</b>
<p>The JavaServer Web Development Kit (JSWDK)1.0.1 combines the reference
implementation for JavaServer Pages(TM) 1.0.1 and the Java(TM) Servlet
API (2.1).&nbsp; ...
<p>The JSWDK offers a simplified way of creating dynamic web pages that
are independent of Web servers and computing platforms, giving you Write
Once, Run Anywhere(TM) freedom. The JSWDK is available at no charge.</td>
</tr>
</table>

<h2>
<a NAME="_Installation_and_Setup"></a><b>Installation and Setup</b></h2>
<b><font color="#FF0000">Quick-start instructions</font></b>
<p>When you download the JSWDK, you will find that quite a lot of documentation
is provided to help you to install and set up the server.&nbsp; At some
point, you should read that documentation.
<p>However, to get you off to a quick start, I am going to tell you how
I have the server set up on my WinNT machine.&nbsp; You should be able
to set it up in a similar manner on your machine and see your first demonstration
of JSP very quickly.&nbsp; After that, you might want to go back and customize
your installation.
<p><b><font color="#FF0000">Installation of the JSWDK</font></b>
<p>The JSWDK is downloaded as a zip file.&nbsp; To install it, you simply
extract the files (while preserving the directory structure) from the zip
file.
<p>Place the directory tree containing all of the files somewhere on your
hard drive.&nbsp; I elected to place the directory tree on my D-drive under
the directory named <b>Program Files</b>.
<p><b><font color="#FF0000">My path to the JSWDK</font></b>
<p>As a result, my path to the top-level directory containing the JSWDK
directory tree is:
<p><b>d:\Program Files\jswdk-1.0.1</b>
<p>The name of the top-level directory in the directory tree is <b>jswdk-1.0.1</b>.&nbsp;
Over time, as new versions are released, the name of this directory can
be expected to change.
<p><b><font color="#FF0000">What about the JDK?</font></b>
<p>When you use your browser to request a JSP page from the server, it
must create and compile a servlet.
<p>The <b>jswdk</b> server does not contain a compiler and virtual machine.&nbsp;
Therefore, if you haven't done so already, you will need to install the
JDK that the server will use to compile and execute the servlet.
<p><b><font color="#FF0000">My path to the JDK</font></b>
<p>At the time of this writing, I have JDK 1.2.2 from Sun installed on
my machine.&nbsp; The path to the top-level directory containing the JDK
is:
<p><b>d:\Program Files\jdk1.2.2</b><b></b>
<p>My JDK installation is completely standard (as per Sun) except that
I have it installed on drive-D instead of drive-C.
<p><b><font color="#FF0000">What about the classpath?</font></b>
<p>When the server attempts to compile the servlet, it must know how to
locate the class files for the JDK.
<p>Therefore, a classpath environment variable is necessary.&nbsp; Because
of other Java software that I have installed on my machine, my classpath
is long and complex.&nbsp; Therefore, to avoid the risk of confusion, I
won't show you the entire classpath.
<p><b><font color="#FF0000">The standard JDK class libraries</font></b>
<p>Suffice it to say that one of the elements in the classpath is as shown
below:
<p><b>d:\Program Files\jdk1.2.2\lib\tools.jar</b>
<p>This element identifies the location of the jar file containing the
standard class libraries for the JDK.
<p><b><font color="#FF0000">Classpath for servlets</font></b>
<p>Because I also use the JSWDK as a servlet engine (independent of JSP),
I also need the following element in the classpath.&nbsp; You will probably
need a similar element in your classpath.
<p><b>d:\Program Files\jswdk-1.0.1\lib\</b>
<br><b>servlet.jar</b>
<p>This element identifies the location of the jar file containing the
various software components necessary to compile and execute servlets.
<p><b><font color="#FF0000">Pretty simple, isn't it?</font></b>
<p>That's really about all there is to installing the JSWDK and getting
it ready for use.&nbsp; Of course, you will need to have the <i>path</i>
environment variable set properly for the JDK, but that has nothing to
do with the JSWDK.
<center>
<h2>
<b>Installing HTML, JSP, and Servlet Files</b></h2></center>
Once you install the JSWDK, you will see that the resulting directory tree
is fairly complex with several different branches.
<p>An examination of the documentation will tell you that you can configure
the JSWDK in various ways insofar as where you place HTML files, JSP Files,
and servlet files.
<p><b><font color="#FF0000">The default configuration</font></b>
<p>However, you can use the JSWDK right out of the zip file with no special
configuration required.
<p>To use the JSWDK in its default configuration, install your HTML files,
JSP files, and servlet files in the directories shown below.
<br>&nbsp;
<table BORDER WIDTH="330" BGCOLOR="#00FFFF" >
<tr>
<td><b><font color="#000000">Place HTML and JSP files in the following
directory</font></b>
<p>d:\Program Files\jswdk-1.0.1\
<br>webpages
<p><b><font color="#000000">Place servlet class files in the following
directory</font></b>
<p>d:\Program Files\jswdk-1.0.1\
<br>examples\Web-inf\servlets</td>
</tr>
</table>
<b></b>
<p>(The beginning portion of your path will probably be different, depending
on where you place the JSWDK on your hard drive).
<center>
<h2>
<a NAME="_Starting_and_Stopping"></a><b>Starting and Stopping the Server</b></h2></center>
You can start the server running by executing the following batch file:
<p><b>d:\Program Files\jswdk-1.0.1\<br>
startserver.bat</b><b></b>
<p>You should stop the server by executing the following batch file:
<p><b>d:\Program Files\jswdk-1.0.1\<br>
stopserver.bat</b><b></b>
<p>I placed shortcuts to these two batch files on my desktop to make it
easy to start and stop the server.
<p><b><font color="#FF0000">Temporary files</font></b>
<p>When you start the server and access a JSP page, if you pay attention
to the directory tree, you will notice that several temporary files are
created and placed in a directory named <b>work</b>.&nbsp; This directory
is a subdirectory of the top-level directory named <b>jswdk-1.0.1</b>.
<p>When you stop the server by executing the above batch file, these temporary
files are automatically deleted.
<center>
<h2>
<a NAME="_Accessing_HTML_and"></a><b>Accessing HTML and JSP Files</b></h2></center>
<b><font color="#FF0000">Accessing a JSP file</font></b>
<p>Having performed the installation and setup described above, and having
installed a JSP file (named <b>jsp001.jsp</b>) as described above, you
should be able to access that JSP file by entering the following URL into
your browser window.&nbsp; (I will provide a sample file named <b>jsp001.jsp</b>
below for you to use.)
<p><b>http://localhost:8080/jsp001.jsp</b><b></b>
<p>You may need to be online for this to work.&nbsp; In case this doesn't
work, you will need to study the JSWDK documentation to learn about alternative
ways to address the server.
<p>If you are unfamiliar with the use of the term
<i>localhost</i>, you
might want to do a little research on the web regarding that term.&nbsp;
There is also some information on the subject in my online <i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i>.
<p><b><font color="#FF0000">Accessing an HTML file</font></b>
<p>Similarly, you should be able to access an HTML file named <b>jsp001.htm</b>
by entering the following into your browser window
<p><b>http://localhost:8080/jsp001.htm</b>
<br><b></b>&nbsp;
<center>
<h2>
<a NAME="_Sample_HTML_and"></a><b>Sample HTML and JSP Files</b></h2></center>
A sample HTML file and a sample JSP file follow.&nbsp; You should be able
to
<ul >
<li>
Paste them into your text editor,</li>

<li>
Name them <b>jsp001.htm</b> and <b>jsp001.jsp</b> respectively, and</li>

<li>
Install them in the web server as described above.</li>
</ul>
Then you should be able to access the HTML file as described above.
<p><b><font color="#FF0000">A link to the JSP file</font></b>
<p>When the HTML file is displayed in your browser window, it will contain
a link to the JSP file.
<p>Selecting that link should access the JSP file.
<p><b><font color="#FF0000">Executing the JSP file</font></b>
<p>This will, in turn, cause the server to create and execute a servlet
and deliver the results of executing that servlet to your browser window.
<p><b><font color="#FF0000">The raw HTML file</font></b>
<p>The contents of the raw HTML file are shown in <a href="Java750-fig04.htm">Figure
4</a>.&nbsp; Note that the text in the HTML file contains a lot of explanatory
material.
<p><b><font color="#FF0000">The HTML results</font></b>
<p>When you access the above HTML file via your browser as described earlier,
the result displayed in your browser window will be similar to that shown
in <a href="Java750-fig05.htm">Figure 5</a>.
<p><b><font color="#FF0000">The links</font></b>
<p>Note that the underlined blue text is not a real link in <a href="Java750-fig05.htm">Figure
5</a>, but it will be a real link in your browser window.
<p>Pay particular attention the link in the first paragraph.&nbsp; I will
be referring to it later.
<p><b><font color="#FF0000">The raw JSP file</font></b>
<p>The contents of the raw JSP file are shown in <a href="Java750-fig06.htm">Figure
6</a>.
<p>I will discuss the particulars of this file in a future lesson.&nbsp;
The purpose of this lesson is simply to give you an overview and to help
you get your server set up so that you can write and execute JSP files.&nbsp;
The discussion of programming details will be deferred until later.
<p><b><font color="#FF0000">The JSP results</font></b>
<p>Clicking the link shown in the first paragraph in your browser window
<p>(<u>http://localhost:8080/jsp001.jsp</u>)
<p>when the above HTML file is displayed will cause the above JSP file
to be loaded by the web server.&nbsp; This, in turn will cause the servlet
to be created, compiled and executed.
<p>Execution of the servlet will then cause results similar to that shown
in <a href="Java750-fig02.htm">Figure 2</a> to appear on your browser screen.
<center>
<h2>
<a NAME="_Accessing_Servlet_Files"></a><b>Accessing Servlet Files</b></h2></center>
This lesson really has anything to do with servlets in the absence of JSP,
but the JSWDK is also useful as a servlet engine.
<p>While you are at it, you might as well make certain that you have it
properly set up for the execution of servlets that you write.
<p>Having performed the installation and setup described above, and having
installed a servlet class file named <b>Servlet01.class</b> in the directory
identified described above, you should be able to access that servlet file
by entering the following URL into your browser window.
<p><b>http://localhost:8080/examples/<br>
servlet/Servlet01</b>
<p><b><font color="#FF0000">Source code for a servlet</font></b>
<p>The source code for a simple servlet is shown in <a href="Java750-fig07.htm">Figure
7</a>.&nbsp; You should be able to
<ul >
<li>
Compile this servlet,</li>

<li>
Install the class file in the proper directory of the JSWDK as described
earlier, and</li>

<li>
Access the servlet as discussed above.</li>
</ul>
<b><font color="#FF0000">Hello Big Red World</font></b>
<p>When you do, the words "Hello Big Red World" should appear in red in
your browser window.
<p>If you aren't familiar with servlet programming, I have previously written
a large number of lessons on servlet programming in my online Java <i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i>
that you can refer to in order to gain an understanding of the code in
this servlet.
<br>&nbsp;
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i><b></b>
<p>-end-<!--end-->
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
