<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Getting Started, Part 1</h2></center>
<b><i>by Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 1000
<p>July 17, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Event Handling">Event Handling</a></li>

<li>
<a href="#Lightweight Components">Lightweight Components</a></li>

<li>
<a href="#Where Do We Go From Here">Where Do We Go From Here?</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">Not the first Swing lesson</font></b>
<p>Even though I have entitled this lesson on Swing "Getting Started",
this is not the first lesson that I have written on Swing.&nbsp; Rather,
I have previously written several other lessons, which you will find at
<i>Baldwin's
Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>.</i>
<p><b><font color="#FF0000">Previous lessons</font></b>
<p>The previous lessons include such titles as:
<ul>
<li>
The AWT and Swing, A Preview</li>

<li>
Swing and the Delegation Event Model</li>

<li>
Swing, New Event Types in Swing</li>

<li>
Swing, Understanding <b>getContentPane()</b> and other JFrame Layers</li>

<li>
The Swing Package, A Preview of Pluggable Look and Feel</li>

<li>
Swing, Hidden Buttons with Icons, Icon Images, Borders, Tool Tips, Nested
Buttons, and Other Fun Stuff</li>

<li>
Swing, Creating and Using Trees</li>

<li>
Swing, Custom Rendering of Tree Nodes</li>

<li>
Swing, Simplified Lists in Swing</li>

<li>
Swing, Understanding Component MVC Models</li>

<li>
Swing, Custom Rendering of JList Cells</li>

<li>
Swing, Custom List Selection Model for JList Objects</li>
</ul>
<b><font color="#FF0000">Why "Getting Started?"</font></b>
<p>So, having already written and published a dozen lessons on Swing, why
did I entitle this lesson "Getting Started?"&nbsp; Because in many cases,
the earlier lessons show you how to do certain things using Swing, but
don't provide an understanding of why things work the way that they do.
<p><b><font color="#FF0000">A fresh start</font></b>
<p>In this series of lessons, I plan to get down to fundamentals and provide
explanations of many operations that were not clearly explained in the
previous lessons.
<p>Perhaps a better name for this lesson would be "A Fresh Start."
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">Previous lessons are very important</font></b>
<p><font color="#000000">The lessons that I have previously written on
Swing contain a lot of information that I won't repeat in this series of
lessons.&nbsp; Therefore, I recommend that you study them in conjunction
with this series of lessons.</font>
<p><b><font color="#FF0000">JavaBean Components</font></b>
<p><font color="#000000">In addition, I will make numerous references to
JavaBean Components in this series of lessons.&nbsp; I have previously
written several lessons on JavaBeans.&nbsp; I will also provide a brief
description of JavaBean Components in Part 2 of this lesson.</font>
<p><b><font color="#FF0000">Lightweight components</font></b>
<p><font color="#000000">I will make numerous references to <i>lightweight
components</i> in this series of lessons, so I recommend that you study
my previous lessons on that topic as well.&nbsp; I will also briefly discuss
lightweight components later in this lesson.</font>
<p><b><font color="#FF0000">Model view control paradigm</font></b>
<p><font color="#000000">In order to truly understand Swing, you need to
understand the Model View Control (MVC) paradigm.&nbsp; Guess what?&nbsp;
I have already written some lessons on MVC.&nbsp; For those in a hurry,
I will provide a brief discussion of MVC in Part 2 of this lesson.</font>
<p><b><font color="#FF0000">Delegation event model</font></b>
<p><font color="#000000">Finally, in order to understand Swing, you must
understand the Delegation Event Model, which I will discuss briefly in
the next section.&nbsp; As you may already have guessed, I have also written
numerous lessons on the Delegation Event Model.</font><font color="#000000"></font>
<p><font color="#000000">You will find links to the lessons on the Delegation
Event Model and all of the other lessons mentioned above at my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">web
site</a>.</font>
<p><b><font color="#FF0000">The Swing software</font></b>
<p><font color="#000000">Although a version of Swing existed prior to the
release of JDK 1.2, it was not fully integrated into the JDK.&nbsp; When
JDK 1.2 was released, it included Swing as an integral part of the JDK.&nbsp;
Therefore, the release of the JDK 1.2 version was a major milestone in
the evolution of Swing.</font>
<p><font color="#000000">If you have downloaded and installed JDK 1.2.x
or a later version of the JDK, you already have Swing installed and can
begin writing and executing programs using it.</font>
<p><font color="#000000">I recommend that you use the JDK 1.2 version of
Swing, or later versions as they become available.&nbsp; (<i>At the time
of this writing, JDK 1.3 is available at <a href="http://java.sun.com/j2se/1.3/">http://java.sun.com/j2se/1.3/</a></i>)</font>
<p><b><font color="#FF0000">Earlier versions of Swing</font></b><font color="#000000"></font>
<p><font color="#000000">If you need to use a version of Swing that existed
prior to JDK 1.2, you have some special download and installation tasks
to perform, and you must adhere to some special programming syntax.</font>
<p><font color="#000000">In that case, you should visit some of my early
lessons on Swing, which were written using an early version of Swing.</font><font color="#000000"></font>
<p><b><font color="#FF0000">Will use JDK 1.2x or later</font></b>
<p><font color="#000000">In this series of lessons, I will be using JDK
1.2x or later versions of Swing.</font>
<center>
<h2>
<a NAME="Event Handling"></a><font color="#000000">Event Handling</font></h2></center>
<font color="#000000">Swing depends on the Delegation Event Model introduced
in JDK 1.1.&nbsp; As mentioned above, I have written numerous lessons on
the use of this event model, which you will find </font>in my earlier <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a><i>.</i>
<p><b><font color="#FF0000">Short cuts</font></b>
<p>In some cases, Swing includes automatic shortcuts that disguise the
fact that the Delegation model is being used, but even in those cases,
it is being used behind the scenes.
<p><b><font color="#FF0000">Critical to understand the event model</font></b>
<p>It is absolutely critical that you understand how the Delegation Event
Model works in order to understand Swing.&nbsp; While I strongly recommend
a serious study of the topic, for those of you in a hurry, a brief description
of the Delegation Event Model follows.
<p><b><font color="#FF0000">You must also understand the Java interface</font></b>
<p>I tell my students at least once each week that if they don't understand
the Java <i>interface</i>, they can't possibly understand Java.&nbsp; So,
if you don't understand the <i>interface</i>, you have another task ahead
of you.&nbsp; You will find lessons on the Java interface on my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">web
site</a>.
<p>(Again, for those in a hurry, I also provide a brief description of
the interface later in this lesson.)
<p><b><font color="#FF0000">A <i>callback</i> system</font></b>
<p>I like to think of the Delegation event model as a <i>callback</i> system.&nbsp;
The event model consists of event <i>sources
</i>and event <i>listeners</i>.
<p><b><font color="#FF0000">What is a source?</font></b>
<p>Event sources are program elements capable of
<ul>
<li>
Creating and maintaining a list of interested listeners,</li>

<li>
Detecting that an interesting event has happened (such as the price of
a particular stock crossing a specified threshold), and</li>

<li>
Notifying interested listeners that the event has happened, passing some
information about the event to the listener with the notification.</li>
</ul>
<b><font color="#FF0000">What is a listener?</font></b>
<p>A listener is a program element that has the ability to register itself
on a source.&nbsp; Registering itself on a source means that it is requesting
to be notified <i>(called back) </i>when the event occurs.
<p><b><font color="#FF0000">Implement some behavior</font></b>
<p>The purpose of being notified or called back, of course, is to make
it possible for the listener to take some specific action or implement
some behavior as a result of the event.
<p>An example action might be to purchase or sell shares of the stock whose
price just crossed the threshold.
<p><b><font color="#FF0000">Multicasting events</font></b>
<p>The term commonly used for the notification of listener objects by a
source is <i>multicasting</i>.
<p><b><font color="#FF0000">Now, about the <i>interface</i> ...</font></b>
<p>The Java <i>callback</i> system depends on the use of the Java <i>interface</i>.&nbsp;
All listener objects must <i>implement</i> one or more listener <i>interfaces</i>
in order to be eligible for registration with one or more sources.
<p><b><font color="#FF0000">The source is very particular</font></b>
<p>This is because the source is willing to register only listener objects
of a specific type for notification of a specific type of event.&nbsp;
The type of listener is determined by the interface that the listener object's
class implements.&nbsp; <i>(It is a central feature of the Java interface,
that the type of an object is determined not only by the class from which
the object is instantiated, but also by the interface that the object's
class implements.)</i>
<p><b><font color="#FF0000">Event types and listener interfaces come in
pairs</font></b>
<p>There is a direct correspondence between the type of the event and the
interface that the listener object's class implements.&nbsp; In fact, the
standard library contains many matched pairs of event types and listener
interfaces (<i>MouseEvent</i> class and <i>MouseListener</i> interface,
for example).
<p><b><font color="#FF0000">Sources can register many different listeners</font></b>
<p>Typically a source can register many different listener objects for
the same type of event.&nbsp; When the event happens, all registered listeners
will be notified.
<p><b><font color="#FF0000">Register for different types of events</font></b>
<p>Typically, a source can also register listeners for several different
types of events.
<p>For example, a <b>Button</b> object can register many different listener
objects to be notified of <i>mouse</i> events that occur on the button
and can register many different listener objects to be notified of <i>action</i>
events that occur on the same button.&nbsp; In other words, a <b>Button</b>
object can multicast both <i>mouse</i> events and <i>action</i> events
(and possibly other types of events as well).
<p><b><font color="#FF0000">Listener can register on multiple sources</font></b>
<p>Typically, a listener object of a particular type can be registered
to be notified of events that occur on many different sources.
<p>For example, a single <i>action</i> listener object can be registered
to be notified of <i>action</i> events occurring on a <b>Button</b>, a
<b>TextField</b>, and a <b>MenuItem</b>.
<p><b><font color="#FF0000">A big point-to-point wiring system</font></b>
<p>Therefore, you can think of a Java <i>event-driven</i> program as consisting
potentially of many different sources and many different listeners wired
together in many different ways.
<p>Listener objects are registered on specific sources to be notified when
specific events occur.&nbsp; Each listener object can be registered on
multiple sources.
<p>Event sources know when such events occur, and notify all registered
listeners when they occur.
<center>
<h2>
<a NAME="Lightweight Components"></a>Lightweight Components</h2></center>
Java makes a distinction between <i>heavyweight</i> and <i>lightweight</i>
components.
<p><b><font color="#FF0000">What is a heavyweight component?</font></b>
<p>To put it simply, Java depends on the underlying operating system to
render all heavyweight components.&nbsp; <i>(To render a component is to
display its image on the screen.)</i>
<p>This has several disadvantages, the most obvious of which is that the
components look different when the same Java program is run under different
operating systems.&nbsp; Beyond that, I'm not going to discuss the disadvantages
here.&nbsp; Please see my <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">earlier
lessons</a> on this topic for more information.
<p><b><font color="#FF0000">What is a lightweight component?</font></b>
<p><i>Lightweight</i> components are components that are rendered exclusively
using the drawing primitives of Java.
<p><b><font color="#FF0000">Look and feel is independent of OS</font></b>
<p>As a result, to a very large extent, the look and feel of a <i>lightweight</i>
component is independent of the operating system under which the program
is running.
<p><b><font color="#FF0000">Advantages</font></b>
<p>This (in conjunction with MVC) provides a number of advantages, including:
<ul>
<li>
Lightweight components look the same regardless of the operating system
under which the program is running.</li>

<li>
The look and feel of a lightweight component can be changed at runtime.</li>

<li>
Lightweight components can have transparent backgrounds.</li>
</ul>
<b><font color="#FF0000">Swing components are lightweight</font></b>
<p>All Swing components are <i>lightweight</i> components except for the
following top-level containers:&nbsp; <b>JApplet</b>, <b>JFrame</b>, <b>JDialog</b>,
and <b>JWindow</b>.
<p><b><font color="#FF0000">What is a container?</font></b>
<p>A container is a component that can contain other components in a parent-child
sense.
<p><b><font color="#FF0000">What is a top-level container?</font></b>
<p>A top-level container is a container that can be rendered on the computer
screen <i>(operating system desktop)</i> alongside other applications that
are running (such as Microsoft Word or Netscape Navigator).
<p><b><font color="#FF0000">Most Swing components must be contained</font></b>
<p>Except for the top-level containers, all Java components must be contained
by a top-level container, or by one of the containers that it contains.
<p><b><font color="#FF0000">What about a Swing button?</font></b>
<p>A Swing button is a container, but it is not a top-level container.
<p>Therefore, you cannot cause a Swing button to be rendered directly on
the computer screen alongside Microsoft Word or some other application
that is running.
<p>However, you can cause a Swing button to be rendered as a child of a
<b>JFrame</b>
object, which can be rendered on the operating system desktop alongside
Microsoft Word or Netscape Navigator.
<p><b><font color="#FF0000">Mixing heavyweight and lightweight components</font></b>
<p>It is possible for you to mix heavyweight and lightweight components,
although I would advise you to do so only if absolutely necessary.&nbsp;
If you do, be prepared for some possible unusual behavior, including the
fact that heavyweight components will always obscure lightweight components
if they overlap.
<p>For more information on lightweight components, see my previous
<i><a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i>.
<center>
<h2>
<a NAME="Where Do We Go From Here"></a><font color="#000000">Where Do We
Go From Here?</font></h2></center>
<font color="#000000">In Part 2 of this lesson, I will discuss the MVC
paradigm as it relates to Swing along with the Delegation Event Model.</font>
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
