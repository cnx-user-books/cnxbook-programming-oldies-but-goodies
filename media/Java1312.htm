<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<h2>
Enterprise JavaBeans(TM):&nbsp; Getting Started with EJB, Part 3</h2>
<b>Published&nbsp; </b>December 11, 2000
<br><b>By <a href="#BaldwinBio">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1312
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Bean Program">Sample Bean Program</a></li>

<li>
<a href="#The J2EE Application">The J2EE Application</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is one in a series of lessons designed to teach you about Sun's Enterprise
JavaBeans(TM) (EJB).
<p>This lesson is also the third lesson in a miniseries intended to get
you up and running with Sun's Enterprise JavaBeans(TM) very quickly.
<center>
<h2>
<a NAME="Preview"></a>Preview</h2></center>
This lesson assumes that you have completed the previous lessons and that
you now have the class files necessary to deploy your bean into the J2EE
server.
<p>In this and the next few lessons, I will walk you through the detailed
steps necessary to deploy your new bean in the J2EE server.
<p>You will learn about jar files and ear files and the difference between
the two.
<p>You will learn that the deployment descriptor is now packaged as an
XML file in J2EE <i>(instead of a serialized <b>Properties</b> object as
was the case in earlier versions)</i>.
<p>You will learn about J2EE Applications, which are higher-level constructs
than enterprise beans.
<p>You will learn about the three steps required for deployment of an enterprise
bean.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">Writing, compiling, deploying, and executing a
simple bean</font></b>
<p>The lessons in this miniseries will show you the steps involved in writing,
compiling, deploying and executing a simple bean.&nbsp; The discussion
will be brief and to the point.
<p><b><font color="#FF0000">More details in subsequent lessons</font></b>
<p>Subsequent lessons will come back and fill in the gaps to help you more-fully
understand each of the steps.
<p>Subsequent lessons will also teach you about the different kinds of
beans and how to use those beans in different situations.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is strongly recommended that you study the previous lesson entitled
<i>Enterprise
JavaBeans(TM), Getting Started with EJB, Part 2</i> before embarking on
this lesson.
<p>Additional supplementary material that I have written is available at
<a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan</a>.&nbsp;
As of the date of this writing, Gamelan does not maintain a consolidated
index to my Java tutorials.&nbsp; Therefore, they may be difficult to locate
on the Gamelan site.&nbsp; A consolidated index with links to the tutorials
on the Gamelan site is available at
<i>Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><b><font color="#FF0000">The required steps</font></b>
<p><font color="#000000">An earlier lesson entitled <i>Getting Started
with EJB, Part 1 </i>contained a list of the required steps for </font>writing,
compiling, deploying and executing a simple bean.&nbsp; Abbreviated versions
of the first seven steps in that list are repeated below.
<ul>
<li>
<font color="#3333FF">Download and install Java 2 Platform, Standard Edition
from Sun.</font></li>

<li>
<font color="#3333FF">Download and install the Java 2 Platform, Enterprise
Edition.</font></li>

<li>
<font color="#009900">Write the bean class and required helper classes.</font></li>

<li>
<font color="#009900">Write home and remote interfaces.</font></li>

<li>
<font color="#009900">Write a compilation batch file for the bean and the
interfaces.</font></li>

<li>
<font color="#009900">Compile the bean class, helper classes, and interfaces.</font></li>

<li>
Use Sun's J2EE <b>deploytool</b> program to deploy the bean into the server,
being careful to save the client jar file.&nbsp; The client jar file contains
some class files for stubs and skeletons that are required by the client.</li>
</ul>
<b><font color="#FF0000">Download and install software</font></b>
<p>The first two steps <i>(shown in blue)</i> require you to download and
install the JDK and the J2EE.&nbsp; I am assuming that you are able to
accomplish those two steps with no help from me.
<p><b><font color="#FF0000">Write/compile bean and interfaces</font></b>
<p>The next four steps <i>(shown in green)</i> were covered in the previous
lesson entitled <i>Getting Started with EJB, Part 2</i>.&nbsp; In that
lesson, I showed you explicitly how to accomplish all four of those steps.
<p><b><font color="#FF0000">Class files available</font></b>
<p>Having completed those steps, you should now have the class files necessary
to deploy your bean into the J2EE server.&nbsp; That is the subject of
the last step in the above list <i>(shown in black)</i>.
<p><b><font color="#FF0000">The last step is a big one</font></b>
<p>The last step is a big one, so I will subdivide it into several sequential
lessons.
<p>In this and the next couple of lessons, I will walk you through the
detailed steps necessary to deploy your new bean in the J2EE server.&nbsp;
I will provide that information in cookbook fashion, meaning that I will
tell you what to do but not necessarily why to do it.
<p><b><font color="#FF0000">Beans versus beans</font></b>
<p><font color="#000000">Just in case you are reading this lesson without
having read the earlier lessons in this series, I will tell you that an
enterprise bean is not the same thing as a <i>JavaBean Component(TM)</i>,
as discussed in my series of <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">tutorial
lessons</a> beginning with lesson number 500.</font>
<center>
<h2>
<a NAME="Sample Bean Program"></a><font color="#000000">Sample Bean Program</font></h2></center>
<b><font color="#FF0000">Minimum programming requirement for a bean</font></b>
<p><font color="#000000">The minimum programming requirement for an enterprise
bean consists of one class definition and two interface definitions.</font>
<p><font color="#000000">In the previous lesson, I developed and discussed
the elements of a simple bean, including the two required interface definitions.&nbsp;
That is the bean that we will begin deploying in the J2EE server in this
and the following lessons.&nbsp; Complete listings of the source code for
the bean and the two interfaces are shown near the end of this lesson.</font><font color="#000000"></font>
<p><b><font color="#FF0000">Required class files</font></b>
<p><font color="#000000">At this point, you should have the following three
class files as a result of compiling the bean class and the two interfaces
from the previous lesson.&nbsp; Make sure that you have them all located
conveniently in the same directory.</font>
<ul>
<li>
<font color="#000000">HelloBean.class</font></li>

<li>
<font color="#000000">HelloHome.class</font></li>

<li>
<font color="#000000">Hello.class</font></li>
</ul>
<font color="#000000">The first of these is the class file for the bean
proper.&nbsp; The second is the class file for the home interface.&nbsp;
The third is for the remote interface.</font>
<p><b><font color="#FF0000">A note about packages</font></b>
<p>When you create your own beans, you will probably want to put them in
packages.&nbsp; However, for learning purposes at this level, the use of
packages simply adds unneeded complexity.&nbsp; Therefore, if you examine
the source code for the bean and the two interfaces, you will find that
I did not use package directives.&nbsp; Therefore, this bean and the two
interfaces are all part of the <i>default</i> package.
<center>
<h2>
<a NAME="The J2EE Application"></a>The J2EE Application</h2></center>
<b><font color="#FF0000">Eliminating some possible confusion</font></b>
<p>If you have done much reading on EJB, you have probably read that an
enterprise bean is packaged inside a jar file.&nbsp; The jar file contains
the class files for the bean plus a couple of other files.
<p><b><font color="#FF0000">The deployment descriptor</font></b>
<p>One of the other files contained in the jar file is commonly referred
to as the deployment descriptor.&nbsp; Depending on the age of the book
that you were reading, you may have seen the deployment descriptor described
as a serialized version of a Java <b>Properties</b> object.
<p><b><font color="#FF0000">Another application of XML</font></b>
<p>At some point in the history of EJB, that was the case.&nbsp; However,
as of J2EE version 1.2.1, that has changed.&nbsp; The deployment descriptor
is now an XML file.
<p>In case you are unfamiliar with XML files, I have published quite a
few tutorial lessons on XML.&nbsp; You will find a consolidated index to
those lessons on my web <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">site</a>.
<p><b><font color="#FF0000">The application</font></b>
<p>Also, your reading may have led you to the conclusion that the jar file
containing the EJB is deployed directly into the server.&nbsp; That is
true for some server products.&nbsp; However, that is not true for J2EE
from Sun.&nbsp; Rather, with J2EE from Sun, you must first wrap the EJB
jar file in an <i>application</i>.&nbsp; Then the application is deployed
into the server.
<p><b><font color="#FF0000">Jar files and ear files</font></b>
<p>The application is also packaged in an archive file, but the extension
for the archive file is <i>ear</i> rather than <i>jar</i>.&nbsp; Presumably
this extension indicates <i>enterprise archive</i>.
<p>As you are probably already aware, you can view and extract the contents
of a <i>jar</i> file using an unzip program such as <a href="http://www.winzip.com/">WinZip</a>.&nbsp;
You can also view and extract the contents of an <i>ear</i> file using
the same unzip program.
<p><b><font color="#FF0000">The HelloApp.ear file</font></b>
<p>After you finish deploying this simple enterprise bean, you will have
a file named HelloApp.ear.&nbsp; If you view the contents of that file,
you will see that it contains the following files:
<ul>
<li>
meta-inf\manifest.mf</li>

<li>
meta-inf\application.xml</li>

<li>
meta-inf\sun-j2ee-ri.xml</li>

<li>
ejb-jar-ic.jar</li>
</ul>
<b><font color="#FF0000">A new subdirectory</font></b>
<p>If you extract the contents of the file, a new subdirectory named <b>meta-inf</b>
will be created and the first three files listed above will be extracted
into that directory.
<p><b><font color="#FF0000">The enterprise bean jar file</font></b>
<p>If you view the contents of the jar file named ejb-jar-ic.jar, you will
find that it contains the following files:
<ul>
<li>
meta-inf\ejb-jar.xml</li>

<li>
meta-inf\manifest.mf</li>

<li>
Hello.class</li>

<li>
HelloBean.class</li>

<li>
HelloHome.class</li>
</ul>
This is the file that actually contains the enterprise bean.&nbsp; Typically
that file contains a manifest file, a deployment descriptor, and all of
the class files required to execute the bean.
<p><b><font color="#FF0000">Another jar file</font></b>
<p>While we are on the subject of jar files, let me mention that there
is still another jar file involved in the use of J2EE.&nbsp; The deployment
process produces a jar file that contains material required by the client
program when it accesses the server to execute the enterprise bean.
<p><b><font color="#FF0000">A higher-level construct</font></b>
<p>A J2EE application is a higher-level construct than an enterprise bean.
<p>Since this series of lessons is concentrating on enterprise beans, I'm
not going to go into this in any detail at this point.&nbsp; Suffice it
to say that in addition to enterprise beans, the J2EE application can also
contain
<i>web components</i> and <i>J2EE Application Client components</i>.
<p><b><font color="#FF0000">Web components</font></b>
<p>Web components consist of servlets and JSP files.&nbsp; <i>(I have published
numerous lessons on servlets and JSP.&nbsp; You can find a consolidated
index to those lessons on my web <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">site</a>.)</i>&nbsp;
Web components, when present, are packaged inside a <i>war</i> file.&nbsp;
The war file is in turn packaged inside the <i>ear</i> file.
<p><b><font color="#FF0000">Application Client components</font></b>
<p>J2EE Application Client components, when present, are packaged in a
<i>jar</i> file, which is in turn packaged inside the <i>ear</i> file.
<p><b><font color="#FF0000">Steps for deployment</font></b>
<p>The process of deploying our enterprise bean into the server will consist
of the following major steps.
<ul>
<li>
Create the J2EE Application</li>

<li>
Package the Enterprise Bean</li>

<li>
Deploy the J2EE Application</li>
</ul>
There will be several individual steps that must be accomplished inside
each major step.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
This lesson has begun the process of walking you through the detailed steps
necessary to deploy your new bean in the J2EE server.
<p>You have learned about jar files and ear files.
<p>You have learned that the deployment descriptor is now packaged as an
XML file in J2EE.
<p>You have learned that a J2EE Application is a higher-level construct
than an enterprise bean.
<p>You have learned about the three steps required for deployment of an
enterprise bean.
<br>&nbsp;
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
The next lesson will pick up with the first step listed above, creating
the J2EE Application.
<p>Subsequent lessons will cover the packaging of the Enterprise Bean and
the deployment of the J2EE Application.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listings</h2></center>
A complete listing of the bean program is shown in Listing 1 below.&nbsp;
Complete listings of the remote and home interfaces are shown in Listing
2 and Listing 3.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File HelloBean.java</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<p><font face="Courier New,Courier"><font size=-2>This bean receives and
returns a String object</font></font>
<br><font face="Courier New,Courier"><font size=-2>via a single business
method.&nbsp; It also displays</font></font>
<br><font face="Courier New,Courier"><font size=-2>information about its
life cycle in the&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>System.out log file
or on the system comsole</font></font>
<br><font face="Courier New,Courier"><font size=-2>depending on whether
or not System.out has been</font></font>
<br><font face="Courier New,Courier"><font size=-2>directed to the log
files.</font></font>
<p><font face="Courier New,Courier"><font size=-2>This is a stateless session
bean.&nbsp; According to</font></font>
<br><font face="Courier New,Courier"><font size=-2>Sun, a session bean
must meet the following</font></font>
<br><font face="Courier New,Courier"><font size=-2>reuirements:</font></font>
<p><font face="Courier New,Courier"><font size=-2>Implement the SessionBean
interface.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Class is defined as
public.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Class cannot be defined
as abstract or final.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Implements one or more
ejbCreate methods.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Implements the business
methods.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Contains a public constructor
with no&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; parameters.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Must not define the
finalize method.</font></font>
<p><font face="Courier New,Courier"><font size=-2>Tested using Sun j2ee
and JDK 1.3 under&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>WinNT 4.0 workstation.</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import java.util.Date;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public class HelloBean
implements SessionBean{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; SessionContext
ctx;</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbCreate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Created "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbCreate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public String
aBusinessMethod(String str){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; return
"Hello " + str;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end aBusinessMethod()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbRemove(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Removed "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbRemove()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbActivate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Activated "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbActivate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbPassivate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Passivated "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//ejbPassivate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void setSessionContext(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SessionContext ctx){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; this.ctx
= ctx;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"HelloBean got SessionContext "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//setSessionContext()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public HelloBean(){}//public
constructor</font></font>
<p><font face="Courier New,Courier"><font size=-2>}//end class HelloBean</font></font>
<br>&nbsp;
<p><b><font face="Courier New,Courier"><font size=-2>Listing 1</font></font></b></td>
</tr>
</table>

<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File HelloHome.java&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public interface HelloHome
extends EJBHome{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; public Hello
<b>create()</b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws java.rmi.RemoteException,&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
javax.ejb.CreateException;</font></font>
<br><font face="Courier New,Courier"><font size=-2>}//end interface</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 2</font></font></b></td>
</tr>
</table>

<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File Hello.java</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import java.rmi.*;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public interface Hello
extends EJBObject{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; String <b>aBusinessMethod(String
s)</b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws RemoteException;</font></font>
<br><font face="Courier New,Courier"><font size=-2>}//end interface</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 3</font></font></b></td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="BaldwinBio"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
