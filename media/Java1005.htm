<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<center>
<h2>
Swing from A to Z</h2></center>

<center>
<h2>
Some Simple Components</h2></center>
<b><i>By Richard G. Baldwin</i></b>
<br><b><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i></b>
<p>Java Programming, Lecture Notes # 1005
<p>July 31, 2000
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Program">Sample Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This series of lessons entitled "Swing from A to Z" discusses the capabilities
and features of Swing in quite a lot of detail.
<p><b><font color="#FF0000">For persons who need details</font></b>
<p>This series is intended for those persons who need to understand Swing
at a detailed level.&nbsp; It is recommended that in addition to studying
this set of lessons, you also study my earlier <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">lessons</a>
having the following&nbsp;<a NAME="titles"></a>titles:
<ul>
<li>
The AWT and Swing, A Preview</li>

<li>
Swing and the Delegation Event Model</li>

<li>
Swing, New Event Types in Swing</li>

<li>
Swing, Understanding getContentPane() and other JFrame Layers</li>

<li>
The Swing Package, A Preview of Pluggable Look and Feel</li>

<li>
Swing, Hidden Buttons with Icons, Icon Images, Borders, Tool Tips, Nested
Buttons, and Other Fun Stuff</li>

<li>
Swing, Creating and Using Trees</li>

<li>
Swing, Custom Rendering of Tree Nodes</li>

<li>
Swing, Simplified Lists in Swing</li>

<li>
Swing, Understanding Component MVC Models</li>

<li>
Swing, Custom Rendering of JList Cells</li>

<li>
Swing, Custom List Selection Model for JList Objects</li>
</ul>
Those lessons will introduce you to the use of Swing while avoiding much
of the detail included in this series.
<center>
<h2>
<a NAME="Introduction"></a>Introduction</h2></center>
<b><font color="#FF0000">Swing components are beans</font></b>
<p><font color="#000000">Swing components are JavaBean components.&nbsp;
When we discuss JavaBean components, we are usually interested in the interface
to those components as determined by the <i>methods</i>,
<i>events</i>,
and <i>properties</i> of the bean.</font>
<p><b><font color="#FF0000">Swing components extend JComponent</font></b>
<p><font color="#000000">Most swing components extend <b>JComponent</b>
either directly or indirectly.</font>
<p><font color="#000000"><b>JComponent</b> extends <b>Container</b>, which
in turn extends <b>Component</b>.</font>
<p><font color="#000000">Therefore, most Swing components inherit methods,
events, and properties (ME&amp;P) from these three classes.</font>
<p><font color="#000000">Of course, many Swing components supplement these
inherited ME&amp;P in the definition of other classes that extend <b>JComponent</b>.</font>
<p><b><font color="#FF0000">Understanding Swing components as a group</font></b>
<p><font color="#000000">If you understand the ME&amp;P that Swing components
inherit from these three classes, you already know a lot about a Swing
component even before you begin examining it individually.&nbsp; In other
words, we can learn a lot about Swing components by examining the three
classes listed above.</font>
<p><b><font color="#FF0000">Will examine these classes</font></b>
<p><font color="#000000">The next several lessons will discuss ME&amp;P
that apply to a large number of Swing components, because they are inherited
from the classes <b>JComponent</b>,
<b>Container</b>, and <b>Component</b>.</font>
<p><b><font color="#FF0000">Need some components to work with</font></b>
<p><font color="#000000">In order to discuss and illustrate these features
of all Swing components, I need to write and explain simple programs making
use of some of the components that inherit those ME&amp;P.&nbsp; In other
words, I need some components to use for illustration.</font>
<p><b><font color="#FF0000">Purpose of the lesson</font></b>
<p><font color="#000000">The purpose of this lesson is to introduce four
fairly simple components that I will use for illustration purposes in subsequent
lessons.&nbsp; Those components are:</font>
<ul>
<li>
<font color="#000000">JFrame</font></li>

<li>
<font color="#000000">JButton</font></li>

<li>
<font color="#000000">JLabel</font></li>

<li>
<font color="#000000">JTextField</font></li>
</ul>
<font color="#000000">I will provide a simple application that makes use
of these components as "drop in" replacements for the AWT components having
similar names:</font>
<ul>
<li>
<font color="#000000">Frame</font></li>

<li>
<font color="#000000">Button</font></li>

<li>
<font color="#000000">Label</font></li>

<li>
<font color="#000000">TextField</font></li>
</ul>

<center>
<h2>
<a NAME="Sample Program"></a><font color="#000000">Sample Program</font></h2></center>
The sample program is named Swing11.java.&nbsp; A complete listing of the
program is provided in <a href="Java1005-fig08.htm">Figure 8</a>.
<p><b><font color="#FF0000">A screen shot</font></b>
<p>A screen shot of the output from the program is shown below.
<p><img SRC="Java1005.gif" height=101 width=301>
<p>This output is rendered in the Sun <i>Metal</i> look and feel, which
is a special look and feel developed by Sun specifically for Java.
<p>Although Swing provides a lot of capability for "dressing up" the GUI
(such as the addition of fancy borders on the components), this is a plain
vanilla default rendering of the Metal look and feel.
<p><b><font color="#FF0000">Four swing components were used</font></b>
<p><font color="#000000">This program places a <b>JButton</b>, a <b>JTextField</b>,
and a <b>JLabel</b> in the client area of a <b>JFrame</b>, 300 pixels wide
and 100 pixels tall.</font>
<p><font color="#000000">The components are placed in the frame using a
<b>FlowLayout</b>
manager.</font>
<p><b><font color="#FF0000">Event handling behavior</font></b>
<p><font color="#000000">A single action listener object is registered
on both the button and the text field.</font>
<p><font color="#000000">If you click on the button, or press the space
bar while the button has the focus, the text on the face of the button
is displayed in the label.</font>
<p><font color="#000000">If you press the enter key while the text field
has the focus, the contents of the text field are displayed in the label.</font>
<p><font color="#000000">If you click the close button in the upper right
corner of the <b>JFrame</b>, the program will terminate.</font>
<p><b><font color="#FF0000">Very similar to an AWT program</font></b>
<p><font color="#000000">As you will see when I discuss the code in the
following section, the code to accomplish this is essentially the same
as would be used with a <b>Frame</b>, a <b>Button</b>, a <b>TextField</b>,
and a <b>Label</b> with the AWT.</font>
<p><b><font color="#FF0000">One major difference</font></b>
<p><font color="#000000">However, there is one difference required by Swing,
which I will highlight in my discussion.</font>
<center>
<h2>
<a NAME="Interesting Code Fragments"></a><font color="#000000">Interesting
Code Fragments</font></h2></center>
The first fragment, shown in <a href="Java1005-fig01.htm">Figure 1</a>,
shows the import directives required for this program.&nbsp; I used boldface
to highlight the directive required for Swing.
<p><b><font color="#FF0000">Not the same as the older version</font></b>
<p>If you compare this with a Swing program written to use the version
of Swing that existed prior to the release of JDK 1.2, you will notice
that the import directive is different.&nbsp; Sun changed the location
of the Swing class libraries with the release of JDK 1.2.
<p><b><font color="#FF0000">The swing components</font></b>
<p><font color="#000000">The fragment in <a href="Java1005-fig02.htm">Figure
2</a> shows the definition of the controlling class.&nbsp; Note that this
class extends <b>JFrame</b>.</font>
<p><font color="#000000">The fragment also declares three reference variables
for the types <b>JButton</b>, <b>JTextField</b>, and <b>JLabel</b>.</font>
<p><font color="#000000">New objects of these three classes are instantiated,
and references to the objects are assigned to the reference variables.</font>
<p><b><font color="#FF0000">Names are similar to AWT components</font></b>
<p><font color="#000000">The names of the Swing classes are the same as
the names of corresponding AWT classes (<b>Frame</b>, <b>Button</b>, <b>TextField</b>,
and <b>Label</b>) except that the names of the Swing classes are prepended
with an upper-case J.</font>
<p><b><font color="#FF0000">Swing provides "drop in" replacements for AWT
components</font></b>
<p><font color="#000000">Swing provides a replacement component for all,
or at least most, of the components in the AWT component library.&nbsp;
(In a few cases, such as radio buttons, the Swing approach is different
from the AWT approach.)&nbsp; The naming convention involving the prepending
of an upper-case&nbsp; "J" to the AWT class name is used in most cases.</font>
<p><b><font color="#FF0000">Implements ActionListener</font></b>
<p><font color="#000000">The controlling class in this simple program implements
the <b>ActionListener</b> interface.</font>
<p><font color="#000000">That means that an object of the controlling class
is an action listener that can be registered on any component that has
the ability to multicast action events.</font>
<p><b><font color="#FF0000">Must define actionPerformed() method</font></b>
<p><font color="#000000">This also means that the controlling class must
provide a concrete definition for the method named <b>actionPerformed()</b>,
which is declared in the <b>ActionListener</b> interface.</font>
<p><b><font color="#FF0000">The constructor</font></b>
<p><font color="#000000">The code fragment in <a href="Java1005-fig03.htm">Figure
3</a> shows the beginning of the constructor for the controlling class.&nbsp;
This code is straightforward.</font>
<p><b><font color="#FF0000">Registering action listeners on sources</font></b>
<p><font color="#000000">In this code, the object of the controlling class
(<b>this</b>) is registered as an action listener on the button and on
the text field.</font>
<p><b><font color="#FF0000">When do action events occur?</font></b>
<p><font color="#000000">The button multicasts an action event when it
is clicked with the mouse, or when the space bar is pressed while the button
has the focus.</font>
<p><font color="#000000">The text field multicasts an action event when
the <i>Enter</i> key is pressed while the text field has the focus.</font>
<p><b><font color="#FF0000">The one difference relative to AWT</font></b>
<p><font color="#000000">The fragment in <a href="Java1005-fig04.htm">Figure
4</a> shows the only thing that is different between this Swing program
and a similar program that could be written using the corresponding components
from the AWT.</font>
<p><b><font color="#FF0000">The AWT version</font></b>
<p><font color="#000000">When programming with the AWT, to add a component
to a <b>Frame</b>, or to set the layout manager on a <b>Frame</b>, you
simply invoke either the <b>add()</b> method or the <b>setLayout()</b>
method on a reference to the <b>Frame</b> object.</font>
<p><b><font color="#FF0000">The Swing version</font></b>
<p><font color="#000000">However, to add a component to a <b>JFrame</b>,
or to set the layout manager on the <b>JFrame</b> object, you must first
invoke <b>getContentPane()</b> on a reference to the <b>JFrame</b> object.</font>
<p><b><font color="#FF0000">Why getContentPane()</font></b>
<p><font color="#000000">This has to do with the fact that with a <b>Frame</b>
in AWT, every child of the <b>Frame</b> is located on the same layer.</font>
<p><font color="#000000">However, with Swing and the <b>JFrame</b>, you
can place components on any one of about 65,000 different layers&nbsp;
(<b>getContentPane()</b> represents only one of those layers).</font>
<p><b><font color="#FF0000">Move components between layers at runtime</font></b>
<p><font color="#000000">In addition, you can move components from one
layer to another at runtime.&nbsp; If the components overlap, those components
on the layers with higher numbers will cover the components on layers with
lower numbers.</font>
<p><b><font color="#FF0000">See an earlier tutorial for details</font></b>
<p><font color="#000000">I discuss this in detail in the tutorial <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">lesson</a>
entitled <i>"Swing, Understanding getContentPane() and other JFrame Layers"</i>,
so I won't discuss it further here.&nbsp; Just remember that you need to
do it.</font>
<p><b><font color="#FF0000">An anonymous inner class</font></b>
<p>The fragment in <a href="Java1005-fig05.htm">Figure 5</a> is an anonymous
inner class that causes the program to terminate when the user presses
the close button on the <b>JFrame</b>.&nbsp; There is nothing about this
that is peculiar to Swing, so I won't discuss it further here.&nbsp; <i>(Note
that JDK 1.3 provides another approach to terminating the program when
the user presses the close button on the <b>JFrame</b>, but the code in
Figure 5 works with JDK 1.3 as well.)</i>
<p><b><font color="#FF0000">The main() method</font></b>
<p><font color="#000000">The code in <a href="Java1005-fig06.htm">Figure
6</a> is a plain vanilla <b>main()</b> method that instantiates an object
of the controlling class, causing the GUI to appear on the screen.&nbsp;
Again, there is nothing special about this, so I won't discuss it further.</font>
<p><b><font color="#FF0000">The action event handler</font></b>
<p><font color="#000000">Finally, the code in <a href="Java1005-fig07.htm">Figure
7</a> is the <b>actionPerformed()</b> method that is invoked whenever an
action event occurs on either the button or on the text field.&nbsp; This
is plain vanilla Delegation Event Model <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">material</a>,
so I won't discuss it further.</font>
<center>
<h2>
<a NAME="Summary"></a><font color="#000000">Summary</font></h2></center>
<font color="#000000">If you are familiar with event driven programming
using the Delegation Event Model with the AWT, but you are not familiar
with Swing, you should have seen only one thing that might be new to you.</font>
<p><b><font color="#FF0000">getContentPane() is peculiar to Swing</font></b>
<p><font color="#000000">The only thing about this program that should
have been new to you is the requirement to use <b>getContentPane()</b>
whenever you need to add a component to the <b>JFrame</b> object, or you
need to set a layout manager on the <b>JFrame</b> object.</font>
<p><font color="#000000">Otherwise, this program looks just like an AWT
program with new names for the classes from which the button, text field,
and label are instantiated.</font>
<p><b><font color="#FF0000">The purpose of the lesson</font></b>
<p><font color="#000000">The purpose of this lesson was not to teach you
anything significantly new.&nbsp; Rather, it was simply to introduce you
to the use of Swing <b>JFrame</b>, <b>JButton</b>, <b>JTextField</b>, and
<b>JLabel</b>
in place of AWT <b>Frame</b>, <b>Button</b>, <b>TextField</b>, and <b>Label</b>.</font>
<p><b><font color="#FF0000">Will use these components for illustration
of Swing features</font></b>
<p>As mentioned earlier, I will use these components in the next few lessons
as I explain some of the methods, events, and properties that Swing components
inherit from the <b>JComponent</b>, <b>Container</b>, and <b>Component</b>
classes.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listing</h2></center>
A complete listing of the program is provided in <a href="Java1005-fig08.htm">Figure
8</a>.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<br>&nbsp;
<br>&nbsp;
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
