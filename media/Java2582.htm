<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2 align="center">Using Lists in MIDlets</h2>
<i>Learn about the Choice interface and the List class, which implements the 
Choice interface.&nbsp; Learn about the composition of a Choice object. Learn 
about implicit, exclusive, and multiple Choice types.&nbsp; Learn about the 
selected state of a Choice element of each of the different types.&nbsp; Learn 
how to create a List, how to display it in the Sun cell phone emulator, and how 
to determine which elements in the List are selected.</i>
<p><b>Published:</b>&nbsp; April 22, 2008<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 2582</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#The_Choice_interface">The Choice interface</a></li>
	<li><a href="#The_List_class">The List class</a></li>
</ul>
	</li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a></li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listing</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<p align="left">&nbsp;</p>
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<p> This is one in a series of tutorial lessons designed to teach you how to 
write programs using the Sun Java Wireless Toolkit for CLDC.&nbsp; The first lesson 
was titled <i>Getting Started with MIDlets and the Sun Java Wireless Toolkit for 
CLDC</i>.&nbsp; The previous lesson was titled <i>Using Alerts, Images, Timers, and 
Gauges in MIDlets (see <a href="#Resources">Resources</a>)</i>.</p>
<p> <font color="#FF0000"><b>What you will learn</b></font></p>
<p> In this lesson, you will learn about the <b>Choice</b> interface and the <b>
List</b> class, which implements the <b>Choice</b> interface.&nbsp; You will 
learn about the composition of a <b>Choice</b> object.&nbsp; You will learn 
about <i>implicit</i>, <i>exclusive</i>, and <i>multiple</i> <b>Choice</b> 
types.&nbsp; You will learn about the selected state of a <b>Choice</b> element 
of each of the different types.&nbsp; You will learn how to create a <b>List</b>, 
how to display it in the Sun cell phone emulator, and how to determine which 
elements in the <b>List</b> are selected.</p>
<p><font color="#ff0000"><b>A MIDlet development framework</b></font></p>
<p>For this lesson, you will need the updated version of the MIDlet development 
framework named <b>WTKFramework03</b>, which was provided in the earlier lesson 
titled <i>Using Alerts, Images, Timers, and Gauges in MIDlets (see
<a href="#Resources">Resources</a>)</i>.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Partial class hierarchy for MIDP 2.0.</li>
	<li><a href="#Figure_2">Figure 2</a>. Methods of the Choice interface as 
	declared in MIDP 2.0.</li>
	<li><a href="#Figure_3">Figure 3</a>. An implicit List object in the cell 
	phone emulator.</li>
	<li><a href="#Figure_4">Figure 4</a>. Partial standard output for List01 and 
	an implicit List object.</li>
	<li><a href="#Figure_5">Figure 5</a>. An exclusive List object in the cell 
	phone emulator.</li>
	<li><a href="#Figure_6">Figure 6</a>. Partial standard output for List01 and 
	an exclusive List object.</li>
	<li><a href="#Figure_7">Figure 7</a>. A multiple choice List object in the 
	cell phone emulator.</li>
	<li><a href="#Figure_8">Figure 8</a>. Partial standard output for List01 and 
	a multiple choice List object.</li>
	<li><a href="#Figure_9">Figure 9</a>. Additional methods of the List class.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Beginning of the class for the 
	MIDlet named List01.</li>
	<li><a href="#Listing_2">Listing 2</a>. The constructor for the MIDlet named 
	List01.</li>
	<li><a href="#Listing_3">Listing 3</a>. The startApp method for the MIDlet 
	named List01.</li>
	<li><a href="#Listing_4">Listing 4</a>. The destroyApp method for the MIDlet 
	named List01.</li>
	<li><a href="#Listing_5">Listing 5</a>. The complete MIDlet program named 
	List01.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online Java tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<p>A partial class hierarchy for MIDP 2.0 is shown in Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. Partial class hierarchy for MIDP 2.0. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <ul>
		<li>Object<ul>
			<li><i><b>Displayable</b></i><ul>
				<li><i><b>Screen</b></i><ul>
					<li><i><b>TextBox</b></i></li>
					<li><i><b>Alert</b></i></li>
					<li><b>List</b></li>
					<li>Form</li>
				</ul>
				</li>
				<li>Canvas <i>(abstract)</i><ul>
					<li>GameCanvas <i>(abstract)</i></li>
				</ul>
				</li>
			</ul>
			</li>
			<li><i><b>Display</b></i></li>
			<li><b><i>Ticker</i></b></li>
			<li><i><b>AlertType</b></i></li>
			<li><i><b>Image</b></i></li>
			<li>Item<ul>
				<li><i><b>Gauge</b></i></li>
				<li>ChoiceGroup</li>
			</ul>
			</li>
			<li><i><b>Timer</b></i></li>
			<li><i><b>TimerTask</b></i></li>
		</ul>
		</li>
		</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>I have discussed and illustrated the classes shown in boldface Italics in 
earlier lessons.&nbsp; I will discuss and illustrate the <b>List </b>class and 
the <b>Choice</b> interface in this lesson.&nbsp; I will discuss and illustrate the<b> 
Form</b>,<b> Item</b>, <b>ChoiceGroup</b>, <b>Canvas</b> 
and <b>GameCanvas</b> classes in future lessons.</p>
<h3><a name="The_Choice_interface">The Choice interface</a></h3>
<p>The <b>List</b> class implements the <b>Choice</b> interface.&nbsp; To 
understand a class, you must understand the interfaces that it implements.</p>
<p>According to Sun,</p>
<blockquote>
	<p><i>&quot;Choice defines an API for a user interface components implementing 
	selection from predefined number of choices. Such UI components are List and 
	ChoiceGroup. The contents of the Choice are represented with strings and 
	images.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>An indexed object</b></font></p>
<p>Elements within a <b>Choice</b> object are referred to by their indices.&nbsp; 
The indices are 
consecutive integers in the range from zero to one less than the value returned 
by the <b>size</b> method.&nbsp; An index of zero refers to the first element.</p>
<p><font color="#FF0000"><b>The parts of a Choice element</b></font></p>
<p>Each element of a <b>Choice</b> is composed of the following parts:</p>
<ul>
	<li>A text string part</li>
	<li>An <b>Image</b> part</li>
	<li>A font attribute </li>
</ul>
<p><i>Getter</i> and <i>setter</i> methods are provided for all three parts.&nbsp; As you might expect, the font attribute applies to the text string part.</p>
<p>Elements may be inserted, appended, and deleted after a <b>Choice</b> object 
has been created.</p>
<p><font color="#FF0000"><b>The Image</b></font></p>
<p>If 
there is an image, the cell phone displays the image at the beginning of the 
text string as shown by the red, green, and blue ball images in Figure 3.</p>
<p>Some <b>Choice</b> components use selection indicators such as a radio button 
or a checkbox as shown in Figure 5 and Figure 7.&nbsp; When a selection indicator is present, the image is placed 
between the selection indicator and the beginning of the text string.</p>
<p><font color="#FF0000"><b>Types of Choice objects</b></font></p>
<p><a name="There_are_four_types_of_Choice_objects:">There are four types of <b>Choice</b> objects:</a></p>
<ul>
	<li><b>Choice.IMPLICIT</b> <i>(valid only for <b>List</b>, see Figure 3)</i></li>
	<li><b>Choice.EXCLUSIVE</b> <i>(see Figure 5)</i></li>
	<li><b>Choice.MULTIPLE</b> <i>(see Figure 7)</i></li>
	<li><b>Choice.POPUP</b> <i>(valid only for <b>ChoiceGroup</b>, will be discussed 
	in a future lesson)</i></li>
</ul>
<p><font color="#FF0000"><b>The exclusive choice</b></font></p>
<p>The <b>exclusive</b> choice <i>(see Figure 5)</i> presents a list of 
elements and allows the user to select only one.&nbsp; The selected element is shown to be 
selected using a distinct visual representation <i>(such as a radio button in 
the Sun cell phone emulator)</i>.&nbsp; One element is always selected if the <b>
Choice</b> is not empty.</p>
<p><font color="#FF0000"><b>The implicit choice</b></font></p>
<p>The <b>implicit</b> choice <i>(see Figure 3)</i> is an exclusive choice where 
the focused or highlighted element is implicitly the selected element.&nbsp; One 
element is always selected if the <b>Choice</b> is not empty.</p>
<p><font color="#FF0000"><b>The multiple choice</b></font></p>
<p>A <b>multiple</b> choice <i>(see Figure 7)</i> allows the user to select 
none, one, or more elements in any combination among the elements in the <b>Choice</b>. The appearance of a multiple choice 
object should have a visual representation 
<i>(such as the check boxes in the Sun cell phone emulator)</i> that is distinct from the exclusive choice 
object.&nbsp; The visual indicator shows the selected state of each element 
and also indicates to the user that multiple elements may be selected.&nbsp; 
There is no requirement for an element to be selected in the <b>multiple</b> 
choice type.&nbsp; In other words, it is allowable for none of the elements to 
be selected even when the <b>Choice</b> is not empty.</p>
<p><font color="#FF0000"><b>The pop-up choice</b></font></p>
<p>I will discuss this choice in more detail in a future lesson in conjunction 
with the <b>Form</b> 
class.</p>
<p><font color="#FF0000"><b>The selected state of an element</b></font></p>
<p>The selected state of an element is a property of the element and is not 
dependent upon the current index of the element. For example, the selected state 
stays with that element even if other elements are inserted or deleted. </p>
<p>When a new element is inserted 
or appended, it is always unselected <i>(except for the special case of adding an 
element to an empty <b>exclusive</b>,<b> pop-up</b>, or <b>implicit</b> <b>Choice</b>)</i>.</p>
<p><font color="#FF0000"><b>Setting and querying the selected state</b></font></p>
<p>The selected state of an entire <b>Choice</b> object can be set by the MIDlet code 
using the <b>setSelectedFlags</b> and
<b>setSelectedIndex</b> methods.</p>
<p>The selected state of the entire <b>Choice</b> object can be determined by the 
MIDlet using the <b>getSelectedFlags</b> and
<b>getSelectedIndex</b> methods.</p>
<p>The selected state of any particular 
element can be determined using the <b>isSelected</b> method.</p>
<p><font color="#FF0000"><b>Methods of the Choice interface in MIDP 2.0</b></font></p>
<p>Figure 2 shows a list and a brief description of each of the methods declared in 
MIDP 2.0.&nbsp; As you should already be aware, all classes that implement the 
interface must provide concrete definitions for all of the interface methods or 
the implementing class must be declared <b>abstract</b>.&nbsp; The <b>List</b> 
class is not abstract so it must provide a concrete definition of all the 
methods in Figure 2.</p>












<p>
 <b><a name="Figure_2">Figure 2</a>. Methods of the Choice interface as declared 
	in MIDP 2.0. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li><i><b>Group 1</b></i> 
	------------------------------------------------------------</li>
	<li><b>append(String&nbsp;stringPart, Image&nbsp;imagePart) - </b>Appends an element 
	to the Choice.</li>
	<li><b>delete(int&nbsp;elementNum)</b> - Deletes the element referenced by 
	elementNum.</li>
	<li><b>deleteAll()</b> - Deletes all elements from this Choice, leaving it 
	with zero elements.</li>
	<li><b>insert(int&nbsp;elementNum, String&nbsp;stringPart, Image&nbsp;imagePart)</b> - 
	Inserts an element into the Choice just prior to the element specified.</li>
	<li><b>set(int&nbsp;elementNum, String&nbsp;stringPart, Image&nbsp;imagePart)</b> <br>
	Sets the String and Image parts of the element referenced by elementNum, 
	replacing the previous contents of the element.</li>
	<li><b>setFont(int&nbsp;elementNum, Font&nbsp;font)</b> - Sets the application's 
	preferred font for rendering the specified element of this Choice.</li>
	<li><b>setSelectedFlags(boolean[]&nbsp;selectedArray)</b> - Attempts to set the 
	selected state of every element in the Choice.</li>
	<li><b>setSelectedIndex(int&nbsp;elementNum, boolean&nbsp;selected) - </b>For 
	MULTIPLE, this simply sets an individual element's selected state.</li>
	<li><i><b>Group 2</b></i> 
	------------------------------------------------------------</li>
	<li><b>getFitPolicy()</b> - Gets the application's preferred policy for 
	fitting Choice element contents to the available screen space.</li>
	<li><b>getFont(int&nbsp;elementNum) - </b>Gets the application's preferred font 
	for rendering the specified element of this Choice.</li>
	<li><b>getImage(int&nbsp;elementNum) - </b>Gets the Image part of the element 
	referenced by elementNum.</li>
	<li><b>getSelectedFlags(boolean[]&nbsp;selectedArray_return)</b> - Queries the 
	state of a Choice and returns the state of all elements in the boolean array 
	selectedArray_return.</li>
	<li><b>getSelectedIndex()</b> - Returns the index number of an element in 
	the Choice that is selected.</li>
	<li><b>getString(int&nbsp;elementNum)</b> - Gets the String part of the element 
	referenced by elementNum.</li>
	<li><b>size() </b>- Gets the number of elements present.</li>
	<li><b>isSelected(int&nbsp;elementNum)</b> - Gets a boolean value indicating 
	whether this element is selected.</li>
	<li><i><b>Group 3</b></i> 
	------------------------------------------------------------</li>
	<li><b>setFitPolicy(int&nbsp;fitPolicy) - </b>Sets the application's preferred 
	policy for fitting Choice element contents to the available screen space.</li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Methods are separated into groups</b></font></p>
<p>I have separated the methods in Figure 2 into three functional groups to make it easier 
to understand them.&nbsp; The eight methods in the first group are used to 
populate <i>(or de-populate)</i> the <b>Choice</b> object in a variety of 
different ways.</p>
<p>The eight methods in the middle group are used to query the <b>Choice</b> 
object to get the values of a variety of properties.</p>
<p>The single method in the last group is used to fit the contents of the <b>
Choice</b> element to the available screen size.</p>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b><a name="Using_the_computer_keyboard">
				Using the computer keyboard</a></b><br>
				Note that in some cases, keys on the computer keyboard can be 
				used to simulate pressing the buttons on the emulator keypad.&nbsp; 
				For example, the up and down arrow keys on the computer keyboard 
				simulate the up and down arrow keys on the emulator keypad.&nbsp; The 
				Enter key on the computer keyboard simulates the large square 
				button on the emulator keypad.
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<h3><a name="The_List_class">The List class</a></h3>
<p>As you can see in Figure 1, the <b>List</b> class extends the <b>Screen</b> 
class.&nbsp; As I mentioned earlier, the <b>List</b> class also implements the
<b>Choice</b> interface.&nbsp; Before getting into the details of the <b>List</b> 
class, I will show you some screen shots of three different types of <b>List</b> 
objects displayed in the Sun cell phone emulator.&nbsp; I will also show you the standard output 
produced by the MIDlet named <b>List01</b> in conjunction with each of the 
screen shots.</p>
<p><font color="#FF0000">
 <b>An implicit List object</b></font></p>
<p>Figure 3 shows an implicit <b>List</b> object.&nbsp; Note that the element 
with the string &quot;Two&quot; is highlighted in the list.&nbsp; To highlight an element 
in the list, navigate to the element using the up and down arrow keys on the 
emulator keypad <i>(also see the <a href="#Using_the_computer_keyboard">sidebar</a>)</i>.</p>
<p>
 <b><a name="Figure_3">Figure 3</a>. An implicit List object in the cell phone 
	emulator. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2582a1.jpg" width="314" height="489"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The corresponding standard output</b></font></p>
<p>Figure 4 shows a partial listing of the standard output for the implicit <b>
List</b> object shown in Figure 3.&nbsp; You will learn more about how this 
output was produced later in conjunction with the discussion of the code for the 
MIDlet named <b>List01</b>.&nbsp; For now, simply note the one line of text in Figure 4 
that was 
manually highlighted in boldface for presentation in this lesson.</p>
<p>
 <b><a name="Figure_4">Figure 4</a>. Partial standard output for List01 and an 
	implicit List object. </b>
<table border="1" cols="1" Width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre>OUT: Construct MIDlet
OUT: Construct Image objects
OUT: Create List
OUT: Populate list
OUT: Display list
OUT: Identify selected elements
OUT: <b>Selected: Two</b>
OUT: Destroy MIDlet</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The boldface text in Figure 4 shows the result of querying the system to 
determine and display the string part of the selected elements in the <b>List</b> 
shown in Figure 3.&nbsp; The output shown in Figure 4 is the value of the string 
part of the selected element in Figure 3.</p>
<p><font color="#FF0000">
 <b>An exclusive List object</b></font></p>
<p>Figure 5 shows an exclusive <b>List</b> object.&nbsp; Note that the <b>List</b> 
element with a string part of &quot;One&quot; is both highlighted and selected.</p>
<p>
 <b><a name="Figure_5">Figure 5</a>. An exclusive List object in the cell phone 
	emulator. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2582a2.jpg" width="313" height="494"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Selecting an element</b></font></p>
<p>The Sun cell phone emulator uses radio buttons to indicate which element is selected.&nbsp; 
To select an element, navigate to that element using the up and down arrow keys 
on the cell phone emulator keypad and then click the large square button that is 
surrounded by arrows.&nbsp; This causes the radio button associated with the 
highlighted element to indicate that the element is selected.</p>
<p><font color="#FF0000"><b>The corresponding standard output</b></font></p>
<p>Figure 6 shows a partial listing of the standard output for the exclusive <b>
List</b> object shown in Figure 5.&nbsp; The boldface text in Figure 6 matches 
the selected element in Figure 5.</p>
<p>
 <b><a name="Figure_6">Figure 6</a>. Partial standard output for List01 and an 
	exclusive List object.</b><table border="1" cols="1" Width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre>OUT: Construct MIDlet
OUT: Construct Image objects
OUT: Create List
OUT: Populate list
OUT: Display list
OUT: Identify selected elements
OUT: <b>Selected: One</b>
OUT: Destroy MIDlet</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
 <b>A multiple choice List object</b></font></p>
<p>Figure 7 shows a multiple choice <b>List</b> object.&nbsp; Note that two of 
the elements have check marks in the squares to the left of the string.</p>
<p>
 <b><a name="Figure_7">Figure 7</a>. A multiple choice List object in the cell 
	phone emulator. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="1" src="java2582a3.jpg" width="295" height="485"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Selecting elements</b></font></p>
<p>This type of <b>List</b> object allows the user to select none, one, or more 
elements in any combination.&nbsp; To select an element, navigate to the element 
using the up and down arrow keys and then click the large square button.&nbsp; 
This will place a check mark in the square on the cell phone display indicating that the element is 
selected.&nbsp; To de-select an element that was previously selected, navigate 
to the selected element and click the large square button.&nbsp; That will cause 
the check mark to disappear.</p>
<p><font color="#FF0000"><b>The corresponding standard output</b></font></p>
<p>Figure 8 shows a partial listing of the standard output for the multiple 
choice <b>List</b> shown in Figure 7.&nbsp; Note that the two elements identified as being selected in Figure 8 match the checked elements in Figure 7.</p>
<p>
 <b><a name="Figure_8">Figure 8</a>. Partial standard output for List01 and a 
	multiple choice List object.</b><table border="1" cols="1" Width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre>OUT: Construct MIDlet
OUT: Construct Image objects
OUT: Create List
OUT: Populate list
OUT: Display list
OUT: Identify selected elements
OUT: <b>Selected: Zero</b>
OUT: <b>Selected: Two</b>
OUT: Destroy MIDlet</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>What is a List?</b></font></p>
<p>According to Sun, a <b>List</b> is </p>
<blockquote>
	<p><i>&quot;A Screen containing list of choices. ... When a List is present on 
	the display, the user can interact with it by selecting elements and 
	possibly by traversing and scrolling among them.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>Types of Lists</b></font></p>
<p>The <b>List</b> class implements the <b>Choice</b> interface.&nbsp; <b>List</b> objects may be created with <b>Choice</b> types of</p>
<ul>
	<li>Choice.EXCLUSIVE</li>
	<li>Choice.MULTIPLE</li>
	<li>Choice.IMPLICIT</li>
</ul>
<p>You learned about these different
<a href="#There_are_four_types_of_Choice_objects:">types</a> in the earlier 
discussion of the <b>Choice</b> interface.&nbsp; <i>(Note that the Choice.POPUP 
type is valid only for <b>ChoiceGroup</b>, will be discussed in a future 
lesson.)</i></p>
<p><font color="#FF0000"><b>Selection</b></font></p>
<p>The mechanics of selecting <b>List</b> elements may vary from one cell phone 
to the next.&nbsp; For the Sun cell phone emulator, a <b>List</b> element is 
selected by first highlighting the element using the up and down arrow keys and 
then clicking the large square button shown in Figure 3.</p>
<p>In an EXCLUSIVE <b>List</b>, the select operation selects 
the highlighted element and deselects the previously selected element.&nbsp; In a 
MULTIPLE <b>List</b>, the select operation toggles the selected state of the target 
element, leaving the selected state of other elements unchanged.&nbsp; In an 
IMPLICIT <b>List</b>, no explicit select operation is required.&nbsp; The 
highlighted element is implicitly selected.</p>
<p><font color="#FF0000"><b><a name="Constructors_for_the_List_class">Constructors for the List class</a></b></font></p>
<p>There are two overloaded constructors for the <b>List</b> class.&nbsp; One of 
the constructors requires the following four parameters:</p>
<ul>
	<li>String&nbsp;title</li>
	<li>int&nbsp;listType <i>(Choice.EXCLUSIVE, Choice.MULTIPLE, or 
	Choice.IMPLICIT)</i></li>
	<li>String[]&nbsp;stringElements</li>
	<li>Image[]&nbsp;imageElements</li>
</ul>
<p>The other constructor requires only the first two parameters shown above.</p>
<p>The first two parameters in the above list of constructor parameters are 
self-explanatory.</p>
<p>The last two parameters allow the programmer to pass 
references to two array objects that contain references to the <b>String</b> parts and the <b>
Image</b> parts for all of the elements that will initially appear in the <b>
List</b>.&nbsp; Regardless of which constructor is used to construct the <b>List</b>, 
elements can later be added to or deleted from the <b>List</b> using the first 
eight methods shown in Figure 2.</p>
<p><font color="#FF0000"><b>Methods of the List class</b></font></p>
<p>The <b>List</b> class defines all of the <b>Choice</b> interface methods shown in Figure 2 
plus the four methods shown in Figure 9.</p>
<p>
 <b><a name="Figure_9">Figure 9</a>. Additional methods of the List class. </b>
<table border="1" cols="1" width="477" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
<ul>
	<li><b>setSelectCommand(Command&nbsp;command)</b> - Sets the Command to be used 
	for an IMPLICIT List selection action.</li>
	<li><b>removeCommand(Command&nbsp;cmd)</b> - The same as 
	Displayable.removeCommand but with the following additional semantics.</li>
	<li><b>setTicker(Ticker&nbsp;ticker)</b> - Sets a ticker for use with this 
	Displayable, replacing any previous ticker.</li>
	<li><b>setTitle(String&nbsp;s)</b> - Sets the title of the Displayable.</li>
</ul>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>I will have more to say about commands and interactive MIDlets in a future 
lesson.&nbsp; I will discuss methods similar to the first two methods in Figure 9 
at that time.</p>
<p>You learned about the use of a <b>Ticker</b> object in the earlier lesson 
titled <i>Introduction to the MIDlet User Interface, Part 1 (<a href="#Resources">see 
Resources</a>)</i>.&nbsp; Therefore, the method named <b>setTicker</b> shouldn't 
require further explanation.&nbsp; The method named <b>setTitle</b> is 
self-explanatory.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b>MIDlet testing</b><br>
				The MIDlets in this lesson were tested using a Java SE 6 
				compiler, targeted at a V1.4 virtual machine, and WTK 2.5.2 
				running under Windows XP.
				</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<p><font color="#FF0000"><b>The MIDlet named List01</b></font></p>
<p>The purpose of this MIDlet is to illustrate the creation and processing of a <b>List</b> user interface object.&nbsp; 
The processing of the <b>List</b> consists simply of determining and displaying 
which elements of the <b>List</b> are selected.</p>
<p><font color="#FF0000"><b>Three types are illustrated</b></font></p>
<p>You can add and remove comment indicators in the MIDlet code to activate any one of three statements to create a <b>List</b> object having one of the following <b>Choice</b> 
types:</p>
<ul>
	<li>IMPLICIT</li>
	<li>EXCLUSIVE</li>
	<li>MULTIPLE</li>
</ul>
<p><font color="#FF0000"><b>Operation</b></font></p>
<p>The MIDlet displays the <b>List</b> using the Sun cell phone emulator <i>(see 
Figures 3, 5, and 7)</i> and 
allows the user twenty seconds to select one or more list elements.&nbsp; Then 
the MIDlet identifies and displays the selected elements on the standard output 
device immediately before entering the destroyed state.</p>
<p><font color="#FF0000"><b>Selecting elements</b></font></p>
<p>Using the Sun cell phone emulator, you can highlight a <b>List</b> element 
using the up and down arrow keys on the emulator keypad <i>(also see the
<a href="#Using_the_computer_keyboard">sidebar</a>)</i>.</p>
<p>For the IMPLICIT type of <b>List</b>, the highlighted element is 
also the selected element.&nbsp; For the EXCLUSIVE and MULTIPLE types of <b>List</b>, you must make the 
selection by first highlighting the element and then clicking the large button 
on the cell phone emulator keypad that is surrounded by arrow keys <i>(see 
Figure 3)</i>.</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>As is my custom, I will present and explain the code in this MIDlet in 
fragments.&nbsp; A complete listing of the MIDlet is presented in Listing 5 near 
the end of the lesson.</p>
<p><font color="#FF0000">
<b>Beginning of the class</b></font></p>
<p>Listing 1 shows the beginning of the class for the MIDlet named <b>List01</b>.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Beginning of the class for the MIDlet 
named List01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class List01 extends MIDlet{
  Image redBallImage;
  Image greenBallImage;
  Image blueBallImage;
  List list;</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p align="left"><font color="#FF0000"><b>Instance variables</b></font></p>
<table align="right" border="0" cellpadding="0" cellspacing="0" width="275">
	<tr>
		<td width="10">&nbsp;</td>
		<td>
		<table border="1" cellpadding="5" cellspacing="0" width="100%">
			<tr>
				<td bgcolor="#eeeeee"><b>Allowable image file types</b><br>
				See the discussion in the earlier lesson titled <i>Using Alerts, 
				Images, Timers, and Gauges in MIDlets (see <a href="#Resources">
				Resources</a>)</i> regarding the allowable image file types.</td>
			</tr>
		</table>
		</td>
	</tr>
</table>
<p>The class begins by declaring several instance variables, including three 
variables of type <b>Image</b> 
that will be used to represent the red, green, and blue ball images 
shown in Figure 3.&nbsp; To run this MIDlet, you will need to put three small 
image files in the same directory as the source code.&nbsp; You can either give 
the files the following names, or you can modify the code in Listing 2 to match 
the names of your image files:</p>
<ul>
	<li>blueball.PNG</li>
	<li>greenball.PNG</li>
	<li>redball.PNG</li>
</ul>
<p><font color="#FF0000"><b>The constructor</b></font></p>
<p>Listing 2 shows the constructor in its 
entirety.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. The constructor for the MIDlet named 
List01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public <b>List01</b>(){//constructor
    System.out.println("Construct MIDlet");
    
    try{
      System.out.println("Construct Image objects");
      //Make certain that the image files specified
      // below are in the same directory as the source
      // file.
      redBallImage = Image.createImage(
                                   "/List01/redball.PNG");
      greenBallImage = Image.createImage(
                                 "/List01/greenball.PNG");
      blueBallImage = Image.createImage(
                                  "/List01/blueball.PNG");
    }catch(Exception e){
      e.printStackTrace();
    }//end catch
    
    System.out.println("Create List");
    //Activate one and only one of the following
    // statements to create a List with the specified
    // choice type.
    //list = new List("List Title",Choice.IMPLICIT);
    list = new List("List Title",Choice.EXCLUSIVE);
    //list = new List("List Title",Choice.MULTIPLE);
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>You learned about images in the earlier lesson titled <i>Using Alerts, 
Images, Timers, and Gauges in MIDlets (see <a href="#Resources">Resources</a>)</i>.&nbsp; 
Therefore, the code in Listing 2 involving images should not require further 
explanation.</p>
<p><font color="#FF0000"><b>Construct a List object</b></font></p>
<p>The last statement in Listing 2 constructs a new <b>List</b> object using the version of the 
<a href="#Constructors_for_the_List_class">constructor</a> that requires only two parameters:&nbsp; the title and the type.&nbsp; 
</p>
<p>Note that only one of the <b>List</b> constructor statements shown in Listing 
2 should be activated by adding and removing comment indicators.&nbsp; By 
activating each of these three statements one at a time, you should be able to 
replicate the output shown on the Sun cell phone emulator in Figures 3, 5, and 7
<i>(except that your images will probably be different)</i>.</p>
<p><font color="#FF0000"><b>The startApp method</b></font></p>
<p>The <b>startApp</b> method is shown in its entirety in Listing 3.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. The startApp method for the MIDlet named 
List01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  public void <b>startApp</b>(){

    System.out.println("Populate list");
    list.append("Zero",redBallImage);
    list.append("One",greenBallImage);
    list.append("Two",blueBallImage);

    //Make the List be the current display.
    System.out.println("Display list");
    Display.getDisplay(this).setCurrent(list);

    //Sleep for 20 seconds.
    try{Thread.currentThread().sleep(20000);
    } catch(Exception e){}

    //Enter the destroyed state.
    this.destroyApp(true);
  }//end startApp</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>You should already know the purpose of the startApp 
method</b></font></p>
<p>I am assuming that by now you will have studied the earlier lessons in this series <i>
(see <a href="#Resources">Resources</a>)</i> and it should no longer be 
necessary for me to describe the purpose of the methods named</p>
<ul>
	<li>startApp</li>
	<li>pauseApp</li>
	<li>destroyApp</li>
</ul>
<p><font color="#FF0000"><b>Populate, display, sleep, and destroy the MIDlet</b></font></p>
<p>Listing 3 makes three calls to the <b>append</b> method described in Figure 2 
to populate the <b>List</b> object with the text strings and images shown in Figure 3.</p>
<p>Then the <b>startApp</b> method in Listing 3 causes the <b>List</b> to become 
the current <b>Displayable</b> object and goes to sleep for twenty seconds.&nbsp; 
Upon awakening at the end of twenty seconds, the <b>startApp</b> method calls the <b>
destroyApp</b> method to cause the MIDlet to enter the destroyed state.</p>
<p><font color="#FF0000"><b>The pauseApp method</b></font></p>
<p>The <b>pauseApp</b> method is empty in this MIDlet.&nbsp; You can view the 
empty method in Listing 5.</p>
<p><font color="#FF0000"><b>The destroyApp method</b></font></p>
<p>The <b>destroyApp</b> method is shown in its entirety in Listing 4.&nbsp; 
Note that the incoming parameter to the <b>destroyApp</b> method is ignored by the code in Listing 4.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. The destroyApp method for the MIDlet named 
List01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public void <b>destroyApp</b>(boolean unconditional){

    System.out.println("Identify selected elements");

    <b>for</b>(int cnt = 0;cnt &lt; list.<b>size</b>();cnt++){
      if(list.<b>isSelected</b>(cnt)){
        System.out.println(
                      "Selected: " + list.<b>getString</b>(cnt));
      }//end if
    }//end for loop
    
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  
}//end class List01</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Identify and display the selected elements</b></font></p>
<p>Listing 4 uses a call to the <b>isSelected</b> method described in Figure 2 
inside a <b>for</b> loop to test each element and determine if the element is selected.&nbsp; If so, a 
message to that effect is displayed on the standard output device as shown in 
Figure 8.&nbsp; Once an element has been identified as being selected, the <b>
getString</b> method is called to get the text string part of the element.&nbsp; 
The text string is used to construct the message.</p>
<p><font color="#FF0000"><b>Enter the destroyed state</b></font></p>
<p>After displaying the selected elements, the <b>destroyApp</b> method calls 
the <b>notifyDestroyed</b> method to signal the AMS that the MIDlet is entering the 
destroyed state.</p>
<p><font color="#FF0000"><b>End of the MIDlet</b></font></p>
<p>Listing 4 also signals the end of the MIDlet class named <b>List01</b>.</p>
<center>
<h2><a name="Run the program"></a>Run the program</h2>
</center>
<p>I encourage you to copy the MIDlet code from Listing 5.&nbsp; Run the MIDlet 
in the updated MIDlet development framework named <b>WTKFramework03</b> that I 
provided in the lesson titled <i>Using Alerts, Images, Timers, and Gauges in 
MIDlets (see <a href="#Resources">Resources</a>)</i>.&nbsp; Experiment with the 
MIDlet code, making changes and running your modified MIDlets in conjunction 
with the framework program.&nbsp; See if you can explain the results produced by your 
changes.</p>
<p>Don't forget that you will need to download and install the latest version of 
the Sun Java Wireless Toolkit for CLDC <i>(see <a href="#Resources">
Resources</a>)</i>.&nbsp; As of the date this lesson is being written, the latest version of the toolkit is WTK2.5.2.&nbsp; In addition you 
will need three small image files to replace the red, green, and blue ball 
images in Figure 3.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, you learned about the <b>Choice</b> interface and the <b>List</b> 
class, which implements the <b>Choice</b> interface.&nbsp; You learned that a <b>Choice</b> object is composed of a text 
string, an image, and a font attribute.&nbsp; You learned about <i>implicit</i>, 
<i>exclusive</i>, and <i>multiple</i> <b>Choice</b> types.&nbsp; You learned about the 
selected state of a <b>Choice</b> element of each of the different types.&nbsp; 
You learned how to create a <b>List</b>, how to display it in the Sun cell phone 
emulator, and how to determine which elements in the <b>List</b> are selected.</p>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>In the next lesson, you will learn about the class named <b>Item</b>.&nbsp; Then 
you will learn how to create a <b>Form</b> and how to populate it with objects 
of the following classes:&nbsp; String, StringItem, Image, ImageItem, ChoiceGroup, 
DateField, Gauge <i>(interactive)</i>, Gauge <i>(non-interactive)</i>, Spacer, 
and TextField.&nbsp; You will also learn about layout directives and appearance 
modes.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a href="http://java.sun.com/products/sjwtoolkit/download-2_5.html">
	Download</a> Sun Java Wireless Toolkit 2.5 for CLDC Release</li>
	<li><a href="http://en.wikipedia.org/wiki/MIDlet">MIDlet</a>: From 
	Wikipedia, the free encyclopedia</li>
	<li><a href="http://www.scmad.com/j2me-glossary1.php">MIDlet</a>: According 
	to SCMAD Certification Center</li>
	<li><a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html">J2ME 
	Tutorial, Part 1: Creating MIDlets</a> by Vikram Goyal</li>
	<li>
	<a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html?page=2#step4">
	Pre-verifying</a> MIDlet code according to Vikram Goyal</li>
	<li>
	<a href="http://today.java.net/pub/a/today/2005/02/09/j2me1.html?page=2#step7">
	Deploying</a> a MIDlet according to Vikram Goyal</li>
	<li><span class="style2">
	<a href="http://developers.sun.com/mobility/device/device;jsessionid=3F91C410E754F34B1A44DEBCE011ED18">
	The Java ME Device Table</a></span></li>
	<li><span class="style2">
	<a href="http://developers.sun.com/mobility/midp/ttips/getAppProperty/index.html">
	Retrieving MIDlet Attributes</a> by Richard Marejka</span></li>
	<li><a href="http://developers.sun.com/mobility/learn/midp/lifecycle/">
	Learning Path: MIDlet Life Cycle</a></li>
	<li><span class="style2">
	<a href="http://www.javaworld.com/javaworld/jw-12-2000/jw-1229-traps.html?page=1">
	When Runtime.exec() won't</a> By </span>Michael C. Daconta</li>
	<li>
	<a href="http://en.wikipedia.org/wiki/Connected_Limited_Device_Configuration">
	Connected Limited Device Configuration</a> <i>(CLDC)</i> from
	<span class="style2">Wikipedia</span></li>
	<li><span class="style2">
	<a href="http://en.wikipedia.org/wiki/Mobile_Information_Device_Profile">
	Mobile Information Device Profile</a> <i>(MIDP)</i> from Wikipedia</span></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr030/">CLDC 1.0</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr139/">CLDC 1.1</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr037/">MIDP 1.0</a></li>
	<li>Online API documentation for
	<a href="http://java.sun.com/javame/reference/apis/jsr118/">MIDP 2.0</a></li>
	<li><a href="http://www.pictureresize.org/online-images-converter.html">Free 
	Online Image Converter</a></li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3719111">
	2570</a> Getting Started with MIDlets and the Sun Java Wireless Toolkit for 
	CLDC</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3721706">
	2572</a> Capturing Output Produced by Programs Running in a Child Process</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3724381">
	2574</a> Back to Basics with MIDlets and the Sun Java Wireless Toolkit for 
	CLDC</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3727396">
	2576</a> Introduction to the MIDlet User Interface, A First Look</li>
	<li>
	<a target="new" href="http://www.developer.com/java/j2me/article.php/3730141">
	2578</a> Handling Life-Cycle Issues with the MIDlet User Interface</li>
	<li><a href="http://www.developer.com/java/j2me/article.php/3736301">2580</a> Using Alerts, Images, Timers, and Gauges in MIDlets</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listing</h2>
</center>
A complete listing of the MIDlet program discussed in this lesson is shown in 
Listing 5 below.
<p>
<b><a name="Listing_5">Listing 5</a>. The complete MIDlet program named List01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*List01.java
Copyright 2007, R.G.Baldwin

The purpose of this program is to illustrate the creation
and simple processing of a List user interface object.

Add and remove comment indicators to activate one of three
given statements to create a List object having one of the
following Choice types:

IMPLICIT
EXCLUSIVE
MULTIPLE

The MIDlet displays the list and allows the user twenty
seconds to select one or more list elements.  Then it
identifies and displays the selected elements on the
standard output device immediately before entering the
destroyed state..

Using the Sun cell phone emulator, you can highlight a
List item using the up and down arrow keys.

For IMPLICIT, the highlighted item is also the selected
item.

For EXCLUSIVE and MULTIPLE, make the selection by first
highlighting the item and then clicking the large button
on the cell phone emulator keypad that is surrounded by
arrow keys.

Tested using a Java SE 6 compiler, targeted at a V1.4
virtual machine, and WTK 2.5.2 running under Windows XP.
*********************************************************/

package List01;

import javax.microedition.lcdui.Display;
import javax.microedition.lcdui.List;
import javax.microedition.lcdui.Choice;
import javax.microedition.midlet.MIDlet;
import javax.microedition.lcdui.Image;

public class List01 extends MIDlet{
  Image redBallImage;
  Image greenBallImage;
  Image blueBallImage;
  List list;
  //----------------------------------------------------//
  
  public List01(){//constructor
    System.out.println("Construct MIDlet");
    
    try{
      System.out.println("Construct Image objects");
      //Make certain that the image files specified
      // below are in the same directory as the source
      // file.
      redBallImage = Image.createImage(
                                   "/List01/redball.PNG");
      greenBallImage = Image.createImage(
                                 "/List01/greenball.PNG");
      blueBallImage = Image.createImage(
                                  "/List01/blueball.PNG");
    }catch(Exception e){
      e.printStackTrace();
    }//end catch
    
    System.out.println("Create List");
    //Activate one and only one of the following
    // statements to create a List with the specified
    // choice type.
    //list = new List("List Title",Choice.IMPLICIT);
    list = new List("List Title",Choice.EXCLUSIVE);
    //list = new List("List Title",Choice.MULTIPLE);
  }//end constructor
  //----------------------------------------------------//

  public void startApp(){

    System.out.println("Populate list");
    list.append("Zero",redBallImage);
    list.append("One",greenBallImage);
    list.append("Two",blueBallImage);

    //Make the List be the current display.
    System.out.println("Display list");
    Display.getDisplay(this).setCurrent(list);

    //Sleep for 20 seconds.
    try{Thread.currentThread().sleep(20000);
    } catch(Exception e){}

    //Enter the destroyed state.
    this.destroyApp(true);
  }//end startApp
  //----------------------------------------------------//

  public void pauseApp(){
  }//end pauseApp
  //----------------------------------------------------//

  public void destroyApp(boolean unconditional){
    System.out.println("Identify selected elements");
    for(int cnt = 0;cnt &lt; list.size();cnt++){
      if(list.isSelected(cnt)){
        System.out.println(
                      "Selected: " + list.getString(cnt));
      }//end if
    }//end for loop
    
    System.out.println("Destroy MIDlet");
    notifyDestroyed();
  }//end destroyApp
  //----------------------------------------------------//

}//end class List01</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2008, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
java J2ME MIDlet &quot;cell phone emulator&quot; &quot;wireless toolkit&quot; WTK MIDP CLDC 
Displayable TextBox Ticker TextField Alerts Images Timers Gauges Lists</p>
<p>-end- </p>
</body>
</html>
