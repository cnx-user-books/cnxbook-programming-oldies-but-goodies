<html><head>
   <meta http-equiv="content-type" content="text/html; charset=iso-8859-1">
   <meta name="generator" content="mozilla/4.04 [en] (win95; i) [netscape]">
   <meta name="author" content="richard g. baldwin">
   <title>... in Java by Richard G Baldwin</title></head><body><!--start-->

<center><h3><b><i>Richard G Baldwin (512) 223-4758, <a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a>,
<a href="http://www2.austin.cc.tx.us/baldwin/">http://www2.austin.cc.tx.us/baldwin/</a></i></b></h3></center>

<center><h2><b><!--title-->Event Handling in JDK 1.1, Sharing a Listener Object Among, Visual Components<!--endtitle--></b></h2></center>
Java Programming, Lecture Notes # 82, Revised 02/14/98.
<ul><li><a href="#preface">Preface</a></li>

<li><a href="#introduction">Introduction</a></li>

<li><a href="#sample program">Sample Program</a></li>

<ul><li><a href="#interesting code fragments">Interesting Code Fragments</a></li>

<li><a href="#program listing">Program Listing</a></li></ul>

<li><a href="#another sample program">Another Sample Program</a></li>

<li><a href="#review">Review</a></li></ul>

<hr width="100%"><center><h2><a name="preface"></a><font color="#ff0000">Preface</font></h2></center>
Students in Prof. Baldwin's <b><u>Intermediate Java Programming</u></b>
classes at ACC are responsible for knowing and understanding all of the
material in this lesson.
<center><h2><a name="introduction"></a><b><font color="#ff0000">Introduction</font></b></h2></center>
Previous lessons discussed the sharing of a <u>single event Source object</u>
among <u>two or more Listener</u> objects for <i>low-level </i>events.

<p>This lesson discusses the sharing of a <u>single Listener object</u>
among <u>two or more visual components</u> for <i>low-level events</i>
generated by any of the visual components.

<p>The event-handling method of the listener object
<ul><li>
responds to each event,</li>

<li>
determines which visual component generated the event, and</li>

<li>
takes the appropriate action.</li></ul>
The primary issue in this type of operation boils down to <u>determining
which component generated the event</u>.

<p>This is accomplished by <u>assigning a unique name</u> to each visual
component when it is instantiated and <u>using that name to distinguish</u>
among the visual components when an event occurs.

<p>This approach is completely straightforward and intuitive. An improved
approach to accomplishing the same objective is illustrated in some sample
programs near the end of the lesson. While possibly less intuitive, the
improved approach is more object-oriented and probably easier to maintain.
<center><h2><a name="sample program"></a><font color="#ff0000">Sample Program</font></h2></center>
This program illustrates the sharing of a single listener object among
two different visual components of the same type.

<p>The program detects mouse events occurring on either of two different
Frame <b>objects</b>. It distinguishes between the two objects on the basis
of the component name, and displays the coordinates of a mouse click on
whichever object experienced the mouse click.

<p>This program was tested using JDK 1.1.3 under Win95.

<p>Note that when the program starts, the two visual components overlay
one another. It is necessary to physically move one of them in order to
access the other.
<center><h3><a name="interesting code fragments"></a><font color="#ff0000">Interesting
Code Fragments</font></h3></center>
This program is really quite simple. The only new code involves cracking
the event object to <u>obtain the name</u> of the visual component that
generated the <b>mousePressed()</b> event.

<p>The <b>main()</b> method instantiates an object of type GUI (named <b>gui)</b>
which serves the purpose of providing the <u>visual interface.</u>

<p>The <b>Frame </b>class is <i>extended </i>into a new class named <b>MyFrame
</b>to make it possible to override the <b>paint()</b> method of the class.
This is necessary to <u>display the coordinates</u> of mouse clicks on
the interior of the frame <u>using the graphics method</u> <b>drawString()</b>.
<h4><font color="#ff0000">The Event Source Objects</font></h4>
The constructor of the <b>GUI</b> class <u>instantiates two objects</u>
of type <b>MyFrame </b>and makes them visible. This is accomplished using
code such as the following:
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; MyFrame myFrame1 = new MyFrame("<b>Frame1</b>");
&nbsp;&nbsp;&nbsp; myFrame1.setVisible(true);</pre></td></tr></table>
The reference variables for the two objects are named <b>myFrame1</b> and
<b>myFrame2</b>.

<p>When they are instantiated, <u>unique names</u> (<b>Frame1</b> and <b>Frame2)</b>
are given to the objects using the following code in the constructor for
the extended <b>Frame </b>objects (the <b>MyFrame </b>class <i>extends
</i>the <b>Frame </b>class in order to override its <b>paint()</b> method).
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp; <b>MyFrame</b>(String <b>name</b>){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setSize(300,200);
&nbsp;&nbsp;&nbsp; //name used to distinguish between the two objects
&nbsp;&nbsp;&nbsp; <b>setName(name)</b>;
&nbsp; }//end constructor</pre></td></tr></table>
The unique names are <u>used later</u> by the Listener object to <u>determine
which object</u> generated a mouse event.

<p>The constructor in the GUI class also uses the following code to instantiate
a <u>single Listener object</u> which will <u>process low-level mouse events</u>
on <u>either</u> of the two visual objects.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>MouseProc mouseProcCmd = new MouseProc(myFrame1,myFrame2);
myFrame1.addMouseListener(mouseProcCmd);
myFrame2.addMouseListener(mouseProcCmd);&nbsp;</pre></td></tr></table>
To review the syntax, the first statement simply <u>instantiates the new
Listener object</u> named <b>mouseProcCmd</b> passing references to the
two visual components as parameters.

<p>The next two statements <u>add</u> that Listener object (<i>register</i>
the Listener object) to a <u>list of Listener objects</u> which are <u>automatically
notified</u> whenever mouse events occur on the visual objects referred
to as <b>myFrame1</b>, and <b>myFrame2</b>, respectively.

<p>You will recall that once the programmer causes the name of a Listener
object to be added to the list, <u>no further programming effort</u> is
required to cause the notification to occur.

<p>The <u>notifications</u> are carried out by <u>invoking specific overridden
instance methods</u> of the Listener object upon the occurrence of a specific
types of mouse events.

<p>The <u>declarations</u> for all of the <u>methods</u> which <u>match</u>
up with all of the possible mouse <u>event types</u> are defined by the
<b>MouseListener</b> interface which matches the <b>MouseEvent</b> class.

<p>The class from which the <b>Listener </b>object is instantiated <u>must
define</u>, either directly or indirectly, all the <u>methods</u> declared
in the <b>MouseListener</b> interface.

<p>In addition to the <i>registration</i> of the <b>MouseListener</b> object
to receive mouse events, the program also instantiates and <i>registers</i>
a Listener object which monitors for Window events and terminates the program
whenever the user closes <u>either</u> of the two visual objects. In this
case, the code in the Listener object <u>makes no attempt</u> to distinguish
between the two visual objects. The instantiation and registration code
is shown below.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame1.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp; myFrame2.addWindowListener(winProcCmd1);&nbsp;</pre></td></tr></table>

<h4><font color="#ff0000">The MouseListener Object</font></h4>
Most of the programming complexity is tied up in the <b>mouseListener </b>object,
and it isn't very complicated.

<p>The central issue for the code in the <b>Listener </b>object is <u>how
to determine which</u> one of several visual components <u>generated an
event</u>.

<p>This particular <b>Listener </b>object only responds to <b>mousePressed</b>
events, but the following information applies to all of the different types
of mouse events, and probably to most or all of the low-level events as
well.

<p>The <b>MouseProc</b> (listener) class in this program
<ul><li>
extends the <b>MouseAdapter</b> class and</li>

<li>
overrides the <b>mousePressed()</b> method that is declared in the <b>MouseListener
</b>interface.</li></ul>
You will recall that the <b>MouseAdapter</b> class <u>overrides all of
the methods</u> of the <b>MouseListener </b>interface with <u>empty methods</u>,
thus freeing our code from the requirement to override all of those methods.

<p>When the <b>mousePressed()</b> method is invoked, an object of type
<b>MouseEvent</b> (known locally as <b>e)</b> is passed in as a parameter.

<p>The following statement was used in the <b>MouseListener </b>object
to determine if the name of the object that generated the event is <b>Frame1</b>.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>if( <b>e.getComponent().getName().compareTo("Frame1") == 0 </b>){</pre></td></tr></table><u>If</u> it is determined that the <u>name</u> of the component that generated
the event is <b>Frame1</b>, code is executed to <u>display the coordinates</u>
of the mouse pointer <u>on the visual object named</u> <b>Frame1</b>.

<p><u>Otherwise</u>, an <b>else</b> clause is used to <u>display</u> the
coordinate information <u>on the visual object named</u> <b>Frame2</b>.
(No provisions were made for the event to have been generated by any visual
objects other than these two.)

<p>The code to display the coordinate information is <u>essentially the
same</u> as was discussed in a similar program in an earlier lesson, and
so it won't be discussed again here.

<p>Now let's take a look at the details of <u>cracking</u> the <u>MouseEvent</u>
object to obtain the name of the visual component that generated the event.

<p>The <b>getComponent()</b> method is a method of the <b>java.awt.event.ComponentEvent</b>
class which, according to the JDK 1.1 documentation, <i>"Returns the component
where this event originated." </i>It is returned as an object of type <b>Component
</b>which is acted upon by the <b>getName()</b> method.

<p>The <b>getName()</b> method was added to the <b>java.awt.Component</b>
class by JDK 1.1. This method <i>"Gets the name of the component"</i> and
returns it as a <b>String </b>object. The <b>String </b>object is acted
upon by the <b>compareTo()</b> method.

<p>The <b>compareTo()</b> method is a standard method of the <b>String</b>
class, carried forward from JDK 1.0.2, that can be used to compare two
<b>String </b>objects. It is used to determine if the name of the component
matches the String "<i>Frame1"</i>.

<p>Note that it is also possible to to perform tests directly on the <b>MouseEvent
</b>object to match it to a component name. The procedure for doing this
will be included in a subsequent lesson.

<p>By the way, in case you haven't noticed, the <b>java.awt.event</b> package
is different from the <b>java.awt</b> package. The <b>java.awt.event</b>
package was added in JDK 1.1. It can be very confusing if you drop into
the <b>java.awt</b> package of the documentation when you really need to
be in <b>java.awt.event</b>.
<h4><font color="#ff0000">The WindowListener Object</font></h4>
This program also contains a <b>WindowListener </b>object which <u>terminates</u>
the program whenever the user closes <u>either</u> of the <b>Frame </b>objects.
Except for the fact that this object is registered to receive <b>Window
</b>events from either of the two <b>Frame </b>objects, it is no different
from similar <b>Listener </b>used in an earlier example program, and therefore,
won't be discussed further here.

<p>Note that an improved version of this program is presented at the end
of this lesson. The improved version does not require the establishment
of <b>Source </b>object names, and does not require the passing of references
to the constructor for the <b>WindowListener </b>in order to distinguish
between between the two sources. You should become familiar with the methodology
used in the improved version as well as the methodology used in the following
version.
<center><h3><a name="program listing"></a><font color="#ff0000">Program Listing</font></h3></center>

<table border bgcolor="#ffff80" ><tr><td><pre>/*File Event10.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

The program illustrates the sharing of a single listener&nbsp;
object among two different visual components of the same&nbsp;
type.

The program detects mouse events occurring on either of two
different Frame objects.&nbsp; It distinguishes between the two
objects on the basis of the component name, and displays&nbsp;
the coordinates of a mouse click on whichever object&nbsp;
experienced the mouse click.

This program was tested using JDK 1.1.3 under Win95.

Note that when the program starts, the two visual&nbsp;
components overlay one another.&nbsp; It is necessary to move&nbsp;
one of them in order to access the other.
**********************************************************/

import java.awt.*;
import java.awt.event.*;

public class Event10 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class Event10
//=======================================================//

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
&nbsp; int xCoor;
&nbsp; int yCoor;

&nbsp; MyFrame(String name){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setSize(300,200);
&nbsp;&nbsp;&nbsp; //Name used to distinguish between the two objects
&nbsp;&nbsp;&nbsp; setName(name);
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; //display coordinate information on the visual object
&nbsp;&nbsp;&nbsp; g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
&nbsp; }//end paint()
}//end class MyFrame
//=======================================================//

//The following class is used to instantiate a graphical
// user interface object.
class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create two visual objects of type MyFrame and make&nbsp;
&nbsp;&nbsp;&nbsp; // them visible. Name them Frame1 and Frame2.
&nbsp;&nbsp;&nbsp; MyFrame myFrame1 = new MyFrame("Frame1");
&nbsp;&nbsp;&nbsp; myFrame1.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyFrame myFrame2 = new MyFrame("Frame2");
&nbsp;&nbsp;&nbsp; myFrame2.setVisible(true);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes either&nbsp;
&nbsp;&nbsp;&nbsp; // window.
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame1.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp; myFrame2.addWindowListener(winProcCmd1);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will
&nbsp;&nbsp;&nbsp; // process mouse events on either MyFrame object.
&nbsp;&nbsp;&nbsp; MouseProc mouseProcCmd =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseProc(myFrame1,myFrame2);
&nbsp;&nbsp;&nbsp; myFrame1.addMouseListener(mouseProcCmd);
&nbsp;&nbsp;&nbsp; myFrame2.addMouseListener(mouseProcCmd);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and&nbsp;
// displays the coordinates of the mouse pointer when the&nbsp;
// mouse is pressed.&nbsp; The listener object distinguishes&nbsp;
// between two different visual objects on the basis of&nbsp;
// their component names and displays the coordinate&nbsp;
// information on the visual object which generated the&nbsp;
// mouse event.

class MouseProc extends MouseAdapter{
&nbsp; //save references to the objects here
&nbsp; MyFrame refToFrame1,refToFrame2;&nbsp;
&nbsp;&nbsp;
&nbsp; MouseProc(MyFrame inFrame1,MyFrame inFrame2){//construct
&nbsp;&nbsp;&nbsp; refToFrame1 = inFrame1;//save references to the frames
&nbsp;&nbsp;&nbsp; refToFrame2 = inFrame2;
&nbsp; }//end constructor

&nbsp; //Override the mousePressed() method to respond whenever
&nbsp; // the mouse is pressed on one of the frame objects.&nbsp;&nbsp;
&nbsp; // Distinguish between the two frame objects using the&nbsp;
&nbsp; // component name and display the coordinates of the&nbsp;
&nbsp; // mouse on the correct object.
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; if( e.getComponent().getName().compareTo("Frame1")&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == 0 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get X and Y coordinates of mouse pointer
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and store in the Frame object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.xCoor = e.getX();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.yCoor = e.getY();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //display coordinate information
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.repaint();
&nbsp;&nbsp;&nbsp; }else{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Get X and Y coordinates of mouse pointer
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //and store in the Frame object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame2.xCoor = e.getX();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame2.yCoor = e.getY();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //display coordinate information&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame2.repaint();
&nbsp;&nbsp;&nbsp; }//end if-else
&nbsp; }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to terminate the program
// when the user closes either frame object. Note that&nbsp;
// class extends the adapter class
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=======================================================//</pre></td></tr></table>
.
<center><h2><a name="another sample program"></a><font color="#ff0000">Another Sample
Program</font></h2></center>
A <u>single</u> Listener object can be <u>registered</u> to process events
of a given class generated by <u>two or more</u> different visual objects.

<p><u>Unique names</u> can be assigned to the objects when they are instantiated.

<p>When an event occurs, the code in the Listener object can <u>obtain
the name</u> of the visual object that generated the event and <u>use it
to distinguish</u> among the objects.

<p>The <u>name</u> of the object which generated the event can be <u>determined</u>
using the <u>following statement</u> where
<ul><li><b>e </b>is the local name of the object passed into the low-level event-handling
method, and</li>

<li><b>"Frame"</b> is a string being tested against the component name of a
visual object that <u>may</u> have generated the event.</li></ul>
&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>if( e.getComponent().getName().compareTo("Frame") == 0 ){}</pre></td></tr></table>
Although the previous program used two visual objects of the same type,
there is no reason that the visual objects have to be of the same type,
as long as <u>all of the visual objects</u> which share the <b>Listener
</b>object are <u>capable of generating events of the event class</u> for
which the Listener is designed.

<p>This is illustrated in the following program which <u>modifies</u> the
previous program to use
<ul><li>
a visual Frame object and</li>

<li>
a visual Window object,</li></ul>
instead of two Frame objects.

<p>The ability to display the coordinates of mouse clicks was also <u>removed
for simplification</u> of the program. The operation of the program is
discussed in the comments.

<p>Note that an improved version of this program is presented at the end
of this lesson. The improved version does not require the establishment
of <b>Source </b>object names, and does not require the passing of references
to the constructor for the Window Listener in order to distinguish between
between the two sources. You should become familiar with the methodology
used in the improved version as well as the methodology used in the following
version.
<br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre>/*File Event11.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run under&nbsp;
JDK 1.1

The program illustrates the sharing of a single listener&nbsp;
object between two different visual components of&nbsp;
different types.

The program detects mouse events occurring on either a&nbsp;
visual Frame object or on a visual Window object.&nbsp; It&nbsp;
distinguishes between the two objects on the basis of the
component name, and displays a message indicating which
object generated the event.

Clicking inside the Frame object but outside the Window&nbsp;
object produces the following message:

Got mousePressed event from Frame object

Clicking inside the Window object produces the following&nbsp;
message:

Got mousePressed event from Window object

Closing the Frame object produces the following message&nbsp;
and terminates the program:

Got windowClosing event from Frame object

These results were produced using JDK 1.1.3, running under&nbsp;
Windows 95.
**********************************************************/

import java.awt.*;
import java.awt.event.*;

public class Event11 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();//instantiate a GUI
&nbsp; }//end main
}//end class Event11
//=======================================================//

//The following class is used to instantiate a graphical&nbsp;
// user interface object.
class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create a visual Frame object and name it Frame
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame();
&nbsp;&nbsp;&nbsp; myFrame.setSize(200,300);
&nbsp;&nbsp;&nbsp; myFrame.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setName("Frame");
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a visual Window object inside the Frame&nbsp;
&nbsp;&nbsp;&nbsp; // object and name it Window
&nbsp;&nbsp;&nbsp; Window myWindow = new Window(myFrame);
&nbsp;&nbsp;&nbsp; myWindow.setSize(100,100);
&nbsp;&nbsp;&nbsp; myWindow.setName("Window");
&nbsp;&nbsp;&nbsp; myWindow.setVisible(true);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which&nbsp;
&nbsp;&nbsp;&nbsp; // will process mouse events on either the Frame&nbsp;
&nbsp;&nbsp;&nbsp; // object or the Window object.
&nbsp;&nbsp;&nbsp; MouseProc mouseProcCmd = new MouseProc();
&nbsp;&nbsp;&nbsp; myFrame.addMouseListener(mouseProcCmd);
&nbsp;&nbsp;&nbsp; myWindow.addMouseListener(mouseProcCmd);&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which&nbsp;
&nbsp;&nbsp;&nbsp; // will display a message and terminate the program&nbsp;
&nbsp;&nbsp;&nbsp; // when the user closes the Frame object
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(winProcCmd1);
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and&nbsp;
// displays a message when a mousEpressed() event occurs on
// either the Frame object or the Window object.&nbsp; The&nbsp;
// message identifies which visual object generated
// the event. The listener object distinguishes between
// the two visual objects on the basis of their component
// names.

class MouseProc extends MouseAdapter{

&nbsp; //Override the mousePressed() method to respond whenever
&nbsp; // the mouse is pressed on one of the visual objects.&nbsp;&nbsp;
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; if( e.getComponent().getName().compareTo("Frame")&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == 0 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Got mousePressed event from Frame object");
&nbsp;&nbsp;&nbsp; }//end if
&nbsp;&nbsp;&nbsp; if( e.getComponent().getName().compareTo("Window")&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; == 0 ){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Got mousePressed event from Window object");
&nbsp;&nbsp;&nbsp; }//end if&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to display a message and
// terminate the program when the user closes the Frame&nbsp;
// object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Got windowClosing event from Frame object");
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=======================================================//</pre></td></tr></table>
.
<center><h2><a name="review"></a><font color="#ff0000">Review</font></h2></center>
Q - Write a Java application that displays two Frame objects on the screen.
Each object has a width of 300 pixels and a height of 200 pixels.

<p>One object is located in the upper left-hand corner of the screen. The
top left-hand corner of the other object barely touches the bottom right-hand
corner of the first object.

<p>Make your name and the name of each object appear in the banner at the
top of each object. Do not assign names to the objects.

<p>Cause the two objects to share a single Listener object to respond to
mouse events.

<p>Whenever the mouse is pressed internal to either object, the coordinates
of the mouse pointer are displayed near the pointer on that object with
the horizontal coordinate being displayed first followed by the vertical
coordinate. The two coordinate values are separated by a comma and a space.

<p>Also cause the two objects to share a single Listener object that will
terminate the program whenever the user clicks the "close" button on either
object.

<p>Make certain that your application terminates and returns control to
the operating system when the user clicks on the "close" button in the
upper right-hand corner of the object.

<p><font color="#0000ff"><font size=-1>A - See program below.</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg120.java from lesson 82
Copyright 1997, R.G.Baldwin
*/

import java.awt.*;
import java.awt.event.*;

public class SampProg120 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg120
//---------------------------------------------------------

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
&nbsp; int xCoor;
&nbsp; int yCoor;

&nbsp; MyFrame(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Baldwin " + this.getName());
&nbsp;&nbsp;&nbsp; setSize(300,200);
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g){//override paint() method
&nbsp;&nbsp;&nbsp; //display coordinate information on the object
&nbsp;&nbsp;&nbsp; g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
&nbsp; }//end paint()
}//end class MyFrame
//---------------------------------------------------------

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create two visual objects of type MyFrame, specify
&nbsp;&nbsp;&nbsp; // their locations, and make them visible.
&nbsp;&nbsp;&nbsp; MyFrame myFrame1 = new MyFrame();
&nbsp;&nbsp;&nbsp; myFrame1.setLocation(new Point(0,0));
&nbsp;&nbsp;&nbsp; myFrame1.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyFrame myFrame2 = new MyFrame();
&nbsp;&nbsp;&nbsp; myFrame2.setLocation(new Point(300,200));&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myFrame2.setVisible(true);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes either&nbsp;
&nbsp;&nbsp;&nbsp; // window.
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame1.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp; myFrame2.addWindowListener(winProcCmd1);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // process mouse events on either MyFrame object.
&nbsp;&nbsp;&nbsp; MouseProc mouseProcCmd =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseProc(myFrame1,myFrame2);
&nbsp;&nbsp;&nbsp; myFrame1.addMouseListener(mouseProcCmd);
&nbsp;&nbsp;&nbsp; myFrame2.addMouseListener(mouseProcCmd);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class GUI definition
//---------------------------------------------------------

//This listener class monitors for mouse presses and&nbsp;
// displays the coordinates of the mouse pointer when the&nbsp;
// mouse is pressed.&nbsp; The listener object distinguishes&nbsp;
// between two different visual objects on the basis of&nbsp;
// their component names and displays the coordinate&nbsp;
// information on the visual object which generated the&nbsp;
// mouse event.

class MouseProc extends MouseAdapter{
&nbsp; //save references to the objects here
&nbsp; MyFrame refToFrame1,refToFrame2;
&nbsp;&nbsp;
&nbsp; MouseProc(MyFrame inFrame1,MyFrame inFrame2){//constructor
&nbsp;&nbsp;&nbsp; refToFrame1 = inFrame1;//save references to the frames
&nbsp;&nbsp;&nbsp; refToFrame2 = inFrame2;
&nbsp; }//end constructor

&nbsp; //Override the mousePressed() method to respond whenever&nbsp;
&nbsp; // the mouse is pressed on one of the frame objects.&nbsp;&nbsp;
&nbsp; // Distinguish between the two frame objects using the&nbsp;
&nbsp; // component name and display the coordinates of the&nbsp;
&nbsp; // mouse on the correct object.
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp;&nbsp; if( e.getComponent().getName().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compareTo(refToFrame1.getName()) == 0)
&nbsp;&nbsp;&nbsp; {&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.xCoor = e.getX();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.yCoor = e.getY();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //display coordinates on Frame1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.repaint();
&nbsp;&nbsp;&nbsp; }else{&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame2.xCoor = e.getX();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame2.yCoor = e.getY();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //display coordinates on Frame2
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame2.repaint();
&nbsp;&nbsp;&nbsp; }//end if-else
&nbsp; }//end mousePressed()
}//end class MouseProc
//---------------------------------------------------------

//The following listener is used to terminate the program&nbsp;
// when the user closes either frame object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1</font></pre></td></tr></table>
Q - Write a Java application that displays two Frame objects on the screen.
Place a red Panel object in the upper-left quadrant of the second Frame
object.

<p>Each Frame object has a width of 300 pixels and a height of 200 pixels.

<p>One Frame object is located in the upper left-hand corner of the screen.
The top left-hand corner of the second Frame object barely touches the
bottom right-hand corner of the first Frame object.

<p>Make your name and the name of each Frame object appear in the banner
at the top of each Frame object.

<p>Cause the first Frame object and the Panel object to share a single
Listener object to respond to mouse events. Do not allow the second Frame
object (which contains the Panel object) to share the Listener object for
mouse events.

<p>Whenever the mouse is pressed internal to the first Frame object, or
on the red portion of the Panel object, the coordinates of the mouse pointer
are displayed near the pointer on that object with the horizontal coordinate
being displayed first followed by the vertical coordinate. The two coordinate
values are separated by a comma and a space.

<p>Whenever the mouse is pressed internal to the second Frame object, but
not on the red Panel object, coordinate values are not displayed.

<p>Also cause the two Frame objects to share a single Listener object that
will terminate the program whenever the user clicks the "close" button
on either Frame object.

<p>Make certain that your application terminates and returns control to
the operating system when the user clicks on the "close" button in the
upper right-hand corner of either Frame object.

<p><font color="#0000ff"><font size=-1>A - See program below.</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File SampProg121.java from lesson 82
Copyright 1997, R.G.Baldwin
*/

import java.awt.*;
import java.awt.event.*;

public class SampProg121 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg121
//---------------------------------------------------------

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
&nbsp; int xCoor;
&nbsp; int yCoor;

&nbsp; MyFrame(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Baldwin " + this.getName());
&nbsp;&nbsp;&nbsp; setSize(300,200);
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g){//override paint() method
&nbsp;&nbsp;&nbsp; //display coordinate information on the object
&nbsp;&nbsp;&nbsp; g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
&nbsp; }//end paint()
}//end class MyFrame
//---------------------------------------------------------

//Subclass Panel in order to override the paint method.
class MyPanel extends Panel{
&nbsp; int xCoor;
&nbsp; int yCoor;

&nbsp; MyPanel(){//constructor
&nbsp;&nbsp;&nbsp; setBounds(new Rectangle(0,0,150,100));&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; setBackground(Color.red);
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g){//override paint() method
&nbsp;&nbsp;&nbsp; //display coordinate information on the object
&nbsp;&nbsp;&nbsp; g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
&nbsp; }//end paint()
}//end class MyFrame
//---------------------------------------------------------

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Instantiate an object of type MyPanel
&nbsp;&nbsp;&nbsp; MyPanel myPanel = new MyPanel();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate two objects of type MyFrame, specify
&nbsp;&nbsp;&nbsp; // their locations, and make them visible.&nbsp; Place the
&nbsp;&nbsp;&nbsp; // MyPanel object in the second MyFrame object.
&nbsp;&nbsp;&nbsp; MyFrame myFrame1 = new MyFrame();
&nbsp;&nbsp;&nbsp; myFrame1.setLocation(new Point(0,0));
&nbsp;&nbsp;&nbsp; myFrame1.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyFrame myFrame2 = new MyFrame();
&nbsp;&nbsp;&nbsp; myFrame2.setLayout(null);
&nbsp;&nbsp;&nbsp; myFrame2.setLocation(new Point(300,200));
&nbsp;&nbsp;&nbsp; myFrame2.add(myPanel);
&nbsp;&nbsp;&nbsp; myFrame2.setVisible(true);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes either&nbsp;
&nbsp;&nbsp;&nbsp; // window.
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame1.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp; myFrame2.addWindowListener(winProcCmd1);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // process mouse events on either the MyFrame object
&nbsp;&nbsp;&nbsp; // or the myPanel object.
&nbsp;&nbsp;&nbsp; MouseProc mouseProcCmd =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MouseProc(myFrame1,myPanel);
&nbsp;&nbsp;&nbsp; myFrame1.addMouseListener(mouseProcCmd);
&nbsp;&nbsp;&nbsp; myPanel.addMouseListener(mouseProcCmd);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class GUI definition
//---------------------------------------------------------

//This listener class monitors for mouse presses and&nbsp;
// displays the coordinates of the mouse pointer when the&nbsp;
// mouse is pressed.&nbsp; The listener object distinguishes&nbsp;
// between two different visual objects on the basis of&nbsp;
// their component names and displays the coordinate&nbsp;
// information on the visual object which generated the&nbsp;
// mouse event.

class MouseProc extends MouseAdapter{
&nbsp; //save references to the objects here
&nbsp; MyFrame refToFrame1;
&nbsp; MyPanel refToPanel;
&nbsp;&nbsp;
&nbsp; MouseProc(MyFrame inFrame1,MyPanel inPanel){//constructor
&nbsp;&nbsp;&nbsp; refToFrame1 = inFrame1;//save references to the frames
&nbsp;&nbsp;&nbsp; refToPanel = inPanel;
&nbsp; }//end constructor

&nbsp; //Override the mousePressed() method to respond whenever&nbsp;
&nbsp; // the mouse is pressed on one of the frame objects.&nbsp;&nbsp;
&nbsp; // Distinguish between the two frame objects using the&nbsp;
&nbsp; // component name and display the coordinates of the&nbsp;
&nbsp; // mouse on the correct object.
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp;&nbsp; if( e.getComponent().getName().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compareTo(refToFrame1.getName()) == 0)
&nbsp;&nbsp;&nbsp; { //display coordinates on the Frame object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.xCoor = e.getX();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.yCoor = e.getY();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToFrame1.repaint();
&nbsp;&nbsp;&nbsp; }else{//display coordinates on the Panel object
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToPanel.xCoor = e.getX();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToPanel.yCoor = e.getY();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToPanel.repaint();
&nbsp;&nbsp;&nbsp; }//end if-else
&nbsp; }//end mousePressed()
}//end class MouseProc
//---------------------------------------------------------

//The following listener is used to terminate the program&nbsp;
// when the user closes either frame object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1</font></pre></td></tr></table>
Q - Rewrite the program named Event10 and eliminate the requirement to
pass parameters to the constructors for the event Listener objects.

<p><font color="#0000ff"><font size=-1>A - See solution below.</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File Event10A.java Copyright 1997, R.G.Baldwin
Rewrite the program named Event10 and eliminate the&nbsp;
requirement to pass parameters to the constructors for the
event Listener objects.

This program is designed to be compiled and run under&nbsp;

JDK 1.1

The program illustrates the sharing of a single listener&nbsp;
object among two different visual components of the same&nbsp;
type.

The program detects mouse events occurring on either of two
different Frame objects.&nbsp; It distinguishes between the two&nbsp;
objects and displays the coordinates of a mouse click on&nbsp;
whichever object experienced the mouse click.

These results were produced using JDK 1.1.3 running under&nbsp;
Windows 95.

Note that when the program starts, the two visual&nbsp;
components overlay one another.&nbsp; It is necessary to move&nbsp;
one of them in order to access the other.
*/
//=======================================================//

import java.awt.*;
import java.awt.event.*;

public class Event10A {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Event10A
//=======================================================//

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
&nbsp; int xCoor;
&nbsp; int yCoor;

&nbsp; MyFrame(){//constructor
&nbsp;&nbsp;&nbsp; setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; setSize(300,200);
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; //display coordinate information on the visual object
&nbsp;&nbsp;&nbsp; g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
&nbsp; }//end paint()
}//end class MyFrame
//=======================================================//

//The following class is used to instantiate a graphical&nbsp;
// user interface object.
class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create two visual objects of type MyFrame and make&nbsp;
&nbsp;&nbsp;&nbsp; // them visible.
&nbsp;&nbsp;&nbsp; MyFrame myFrame1 = new MyFrame();
&nbsp;&nbsp;&nbsp; myFrame1.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyFrame myFrame2 = new MyFrame();
&nbsp;&nbsp;&nbsp; myFrame2.setVisible(true);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes either&nbsp;
&nbsp;&nbsp;&nbsp; // window.
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame1.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp; myFrame2.addWindowListener(winProcCmd1);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // process mouse events on either MyFrame object.
&nbsp;&nbsp;&nbsp; MouseProc mouseProcCmd = new MouseProc();
&nbsp;&nbsp;&nbsp; myFrame1.addMouseListener(mouseProcCmd);
&nbsp;&nbsp;&nbsp; myFrame2.addMouseListener(mouseProcCmd);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and&nbsp;
// displays the coordinates of the mouse pointer when the&nbsp;
// mouse is pressed.&nbsp; The listener object distinguishes&nbsp;
// between two different visual objects and displays the&nbsp;
// coordinate information on the visual object which&nbsp;
// generated the mouse event.

class MouseProc extends MouseAdapter{
&nbsp; //Override the mousePressed() method to respond whenever&nbsp;
&nbsp; // the mouse is pressed on one of the frame objects.&nbsp;&nbsp;
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Get X and Y coordinates of mouse pointer and store in
&nbsp;&nbsp;&nbsp; // the Frame object.&nbsp; Distinguish between the two
&nbsp;&nbsp;&nbsp; // components on the basis of the source of the event.
&nbsp;&nbsp;&nbsp; // Note that the following two formulations for X and Y
&nbsp;&nbsp;&nbsp; // can be used to produce the same results in this
&nbsp;&nbsp;&nbsp; // situation.
<b>&nbsp;&nbsp;&nbsp; ((MyFrame)e.getComponent()).xCoor = e.getX();
&nbsp;&nbsp;&nbsp; ((MyFrame)e.getSource()).yCoor = e.getY();
</b>&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //display coordinate information&nbsp;&nbsp;&nbsp;
<b>&nbsp;&nbsp;&nbsp; e.getComponent().repaint();
</b>&nbsp; }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to terminate the program&nbsp;
// when the user closes either frame object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=======================================================//</font></pre></td></tr></table>
Q - Rewrite the program named Event11 and eliminate the requirement to
pass parameters to the constructor for the listener objects.

<p><font color="#0000ff"><font size=-1>A - See solution below.</font></font><br>&nbsp;
<table border bgcolor="#ffff80" ><tr><td><pre><font color="#0000ff">/*File Event11A.java Copyright 1997, R.G.Baldwin
Rewrite the program named Event11 and eliminate the&nbsp;
requirement to pass parameters to the constructor for the
listener objects.

This program is designed to be compiled and run under&nbsp;
JDK 1.1

The program illustrates the sharing of a single listener&nbsp;
object between two different visual components of different
types.

The program detects mouse events occurring on either a&nbsp;
visual Frame object or on a visual Window object.&nbsp; It&nbsp;
distinguishes between the two objects and displays a&nbsp;
message indicating which object generated the event.

Clicking inside the Frame object but outside the Window&nbsp;
object produces the following message:

Got mousePressed event from Frame object

Clicking inside the Window object produces the following&nbsp;
message:

Got mousePressed event from Window object

Closing the Frame object produces the following message and
terminates the program:

Got windowClosing event from Frame object

These results were produced using JDK 1.1.3 running under&nbsp;
Windows 95.
*/
//=======================================================//

import java.awt.*;
import java.awt.event.*;

public class Event11A {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; //instantiate a Graphical User Interface object
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Event11A
//=======================================================//

//The following class is used to instantiate a graphical&nbsp;
// user interface object.
class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create a visual Frame object
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame();
&nbsp;&nbsp;&nbsp; myFrame.setSize(200,300);
&nbsp;&nbsp;&nbsp; myFrame.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Create a visual Window object inside the Frame object
&nbsp;&nbsp;&nbsp; Window myWindow = new Window(myFrame);
&nbsp;&nbsp;&nbsp; myWindow.setSize(100,100);
&nbsp;&nbsp;&nbsp; myWindow.setVisible(true);&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which will
&nbsp;&nbsp;&nbsp; // process mouse events on either the Frame object or&nbsp;
&nbsp;&nbsp;&nbsp; // the Window object.
&nbsp;&nbsp;&nbsp; MouseProc mouseProcCmd = new MouseProc();
&nbsp;&nbsp;&nbsp; myFrame.addMouseListener(mouseProcCmd);
&nbsp;&nbsp;&nbsp; myWindow.addMouseListener(mouseProcCmd);&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp; //Instantiate and register a Listener object which will
&nbsp;&nbsp;&nbsp; // display a message and terminate the program when the
&nbsp;&nbsp;&nbsp; // user closes the Frame object
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(winProcCmd1);
&nbsp; }//end constructor
}//end class GUI definition
//=======================================================//

//This listener class monitors for mouse presses and&nbsp;
// displays a message when a mousePressed() event occurs on
// either the Frame object or the Window object.&nbsp; The&nbsp;
// message identifies which visual object generated the&nbsp;
// event. The listener object distinguishes between the two
// visual objects.

class MouseProc extends MouseAdapter{

&nbsp; //Override the mousePressed() method to respond whenever
&nbsp; // the mouse is pressed on one of the visual objects.&nbsp;&nbsp;
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; System.out.print("Got mousePressed event from ");
&nbsp;&nbsp;&nbsp; if(e.getSource().toString().indexOf("Frame") >= 0)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Frame object");
&nbsp;&nbsp;&nbsp; else
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println("Window object");
&nbsp; }//end mousePressed()
}//end class MouseProc
//=======================================================//

//The following listener is used to display a message and&nbsp;
// terminate the program when the user closes the Frame&nbsp;
// object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Got windowClosing event from Frame object");
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=======================================================//</font></pre></td></tr></table>
-end-<!--end--></body></html>