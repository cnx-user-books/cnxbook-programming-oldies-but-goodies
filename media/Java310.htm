<html>

<head>
<meta name=Generator content="Microsoft Office HTML Filter 2.0">
<meta http-equiv=Content-Type content="text/html; charset=iso-8859-1">
<meta name=Originator content="Microsoft Word 9">
<title>... in Java by Richard G Baldwin</title>
<style>
<!--
 
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{
	margin:0in;
	margin-bottom:.0001pt;
	font-size:12.0pt;
	font-family:"Times New Roman";}
h2
	{margin-right:0in;
	margin-left:0in;
	text-align:center;
	font-size:18.0pt;
	font-family:"Times New Roman";
	color:red;
	font-weight:bold;}
h3
	{margin-right:0in;
	margin-left:0in;
	font-size:13.5pt;
	font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:blue;
	text-decoration:underline;}
p.MsoPlainText, li.MsoPlainText, div.MsoPlainText
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
p
	{margin-right:0in;
	margin-left:0in;
	font-size:12.0pt;
	font-family:"Times New Roman";}
pre
	{margin:0in;
	margin-bottom:.0001pt;
	font-size:10.0pt;
	font-family:"Courier New";}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<meta name=author content="richard g. baldwin">
</head>

<body lang=EN-US link=blue vlink=blue>
<!--start-->

<div class=Section1>

<p>March 6, 2000</p>

<h2><!--title--><span style='color:black'>Java 2D Graphics, The Shape
Interface, Part 2<!--endtitle--></span></h2>

<p class=MsoNormal>Java Programming, Lecture Notes # 310</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><i>by Richard G. Baldwin </i></p>

<p class=MsoNormal><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i></p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal><a
     href="#_Introduction">Introduction</a></li>
 <li class=MsoNormal><a
     href="#_What_is_a">What is a Shape?</a></li>
 <li class=MsoNormal><a
     href="#_What_is_a_1">What is a PathIterator Object?</a></li>
 <li class=MsoNormal><a
     href="#_What_is_a_2">What is a GeneralPath Object?</a></li>
 <li class=MsoNormal><a
     href="#_Sample_Program_GeneralPath01">Sample Program GeneralPath01</a></li>
 <li class=MsoNormal><a
     href="#_Sample_Program_PathIterator01">Sample Program PathIterator01</a></li>
 <li class=MsoNormal><a
     href="#_Summary">Summary</a></li>
 <li class=MsoNormal><a
     href="#_Complete_Program_Listing">Complete Program Listings</a></li>
</ul>


<div class=MsoNormal align=center style='text-align:center'>

<hr size=3 width="100%" align=center>

</div>


<h2><a name="_Introduction"></a>Introduction</h2>

<p class=MsoNormal>In an earlier lesson, I explained that the <b>Graphics2D</b>
class extends the <b>Graphics</b> class to provide more sophisticated control
over geometry, coordinate transformations, color management, and text layout.
Beginning with JDK 1.2, <b>Graphics2D </b>is the fundamental class for
rendering two-dimensional shapes, text and images.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I also explained that without understanding the behavior of
other classes and interfaces such as <b>Shape</b>, <b>AffineTransform</b>, <b>GraphicsConfiguration</b>,
<b>PathIterator</b>, and <b>Stroke</b>, it is not possible to fully understand
the inner workings of the <b>Graphics2D</b> class.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This and an earlier lesson are intended to give you the
necessary understanding of the <b>Shape</b> interface and the <b>PathIterator</b>
class.</p>

<h2><a name="_What_is_an"></a><a name="_What_is_a"></a>What is a Shape?</h2>

<p class=MsoNormal>As I reported in the earlier lesson, according to Sun:</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=324 style='width:194.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;The <b>Shape </b>interface provides
  definitions for objects that represent some form of geometric shape. The <b>Shape</b>
  is described by a <b>PathIterator</b> object, which can express the outline
  of the <b>Shape</b> as well as a rule for determining how the outline divides
  the 2D plane into interior and exterior points.&nbsp; Each <b>Shape</b>
  object provides callbacks to get the bounding box of the geometry, determine
  whether points or rectangles lie partly or entirely within the interior of
  the <b>Shape</b>, and retrieve a <b>PathIterator</b> object that describes
  the trajectory path of the Shape outline.&#8221;</p>
  </td>
 </tr>
</table>

<h2><a name="_What_is_a_1"></a>What is a PathIterator Object?</h2>

<p class=MsoNormal>The <b>Shape</b> interface provides four groups of
overloaded methods that make it possible to perform the following tasks:</p>

<p class=MsoNormal>&nbsp;</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>Get a
     bounding box that is guaranteed to enclose a specified <b>Shape</b>
     object.</li>
 <li class=MsoNormal>Determine
     if a specified <b>Shape</b> object completely contains a specified point
     or rectangle.</li>
 <li class=MsoNormal>Determine
     if a specified <b>Shape</b> intersects a specified rectangle</li>
 <li class=MsoNormal>Get a <b>PathIterator</b>
     object that can be used to obtain the path that makes up the boundary of a
     <b>Shape</b> object.</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I discussed the first three capabilities in the earlier
lesson.&nbsp; I told you that I was going to defer a discussion of the <b>PathIterator</b>
to this lesson.&nbsp; This lesson is dedicated the <b>PathIterator</b>
interface, but in order to understand the behavior of that class, it will be
instructive to provide a brief discussion and illustration of the <b>GeneralPath</b>
class.&nbsp; You might consider the <b>PathIterator</b> and the <b>GeneralPath</b>
to be opposite sides of the same coin.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This is part of what Sun has to say about <b>PathIterator</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>The <b>PathIterator</b>
  interface provides the mechanism for objects that implement the <b>Shape</b>
  interface to return the geometry of their boundary by allowing a caller to retrieve
  the path of that boundary a segment at a time.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In other words, <b>PathIterator</b> makes it possible for
code in a program to obtain information about the geometric outline of an
object that implements the <b>Shape</b> interface.</p>

<h2><a name="_What_is_a_2"></a>What is a GeneralPath Object?</h2>

<p class=MsoNormal>Here is part of what Sun has to say about <b>GeneralPath</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;The <b>GeneralPath</b> class
  represents a geometric path constructed from straight lines, and quadratic
  and cubic (Bezier) curves. It can contain multiple subpaths. </p>
  <p class=MsoNormal style='text-autospace:none'>&nbsp;</p>
  <p class=MsoNormal style='text-autospace:none'>The winding rule specifies how
  the interior of a path is determined. There are two types of winding rules:
  EVEN_ODD and NON_ZERO. </p>
  <p class=MsoNormal style='text-autospace:none'>&nbsp;</p>
  <p class=MsoNormal style='text-autospace:none'>An EVEN_ODD winding rule...&#8221;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I plan to discuss the <b>GeneralPath</b> class in much more
detail in a subsequent lesson.&nbsp; In this lesson, I will simply show you how
to create a geometric shape using <b>GeneralPath</b>.&nbsp; Then I will show
you how to use <b>PathIterator</b> to analyze that shape and to replicate it
with an offset.</p>

<h3><span style='color:red'>Let&#8217;s listen to David Flanagan</span></h3>

<p class=MsoNormal>Here is what <u>Java Foundation Classes in a Nutshell</u>,
by David Flanagan, has to say about <b>GeneralPath</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;This class represents an
  arbitrary path or shape that consists of any number of line segments and
  quadratic and cubic Bezier curves.&nbsp; After creating a <b>GeneralPath</b> object,
  you must define a current point by calling <b>moveTo()</b>.&nbsp; Once an
  initial current point is established, you can create the path by calling <b>lineTo()</b>,
  <b>quadTo()</b>, and <b>curveTo()</b>.&nbsp; These methods draw line
  segments, quadratic curves, and cubic curves from the current point to a new
  point (which becomes the new current point).</p>
  <p class=MsoNormal style='text-autospace:none'>&nbsp;</p>
  <p class=MsoNormal style='text-autospace:none'>The shape defined by a <b>GeneralPath</b>
  need not be closed, although you may close it by calling the <b>closePath()</b>
  method, which appends a line segment between the current point and the initial
  point... The <b>append()</b> method allows you to add a <b>Shape</b> or <b>PathIterator</b>
  to a <b>GeneralPath</b>, optionally connecting it to the current point with a
  straight line.&#8221;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Since my purpose in using <b>GeneralPath</b> in this lesson
is to provide background for understanding <b>PathIterator</b>, I will keep it
simple and deal only with the following methods of <b>GeneralPath</b>:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>moveTo()</li>
 <li class=MsoNormal>lineTo()</li>
 <li class=MsoNormal>closePath()</li>
</ul>

<p class=MsoNormal>&nbsp;</p>

<h3><span style='color:red'>What does Jonathan Knudsen have to say?</span></h3>

<p class=MsoNormal>This is what Jonathan Knudsen has to say on the subject in
his excellent book entitled <u>Java 2D Graphics</u>, from O&#8217;Reilly.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal style='text-autospace:none'>&#8220;Lurking behind the <b>Shape</b>
  interface, there&#8217;s a handy toolbox of shapes in the <b>java.awt.geom</b>
  package &#8211; rectangles, ellipses, and so on.&nbsp; I&#8217;ll discuss these
  soon.&nbsp; If you want to draw pentagons, decagons, stars, or something
  completely different, you&#8217;ll have to describe the path yourself using a <b>java.awt.geom.GeneralPath</b>.&nbsp;
  This class implements the <b>Shape</b> interface and allows you to build a
  path, segment by segment.&#8221;</p>
  </td>
 </tr>
</table>

<h3><span style='color:red'>So, what&#8217;s the bottom line?</span></h3>

<p class=MsoNormal>The bottom line is that a <b>Shape</b> object is constructed
from segments consisting of moves (pen up), lines, curves, and an optional
closure.&nbsp; <b>GeneralPath</b> can be used to construct such a <b>Shape</b>,
one segment at a time.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <b>Shape </b>object remembers how it was originally
constructed in terms of the types of segments, their coordinate values,
etc.&nbsp; The object can tell us how it was originally constructed.&nbsp; The <b>PathIterator</b>
is used to extract that information from the <b>Shape</b> object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The two following programs show how to construct a simple <b>Shape</b>
consisting of moves, lines, and a closure, and how to extract the necessary
information from the <b>Shape</b> to replicate it with an offset.&nbsp; I
didn&#8217;t use Bezier curves.&nbsp; The topic of Bezier curves is sufficiently
complex as to merit a lesson of its own.&nbsp; I will be discussing the use of
Bezier curves in a subsequent lesson.</p>

<h2><a name="_Geometric_Objects_Implement"></a><a name="_Sample_Programs"></a><a
name="_Sample_Program"></a><a name="_Sample_Program_GeneralPath01"></a>Sample
Program GeneralPath01</h2>

<p class=MsoNormal>This first sample program illustrates the use of the <b>GeneralPath</b>
class to construct a simple <b>Shape</b> object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The program draws a four-inch by four-inch <b>Frame</b> on
the screen.&nbsp; Then it translates the origin to the center of the <b>Frame</b>.&nbsp;
It draws a pair of X and Y-axes centered on the origin.</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=339 style='width:203.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>This discussion of dimensions in inches on the screen
  depends on the method named <b>getScreenResolution()</b> returning the correct
  value.&nbsp; However, the <b>getScreenResolution() </b>method always seems to
  return 120 on my computer regardless of the actual screen resolution
  settings.</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then the program uses <b>GeneralPath </b>to create a diamond
<b>Shape</b> and draw it on the <b>Frame</b>.&nbsp; The vertices of the diamond
shape are at plus and minus one-half inch on each of the axes.&nbsp; When
viewed on the screen, the vertices are at the North, South, East, and West
positions and the diamond is centered on the origin.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The program was tested using JDK 1.2.2 under WinNT
Workstation 4.0.</p>

<h3><span style='color:red'>Will discuss in fragments</span></h3>

<p class=MsoNormal>As is usually the case, I will discuss this program in
fragments.&nbsp; The controlling class and the constructor for the GUI class
are essentially the same as you have seen in several previous lessons, so, I won&#8217;t
bore you by repeating that discussion here.&nbsp; You can view this material in
the complete listing of the program at the end of the lesson.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>All of the interesting action takes place in the overridden <b>paint()</b>
method, so I will begin the discussion there.</p>

<h3><span style='color:red'>Overridden paint() method</span></h3>

<p class=MsoNormal>The beginning portions of the overridden <b>paint()</b>
method should be familiar to you by now as well.&nbsp; So, I am simply going to
let the comments in <a href="Java310-fig01.htm">Figure 1</a> speak for
themselves.</p>

<h3><span style='color:red'>The interesting part</span></h3>

<p class=MsoNormal>Now we have arrived at the interesting part.&nbsp; <a
href="Java310-fig02.htm">Figure 2</a> begins by instantiating a new object of
the <b>GeneralPath</b> class.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then it invokes the <b>moveTo()</b> method to establish the <i>current
point</i> (as described above by Flanagan).&nbsp; &nbsp;</p>

<h3><span style='color:red'>An analogy</span></h3>

<p class=MsoNormal>As a practical matter (see the caveat below), if you think
of the creation and population of a <b>GeneralPath</b> object as analogous to
creating a line drawing using a pen and paper, invocation of the <b>moveTo()</b>
method corresponds to moving the drawing pen without the tip of the pen
touching the paper.</p>

<h3><span style='color:red'>Create some lines</span></h3>

<p class=MsoNormal>Continuing with our pen and paper analogy, the program
invokes the <b>lineTo()</b> method three times in succession to draw three
straight lines on the paper.&nbsp; Given the coordinates shown in <a
href="Java310-fig03.htm">Figure 3</a>, these lines form three sides of a
diamond shape.&nbsp;</p>

<h3><span style='color:red'>Close the path</span></h3>

<p class=MsoNormal>Finally, the program invokes the <b>closePath()</b> method to
draw a single straight line from the current point back to the current point
established by the original <b>moveTo()</b> method call.&nbsp; This line forms
the fourth side of a diamond shape.&nbsp; See <a href="Java310-fig04.htm">Figure
4</a> for this code fragment.&nbsp;</p>

<h3><span style='color:red'>The analogy is a problem!</span></h3>

<p class=MsoNormal>The problem with using the pen and paper analogy to describe
the process is that the process implemented in the above fragments really
doesn&#8217;t draw anything (not anything that a human can see, anyway).&nbsp;
Rather, it creates and populates an object that implements the <b>Shape</b>
interface that exist only in the computer&#8217;s memory.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This is a very important point that we must keep in
mind.&nbsp; Creating a <b>Shape</b> object in the computer&#8217;s memory is not the
same thing as rendering that object on a graphics display device. &nbsp;The
object doesn&#8217;t become visible until it is rendered.&nbsp; However, the fact
that it isn&#8217;t visible doesn&#8217;t mean that it doesn&#8217;t exist.&nbsp; That just means
that it hasn&#8217;t been rendered.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <b>Shape</b> object can be rendered onto an output
device using the <b>draw(Shape)</b> method shown in <a href="Java310-fig05.htm">Figure
5</a>.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>When the virtual object created and populated by the
previous fragments is rendered, it will look like a diamond shape, centered on
the origin, with the vertices at the North, South, East, and West
positions.&nbsp; The shape of the object and its location is controlled by the
coordinate information passed to the <b>moveTo()</b>, and <b>lineTo()</b>
methods in the above fragments, and the attributes of the <b>AffineTransform</b>
object currently associated with the <b>Graphics2D </b>&nbsp;object.</p>

<p class=MsoNormal>&nbsp;&nbsp;</p>

<p class=MsoNormal>Now that we know how to create and populate a <b>GeneralPath</b>
object, the next program will illustrate how to extract the necessary
information from that object to replicate it.</p>

<h2><a name="_Sample_Program_PathIterator01"></a>Sample Program PathIterator01</h2>

<p class=MsoNormal>The purpose of this program is to illustrate the use of the <b>getPathIterator()</b>
method of the <b>Shape</b> interface, and the <b>PathIterator</b> object
returned by that method.&nbsp; The program uses that object to learn all that
there is to know about an object that implements the <b>Shape</b> interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The program creates and populates a <b>GeneralPath</b>
object identical to that in the previous program.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then the program invokes <b>getPathIterator()</b> on that <b>GeneralPath
</b>object to obtain a <b>PathIterator</b> object that provides access to
information about the <b>GeneralPath</b> object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then the program invokes various methods on the <b>PathIterator
</b>object to extract the pertinent information about the <b>GeneralPath</b>
object that it represents.&nbsp; This information is used to replicate the original
object, offset by one inch in both directions.&nbsp; The segment information is
also displayed on the command-line screen so that you can compare it with what
you know to be true about the original object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Then the program draws the new object in red.</p>

<h3><span style='color:red'>Discuss in fragments</span></h3>

<p class=MsoNormal>I will discuss this program in fragments.&nbsp; This program
is identical to the previous program down to the point where the original <b>GeneralPath</b>
object has been created, populated, and displayed on a <b>Frame</b>
object.&nbsp; Therefore, I won&#8217;t repeat the discussion of that material.&nbsp;
You can view the code that accomplishes this in the complete listing of the
program at the end of the lesson.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>For continuity, this fragment picks up at the point in the
overridden <b>paint()</b> method where the original object, referred to by <b>thePath</b>,
is being rendered on the <b>Frame</b>.&nbsp; Once the following fragment has
been executed, the original object has been rendered on the screen.&nbsp; See <a
href="Java310-fig06.htm">Figure 6</a> for the code fragment.&nbsp;</p>

<h3><span style='color:red'>Get a PathIterator object</span></h3>

<p class=MsoNormal><a href="Java310-fig07.htm">Figure 7</a> invokes the <b>getPathIterator()</b>
method on the original object to get a <b>PathIterator</b> object that
represents it.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that this program passes <b>null</b> to the <b>getPathIterator()</b>
method.&nbsp; It is also possible to pass a reference to an <b>AffineTransform</b>
object to the method.&nbsp; In that case, the <b>PathIterator</b> object will
represent a transformed version of the target object with the nature of the
transformation being determined by the <b>AffineTransform </b>&nbsp;object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Since my objective here is to reproduce the original object
with an offset in both the horizontal and vertical directions, I could have
passed a translation transform object as a parameter.&nbsp; Then the <b>PathIterator</b>
that is returned would represent the original object translated to a different
location in the 2D space.&nbsp; However, I elected to perform the translation
numerically when populating a new <b>GeneralPath</b> object instead.&nbsp;
Therefore, I passed <b>null</b> as a parameter to <b>getPathIterator()</b>.&nbsp;</p>

<h3><span style='color:red'>A flattened PathIterator object</span></h3>

<p class=MsoNormal>The <b>PathIterator</b> object that is returned could
contain segments consisting of Bezier curves.&nbsp; That may not be what you
want.&nbsp; Another overloaded version of <b>getPathIterator(AffineTransform
at, double flatness) </b>takes two parameters and returns a <b>PathIterator</b>
object in which all Bezier curves have been replaced by a series of
straight-line segments.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <b>flatness</b> parameter defines how well the straight
lines represent the curve.&nbsp; In particular, this parameter defines the
maximum distance that any point on the curve can deviate from the straight line
that represents the curve at that point.&nbsp; Thus, in general, the smaller
the <b>flatness</b> parameter, the more straight line segments will be
generated to represent the curve, and the better will be the straight line
approximation of the curve. </p>

<h3><span style='color:red'>Data storage </span></h3>

<p class=MsoNormal>Later on, I am going to need some place to store two kinds
of information about the segments that represent the <b>GeneralPath</b>
object.&nbsp; I will need to store the <i>type</i> of segment, which is of type
<b>int</b>.&nbsp; I will also need to store <i>coordinate information</i> about
the segment.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a href="Java310-fig08.htm">Figure 8</a> declares two local
variables that will be used later to store this information.</p>

<h3><span style='color:red'>Further explanation of these variables</span></h3>

<p class=MsoNormal>I will be invoking the <b>currentSegment()</b> method on the
<b>PathIterator</b> object to get information about the segment.&nbsp; This
method returns the type, which I will store in <b>theType</b>.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>I will pass the array named <b>theData</b> to the <b>currentSegment()</b>
method.&nbsp; The method will populate the elements in the array with the
coordinate information describing the segment.&nbsp; For the case where the
segment can be a Bezier curve, the size of this array needs to be six elements,
as described in the following information from Sun regarding the <b>currentSegment()</b>
method (note that there is also a version of this method that deals in
coordinate data of type <b>double</b>).</p>

<p class=MsoNormal>&nbsp;</p>

<table border=1 cellspacing=3 cellpadding=0 bgcolor="#ffff80" style='background:#FFFF80;'>
 <tr>
  <td width=324 style='width:194.1pt;background:aqua;padding:.75pt .75pt .75pt .75pt'>
  <p class=MsoNormal>&#8220;Returns the coordinates and type of the current path
  segment in the iteration. The return value is the path segment type: SEG_MOVETO,
  SEG_LINETO, SEG_QUADTO, SEG_CUBICTO, or SEG_CLOSE. </p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>A <b>float</b> array of length 6 must be passed in and can
  be used to store the coordinates of the point(s). Each point is stored as a
  pair of <b>float</b> x, y coordinates. </p>
  <p class=MsoNormal>&nbsp;</p>
  <p class=MsoNormal>SEG_MOVETO and SEG_LINETO types returns one point,
  SEG_QUADTO returns two points, SEG_CUBICTO returns 3 points and SEG_CLOSE
  does not return any points.&#8221;</p>
  </td>
 </tr>
</table>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Since I was the one who created the <b>Shape</b> object that
this <b>PathIterator</b> object will represent, and since I know that it doesn&#8217;t
contain any <b>SEG_QUADTO</b> or <b>SEG_CUBICTO</b> segments, I could have
gotten by with a two-element array.&nbsp; However, to be more general, I used a
six-element array.</p>

<h3><span style='color:red'>Instantiate a new GeneralPath object</span></h3>

<p class=MsoNormal>My objective is to extract the necessary information from an
existing <b>Shape</b> object to allow me to replicate that object with a
one-inch offset in the horizontal and vertical dimensions.&nbsp; For that, I
need a new <b>GeneralPath</b> object that I can populate with the information
that I extract from the existing object.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a href="Java310-fig09.htm">Figure 9</a> instantiates, but
does not populate a new <b>GeneralPath</b> object.</p>

<h3><span style='color:red'>Iterate and populate</span></h3>

<p class=MsoNormal>At the risk of causing total confusion, I am going to do
something unusual here.&nbsp; In particular, I am going to show a code fragment
that would ordinarily be a fairly long fragment, but I am going to delete some
of code interior to the fragment to make it more manageable.&nbsp; I will
explain the code that remains in the fragment after the deletion.&nbsp; Then I
will come back in a subsequent fragment and explain the code that I deleted
from the fragment.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You can refer to the original code, fully intact, in the
complete listing of the program at the end of the lesson if this is confusing.</p>

<h3><span style='color:red'>Use a while loop</span></h3>

<p class=MsoNormal><a href="Java310-fig10.htm">Figure 10</a> uses a while loop
to iterate on, and extract information from the existing <b>Shape</b>
object.&nbsp; This information is used to populate the new <b>GeneralPath</b>
object inside a <b>switch</b> statement, which was deleted from the fragment
for brevity.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The three key methods used in this fragment are:</p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>isDone()</li>
 <li class=MsoNormal>currentSegment()</li>
 <li class=MsoNormal>next()</li>
</ul>

<h3><span style='color:red'>Descriptions of the methods</span></h3>

<p class=MsoNormal>The invocation of the <b>isDone()</b> method is used to
provide the loop control parameter.&nbsp; This method tests to determine if the
iteration is complete.&nbsp; It returns <b>true</b> if all the segments have
been read and returns <b>false</b> otherwise.&nbsp; </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Note that a <b>not</b> operator was used to cause the
iteration to continue while the iteration is <b><i>not</i></b><i> done</i>.</p>

<p class=MsoNormal><span style='color:red'>&nbsp;</span></p>

<p class=MsoNormal>A description of the <b>currentSegment()</b> method was
given above.&nbsp; Briefly, it uses a return value and an array parameter to
return information about the current segment of the <b>Shape</b> object on
which the iteration is being performed.&nbsp; This information is used to
populate a segment in the new <b>Shape</b> object during each iteration.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>According to Sun, the <b>next()</b> method </p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal style='margin-left:.5in'>&#8220;Moves the iterator to the next
segment of the path forwards along the primary direction of traversal as long
as there are more points in that direction.&#8221;</p>

<p class=MsoNormal>&nbsp;&nbsp;</p>

<p class=MsoNormal>All in all, this is a fairly standard iteration process, not
unlike the use of the <b>Enumeration</b> interface that I discussed in detail
in an earlier lesson.&nbsp; If enumeration, or iteration is new to you, you
might want to go back and review the material in that lesson.</p>

<h3><span style='color:red'>Populate the new Shape object</span></h3>

<p class=MsoNormal>Now it&#8217;s time to go back and discuss the <b>switch </b>&nbsp;statement
that was deleted from the previous fragment.&nbsp; Remember, this statement
occurs inside the <b>while</b> loop of the previous fragment.&nbsp; In that
fragment, the <b>currentSegment()</b> method is used to extract information from
the original <b>Shape</b> object.&nbsp; That information is used in the
following <b>switch</b> statement to populate the new object that was
instantiated outside the <b>while</b> loop.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal><a href="Java310-fig11.htm">Figure 11</a> begins with a
repeat of the invocation of the <b>currentSegment()</b> method from the
previous fragment just to get you oriented.&nbsp; Then it picks up with the
beginning of the <b>switch</b> statement.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <b>switch</b> statement compares the segment type
returned by the <b>currentSegment()</b> method against the five possible segment
types.&nbsp; The statement uses the information returned in the array by the <b>currentSegment()</b>
method to populate the new <b>Shape</b> object whenever a match is found.&nbsp;
</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The code also displays the type of segment on the
command-line screen.&nbsp; I will show you the complete output on the
command-line screen following the next segment.</p>

<h3><span style='color:red'>Populate a SEG_MOVETO segment</span></h3>

<p class=MsoNormal>The code in Figure 11 will be executed whenever the type of
segment returned by the <b>currentSegment()</b> method is <b>SEG_MOVETO</b>.&nbsp;
By this, I mean when the <b>int</b> value returned by the method matches the
symbolic constant <b>SEG_MOVETO</b> defined in the <b>PathIterator</b>
interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This code invokes the <b>moveTo()</b> method on the new <b>GeneralPath</b>
object to store a segment of that type in the path.&nbsp; The coordinate values
passed to the <b>moveTo()</b> method are the coordinate values extracted from
the original <b>Shape</b> object with a one-inch offset in both the horizontal
and vertical directions.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The code also displays the type of the segment on the
command-line screen, but this is for information only, and is not critical to
the process.&nbsp;</p>

<h3><span style='color:red'>Command-line screen output</span></h3>

<p class=MsoNormal>The execution of the <b>switch</b> statement inside the
execution of the <b>while</b> loop produces the following output on the command
line screen.</p>

<p class=MsoNormal>&nbsp; </p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:black'>SEG_MOVETO</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:black'>SEG_LINETO</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:black'>SEG_LINETO</span></p>

<p class=MsoNormal style='text-autospace:none'><span style='font-size:10.0pt;
font-family:"Courier New";color:black'>SEG_LINETO</span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:"Courier New";
color:black'>SEG_CLOSE</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>You will note that, as expected, this is an exact match for
the types of segments that were created when the original <b>Shape </b>object
was created using the methods of the <b>GeneralPath</b> class.&nbsp; Thus, as
mentioned earlier, a <b>Shape</b> object knows about its segment types and
coordinate values.&nbsp; It can provide that information to us for whatever
purpose we may need it.</p>

<h3><span style='color:red'>Populate a SEG_LINETO segment</span></h3>

<p class=MsoNormal><a href="Java310-fig12.htm">Figure 12</a> does essentially
the same thing as the previous fragment.&nbsp; This code is executed when there
is a match for <b>SEG_LINETO</b>.&nbsp;</p>

<h3><span style='color:red'>What about SEG_QUADTO and SEG_CUBICTO</span></h3>

<p class=MsoNormal>Since I was the person who created the original <b>Shape</b>
object that is being replicated here, and since I knew that the object being
replicated did not contain any Bezier curves, I didn&#8217;t provide the ability to
support those segment types.&nbsp; However, I did include those types in the <b>switch</b>
statement to make it general in nature, as shown in <a href="Java310-fig13.htm">Figure
13</a>.&nbsp;</p>

<h3><span style='color:red'>Populate a SEG_CLOSE segment</span></h3>

<p class=MsoNormal>Finally, <a href="Java310-fig14.htm">Figure 14</a> creates a
SEG_CLOSE segment in the new <b>Shape </b>object whenever a matching segment
type is found in the object being replicated.</p>

<p class=MsoNormal>&nbsp;&nbsp;</p>

<p class=MsoNormal>And that is the end of the <b>switch</b> statement.</p>

<h3><span style='color:red'>Render the new object in red</span></h3>

<p class=MsoNormal><a href="Java310-fig15.htm">Figure 15</a> sets the drawing
color to red, and draws the new object on the <b>Frame</b> object.&nbsp; When
you run this program, you should see the original <b>Shape</b> object appearing
as a diamond, drawn in black, and centered on the origin.&nbsp; The new <b>Shape</b>
object, which is an offset replica of the original object, is drawn in red, one
inch down and one inch to the right of the original object.&nbsp; (Your output
may not match the dimensions in inches, depending on actual screen resolution.)</p>

<h2><a name="_Summary"></a>Summary</h2>

<p class=MsoNormal>That brings us to the end of this lesson.&nbsp; In this
lesson, I have shown you how to use the <b>GeneralPath</b> class to create a
new <b>Shape</b> object consisting of lines and spaces.&nbsp; I did not show
you how to include Bezier curves in your new object.&nbsp; I plan to do that in
a subsequent lesson.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <b>GeneralPath </b>class was used in this lesson to
support the primary objective of the lesson &#8211; learning how to get and use a <b>PathIterator</b>
object that represents another object that implements the <b>Shape</b>
interface.</p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>In this lesson, I have shown you </p>

<ul style='margin-top:0in' type=disc>
 <li class=MsoNormal>How to
     create a simple <b>Shape</b> object with the <b>GeneralPath</b> class, and
     </li>
 <li class=MsoNormal>How to
     extract information from, and replicate that object using the <b>getPathIterator()</b>
     method and the <b>PathIterator</b> object that the method returns.</li>
</ul>

<h2><a name="_Complete_Program_Listing"></a><a name="_Complete_Program_Listings"></a>Complete
Program Listings</h2>

<p>Complete listings of both programs are provided in <a
href="Java310-fig16.htm">Figure 16</a> and <a href="Java310-fig17.htm">Figure
17</a>.</p>

<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without&nbsp; express written permission from
Richard Baldwin is prohibited.&nbsp;</p>

<p><b>About the author</b> </p>

<p><b><i><a href="mailto:baldwin@austin.cc.tx.us">Richard Baldwin</a></i></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and XML
will become the primary driving force in the delivery of structured information
on the Web.</i> </p>

<p><i>Richard has participated in numerous consulting projects involving Java,
XML, or a combination of the two.&nbsp; He frequently provides onsite Java
and/or XML training at the high-tech companies located in and around Austin,
Texas.&nbsp; He is the author of Baldwin's Java Programming <a
href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java Pro
magazine.</i> </p>

<p><i>Richard holds an MSEE degree from Southern Methodist University and has
many years of experience in the application of computer technology to
real-world problems.</i> </p>

<p><i><a href="mailto:baldwin@austin.cc.tx.us">baldwin@austin.cc.tx.us</a></i></p>

<p>-end-<!--end--></p>

</div>

</body>

</html>
