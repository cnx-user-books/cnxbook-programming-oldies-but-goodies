<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<h2>
Enterprise JavaBeans(TM):&nbsp; Getting Started with EJB, Part 5</h2>
<i>Baldwin shows you how to use the New Enterprise Bean Wizard to package
your Enterprise Bean in its jar file.&nbsp; While not conceptually difficult,
it is tedious, involving approximately ten separate operations that must
be performed in the correct order.</i>
<p><b>Published</b>&nbsp; January 8, 2001
<br><b>By <a href="#BaldwinBio">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1314
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<a href="#Sample Bean Program">Sample Bean Program</a></li>

<li>
<a href="#Creating the J2EE Application">Creating the J2EE Application</a></li>

<li>
<a href="#Starting the System">Starting the System</a></li>

<li>
<a href="#Packaging the Enterprise Bean">Packaging the Enterprise Bean</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is one in a series of lessons designed to teach you about Sun's Enterprise
JavaBeans(TM) (EJB).
<p><b><font color="#FF0000">Fifth in a miniseries</font></b>
<p>This lesson is also the fifth lesson in a miniseries intended to get
you up and running with Sun's Enterprise JavaBeans(TM) very quickly.
<center>
<h2>
<a NAME="Preview"></a>Preview</h2></center>
<font color="#000000">The following three steps are required to deploy
your bean into the J2EE server:</font>
<ol>
<li>
<font color="#000000">Create the J2EE Application</font></li>

<li>
<font color="#000000">Package the Enterprise Bean</font></li>

<li>
<font color="#000000">Deploy the J2EE Application</font></li>
</ol>
<font color="#000000">This lesson will show you how to accomplish the second
of the three steps listed above.&nbsp; This will require quite a few operations
including the following:</font>
<ul>
<li>
<font color="#000000">Start the J2EE server and the deployment tool</font></li>

<li>
<font color="#000000">Start and use the New Enterprise Bean Wizard</font></li>

<li>
<font color="#000000">Specify the application that will contain the bean</font></li>

<li>
<font color="#000000">Specify a jar display name</font></li>

<li>
<font color="#000000">Describe the bean</font></li>

<li>
<font color="#000000">Add files to the jar file</font></li>

<li>
<font color="#000000">Identify files for the bean, the Home Interface,
and the Remote Interface</font></li>

<li>
<font color="#000000">Specify entity bean or session bean</font></li>

<li>
<font color="#000000">Specify stateless or stateful session bean</font></li>
</ul>
<font color="#000000">I will walk you through the steps necessary to accomplish
these operations without attempting to explain the purpose of each operation.&nbsp;
Subsequent lessons will provide information that bears on the purpose of
the operations.</font>
<center>
<h2>
<a NAME="Introduction"></a><font color="#000000">Introduction</font></h2></center>
<b><font color="#FF0000">Writing, compiling, deploying and executing a
simple bean</font></b>
<p>The lessons in this miniseries will show you the steps involved in writing,
compiling, deploying and executing a simple bean.&nbsp; The discussion
will be brief, and is intended primarily to get you to the point that you
can get something running very quickly.
<p><b><font color="#FF0000">More details in subsequent lessons</font></b>
<p>Subsequent lessons will come back and fill in the gaps to help you more-fully
understand each of the steps.
<p>Subsequent lessons will also teach you about the different kinds of
beans and how to use those beans in different situations.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is strongly recommended that you study the previous lesson entitled
<i>Enterprise
JavaBeans(TM), Getting Started with EJB, Part 4</i> before embarking on
this lesson.
<p>Additional supplementary material that I have written is available at
<a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan</a>.&nbsp;
As of the date of this writing, Gamelan does not maintain a consolidated
index to my Java tutorials.&nbsp; Therefore, they may be difficult to locate
on the Gamelan site.&nbsp; A consolidated index with links to the tutorials
on the Gamelan site is available at
<i>Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><b><font color="#FF0000">The required steps</font></b>
<p><font color="#000000">An earlier lesson entitled <i>Getting Started
with EJB, Part 1 </i>contained a list of the required steps for </font>writing,
compiling, deploying and executing a simple bean.&nbsp; Abbreviated versions
of the first seven steps in that list are repeated below.
<ul>
<li>
<font color="#000000">Download and install Java 2 Platform, Standard Edition
from Sun.</font></li>

<li>
<font color="#000000">Download and install the Java 2 Platform, Enterprise
Edition.</font></li>

<li>
<font color="#000000">Write the bean class and required helper classes.</font></li>

<li>
<font color="#000000">Write home and remote interfaces.</font></li>

<li>
<font color="#000000">Write a compilation batch file for the bean and the
interfaces.</font></li>

<li>
<font color="#000000">Compile the bean class, helper classes, and interfaces.</font></li>

<li>
Use Sun's J2EE <b>deploytool</b> program to deploy the bean into the server.</li>
</ul>
<b><font color="#FF0000">The last step is a big one</font></b>
<p>The last step shown above is a big one, so I have subdivided it into
several sequential lessons, beginning with the lesson entitled <i>Enterprise
JavaBeans(TM), Getting Started with EJB, Part 3</i>.&nbsp; In this group
of lessons associated with deployment, I am walking you through the detailed
steps necessary to deploy your new bean in the J2EE server.&nbsp; I am
providing that information in cookbook fashion, meaning that I will tell
you what to do but not necessarily why to do it.
<p><b><font color="#FF0000">Class and application files available</font></b>
<p>The previous lesson began the process of deploying your bean in the
J2EE server.
<p>I am assuming that you have completed the first six steps and part of
the seventh step as described in the previous lesson entitled
<i>Enterprise
JavaBeans(TM), Getting Started with EJB, Part 4</i>.
<p>Having completed those steps, you should have the class files necessary
to deploy your bean into the J2EE server.&nbsp; You should also have a
J2EE application file named <b>HelloApp.ear</b> that you created in the
previous lesson.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>This lesson provides screen shots of the critical steps in the process.&nbsp;
You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth and refer to earlier material and figures, without losing your place.
<p><b><font color="#FF0000">Beans versus. beans</font></b>
<p><font color="#000000">Just in case you are reading this lesson without
having read the earlier lessons in this series, I will tell you that an
<i>Enterprise Bean</i> is not the same thing as a <i>JavaBean Component(TM)</i>,
as discussed in my series of <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">tutorial
lessons</a> beginning with lesson number 500.</font>
<center>
<h2>
<a NAME="Sample Bean Program"></a><font color="#000000">Sample Bean Program</font></h2></center>
<b><font color="#FF0000">Class files</font></b>
<p><font color="#000000">At this point, you should have the following three
class files available.&nbsp; Make sure that you have them all located conveniently
in the same directory.</font>
<ul>
<li>
<font color="#000000">HelloBean.class</font></li>

<li>
<font color="#000000">HelloHome.class</font></li>

<li>
<font color="#000000">Hello.class</font></li>
</ul>
A complete listing of the bean program and the two required interfaces
is provided near the end of this lesson.
<center>
<h2>
<a NAME="Creating the J2EE Application"></a>Creating the J2EE Application</h2></center>
As described in the previous lesson, you do not deploy an Enterprise Bean
directly into the J2EE server.&nbsp; Rather you must first create a J2EE
application and then add the bean to the J2EE application.
<p>Then, you then deploy the application into the J2EE server.
<p>You created your J2EE application in the previous lesson and named the
file containing that application <b>HelloApp.ear</b>.&nbsp; You need to
make certain that you have that file conveniently available also.
<center>
<h2>
<a NAME="Starting the System"></a>Starting the System</h2></center>
Assuming that you shut down the J2EE server and the deployment tool following
the previous lesson, the first thing that you need to do is to open two
<i>Command
Prompt</i> windows.&nbsp; I will refer to the <i>Command Prompt
</i>windows
simply as windows.
<p><b><font color="#FF0000">Start the J2EE server</font></b>
<p>To start the J2EE server running, enter the following command at the
prompt in one of the windows:
<p><b>j2ee -verbose</b>
<p>A large amount of text will appear on the screen.&nbsp; Make certain
that the text on that screen ends with the following text.&nbsp; Otherwise,
the server hasn't been properly started.
<p><b><tt>J2EE server startup complete.</tt></b>
<p><b><font color="#FF0000">Starting the deployment tool</font></b>
<p>Once the server has been started successfully, you need to start the
deployment tool.&nbsp; To do this, enter the following command in another
window:
<p><b>deploytool</b>
<p>A splash screen will appear first followed by a screen that looks similar
to Figure 1.&nbsp; This is the main deployment screen.&nbsp; <i>(I'm sorry
that the text in this screen shot isn't readable, but I had to reduce the
size of the screen shot considerably to make it fit in this narrow publication
format.)</i>
<center>
<p><img SRC="java1314a.gif" height=350 width=400>
<p>Figure 1 The J2EE Deployment Tool Main Screen</center>

<p><b><font color="#FF0000">My color coding scheme</font></b>
<p>Because the following text will be a mixture of action statements and
explanatory text, I will color the actions statements the following color
of <font color="#3366FF">blue</font> to make them easy to separate from
the explanatory text.
<p><b><font color="#FF0000">The first action statement</font></b>
<p>If the tree view in the left side of Figure 1 contains more than one
entry, <font color="#3366FF">choose HelloApp</font>, which is the application
that we will be working on .
<center>
<h2>
<a NAME="Packaging the Enterprise Bean"></a>Packaging the Enterprise Bean</h2></center>
The next major step <i>(and the primary topic of this lesson)</i> in the
deployment of your bean is to package your Enterprise Bean in a jar file
so that it can be put into the application.&nbsp; This involves the following
steps.
<ul>
<li>
Create the bean's deployment descriptor <i>(this is an XML file but you
don't need to worry about that at this point)</i>.</li>

<li>
Package the deployment descriptor and the bean's classes in an EJB jar
file.</li>

<li>
Insert the EJB .jar file into the application's <b>HelloApp.ear</b> file.</li>
</ul>
Although this is what will be happening, the separation between these individual
steps isn't very obvious when using the deployment tool to package the
Enterprise Bean.
<p><b><font color="#FF0000">Start the New Enterprise Bean Wizard</font></b>
<p>A tool called the <i>New Enterprise Bean Wizard</i> is used to create
the bean by packaging everything necessary in a jar file.
<p>To start the New Enterprise Bean Wizard
<ul>
<li>
<font color="#3366FF">Select the <i>File</i> menu</font> on the screen
shown in Figure 1</li>

<li>
<font color="#3366FF">Choose <i>New Enterprise Bean</i>.</font></li>
</ul>
The wizard will then display two dialog boxes in succession.
<p><b><font color="#FF0000">Introduction Dialog Box</font></b>
<p>The first dialog box is solely for your information and should look
something like Figure 2.
<p>This screen explains what you can do with the wizard.&nbsp; The wizard
can be used to do lots of things that we won't be doing in this example.
<center>
<p><img SRC="java1314b.gif" height=332 width=400>
<p>Figure 2&nbsp; First Screen for New Enterprise Bean Wizard</center>

<p>All that you need to do with this screen is to read the material and
then <font color="#3366FF">click <i>Next</i></font> to proceed to the next
screen.
<p><b><font color="#FF0000">EJB JAR Dialog Box</font></b>
<p>That will produce a screen that looks something like Figure 3.
<center>
<p><img SRC="java1314c.gif" height=332 width=400>
<p>Figure 3&nbsp; Second Screen for New Enterprise Bean Wizard</center>

<p><b><font color="#FF0000">Selecting the application</font></b>
<p>Near the top of the screen shown in Figure 3, you will find a combo
box entitled <i>Enterprise Bean will Go In</i>.&nbsp;&nbsp; This is where
you specify the application that your new bean will be installed in. 
<i>(If
this is the first application deployed on your server, you will have only
one choice.)</i>
<p><font color="#3366FF">Select <b>HelloApp</b></font> in this combo box.
<p><b><font color="#FF0000">The jar display name</font></b>
<p>To the right of the combo box, you will find a field entitled <i>JAR
Display Name</i>.
<p><font color="#3366FF">Enter <b>HelloJAR</b> </font>in this field.
<p>This name will represent the EJB jar file that contains the bean in
the tree view at the left on the main deployment tool screen shown in Figure
1.&nbsp; You can access the jar file later if need be by clicking on this
name in the tree view.&nbsp; <i><u>Note, however, that this will not be
the name of the actual jar file.</u></i>
<p><b><font color="#FF0000">Describe the bean</font></b>
<p>Moving on down the screen, there is a text area entitled <i>Description</i>.&nbsp;
It is initialized with the words "no description."&nbsp; If you want to,
you can <font color="#3366FF">enter a text description </font>of the bean
here.&nbsp; The description will later appear in the XML file that is the
deployment descriptor for the bean.
<p><b><font color="#FF0000">Adding files to the jar file</font></b>
<p>In this example we are going to skip over the material for the <i>Manifest
Classpath</i> and <i>Icons</i> near the center of the screen.
<p>Skip on down and <font color="#3366FF">click the <i>Add</i> button</font>
to the right of the <i>Contents</i> text area in Figure 3.
<p>This will cause a smaller dialog box similar to that shown in Figure
4 to appear.&nbsp; <i>(Because it is physically smaller, I didn't need
to reduce the screen shot so much.&nbsp; As a result, you can probably
read the text in the screen shot in Figure 4.)</i>
<center>
<p><img SRC="java1314d.gif" height=501 width=401>
<p>Figure 4&nbsp; Screen Used to Add Files to the jar File</center>

<p><b><font color="#FF0000">Where are your class files located?</font></b>
<p>This dialog is divided into three parts:
<ul>
<li>
A text field near the top</li>

<li>
A text area in the center</li>

<li>
A text area near the bottom.</li>
</ul>
<font color="#3366FF">Enter the name of the directory</font> containing
your class files in the text field entitled <i>Root Directory</i> near
the top.
<p>In doing this, you may either type the directory name in the <i>Root
Directory</i> field or locate it by clicking <i>Browse</i>.
<p><b><font color="#FF0000">A caution</font></b>
<p>If you use the <i>Browse</i> button, be sure to highlight the directory
that contains your class files and then
<font color="#3366FF">click
<i>Choose
Root Directory</i></font>.
<p><b>Don't double click the directory name.</b>&nbsp; That doesn't produce
the desired result because when you double click on a directory name, only
subdirectories of that directory are displayed in the text area.
<p>Clicking <i>Choose Root Directory</i> on the correct directory name
should cause your class files <i>(plus possibly a lot of other files)</i>
to appear in the large text area in the center of the dialog.
<p><b><font color="#FF0000">Selecting and adding your class files</font></b>
<p><font color="#3366FF">Select each of the following classes</font> from
the text area by highlighting them:
<ul>
<li>
Hello.class</li>

<li>
HelloBean.class</li>

<li>
HelloHome.class</li>
</ul>
Then <font color="#3366FF">click <i>Add</i></font> to cause the files to
be added to the jar file.
<p><b><font color="#FF0000">Confirm the results</font></b>
<p>The list of class files that you have selected should then be visible
in the text area near the bottom of the dialog.&nbsp; These are the files
that will later be added to the jar file.&nbsp; Confirm that they are the
correct files.&nbsp; If not, use the <i>Remove</i> and
<i>Add</i> buttons
to get it right.
<p>Then <font color="#3366FF">Click <i>OK</i></font> to actually add the
files to the jar file.
<p><b><font color="#FF0000">Proceeding to the next screen</font></b>
<p>This will cause the screen shown in Figure 3 to once again become the
active screen.
<p><font color="#3366FF">Click <i>Next</i></font> on the screen shown in
Figure 3 to proceed to the next screen.
<p>This should cause a new screen to appear that looks something like Figure
5.
<center>
<p><img SRC="java1314e.gif" height=332 width=400>
<p>Figure 5&nbsp; New Enterprise Bean Wizard - General Screen</center>

<p><b><font color="#FF0000">The bean, the remote interface, and the home
interface</font></b>
<p>There are three combo boxes near the top of the screen shown in Figure
5.&nbsp; These combo boxes are used to identify the class files for the
bean, the remote interface, and the home interface.
<ul>
<li>
In the Enterprise Bean Class combo box, <font color="#3366FF">select HelloBean</font>.</li>

<li>
In the Home Interface combo box, <font color="#3366FF">select HelloHome</font>.</li>

<li>
In the Remote Interface combo box, <font color="#3366FF">select Hello</font>.</li>
</ul>
<b><font color="#FF0000">Entity bean or session bean?</font></b>
<p>Now you must specify whether your bean is an <i>Entity</i> bean or a
<i>Session</i>
bean.&nbsp; If it is a Session bean, you must specify whether it is a <i>Stateless</i>
bean or a <i>Stateful</i> bean.&nbsp; This is done using the radio buttons
in the upper right of the dialog.&nbsp; <i>(I will have a lot more to say
later about the different kinds of beans and what they are used for.)</i>
<p><b><font color="#FF0000">A stateless session bean</font></b>
<p>For this example, we have a Stateless Session bean.
<ul>
<li>
<font color="#3366FF">Select the <i>Session</i></font> radio button.</li>

<li>
<font color="#3366FF">Select the <i>Stateless</i></font> radio button.</li>
</ul>
<b><font color="#FF0000">Identifying the bean in the tree view</font></b>
<p>Next <font color="#3366FF">enter <b>HelloBean</b></font> in the text
field entitled <i>Enterprise Bean Display Name</i> field near the center
of the dialog.
<p>This name will represent the Enterprise Bean in the tree view.
<p><b><font color="#FF0000">Another description and the next screen</font></b>
<p>Now you have an opportunity to <font color="#3366FF">enter another description</font>
in the large text area if you choose to do so.
<p><font color="#000000">After entering the description, </font><font color="#3366FF">click
<i>Next</i></font> to proceed to the next screen.
<p>This will cause a screen to appear that looks something like Figure
6.
<center>
<p><img SRC="java1314f.gif" height=332 width=400>
<p>Figure 6&nbsp; New Enterprise Bean Wizard - Environment Entries Screen</center>

<p><b><font color="#FF0000">We don't need this screen</font></b>
<p>At this point, we have finished packaging the Enterprise Bean for this
simple application.&nbsp; The remaining screens that can be exposed will
be used later as we develop more complex beans.
<p>There is nothing for us to do with the screen shown in Figure 6.&nbsp;
If you would like to do so, you can click the next button a few times to
move through the successive screens just to take a look at them.
<p>For this bean, however, you can simply <font color="#3366FF">click <i>Finish</i></font>.
<p><b><font color="#FF0000">Back to the screen of Figure 1</font></b>
<p>When you click <i>Finish</i>, the Application Deployment Tool screen,
shown in Figure 1 will once again become the active screen.
<p>If you take a look at the tree view on the left, you should see your
new application named <b>HelloApp</b> showing.&nbsp; If you click the little
button to the left of the application name, you should see the display
name of your Enterprise Bean jar file, which is <b>HelloJAR</b>.
<p><b><font color="#FF0000">Terminate for now</font></b>
<p>At this point, you can terminate the deployment tool by <font color="#3366FF">choosing
Exit</font> on the File menu.&nbsp; Then you can terminate the J2EE server
by <font color="#3366FF">entering <b>j2ee -stop</b></font> at the command
prompt.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I showed you how to package your
Enterprise Bean in its jar file.&nbsp; This involved quite a few operations:</font>
<ul>
<li>
<font color="#000000">Starting the J2EE server and the deployment tool</font></li>

<li>
<font color="#000000">Starting and using the New Enterprise Bean Wizard</font></li>

<li>
<font color="#000000">Specifying the application that will contain the
bean</font></li>

<li>
<font color="#000000">Specifying a jar display name</font></li>

<li>
<font color="#000000">Describing the bean</font></li>

<li>
<font color="#000000">Adding files to the jar file</font></li>

<li>
<font color="#000000">Identifying files for the bean, the Home Interface,
and the Remote Interface</font></li>

<li>
<font color="#000000">Specifying entity bean or session bean</font></li>

<li>
<font color="#000000">Specifying stateless or stateful session bean</font></li>
</ul>
<font color="#000000">Hopefully, these instructions have been sufficiently
clear that you were able to follow along, even if the purpose of each operation
wasn't obvious.&nbsp; I will provide more information in subsequent lessons
dealing with the purpose of these operations.</font>
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
The previous lesson showed you how to accomplish the first step in the
following list of three required steps.&nbsp; This lesson showed you how
to accomplish the second step.
<ol>
<li>
<font color="#000000">Create the J2EE Application</font></li>

<li>
<font color="#000000">Package the Enterprise Bean</font></li>

<li>
<font color="#000000">Deploy the J2EE Application</font></li>
</ol>
In the next lesson, I will show you how to accomplish the third step.&nbsp;
After that, I will show you how to create a client application that can
be used to execute your Enterprise Bean.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listings</h2></center>
A complete listing of the bean program is shown in Listing 1 below.&nbsp;
Complete listings of the remote and home interfaces are shown in Listing
2 and Listing 3.
<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File HelloBean.java</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<p><font face="Courier New,Courier"><font size=-2>This bean receives and
returns a String object</font></font>
<br><font face="Courier New,Courier"><font size=-2>via a single business
method.&nbsp; It also displays</font></font>
<br><font face="Courier New,Courier"><font size=-2>information about its
life cycle in the&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>System.out log file
or on the system comsole</font></font>
<br><font face="Courier New,Courier"><font size=-2>depending on whether
or not System.out has been</font></font>
<br><font face="Courier New,Courier"><font size=-2>directed to the log
files.</font></font>
<p><font face="Courier New,Courier"><font size=-2>This is a stateless session
bean.&nbsp; According to</font></font>
<br><font face="Courier New,Courier"><font size=-2>Sun, a session bean
must meet the following</font></font>
<br><font face="Courier New,Courier"><font size=-2>reuirements:</font></font>
<p><font face="Courier New,Courier"><font size=-2>Implement the SessionBean
interface.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Class is defined as
public.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Class cannot be defined
as abstract or final.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Implements one or more
ejbCreate methods.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Implements the business
methods.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Contains a public constructor
with no&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; parameters.</font></font>
<br><font face="Courier New,Courier"><font size=-2>Must not define the
finalize method.</font></font>
<p><font face="Courier New,Courier"><font size=-2>Tested using Sun j2ee
and JDK 1.3 under&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>WinNT 4.0 workstation.</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import java.util.Date;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public class HelloBean
implements SessionBean{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; SessionContext
ctx;</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbCreate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Created "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbCreate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public String
aBusinessMethod(String str){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; return
"Hello " + str;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end aBusinessMethod()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbRemove(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Removed "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbRemove()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbActivate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Activated "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//end ejbActivate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void ejbPassivate(){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println("HelloBean
Passivated "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//ejbPassivate()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public void setSessionContext(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
SessionContext ctx){</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; this.ctx
= ctx;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp; System.out.println(</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
"HelloBean got SessionContext "&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
+ new Date());</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; }//setSessionContext()</font></font>
<p><font face="Courier New,Courier"><font size=-2>&nbsp; public HelloBean(){}//public
constructor</font></font>
<p><font face="Courier New,Courier"><font size=-2>}//end class HelloBean</font></font>
<br>&nbsp;
<p><b><font face="Courier New,Courier"><font size=-2>Listing 1</font></font></b></td>
</tr>
</table>

<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File HelloHome.java&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public interface HelloHome
extends EJBHome{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; public Hello
<b>create()</b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws java.rmi.RemoteException,&nbsp;</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
javax.ejb.CreateException;</font></font>
<br><font face="Courier New,Courier"><font size=-2>}//end interface</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 2</font></font></b></td>
</tr>
</table>

<br>&nbsp;
<table BORDER=2 CELLSPACING=0 CELLPADDING=0 WIDTH="399" BGCOLOR="#FFFF00" >
<tr>
<td VALIGN=TOP WIDTH="399" style="width:197.7pt;border:double windowtext 1.5pt;
  padding:0in 5.4pt 0in 5.4pt"><font face="Courier New,Courier"><font size=-2>/*
File Hello.java</font></font>
<br><font face="Courier New,Courier"><font size=-2>Copyright 2000 R.G.Baldwin</font></font>
<br><font face="Courier New,Courier"><font size=-2>Rev 9/15/00</font></font>
<br><font face="Courier New,Courier"><font size=-2>***********************************************/</font></font>
<br><font face="Courier New,Courier"><font size=-2>import javax.ejb.*;</font></font>
<br><font face="Courier New,Courier"><font size=-2>import java.rmi.*;</font></font>
<p><font face="Courier New,Courier"><font size=-2>public interface Hello
extends EJBObject{</font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp; String <b>aBusinessMethod(String
s)</b></font></font>
<br><font face="Courier New,Courier"><font size=-2>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
throws RemoteException;</font></font>
<br><font face="Courier New,Courier"><font size=-2>}//end interface</font></font>
<p><b><font face="Courier New,Courier"><font size=-2>Listing 3</font></font></b></td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="BaldwinBio"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
