<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 10, The Comparator Interface, Part 2</h2>
<p><i>Baldwin shows you how to use a Comparator object
to
achieve a natural ordering on a set of names added to a TreeSet collection
while ignoring the case used to write the names.</i></p>
<h2>
</h2>
<b>Published:</b>&nbsp; August 13, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1368
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Program</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
<b><font color="#FF0000">A miniseries</font></b>
<p>This is the tenth lesson in a miniseries on Java data structures and
the Java<i> Collections Framework.</i>&nbsp; The first lesson in the miniseries
was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1366.htm">Data Structures in Java: Part 9, The
Comparator Interface, Part 1</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p><b><font color="#FF0000">A sub-series</font></b>
<p>This is also the second lesson in a sub-series on the <b>Comparator</b>
interface.&nbsp; The purpose of the lessons in this sub-series is to teach
you about the interactions between the <b>Comparator</b> interface and
the Collections Framework<i>,</i> particularly with respect to the
<b>Set</b>,
<b>SortedSet</b>,
and <b>SortedMap</b> interfaces of the Collections Framework.&nbsp; This
lesson discusses <b>Set</b> and <b>SortedSet</b>.&nbsp; A discussion of
<b>SortedMap</b>
will be deferred for inclusion in a subsequent lesson.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">In this lesson, I will show you how to use a <b>Comparator</b>
object </font>to achieve a <i>natural ordering</i> of a set of names added
to a <b>TreeSet</b> collection while ignoring the case used to write the
names.
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Program</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Let's begin with a little quiz to test your prior knowledge of the Collections
Framework.
<p>What output is produced by the program shown in Listing 1?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; Joe Bill Tom JOE BILL TOM</li>

<li>
D.&nbsp; Tom TOM Joe JOE Bill BILL</li>

<li>
E.&nbsp; Joe Bill Tom</li>

<li>
F.&nbsp; None of the above.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparator03.java
//Copyright 2001 R.G.Baldwin
import java.util.*;
import java.io.Serializable;

public class Comparator03{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparator03

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Natural ordering");
&nbsp;&nbsp;&nbsp; ref = new TreeSet();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Comparator in use");
&nbsp;&nbsp;&nbsp; ref = new TreeSet(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new TheComparator());
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();

&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; implements Comparator,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int compare(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

&nbsp;&nbsp;&nbsp; //Do an upper-case comparison
&nbsp;&nbsp;&nbsp; int result =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((String)o1).toUpperCase().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; compareTo(((String)o2).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toUpperCase());
&nbsp;&nbsp;&nbsp; return result;
&nbsp; }//end compare()
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public boolean equals(Object o){
&nbsp;&nbsp;&nbsp; if(!(o instanceof TheComparator))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false;
&nbsp;&nbsp;&nbsp; else return true;
&nbsp; }//end overridden equals()
}//end class TheComparator

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p>If your answer was <b>None of the above</b>, you are correct.
<p><b><font color="#FF0000">The program output</font></b>
<p>The output produced by the program shown in Listing 1 is four lines
long as shown below:
<p><b><tt>Natural ordering</tt></b>
<br><b><tt>BILL Bill JOE Joe TOM Tom</tt></b>
<br><b><tt>Comparator in use</tt></b>
<br><b><tt>Bill Joe Tom</tt></b>
<p><b><font color="#FF0000">From the previous lesson</font></b>
<p>In the previous lesson, I introduced you to the essentials of defining
and using a <b>Comparator</b> for controlling the sort order of the elements
contained in a <b>TreeSet</b> collection.
<p>In that lesson, I explained the difference between <i>natural ordering</i>
and the sort ordering produced through the use of a <b>Comparator</b> object.
<p>However, what I showed you generally replicated the <i>natural ordering</i>,
and therefore, wasn't too exciting.
<p><b><font color="#FF0000">Doing more with a Comparator</font></b>
<p>In this and several subsequent lessons, I am going to show you some
of the things that you can do with a <b>Comparator</b> object.&nbsp; By
using a <b>Comparator</b> object, you can achieve comparisons and sort
orders that are different from the <i>natural ordering</i> for a given
element type.
<p><b><font color="#FF0000">Two steps in the program</font></b>
<p>The program shown in Listing 1 goes through two major steps.&nbsp; First
it populates a <b>TreeSet</b> collection with the names of six people without
using a <b>Comparator</b>.&nbsp; Then it displays the contents of that
collection using an iterator.&nbsp; That produces the following output:
<p><b><tt>Natural ordering</tt></b>
<br><b><tt>BILL Bill JOE Joe TOM Tom</tt></b>
<p>In this step, each of the six names that were added to the collection
were displayed after they were arranged into their <i>natural ordering</i>.
<p>In case you are unfamiliar with this fact, upper-case characters appear
before lower-case characters in the <i>natural ordering</i> of characters
in the Unicode character set.&nbsp; Therefore, the names consisting of
all upper-case characters appear in the output ahead of the same names
consisting of a mixture of upper-case and lower-case characters.
<p><b><font color="#FF0000">The second step</font></b>
<p>Then the program shown in Listing 1 instantiates a new <b>TreeSet</b>
object, providing a <b>Comparator</b> for use in comparing and managing
the sort order of the elements.
<p>The program populates the new <b>TreeSet</b> collection with the same
set of six names in the same order as before.&nbsp; After the collection
is populated, its contents are displayed producing the following output:
<p><b><tt>Comparator in use</tt></b>
<br><b><tt>Bill Joe Tom</tt></b>
<p><b><font color="#FF0000">Duplicate names eliminated from the set</font></b>
<p>Three of the names appear in the output in the same order as the <i>natural
ordering</i> shown earlier.&nbsp; However, the duplicate names are eliminated
and only three names appear.
<p>This is because a <b>Comparator</b> was used by the <b>TreeSet</b> object
to compare the elements as they were added.&nbsp; The <b>Comparator</b>
was designed to eliminate the distinction between upper-case and lower-case
characters.
<p><b><font color="#FF0000">Does Joe equal JOE?</font></b>
<p>For the earlier case that didn't use a <b>Comparator</b>, the names
<b>Joe</b>
and <b>JOE</b> were considered to be different elements.&nbsp; Therefore,
after population, both names appeared in the collection.
<p>When the <b>Comparator</b> was used to eliminate the distinction between
upper-case and lower-case characters, the names <b>Joe</b> and <b>JOE</b>
were considered to be duplicates.&nbsp; As a result, only the first of
the two was allowed into the collection and the second of the two was rejected.
<p><b><font color="#FF0000">Let's see some code</font></b>
<p>The code shown in Listing 2 is the code that was used
<ul>
<li>
To instantiate a <b>TreeSet</b> object without a <b>Comparator</b>,</li>

<li>
To populate the collection, and</li>

<li>
To display the contents of the collection after it was populated.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; ref = new <b>TreeSet()</b>;
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);

&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The actual populator code</font></b>
<p>The code in Listing 3 was actually used to populate the collection in
both cases, both with, and without a <b>Comparator</b> <i>(to be discussed
later).</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()
}//end class Populator

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Populating the collection with String objects</font></b>
<p>Note that in Listing 3, I did not use a class of my own design from
which to instantiate the objects used to populate the collection.&nbsp;
Rather, I used the <b>String</b> class from the standard library.
<p>The <b>String</b> class implements the <b>Comparable</b> interface.&nbsp;
Therefore, objects instantiated from the <b>String</b> class have a <i>natural
ordering</i> when placed in a collection.
<p>Because the <b>compareTo</b> method of the <b>String</b> class, <i>(which
implements the Comparable interface)</i> considers upper-case and lower-case
characters to be different, there were no duplicate elements added to the
collection when the <b>compareTo</b> method was used to compare elements.&nbsp;
The six <b>String</b> objects were simply arranged so that the iterator
would return references to those objects in sorted order.&nbsp; This produced
the output shown below:
<p><b><tt>BILL Bill JOE Joe TOM Tom</tt></b>
<p><b><font color="#FF0000">A TreeSet with a Comparator</font></b>
<p>The code shown in Listing 4 was used to instantiate a new <b>TreeSet</b>
object.&nbsp; A <b>Comparator</b> object was provided to the <b>TreeSet</b>
constructor.&nbsp; The <b>Comparator</b> object was subsequently used for
comparing and controlling the sorting order of the elements in the <b>TreeSet</b>
collection.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; ref = new <b>TreeSet</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>new TheComparator()</b>);
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next() + " ");
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p>The code in Listing 4 was also used to populate the collection, and
to display the contents of the collection after it was populated.
<p><b><font color="#FF0000">Populating the TreeSet collection</font></b>
<p>As before, the <b>fillIt</b> method shown in Listing 5 was actually
used to populate the collection.&nbsp; The same six names as before were
added to the <b>TreeSet</b> collection.&nbsp; However, the result of adding
those six names was determined by the behavior of the <b>compare</b> method
in the <b>Comparator</b> object used by the <b>TreeSet</b> object for managing
the collection <i>(three of the names were rejected as duplicates).</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; public static void <b>fillIt</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add("Joe");
&nbsp;&nbsp;&nbsp; ref.add("Bill");
&nbsp;&nbsp;&nbsp; ref.add("Tom");
&nbsp;&nbsp;&nbsp; ref.add("JOE");
&nbsp;&nbsp;&nbsp; ref.add("BILL");
&nbsp;&nbsp;&nbsp; ref.add("TOM");
&nbsp; }//end fillIt()

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The Comparator</font></b>
<p>The code in Listing 6 shows the beginning of the class from which the
<b>Comparator</b>
object was instantiated.&nbsp; Note that this class implements the <b>Comparator</b>
interface.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class TheComparator&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; <b>implements Comparator</b>,Serializable{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; public int <b>compare</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object o1,Object o2){
&nbsp;&nbsp;&nbsp; if(!(o1 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();
&nbsp;&nbsp;&nbsp; if(!(o2 instanceof String))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; throw new ClassCastException();

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p>Listing 6 doesn't contain the interesting part of this class.&nbsp;
The code in Listing 6 simply throws an exception if the <b>compare</b>
method receives any incoming parameters of types other than <b>String</b>.
<p><b><font color="#FF0000">The interesting code</font></b>
<p>The interesting code is shown in Listing 7.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; int result =&nbsp;
&nbsp;&nbsp;&nbsp; ((String)o1).<b>toUpperCase</b>().
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>compareTo</b>(((String)o2).
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toUpperCase());
&nbsp;&nbsp;&nbsp; return result;
}//end compare()

<b><font face="Courier New,Courier">Listing 7</font></b></pre>
</td>
</tr>
</table>

<p>The code in Listing 7 makes use of two methods of the <b>String</b>
class to compare the two incoming objects.
<p><b><font color="#FF0000">Convert to upper-case</font></b>
<p>The method named <b>toUpperCase</b> is used to produce a version of
each of the incoming strings that consists of upper-case characters only.&nbsp;
In other words, lower-case characters in each of the two strings are replaced
by the corresponding upper-case characters.&nbsp; This conversion occurs
before the strings are compared.
<p>For example, the string <b>Joe</b> is converted to <b>JOE</b> inside
the <b>compare</b> method, before the actual comparison is made.&nbsp;
This results in the two strings containing <b>Joe</b> and <b>JOE</b> being
considered to be duplicates.&nbsp; If one of them is already in the collection
when an attempt is made to add the other, the second will be rejected as
a duplicate.
<p><b><font color="#FF0000">Making the comparison</font></b>
<p>Then the <b>compareTo</b> method of the string class is used to make
the actual comparison.&nbsp; <i>(Note that this is the same method that
is used to make the comparison in the absence of a Comparator object.&nbsp;
However, in the case of the Comparator object, the case of the strings
is modified before they are passed to the compareTo method.)</i>
<p>This code invokes the <b>compareTo</b> method on the upper-case version
of the string represented by <b>o1</b>, passing the upper-case version
of the string represented by <b>o2</b> as a parameter.&nbsp; Here is part
of what Sun has to say about the behavior of the <b>compareTo</b> method.
<blockquote><i>"Returns:&nbsp; the value 0 if the argument is a string
lexicographically equal to this string; a value less than 0 if the argument
is a string lexicographically greater than this string; and a value greater
than 0 if the argument is a string lexicographically less than this string."</i></blockquote>
<b><font color="#FF0000">Just what I was looking for</font></b>
<p>That is exactly the behavior that I was looking for, so all that I needed
to do after invoking the <b>compareTo</b> method on the upper-case versions
of the two strings was to return the value that was returned by the <b>compareTo</b>
method.
<p><i>(Note, while writing this lesson and explaining the behavior of this
program, I discovered that I could have used a method of the String class
named compareToIgnoreCase to accomplish the same thing with a little less
work.)</i>
<p><b><font color="#FF0000">The results</font></b>
<p>When the <b>TreeSet</b> object used the <b>Comparator</b> object to
compare and arrange the elements in the collection, the three <i>duplicate</i>
names were eliminated and the iterator delivered references to the remaining
three names in the following order:
<p><b><tt>Bill Joe Tom</tt></b>
<br>&nbsp;
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I showed you how to use a <b>Comparator</b>
object </font>to achieve a <i>natural ordering</i> of a set of names added
to a <b>TreeSet</b> collection while ignoring the case used to write the
names.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
In the next lesson, I will show you how to use a <b>Comparator</b> to cause
a <b>TreeSet</b> collection to be sorted in descending order while preserving
differences in case.
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2001, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
