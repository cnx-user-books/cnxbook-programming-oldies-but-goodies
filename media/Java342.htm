<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>Java Programming by Richard G Baldwin</title>
</head>
<body bgcolor="#FEFFF0" link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<font size="3" face="arial">
<h2 align="center">Getting Started with the Turtle Class:&nbsp; Multimedia Programming with Java</h2>
<i>Learn about the behavior of the <b>Turtle</b> class, and 
start learning about the behavior of its superclass named <b>SimpleTurtle</b>.</i><p><b>Published:</b>&nbsp; 
December 2, 2008<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 342</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#General%20Background%20Information">General
	background information</a><ul>
	<li><a href="#A_multimedia_class_library">A multimedia class library</a></li>
	<li><a href="#The_DrJava_IDE">The DrJava IDE</a></li>
	<li><a href="#Software_installation_and_testing">Software installation and 
	testing</a></li>
</ul>
	</li>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a><ul>
	<li><a href="#A_simple_Turtle_class_example">A Turtle class example</a></li>
	<li><a href="#The_Turtle_class">The Turtle class</a></li>
	<li><a href="#The_SimpleTurtle_class">The SimpleTurtle class</a><ul>
	<li><a href="#The_updateDisplay_method">The updateDisplay method</a></li>
	<li><a href="#The_paintComponent_method">The paintComponent method</a></li>
</ul>
	</li>
</ul>
	</li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listings</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p> This is the second lesson in a series designed to teach you how to write 
Java programs to do things like:</p>
<ul>
	<li>Remove redeye from a photographic image.</li>
	<li>Distort the human voice.</li>
	<li>Display one image inside another image.</li>
	<li>Do edge detection, blurring, and other filtering operations on images.</li>
	<li>Insert animated cartoon characters in videos of live humans.</li>
</ul>
<p> If you have ever wondered how to do these things, you've come to the right 
place.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. Output from StartupTest01.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. Main class definition for the 
	program named StartupTest01.</li>
	<li><a href="#Listing_2">Listing 2</a>. Two overloaded constructors for the 
	Turtle class. </li>
	<li><a href="#Listing_3">Listing 3</a>. Turtle constructors that require a 
	Picture object.</li>
	<li><a href="#Listing_4">Listing 4</a>. Beginning of SimpleTurtle class with 
	variable declarations. </li>
	<li><a href="#Listing_5">Listing 5</a>. A common constructor. </li>
	<li><a href="#Listing_6">Listing 6</a>. Constructor for a specified position 
	in a World object. </li>
	<li><a href="#Listing_7">Listing 7</a>. Constructor for default position in 
	a World object.</li>
	<li><a href="#Listing_8">Listing 8</a>. Constructor for a specified position 
	in a Picture object.</li>
	<li><a href="#Listing_9">Listing 9</a>. Constructor for the default position 
	in a Picture object.</li>
	<li><a href="#Listing_10">Listing 10</a>. Beginning of the updateDisplay 
	method. </li>
	<li><a href="#Listing_11">Listing 11</a>. Update display for a picture. </li>
	<li><a href="#Listing_12">Listing 12</a>. Update display for a world.</li>
	<li><a href="#Listing_13">Listing 13</a>. Beginning of the paintComponent 
	method. </li>
	<li><a href="#Listing_14">Listing 14</a>. Modify the current transform. </li>
	<li><a href="#Listing_15">Listing 15</a>. Rotate, translate, and draw ovals 
	that represent the turtle. </li>
	<li><a href="#Listing_16">Listing 16</a>. Remainder of the paintComponent 
	method. </li>
	<li><a href="#Listing_17">Listing 17</a>. Source code for the program named 
	StartupTest01. </li>
	<li><a href="#Listing_18">Listing 18</a>. The multimedia library class named 
	Turtle. </li>
	<li><a href="#Listing_19">Listing 19</a>. The multimedia library class named 
	SimpleTurtle. </li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online programming tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"> <a
 name="General Background Information">General background information</a></font></h2>
<h3><a name="A_multimedia_class_library">A multimedia class library</a></h3>
<p>In this series of lessons, I will present and explain many of the classes in 
a multimedia class library that was developed and released under a <b>Creative 
Commons Attribution 3.0 United States License</b> <i>(see <a href="#Resources">
Resources</a>) </i>by Mark Guzdial and Barbara Ericson at Georgia Institute of 
Technology.&nbsp; In doing this, I will also present some interesting sample programs 
that use the library.</p>
<h3><a name="The_DrJava_IDE">The DrJava IDE</a></h3>
<p>In some cases, I will use a free lightweight Java IDE named <b>DrJava</b> <i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; 
This IDE is useful because it provides an interactive Java programming mode.&nbsp; 
The interactive mode makes it easy to <i>&quot;try things out&quot;</i> without the requirement to write and compile a 
complete Java application.&nbsp; <i>(The IDE also provides a typical Java text 
editor, access to the Java compiler and runtime engine, a debugger, etc.)</i>&nbsp;
</p>
<p>Even though I will sometimes use DrJava, you should be able to use any Java 
IDE <i>(for the non-interactive material)</i> to compile and execute my sample 
programs so long as you set the <i>classpath</i> to include the multimedia class 
library.&nbsp; You should also be able to avoid the use of a Java IDE altogether 
if you choose to do so.&nbsp; You can create the source code files using a simple 
text editor, and then compile and execute the sample programs from the command 
line using a batch file.</p>
<h3><a name="Software_installation_and_testing">Software installation and 
testing</a></h3>
<p>I explained how to download, install, and test both the multimedia class 
library and the DrJava IDE in the earlier lesson titled <i>Multimedia 
Programming with Java, Getting Started (see <a href="#Resources">Resources</a>)</i>.</p>
<p>I also explained how to create a Windows batch file that you can use to set 
the classpath and run programs that use the multimedia library in the total 
absence of an IDE.</p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>In this lesson, I will explain the behavior of the <b>Turtle</b> class, and 
will partially explain the behavior of its superclass named <b>SimpleTurtle</b>.</p>
<p>In particular, I will explain the purpose of a number of the instance and 
class variables that are declared in the <b>SimpleTurtle</b> class.&nbsp; I will 
also explain all five overloaded constructors in the <b>SimpleTurtle</b> class.</p>
<p>There 
are more than fifty methods defined in the <b>SimpleTurtle</b> class.&nbsp; 
Arguably, the most complex method is the method named <b>paintComponent</b>.&nbsp; 
The complexity of most of the other methods pales in comparison with the <b>
paintComponent</b> method.</p>
<p>The <b>paintComponent</b> method and the other two methods in the following list are the 
methods that are primarily responsible for displaying a turtle and its pen on 
either a <b>World</b> object or a <b>Picture</b> object.&nbsp; Thus, these three 
methods are critical to the <b>SimpleTurtle</b> class.</p>
<ul>
	<li>updateDisplay()</li>
	<li>paintComponent(Graphics g)</li>
	<li>drop(Picture dropPicture)</li>
</ul>
<p>I will explain the <b>updateDisplay</b> method and the <b>paintComponent</b> 
method in this lesson.&nbsp; I will explain the <b>drop</b> method and many of 
the remaining methods in the next lesson.</p>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
<h3><a name="A_simple_Turtle_class_example">A Turtle class example</a></h3>
<p>I'm going to 
begin by explaining a sample program named <b>StartupTest01</b> from the previous 
lesson.&nbsp; This program places a <b>Turtle</b> 
object in a <b>World</b> object and then causes the turtle to move forward and 
draw a line.</p>
<p><font color="#FF0000"><b>Source code for the program</b></font></p>
<p>The source code for this program is shown in its entirety in Listing 17 near 
the end of the lesson.&nbsp; 
The screen output produced by the program is shown in Figure 1.</p>
<p>
 <b><a name="Figure_1">Figure 1</a>. Output from StartupTest01.</b><table border="0" cols="1" bgcolor="#ffffff" >
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java342a.jpg" width="209" height="329"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The interesting part of the source code</b></font></p>
<p>The interesting part of the source code is repeated for viewing convenience in 
Listing 1.&nbsp; As you can see, this is a very simple program consisting only 
of a <b>main</b> method that contains three statements.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. Main class definition for the program 
named StartupTest01.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class Main{
  public static void main(String[] args){
    World mars = new World(200,300);
    Turtle joe = new Turtle(mars);
    joe.forward();
  }//end main

}//end class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Create the world</b></font></p>
<p>The first statement in Listing 1 instantiates a new object of the class <b>
World</b> <i>(from the multimedia library)</i> with dimensions of 200 pixels by 300 pixels.&nbsp; <i>(I 
will explain the <b>World</b> class in a future lesson.)</i>&nbsp; A reference to the 
<b>World</b> object is stored in the variable named <b>mars</b>.&nbsp; This 
<b>World</b> object is represented by the <b>JFrame</b> object <i>(without the turtle)</i> shown in 
Figure 1.</p>
<p><font color="#FF0000"><b>Create the turtle</b></font></p>
<p>You will see shortly that there are four overloaded constructors for the <b>
Turtle</b> class.&nbsp; Two of those constructors require a reference to an 
object of the class <b>Picture</b> as an incoming parameter.&nbsp; <i>(I will 
explain the <b>Picture</b> class in a future lesson.)</i>&nbsp; The other two 
constructors require an incoming parameter that is a reference to an object that 
implements the <b>ModelDisplay</b> interface.&nbsp; According to the 
documentation for the version of the library that I am currently using, the only 
class that implements the <b>ModelDisplay</b> interface is the class named <b>World</b>.&nbsp; 
Therefore, as of this time, the constructors for the <b>Turtle</b> class require 
an incoming parameter that is either a reference to a <b>Picture</b> object or a
<b>World</b> object.</p>
<p>The second statement in Listing 1 instantiates an object of the <b>Turtle</b> 
class, passing a reference to the <b>World</b> object as a parameter.&nbsp; This 
constructor causes the turtle to appear in the center of the world shown in 
Figure 1.</p>
<p><font color="#FF0000"><b>Move the turtle forward</b></font></p>
<p>Also as you will see later, the <b>Turtle</b> class inherits a method named
<b>forward()</b> from its immediate superclass named <b>SimpleTurtle</b>.&nbsp; 
This method causes the turtle to move forward by 100 pixels.&nbsp; Thus, the third 
statement in Listing 1 causes the turtle to move from the center of the world to 
the position shown in Figure 1.&nbsp; As you can see from Figure 1, when a 
turtle moves forward, it draws a thin line by default.&nbsp; I will have more to 
say about this later.</p>
<h3><a name="The_Turtle_class">The Turtle class</a></h3>
<p>A complete listing of the <b>Turtle</b> class is provided in Listing 18 near 
the end of the lesson.&nbsp; This listing is essentially the same as the 
original class in the multimedia class library.&nbsp; The only changes that I 
made were cosmetic in nature, mainly to force the source code to fit into this 
narrow publication format.</p>
<p><font color="#FF0000">
<b>Two overloaded constructors for the Turtle class</b></font></p>
<p>Listing 2 shows the beginning of the class definition and two of the 
four overloaded constructors for the <b>Turtle</b> 
class.&nbsp; <i>(Note that the <b>Turtle</b> class extends the <b>SimpleTurtle</b> 
class.)</i></p>
<p>
<b><a name="Listing_2">Listing 2</a>. Two overloaded constructors for the Turtle 
class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
public class Turtle extends SimpleTurtle{

  public Turtle (ModelDisplay modelDisplay){
    //Let the parent constructor handle it
    super(modelDisplay);
  }//end constructor

  public Turtle(int x,int y,ModelDisplay modelDisplayer){
    super(x,y,modelDisplayer);
  }//end constructor

</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The constructor with a single ModelDisplay parameter</b></font></p>
<p>The first constructor shown in Listing 2 receives a single incoming parameter of type <b>
ModelDisplay</b> 
and uses the <b>super</b> keyword to pass it along to the corresponding constructor for the superclass 
named <b>SimpleTurtle</b>.&nbsp; We will understand more about what is going on 
here when we examine the constructors for the <b>SimpleTurtle</b> class.</p>
<p>Note that this is the constructor that was used to instantiate the <b>Turtle</b> 
object in Listing 1, which passed a reference to an object of the <b>World</b> 
class to the <b>Turtle</b> constructor.&nbsp; As you will see later, this 
constructor places the turtle in the center of the world by default.</p>
<p><font color="#FF0000"><b>The constructor with three parameters</b></font></p>
<p>The second constructor in Listing 2 requires a pair of horizontal and 
vertical coordinates in addition to the <b>
ModelDisplay</b> object.&nbsp; All three parameters are simply passed to the 
corresponding constructor in the <b>SimpleTurtle</b> class.&nbsp; As you will 
see later, this constructor places the turtle at a location in the world 
specified by the coordinate values.</p>
<p><font color="#FF0000"><b>Turtle constructors that require a Picture object</b></font></p>
<p>It is also possible to place a turtle in a <b>Picture</b> object and 
use it to draw on the picture.&nbsp; The two constructors that are used to place 
a turtle in a picture are shown in Listing 3.</p>


<p><b><a name="Listing_3">Listing 3</a>. Turtle constructors that require a 
Picture object.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public Turtle (int x, int y, Picture picture){
    super(x,y,picture);
  }//end constructor

  public Turtle (Picture p){
    super(p);
  }//end constructor
  
}//end Turtle class definition</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As before, both constructors pass their incoming parameters to the 
corresponding constructors for the superclass named <b>SimpleTurtle</b>.&nbsp; 
Also as before, one constructor causes the turtle to be placed in the center of 
the picture and the other constructor makes it possible for the programmer to 
specify the initial location of the turtle in the picture.</p>
<p><font color="#FF0000"><b>The end of the Turtle class definition</b></font></p>
<p>Listing 3 also signals the end of the class definition for the <b>Turtle</b> 
class.</p>
<h3><a name="The_SimpleTurtle_class">The SimpleTurtle class</a></h3>
<p>A complete listing of the <b>SimpleTurtle</b> class is provided in Listing 19.&nbsp; Once again, this listing is essentially the same as the original class 
in the multimedia class library.&nbsp; The only changes that I made were cosmetic in 
nature, mainly to force the source code to fit into this narrow publication 
format.</p>
<p>According to the author, this class represents a Logo-style turtle, which starts off facing north.</p>
<p>A turtle can have a name, has a starting x and y position, has a heading, has 
a width, has a height, has a visible flag, has a body color, can have a shell 
color, and has a pen.</p>
<p>The turtle will not go beyond the model display or picture boundaries.</p>
<p>You can display this turtle in either a <b>Picture</b> object or in an object that implements
<b>ModelDisplay</b> such as a <b>World</b> object.</p>
<p><font color="#FF0000"><b>Will discuss in fragments</b></font></p>
<p>As you can see from Listing 19, this is a large class.&nbsp; As is my custom, 
I will break the class down and discuss it in fragments.</p>
<p>Listing 4 shows the beginning of the <b>SimpleTurtle</b> class along with a 
large number of variable declarations.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Beginning of SimpleTurtle class with 
variable declarations. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import javax.swing.*;
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.util.Observer;
import java.util.Random;

public class SimpleTurtle{
  ///////////////// fields ////////////////////////

  /** count of the number of turtles created */
  private static int numTurtles = 0;

  /** array of colors to use for the turtles */
  private static Color[] colorArray = {Color.green,
              Color.cyan,new Color(204,0,204),Color.gray};

  /** who to notify about changes to this turtle */
  private ModelDisplay modelDisplay = null;

  /** picture to draw this turtle on */
  private Picture picture = null;

  /** width of turtle in pixels */
  private int width = 15;

  /** height of turtle in pixels */
  private int height = 18;

  /** current location in x (center) */
  private int xPos = 0;

  /** current location in y (center) */
  private int yPos = 0;

  /** heading angle */
  private double heading = 0;  // default is facing north

  /** pen to use for this turtle */
  private Pen pen = new Pen();

  /** color to draw the body in */
  private Color bodyColor = null;

  /** color to draw the shell in */
  private Color shellColor = null;

  /** color of information string */
  private Color infoColor = Color.black;

  /** flag to say if this turtle is visible */
  private boolean visible = true;

  /** flag to say if should show turtle info */
  private boolean showInfo = false;

  /** the name of this turtle */
  private String name = "No name";</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This class extends <b>Object</b> by default, thereby inheriting only the 
eleven methods that are defined in the <b>Object</b> class.</p>
<p>The purpose of most of the variables is adequately explained by the embedded 
comments.&nbsp; In addition, the purpose of the variables will become clearer 
in the following discussion of the behavior of an object of the <b>SimpleTurtle</b> 
class.</p>
<p><font color="#FF0000">
<b>A common constructor</b></font></p>
<p>The first of five overloaded constructors is shown in Listing 5.</p>
<p>
<b><a name="Listing_5">Listing 5</a>. A common constructor. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public SimpleTurtle(int x, int y){
    xPos = x;
    yPos = y;
    bodyColor =
               colorArray[numTurtles % colorArray.length];
    setPenColor(bodyColor);
    numTurtles++;
  }//end constructor
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This is a <i>common</i> constructor.&nbsp; By this, I mean that this constructor is 
called by each of the other four constructors.</p>
<p>This constructor sets the values of four properties of the new turtle and 
increments a static turtle counter variable by:</p>
<ul>
	<li>Receiving and saving the initial x and y position coordinates for the 
	new turtle.</li>
<li>Setting the body color for the new turtle to one of four colors by cycling 
through the following four colors:<ul>
		<li>green</li>
		<li>cyan</li>
		<li>new Color(204,0,204)</li>
		<li>gray</li>
	</ul>
</li>
<li>Setting the color of the pen to the body color.</li>
	<li>Incrementing the count of the number of turtles.</li>
</ul>
<p><font color="#FF0000">
<b>Constructor for a specified position in a World object</b></font></p>
<p>As mentioned earlier, a turtle can be displayed either in an object of the 
class <b>Picture</b>, or in an object that implements the <b>ModelDisplay</b> 
interface <i>(World)</i>.&nbsp; For the version of the multimedia class library that I am 
using, the only class that implements the <b>ModelDisplay</b> interface is the 
class named <b>World</b>.&nbsp; <i>(Presumably, the authors are leaving open the 
option to display turtles in objects of currently undefined classes that 
implement the <b>ModelDisplay</b> interface.)</i></p>
<p><font color="#FF0000"><b>The addModel method of a World object</b></font></p>
<p>I will explain both the <b>World</b> class and the <b>Picture</b> class in a 
future lesson.&nbsp; What you need to know for now is that an object of the <b>
World</b> class has a method named <b>addModel</b>.&nbsp; This method receives 
an incoming parameter of type <b>Object</b> and adds it to an <b>ArrayList</b> 
collection that is constrained through generics to store only objects of type <b>
Turtle</b>.&nbsp; Then, depending on the value of a <b>boolean</b> variable 
belonging to the <b>World</b> object, the <b>World</b> object may or may not 
repaint itself on the screen to display the turtle.</p>
<p>The constructor in Listing 6 receives the initial x and y position 
coordinates along with a reference to the <b>World</b> in which the turtle is to 
be displayed.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Constructor for a specified position in a 
World object. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public SimpleTurtle(int x, int y, ModelDisplay display){
    this(x,y); // invoke constructor that takes x and y
    modelDisplay = display;
    display.addModel(this);
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Call the common constructor</b></font></p>
<p>This constructor begins by using the <b>this</b> keyword to call the common 
constructor shown in Listing 5, passing the x and y position coordinates as 
parameters.&nbsp; If you are unfamiliar with this usage of the keyword <b>this</b>, 
see <i>The Essence of OOP using Java, The this and super Keywords</i> in
<a href="#Resources">Resources</a>.</p>
<p><font color="#FF0000"><b>Save a reference to the world</b></font></p>
<p>When the common constructor returns, Listing 6 saves the incoming reference 
to the <b>World</b> object in an instance variable named <b>modelDisplay</b> for future 
reference.&nbsp; In other words, each turtle knows which world it belongs to.</p>
<p><font color="#FF0000"><b>Add the turtle to the world</b></font></p>
<p>Finally, Listing 6 calls the <b>addModel</b> method of the <b>World</b> 
object to cause this turtle object to be added to the list of turtles being 
displayed by that world.</p>
<p><font color="#FF0000">
<b>Constructor for default position in a World object</b></font></p>
<p>The constructor in Listing 7 is similar to the constructor in Listing 6 with 
the difference being that instead of receiving the initial x and y position 
coordinates, they are computed to be the center of the <b>World</b> object.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. Constructor for default position in a 
World object.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public SimpleTurtle(ModelDisplay display){
    // invoke constructor that takes x and y
    this((int) (display.getWidth() / 2),
         (int) (display.getHeight() / 2));
    modelDisplay = display;
    display.addModel(this);
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Constructor for a specified position in a Picture object</b></font></p>
<p>The default value for the variable named <b>visible</b> in Listing 4 is <b>
true</b>.&nbsp; As a result, when you add a turtle to a world and repaint the 
world, the turtle is visible by default.</p>
<p>Apparently the primary purpose of the use of <b>Turtle</b> objects with <b>
Picture</b> objects is not to display turtles in pictures, but rather is to use 
a turtle to make line drawings on a picture.</p>
<p>The constructor in Listing 8 is similar to the constructor in Listing 6, but 
there are differences.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. Constructor for a specified position in a 
Picture object. </b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public SimpleTurtle(int x, int y, Picture picture){
    this(x,y); // invoke constructor that takes x and y
    this.picture = picture;
    this.visible = false;//default is not to see turtle
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Call the common constructor</b></font></p>
<p>As before, Listing 8 calls the common constructor shown in Listing 5 for the 
purpose discussed earlier.&nbsp; When the common constructor returns, Listing 8 
saves a reference to the <b>Picture</b> object on which it is to draw.</p>
<p>Then unlike the case for the <b>World</b> object shown in Listing 6, Listing 
8 causes the turtle to be invisible by default.&nbsp; Also, unlike the case for 
the <b>World</b> object, the constructor in Listing 8 does not add itself to the 
picture.&nbsp; <i>(We will learn a little more about how the turtle behaves 
relative to a picture later in this lesson and will learn even more when we discuss the <b>Picture</b> 
class in a future lesson.)</i></p>
<p><font color="#FF0000">
<b>Constructor for the default position in a Picture object</b></font></p>
<p>Finally, Listing 9 shows the constructor for an invisible turtle that is 
positioned in the center of a specified <b>Picture</b> object.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. Constructor for the default position in a 
Picture object. </b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public SimpleTurtle(Picture picture){
    // invoke constructor that takes x and y
    this((int) (picture.getWidth() / 2),
         (int) (picture.getHeight() / 2));
    this.picture = picture;
    this.visible = false;//default is not to see turtle
  }//end constructor</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>By now, it shouldn't be necessary for me to provide a further explanation of Listing 9.</p>
<p><font color="#FF0000"><b>The painting and drawing methods</b></font></p>
<p>More than fifty methods are defined in the <b>SimpleTurtle</b> class.&nbsp; 
The code in some of the methods is very simple while the code in other methods 
is somewhat complex.</p>
<p>Fortunately, it is possible to group the methods into several groups of 
related methods in order to organize them in your mind.&nbsp; Perhaps the most 
basic group and arguably the most complex group includes methods that cause the 
turtle and other images to be displayed on the world or on the picture.&nbsp; That group includes 
the following methods:</p>
<ul>
	<li>updateDisplay()</li>
	<li>paintComponent(Graphics g)</li>
	<li>drop(Picture dropPicture)</li>
</ul>
<p>The <b>updateDisplay</b> method is called by many other methods to cause the 
turtle or the line produced by the turtle's pen to be displayed if certain 
conditions are met.&nbsp; When it is determined that the display does need to be 
updated, the <b>paintComponent</b> method is called to control how 
the turtle or the line produced by the turtle's pen is displayed on the screen.</p>
<p><font color="#FF0000"><b>Apparently paintComponent</b> <b>is not an 
overridden method</b></font></p>
<p>Normally, I would refer to the <b>paintComponent</b> method as an <i>overridden</i> 
method because it is defined in many classes <i>(such as the JComponent class)</i> 
and inherited in and overridden in subclasses.&nbsp; However, the <b>
SimpleTurtle</b> class extends the <b>Object</b> class and therefore does not 
inherit a method named <b>paintComponent</b>.&nbsp; In this case, the
<b>paintComponent</b> method is a stand-alone method that is intended to do 
essentially the same thing as overridden versions of the method in other classes.</p>
<p><font color="#FF0000"><b>The drop method</b></font></p>
<p>The <b>drop</b> method is different from the other two.&nbsp; It doesn't draw 
a turtle.&nbsp; Instead it draws a <b>Picture</b> object on the primary <b>
Picture</b> object or on the <b>World</b> object at the turtle's current 
location and with the same orientation as the turtle.&nbsp; This makes it 
possible to cause some other image to be displayed at the current location of a 
turtle.&nbsp; You could use this, for example to create a mosaic of images.</p>
<p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>The synchronized keyword</b><br />
 If you are unfamiliar with multi-threaded programming and the<i> synchronized</i> keyword, see <font color="#000000"><i>
	Threads of Control</i> 
	in <a href="#Resources">Resources</a>.</font></td></tr></table>
</td>
</tr>
</table>
<h4><a name="The_updateDisplay_method">The updateDisplay method</a></h4>
<p>The <b>updateDisplay</b> method, which begins in Listing 10, causes the display of the turtle to be 
updated under certain conditions and also makes certain that the turtle is 
within the bounds of the world or the picture.</p>
<p>
<b><a name="Listing_10">Listing 10</a>. Beginning of the updateDisplay method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public synchronized void updateDisplay(){
    // check that x and y are at least 0
    if (xPos &lt; 0) xPos = 0;
    if (yPos &lt; 0) yPos = 0;</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The <b>updateDisplay</b> method begins in Listing 10 by setting the position coordinate values to 0 if they are 
negative.</p>
<p>


<p><font color="#FF0000">
<b>Update display for a picture</b></font></p>
<p>Listing 11 updates the display for the case where the turtle is being used to 
draw on a picture.</p>
<p>
<b><a name="Listing_11">Listing 11</a>. Update display for a picture. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    if (picture != null){
      if (xPos &gt;= picture.getWidth())
        xPos = picture.getWidth() - 1;
      if (yPos &gt;= picture.getHeight())
         yPos = picture.getHeight() - 1;
      Graphics g = picture.getGraphics();
      paintComponent(g);
    }//end if
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 11 begins by modify the x and y position coordinates if the turtle is 
not within the bounds of the picture.&nbsp; This makes certain that the turtle 
remains within the bounds of the picture.</p>


<table width="275" cellpadding="0" cellspacing="0" border="0" align="right">
<tr>
<td width="10">
<td>
  <table width="100%" cellpadding="5" cellspacing="0" border="1">
  <tr><td bgcolor="#eeeeee">
  <b>Java screen painting methodology</b><br />
  If you are unfamiliar with the callback mechanism that Java uses to cause the 
	screen to be repainted, go to Google and search for the following keywords.<p>
	baldwin java repaint</p>
	<p>This will expose numerous tutorials that I have written on the topic. 
</td></tr></table>
</td>
</tr>
</table>
<p><font color="#FF0000"><b>Get a Graphics object on the Picture</b></font></p>
<p>Then Listing 11 calls the <b>getGraphics</b> method on the <b>Picture</b> 
object to get a graphics object on which to draw the turtle.&nbsp;</p>
<p>Conceptually, 
you can think of the <b>Graphics</b> object as representing the portion of the 
screen that currently belongs to your program.&nbsp; Material that you draw on 
the <b>Graphics</b> object will appear on the screen.</p>
<p><b><font color="#FF0000">Call paintComponent method</font></b></p>
<p>Finally, Listing 11 calls the <b>paintComponent</b> method to control how the 
turtle or the line produced by the turtle's pen is displayed on the screen.&nbsp; 
I will have much more to say about the <b>paintComponent</b> method 
later.</p>
<p><font color="#FF0000">
<b>Update display for a world</b></font></p>
<p>The code in Listing 12 is executed for the case where the turtle has been 
added to a <b>World</b> object.</p>
<p>
<b><a name="Listing_12">Listing 12</a>. Update display for a world.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    else if (modelDisplay != null){
      if (xPos &gt;= modelDisplay.getWidth())
        xPos = modelDisplay.getWidth() - 1;
      if (yPos &gt;= modelDisplay.getHeight())
        yPos = modelDisplay.getHeight() - 1;
      modelDisplay.modelChanged();
    }//end else if
  }//end updateDisplay</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>As before, Listing 12 begins by guaranteeing that the position of the turtle 
is within the bounds of the world.</p>
<p><font color="#FF0000"><b>Make a callback to the world</b></font></p>
<p>Then, unlike the case in Listing 11, Listing 12 doesn't cause the turtle 
object to be repainted.&nbsp; Instead, Listing 12 calls the <b>modelChanged</b> 
method on the <b>World</b> object to notify the world that some aspect of the 
image of the turtle has changed.&nbsp; It is left up to the world object to 
decide whether or not to redraw the turtle at that point in time.</p>
<p>Either then, or sometime later, the world object causes the turtle's <b>
paintComponent</b> method to be called to cause it to be redrawn 
in its then-current configuration.</p>
<h4><a name="The_paintComponent_method">The paintComponent method</a></h4>
<p>The beginning of the <b>paintComponent</b> method is shown in 
Listing 13.</p>
<p>
<b><a name="Listing_13">Listing 13</a>. Beginning of the  
paintComponent method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
  public synchronized void paintComponent(Graphics g){
    Graphics2D g2 = (Graphics2D) g;

</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>This is arguably the most complex method in the entire <b>SimpleTurtle</b> 
class.</p>
<p>If you examine the code in this class and the class named <b>World</b>, you 
will find that every time the <b>paintComponent</b> method is called on a 
turtle, a reference to an object of type <b>Graphics</b> is passed as a 
parameter.&nbsp; <i>(Otherwise, a type mismatch error would occur.)</i>&nbsp; The <b>Graphics</b> object either represents the graphics 
context for an object of type <b>World</b> or the graphics context for an object 
of type <b>Picture</b>.&nbsp; <i>(See Listing 11 for example.)&nbsp; </i>As I 
described earlier, this <b>Graphics</b> object can be thought of as representing 
the object onto with material is to be drawn.</p>
<p><font color="#FF0000"><b>Cast the reference to type Graphics2D</b></font> </p>
<p>Listing 13 immediately casts the reference from type <b>Graphics</b> to type
<b>Graphics2D</b> and saves the reference in a variable named <b>g2</b>.&nbsp; 
What is this all about?&nbsp; For the whole story on this, see the thirteen 
lessons beginning with lesson number 300 in <a href="#Resources">Resources</a>.&nbsp; Briefly, however, the <b>Graphics2D</b> 
class is a subclass of the Graphics class, which provides enhanced drawing capability 
that is not provided by the <b>Graphics</b> class.</p>
<p>The reference that is received by the <b>paintComponent</b> method is 
actually 
a reference to an object of the <b>Graphics2D</b> class, but in order to 
maintain backward compatibility with legacy code, it is passed as type <b>
Graphics</b>.&nbsp; To access the expanded capability, you must cast a <b>
Graphics</b> reference to a <b>Graphics2D</b> reference before calling methods 
from the <b>Graphics2D</b> class on that reference.</p>
<p><font color="#FF0000"><b>What is an affine transform?</b></font></p>
<p>You will need to understand <i>affine transforms</i> to really understand the 
code that we are about to encounter.&nbsp; You can learn all about <i>affine 
transforms</i> in my earlier lesson titled <i>Java 2D Graphics, Simple Affine 
Transforms (see <a href="#Resources">Resources</a>)</i>.&nbsp; I'm not going to 
repeat that information here, but I will attempt to describe the use of an 
affine transform to draw the turtle in a specific position with a specific 
orientation.</p>
<p>Although Figure 1 shows the turtle facing due north, we will explore methods 
of the <b>SimpleTurtle</b> class later that make it possible to cause a turtle 
to face in any direction while being located anywhere inside the world or the 
picture.</p>
<p>As you will see shortly, the <b>paintComponent</b> method actually draws the turtle as a set of 
six overlapping filled ovals.&nbsp; The shell is a large filled oval while the 
legs are constructed of smaller filled ovals.&nbsp; Maybe it would make it 
easier to understand what is going on to think of the turtle as being 
constructed as a set of six overlapping filled rectangles with a large rectangle 
for the shell and five smaller rectangles for the head and legs.</p>
<p><font color="#FF0000"><b>How would you...?</b></font></p>
<p>The question is, how would you draw a rectangle for which the sides are not 
parallel to the horizontal and vertical axes?&nbsp; The answer is that you would 
probably do something like the following:</p>
<ul>
	<li>Pretend that the rectangle is located at the origin.</li>
	<li>Compute the four coordinate values for the corners that would be 
	required to draw a rectangle that is centered on the origin with the sides 
	parallel to the horizontal and vertical axes.</li>
<li>Use trigonometry to re-compute the coordinate values for the corners that would be required to 
draw the rectangle if it were rotated by a specified number of degrees around 
the origin.&nbsp; <i>(This is often called 
rotation.)</i></li>
	<li>Add appropriate x and y values to the coordinate values for the corners 
	to cause the rectangle to be located somewhere other than at the origin.&nbsp; 
	<i>(This is often called translation.)</i></li>
	<li>Draw <i>(potentially sloping)</i> straight lines to connect the corners, 
	resulting in an image that represents a rotated rectangle located somewhere 
	other than at the origin.</li>
</ul>
<p><font color="#FF0000"><b>This is a transform process</b></font></p>
<p>The process shown above is often called a <i>transform</i>.&nbsp; Although a 
lot more coordinate values must be dealt with to translate and rotate a filled 
oval than is required to translate and rotate a rectangle, the process is 
essentially the same regardless of the geometric shape.</p>
<p><font color="#FF0000"><b>Creating a transform</b></font></p>
<p>Using various methods of the <b>Graphics2D</b> class, you can create a <i>
transform</i> that will automatically be applied to all geometric shapes that 
you draw on a graphics context <i>(a Graphics2D object)</i>.&nbsp; In this case, 
we are interested in <i>translation</i> and <i>rotation</i> only, but you can also incorporate 
<i>scaling</i> and <i>shear</i> into the transform if needed.</p>
<p><font color="#FF0000"><b>A default affine transform</b></font></p>
<p>Every <b>Graphics2D</b> object contains an <b>AffineTransform</b> object that 
automatically performs the following operations whenever you draw on the object:</p>
<ul>
	<li>Scaling</li>
	<li>Translation</li>
	<li>Shear</li>
	<li>Rotation</li>
</ul>
<p>By default, the transform is a <i>&quot;do nothing&quot;</i> transform.&nbsp; In other words, 
by default, your drawing data is not scaled, translated, sheared, or rotated.&nbsp; 
However, if you need to do any of those operations, you can modify the default 
transform to perform any or all of them.&nbsp; In this case, we will modify the 
default transform to apply rotation and translation to the coordinate values that are used 
to draw the filled ovals that represent the turtle.</p>
<p><font color="#FF0000"><b>Is the turtle visible?</b></font></p>
<p>Most of the remaining code in the <b>paintComponent</b> method is executed 
only if the turtle is intended to be visible.&nbsp; However, as you will see 
later, the code required to draw the line produced by the pen is executed even 
if the turtle is invisible.</p>
<p><font color="#FF0000"><b>Modify the current transform</b></font></p>
<p>Listing 14 begins by getting and saving a reference to the affine transform that 
currently belongs to the graphics context.&nbsp; The transform will be restored 
to this value later before the <b>paintComponent</b> method returns.</p>
<p>
<b><a name="Listing_14">Listing 14</a>. Modify the current transform. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>    if (visible){//if the turtle is visible
      // save the current transform
      AffineTransform oldTransform = g2.getTransform();

      g2.rotate(Math.toRadians(heading),xPos,yPos);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Then Listing 14 calls the <b>rotate</b> method to cause the current transform 
to be modified to one that will apply a <i>rotation</i> equal to the number of degrees 
stored in the variable named <b>heading</b> and a <i>translation</i> to the 
current position of the turtle.&nbsp; Later on, we will see the 
methods that are called to cause the value stored in <b>heading</b> to change.&nbsp; 
For now, suffice it to say that this is an angle in degrees that specifies the 
direction that the turtle is facing.&nbsp; Therefore, it must be converted to 
radians in Listing 14 to satisfy the angle requirements of the <b>rotate</b> 
method.</p>
<p><font color="#FF0000">
<b>Rotate, translate, and draw ovals that represent the turtle</b></font></p>
<p>Having established the required rotation transform, Listing 15 draws six 
filled ovals for the shell, head, and legs of the turtle.</p>
<p>
<b><a name="Listing_15">Listing 15</a>. Rotate, translate, and draw ovals that represent 
the turtle. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
      // determine the half width and height of the shell
      int halfWidth = (int) (width/2); // of shell
      int halfHeight = (int) (height/2); // of shell
      int quarterWidth = (int) (width/4); // of shell
      int thirdHeight = (int) (height/3); // of shell
      int thirdWidth = (int) (width/3); // of shell

      // draw the body parts (head)
      g2.setColor(bodyColor);
      g2.fillOval(xPos - quarterWidth,
                  yPos - halfHeight - (int) (height/3),
                  halfWidth, thirdHeight);
      g2.fillOval(xPos - (2 * thirdWidth),
                  yPos - thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos - (int) (1.6 * thirdWidth),
                  yPos + thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos + (int) (1.3 * thirdWidth),
                  yPos - thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos + (int) (0.9 * thirdWidth),
                  yPos + thirdHeight,
                  thirdWidth,thirdHeight);

      // draw the shell
      g2.setColor(getShellColor());
      g2.fillOval(xPos - halfWidth,
                  yPos - halfHeight, width, height);
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The fillOval method</b></font></p>
<p>The calls to the <b>fillOval</b> method in Listing 15 assume that each oval 
is contained in a bounding rectangle whose sides are parallel to the horizontal 
and vertical axis.&nbsp; It is the affine transform that causes the ovals to be 
rotated, immediately prior to drawing, when rotation is required.</p>
<p>You will find the <b>fillOval</b> method in the <b>Graphics</b> class.&nbsp; 
I'm going to leave it up to you to use the documentation and analyze the code in 
Listing 15 to satisfy yourself that these six filled ovals will produce a <i>
(possibly rotated)</i> turtle that looks like the turtle shown in Figure 1.&nbsp;
<i>(As you may already have guessed, the calls to the setColor method establish 
the colors in which the different parts of the turtle will be drawn.)&nbsp; </i>
The color, width, and height variables used in the arithmetic are declared in 
Listing 4.</p>
<p><font color="#FF0000">
<b>Remainder of the paintComponent method</b></font></p>
<p>The remainder of the <b>paintComponent</b> method is shown in Listing 16.</p>
<p>
<b><a name="Listing_16">Listing 16</a>. Remainder of the paintComponent method. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      // draw the info string if the flag is true
      if (showInfo) drawInfoString(g2);

      // reset the transformation matrix
      g2.setTransform(oldTransform);
    }//end if

    //  draw the pen
    pen.paintComponent(g);
  }//end paintComponent</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in Listing 16 performs the following operations:</p>
<ul>
	<li>Calls the <b>drawInfoString</b> method to draw a text label next to the 
	turtle if the variable named <b>showInfo</b> is true.</li>
	<li>Restores the affine transform to the value that it had when the<b> 
	paintComponent </b>
	method 
	began execution.</li>
	<li>Calls the <b>paintComponent</b> method on a reference to a <b>Pen</b> 
	object to draw the trail left by the turtle during its journey. </li>
</ul>
<p>I will have more to say about the <b>paintComponent</b> method belonging to a <b>Pen</b> 
object in a future lesson.</p>
<p><font color="#FF0000"><b>It's time for a break</b></font></p>
<p>I don't know about you, but my brain is just about saturated at this point.&nbsp; 
I think it is time to call a halt to this lesson and to pick up with the 
remaining methods of the <b>SimpleTurtle</b> class in the next lesson.&nbsp; 
Fortunately, most of those methods will be somewhat easier to understand than the
<b>PaintComponent</b> method.</p>
<center>
<h2><a name="Run the program"></a>Run the program</h2>
</center>
<p>I encourage you to copy the code from Listing 17, compile 
the code, and execute it.&nbsp; Experiment with the code, making changes, and 
observing the results of your changes.&nbsp; Make certain that you can explain why 
your changes behave as they do.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I explained the behavior of the <b>Turtle</b> class, and 
partially explained the behavior of its superclass named <b>SimpleTurtle</b>.</p>
<p>I explained the purpose of a number of the instance and class variables that 
are declared in the <b>SimpleTurtle</b> class.&nbsp; I also 
explained all five overloaded constructors in the <b>SimpleTurtle</b> class.</p>
<p>The most complex method of more than 50 methods in the class is the method 
named <b>paintComponent</b>.</p>
<p>The <b>paintComponent</b> method and the other two methods in the 
following list are the methods that are primarily responsible for displaying a 
turtle and its pen on either a <b>World</b> object or a <b>Picture</b> object.&nbsp; 
Thus, these three methods are critical to the <b>SimpleTurtle</b> class.</p>
<ul>
	<li>updateDisplay()</li>
	<li>paintComponent(Graphics g)</li>
	<li><a name="drop">drop</a>(Picture dropPicture)</li>
</ul>
<p>I explained the <b>updateDisplay</b> method and the <b>paintComponent</b> 
method.</p>
<ul>
</ul>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>I will begin the next lesson with an explanation of the <a href="#drop">drop</a> 
method.&nbsp; Then I will explain another fundamental group of methods, which includes the methods that cause a turtle 
to face in a particular direction.&nbsp; That group includes the 
following methods:</p>
<ul>
	<li>turn(int degrees)</li>
	<li>turnLeft()</li>
	<li>turnRight()</li>
	<li>turnToFace(int x,int y)</li>
	<li>turnToFace(SimpleTurtle turtle)</li>
</ul>
<p>After that, I will probably explain the methods that are used to cause a 
turtle to move around in a world or a picture.&nbsp; This includes the following 
methods:</p>
<ul>
	<li>forward()</li>
	<li>forward(int pixels)</li>
	<li>backward()</li>
	<li>backward(int pixels)</li>
	<li>moveTo(int x,int y)</li>
</ul>
<p>It remains to be seen where I will go from there.</p>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a rel="license" href="http://creativecommons.org/licenses/by/3.0/us/">
	Creative Commons Attribution 3.0 United States License</a></li>
	<li><a href="http://coweb.cc.gatech.edu/mediaComp-plan/101">Media 
	Computation book in Java</a> - numerous downloads available</li>
	<li>
	<a href="http://www.mypearsonstore.com/bookstore/product.asp?isbn=0131496980">
	Introduction to Computing and Programming with Java: A Multimedia Approach</a></li>
	<li><a href="http://drjava.sourceforge.net/">DrJava</a> download site</li>
	<li><a href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava, the JavaPLT 
	group at Rice University</a></li>
	<li><a href="http://www.cs.rice.edu/~javaplt/drjava/">DrJava Open Source 
	License</a></li>
	<li><a href="http://www.developer.com/java/article.php/1440571">The Essence 
	of OOP using Java, The this and super Keywords</a></li>
	<li><font color="#000000">
	<a href="http://www.dickbaldwin.com/java/Java058.htm">Threads of Control</a></font></li>
	<li><a href="http://www.dickbaldwin.com/java/Java300.htm">300</a> Java 2D 
	Graphics, Nested Top-Level Classes and Interfaces</li>
	<li><a href="http://www.dickbaldwin.com/java/Java302.htm">302</a> Java 2D 
	Graphics, The Point2D Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java304.htm">304</a> Java 2D 
	Graphics, The Graphics2D Class</li>
	<li><a href="http://www.dickbaldwin.com/java/Java306.htm">306</a> Java 2D 
	Graphics, Simple Affine Transforms</li>
	<li><a href="http://www.dickbaldwin.com/java/Java308.htm">308</a> Java 2D 
	Graphics, The Shape Interface, Part 1</li>
	<li><a href="http://www.dickbaldwin.com/java/Java310.htm">310</a> Java 2D 
	Graphics, The Shape Interface, Part 2</li>
	<li><a href="http://www.dickbaldwin.com/java/Java312.htm">312</a> Java 2D 
	Graphics, Solid Color Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java314.htm">314</a> Java 2D 
	Graphics, Gradient Color Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java316.htm">316</a> Java 2D 
	Graphics, Texture Fill</li>
	<li><a href="http://www.dickbaldwin.com/java/Java318.htm">318</a> Java 2D 
	Graphics, The Stroke Interface</li>
	<li><a href="http://www.dickbaldwin.com/java/Java320.htm">320</a> Java 2D 
	Graphics, The Composite Interface and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java322.htm">322</a> Java 2D 
	Graphics, The Composite Interface, GradientPaint, and Transparency</li>
	<li><a href="http://www.dickbaldwin.com/java/Java324.htm">324</a> Java 2D 
	Graphics, The Color Constructors and Transparency</li>
	<li><a href="http://www.developer.com/java/other/article.php/3782471">340</a> Multimedia Programming with Java, Getting Started</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listings</h2>
</center>
Complete listings of the programs discussed in this lesson are shown in Listing 
17 through Listing 19 below.
<p>
<b><a name="Listing_17">Listing 17</a>. Source code for the program named StartupTest01. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>
/**
 *StartupTest01
 * The purpose of this program is to test such items as
 * the classpath, the media path, etc.
 *
 * 10/10/08 Compiles and runs OK on my laptop computer.
 *
 * Displays a turtle in a world and moves it forward by
 * 100 pixels.
 * 
 * Note that the program does not terminate when you
 * click the X button in the frame.
 *
 * Based on a program by Barbara Ericson that is:
 * Copyright Georgia Institute of Technology 2004-2005
 */
public class Main{
  public static void main(String[] args){
    World mars = new World(200,300);
    Turtle joe = new Turtle(mars);
    joe.forward();
  }//end main

}//end class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_18">Listing 18</a>. The multimedia library class named Turtle. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/**
 * Class that represents a turtle which is similar to a
 * Logo turtle.
 * This class inherits from SimpleTurtle and is for
 * students to add methods to.
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class Turtle extends SimpleTurtle{
  ////////////////// constructors ///////////////////////

  /** Constructor that takes the x and y and a picture to
   * draw on
   * @param x the starting x position
   * @param y the starting y position
   * @param picture the picture to draw on
   */
  public Turtle (int x, int y, Picture picture){
    // let the parent constructor handle it
    super(x,y,picture);
  }

  /** Constructor that takes the x and y and a model
   * display to draw it on
   * @param x the starting x position
   * @param y the starting y position
   * @param modelDisplayer the thing that displays the
   * model
   */
  public Turtle(int x,int y,ModelDisplay modelDisplayer){
    // let the parent constructor handle it
    super(x,y,modelDisplayer);
  }

  /** Constructor that takes the model display
   * @param modelDisplay the thing that displays the model
   */
  public Turtle (ModelDisplay modelDisplay){
    // let the parent constructor handle it
    super(modelDisplay);
  }

  /**
   * Constructor that takes a picture to draw on
   * @param p the picture to draw on
   */
  public Turtle (Picture p){
    // let the parent constructor handle it
    super(p);
  }

  /////////////////// methods ///////////////////////


}
//This is the end of class Turtle, put all new methods
// before this</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp;</p>
<p>
<b><a name="Listing_19">Listing 19</a>. The multimedia library class named SimpleTurtle.
</b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>import javax.swing.*;
import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.util.Observer;
import java.util.Random;

/**
 * Class that represents a Logo-style turtle.  The turtle
 * starts off facing north.
 * A turtle can have a name, has a starting x and y
 * position, has a heading, has a width, has a height,
 * has a visible flag, has a body color, can have a shell
 * color, and has a pen.
 * The turtle will not go beyond the model display or
 * picture boundaries.
 *
 * You can display this turtle in either a picture or in
 * a class that implements ModelDisplay.
 *
 * Copyright Georgia Institute of Technology 2004
 * @author Barb Ericson ericson@cc.gatech.edu
 */
public class SimpleTurtle{
  ///////////////// fields ////////////////////////

  /** count of the number of turtles created */
  private static int numTurtles = 0;

  /** array of colors to use for the turtles */
  private static Color[] colorArray = {Color.green,
              Color.cyan,new Color(204,0,204),Color.gray};

  /** who to notify about changes to this turtle */
  private ModelDisplay modelDisplay = null;

  /** picture to draw this turtle on */
  private Picture picture = null;

  /** width of turtle in pixels */
  private int width = 15;

  /** height of turtle in pixels */
  private int height = 18;

  /** current location in x (center) */
  private int xPos = 0;

  /** current location in y (center) */
  private int yPos = 0;

  /** heading angle */
  private double heading = 0;  // default is facing north

  /** pen to use for this turtle */
  private Pen pen = new Pen();

  /** color to draw the body in */
  private Color bodyColor = null;

  /** color to draw the shell in */
  private Color shellColor = null;

  /** color of information string */
  private Color infoColor = Color.black;

  /** flag to say if this turtle is visible */
  private boolean visible = true;

  /** flag to say if should show turtle info */
  private boolean showInfo = false;

  /** the name of this turtle */
  private String name = "No name";

  ////////////////// constructors ///////////////////

  /**
   * Constructor that takes the x and y position for the
   * turtle
   * @param x the x pos
   * @param y the y pos
   */
  public SimpleTurtle(int x, int y){
    xPos = x;
    yPos = y;
    bodyColor =
               colorArray[numTurtles % colorArray.length];
    setPenColor(bodyColor);
    numTurtles++;
  }//end constructor

  /**
   * Constructor that takes the x and y position and the
   * model displayer
   * @param x the x pos
   * @param y the y pos
   * @param display the model display
   */
  public SimpleTurtle(int x, int y, ModelDisplay display){
    this(x,y); // invoke constructor that takes x and y
    modelDisplay = display;
    display.addModel(this);
  }//end constructor

  /**
   * Constructor that takes a model display and adds
   * a turtle in the middle of it
   * @param display the model display
   */
  public SimpleTurtle(ModelDisplay display){
    // invoke constructor that takes x and y
    this((int) (display.getWidth() / 2),
         (int) (display.getHeight() / 2));
    modelDisplay = display;
    display.addModel(this);
  }//end constructor

  /**
   * Constructor that takes the x and y position and the
   * picture to draw on
   * @param x the x pos
   * @param y the y pos
   * @param picture the picture to draw on
   */
  public SimpleTurtle(int x, int y, Picture picture){
    this(x,y); // invoke constructor that takes x and y
    this.picture = picture;
    this.visible = false;//default is not to see turtle
  }//end constructor

  /**
   * Constructor that takes the
   * picture to draw on and will appear in the middle
   * @param picture the picture to draw on
   */
  public SimpleTurtle(Picture picture){
    // invoke constructor that takes x and y
    this((int) (picture.getWidth() / 2),
         (int) (picture.getHeight() / 2));
    this.picture = picture;
    this.visible = false;//default is not to see turtle
  }//end constructor

  //////////////////// methods /////////////////////////

  /**
   * Get the distance from the passed x and y location
   * @param x the x location
   * @param y the y location
   */
  public double getDistance(int x, int y){
    int xDiff = x - xPos;
    int yDiff = y - yPos;
    return (Math.sqrt((xDiff * xDiff) + (yDiff * yDiff)));
  }//end getDistance

  /**
   * Method to turn to face another simple turtle
   */
  public void turnToFace(SimpleTurtle turtle){
    turnToFace(turtle.xPos,turtle.yPos);
  }//turnToFace

   /**
   * Method to turn towards the given x and y
   * @param x the x to turn towards
   * @param y the y to turn towards
   */
  public void turnToFace(int x, int y){
    double dx = x - this.xPos;
    double dy = y - this.yPos;
    double arcTan = 0.0;
    double angle = 0.0;

    // avoid a divide by 0
    if (dx == 0){
      // if below the current turtle
      if (dy &gt; 0) heading = 180;

      // if above the current turtle
      else if (dy &lt; 0) heading = 0;
    }
    // dx isn't 0 so can divide by it
    else{
      arcTan = Math.toDegrees(Math.atan(dy/dx));
      if (dx &lt; 0) heading = arcTan - 90;
      else heading = arcTan + 90;
    }//end else

    // notify the display that we need to repaint
    updateDisplay();
  }//end turnToFace

  /**
   * Method to get the picture for this simple turtle
   * @return the picture for this turtle (may be null)
   */
  public Picture getPicture() { return this.picture; }

  /**
   * Method to set the picture for this simple turtle
   * @param pict the picture to use
   */
  public void setPicture(Picture pict){
    this.picture = pict;
  }//end setPicture

  /**
   * Method to get the model display for this simple
   * turtle.
   * @return the model display if there is one else null
   */
  public ModelDisplay getModelDisplay(){
    return this.modelDisplay;
  }//end getModelDisplay

  /**
   * Method to set the model display for this simple
   * turtle.
   * @param theModelDisplay the model display to use
   */
  public void setModelDisplay(
                            ModelDisplay theModelDisplay){
    this.modelDisplay = theModelDisplay;
  }//end setModelDisplay

  /**
   * Method to get value of show info
   * @return true if should show info, else false
   */
  public boolean getShowInfo(){return this.showInfo;}

  /**
   * Method to show the turtle information string
   * @param value the value to set showInfo to
   */
  public void setShowInfo(boolean value){
    this.showInfo = value;
  }//end setShowInfo

  /**
   * Method to get the shell color
   * @return the shell color
   */
  public Color getShellColor(){
    Color color = null;
    if(this.shellColor == null && this.bodyColor != null)
      color = bodyColor.darker();
    else color = this.shellColor;
    return color;
  }//end getShellColor

  /**
   * Method to set the shell color
   * @param color the color to use
   */
  public void setShellColor(Color color){
    this.shellColor = color;
  }//setShellColor

  /**
   * Method to get the body color
   * @return the body color
   */
  public Color getBodyColor(){return this.bodyColor;}

  /**
   * Method to set the body color which
   * will also set the pen color
   * @param color the color to use
   */
  public void setBodyColor(Color color){
    this.bodyColor = color;
    setPenColor(this.bodyColor);
  }//end setBodyColor

  /**
   * Method to set the color of the turtle.
   * This will set the body color
   * @param color the color to use
   */
  public void setColor(Color color){
    this.setBodyColor(color);
  }//end setColor

  /**
   * Method to get the information color
   * @return the color of the information string
   */
  public Color getInfoColor(){return this.infoColor;}

  /**
   * Method to set the information color
   * @param color the new color to use
   */
  public void setInfoColor(Color color){
    this.infoColor = color;
  }//setInfoColor

  /**
   * Method to return the width of this object
   * @return the width in pixels
   */
  public int getWidth(){return this.width;}

  /**
   * Method to return the height of this object
   * @return the height in pixels
   */
  public int getHeight(){return this.height;}

  /**
   * Method to set the width of this object
   * @param theWidth in width in pixels
   */
  public void setWidth(int theWidth){
    this.width = theWidth;
  }//end setWidth

  /**
   * Method to set the height of this object
   * @param theHeight the height in pixels
   */
  public void setHeight(int theHeight){
    this.height = theHeight;
  }//end setHeight

  /**
   * Method to get the current x position
   * @return the x position (in pixels)
   */
  public int getXPos(){return this.xPos;}

  /**
   * Method to get the current y position
   * @return the y position (in pixels)
   */
  public int getYPos(){return this.yPos;}

  /**
   * Method to get the pen
   * @return the pen
   */
  public Pen getPen(){return this.pen;}

  /**
   * Method to set the pen
   * @param thePen the new pen to use
   */
  public void setPen(Pen thePen){this.pen = thePen;}

  /**
   * Method to check if the pen is down
   * @return true if down else false
   */
  public boolean isPenDown(){return this.pen.isPenDown();}

  /**
   * Method to set the pen down boolean variable
   * @param value the value to set it to
   */
  public void setPenDown(boolean value){
    this.pen.setPenDown(value);
  }//end setPenDown

  /**
   * Method to lift the pen up
   */
  public void penUp(){this.pen.setPenDown(false);}

  /**
   * Method to set the pen down
   */
  public void penDown(){this.pen.setPenDown(true);}

  /**
   * Method to get the pen color
   * @return the pen color
   */
  public Color getPenColor(){return this.pen.getColor();}

  /**
   * Method to set the pen color
   * @param color the color for the pen ink
   */
  public void setPenColor(Color color){
    this.pen.setColor(color);
  }//end setPenColor

  /**
   * Method to set the pen width
   * @param width the width to use in pixels
   */
  public void setPenWidth(int width){
    this.pen.setWidth(width);
  }//end setPenWidth

  /**
   * Method to get the pen width
   * @return the width of the pen in pixels
   */
  public int getPenWidth(){return this.pen.getWidth();}

  /**
   * Method to clear the path (history of
   * where the turtle has been)
   */
  public void clearPath(){
    this.pen.clearPath();
  }//end clearPath

  /**
   * Method to get the current heading
   * @return the heading in degrees
   */
  public double getHeading(){return this.heading;}

  /**
   * Method to set the heading
   * @param heading the new heading to use
   */
  public void setHeading(double heading){
    this.heading = heading;
  }//end setHeading

  /**
   * Method to get the name of the turtle
   * @return the name of this turtle
   */
  public String getName(){return this.name;}

  /**
   * Method to set the name of the turtle
   * @param theName the new name to use
   */
  public void setName(String theName){
    this.name = theName;
  }//end setName

  /**
   * Method to get the value of the visible flag
   * @return true if visible else false
   */
  public boolean isVisible(){return this.visible;}

  /**
   * Method to hide the turtle (stop showing it)
   * This doesn't affect the pen status
   */
  public void hide(){this.setVisible(false);}

  /**
   * Method to show the turtle (doesn't affect
   * the pen status
   */
  public void show(){this.setVisible(true);}

  /**
   * Method to set the visible flag
   * @param value the value to set it to
   */
  public void setVisible(boolean value){
    // if the turtle wasn't visible and now is
    if (visible == false && value == true){
      // update the display
      this.updateDisplay();
    }//end if

    // set the visibile flag to the passed value
    this.visible = value;
  }//end setVisible

  /**
   * Method to update the display of this turtle and
   * also check that the turtle is in the bounds
   */
  public synchronized void updateDisplay(){
    // check that x and y are at least 0
    if (xPos &lt; 0) xPos = 0;
    if (yPos &lt; 0) yPos = 0;

    // if picture
    if (picture != null){
      if (xPos &gt;= picture.getWidth())
        xPos = picture.getWidth() - 1;
      if (yPos &gt;= picture.getHeight())
        yPos = picture.getHeight() - 1;
      Graphics g = picture.getGraphics();
      paintComponent(g);
    }//end if
    else if (modelDisplay != null){
      if (xPos &gt;= modelDisplay.getWidth())
        xPos = modelDisplay.getWidth() - 1;
      if (yPos &gt;= modelDisplay.getHeight())
        yPos = modelDisplay.getHeight() - 1;
      modelDisplay.modelChanged();
    }//end else if
  }//end updateDisplay

  /**
   * Method to move the turtle foward 100 pixels
   */
  public void forward(){forward(100);}

  /**
   * Method to move the turtle forward the given number
   * of pixels
   * @param pixels the number of pixels to walk forward in
   * the heading direction
   */
  public void forward(int pixels){
    int oldX = xPos;
    int oldY = yPos;

    // change the current position
    xPos = oldX + (int)(pixels * Math.sin(Math.toRadians(
                                               heading)));
    yPos = oldY + (int)(pixels * -Math.cos(Math.toRadians(
                                               heading)));

    // add a move from the old position to the new
    // position to the pen
    pen.addMove(oldX,oldY,xPos,yPos);

    // update the display to show the new line
    updateDisplay();
  }//end forward

  /**
   * Method to go backward by 100 pixels
   */
  public void backward(){backward(100);}

  /**
   * Method to go backward a given number of pixels
   * @param pixels the number of pixels to walk backward
   */
  public void backward(int pixels){
    forward(-pixels);
  }//end backward

  /**
   * Method to move to turtle to the given x and y
   * location
   * @param x the x value to move to
   * @param y the y value to move to
   */
  public void moveTo(int x, int y){
    this.pen.addMove(xPos,yPos,x,y);
    this.xPos = x;
    this.yPos = y;
    this.updateDisplay();
  }//end moveTo

  /**
   * Method to turn left
   */
  public void turnLeft(){this.turn(-90);}

  /**
   * Method to turn right
   */
  public void turnRight(){this.turn(90);}

  /**
   * Method to turn the turtle the passed degrees
   * use negative to turn left and pos to turn right
   * @param degrees the amount to turn in degrees
   */
  public void turn(int degrees){
    this.heading = (heading + degrees) % 360;
    this.updateDisplay();
  }//end turn

  /**
   * Method to draw a passed picture at the current turtle
   * location and rotation in a picture or model display
   * @param dropPicture the picture to drop
   */
  public synchronized void drop(Picture dropPicture){
    Graphics2D g2 = null;

    // only do this if drawing on a picture
    if (picture != null)
      g2 = (Graphics2D) picture.getGraphics();
    else if (modelDisplay != null)
      g2 = (Graphics2D) modelDisplay.getGraphics();

    // if g2 isn't null
    if (g2 != null){

      // save the current tranform
      AffineTransform oldTransform = g2.getTransform();

      // rotate to turtle heading and translate to xPos
      // and yPos
      g2.rotate(Math.toRadians(heading),xPos,yPos);

      // draw the passed picture
      g2.drawImage(dropPicture.getImage(),xPos,yPos,null);

      // reset the tranformation matrix
      g2.setTransform(oldTransform);

      //  draw the pen
      pen.paintComponent(g2);
    }
  }//end drop

  /**
   * Method to paint the turtle
   * @param g the graphics context to paint on
   */
  public synchronized void paintComponent(Graphics g){
    // cast to 2d object
    Graphics2D g2 = (Graphics2D) g;

    // if the turtle is visible
    if (visible){
      // save the current tranform
      AffineTransform oldTransform = g2.getTransform();

      // rotate the turtle and translate to xPos and yPos
      g2.rotate(Math.toRadians(heading),xPos,yPos);

      // determine the half width and height of the shell
      int halfWidth = (int) (width/2); // of shell
      int halfHeight = (int) (height/2); // of shell
      int quarterWidth = (int) (width/4); // of shell
      int thirdHeight = (int) (height/3); // of shell
      int thirdWidth = (int) (width/3); // of shell

      // draw the body parts (head)
      g2.setColor(bodyColor);
      g2.fillOval(xPos - quarterWidth,
                  yPos - halfHeight - (int) (height/3),
                  halfWidth, thirdHeight);
      g2.fillOval(xPos - (2 * thirdWidth),
                  yPos - thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos - (int) (1.6 * thirdWidth),
                  yPos + thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos + (int) (1.3 * thirdWidth),
                  yPos - thirdHeight,
                  thirdWidth,thirdHeight);
      g2.fillOval(xPos + (int) (0.9 * thirdWidth),
                  yPos + thirdHeight,
                  thirdWidth,thirdHeight);

      // draw the shell
      g2.setColor(getShellColor());
      g2.fillOval(xPos - halfWidth,
                  yPos - halfHeight, width, height);

      // draw the info string if the flag is true
      if (showInfo) drawInfoString(g2);

      // reset the tranformation matrix
      g2.setTransform(oldTransform);
    }//end if

    //  draw the pen
    pen.paintComponent(g);
  }//end paintComponent

  /**
   * Method to draw the information string
   * @param g the graphics context
   */
  public synchronized void drawInfoString(Graphics g){
    g.setColor(infoColor);
    g.drawString(
             this.toString(),xPos + (int) (width/2),yPos);
  }//end drawInfoString

  /**
   * Method to return a string with information
   * about this turtle
   * @return a string with information about this object
   */
  public String toString(){
    return this.name + " turtle at " + this.xPos + ", " +
      this.yPos + " heading " + this.heading + ".";
  }//end toString

} // end of class</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>&nbsp; </p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2008, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is object-oriented programming using Java and 
other OOP languages.</i><p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p>-end- </p>
</font>
</body>
</html>
