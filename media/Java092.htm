<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft Word 97">
<TITLE>... in Java by Richard G Baldwin</TITLE>
<META NAME="Template" CONTENT="C:\PROGRAM FILES\MSOFFICE\OFFICE\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<P><!--start--></P>
<I><H3 ALIGN="CENTER">Richard G Baldwin (512) 223-4758, </I><A HREF="mailto:baldwin@austin.cc.tx.us"><I>baldwin@austin.cc.tx.us</I></A><I>, </I><A HREF="http://www2.austin.cc.tx.us/baldwin/"><I>http://www2.austin.cc.tx.us/baldwin/</I></A></H3>
<H2 ALIGN="CENTER"><!--title-->Event Handling in JDK 1.1, MouseMotion Events<!--endtitle--></H2>
<P>Java Programming, Lecture Notes # 92, Revised 02/24/99. </P>

<UL>
<LI><A HREF="#preface">Preface</A> </LI>
<LI><A HREF="#introduction">Introduction</A> </LI>
<LI><A HREF="#overview">Overview</A> </LI>
<LI><A HREF="#the_sample_program">The Sample Program</A> </LI>

<UL>
<LI><A HREF="#discussion">Discussion</A> </LI>
<LI><A HREF="#program_listing">Program Listing</A></LI></UL>

<LI><A HREF="#review">Review</A></LI></UL>

<P><HR></P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="preface"></A>Preface</H2>
</FONT><P>Students in Prof. Baldwin's <B><U>Intermediate Java Programming</B></U> classes at ACC are responsible for knowing and understanding all of the material in this lesson. </P>
<P>On 2/24/99, the sample program in this lesson was confirmed to operate properly under JDK 1.2.</P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="introduction"></A>Introduction</H2>
</FONT><P>JDK 1.1 was formally released on February 18, 1997. This lesson was originally written on February 21, 1997 using the software in JDK 1.1. A number of potential bugs in the <B>MouseMotion </B>capability of JDK 1.1 for Win95 were identified at that time. </P>
<P>This lesson, and the example program, were completely rewritten in September of 1997 based on JDK 1.1.3 for Win95. As you will see, although the system seems to be much cleaner now, there appear to be a couple of remaining bugs having to do with the very rapid generation of <B>MouseMotion </B>events. When these events are generated rapidly and randomly over an extended period of time, they suddenly cease to be generated. Whether or not this is a problem depends on the application. </P>
<P>When we discussed mouse events in an earlier lesson, we didn't take into account that there are actually <U>two different</U> mouse interfaces: </P>

<UL>
<LI>MouseListener </LI>
<LI>MouseMotionListener</LI></UL>

<P>In that lesson, we only discussed the implementation of methods in the <B>MouseListener </B>interface. </P>
<P>In this lesson, we will also implement the <B>mouseDragged()</B> and the <B>mouseMoved()</B> methods in the <B>MouseMotionListener </B>interface to implement a program which can move a <B>Label </B>object on a <B>Panel </B>object by dragging the <B>Label </B>object with the mouse. </P>
<P>This lesson is not intended to be a polished demonstration of drag-and-drop. Rather, it is intended only to illustrate how to instantiate, register, listen for, and use events declared in the methods of the <B>MouseMotionListener </B>interface. </P>
<P>This lesson will also make use of the <B>mousePressed()</B> method of the <B>MouseListener </B>interface. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="overview"></A>Overview</H2>
</FONT><P>The <B>MouseMotionListener </B>interface declares two methods: <BR>
&nbsp; </P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">

<UL>
<LI><TT>public abstract void mouseDragged(MouseEvent e)</TT>&nbsp; </LI>
<TT><LI>public abstract void mouseMoved(MouseEvent e)</TT>&nbsp;</UL>
</TD>
</TR>
</TABLE>
</CENTER></P>

<P>The <B>mouseDragged() </B>method is invoked when a mouse button is <U>pressed on a component and then dragged</U>. </P>
<P>According to the documentation, mouse drag events will <U>continue to be delivered</U> to the component where they first originated until the mouse button is released (<U>regardless</U> of whether the mouse position is within the bounds of the component). </P>
<P>However, by disabling the code in the following sample program that moves the Label object, and observing the printed output on the screen, it can be seen that mouse drag events <U>cease to be generated</U> as soon as the mouse leaves the boundaries of the object for which the listener was registered. Furthermore, moving the mouse back inside the boundaries of the object <U>does not cause</U> mouse drag events to resume until the mouse button is released and pressed again. </P>
<P>It is unclear at this time whether this is a bug, a documentation error, or simply a misinterpretation of the documentation on the part of this author. </P>
<P>The <B>mouseMoved() </B>method is invoked when the mouse is moved on a component (with no buttons down). A <B>System.out.println()</B> statement in the <B>mouseMoved()</B> method in the following program indicates that a stream of events is generated when the mouse is moved inside the label and the events stop being generated when the mouse leaves the label. The stream of events resumes when the mouse re-enters the label. </P>
<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="the_sample_program"></A>The Sample Program</H2>
</FONT><P>This section will present a short discussion of the program followed by the program listing. </P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="discussion"></A>Discussion</H3>
</FONT><P>The program illustrates the <B>mouseDragged() </B>event used in conjunction with the <B>mousePressed()</B>. </P>
<P>The program uses a combination of <B>mousePressed() </B>and <B>mouseDragged()</B> events to implement a <U>crude</U> form of <I>Drag-and-Drop</I>. </P>
<P>A yellow Label is placed on a <B>Panel, </B>which is placed in a <B>Frame</B>. </P>
<P>A <B>MouseListener </B>object and a <B>MouseMotionListener </B>object are <U>instantiated and registered</U> to receive mouse events on the <B>Label </B>object. </P>
<P>The user can drag the <B>Label </B>object by dragging the mouse <U>internal to</U> the <B>Label </B>object. The algorithm which uses the information provided by a <B>mousePressed()</B> event and the <B>mouseDragged() </B>events to drag the <B>Label</B> object on the screen is explained in the comments in the program. </P>
<P>The purpose of this program is simply to demonstrate the use of the <B>MouseMotionListener </B>interface as compared to the <B>MouseListener </B>interface. It is <U>not intended</U> to be a polished <I>Drag-and-Drop</I> program. </P>
<P>The program also produces <U>screen output</U> showing the stream of events produced by the <B>mouseDragged()</B> and <B>mouseMoved()</B> methods. By viewing this output while moving or dragging the mouse, you can get an idea of how the event-handling system is behaving. </P>
<P>Finally, a <B>WindowListener </B>object is instantiated and registered to terminate the program when the user closes the Frame object. </P>
<P>These results were produced using JDK 1.1.3 running under Windows 95.</P>
<FONT COLOR="#ff0000"><H3 ALIGN="CENTER"><A NAME="program_listing"></A>Program Listing</H3>
</FONT><P>A listing of the program with additional comments follows: <BR>
&nbsp; </P>
<P ALIGN="CENTER"><CENTER><TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE>/*File Event21A.java Copyright 1997, R.G.Baldwin
This program is designed to be compiled and run&nbsp;
under JDK 1.1.3

The program illustrates the mouseDragged event used in
conjunction with the mousePressed() event to drag a label
object on a Panel object within a Frame object in a
crude form of Drag-and-Drop.

The program also illustrates the mouseMoved event by
displaying the contents of the object passed as a parameter
to the event when the mouse is moved within the label
without pressing a mouse button.

A yellow Label is placed on a Panel which is placed in a&nbsp;
Frame.

A MouseListener object and a MouseMotionListener object are
instantiated and registered to receive mouse events on the&nbsp;
Label object.

The user can drag the yellow Label object by dragging the&nbsp;
mouse internal to the Label object.

Comments within the code explain the algorithm which uses
the information provided by the mousePressed and mouseDragged
events to move the label object.

The purpose of this program is simply to demonstrate the&nbsp;
use of the MouseMotionListener interface as compared to the
MouseListener interface.&nbsp; It is not intended to be a&nbsp;
polished Drag-and-Drop program.&nbsp;&nbsp;

Finally, a WindowListener object is instantiated and&nbsp;
registered to terminate the program when the user closes&nbsp;
the Frame object.

These results were produced using JDK 1.1.3 running under&nbsp;
Windows 95.

<B>Possible bugs</B> in JDK 1.1.3 for Win 95 relative to the
mouseDragged and mouseMoved events are described by&nbsp;
comments in the code.&nbsp; Briefly, when the mouse is moved
in such a manner as to cause a large number of such events
to be generated over an extended period, the system&nbsp;
simply stops generating events.
*/
//=========================================================

import java.awt.*;
import java.awt.event.*;

public class Event21A {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class Event21A
//=========================================================

class GUI {
&nbsp; Label myLabel;//reference variables passed as parameters
&nbsp; LabelInfo myLabelInfo;
&nbsp; int initialX = 50; //initial location of the label object
&nbsp; int initialY = 25;

&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create visual components
&nbsp;&nbsp;&nbsp; myLabel = new Label("LabelObject");//create a label
&nbsp;&nbsp;&nbsp; myLabel.setBackground(Color.yellow);//make it yellow

&nbsp;&nbsp;&nbsp; //create a panel to place the panel on
&nbsp;&nbsp;&nbsp; Panel myPanel = new Panel();&nbsp;
&nbsp;&nbsp;&nbsp; myPanel.setLayout(null); //no layout manager wanted
&nbsp;&nbsp;&nbsp; myPanel.add(myLabel); //place the label on the panel
&nbsp;&nbsp;&nbsp; //Adjust x,y,width &amp; height
&nbsp;&nbsp;&nbsp; myLabel.setBounds(initialX,initialY,125,100);&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Frame myFrame = new Frame();//frame to contain it all
&nbsp;&nbsp;&nbsp; myFrame.setSize(600,600);
&nbsp;&nbsp;&nbsp; myFrame.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; myFrame.add("Center",myPanel); //place panel in frame
&nbsp;&nbsp;&nbsp; myFrame.setVisible(true);//make it all visible

&nbsp;&nbsp;&nbsp; //Create object to maintain info about the label
&nbsp;&nbsp;&nbsp; // while it is being dragged about.
&nbsp;&nbsp;&nbsp; myLabelInfo = new LabelInfo();
&nbsp;&nbsp;&nbsp; myLabelInfo.labelX = initialX;
&nbsp;&nbsp;&nbsp; myLabelInfo.labelY = initialY;

&nbsp;&nbsp;&nbsp; //Instantiate and register MouseListener&nbsp;
&nbsp;&nbsp;&nbsp; // and MouseMotionListener&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; myLabel.addMouseMotionListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMouseMotionProcessor(myLabelInfo,myLabel));
&nbsp;&nbsp;&nbsp; myLabel.addMouseListener(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMouseProcessor(myLabelInfo,myLabel));

&nbsp;&nbsp;&nbsp; //Instantiate and register a WindowListener object&nbsp;
&nbsp;&nbsp;&nbsp; // which will terminate the program when the user&nbsp;
&nbsp;&nbsp;&nbsp; // closes the Frame object
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame.addWindowListener(winProcCmd1);
&nbsp; }//end constructor
}//end class GUI definition
//=========================================================

//This is a simple wrapper class used to maintain info for
// several position parameters used while dragging the&nbsp;
// label object.

class LabelInfo{
&nbsp; int labelX;
&nbsp; int labelY;
&nbsp; int mousePressedX;
&nbsp; int mousePressedY;
&nbsp; int mouseDraggedX;
&nbsp; int mouseDraggedY;
}//end class LabelInfo

//=========================================================

//This class recognizes mousePressed().&nbsp; This method is&nbsp;
// used to determine the starting position of the mouse
// pointer.
class MyMouseProcessor extends MouseAdapter{
&nbsp; LabelInfo theLabelInfo;
&nbsp; Label theLabel;
&nbsp;&nbsp;
&nbsp; //Constructor
&nbsp; MyMouseProcessor(LabelInfo inLabelInfo, Label inLabel){
&nbsp;&nbsp;&nbsp; //save references to the input objects
&nbsp;&nbsp;&nbsp; theLabelInfo = inLabelInfo;
&nbsp;&nbsp;&nbsp; theLabel = inLabel;
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void mousePressed(MouseEvent e){
&nbsp;&nbsp;&nbsp; //save starting position of mouse pointer
&nbsp;&nbsp;&nbsp; theLabelInfo.mousePressedX = e.getX();
&nbsp;&nbsp;&nbsp; theLabelInfo.mousePressedY = e.getY();
&nbsp; }//end mousePressed()

}//end MyMouseProcessor

//=======================================================
class MyMouseMotionProcessor extends MouseMotionAdapter{
&nbsp; LabelInfo theLabelInfo;
&nbsp; Label theLabel;

&nbsp; //Constructor&nbsp;&nbsp;
&nbsp; MyMouseMotionProcessor(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LabelInfo inLabelInfo, Label inLabel){
&nbsp;&nbsp;&nbsp; //save incoming object reference
&nbsp;&nbsp;&nbsp; theLabelInfo = inLabelInfo;
&nbsp;&nbsp;&nbsp; theLabel = inLabel;
&nbsp; }// end constructor
&nbsp;&nbsp;
&nbsp; public void mouseDragged(MouseEvent e){
&nbsp;&nbsp;&nbsp; System.out.println("Drag = " + e);
&nbsp;&nbsp;&nbsp; //Save mouse coordinates during the drag operation.
&nbsp;&nbsp;&nbsp; theLabelInfo.mouseDraggedX = e.getX();
&nbsp;&nbsp;&nbsp; theLabelInfo.mouseDraggedY = e.getY();


&nbsp;&nbsp;&nbsp; /* How does this work?
&nbsp;&nbsp;&nbsp; Dragging the mouse on the yellow label produces a
&nbsp;&nbsp;&nbsp; stream of events of this type.&nbsp; This method is called
&nbsp;&nbsp;&nbsp; once for each event. When an event occurs, if the
&nbsp;&nbsp;&nbsp; mouse has been dragged a distance equal to a full
&nbsp;&nbsp;&nbsp; pixel (or more), in either or both directions,&nbsp;
&nbsp;&nbsp;&nbsp; the X and Y values of the mouseDragged event
&nbsp;&nbsp;&nbsp; are used to reposition the label by that distance in&nbsp;
&nbsp;&nbsp;&nbsp; one or both of those directions.&nbsp; This causes the
&nbsp;&nbsp;&nbsp; label to slide under the mouse pointer so that the
&nbsp;&nbsp;&nbsp; X and Y values of the next mouseDragged event revert
&nbsp;&nbsp;&nbsp; back to the original Y and Y values of the original
&nbsp;&nbsp;&nbsp; mousePressed event.&nbsp; In other words, the motion of the
&nbsp;&nbsp;&nbsp; label is such as to cause the coordinates of the
&nbsp;&nbsp;&nbsp; mouseDragged event to continue to be equal to the
&nbsp;&nbsp;&nbsp; coordinates of the original mousePressed event, or to
&nbsp;&nbsp;&nbsp; cause the difference between the two to be zero.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Think of the following expressions as a feedback system
&nbsp;&nbsp;&nbsp; that strives to drive an error signal to zero where
&nbsp;&nbsp;&nbsp; the error signal is the difference between the
&nbsp;&nbsp;&nbsp; coordinates of the current mouseDragged event and the
&nbsp;&nbsp;&nbsp; coordinates of the original mousePressed event.
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; Note that when the yellow label is dragged rapidly
&nbsp;&nbsp;&nbsp; and randomly for an extended period of time, the system
&nbsp;&nbsp;&nbsp; simply quits generating mouseDragged events.&nbsp; This may
&nbsp;&nbsp;&nbsp; be a bug in JDK 1.1.3 for Win95.
&nbsp;&nbsp;&nbsp; */
&nbsp;
&nbsp;&nbsp;&nbsp; int newX = theLabelInfo.labelX
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + theLabelInfo.mouseDraggedX
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - theLabelInfo.mousePressedX;
&nbsp;&nbsp;&nbsp; int newY = theLabelInfo.labelY
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + theLabelInfo.mouseDraggedY
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - theLabelInfo.mousePressedY;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //move label to the new location
&nbsp;&nbsp;&nbsp; theLabel.setLocation(newX,newY);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //save the new location information
&nbsp;&nbsp;&nbsp; theLabelInfo.labelX = newX;&nbsp;
&nbsp;&nbsp;&nbsp; theLabelInfo.labelY = newY;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }//end mouseDragged()
&nbsp;&nbsp;
&nbsp; public void mouseMoved(MouseEvent e){
&nbsp; /*This method is implemented here simply for&nbsp;
&nbsp;&nbsp;&nbsp; illustration.&nbsp; It displays the contents of the
&nbsp;&nbsp;&nbsp; object passed in for each mouseMoved event.&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; It also illustrates a possible bug in JDK 1.1.3
&nbsp;&nbsp;&nbsp; for Win 95.&nbsp; In particular, when the mouse is moved
&nbsp;&nbsp;&nbsp; rapidly and randomly within the yellow label for
&nbsp;&nbsp;&nbsp; an extended period, at some point, mouseMoved
&nbsp;&nbsp;&nbsp; events cease to be generated.
&nbsp;&nbsp;&nbsp; */
&nbsp;&nbsp;&nbsp; System.out.println("Move = " + e);&nbsp;&nbsp;
&nbsp; }//
}//end class MyMouseMotionProcessor&nbsp;&nbsp;
//======================================================

//The following listener is used to terminate the&nbsp;
// program when the user closes the Frame object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//======================================================</PRE></TD>
</TR>
</TABLE>
</CENTER></P>

<FONT COLOR="#ff0000"><H2 ALIGN="CENTER"><A NAME="review"></A>Review</H2>
</FONT><P>Q - Without viewing the following solution, write a Java application that meets the specifications given in the comments at the beginning of the application. </P>
<FONT SIZE=2 COLOR="#0000ff"><P>A - See specifications and solution below.</FONT><BR>
&nbsp; </P>
<TABLE BORDER CELLSPACING=1>
<TR><TD VALIGN="MIDDLE" BGCOLOR="#ffff00">
<PRE><FONT COLOR="#0000ff">/*File SampProg126.java&nbsp; from lesson 92
Copyright 1997, R. G. Baldwin
Without viewing the following solution, write a Java
application that meets the specifications given below.

The solution shown below was successfully tested using
JDK 1.1.3 under Win95.

Write an application that displays a Frame object with
a width of 300 pixels and a height of 200 pixels.&nbsp; Put
your name in the banner at the top of the Frame.

When you move your mouse pointer into the client area of
the Frame, the coordinates of the mouse pointer appear
directly above the pointer.&nbsp; As you move the mouse pointer
around in the client area, the coordinates of the pointer
continue to be displayed above the pointer.

When you move the mouse pointer out of the client area, the
coordinates of the exit point appear and remain in view&nbsp;
until you again move the pointer into the client area.

If you press one of the mouse buttons while moving the
mouse in the client area, the coordinates of the point
where you pressed the button appear and remain there until
you release the mouse button, at which time the&nbsp;
coordinates of the mouse pointer resume being displayed.

Closing the frame terminates the program and returns
control to the operating system.

End of specifications.

*/
//=========================================================
import java.awt.*;
import java.awt.event.*;

public class SampProg126 {
&nbsp; public static void main(String[] args){
&nbsp;&nbsp;&nbsp; GUI gui = new GUI();
&nbsp; }//end main
}//end class SampProg126
//=========================================================

//Subclass Frame in order to override the paint method.
class MyFrame extends Frame{
&nbsp; int xCoor;
&nbsp; int yCoor;

&nbsp; MyFrame(String name){//constructor
&nbsp;&nbsp;&nbsp; this.setTitle("Copyright 1997, R.G.Baldwin");
&nbsp;&nbsp;&nbsp; this.setSize(300,200);
&nbsp;&nbsp;&nbsp; this.setName(name);
&nbsp; }//end constructor
&nbsp;&nbsp;
&nbsp; public void paint(Graphics g){
&nbsp;&nbsp;&nbsp; //display coordinate information on the Frame
&nbsp;&nbsp;&nbsp; g.drawString("" + xCoor + ", " + yCoor, xCoor, yCoor);
&nbsp; }//end paint()
}//end class MyFrame
//==========================================================

class GUI {
&nbsp; public GUI(){//constructor
&nbsp;&nbsp;&nbsp; //Create a visual object of type MyFrame named Frame1
&nbsp;&nbsp;&nbsp; MyFrame myFrame1 = new MyFrame("Frame1");
&nbsp;&nbsp;&nbsp; myFrame1.setVisible(true);
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will&nbsp;
&nbsp;&nbsp;&nbsp; // terminate the program when the user closes&nbsp;
&nbsp;&nbsp;&nbsp; // the Frame.
&nbsp;&nbsp;&nbsp; WProc1 winProcCmd1 = new WProc1();
&nbsp;&nbsp;&nbsp; myFrame1.addWindowListener(winProcCmd1);
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; //Instantiate and register Listener object which will
&nbsp;&nbsp;&nbsp; // process mouseMoved events to display coordinate
&nbsp;&nbsp;&nbsp; // information on the Frame object named myFrame1.&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; MyMouseMotionProcessor mouseMotionProc =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new MyMouseMotionProcessor(myFrame1);
&nbsp;&nbsp;&nbsp; myFrame1.addMouseMotionListener(mouseMotionProc);
&nbsp;&nbsp;&nbsp;
&nbsp; }//end constructor
}//end class GUI definition
//=========================================================

//This listener class monitors for mouseMove events and&nbsp;
// displays the coordinates of the mouse pointer when the&nbsp;
// mouse is moved inside the client area of the Frame.
class MyMouseMotionProcessor extends MouseMotionAdapter{
&nbsp; MyFrame refToFrame1; //save references to the Frame&nbsp;

&nbsp; //Constructor&nbsp;&nbsp;
&nbsp; MyMouseMotionProcessor(MyFrame inFrame1){
&nbsp;&nbsp;&nbsp; //save incoming object reference
&nbsp;&nbsp;&nbsp; refToFrame1 = inFrame1;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp; }// end constructor
&nbsp;&nbsp;
&nbsp; public void mouseMoved(MouseEvent e){
&nbsp;&nbsp;&nbsp; //Get X and Y coordinates of mouse pointer and store&nbsp;
&nbsp;&nbsp;&nbsp; // in instance variables of the Frame object
&nbsp;&nbsp;&nbsp; refToFrame1.xCoor = e.getX();
&nbsp;&nbsp;&nbsp; refToFrame1.yCoor = e.getY();
&nbsp;&nbsp;&nbsp; //Force a repaint to display the coordinate information
&nbsp;&nbsp;&nbsp; refToFrame1.repaint();
&nbsp; }//end mouseMoved()

}//end class MyMouseMotionProcessor&nbsp;&nbsp;

//=========================================================

//The following listener is used to terminate the program&nbsp;
// when the user closes the frame object.
class WProc1 extends WindowAdapter{
&nbsp; public void windowClosing(WindowEvent e){
&nbsp;&nbsp;&nbsp; System.exit(0);
&nbsp; }//end windowClosing()
}//end class WProc1
//=========================================================</PRE></FONT></TD>
</TR>
</TABLE>

<P>-end-<!--end--></P></BODY>
</HTML>
