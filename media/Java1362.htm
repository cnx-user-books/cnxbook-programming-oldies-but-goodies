<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#0000FF" alink="#FF0000" lang="EN-US">

<h2>
Data Structures in Java: Part 7, The Comparable Interface, Part 1</h2>
<i>Baldwin explains the (lack of) interaction between the Comparable interface
and the Java Collections Framework with respect to collections of type
List.</i>
<p><b>Published:</b>&nbsp; July 16, 2001
<br><b>By <a href="#About the author">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1362
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Discussion and Sample Programs">Discussion and Sample Programs</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#What's next">What's Next</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is the seventh lesson in a miniseries on Java data structures and
the <i>Java Collections Framework.</i>&nbsp; The first lesson in the miniseries
was entitled
<a href="http://softwaredev.earthweb.com/java/sdjjavase/article/0,,12395_763411,00.html">Data
Structures in Java: Part 1, Getting Started</a>.&nbsp; The previous lesson
was entitled <a href="Java1360.htm">Data Structures in Java: Part 6, Duplicate
Elements, Ordered Collections, Sorted Collections, and Interface Specialization</a>.
<p>The purpose of this miniseries is to help you learn the essential features
of Object-Oriented data structures in Java using the Collections Framework.
<p>This is also the first lesson in a sub-series on the <b>Comparable</b>
interface.&nbsp; The purpose of the lessons in the sub-series is to teach
you about the interactions between the <b>Comparable</b> interface and
the Collections Framework<i>,</i> particularly with respect to the
<b>Set</b>,
<b>SortedSet</b>,
and <b>SortedMap</b> interfaces of the Collections Framework.
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth among the different listings while you are reading about them.
<p><b><font color="#FF0000">Supplementary material</font></b>
<p>I recommend that you also study the other lessons in my extensive collection
of online Java tutorials.&nbsp; You will find those lessons published at
<a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.&nbsp;
However, as of the date of this writing, Gamelan doesn't maintain a consolidated
index of my Java tutorial lessons, and sometimes they are difficult to
locate there.&nbsp; You will find a consolidated index at
<a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Baldwin's
Java Programming Tutorials</a><font color="#000000">.</font>
<p><font color="#000000">The index on my site provides links to the lessons
at </font><a href="http://softwaredev.earthweb.com/java">Gamelan.com</a><font color="#000000">.</font>
<center>
<h2>
<a NAME="Preview"></a><font color="#000000">Preview</font></h2></center>
<font color="#000000">In this lesson, I will begin discussing the interaction
between the <b>Comparable</b> interface and the Collections Framework.</font>
<p><b><font color="#FF0000">Specialization</font></b>
<p>I will provide a concrete example of the specialization that occurs
while moving down the interface hierarchy from <b>Collection</b> to <b>List</b>.&nbsp;
I will show an example of using two different overloaded versions of the
<b>add</b>
method to add new elements to an <b>ArrayList</b> object.&nbsp; One version
is declared in the <b>Collection</b> interface and both versions are declared
in the <b>List</b> interface.
<p><b><font color="#FF0000">To cast, or not to cast</font></b>
<p>I will illustrate the use of a <i>cast</i> to change the type of a reference
from
<b>Collection</b> to <b>List</b>, in order to invoke a version of the <b>add</b>
method that is declared only in the <b>List</b> interface.&nbsp; This version,
<i>(which actually does an insert)</i> makes it possible for the user to
control the location of each individual element added to a
<b>List</b>.&nbsp;
The fact that the location of each element can be controlled in a <b>List</b>
is what causes a <b>List</b> to be an <i>ordered</i> collection.
<p>I will illustrate that a cast is not required on a reference being treated
as type <b>Collection</b> in order to invoke the version of the <b>add</b>
method that is declared in the <b>Collection</b> interface.&nbsp; This
version of the <b>add</b> method supports the addition of new elements
only at the end of the <b>List</b>.
<p><b><font color="#FF0000">Comparable not required for a List</font></b>
<p>Finally, I will show that it is not necessary for objects to implement
the <b>Comparable</b> interface to make them eligible for inclusion in
a <b>List</b>.&nbsp; I will tell you that it is necessary for objects to
implement the <b>Comparable</b> interface to make them eligible for inclusion
in a <b>SortedSet</b>, although I won't demonstrate that until the next
lesson.
<center>
<h2>
<a NAME="Discussion and Sample Programs"></a><font color="#000000">Discussion
and Sample Programs</font></h2></center>
<b><font color="#FF0000">Beginning with a quiz</font></b>
<p>Let's begin with a little quiz to test your prior knowledge of the Collections
Framework.
<p>What output is produced by the program shown in Listing 1?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; 44321</li>

<li>
D.&nbsp; 4321</li>

<li>
E.&nbsp; 1234</li>

<li>
F.&nbsp; 12344</li>

<li>
G.&nbsp; None of the above.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparable01.java

import java.util.*;

public class Comparable01{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparable01

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ref = new ArrayList();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next());
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(0,new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(1,new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(2,new MyClass(3));
&nbsp;&nbsp;&nbsp; ref.add(3,new MyClass(2));
&nbsp;&nbsp;&nbsp; ref.add(4,new MyClass(1));
&nbsp; }//end fillIt()
}//end class Populator

class MyClass{
&nbsp; int data;
&nbsp;&nbsp;
&nbsp; MyClass(){
&nbsp;&nbsp;&nbsp; data = 0;
&nbsp; }//end noarg constructor
&nbsp;&nbsp;
&nbsp; MyClass(int data){
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end parameterized constructor
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return "" + data;
&nbsp; }//end overridden toString()

}//end MyClass

<b><font face="Courier New,Courier">Listing 1</font></b></pre>
</td>
</tr>
</table>

<p>If your answer was <b>A.&nbsp; Compiler Error</b>, you were correct.
<p><b><font color="#FF0000">What caused the compiler error?</font></b>
<p>The compiler error was caused by the code shown in Listing 2.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(0,new MyClass(4));

<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p>The problem here is that the method named <b>fillIt()</b> receives a
reference to an object of the <b>ArrayList</b> class as the interface type
<b>Collection</b>,
and attempts to invoke the following overloaded method on that reference:
<p><b>add(int index, Object element)</b>
<p><b><font color="#FF0000">Implements Collection and List</font></b>
<p>The <b>ArrayList</b> class implements both the <b>Collection</b> interface
and the <b>List</b> interface.&nbsp; As you will probably recall from earlier
lessons in this series, <b>List</b> is a subinterface of <b>Collection</b>.&nbsp;
The <b>List</b> interface declares the following overloaded versions of
the <b>add</b> method:
<p><b>add(Object o)</b>
<br><b>add(int index, Object element)</b>
<p>The second of these two methods is unknown to the <b>Collection</b>
interface.&nbsp; The <b>Collection</b> interface declares only the first
version of the <b>add</b> method shown above.
<p><b><font color="#FF0000">Specialization</font></b>
<p>This is the result of specialization.&nbsp; A <b>List</b> object is
a more-specialized collection than a <b>Collection</b> object.&nbsp; <i>(In
fact, Collection is a generic interface type and it is not possible to
instantiate an object of type Collection using the standard classes in
JDK 1.3.)</i>
<p>Therefore, the version of the <b>add</b> method that requires two parameter
cannot be invoked on a reference to an <b>ArrayList</b> object when that
object is treated as the generic type <b>Collection</b>.
<p><b><font color="#FF0000">Modified program</font></b>
<p>Now, take a look at the modified version of the program as shown in
Listing 3.
<p>What output is produced by the program shown in Listing 3?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; 44321</li>

<li>
D.&nbsp; 4321</li>

<li>
E.&nbsp; 1234</li>

<li>
F.&nbsp; 12344</li>

<li>
G.&nbsp; 443521</li>

<li>
H.&nbsp; None of the above.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparable02.java

import java.util.*;

public class Comparable02{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparable02

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ref = new ArrayList();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next());
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ((List)ref).add(0,new MyClass(4));
&nbsp;&nbsp;&nbsp; ((List)ref).add(1,new MyClass(4));
&nbsp;&nbsp;&nbsp; ((List)ref).add(2,new MyClass(3));
&nbsp;&nbsp;&nbsp; ((List)ref).add(3,new MyClass(2));
&nbsp;&nbsp;&nbsp; ((List)ref).add(4,new MyClass(1));
&nbsp;&nbsp;&nbsp; ((List)ref).add(3,new MyClass(5));
&nbsp; }//end fillIt()
}//end class populator

class MyClass{
&nbsp; int data;
&nbsp;&nbsp;
&nbsp; MyClass(){
&nbsp;&nbsp;&nbsp; data = 0;
&nbsp; }//end noarg constructor
&nbsp;&nbsp;
&nbsp; MyClass(int data){
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end parameterized constructor
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return "" + data;
&nbsp; }//end overridden toString()

}//end MyClass

<b><font face="Courier New,Courier">Listing 3</font></b></pre>
</td>
</tr>
</table>

<p>If your answer was <b>G.&nbsp; 443521</b>, you are correct.
<p><b><font color="#FF0000">The corrected code</font></b>
<p>This version of the program illustrates the standard mechanism for correcting
the problem in the earlier program shown in Listing 1.&nbsp; The updated
code that corrected the problem is shown in Listing 4.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; (<b>(List)</b>ref).add(0,new MyClass(4));
&nbsp;&nbsp;&nbsp; ((List)ref).add(1,new MyClass(4));
&nbsp;&nbsp;&nbsp; ((List)ref).add(2,new MyClass(3));
&nbsp;&nbsp;&nbsp; ((List)ref).add(3,new MyClass(2));
&nbsp;&nbsp;&nbsp; ((List)ref).add(4,new MyClass(1));
&nbsp;&nbsp;&nbsp; ((List)ref).<b>add(3,new MyClass(5))</b>;
&nbsp; }//end fillIt()
}//end class populator

<b><font face="Courier New,Courier">Listing 4</font></b></pre>
</td>
</tr>
</table>

<p>The incoming parameter to the <b>fillIt </b>method in Listing 4 is a
reference to an object instantiated from the <b>ArrayList</b> class.&nbsp;
That reference is passed as type <b>Collection</b>, which is legal because
the <b>ArrayList</b> class implements both the <b>Collection</b> interface
and the <b>List</b> interface.
<p><b><font color="#FF0000">Casting to type List</font></b>
<p>The code in Listing 4 uses a cast to convert the incoming reference
from type <b>Collection</b> to type <b>List</b>.&nbsp; Because the version
of the <b>add</b> method that is used in Listing 4 is declared in the <b>List</b>
interface, and because the <b>ArrayList</b> class correctly implements
the <b>List</b> interface, that version of the <b>add</b> method can be
invoked on the reference to the <b>ArrayList</b> object when it is treated
as the interface type <b>List</b>.&nbsp; Hopefully this is review material
for you at this point.&nbsp; If not, you may need to go back and study
some of my earlier lessons.
<p><b><font color="#FF0000">The List contract for the add method</font></b>
<p>Listing 4 also illustrates part of the contract for this version of
the <b>add</b> method in the <b>List</b> interface.&nbsp; This version
of the <b>add</b> method makes it possible to specify the position of each
element added to the <b>ArrayList</b> object.&nbsp; <i>(A List is an ordered
collection because the user has control over the location of each element
in the collection relative to the other elements in the collection.)</i>
<p><b><font color="#FF0000">Controlling the locations of the elements</font></b>
<p>In Listing 4 above, the elements are added to the <b>ArrayList</b> object
in increasing element order during the first five invocations of the <b>add</b>
method.&nbsp; However, the sixth invocation of the <b>add</b> method adds
a new element at index position 3.
<p><b><font color="#FF0000">Add method actually does an insert</font></b>
<p>A portion of the contract for this version of the <b>add</b> method
in the <b>List</b> interface is as follows:
<blockquote><i>"Inserts the specified element at the specified position
in this list (optional operation). Shifts the element currently at that
position (if any) and any subsequent elements to the right (adds one to
their indices)."</i></blockquote>
Thus, the new element is inserted at that position, and the other elements
are pushed up, as required, toward higher index values to make room for
the new element.
<p><b><font color="#FF0000">An aside regarding the Vector class</font></b>
<p>Here is an interesting aside.&nbsp; The Java <b>Vector</b> class has
been around longer than the Collection Framework.&nbsp; Somewhere along
the way, the <b>Vector</b> class was upgraded to cause it to become a concrete
implementation of the <b>Collection</b> interface and the <b>List</b> interface.
<p>As a result of the upgrade, the <b>Vector</b> class now provides an
implementation of the <b>add</b> method described above.&nbsp; Except for
the order of the parameters, that <b>add </b>method appears to have the
same behavior as the older method named:
<p><b>insertElementAt(Object elem, int index)</b>
<p>You can insert elements into a <b>Vector</b> object by invoking the
<b>add</b>
method on that object while treating it as type <b>List</b>.&nbsp; However,
since the older <b>insertElementAt</b> method is not declared in the <b>List</b>
interface, you cannot insert an element into the <b>Vector</b> object by
invoking the <b>insertElementAt</b> method while treating it as a <b>List</b>.&nbsp;
In order to invoke that method, you must treat it as type <b>Vector</b>.
<p><b><font color="#FF0000">More on the List contract</font></b>
<p>Another portion of the contract for a <b>List</b> object is that the
<b>iterator</b>
method
<blockquote><i>"Returns an iterator over the elements in this list in proper
sequence."</i></blockquote>
As a result, the code shown in Listing 5, along with the overridden <b>toString</b>
method of the <b>MyClass</b> class causes the program to display the elements
in the following order: <b>443521</b>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next());
&nbsp;&nbsp;&nbsp; }//end while loop

<b><font face="Courier New,Courier">Listing 5</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Duplicates are allowed in a List</font></b>
<p>One final thing that is worthy of note in this program is that a <b>List</b>
objects allows duplicates.&nbsp; Hence, the populated collection contains
two separate objects that are equal to one another in the sense that they
both contain the same values in their instance variables.
<p><b><font color="#FF0000">One more sample program</font></b>
<p>Let's take a look at one more sample program.&nbsp; What output is produced
by the program shown in Listing 6?
<ul>
<li>
A.&nbsp; Compiler Error</li>

<li>
B.&nbsp; Runtime Error</li>

<li>
C.&nbsp; 44321</li>

<li>
D.&nbsp; 4321</li>

<li>
E.&nbsp; 1234</li>

<li>
F.&nbsp; 12344</li>

<li>
G.&nbsp; None of the above.</li>
</ul>

<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>//File Comparable03.java

import java.util.*;

public class Comparable03{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String args[]){
&nbsp;&nbsp;&nbsp; new Worker().doIt();
&nbsp; }//end main()
}//end class Comparable03

class Worker{
&nbsp; public void doIt(){
&nbsp;&nbsp;&nbsp; Iterator iter;
&nbsp;&nbsp;&nbsp; Collection ref;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp; ref = new ArrayList();
&nbsp;&nbsp;&nbsp; Populator.fillIt(ref);
&nbsp;&nbsp;&nbsp; iter = ref.iterator();
&nbsp;&nbsp;&nbsp; while(iter.hasNext()){
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.print(iter.next());
&nbsp;&nbsp;&nbsp; }//end while loop
&nbsp;&nbsp;&nbsp; System.out.println();
&nbsp; }//end doIt()
}// end class Worker

class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(3));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(2));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(1));
&nbsp; }//end fillIt()
}//end class populator

class MyClass{
&nbsp; int data;
&nbsp;&nbsp;
&nbsp; MyClass(){
&nbsp;&nbsp;&nbsp; data = 0;
&nbsp; }//end noarg constructor
&nbsp;&nbsp;
&nbsp; MyClass(int data){
&nbsp;&nbsp;&nbsp; this.data = data;
&nbsp; }//end parameterized constructor
&nbsp;&nbsp;
&nbsp; public String toString(){
&nbsp;&nbsp;&nbsp; return "" + data;
&nbsp; }//end overridden toString()

}//end MyClass

<b><font face="Courier New,Courier">Listing 6</font></b></pre>
</td>
</tr>
</table>

<p>If you selected <b>C.&nbsp; 44321</b>, you are correct.
<p><b><font color="#FF0000">No need to cast to type List</font></b>
<p>As shown in Listing 7, this program takes a different approach to solving
the problem originally exposed in the program shown in Listing 1.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>class Populator{
&nbsp; public static void fillIt(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Collection ref){
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(4));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(3));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(2));
&nbsp;&nbsp;&nbsp; ref.add(new MyClass(1));
&nbsp; }//end fillIt()
}//end class populator

<b><font face="Courier New,Courier">Listing 7</font></b></pre>
</td>
</tr>
</table>

<p>This program does not change the type of the incoming reference to the
<b>ArrayList</b>
object in the
<b>fillIt</b> method.&nbsp; Rather, it continues to treat
the incoming reference as type <b>Collection</b>, and invokes the version
of the <b>add</b> method that is declared in the <b>Collection</b> interface.&nbsp;
This avoids the requirement to cast the incoming reference to type <b>List</b>.
<p>The contract for this version of the <b>add</b> method in the <b>List</b>
interface is
<blockquote><i>"Appends the specified element to the end of this list (optional
operation)."</i></blockquote>
As a result, the new elements are added to the collection in increasing
index order.&nbsp; Since an iterator on a <b>List</b> returns the elements
in increasing index order, this program displays the elements in the same
order that they are added.
<p><b><font color="#FF0000">What happened to the Comparable interface?</font></b>
<p>By now, you are probably wondering what all of this has to do with the
<b>Comparable</b>
interface, because I haven't mentioned that interface since the introductory
comments at the beginning of the lesson.
<p><b><font color="#FF0000">Comparable interface is not required for a
List</font></b>
<p>Actually, the purpose of this lesson is to illustrate the lack of any
requirement to make use of the <b>Comparable</b> interface with <b>List</b>
objects.&nbsp; In particular, the purpose is to illustrate that this is
one of the features that differentiates between a <b>List</b> object and
a <b>Set</b> or <b>SortedSet</b> object.
<p>A <b>List</b> can be used as a container for other objects regardless
of whether or not those objects implement the <b>Comparable</b> interface.&nbsp;
However, in the next lesson, we will see that objects must implement the
<b>Comparable</b>
interface in order to be eligible for inclusion in collections that implement
the <b>SortedSet</b> interface.
<p>This and the next several lessons are intended to provide you with an
understanding of the interaction between the <b>Comparable</b> and <b>Comparator</b>
interfaces and the Collections Framework.
<p><b><font color="#FF0000">No requirement to compare</font></b>
<p>Because a <b>List</b> makes no attempt to eliminate duplicate elements,
or to sort the elements on the basis of their values, there is no requirement
to <i>compare</i> objects when placing them in a <b>List</b>.&nbsp; Therefore,
objects whose references are stored in a <b>List</b> are not required to
implement the <b>Comparable</b> interface <i>(but they may implement the
Comparable interface without causing any harm)</i>.
<p><b><font color="#FF0000">Comparison is required</font></b>
<p>Because a <b>SortedSet</b> does eliminate duplicates and does sort the
elements on the basis of their values, there is a requirement to <i>compare</i>
each new element with the existing elements in a <b>SortedSet</b> whenever
a new element is added to the collection.&nbsp; Therefore, objects whose
references are stored in a <b>SortedSet</b> are required to implement the
<b>Comparable</b>
interface.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">In this lesson, I began discussing the interaction
between the <b>Comparable</b> interface and the Collections Framework.</font>
<p>I provided a concrete example of the specialization that occurs while
moving down the interface hierarchy from <b>Collection</b> to <b>List</b>.&nbsp;
I showed an example of using two different overloaded versions of the <b>add</b>
method to add new elements to an <b>ArrayList</b> object.&nbsp; One version
is declared in the <b>Collection</b> interface and both versions are declared
in the <b>List</b> interface.
<p>I illustrated the use of a <i>cast</i> to change the type of a reference
from <b>Collection</b> to <b>List</b>, in order to invoke a version of
the <b>add</b> method that is declared only in the <b>List</b> interface.&nbsp;
This version makes it possible for the user to control the location of
each individual element added to a <b>List</b>.
<p>I illustrated that a cast is not required on a reference being treated
as type <b>Collection</b> in order to invoke the version of the <b>add</b>
method that is declared in the <b>Collection</b> interface.&nbsp; This
version of the <b>add</b> method supports the addition of new elements
only at the end of the <b>List</b>.
<p>Finally, I showed that it is not necessary for objects to implement
the <b>Comparable</b> interface to make them eligible for inclusion in
a <b>List</b>.
<p>Although I didn't demonstrate it, I told you that it is necessary for
objects to implement the <b>Comparable</b> interface to make them eligible
for inclusion in a <b>SortedSet</b>.
<center>
<h2>
<a NAME="What's next"></a>What's Next?</h2></center>
As mentioned above, the next lesson will begin exploring the interaction
between the <b>Comparable</b> interface and the <b>SortedSet</b> interface
of the <i>Collections Framework.</i>
<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="About the author"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
</body>
</html>
