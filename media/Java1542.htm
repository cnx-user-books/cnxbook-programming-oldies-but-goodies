<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
  <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#0000ff" vlink="#666666" alink="#ff0000" lang="EN-US">
<h2 align="center">Digging a Little Deeper into the Java 3D API</h2>
<i>Learn to use a variety of Java 3D classes including Appearance, Transform3D, 
BoundingSphere, and Vector3f classes.</i>
<p><b>Published:</b>&nbsp; October 9, 2007<br>
<b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. Baldwin</a></b>
</p>
<p>Java Programming Notes # 1542</p>
<ul>
	<li><a href="#Preface">Preface</a></li>

	<ul>
		<li><a href="#General">General</a></li>
		<li><a href="#Acknowledgement">Acknowledgement</a></li>
		<li><a href="#Viewing_tip">Viewing tip</a><ul>
			<li><a href="#Figures">Figures</a></li>
			<li><a href="#Listings">Listings</a></li>
		</ul></li>
		<li><a href="#Supplementary_material">Supplementary material</a></li>
	</ul>
	<li><a href="#Preview">Preview</a></li>
	<li><a href="#Discussion%20and%20Sample%20Programs">Discussion and
	sample code</a></li>
	<li><a href="#Run%20the%20program">Run the program</a></li>
	<li><a href="#Summary">Summary</a></li>
	<li><a href="#Whats%20Next">What's next?</a></li>
	<li><a href="#Download">Download</a></li>
	<li><a href="#Resources">Resources</a></li>
	<li><a href="#Complete%20Program%20Listings">Complete program
	listing</a></li>
	<li><a href="#Copyright">Copyright</a></li>
	<li><a href="#About_the_author">About the author</a></li>
</ul>
<hr size="3" width="100%" align="center">
<center>
<h2> <a name="Preface"></a>Preface</h2>
</center>
<h3> <a name="General">General</a></h3>
<p><font color="#ff0000"><b>Scope of this series of tutorial lessons</b></font></p>
<p>In the earlier lesson titled &quot;Understanding Lighting in the Java 3D API&quot; <i>
(see <a href="#Resources">Resources</a>)</i>, I taught you about, 
and showed you examples of many of the important features of scene illumination 
in the Java 3D API.&nbsp; I also provided the source code for a complete Java 3D 
lighting simulator program that you can use to experiment with light in the Java 
3D API.&nbsp; At the end of that tutorial, I stated <i>&quot;I will explain how the Java 
3D lighting simulator program works in subsequent parts of this multi-part 
lesson.&quot;</i></p>
<p>Upon reflection, I decided that it would be impractical for me to 
attempt to explain the inner workings of that very complicated program without 
first explaining a large number of basic concepts involved in writing programs 
using the Java 3D API.&nbsp; Therefore, I decided to publish a series of lessons 
that would start with the basics and work up to the general complexity exhibited by the program that I 
provided in the lesson titled &quot;Understanding Lighting in the Java 3D API&quot;.&nbsp; 
The first lesson in that new series was titled &quot;Back to Basics in the Java 3D 
API&quot; <i>(see <a href="#Resources">Resources</a>)</i>.&nbsp; This is the second 
lesson in the new series.</p>
<p><b><font color="#ff0000">Compiling and running Java 3D programs</font></b></p>
<p>In order to compile and run programs using the Java 3D API, you will need to 
download and install the Java 3D API software.&nbsp; As of the date of this writing, 
version 1.5.0 is available for <a href="#Download">download</a>.</p>
<p>In addition, you will need to <a href="#Download">download</a> 
and install either <b>Microsoft DirectX</b> or <b>OpenGL</b>.&nbsp; All of the sample 
programs in this series of tutorials were developed and tested using Microsoft 
DirectX.&nbsp; They were not tested using OpenGL.</p>
<h3><a name="Acknowledgement">Acknowledgement</a></h3>
<p>Most of what I will be teaching you about the use of the Java 3D API was 
learned by studying the tutorial by Dennis J Bouvier <i>(see
<a href="#Resources">Resources</a>)</i> along with other 
online material, some of which is listed in <a href="#Resources">Resources</a>.</p>
<p>You can view the Bouvier tutorial online.&nbsp; You can also <a href="#Download">download</a> the Bouvier 
tutorial as a set of PDF files along with the source code for the example 
programs in his tutorial.&nbsp; I recommend that you take advantage of those 
resources as well.</p>
<h3> <a name="Viewing_tip">Viewing tip</a></h3>
<p> I recommend that you open another copy of this document in a separate 
browser window and use the following links to easily find and view the figures 
and listings while you are reading about them.</p>
<h4> <a name="Figures">Figures</a></h4>
<ul>
	<li><a href="#Figure_1">Figure 1</a>. The target virtual universe for this 
	lesson.</li>
</ul>
<h4> <a name="Listings">Listings</a></h4>
<ul>
	<li><a href="#Listing_1">Listing 1</a>. A top-level driver class.</li>
	<li><a href="#Listing_2">Listing 2</a>. Beginning of the class named 
	TheScene.</li>
	<li><a href="#Listing_3">Listing 3</a>. Set a Material object to yellow for 
	diffuse light.</li>
	<li><a href="#Listing_4">Listing 4</a>. Set appearance for the yellow 
	sphere.</li>
	<li><a href="#Listing_5">Listing 5</a>. Create the large yellow sphere.</li>
	<li><a href="#Listing_6">Listing 6</a>. Create the small white sphere.</li>
	<li><a href="#Listing_7">Listing 7</a>. Translate the white sphere.</li>
	<li><a href="#Listing_8">Listing 8</a>. Create and translate the small green 
	sphere.</li>
	<li><a href="#Listing_9">Listing 9</a>. Add a white PointLight object to the 
	scene.</li>
	<li><a href="#Listing_10">Listing 10</a>. Specify which objects to 
	illuminate.</li>
	<li><a href="#Listing_11">Listing 11</a>. Create and populate the 3D 
	universe.</li>
	<li><a href="#Listing_12">Listing 12</a>. The end of the program.</li>
	<li><a href="#Listing_13">Listing 13</a>. Listing of the program named 
	Java3D004.</li>
</ul>
<h3 align="left"> <a name="Supplementary_material">Supplementary material</a></h3>
<p> I recommend that you also study the other lessons in my extensive collection 
of online Java tutorials.&nbsp; You will find a consolidated index at
<font
 color="#000000"> <a href="http://www.dickbaldwin.com/toc.htm">
www.DickBaldwin.com</a>.</font></p>
<h2 align="center"><font color="#000000"><a name="Preview">Preview</a></font></h2>
<p>In the previous lesson titled &quot;Back to Basics in the Java 3D API&quot; <i>(see
<a href="#Resources">Resources</a>)</i>, I taught you to master the basics of starting from 
scratch to create and populate a Java 3D virtual universe.&nbsp; I also taught 
you how to place that 
universe in a <b>Frame</b> along with other GUI components using the layout 
manager of your choice.&nbsp; While the visual results produced in that 
lesson didn't look too impressive, an understanding of the steps required to 
produce those results is critically important to your 
progress down the path of learning how to effectively use the Java 3D API.</p>
<p><font color="#FF0000"><b>Just the tip of the iceberg</b></font></p>
<p>The material covered in that lesson is just the tip of the Java 3D iceberg.&nbsp; 
There is much more for you to learn if you want to make effective use of the 
Java 3D API.</p>
<p>In this lesson, I will teach you how to write a Java 3D program to create, 
populate, and display the virtual universe shown on the left side of Figure 1.</p>












<p>
 <b><a name="Figure_1">Figure 1</a>. The target virtual universe for this 
	lesson. </b>
<table border="0" cols="1" bgcolor="#ffffff">
  <tbody>
    <tr>
      <td>
      <pre><img border="0" src="java1542a01.jpg" width="469" height="235"></pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>A long list of new classes</b></font></p>
<p>I will use the program to teach you how to use the following Java 3D classes
<i>(that were not covered in the previous lesson)</i> 
along with various methods belonging to those classes:</p>
<ul>
	<li>com.sun.j3d.utils.geometry.Sphere</li>
	<li>com.sun.j3d.utils.geometry.Primitive</li>
	<li>javax.media.j3d.Appearance</li>
	<li>javax.media.j3d.Material</li>
	<li>javax.media.j3d.PointLight</li>
	<li>javax.media.j3d.Transform3D</li>
	<li>javax.media.j3d.TransformGroup</li>
	<li>javax.media.j3d.BoundingSphere</li>
	<li>javax.vecmath.Vector3f</li>
	<li>javax.vecmath.Point3f</li>
	<li>javax.vecmath.Point3d</li>
	<li>javax.vecmath.Color3f</li>
</ul>
<center>
<h2> <a name="Discussion and Sample Programs"></a><font color="#000000">Discussion
and sample code</font></h2>
</center>
In this lesson, I will explain the program named Java3D004, which is presented 
in Listing 13.&nbsp; As is my custom with long programs, I will explain the 
program in fragments.&nbsp; The first fragment is shown in Listing 1.<p>
<font color="#FF0000">
<b>A top-level driver class</b></font></p>
<p>Listing 1 contains a top-level driver class for the program.&nbsp; This program could 
have been written without the use of this driver class.&nbsp; However, I decided to keep it intact for future expansions that require a user input GUI.</p>
<p>
<b><a name="Listing_1">Listing 1</a>. A top-level driver class. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>public class Java3D004 extends Frame{
  public static void main(String[] args){
    Java3D004 thisObj = new Java3D004();
  }//end main
  //----------------------------------------------------//
  
  public Java3D004(){//constructor
    setTitle("Copyright 2007, R.G.Baldwin");
    add(new Label("You can build a GUI here."));
    setBounds(236,0,235,75);
    setVisible(true);
    
    //Instantiate the object in which the Java 3D
    // universe will be displayed.
    TheScene theScene = new <b>TheScene</b>();

    //This window listener is used to terminate the
    // program when the user clicks the X button.
    addWindowListener(
      new WindowAdapter(){
        public void windowClosing(WindowEvent e){
          System.exit(0);
        }//end windowClosing
      }//end new WindowAdapter
    );//end addWindowListener

  }//end constructor
</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>The user input GUI</b></font></p>
<p>The user input GUI produced by Listing 1 is shown in the right side of Figure 
1.&nbsp; Except for the X-button in the upper right corner of the <b>Frame</b> 
that can be used to terminate the program, the GUI is of no use in this program.&nbsp; 
Note however that the code in Listing 1 does instantiate a new object of the 
class named <b>TheScene</b>.&nbsp; This causes the 3D universe shown in the left 
side of Figure 1 to be created and displayed.</p>
<p><font color="#FF0000"><b>Beginning of the class named TheScene</b></font></p>
<p>Listing 2 shows the beginning of the class named <b>TheScene</b>, which is an 
inner class that extends the <b>Frame</b> class.</p>
<p>
<b><a name="Listing_2">Listing 2</a>. Beginning of the class named TheScene.</b><table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>  class TheScene extends Frame{
    
    TheScene(){//constructor
    
      //Create a Canvas3D object to be used for rendering
      // the Java 3D universe.  Place it in the CENTER of
      // the Frame.
      Canvas3D canvas3D = new Canvas3D(
              SimpleUniverse.getPreferredConfiguration());
      add(BorderLayout.CENTER,canvas3D);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in Listing 2 is essentially the same as code that I explained in the 
previous lesson so I won't repeat that explanation here.</p>
<p><font color="#FF0000">
<b>Construct and set properties for the large yellow sphere</b></font></p>
<p>Listing 3 begins the construction of the objects that will be displayed in the scene 
as well as the other objects necessary to support those objects.&nbsp; This code 
begins by 
creating and setting properties for the large yellow sphere.</p>
<p>
<b><a name="Listing_3">Listing 3</a>. Set a Material object to yellow for 
diffuse light. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      Material yellowSphMaterial = new <b>Material</b>();
      yellowSphMaterial.setDiffuseColor(1.0f,1.0f,0.0f);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 3 begins the code required to establish the appearance of the large yellow sphere shown in Figure 1.</p>
<p><font color="#FF0000"><b>What is a Material object?</b></font></p>
<p>According to the Sun documentation, a <b>Material</b> object defines the 
appearance <i>(color)</i> of an object under illumination.&nbsp; In other words, 
a <b>Material</b> object defines what the object will look like when it is illuminated by 
one or more of the various light sources that are available in the Java 3D API.<br>
<br>
<font color="#FF0000"><b>Properties of the Material class</b></font></p>
<p>Several properties can be set for a <b>Material</b> object, including the color 
that will appear when the object is illuminated by one or more of the following 
types of light sources:</p>
<ul>
	<li>Ambient</li>
	<li>Diffuse</li>
	<li>Specular</li>
	<li>Emissive</li>
</ul>
<p>In addition, a property can be set to define the material's shininess, in the 
range from 1.0 to 128.0 with 1.0 being not shiny and 128.0 being very shiny.&nbsp; 
</p>
<p>I explained a great deal about the effect of illumination on 3D objects in the 
earlier lesson titled &quot;Understanding Lighting in the Java 3D API&quot; <i>(see
<a href="#Resources">Resources</a>)</i>.&nbsp; Therefore, I will refer you to 
that lesson for further information on this topic.</p>
<p>The code in Listing 3 sets the <b>Material</b> object so that it will cause 
the sphere to appear to be yellow when illuminated by a <b>PointLight</b> source 
later.</p>
<p><font color="#FF0000">
<b>Set appearance for the yellow sphere</b></font></p>
<p>All that we have done so far is to create a <b>
Material</b> object with certain properties.&nbsp; We haven't connected that <b>
Material</b> object to the sphere yet.</p>
<p>Listing 4 creates an <b>Appearance</b> object that will be used connect the <b>
Material</b> object to the sphere.</p>
<p>
<b><a name="Listing_4">Listing 4</a>. Set appearance for the yellow sphere. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      Appearance yellowSphAppearance = new Appearance();
      yellowSphAppearance.setMaterial(yellowSphMaterial);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>What is an Appearance object?</b></font></p>
<p>According to the Sun documentation, an <b>Appearance</b> object <i>&quot;defines all 
rendering state that can be set as a component object of a <b>Shape3D</b> node.&quot;</i> 
The rendering state consists of the following:</p>
<ul>
	<li>Coloring attributes</li>
	<li>Line attributes</li>
	<li>Point attributes</li>
	<li>Polygon attributes</li>
	<li>Rendering attributes</li>
	<li>Transparency attributes</li>
	<li><b>Material</b></li>
	<li>Texture</li>
	<li>Texture attributes</li>
	<li>Texture coordinate generation</li>
	<li>Texture unit state</li>
</ul>
<p>In other words, you can set properties on an <b>Appearance</b> object to 
control all of the attributes in the above list when an object connected to the 
appearance is rendered on the screen.&nbsp; In this case, we are concerned only 
with the <b>Material</b> property.&nbsp; Listing 4 sets the <b>Material</b> 
property by calling the <b>setMaterial</b> method on a new <b>Appearance</b> 
object passing a reference to the existing <b>Material</b> object as a 
parameter.</p>
<p><font color="#FF0000">
<b>Create the large yellow sphere</b></font></p>
<p>Listing 5 instantiates a <b>Sphere</b> object by calling a constructor which, 
according to the Sun documentation, requires the following four parameters of 
the types given:</p>
<ul>
	<li>float radius</li>
	<li>int primitiveFlags</li>
	<li>int divisions</li>
	<li>Appearance appearance</li>
</ul>
<p>This sphere is instantiated with a radius of 0.5.&nbsp; A reference to the <b>
Appearance</b> object created above is passed as the fourth parameter.</p>
<p><b><a name="Listing_5">Listing 5</a>. Create the large yellow sphere. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      Sphere yellowSph = new Sphere(
                               0.5f,
                               Primitive.GENERATE_NORMALS,
                               9,
                               yellowSphAppearance);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>What are the divisions?</b></font></p>
<p>As I understand it, the value for divisions is the number of flat surfaces 
that would be encountered in making one trip around the equator of the sphere.&nbsp; 
The larger you make this value, the closer your sphere will approximate a true 
sphere.&nbsp; <i>(For example, if you set this value to 4, you would end up with 
a cube instead of a sphere.)</i></p>
<p>The yellow sphere shown in Figure 1 was created with nine divisions.&nbsp; As you can see, 
it isn't a very good 
approximation of a true sphere due to the low number of divisions.&nbsp; On the other hand, the small white and 
green spheres are good approximations of true spheres because they were each 
instantiated with 50 divisions.&nbsp; I also discussed this topic in the earlier 
lesson titled &quot;Understanding Lighting in the Java 3D API&quot; <i>(see
<a href="#Resources">Resources</a>)</i>.</p>
<p><font color="#FF0000"><b>What about Primitive.GENERATE_NORMALS?</b></font></p>
<p>That is a good question.&nbsp; I believe that this parameter has something to 
do with the ability of the system to render the object on the screen.&nbsp; The 
Sun documentation simply states that this value <i>&quot;Specifies that normals are 
generated along with the positions.&quot;</i> </p>
<p>Apparently there are other possible values for this parameter as well.&nbsp; 
I searched the web in an attempt to find a more informative explanation.&nbsp; 
Most web sites that discuss Java 3D are simply silent on this topic.&nbsp; Among 
those that aren't silent, I didn't find anything that was very informative.&nbsp; 
At this point, the best that I can tell you is simply to define this parameter 
as shown in Listing 5.&nbsp; For example, if you pass 
Primitive.GENERATE_NORMALS_INWARD instead of Primitive.GENERATE_NORMALS as the 
second parameter to the constructor, you will get a white sphere with no 
shading.</p>
<p><font color="#FF0000">
<b>Create the small white sphere</b></font></p>
<p>Listing 6 creates the white sphere in the foreground of Figure 1 with a 
radius of 0.1.&nbsp; The sphere is created with 50 divisions so that it will be 
a good approximation of a true sphere.</p>
<p>
<b><a name="Listing_6">Listing 6</a>. Create the small white sphere. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      Material whiteSphMaterial = new Material();
      whiteSphMaterial.setDiffuseColor(1.0f,1.0f,1.0f);
      Appearance whiteSphAppearance = new Appearance();
      whiteSphAppearance.setMaterial(whiteSphMaterial);
      Sphere whiteSph = new Sphere(
                               0.10f,
                               Primitive.GENERATE_NORMALS,
                               50,
                               whiteSphAppearance);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>When the code in Listing 6 has been executed, the sphere is still located at 
the origin in 3D space.&nbsp; It must be translated in 3D space in order to 
cause it to appear as shown in Figure 1.</p>
<p><font color="#FF0000"><b>Translate the white sphere</b></font></p>
<p>The code in Listing 7 may be the most difficult code in the entire program to 
understand.&nbsp; Unless you already understand quite a bit about matrix 
arithmetic, you probably won't be able to understand it completely.&nbsp; 
Fortunately, you don't have to understand all of the inner workings of the code 
in order to be able to use it.&nbsp; You simply have to understand the 
procedures involved.</p>
<p>
<b><a name="Listing_7">Listing 7</a>. Translate the white sphere. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      Transform3D whiteTransform = new Transform3D();
      whiteTransform.setTranslation(
                          new Vector3f(-0.5f,-0.5f,0.5f));
                          
      TransformGroup whiteTransformGroup = 
                                     new TransformGroup();
      whiteTransformGroup.setTransform(whiteTransform);
      whiteTransformGroup.addChild(whiteSph);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in Listing 7 creates and populates the objects necessary to translate the location of the white sphere to make it 
appear to be closer to the viewer than the yellow sphere at the origin.&nbsp; 
The white sphere is also moved down and to the left.</p>
<p><font color="#FF0000"><b>Instantiate a Transform3D object</b></font></p>
<p>I taught you a little about transformations in 2D space in the earlier lesson 
titled &quot;Java 2D Graphics, Simple Affine Transforms&quot; <i>(see <a href="#Resources">
Resources</a>)</i>.&nbsp; It might be helpful for you to refer back to that 
lesson in order to better understand what is going on here in 3D space.</p>
<p><font color="#FF0000"><b>An object of the Transform3D class</b></font></p>
<p>Listing 7 begins by instantiating a new object of the class <b>
Transform3D</b>.&nbsp; According to Sun, a <b>Transform3D</b> object is:</p>
<blockquote>
	<p><i>&quot;A generalized transform object represented internally as a 4x4 
	double-precision floating point matrix. ... A Transform3D is used to perform 
	translations, rotations, and scaling and shear effects.&quot;</i></p>
</blockquote>
<p>Among the many methods of the <b>Transform3D</b> class are various overloaded 
versions of the following methods:</p>
<ul>
	<li>setScale(double&nbsp;scale)</li>
	<li>setTranslation(Vector3f&nbsp;trans)</li>
	<li>setRotation(Matrix3d&nbsp;m1)</li>
</ul>
<p>To make a long story short, a general <b>Transform3D</b> object can be 
converted into an object that is useful for scaling, translating, or rotating an 
object in 3D space by calling one of these methods on the <b>Transform3D</b> 
object.</p>
<p><font color="#FF0000"><b>Create and prepare the Transform3D object</b></font></p>
<p>Listing 7 begins by creating a <b>Transform3D</b> object.&nbsp; Then it calls 
the <b>setTranslation</b> method on that object passing a reference to a <b>
Vector3f</b> object as a parameter.&nbsp; This converts the transform object to 
one that can be used to translate an object in 3D space by -0.5 units along the 
x-axis, -0.5 units along the y-axis, and +0.5 units along the z-axis.&nbsp; This 
has the effect of moving the object to the left, down, and toward the viewer as 
shown by the white sphere in Figure 1.</p>
<p><font color="#FF0000"><b>What is a Vector3f object?</b></font></p>
<p>According to Sun, a <b>Vector3f</b> object is<i> &quot;A 3-element vector that is represented by 
<b>single-precision </b>floating point x,y,z coordinates.&quot;</i></p>
<p>Similarly, a <b>Vector3d</b> object is <i>&quot;A 3-element vector that is represented by 
<b>double-precision</b> 
	floating point x,y,z coordinates.&quot;</i></p>
<p>A <i>vector</i> is normally thought of something that has length and 
direction.&nbsp; There are several ways to represent a vector.&nbsp; In the two 
cases above, the vector is represented by three floating point values.</p>
<p>In this program, a <b>Vector3f</b> object is used to condition the <b>
Transform3D</b> object so that it can be used to move an object by a specified 
distance in a specified direction.</p>
<p><font color="#FF0000"><b>What is a TransformGroup?</b></font></p>
<p>Recall from the previous lesson that a <b>Group</b> object is an object that 
can encapsulate references to one or more child objects.&nbsp; A <b>BranchGroup</b> 
object extends the <b>Group</b> class and can be used to encapsulate references 
to one or more objects.&nbsp; The<b> BranchGroup</b> object can later be added 
to the universe, and the visual objects encapsulated in the <b>BranchGroup</b> 
object<b> </b>will be rendered in the 3D virtual universe.</p>
<p>The <b>TransformGroup</b> class also extends the <b>Group</b> class.&nbsp; A
<b>TransformGroup</b> object contains a reference to a <b>Transform3D</b> object 
in addition to references to one or more child objects.</p>
<p><font color="#FF0000"><b>Can be added to a BranchGroup object</b></font></p>
<p><a name="The_TransformGroup">A<b> TransformGroup</b></a> object can also be 
added to a <b>BranchGroup</b> object in addition to the ordinary objects that are 
added to the <b>BranchGroup</b> object.&nbsp; Then, when the scene is rendered, 
the transform specified by the <b>Transform3D</b> object will be applied to all 
of the children encapsulated in the <b>TransformGroup</b> object.</p>
<p>The third statement in Listing 7 instantiates a new <b>TransformGroup</b> 
object.&nbsp; The fourth statement adds the <b>Transform3D</b> object created 
earlier to the group.&nbsp; The fifth statement causes the white sphere to be a 
child of the <b>TransformGroup</b> object.&nbsp; This will cause the specified 
translation to be applied to the white sphere when the scene is rendered, moving 
the sphere away from the origin down, to the left, and closer to the viewer from the 
viewer's viewpoint.&nbsp; Hence, the small white sphere in Figure 1 appears 
down, to the left, and closer to the viewer than the yellow sphere, <i>(which is 
centered at the origin in 3D space.)</i>.</p>
<p><font color="#FF0000">
<b>Create and translate the small green sphere</b></font></p>
<p>Listing 8 uses similar code to create a small green sphere located up, to the right, and behind the yellow sphere.</p>
<p>
<b><a name="Listing_8">Listing 8</a>. Create and translate the small green 
sphere. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      Material greenSphMaterial = new Material();
      greenSphMaterial.setDiffuseColor(0.0f,1.0f,0.0f);
      Appearance greenSphAppearance = new Appearance();
      greenSphAppearance.setMaterial(greenSphMaterial);
      Sphere greenSph = new Sphere(
                               0.10f,
                               Primitive.GENERATE_NORMALS,
                               50,
                               greenSphAppearance);
      Transform3D greenTransform = new Transform3D();
      greenTransform.setTranslation(
                           new Vector3f(0.5f,0.5f,-0.5f));
      TransformGroup greenTransformGroup = 
                                     new TransformGroup();
      greenTransformGroup.setTransform(greenTransform);
      greenTransformGroup.addChild(greenSph);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000">
<b>Add a white PointLight object to the scene</b></font></p>
<p>Listing 9 adds a white <b>PointLight</b>, in front of, to the right of, and above the yellow sphere.&nbsp; 
As you can see in Figure 1, this causes the strongest illumination area of all 
three spheres to be to the right of and above the center point on the sphere 
from the viewpoint of the viewer.&nbsp; It also causes a shadow on the lower 
left portion of all three spheres.</p>
<p>
<b><a name="Listing_9">Listing 9</a>. Add a white PointLight object to the 
scene. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      Color3f pointLightColor = 
                              new Color3f(1.0f,1.0f,1.0f);
      Point3f pointLightPosition = 
                              new Point3f(1.0f,1.0f,2.0f);
      Point3f pointLightAttenuation = 
                              new Point3f(1.0f,0.0f,0.0f);
      
      PointLight pointLight = new PointLight(
                                   pointLightColor,
                                   pointLightPosition,
                                   pointLightAttenuation);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>The code in Listing 9 creates objects for color, position, and attenuation of 
the <b>PointLight</b> source and passes those three objects to the constructor 
for the <b>PointLight</b> object.</p>
<p><b><font color="#FF0000">What is a PointLight object?</font></b></p>
<p>Java 3D provides several different forms of illumination.&nbsp; You can learn 
quite a lot about this in my earlier lesson titled &quot;Understanding Lighting in 
the Java 3D API&quot; <i>(see <a href="#Resources">Resources</a>)</i>.</p>
<p>According to Sun, </p>
<blockquote>
	<p><i>&quot;The PointLight object specifies an attenuated light source at a fixed 
	point in space that radiates light equally in all directions away from the 
	light source.&quot;</i></p>
</blockquote>
<p>Saying that the light is <i>attenuated</i> means that the intensity of the light decreases with 
distance from the source.&nbsp; There are several ways that the attenuation 
characteristics can be specified for a <b>PointLight</b> source.&nbsp; I will leave it up 
to you to study and understand those different ways based on my earlier lesson 
and the Sun documentation.</p>
<p><font color="#FF0000"><b>What is a Color3f object?</b></font></p>
<p>According to Sun, a Color3f object encapsulates </p>
<blockquote>
	<p><i>&quot;A three-element color value represented by single precision floating 
	point x,y,z values. The x,y,z values represent the red, green, and blue 
	color values, respectively. Color components should be in the range of [0.0, 
	1.0].&quot;</i></p>
</blockquote>
<p>In the case of Listing 9, all three color values are set to 1.0 causing the 
color of the light to be white.</p>
<p><font color="#FF0000"><b>What is a Point3f object?</b></font></p>
<p>When used to establish the light position as in Listing 9, a <b>Point3f</b> 
object encapsulates a 3-element point in space that is represented by single 
precision floating point x,y,z coordinates.</p>
<p>In Listing 9, the <b>Point3f</b> object is used to represent a location 
for the light source that is one unit to the right of, one unit above, and two 
units in front of the origin in 3D space.</p>
<p>Listing 9 also uses a <b>Point3f</b> object to specify the manner in which 
the intensity of the light will be attenuated relative to distance from the 
source.</p>
<p><font color="#FF0000"><b>Instantiate the PointLight object</b></font></p>
<p>The last statement in Listing 9 instantiates the <b>PointLight</b> object by 
passing references to the three objects discussed above to the <b>PointLight</b> 
constructor.</p>
<p><font color="#FF0000">
<b>Specify which objects to illuminate</b></font></p>
<p>Listing 10 creates a <b>BoundingSphere</b> object and uses it to specify 
which objects will be illuminated by the <b>PointLight</b> source.</p>
<p>
<b><a name="Listing_10">Listing 10</a>. Specify which objects to illuminate. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      BoundingSphere boundingSphere = 
        new BoundingSphere(new Point3d(0.0,0.0,0.0), 1.0);
      pointLight.setInfluencingBounds(boundingSphere);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>What is a BoundingSphere object?</b></font></p>
<p>According to Sun,</p>
<blockquote>
	<p><i>&quot;This class defines a spherical bounding region which is defined by a 
	center point and a radius.&quot;</i></p>
</blockquote>
<p><font color="#FF0000"><b>The setInfluencingBounds method</b></font></p>
<p>According to Bouvier,</p>
<blockquote>
	<p><i>&quot;In Java 3D, the portion of a scene where visual objects are 
	illuminated by a particular light source is called that light object's 
	region of influence.&nbsp; The simplest region of influence for a light 
	source uses a Bounds object and the setInfluencingBounds() method of the 
	light.&nbsp; When a light source object's influencing bounds intersects the 
	bounds of a visual object, the light is used in shading the entire object.&nbsp; 
	The influencing bounds of a light determines which objects to light, not 
	which portions of objects to light.&quot;</i></p>
</blockquote>
<p>Listing 10 sets the center of the <b>BoundingSphere</b> object to the origin 
and sets the radius to 1.0.&nbsp; <i>(This bounding sphere includes all three 
spheres in the virtual universe.)</i>&nbsp; The <b>setInfluencingBounds</b> 
method is called on the <b>PointLight</b> object, passing a reference to the <b>
BoundingSphere</b> object as a parameter.&nbsp; Thus, all three spheres are 
illuminated in Figure 1.</p>
<p><font color="#FF0000"><b>Try this illumination experiment</b></font></p>
<p>If you modify the code in Listing 10 to move the center of the <b>
BoundingSphere</b> to the location of the <b>PointLight</b> object, and change 
the radius to a value of 2.45, then only the white and yellow spheres will be 
included in the <b>BoundingSphere</b>.&nbsp; In that case, the green sphere 
will not be illuminated.</p>
<p><font color="#FF0000"><b>Create and populate the 3D universe</b></font></p>
<p>Listing 11 begins by creating an empty Java 3D universe and associating it with the
<b>Canvas3D</b> object in the CENTER of the frame.</p>
<p>Then Listing 11 creates a <b>BranchGroup</b> object and adds the light and 
the yellow sphere to it.</p>

<p>
<b><a name="Listing_11">Listing 11</a>. Create and populate the 3D universe. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      SimpleUniverse simpleUniverse = 
                             new SimpleUniverse(canvas3D);
      
      //Create and populate a BranchGroup object.
      BranchGroup branchGroup = new BranchGroup();
      //Add objects to the branchGroup
      branchGroup.addChild(pointLight);
      branchGroup.addChild(yellowSph);
      //Note that adding the transform groups also adds
      // the objects contained in those groups.
<b>      branchGroup.addChild(whiteTransformGroup);
      branchGroup.addChild(greenTransformGroup);</b>
      
      //Specify the apparent location of the viewer's eye.
      simpleUniverse.getViewingPlatform().
                             setNominalViewingTransform();

      //Populate the universe by adding the branch group
      // that contains the objects.
      simpleUniverse.addBranchGraph(branchGroup);</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p><font color="#FF0000"><b>Nothing new so far</b></font></p>
<p>Down to this point, there is nothing new in Listing 11.&nbsp; This code is 
essentially the same as the code that I explained in the previous lesson titled 
&quot;Back to Basics in the Java 3D API&quot; <i>(see <a href="#Resources">Resources</a>)</i></p>
<p>The next two statements <i>(highlighted in boldface)</i> in Listing 11 are 
new to this lesson.&nbsp; Recall that I told you <a href="#The_TransformGroup">
earlier</a> that a <b>TransformGroup</b> object can also be added to a <b>
BranchGroup</b> object along with the ordinary objects that are added to the <b>
BranchGroup</b> object.&nbsp; This is where that happens.&nbsp; Listing 11 adds 
the <b>whiteTransformGroup</b> and <b>greenTransformGroup</b> objects to the <b>
BranchGroup</b> object in addition to the yellow sphere and the light.&nbsp; Then when 
the scene is rendered, the white sphere and the green sphere will be translated 
according to the <b>Transform3D</b> objects encapsulated in those two groups.</p>
<p>The remaining code in Listing 11 is essentially the same as the code that I 
explained in the previous lesson.</p>
<p><font color="#FF0000">
<b>The end of the program</b></font></p>
<p>The remaining program code is shown in Listing 12.</p>
<p>
<b><a name="Listing_12">Listing 12</a>. The end of the program. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>      //Do the normal GUI stuff.
      setTitle("Copyright 2007, R.G.Baldwin");
      setBounds(0,0,235,235);
      setVisible(true);
      
      //This listener is used to terminate the program 
      // when the user clicks the X-button on the Frame.
      addWindowListener(
        new WindowAdapter(){
          public void windowClosing(WindowEvent e){
            System.exit(0);
          }//end windowClosing
        }//end new WindowAdapter
      );//end addWindowListener
      
    }//end constructor
    //--------------------------------------------------//
    
  }//end inner class TheScene

}//end class Java3D004</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>
<p>Listing 12 takes care of some normal GUI stuff, and signals the end of the 
program.&nbsp; There is nothing in Listing 12 that is new to this lesson.&nbsp; 
Therefore, further explanation won't be necessary.</p>
<center>
<h2><a name="Run the program"></a>Run the program</h2>
</center>
<p>I encourage you to copy the code from Listing 13 into your text
editor, compile it, and execute it.&nbsp; Experiment with it, making
changes, and observing the results of your changes.&nbsp; Remember, you will need to 
download and install the Java 3D API plus either Microsoft DirectX or OpenGL to 
compile and execute these programs.&nbsp; See <a href="#Download">Downloads</a> for 
links to the web sites from which this material can be downloaded.</p>
<h2 align="center"><a name="Summary">Summary</a></h2>
<p>In this lesson, I presented and explained a Java 3D program that illustrate many of the features of Java 3D.&nbsp; I used the program to teach 
you how to use the following Java 3D classes <i>(that were not covered in the 
previous lesson)</i> along with various methods belonging to those classes:</p>
<ul>
	<li>com.sun.j3d.utils.geometry.Sphere</li>
	<li>com.sun.j3d.utils.geometry.Primitive</li>
	<li>javax.media.j3d.Appearance</li>
	<li>javax.media.j3d.Material</li>
	<li>javax.media.j3d.PointLight</li>
	<li>javax.media.j3d.Transform3D</li>
	<li>javax.media.j3d.TransformGroup</li>
	<li>javax.media.j3d.BoundingSphere</li>
	<li>javax.vecmath.Vector3f</li>
	<li>javax.vecmath.Point3f</li>
	<li>javax.vecmath.Point3d</li>
	<li>javax.vecmath.Color3f</li>
</ul>
<h2 align="center"><a name="Whats Next">What's next?</a></h2>
<p>The topic for the next lesson in this series will be simple animation in Java 3D.</p>
<h2 align="center"><a name="Download">Download</a></h2>
<ul>
	<li>
	<a href="http://java.sun.com/developer/onlineTraining/java3d/javaa3d.zip">
	Getting Started with the Java 3D&#8482; API</a>, A Tutorial for Beginners by 
	Dennis J Bouvier</li>
	<li>
	<a href="http://java.sun.com/products/java-media/3D/collateral/examples.zip">
	Source code</a> for example programs from the Bouvier tutorial above</li>
	<li><a href="http://java.sun.com/products/java-media/3D/download.html">
	Version 1.5.0</a> of the Java 3D API</li>
	<li><a href="http://java.sun.com/products/java-media/3D/download.html">
	Implementation documentation</a> for version 1.5.0 of the Java 3D API</li>
	<li>
	<a href="http://www.gamesforwindows.com/en-US/AboutGFW/Pages/DirectX10.aspx">
	Microsoft DirectX10</a></li>
	<li><a href="http://www.opengl.org/">OpenGL</a></li>
</ul>
<h2 align="center"><a name="Resources">Resources</a></h2>
<ul>
	<li><a href="http://java.sun.com/products/java-media/3D/">Main page</a> for 
	the Java 3D API</li>
	<li>Java 3D <a href="http://wiki.java.net/bin/view/Javadesktop/Java3DFAQ">
	FAQ</a></li>
	<li>
	<a href="http://java.sun.com/products/java-media/3D/reference/api/index.html">
	Online documentation</a> for Java 3D version 1.3 <i>(see
	<a href="#Download">Download</a> for v1.5.0 documentation)</i></li>
	<li><a href="http://java.sun.com/developer/onlineTraining/java3d/">Getting 
	Started with the Java 3D&#8482; API</a>, A Tutorial for Beginners by Dennis J 
	Bouvier</li>
	<li>
	<a href="http://download.java.net/media/java3d/javadoc/1.4.0/javax/media/j3d/doc-files/intro.html">
	Introduction to the Java 3D API</a> with links to other tutorial information</li>
	<li>Various Java 3D <a href="http://www.java3d.org/">resources</a></li>
	<li>Another Java 3D <a href="http://www.java3d.org/tutorial.html">tutorial</a></li>
	<li><a href="http://www.developer.com/java/other/article.php/626051">306</a> 
	Java 2D Graphics, Simple Affine Transforms&nbsp; </li>
	<li><a href="http://www.developer.com/java/other/article.php/3622246">1540</a> 
	Understanding Lighting in the Java 3D API</li>
	<li>
	<a href="1541%20Back%20to%20Basics%20in%20the%20Java%203D%20API,09/25/07,http:/www.developer.com/java/article.php/3701536">1541</a> Back to Basics in the Java 3D API</li>
</ul>
<center>
<h2> <a name="Complete Program Listings"></a>Complete program listing</h2>
</center>
A complete listing of the program discussed in this lesson is presented in 
Listing 13 below.
<p>
<b><a name="Listing_13">Listing 13</a>. Listing of the program named Java3D004. </b>
<table border="1" cols="1" width="477" bgcolor="#eeeeee">
  <tbody>
    <tr>
      <td>
      <pre>/*File Java3D004.java
Copyright 2007, R.G.Baldwin

The purpose of this program is to illustrate the use of 
the following classes of the Java 3D API:

com.sun.j3d.utils.universe.SimpleUniverse;
com.sun.j3d.utils.geometry.Sphere;
com.sun.j3d.utils.geometry.Primitive;
javax.media.j3d.Appearance;
javax.media.j3d.Material;
javax.media.j3d.PointLight;
javax.media.j3d.BranchGroup;
javax.media.j3d.Canvas3D;
javax.media.j3d.Transform3D;
javax.media.j3d.TransformGroup;
javax.media.j3d.BoundingSphere;
javax.vecmath.Vector3f;
javax.vecmath.Point3f;
javax.vecmath.Point3d;
javax.vecmath.Color3f;


Tested using Java SE 6, and Java 3D 1.5.0 running under
Windows XP.
*********************************************************/
import com.sun.j3d.utils.universe.SimpleUniverse;
import com.sun.j3d.utils.geometry.Sphere;
import com.sun.j3d.utils.geometry.Primitive;
import javax.media.j3d.Appearance;
import javax.media.j3d.Material;
import javax.media.j3d.PointLight;
import javax.media.j3d.BranchGroup;
import javax.media.j3d.Canvas3D;
import javax.media.j3d.Transform3D;
import javax.media.j3d.TransformGroup;
import javax.media.j3d.BoundingSphere;
import javax.vecmath.Vector3f;
import javax.vecmath.Point3f;
import javax.vecmath.Point3d;
import javax.vecmath.Color3f;
import java.awt.Frame;
import java.awt.Label;
import java.awt.BorderLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;


//This is the top-level driver class for this program.
// This program could be written without the use of this
// driver class.  However, I decided to keep it intact
// for future expansions that require a user input GUI.
public class Java3D004 extends Frame{
  public static void main(String[] args){
    Java3D004 thisObj = new Java3D004();
  }//end main
  //----------------------------------------------------//
  
  public Java3D004(){//constructor
    setTitle("Copyright 2007, R.G.Baldwin");
    add(new Label("You can build a GUI here."));
    setBounds(236,0,235,75);
    setVisible(true);
    
    //Instantiate the object in which the Java 3D
    // universe will be displayed.
    TheScene theScene = new TheScene();

    //This window listener is used to terminate the
    // program when the user clicks the X button.
    addWindowListener(
      new WindowAdapter(){
        public void windowClosing(WindowEvent e){
          System.exit(0);
        }//end windowClosing
      }//end new WindowAdapter
    );//end addWindowListener

  }//end constructor
  //----------------------------------------------------//

  //This is an inner class, from which the object in which
  // the Java 3D universe will be displayed is
  // instantiated.
  class TheScene extends Frame{
    
    TheScene(){//constructor
    
      //Create a Canvas3D object to be used for rendering
      // the Java 3D universe.  Place it in the CENTER of
      // the Frame.
      Canvas3D canvas3D = new Canvas3D(
              SimpleUniverse.getPreferredConfiguration());
      add(BorderLayout.CENTER,canvas3D);
    
      //Construct the objects that will be displayed in
      // the scene
      
      //Create and set properties for the large yellow
      // sphere.
      //Begin by describing the appearance of the surface
      // of the large sphere.  Make the color of the large
      // sphere yellow.
      Material yellowSphMaterial = new Material();
      yellowSphMaterial.setDiffuseColor(1.0f,1.0f,0.0f);
      Appearance yellowSphAppearance = new Appearance();
      yellowSphAppearance.setMaterial(yellowSphMaterial);

      //Now instantiate the large yellow sphere with 9
      // divisions.  Set the radius to 0.5. The reason for
      // setting GENERATE_NORMALS is unclear at this time.
      Sphere yellowSph = new Sphere(
                               0.5f,
                               Primitive.GENERATE_NORMALS,
                               9,
                               yellowSphAppearance);
      
      //Now create a small white sphere with 50 divisions.
      Material whiteSphMaterial = new Material();
      whiteSphMaterial.setDiffuseColor(1.0f,1.0f,1.0f);
      Appearance whiteSphAppearance = new Appearance();
      whiteSphAppearance.setMaterial(whiteSphMaterial);
      Sphere whiteSph = new Sphere(
                               0.10f,
                               Primitive.GENERATE_NORMALS,
                               50,
                               whiteSphAppearance);
      
      //Translate the location of the white sphere to make
      // it closer to the viewer than the yellow sphere at
      // the origin. Also move it down and to the left.
      Transform3D whiteTransform = new Transform3D();
      whiteTransform.setTranslation(
                          new Vector3f(-0.5f,-0.5f,0.5f));
      TransformGroup whiteTransformGroup = 
                                     new TransformGroup();
      whiteTransformGroup.setTransform(whiteTransform);
      whiteTransformGroup.addChild(whiteSph);
      
      
      //Now create a small green sphere located up to the
      // right and behind the yellow sphere.
      Material greenSphMaterial = new Material();
      greenSphMaterial.setDiffuseColor(0.0f,1.0f,0.0f);
      Appearance greenSphAppearance = new Appearance();
      greenSphAppearance.setMaterial(greenSphMaterial);
      Sphere greenSph = new Sphere(
                               0.10f,
                               Primitive.GENERATE_NORMALS,
                               50,
                               greenSphAppearance);
      Transform3D greenTransform = new Transform3D();
      greenTransform.setTranslation(
                           new Vector3f(0.5f,0.5f,-0.5f));
      TransformGroup greenTransformGroup = 
                                     new TransformGroup();
      greenTransformGroup.setTransform(greenTransform);
      greenTransformGroup.addChild(greenSph);      


      //Add a white point light, in front of, to the
      // right of, and above the yellow sphere.
      Color3f pointLightColor = 
                              new Color3f(1.0f,1.0f,1.0f);
      Point3f pointLightPosition = 
                              new Point3f(1.0f,1.0f,2.0f);
      Point3f pointLightAttenuation = 
                              new Point3f(1.0f,0.0f,0.0f);
      
      PointLight pointLight = new PointLight(
                                   pointLightColor,
                                   pointLightPosition,
                                   pointLightAttenuation);
      
      //Create a BoundingSphere object and use it to
      // determine which objects to light
      BoundingSphere boundingSphere = 
        new BoundingSphere(new Point3d(0.0,0.0,0.0), 1.0);
      pointLight.setInfluencingBounds(boundingSphere);
  
      //Create an empty Java 3D universe and associate it 
      // with the Canvas3D object in the CENTER of the
      // frame.
      SimpleUniverse simpleUniverse = 
                             new SimpleUniverse(canvas3D);
      
      //Create and populate a BranchGroup object.
      BranchGroup branchGroup = new BranchGroup();
      //Add objects to the branchGroup
      branchGroup.addChild(pointLight);
      branchGroup.addChild(yellowSph);
      //Note that adding the transform groups also adds
      // the objects contained in the groups.
      branchGroup.addChild(whiteTransformGroup);
      branchGroup.addChild(greenTransformGroup);
      
      //Specify the apparent location of the viewer's eye.
      simpleUniverse.getViewingPlatform().
                             setNominalViewingTransform();

      //Populate the universe by adding the branch group
      // that contains the objects.
      simpleUniverse.addBranchGraph(branchGroup);
      
      //Do the normal GUI stuff.
      setTitle("Copyright 2007, R.G.Baldwin");
      setBounds(0,0,235,235);
      setVisible(true);
      
      //This listener is used to terminate the program 
      // when the user clicks the X-button on the Frame.
      addWindowListener(
        new WindowAdapter(){
          public void windowClosing(WindowEvent e){
            System.exit(0);
          }//end windowClosing
        }//end new WindowAdapter
      );//end addWindowListener
      
    }//end constructor
    //--------------------------------------------------//
    
  }//end inner class TheScene

}//end class Java3D004</pre>
      </td>
    </tr>
  </tbody>
</table>
</p>

<p> </p>
<hr align="center" size="3" width="100%">
<h2 align="center"><a name="Copyright">Copyright</a></h2>
<p>Copyright 2007, Richard G. Baldwin.&nbsp; Reproduction in whole or in part in any 
form or medium without express written permission from Richard Baldwin is 
prohibited. </p>
<h2 align="center"><a name="About_the_author">About the author</a></h2>
<b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> is a 
college professor (at Austin Community College in Austin, TX) and private 
consultant whose primary focus is a combination of Java, C#, and XML. In 
addition to the many platform and/or language independent benefits of Java and 
C# applications, he believes that a combination of Java, C#, and XML will become 
the primary driving force in the delivery of structured information on the Web.</i>    
<p><i>Richard has participated in numerous consulting projects and he 
frequently provides onsite training at the high-tech companies located in and 
around Austin, Texas.&nbsp; He is the author of Baldwin's Programming
<a href="http://www.dickbaldwin.com">Tutorials</a>, which have gained a 
worldwide following among experienced and aspiring programmers. He has also 
published articles in JavaPro magazine.</i> </p>
<p><i>In addition to his programming expertise, Richard has many years of 
practical experience in Digital Signal Processing (DSP).&nbsp; His first job after he 
earned his Bachelor's degree was doing DSP in the Seismic Research Department of 
Texas Instruments.&nbsp; (TI is still a world leader in DSP.)&nbsp; In the following 
years, he applied his programming and DSP expertise to other interesting areas 
including sonar and underwater acoustics.</i> </p>
<p><i>Richard holds an MSEE degree from Southern Methodist University and has 
many years of experience in the application of computer technology to real-world 
problems.</i> </p>
<p><i><a href="mailto:baldwin@dickbaldwin.com">Baldwin@DickBaldwin.com</a></i>
</p>
<p><b>Keywords</b><br>
&quot;java 3D&quot; SimpleUniverse ColorCube BranchGroup canvas setNominalViewingTransform 
getPreferredConfiguration SimpleUniverse Sphere Primitive Appearance Material 
PointLight BranchGroup Canvas3D Transform3D TransformGroup BoundingSphere 
Vector3f Point3f Point3d Color3f </p>
<p>-end- </p>
<p> <br>
&nbsp; </p>
<br>
<br>
<br>
<br>
</body>
</html>
