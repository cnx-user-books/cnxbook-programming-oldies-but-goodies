<!DOCTYPE doctype PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
                                                                    
  <meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
                                                                    
  <meta name="GENERATOR" content="Microsoft FrontPage 5.0">
  <title>... in Java by Richard G Baldwin</title>
</head>
  <body link="#dd0000" vlink="#0000ff" alink="#ff0000" lang="EN-US">
                                                                  
<h2>Types, Classes, and Objects</h2>
                 <i>Baldwin explains the concept of a class and its objects 
from the viewpoint of a        user-defined type.&nbsp; He contrasts user-defined 
types with primitive types, explains what is   commonly   meant by type in 
type-sensitive languages, and explains the similarity between variables and 
objects.</i>                
<p><b>Published:</b>&nbsp; July 1, 2003<br>
                <b>By <a href="mailto:Baldwin@DickBaldwin.com">Richard G. 
Baldwin</a></b>         </p>
                               
<p>Java Programming Notes # 905</p>
                               
<ul>
                 <li> <a href="#Preface">Preface</a></li>
                 <li> <a href="#Preview">Preview</a></li>
                  <li> <a href="#Variable">Variables</a></li>
            <li><a href="#Type">Types</a></li>
                               
  <ul>
            <li><a href="#Primitive%20Types">Primitive Types</a></li>
            <li><a href="#User-Defined%20%28class%29%20Types">User-Defined
 Types</a><br>
            </li>
                               
  </ul>
                  <li><a href="#Using_the_String_and_IO_Classes">Using the
 String  and I/O Classes</a><br>
      </li>
       <li><a href="#Run%20the%20program">Run the Programs</a></li>
                  <li> <a href="#Summary">Summary</a></li>
                  <li> <a href="#Complete%20Program%20Listings">Complete
Program     Listings</a></li>
                                 
</ul>
                                  
<hr size="3" width="100%" align="center">                 
<center>                 
<h2> <a name="Preface"></a>Preface</h2>
                </center>
                                 
<p><font color="#ff0000"><b>The situation</b></font></p>
                             
<p>Many universities, colleges, and high schools <i>(including the college
        where I teach)</i> attempt to teach non-object-oriented <i>(procedural)</i>
        programming fundamentals using an object-oriented   programming 
   language such as C++, Java, or C#.&nbsp; This results in  some significant
problems.</p>
                                
<p><font color="#ff0000"><b>The problem</b></font><br>
               </p>
                             
<p>The main problem is that persons who are attempting to learn programming 
 fundamentals       are confronted with requirements to use objects, <i>(such 
 as I/O objects      and String objects)</i> without an understanding of what
 they are doing    when  they use those objects.&nbsp; This is a de-motivator 
 for those persons who  prefer to understand what they are doing instead 
of simply doing things    by  rote.<br>
                </p>
                               
<p><font color="#ff0000"><b>Help is available</b></font><br>
               </p>
                             
<p>This tutorial lesson is designed to help  persons in this  situation by
giving them an understanding of what they  need to  know   in  order to use
objects to the minimal extent necessary for  courses  in programming fundamentals.
&nbsp;The tutorial is also designed to help those persons who are trying
to teach themselves how to become programmers.<br>
               </p>
                             
<p><font color="#ff0000"><b>Supplemental material</b></font><br>
               </p>
                             
<p>In some cases, textbooks and professors explain classes and objects away
 by simply saying,    <i>"Don't   worry about why it works.&nbsp; Just do 
it the way I tell you    to do it."</i><br>
               </p>
                             
<p>In other cases, textbooks and professors       attempt to explain classes
 and objects, but fail to get  the message across for a variety of reasons.<br>
  </p>
   
<p>The material in this lesson is designed as a supplement to help persons
who find themselves in either of the situations listed above. </p>
                             
<p>For further reading, see my extensive collection of online Java tutorials
       at <a href="http://softwaredev.earthweb.com/java">Gamelan.com</a>.
A  consolidated      index is available at <font color="#000000"> <a
 href="http://www.DickBaldwin.com">www.DickBaldwin.com</a>.<br>
</font></p>
<p><b><font color="#ff0000">Study hint</font></b><br>
  </p>
<p>You may find it useful to open another copy of this lesson in a separate
        browser window.&nbsp; That will make it easier for you to scroll
back     and   forth  among the different figures and listings while you
are reading     about them. </p>
                               
<h2 align="center"><font color="#000000"> <a name="Preview">Preview</a></font></h2>
                                 
<p><font color="#ff0000"><b>Will avoid the commonly used approach</b></font><br>
               </p>
                             
<p>In explaining classes and objects, I will not revert to the commonly used 
approach of talking about a class such as the <b>Vehicle </b>class, which 
can be subclassed into a <b>Car</b> class and a <b>Truck </b>class, and the 
further subclassing of the <b>Car </b>class into a <b>SportsCar </b>class 
and a <b>FamilyCar </b>class.&nbsp; Certainly such analogies are important 
for those persons who are making a serious attempt to understand <i>encapsulation, 
inheritance, </i>and <i>polymorphism, </i>the three pillars of object-oriented 
programming.<i>&nbsp; </i>However, for those persons who simply need to understand
what it means to invoke a method on an object of the <b>String </b>class,
discussions of inheritance are a distraction and not a help.<br>
               </p>
                             
<p><font color="#ff0000"><b>Will explain from the viewpoint of type</b></font><br>
               </p>
                             
<p>Rather, I will explain a class and its objects from the viewpoint of a 
       non-primitive, user-defined type, and the operations that can be performed
 on an entity       of that type.&nbsp; Before doing that, however, I will
 explain what is   commonly   meant by <i>type </i>in <i>type-sensitive</i>
 languages. <i>(Every   modern  programmer needs to understand the concept
 of type, so there   is no  better time to learn about type than the present.)</i><br>
              </p>
                           
<p>To lay the groundwork for the discussion of types, I will explain what 
       we mean by variables and objects, and the similarity between the two.</p>
   
<p>I will discuss and explain some of the common primitive types such as
<b>short</b>, <b>int</b>, <b>double</b>, <b>boolean</b>, and <b>char</b>,
and will then extend the concept of type to classes such as the <b>String</b>
class.&nbsp; I will discuss some of the operations that can be performed
on entities of the primitive types, and will relate that to some of the operations
that can be performed on an entity of type <b>String</b>.<br>
               </p>
                                                      
<p><font color="#ff0000"><b>Standard input and output</b></font><br>
               </p>
                             
<p>I will also discuss and explain certain aspects of objects used to support 
       <i>standard input and output.</i><br>
               </p>
                             
<p><font color="#ff0000"><b>Intended to be general in nature</b></font><br>
               </p>
                             
<p>To a large extent, this tutorial will be couched within the Java programming 
       language, because that is the language that I know best.&nbsp; However, 
      the concepts that I will discuss are intended to be applicable to persons
using C++ and C# as well. <br>
               </p>
                               
<center>                 
<h2> <font color="#000000"><a name="Variable"></a>Variables</font></h2>
                </center>
                                                      
<p>Let's go back to around the ninth grade where you probably learned  a little
about algebra and a little about geometry.&nbsp; Hopefully, you will remember
the formula for calculating the area of a circle, as shown in Figure 1. </p>
                                        
<table border="1" cols="1" width="400" bgcolor="#ccffff"
 cellpadding="10" align="center">
                <tbody>
                   <tr>
                <td>                                                    
                               
      <div align="center">                      </div>
                                                                        
                      
      <div align="center"><b>The area of a circle</b></div>
                                                                        
                      
      <pre>a = pi * r * r<br><br>where:  a is the area of a circle<br>        pi is the constant 3.141592653589793<br>        r is the radius<br><br><b><font
 face="Courier New,Courier">Figure 1 Calculating the area of a circle</font></b></pre>
                </td>
                </tr>
                                                             
  </tbody>               
</table>
                                  
<p>The formula in Figure 1 tells us that the area of a circle is equal to 
     the constant pi multiplied by the radius squared.&nbsp; <i>(Note that 
 the    true value of pi actually contains more digits than are shown in Figure
   1.)</i><br>
  </p>
   
<blockquote><i> (As is the case in programming, Figure 1 uses an     asterisk
 (*) to indicate multiplication, as opposed to the use of an "x"    or a
dot  that you probably used in your algebra class.)</i><font
 color="#ff0000"><b></b></font><br>
            </blockquote>
                                        
<p><font color="#ff0000"><b>Constants and variables</b></font><br>
  </p>
   
<p>In the formula in Figure 1, <b>pi </b>is a named constant whose value is
shown.&nbsp; Constants in programming mean pretty much the same thing that
they mean in algebraic formulas. That is, the value of a constant never  changes.</p>
                     
<p>The terms <b>a</b> and <b>r</b> in the formula in Figure 1 are <i>variables.</i> 
     &nbsp;Going further, your algebra teacher may have told you that <b>a</b> 
     is the dependent variable while <b>r</b> is an independent variable. 
That     is to say, the value of the area is dependent on the value that you
assign     to the radius before you calculate the area.<br>
           </p>
                     
<p>Variables also mean pretty much the same thing in programming that they 
     mean in algebraic formulas.&nbsp; Every variable has a name <i>(such 
as   <b>a</b>  or <b>r</b>)</i> and the value of the variable can change. 
&nbsp;In   programming,  this means that the value can change as the program 
executes   over time.<br>
           </p>
                     
<p><font color="#ff0000"><b>A variable is a named pigeonhole<br>
           </b></font></p>
                     
<p>You can think of a variable in an algebraic formula as the name of a value 
     that can change. You can think of a variable in programming as the name 
   of  a pigeonhole in memory, which can be used to store values that can 
change     as the program executes.<br>
           </p>
                     
<p><font color="#ff0000"><b>A program named Area01</b></font><br>
           </p>
                     
<p>Let's take a look at the central part of a program that calculates and 
     displays the area of a circle for different radius values, as shown in
  Listing   1.&nbsp; <i>(The entire program is shown in Listing 9 near the
  end of the   lesson.)</i>&nbsp;</p>
                     
<table border="1" cols="1" width="400" bgcolor="#ffff00">
                 <tbody>
                    <tr>
                 <td>                                                   
                                                             
      <pre>    r = 1.0;<br>    a = pi * r * r;<br>    display(r,a);<br><br><b><font
 face="Courier New,Courier">Listing 1</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
           <br>
           The program code shown in Listing 1 begins by setting the value
 of  the   radius  variable named <b>r</b> to 1.0.&nbsp; Then it calculates
 the  value   of the  area, and stores that value in the area variable named
 <b>a</b>.   &nbsp;Finally,  it displays the current values stored in the
variables named   <b>r</b> and  <b>a</b>.<br>
           <br>
           <font color="#ff0000"><b>And the answer is ...</b></font>    
      
<p>Since you can probably do the arithmetic shown in Listing 1 in your head, 
     it should come as no surprise to you that the output produced by the 
code     in Listing 1 is shown in Figure 2.<br>
           </p>
                       
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                 <tbody>
                   <tr>
                <td>                                                    
                                                     
      <pre>For radius = 1.0, area = 3.141592653589793<br><br><b><font
 face="Courier New,Courier">Figure 2</font></b></pre>
                </td>
                </tr>
                                                             
  </tbody>               
</table>
                                   
<p><font color="#ff0000"><b>Calculate values for different radii</b></font><br>
           </p>
                       
<p>The code in Listing 2 assigns two new values, 1.5 and 2.0, to the variable 
     named <b>r</b>.&nbsp; Each time a new value is assigned to the variable 
   <b>r</b>,  a new area is calculated and the value is assigned to the variable 
   named <b>a</b>.&nbsp; Then the values for <b>r</b> and <b>a</b> are displayed.&nbsp;</p>
                     
<table border="1" cols="1" width="400" bgcolor="#ffff00">
                  <tbody>
                    <tr>
                 <td>                                                   
                                                             
      <pre>    r = 1.5;<br>    a = pi * r * r;<br>    display(r,a);<br><br>    r = 2.0;<br>    a = pi * r * r;<br>    display(r,a);<br><br><b><font
 face="Courier New,Courier">Listing 2</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                     
<p>Once again, you probably won't be surprised to learn that the value of 
     the area for each of the different radius values is as shown in Figure 
  3.</p>
                     
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                 <tbody>
                   <tr>
                <td>                                                    
                                                     
      <pre>For radius = 1.5, area = 7.0685834705770345<br>For radius = 2.0, area = 12.566370614359172<br><br><b><font
 face="Courier New,Courier">Figure 3</font></b></pre>
                </td>
                </tr>
                                                             
  </tbody>               
</table>
                                   
<p>Now, let's set the concept of variables aside for a few minutes and discuss
     the concept of <i>type.</i></p>
                       
<h2 align="center"> &nbsp;<a name="Type"></a>Types<br>
           </h2>
                   
<p><b><font color="#ff0000">Type-sensitive languages</font></b> </p>
                   
<p><font color="#000000">Java, C++, C#, and some other modern programming
     languages make heavy use of a concept that we refer to as <i>type</i>,
  or   <i>data type</i>.&nbsp; We refer to those languages as <i>type-sensitive</i>
     languages.</font> </p>
                   
<p><font color="#000000">Not all languages are type-sensitive languages.&nbsp; 
     In particular, some languages hide the concept of type from the programmer 
     and automatically deal with <i>type</i> issues behind the scenes.</font> 
    </p>
                   
<p><b><font color="#ff0000">So, what do we mean by type?</font></b> </p>
                   
<p><font color="#000000">One analogy that comes to my mind is international 
     currency.&nbsp; For example, many years ago, I spent a little time in 
 Japan    and quite a long time on an island named Okinawa <i>(I believe that
  Okinawa is now part of Japan).</i></font> </p>
                   
<p><b><font color="#ff0000">Types of currency</font></b> </p>
                   
<p><font color="#000000">At that time, as now, the type of currency used
in the United States was the dollar.&nbsp; The type of currency used in Japan
     was the <i>yen</i>, and the type of currency used on the island of Okinawa
     was also the <i>yen</i>.&nbsp; However, even though two of those currencies
     had the same name, they were different types of currency, as determined
   by  the value relationships between them.</font> </p>
                   
<p><b><font color="#ff0000">The exchange rate</font></b> </p>
                   
<p><font color="#000000">As I recall, at that time, the exchange rate between 
     the Japanese yen and the U.S. dollar was 360 yen to the dollar.&nbsp; 
 The    exchange rate between the Okinawian yen and the U.S. dollar was 120 
 yen  to the dollar.&nbsp; This suggests that the exchange rate between the 
 Japanese    yen and the Okinawian yen would have been 3 Japanese yen to the
 Okinawian    yen.</font> </p>
                   
<p><b><font color="#ff0000">Analogous to different types of data</font></b> 
     </p>
                   
<p><font color="#000000">So, why am I telling you this?&nbsp; I am telling 
     you this to illustrate the concept that different types of currency are
   roughly analogous to different data types in programming.</font> </p>
                   
<p><b><font color="#ff0000">Purchasing transactions were type sensitive</font></b> 
     </p>
                   
<p><font color="#000000">In particular, because these were three different 
     types of currency, the differences in the types had to be taken into 
account     in any purchasing transaction to determine the price in that particular
  currency.&nbsp; In other words, the purchasing process was sensitive to
the  type of currency being used for the purchase <i>(type sensitive)</i>.</font> 
   </p>
                   
<p><b><font color="#ff0000">Different types of data</font></b> </p>
                   
<p><font color="#000000">Type-sensitive programming languages deal with different
     types of data as well.&nbsp; Some data types involve whole numbers only
   <i>(no  fractional parts are allowed). </i>We generally refer to these
as   <i>integer  </i>types.</font> </p>
                   
<p><font color="#000000">Other data types involve numbers with fractional 
     parts.&nbsp; We generally refer to these types as <i>floating point</i> 
   types, because a decimal point can float back and forth, separating the 
 whole  number part from the fractional part. <i>(After a while, we get lazy 
 and refer to these simply as floating types.)</i></font> </p>
                   
<p><font color="#ff0000"><b>An example of integer and floating-point types</b></font><br>
        </p>
               
<p>Figure 4 contains a description of a problem involving both integer types
    and floating-point types.</p>
                 
<div align="center"><font color="#000000"> </font></div>
                 
<div align="center"> </div>
                 
<div align="center"> </div>
                 
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                  <tbody>
                   <tr>
                <td>Consider the problem of determining the number of cans
 of  paint   that must be purchased in order to paint all 15 tables in a
restaurant.   The  number of tables is an integer type.&nbsp; We don't want
to paint 14.6   tables  or 15.7 tables.&nbsp; We want to paint exactly 15
tables.       <i>(We  don't want to have a fractional part of a table left
unpainted.)</i><br>
               <br>
         We know that one can of paint will cover 3.6 tables. The number
of  tables   that can be painted with one can of paint is a floating-point
value  because   it contains a whole number part and a fractional part.<br>
               <br>
               A little arithmetic tells us that 4.167 cans of paint will 
be  required  to paint all 15 tables.&nbsp; This is also a floating-point 
value,   because  it has a whole number part and a fractional part.<br>
               <br>
         However, the man at the hardware store is unwilling to sell us 4.167 
  cans   of paint.&nbsp; He requires us to specify the number of cans of paint
  as  an integer value. In this case, we will need to purchase 5 cans of
paint   in order to have enough paint available to paint all 15 tables, with
a little     paint left over at the end.<br>
               <br>
                                                                       
      <div align="center">Figure 4 Calculating the number of cans of paint 
    to purchase       </div>
               </td>
                </tr>
                                                             
  </tbody>               
</table>
         <br>
         <font color="#ff0000"><b>Other data types</b></font>          
<p><font color="#000000">Although&nbsp;all data in a computer is stored in 
numeric    format, some data types conceptually have nothing to do with numeric 
values,    but deal only with the concept of <i>true</i> or <i>false</i> 
or with the   concept of the letters of the alphabet and the punctuation characters.</font>
    &nbsp;I will have more to say about these types later.<font
 color="#000000"><br>
          </font> </p>
                   
<p><b><font color="#ff0000">Type specification</font></b> </p>
                   
<p><font color="#000000">For every different type of data used with a particular 
     programming language, there is a specification somewhere that defines 
 two    important characteristics of the type:</font> </p>
                   
<blockquote>                           
  <p><font color="#000000">1.&nbsp; The set of all possible data values that 
can be stored in an <i>instance</i> of the type <i>(we will learn some other 
names for instance later)</i>?</font> <br>
          <font color="#000000">2.&nbsp; The operations that you can perform 
on that instance alone, or   in combination  with other instances? <i>(For 
example, operations include   addition, subtraction,  multiplication, division, 
etc.)</i></font> </p>
         </blockquote>
                   
<p><b><font color="#ff0000">What do I mean by <i>instance</i>?</font></b> 
     <br>
          &nbsp;<br>
         Think of the type specification as being analogous to the plan or
 blueprint    for a model airplane.&nbsp; Assume that you build three model
 airplanes   from the same set of plans.&nbsp; You will have created three
 <i>instances</i>     of the single set of plans. </p>
                         
<p>We might say that an instance is the physical manifestation of a plan or
a type.</p>
                     
<p><b><font color="#ff0000">Using mixed types</font></b> </p>
                   
<p><font color="#000000">Somewhat secondary to this specification, but also
     extremely important, is a set of rules that defines what happens when
 you    perform an operation involving mixed types <i>(such as making a purchase 
    using some yen currency in combination with some dollar currency).</i> 
 &nbsp;However, that  is beyond the scope of this tutorial, so I won't get 
into it here.</font>   </p>
                   
<p><b><font color="#ff0000">An example, the <i>short </i>data type</font></b> 
    </p>
                   
<p><font color="#000000">There is a data type in Java, C++, and C# known
as  <b>short</b>.&nbsp; If you have an instance of the <b>short</b> type
in Java, the set of all possible values that you can store in that instance 
    is the set of all whole numbers ranging from -32,768 to +32,767.</font> 
  </p>
                   
<p><font color="#000000">This constitutes a set of 65,536 different values, 
     including the value zero.&nbsp; No other value can be stored in an instance
    of the type <b>short</b>.&nbsp; For example, you cannot store the value
  35,000  in an instance of the type <b>short</b> in Java.&nbsp; If you need
  to store  that value, you will have to use some type other than <b>short</b>.</font> 
     </p>
                   
<p><b><font color="#ff0000">Sort of like an odometer</font></b> </p>
                   
<p><font color="#000000">The <b>short</b> type is an integer type.&nbsp;
Integer types are somewhat analogous to the odometer in your     car <i>(the
thing that records how many miles the car has been driven).</i>&nbsp;   
  For example, depending on the make and model of car, there is a specified
     set of values that can appear in the odometer.&nbsp; The value that
appears      in the odometer depends on how many miles your car has been
driven.</font>      </p>
                   
<p><font color="#000000">It is fairly common for an odometer to be able to
     store and to display the set of all positive values ranging from zero
 to   99,999.&nbsp; If your odometer is designed to store that set of values
 and   if you drive your car more than 99,999 miles, it is likely that the
 odometer   will roll over and start back at zero after you pass the 99,999-mile
 mark.&nbsp;   In other words, that particular type of odometer does not
have the ability to store   a value of 100,000 or more miles.&nbsp; Once
you pass the 99,999 mark, the data stored   in the odometer is corrupt.&nbsp;
It no longer represents the true number of miles for which the car has been
driven.</font> </p>
                   
<p><b><font color="#ff0000">A word or two about operations</font></b>  </p>
                   
<p><font color="#000000">Assume that you have two instances of the type <b>short</b> 
     in a Java program.&nbsp; Here are some of the operations that you can 
perform  on   those instances:</font> </p>
                   
<ul>
            <li> <font color="#000000">You can add them together.</font></li>
            <li> <font color="#000000">You can subtract one from the other.</font></li>
            <li> <font color="#000000">You can multiply one by the other.</font></li>
            <li> <font color="#000000">You can divide one by the other.</font></li>
            <li> <font color="#000000">You can compare one with the other 
to  determine    which is algebraically larger.</font></li>
                   
</ul>
           <font color="#000000">There are other operations that are allowed
  as  well.&nbsp;   In fact, there is a well defined set of operations that
  you  are allowed to perform on those instances, and that set of operations
  is defined in the  specification for the type <b>short</b>.</font>    
      
<p><b><font color="#ff0000">What if you want to do something different?</font></b> 
     </p>
                   
<p><font color="#000000">If you want to perform an operation that  is not
    allowed by the type specification, then you will have to find another
 way   to accomplish that purpose.</font> </p>
                   
<p><font color="#000000">For example, some programming languages allow you
     to raise whole-number types to a power <i>(example:&nbsp; four squared,
   six cubed, nine to the fourth power, etc.).</i>&nbsp; However, that operation
    is not allowed by the Java specification for the type <b>short</b>.&nbsp;
    If you need to do that operation with a data value of the Java <b>short</b>
    type, you must find another way to do it.</font> </p>
                   
<p><b><font color="#ff0000">Two major categories of type</font></b> </p>
                   
<p><font color="#000000">Java data types can be subdivided into two major 
     categories:</font> </p>
                   
<ul>
            <li> <font color="#000000">Primitive types</font></li>
            <li> <font color="#000000">User-Defined <i>(class)</i> types</font></li>
                   
</ul>
           <font color="#000000">These two categories are discussed in more 
 detail   in the following sections.</font>                 
<h2> <a name="Primitive Types"></a><font color="#000000">Primitive Types</font></h2>
            <b><font color="#ff0000">Java, C++, and C# are extensible programming
    languages</font></b>           
<p>What this means is that there is a core component to the language that 
     is always available.&nbsp; Beyond this, individual programmers can extend 
     the language to provide new capabilities.&nbsp; The primitive types discussed
     in this section are the types that are part of the core language.&nbsp; 
   A later section will discuss user-defined types that become available when
   a programmer extends the language. </p>
                   
<p><b><font color="#ff0000">Four categories of primitive types</font></b> 
</p>
                   
<p>It seems that when teaching programming, I constantly find myself subdividing 
     topics into sub-topics.&nbsp; I am going to subdivide the topic of primitive
    types into four categories: </p>
                   
<ul>
            <li> Whole-number <i>(integer)</i> types</li>
            <li> Floating-point types</li>
            <li>The character type</li>
            <li>The boolean type</li>
                   
</ul>
 
<h3>Whole-number <i>(integer)</i> types</h3>
 Hopefully this categorization will make it possible for me to explain  
 these  types in a way that is easy for you to understand.              
            
<p>The whole-number types, often called integer types, are probably the easiest
     to understand.&nbsp; These are types that can be used to represent data
   without  fractional parts. </p>
                   
<p><b><font color="#ff0000">Purchasing applesauce and hamburger</font></b>
    </p>
                   
<p>For example, consider purchasing applesauce and hamburger.&nbsp; At the
     grocery store where I shop, I am allowed to purchase applesauce by the
  jar, only  in whole-number or integer quantities. </p>
                   
<p>For example, the grocer is happy to sell me one jar of applesauce and is
even happier to sell me 36 jars of applesauce.&nbsp; However, she would be
very unhappy if I were to open a jar of applesauce in the store and attempt
     to purchase 6.3 jars of applesauce. </p>
                      
<p>A count of the number of jars of applesauce that I purchase is somewhat 
     analogous to the concept of whole-number data types in Java.&nbsp; Applesauce 
     is not available in fractional parts of jars, at least not at the store
    where I purchase my groceries. </p>
                      
<p>On the other hand, the grocer is perfectly willing to sell me 6.3 pounds 
     of hamburger.&nbsp; This is somewhat analogous to floating-point data 
 types    in Java. </p>
                   
<p><b><font color="#ff0000">Accommodating applesauce and hamburger in a program</font></b> 
     </p>
                   
<p>Therefore, if I were writing a program dealing with quantities of applesauce 
     and hamburger, I might elect to use a whole number type to represent 
jars of applesauce and to use a floating-point type to represent pounds of
 hamburger.   </p>
                   
<p><b><font color="#ff0000">Different whole-number types</font></b> </p>
                   
<p>Four different whole-number types are built into the Java language:   
</p>
                   
<ul>
            <li> byte</li>
            <li> short</li>
            <li> int</li>
            <li> long</li>
                   
</ul>
           The four types differ primarily in terms of the range of values
 that   they   can accommodate and the amount of computer memory required
to store   instances   of the types.&nbsp; <i>(Note that similar types exist
 in C++  and C#, with similar, but not identical characteristics.)</i>  
        
<p><b><font color="#ff0000">Differences in operations</font></b> </p>
                   
<p>Although there are some subtle differences among these four types in terms
    of the operations that you can perform on them, I will defer a discussion
    of those differences until a more advanced lesson <i>(for example some
 operations   require instances of the <b>byte</b> and <b>short</b> types
to be converted   to type <b>int</b> before the operation takes place).</i>
</p>
                   
<p><b><font color="#ff0000">Algebraically&nbsp;signed values</font></b> </p>
                   
<p>All four of these types can be used to represent algebraically signed values
ranging from a specific negative value to a specific positive value. </p>
                   
<p><b><font color="#ff0000">Range of the byte type</font></b> </p>
                   
<p>For example, the <b>byte</b> type can be used to represent the set of whole
numbers ranging from -128 to +127 inclusive.&nbsp; <i>(<font
 color="#000000">This constitutes a set of 256 different values, including
     the value zero.)</font></i> </p>
                   
<p><font color="#000000">T</font>he <b>byte</b> type cannot be used to represent
     any value outside this range.&nbsp; For example, the <b>byte</b> type
 cannot    be used to represent either -129 or +128. </p>
                   
<p><b><font color="#ff0000">No fractional parts allowed by byte type</font></b> 
     </p>
                   
<p>Also, the <b>byte</b> type cannot be used to represent fractional values 
     within the allowable range.&nbsp; For example, the <b>byte</b> type cannot
     be used to represent the value of 63.5 or any other value that has a
fractional     part. </p>
                   
<p><b><font color="#ff0000">Like a strange odometer</font></b> </p>
                   
<p>To form a crude analogy, the <b>byte</b> type is sort of like a strange 
     odometer in a new <i>(and unusual)</i> car that shows a mileage value 
 of  -128 when  you first purchase the car.&nbsp; As you drive the car, the 
 negative  values  shown on the odometer increment toward zero and then pass 
 zero.&nbsp;  Beyond  that point they increment up towards the value of +127. 
 </p>
                   
<p><b><font color="#ff0000">Oops, numeric overflow!</font></b> </p>
                   
<p>When the value passes <i>(or attempts to pass)</i> +127 miles, something
    bad happens.&nbsp; <i>(The value rolls over and starts at -128 again.) 
</i>From   that point forward, the value shown on the odometer is not a reliable 
indicator    of the number of miles that the car has been driven. </p>
                   
<p><b><font color="#ff0000">Ranges for each of the whole-number types</font></b> 
     </p>
                   
<p>The table in Figure 5 shows the range of values that can be accommodated 
     by each of the four whole-number types supported by the Java programming 
    language.</p>
             
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
         <tbody>
           <tr>
             <td><font face="Courier New, Courier, monospace"><small><b>
                                                  byte</b><br>
        -128 to +127<br>
              <br>
               <b>short</b><br>
        -32768 to +32767<br>
              <br>
               <b>int</b><br>
        -2147483648 to +2147483647<br>
              <br>
               <b>long</b><br>
        -9223372036854775808 to +9223372036854775807</small><br>
              <br>
             </font>                                                 
      <div align="center"><small><font
 face="Courier New, Courier, monospace"><b>  Figure 5 Ranges for integer types</b></font>
      </small></div>
             </td>
        </tr>
                                                             
  </tbody>               
</table>
                                          
<p><b><font color="#ff0000">Can represent some fairly large values</font></b> 
     </p>
                   
<p>As you can see, the <b>int</b> and <b>long</b> types can represent some 
     fairly large values.&nbsp; However, if your task involves calculations 
  such  as distances in interstellar space <i>(or the U.S. national debt),</i> 
  these ranges  probably won't accommodate your needs.&nbsp; This will lead 
  you to consider  using the floating-point types discussed in the upcoming 
  sections.</p>
             
<p><font color="#ff0000"><b>Operations on integer types</b></font><br>
       </p>
             
<p>As mentioned earlier, some of the operations that can be performed on integer
types are as follows:<br>
               </p>
             
<ul>
         <li> <font color="#000000">You can add them together.</font></li>
         <li> <font color="#000000">You can subtract one from the other.</font></li>
         <li> <font color="#000000">You can multiply one by the other.</font></li>
         <li> <font color="#000000">You can divide one by the other.</font></li>
         <li> <font color="#000000">You can compare one with the other to 
determine      which is algebraically larger.</font></li>
             
</ul>
                        
<p>I will discuss other operations that can be performed on whole-number types
 in a subsequent lesson. </p>
                   
<h3>Floating-point types<br>
  </h3>
                   
<p>Floating-point types are a little more complicated than whole-number types.&nbsp;
     I found the following definition of floating-point in the <i>Free On-Line
     Dictionary of Computing</i> at this <a
 href="http://foldoc.doc.ic.ac.uk/foldoc/foldoc.cgi?floating+point">URL</a>: 
     </p>
                   
<blockquote><i>A number representation consisting of a mantissa, M, an exponent,
     E, and an (assumed) radix (or "base") . The</i> <br>
            <i>number represented is M*R^E where R is the radix - usually 
ten   but   sometimes 2.</i></blockquote>
           <b><font color="#ff0000">So what does this really mean?</font></b> 
            
<p>Assuming a base or radix of 10, <i>(which is probably what you have been 
   using since your first kindergarten class),</i> I will attempt to explain 
   this concept using an example. </p>
                   
<p>Consider the following value: &nbsp;623.57185 </p>
                        
<p>I can represent this value in any of the following different ways <i>(where 
   * indicates   multiplication):</i><br>
       </p>
             
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                    <tbody>
                   <tr>
                <td>                                                    
                                                            
      <p><tt>.62357185*1000</tt> <br>
          <tt>6.2357185*100</tt> <br>
          <tt>62.357185*10</tt> <br>
          <tt>623.57185*1</tt> <br>
          <tt>6235.7185*0.1</tt> <br>
          <tt>62357.185*0.01</tt> <br>
          <tt>623571.85*0.001</tt> <br>
          <tt>6235718.5*0.0001</tt> <br>
          <tt>62357185.*0.00001</tt> </p>
                                                         
      <div align="center">                                              
  
      <pre><b><font face="Courier New,Courier">Figure 6 Different ways to represent a value</font></b></pre>
                </div>
             </td>
                </tr>
                                                             
  </tbody>               
</table>
                                           
<p>In other words, I can represent the value as a <i>mantissa</i> (62357185) 
     multiplied by a <i>factor</i> where the purpose of the factor is to represent
     a left or right shift in the position of the decimal point. </p>
                   
<p><b><font color="#ff0000">Now consider the <i>factor</i></font></b> </p>
                   
<p>Each of the factors shown above represents the value of ten raised to some
specific power, such as ten squared, ten cubed, ten raised to the fourth
     power, etc. </p>
                   
<p><b><font color="#ff0000">Exponentiation</font></b> </p>
                   
<p>If we allow the symbol ^ to represent exponentiation <i>(raising   to a
power)</i> and allow the symbol / to represent division, then   we can write
the values for the above factors in the ways shown in Figure 7. Note   in
particular the numbers in blue, which I will refer to later as the exponents.<br>
       </p>
             
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                   <tbody>
                   <tr>
                <td>                                                    
                                                            
      <p><tt>1000 = 10^<font color="#3333ff">+3</font> = 1*10*10*10</tt> 
     <br>
          <tt>100 = 10^<font color="#3333ff">+2</font> = 1*10*10</tt> <br>
          <tt>10 = 10^<font color="#3333ff">+1</font> = 1*10</tt> <br>
          <tt>1 = 10^<font color="#3333ff">+0</font> = 1</tt> <br>
          <tt>0.1 = 10^<font color="#3333ff">-1</font> = 1/10</tt> <br>
          <tt>0.01 = 10^<font color="#3333ff">-2</font> = 1/(10*10)</tt>
      <br>
          <tt>0.001 = 10^<font color="#3333ff">-3</font> = 1/(10*10*10)</tt>
        <br>
          <tt>0.0001 = 10^<font color="#3333ff">-4</font> = 1/(10*10*10*10)</tt>
          <br>
          <tt>0.00001 = 10^<font color="#3333ff">-5</font> = 1/(10*10*10*10*10)</tt> 
     </p>
                                                         
      <div align="center">                                              
  
      <pre><b><font face="Courier New,Courier">Figure 7 Representation of the factor</font></b></pre>
                </div>
             </td>
                </tr>
                                                             
  </tbody>               
</table>
                                          
<p>For example, in the above notation, the term <tt>10^<font
 color="#3333ff">+3 </font></tt><font color="#000000">means 10 raised to the
third power.</font> </p>
                   
<p><b><font color="#ff0000">The zeroth power</font></b> </p>
                   
<p><font color="#000000">By definition, the value of any value raised to the
zeroth power is 1.&nbsp; <i>(Check this out in your old high school algebra 
   book.)</i></font>  </p>
                   
<p><b><font color="#ff0000">The exponent and the factor</font></b> </p>
                   
<p>Hopefully, at this point you will understand the relationship between the
value shown in blue <i>(the exponent) </i>and the factor introduced earlier. 
   </p>
                   
<p><b><font color="#ff0000">Different ways to represent the same value</font></b> 
     </p>
                   
<p>Having reached this point, by using substitution, I can rewrite the original
     set of representations of the value 623.57185 in the different ways
   shown in Figure 8. <i>(Compare Figure 8 with Figure 6.)</i></p>
             
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                   <tbody>
                   <tr>
                <td>                                                    
                                                            
      <p><tt>.62357185*10^<font color="#3333ff">+3</font></tt> <br>
          <tt>6.2357185*10^<font color="#3333ff">+2</font></tt> <br>
          <tt>62.357185*10^<font color="#3333ff">+1</font></tt> <br>
          <tt>623.57185*10^<font color="#3333ff">+0</font></tt> <br>
          <tt>6235.7185*10^<font color="#3333ff">-1</font></tt> <br>
          <tt>62357.185*10^<font color="#3333ff">-2</font></tt> <br>
          <tt>623571.85*10^<font color="#3333ff">-3</font></tt> <br>
          <tt>6235718.5*10^<font color="#3333ff">-4</font></tt> <br>
          <tt>62357185.*10^<font color="#3333ff">-5</font></tt> </p>
                                                         
      <div align="center">                                              
  
      <pre><b><font face="Courier New,Courier">Figure 8 Different ways to represent a value</font></b></pre>
                </div>
             </td>
                </tr>
                                                             
  </tbody>               
</table>
                                     
<p>It is very important to for you to understand that these are simply different
     ways to represent the same value. </p>
                   
<p><b><font color="#ff0000">A simple change in notation</font></b> </p>
                   
<p>Finally, by making a simplifying change in notation where I replace <tt>*10^</tt> 
     by <tt>E</tt> I can rewrite the different representations of the value 
  of  623.57185 in the ways shown in Figure 9.<br>
                       </p>
             
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                   <tbody>
                   <tr>
                <td>                                                    
                                                            
      <p><tt>.62357185E<font color="#3333ff">+3</font></tt> <br>
          <tt>6.2357185E<font color="#3333ff">+2</font></tt> <br>
          <tt>62.357185E<font color="#3333ff">+1</font></tt> <br>
          <tt>623.57185E<font color="#3333ff">+0</font></tt> <br>
          <tt>6235.7185E<font color="#3333ff">-1</font></tt> <br>
          <tt>62357.185E<font color="#3333ff">-2</font></tt> <br>
          <tt>623571.85E<font color="#3333ff">-3</font></tt> <br>
          <tt>6235718.5E<font color="#3333ff">-4</font></tt> <br>
          <tt>62357185.E<font color="#3333ff">-5</font></tt> </p>
                                                               
      <div align="center">                                               
        
      <pre><b><font face="Courier New,Courier">Figure 9 Different ways to represent a value</font></b></pre>
                 </div>
        </td>
                </tr>
                                                             
  </tbody>               
</table>
                                     
<p>This is a relatively standard way to display floating-point values, using 
   exponential notation <i>(the letter E indicates an exponent).</i></p>
                  
<p><b><font color="#ff0000">Getting the true value</font></b> </p>
                   
<p>Floating-point types represent values as a mantissa containing a decimal 
     point along with an exponent value, which tells how many places to shift 
   the decimal point to the left or to the right in order to determine the 
 true   value. </p>
                   
<p>Positive exponent values mean that the decimal point should be shifted 
     to the right.&nbsp; Negative exponent values mean that the decimal point 
    should be shifted to the left. </p>
                   
<p><b><font color="#ff0000">Advantages of floating-point types</font></b> 
</p>
                   
<p>One advantage of floating-point types is that they can be used to maintain 
     fractional parts in data values. </p>
                                    
<p>Another advantage of floating-point types is that a very large range of 
   values can be represented   using a reasonably small amount of computer 
 memory  for storage of the values. For example <i>(assuming that I counted 
 the number  of digits correctly)</i> Figure 10 shows how to represent a very
 large value  and a very small value as a floating-point type.          
    </p>
             
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                   <tbody>
                   <tr>
                <td>                                                    
                                                            
      <p>The very large value:<tt><br>
        </tt></p>
                                                               
      <p><tt>62357185000000000000000000000000000000.0</tt> </p>
                                                                     
      <p>can be represented as<tt> 6.2357185E+37</tt> </p>
                                                                        
  
      <p>The very small value: </p>
                                                                     
      <p><tt>0.0000000000000000000000000000062357185</tt> </p>
                                                                     
      <p>can be represented as<tt> 6.2357185E-30</tt> </p>
                                                                     
      <div align="center">                                               
        
      <pre><b><font face="Courier New,Courier">Figure 10 Representing a large range of values</font></b></pre>
                 </div>
        </td>
                </tr>
                                                             
  </tbody>               
</table>
                                          
<p><b><font color="#ff0000">When would you use floating-point?</font></b> 
     </p>
                   
<p>If you happen to be working in an area where you need to keep track of
     fractional parts <i>(such as the amount of hamburger in a package),</i> 
   have to work with extremely large numbers <i>(distances between galaxies),</i> 
   or have to work with extremely small values <i>(the size of atomic particles),</i> 
   then you will need to use the floating-point types. </p>
                   
<p><b><font color="#ff0000">Two floating-point types</font></b> </p>
                   
<p>Java supports two different floating-point types: </p>
                   
<ul>
            <li> float</li>
            <li> double</li>
                   
</ul>
           These two types differ primarily in terms of the range of values 
 that   they  can support and the number of significant digits used in the 
representation of those values.&nbsp; Figure 11 shows the smallest and largest 
 values   that can be accommodated by each of the floating-point types.&nbsp; 
  Values   of either type can be either positive or negative. <br>
       <br>
             <b><small>   </small></b><b><small>     </small></b><b><small> 
       </small></b><small>       </small><small>                         
             </small>   <small>           </small>       
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
         <tbody>
          <tr>
            <td><small><font face="Courier New, Courier, monospace"><b> float</b><br>
        1.4E-45 to 3.4028235E38<br>
             <br>
             <b> double</b><br>
        4.9E-324 to 1.7976931348623157E308</font><br>
             <br>
             </small>                                                 
      <div align="center"><small><b><font
 face="Courier New, Courier, monospace">Figure 11 Range for floating-point
   types</font></b>       </small></div>
       </td>
            </tr>
                         
  </tbody>     
</table>
                                     
<p><font color="#ff0000"><b>Operations on floating-point types</b></font><br>
      </p>
           
<p>Floating-point types support the typical arithmetic and comparison operations.
   &nbsp;I will discuss the operations that can be performed on floating-point 
   types in more detail in a subsequent lesson. </p>
                   
<h3>The character type<br>
  </h3>
                   
<p>Computers deal only in numeric values.&nbsp; They don't know how to deal
     directly with the letters of the alphabet and punctuation characters.
 </p>
                          
<p>The purpose of the character type is to make it possible to represent the
letters of the alphabet, the punctuation characters, and the numeric characters
internally in the computer.&nbsp; This is accomplished by assigning a numeric
value to each character, much as you may have done to create secret codes
when you were a child.&nbsp; <i>(For example, in Java an upper-case A character
is represented by the numeric value 65, whereas the upper-case B is represented
by the numeric value 66.)</i> </p>
                   
<p><b><font color="#ff0000">A single character type</font></b> </p>
                   
<p>Java supports a single character type named <b>char</b>.&nbsp; The <b>char</b> 
     type uses a standard character representation known as <a
 href="http://www.unicode.org/">Unicode</a> to represent up to 65,535 different
     characters.<i></i> </p>
                   
<p><b><font color="#ff0000">Why so many characters?</font></b> </p>
                   
<p>The reason for the large number of possible characters is to make it possible
     to represent the characters making up the alphabets of many different
 countries    and many different languages. </p>
                   
<p><b><font color="#ff0000">Representing a character symbolically</font></b> 
     </p>
           
<p>   </p>
                   
<p>Although each character is represented internally by a numeric value,
as long as the characters that you use in your program appear on your keyboard,
   you usually don't have a need to know the numeric values associated with
  the different characters. </p>
                          
<p>In Java, you usually represent a character to the program by surrounding 
     it with apostrophes as follows:&nbsp; <tt>'A'</tt>. </p>
                   
<p>The Java programming tools know how to cross-reference that specific character
     symbol against the Unicode table to obtain the corresponding numeric
value.&nbsp;     <i>(A discussion of the use of the <b>char</b> type to represent
characters     that don't appear on your keyboard is beyond the scope of
this lesson.)</i>     </p>
                   
<p>The <b>char </b>type supports the typical arithmetic and comparison operations.
   I will discuss the operations that can be performed on the <b>char</b>
  type in more detail in a subsequent lesson. </p>
 
<h3>The boolean type</h3>
 The <b>boolean</b> type is the simplest type supported by Java.&nbsp; It
can have only two values:                   
<ul>
            <li> true</li>
            <li> false</li>
                   
</ul>
           Generally speaking, about the only operations that can be applied
  to  an  instance of the <b>boolean</b> type are to change it from true
to   false,  and vice versa.&nbsp; The boolean type is commonly used in some
kind of a  test to determine what to do next, such as that shown in Figure
12.<br>
                               
<p> </p>
             
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
       <tbody>
          <tr>
            <td>                                                 
      <p><small><font face="Courier New, Courier, monospace">if some test
   returns true, then <br>
           &nbsp; &nbsp; do one thing<br>
           otherwise <br>
           &nbsp; &nbsp; do something else</font> </small></p>
                                                       
      <div align="center">                                              
  
      <pre><b><font face="Courier New,Courier">Figure 12 Typical use of boolean type</font></b></pre>
                 </div>
       </td>
                </tr>
                                                             
  </tbody>               
</table>
                                     
<p> </p>
                   
<p>I will discuss the operations that can be performed on the <b>boolean</b> 
     type in more detail in a subsequent lesson. </p>
                        
<h2> <a name="User-Defined (class) Types"></a><font color="#000000">User-Defined 
     Types</font></h2>
            <b><font color="#ff0000">Extending the language</font></b>  
        
<p><font color="#000000">As mentioned earlier, Java is an extensible programming 
     language.&nbsp; There is a core component to the language that is always 
    available.&nbsp; Beyond this, different programmers can extend the language 
    in different ways to meet their individual needs.&nbsp; <i>(In addition, 
the programmers at Sun have created a large library of user-defined types, 
which you can use if you have access to the library.)</i></font> </p>
                   
<p><b><font color="#ff0000">Creating new types</font></b> </p>
                   
<p><font color="#000000">One of the ways that individual users can extend 
     the language is to create new types.&nbsp; As indicated earlier, </font><font
 color="#000000">for every different type of data used with a particular
   programming language, there is a specification somewhere that defines
two    important characteristics of the type:</font>          </p>
           
<blockquote>                              
  <p><font color="#000000">1.&nbsp; The set of all possible data values that
   can be stored in an <i>instance</i> of the type</font>.<br>
           <font color="#000000">2.&nbsp; The operations that you can perform 
  on that instance alone, or in combination  with other instances.</font> 
   </p>
          </blockquote>
                     
<p><font color="#000000">Thus, when creating or defining a new type, the 
user must define the set of values that can be stored in an instance of the
 type, as well as the operations that can be performed on instances of the
type.&nbsp; From the viewpoint of this tutorial lesson, the purpose of a
class definition is to create a new type, and to define the attributes of
the type listed above.</font>  </p>
                   
<p><b><font color="#ff0000">No magic involved</font></b> </p>
                   
<p><font color="#000000">While this might initially seem like magic, once 
     you get to the heart of the matter, it is relatively straightforward.&nbsp; 
Instances of new types are created by combining instances of primitive types 
and instances      of other user-defined new types.</font> </p>
                   
<p><b><font color="#ff0000">An example</font></b> </p>
                   
<p><font color="#000000">For example, the <b>String</b> type, which can be 
   used to represent a person's last name, is just a grouping of a bunch of
 instances   of the primitive <b>char</b> type <i>(plus a specification of
 the operations that can be performed on an instance of the new <b>String</b> 
 type).</i></font> </p>
                   
<p><font color="#000000">A new <b>Person</b> type, which could be used to
   represent   a person's first name and last name, might simply be a grouping 
     of two instances of the user-defined <b>String</b> type.</font> </p>
                   
<p><b><font color="#ff0000">The company telephone book</font></b> </p>
                   
<p><font color="#000000">A programmer responsible for producing the company 
     telephone book might create a new <b>Employee</b> type that could be 
used to store the   first   and last names along with the telephone number 
of an individual.&nbsp;    Using  this new type, the programmer could create 
an instance of the new   type for each employee  in the company.<br>
      </font></p>
           
<blockquote>                  
  <p><font color="#000000"><i>(At this point, let me sneak a little jargon
   in and tell you that we normally refer to such instances as <b>objects</b>.&nbsp;
 More  specifically, we refer to instances of primitive types as <b>variables</b>,
 and we refer to instances of user-defined types as <b>objects</b>.)</i></font> 
  </p>
      </blockquote>
                   
<p><b><font color="#ff0000">A comparison operation</font></b> </p>
                   
<p><font color="#000000">This programmer might define one of the allowable 
     operations for the </font><font color="#000000"><b>Employee</b></font><font
 color="#000000"> type to be a comparison between two objects  of   the&nbsp;</font><font
 color="#000000"><b>Employee</b></font><font color="#000000"> type to determine 
which is greater in an alphabetic sorting sense.&nbsp;    This operation could
be used to sort the set of objects representing all   of the employees into
alphabetical order.&nbsp; The set of sorted objects    could  then be used
to print a new telephone book.</font> </p>
                   
<p><b><font color="#ff0000">A name-change operation</font></b> </p>
                   
<p><font color="#000000">Another allowable operation that the programmer might
define for the </font><font color="#000000"><b>Employee</b></font><font
 color="#000000"> type would be the ability to change the name stored in an
object representing an employee.</font> </p>
                   
<p><font color="#000000">For example when Suzy Smith marries Tom Jones, she
 might elect to thereafter be known as Suzy Jones, Suzy Smith-Jones, or Suzy 
Jones-Smith.&nbsp; In this case, there would be a need to modify the object 
that represents her to reflect her newly-elected surname.&nbsp; <i>(Or perhaps 
Tom Jones might elect to thereafter be known as Tom Smith, in which case it
would be necessary to modify the object that represents him.)</i></font>
  </p>
                   
<p><b><font color="#ff0000">An updated telephone book</font></b> </p>
                   
<p><font color="#000000">The programmer could use the name-changing operation 
     to modify the object, use the sorting operation to re-sort the  set 
  of objects, and then print and distribute a modified version of the  telephone 
   book.</font> </p>
                   
<p><b><font color="#ff0000">Many user-defined types already exist</font></b> 
     </p>
                   
<p><font color="#000000">Unlike the primitive types which are predefined, 
     I am unable to give you much in the way of specific information about 
 user-defined    types, simply because they don't exist until the user defines 
 them.</font>    </p>
                   
<p><font color="#000000">I can tell you, however, that when you obtain the
     Java programming tools from Sun, you not only receive the core language
   containing  the primitive types, you also receive a large library containing
   several thousand user-defined types that have already been defined.&nbsp;
   A large documentation package is available from Sun to help you determine
   the individual characteristics of these user-defined types.</font> </p>
                   
<p><b><font color="#ff0000">The most important thing</font></b> </p>
                   
<p><font color="#000000">At this stage in your development as a programmer, 
     the most important thing for you to know about user-defined types is 
that     they are possible in Java, C++, and C#, as well as in some other 
object-oriented  programming languages as well.</font> </p>
                   
<p><font color="#000000">Unlike earlier procedural   programming languages
   such as C and Pascal, when you use an extensible object-oriented programming
   language, you are no longer forced to adapt  your problem to the available
   tools.&nbsp; Rather, you now have the opportunity  to extend the tools
to   make them better suited to solve your problem.</font>  </p>
                   
<p><b><font color="#ff0000">The class definition</font></b> </p>
                          
<p><font color="#000000">The specific Java mechanism that makes it possible 
     for you to define a new type is a mechanism known as the class definition.
   &nbsp;In Java, whenever you define a new class, you are   at the same
time    defining a new type.&nbsp; Your new type can be as simple,   or as
complex    as you want it to be.</font> </p>
                   
<p><font color="#000000">An object <i>(instance)</i> of your new type can
   contain a very small   amount of data, it can contain a very large amount
   of data, or it may contain no data at all.</font> </p>
                   
<p><font color="#000000">The operations that you allow to be performed on
     an object of your new type can be rudimentary, or they can be very powerful, 
or they may fall somewhere in between.</font>      </p>
                   
<p><b><font color="#ff0000">It is all up to you</font></b> </p>
                   
<p><font color="#000000">Whenever you define a new class <i>(type)</i> you
   not only   have the <i>opportunity</i> to define the data definition and
  the operations,   you also have a <i>responsibility</i> to do so.</font>
 </p>
                   
<p><b><font color="#ff0000">Much to learn and much to do</font></b> </p>
                          
<p><font color="#000000">If you belong to the population for which this lesson 
is intended, you still have much to learn and much to do     before you will 
need to define new types. There are a lot of fundamental   programming concepts 
  that you will need to learn before you seriously embark  on a study involving 
  the definition of new types.<br>
      </font></p>
           
<p><font color="#000000">However, in addition to learning fundamental programming 
concepts,   you will probably also need to learn how to create and use objects 
of  a few existing classes, such as the <b>String </b>class, and the classes
 used for keyboard input and screen output.&nbsp; In order to use objects
of these classes, you simply need to understand how to create the objects,
and  how to perform the operations defined for objects of those classes.<br>
      </font> </p>
                   
<p><font color="#000000">For the present then, simply remember that the capability
   to create new types is available. If you work to expand your knowledge
of   Java   programming one small step at a time, when you reach the point
where   you need to define   new types, you will be ready and eager to do
so.</font>&nbsp;</p>
           
<h2 align="center"><a name="Using_the_String_and_IO_Classes"></a>Using the 
  String and I/O Classes</h2>
              
<p>As stated earlier, the purpose of this lesson is to help persons in fundamental
programming courses by giving them an understanding   of what they need to
 know   in order to use objects to the minimal extent   necessary in such
courses.&nbsp; Hopefully by now, you know what a class  is and what an object
is.&nbsp; I will show you a couple of examples of creating and using  common
objects by invoking operations <i>(methods)</i> on those objects.<br>
   <br>
      <font color="#ff0000"><b>Creating an object of the String class</b></font><br>
      </p>
           
<p>The following listings, beginning with Listing 3, show the central code 
  for a program named <b>Basics01</b>, which illustrates the use of an object 
of the  <b>String </b>class, as well as the use of objects of the <b>PrintStream</b> 
 class and the  <b>InputStream</b> class.&nbsp; A complete listing of the 
program is shown in Listing 10 near the end of the lesson.<br>
     </p>
         
<p>One of the predefined classes in the Java standard class library is a class
named  <b>String</b>. The purpose of the <b>String</b> class is to define
a type  of object capable of encapsulating a string of characters <i>(such
as a person's name, for example),</i> and to provide operations that can
be performed on an object of the class.<br>
     </p>
         
<p>Listing 3 shows one way to create a new <b>String</b> object containing 
  the characters shown within the quotation marks, and to save a reference 
 to that new object in a variable named <b>aString</b>.</p>
         
<table border="1" cols="1" width="400" bgcolor="#ffff00">
                 <tbody>
                    <tr>
                 <td>                                                   
                                                             
      <pre>    aString = "Enter a character";<br><br><b><font
 face="Courier New,Courier">Listing 3</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                    
<p>In Java, all that is necessary to create a new object of the type <b>String</b> 
  is to include characters within a pair of matching quotation  marks.<br>
 </p>
 
<p><font color="#ff0000"><b>Saving a reference to the object</b></font><br>
 </p>
 
<p>If you are going to use the object later, you will need to save a  reference 
 to the object in a variable as illustrated in Listing 3. Once you have a 
reference to the object, you can use that reference  to perform operations 
on the object.&nbsp; <i>(Performing operations on the <b>String </b>object 
will be illustrated later in this program.)</i><br>
     </p>
         
<p><font color="#ff0000"><b>Displaying information on the screen</b></font></p>
      The code in Listing 4 causes the <b>String</b> object created above 
to  be displayed on the computer screen.<br>
    <br>
                     
<table border="1" cols="1" width="400" bgcolor="#ffff00">
       <tbody>
         <tr>
           <td>                                   
      <pre>    System.out.println(aString);<br><br><b><font
 face="Courier New,Courier">Listing 4</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                     
<p>Without getting into some rather complex details,  let me simply state 
 that <b>System.out</b> in Listing 4 represents an object of the predefined 
 class named <b>PrintStream</b>.&nbsp; This object, which  is automatically 
 created when a Java program starts running, makes it possible to cause information 
 to be displayed on the computer screen.<br>
 </p>
 
<blockquote>   
  <p align="left"><i>(Technically,  the information  is displayed on the standard
output device, but I won't get  into that level  of detail here.)</i></p>
 </blockquote>
         
<p><font color="#ff0000"><b>Performing operations on objects</b></font><br>
   </p>
     
<p>The standard way to perform operations on objects in Java is to  invoke 
 methods, <i>(such as the <b>println </b>method shown in Listing 4),</i> on
  those objects.&nbsp; An object of the <b>PrintStream </b>class supports 
several  different operations or methods, including the <b>println</b> method 
shown  in Listing 4, and a method named <b>print</b>, which you will see later.<br>
     </p>
         
<p>You invoke the <b>println</b> method using the syntax shown in Listing
  4, passing the information to be displayed as a parameter to the method
within  the parentheses.&nbsp; The code in Listing 4 causes the line of text
shown in Figure 13 to be displayed on the computer screen.&nbsp; <i>(Compare
the text on the screen with the characters represented by the <b>String </b>object 
in Listing 3.)</i></p>
                   
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                   <tbody>
                   <tr>
                <td>                                                    
                                                     
      <pre>Enter a character<br><br><b><font face="Courier New,Courier">Figure 13</font></b></pre>
                </td>
                </tr>
                                                             
  </tbody>               
</table>
                                     
<p><font color="#ff0000"><b>Getting a character from the keyboard</b></font></p>
     For this program, the line of text shown in Figure 13 is actually a
prompt   asking the user to press a character key on the keyboard and then
to press   the <b>Enter </b>key on the keyboard.&nbsp; When the user does
this, the  code in Listing 5 will capture the character and save it in a
variable named  <b>aCharacter</b>.<br>
               &nbsp;                
<table border="1" cols="1" width="400" bgcolor="#ffff00">
                  <tbody>
                    <tr>
                 <td>                                                   
                                                             
      <pre>    aCharacter = (char)System.in.read();<br><br><b><font
 face="Courier New,Courier">Listing 5</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                     
<p>The <b>System.in</b> term in Listing 5 represents an object  of the predefined 
class named <b>InputStream</b>.&nbsp; This object, which   is automatically 
created when a Java program starts running, makes it possible  to capture 
information entered by the user at the keyboard.&nbsp; <i><br>
 </i></p>
 
<blockquote>   
  <p><i>(Technically,   the information is captured from the standard input 
device, but I won't get  into that here.)</i><br>
   </p>
 </blockquote>
     
<p>Thus the code in Listing 5 captures the keyboard character as type <b>int</b>, 
 forces the type to be converted from type <b>int</b> to type <b>char</b>, 
and saves  the result in a variable named <b>aCharacter</b>.<br>
 </p>
 
<blockquote>   
  <p><i>(The type conversion  is accomplished by (char), which is commonly 
referred to as a cast.&nbsp; The reason why this conversion is necessary is
beyond the scope of this tutorial.)</i><br>
    </p>
 </blockquote>
       
<p><font color="#ff0000"><b>Performing three operations on the PrintStream
  object</b></font></p>
           The code in Listing 6 performs three consecutive but separate
operations  on the <b>PrintStream</b> object to display the character on
the computer  screen.<br>
               &nbsp;                
<table border="1" cols="1" width="400" bgcolor="#ffff00">
                  <tbody>
                    <tr>
                 <td>                                                   
                                                             
      <pre>    System.out.print(aCharacter);<br>    System.out.print(aCharacter);<br>    System.out.println(aCharacter);<br><br><b><font
 face="Courier New,Courier">Listing 6</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                     
<p>The first two operations in Listing 6 invoke the <b>print</b> method on
  the <b>PrintStream</b> object, passing the single character previously
captured   from the keyboard as a parameter to the method.&nbsp; The third
operation   invokes the <b>println</b> method on that same object, passing
the same character  as a parameter.<br>
   </p>
     
<p><font color="#ff0000"><b>Difference between print and println</b></font><br>
    </p>
       
<p>The difference between the <b>print</b> operation and the <b>println</b>
  operation is as follows.&nbsp; When the <b>print</b> operation is performed,
  the method displays the information and then leaves the screen cursor immediately
  to the right of that information ready to display additional information
 at that location on the screen.<br>
    </p>
       
<p>When the <b>println</b> operation is performed, the method displays the
  information, and then moves the screen cursor down to the left side of
the next  line on the screen, ready to display additional information on
the next line.<br>
    </p>
       
<p>Assuming that the user entered the character <b>z</b> when requested above,
  the code in Listing 6 causes that character to be displayed three times
in  succession, as shown in Figure 14, and then moves the screen cursor down 
 to the next line on the screen.<br>
    </p>
       
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                   <tbody>
                   <tr>
                <td>                                                    
                                                     
      <pre>zzz<br><br><b><font face="Courier New,Courier">Figure 14</font></b></pre>
                </td>
                </tr>
                                                             
  </tbody>               
</table>
                                    
<p><font color="#ff0000"><b>Performing another operation on the String object</b></font><br>
    </p>
           The Sun documentation for the <b>String</b> class identifies more 
 than fifty different operations that can be performed on an object of the 
 <b>String</b> class.&nbsp; One of those operations is to extract a substring 
 from the data encapsulated in the <b>String</b> object, and to return the 
substring  as a new <b>String</b> object.&nbsp; This is illustrated by the 
code in Listing  7, which gets a substring extending from character number 
3 to character number  12, and saves a reference to the new <b>String</b> 
object in a variable named  <b>bString</b>.<br>
               &nbsp;                
<table border="1" cols="1" width="400" bgcolor="#ffff00">
     <tbody>
       <tr>
         <td>                     
      <pre>    bString = aString.substring(3,12);<br><br><b><font
 face="Courier New,Courier">Listing 7</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                     
<p><font color="#ff0000"><b>Display the substring</b></font></p>
           Finally, the code in Listing 8 uses the <b>println</b> method
discussed  earlier to display the substring on the computer screen.<br>
               &nbsp;                
<table border="1" cols="1" width="400" bgcolor="#ffff00">
                  <tbody>
                    <tr>
                 <td>                                                   
                                                             
      <pre>    System.out.println(bString);<br><br><b><font
 face="Courier New,Courier">Listing 8</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                     
<p>This produces the screen output shown in Figure 15.&nbsp; Compare this 
 output with that shown in Figure 13, and you should be able to see how the 
 substring relates to the original string. <i>(When counting characters, start
 counting with zero.&nbsp; In other words, the first character in Figure 13
 is character number 0.)<br>
 </i></p>
 
<table border="1" cols="1" width="400" bgcolor="#ccffff" align="center">
                   <tbody>
                   <tr>
                <td>                                                    
                                                     
      <pre>er a char<br><br><b><font face="Courier New,Courier">Figure 15</font></b></pre>
                </td>
                </tr>
                                                             
  </tbody>               
</table>
                                                                   
<center>                 
<h2> <a name="Run the program"></a>Run the Programs</h2>
                </center>
                                       
<p>At this point, if you are already set up to compile and execute Java programs, 
 you may want to paste the code from Listing 9 and Listing 10 into your text 
 editor, save the two programs in files named Area01.java and Basics01.java, 
 and then compile and execute the two programs.&nbsp; Experiment with the 
two programs, making changes and observing the results.</p>
                               
<h2 align="center"><a name="Summary">Summary</a></h2>
                                   
<p>In this lesson, I have explained the concept of a class and its objects 
from the viewpoint of a        non-primitive, user-defined type, and the operations
that can be performed  on an entity       of that type.<br>
 </p>
 
<p>I explained what is   commonly   meant by <i>type </i>in <i>type-sensitive</i> 
 languages.<br>
               </p>
                             
<p>I explained what        we mean by <i>variables</i> and <i>objects,</i> 
and the similarity between the two.</p>
     
<p>I discussed and explained some of the common primitive types, and extended 
the concept of type to classes such as the <b>String</b> class.&nbsp; I discussed 
some of the operations that can be performed on variables of the primitive 
types, and related that to some of the operations that can be performed on 
an object of type <b>String</b>.<br>
                </p>
                                                                        
           I also discussed and explained certain aspects of objects used 
to support        <i>standard input and output.</i>                      
       
<center>                 
<h2> <a name="Complete Program Listings"></a>Complete Program Listings</h2>
                </center>
   Complete listings of the two programs discussed in this lesson are shown 
 in Listing 9 and Listing 10 below.<br>
               &nbsp;                
<table border="1" cols="1" width="400" bgcolor="#ffff00">
                  <tbody>
                    <tr>
                 <td>                                                   
                                                             
      <pre>/*File Area01.java<br>Copyright 2003 R.G.Baldwin<br><br>Illustrates the use of constants and variables<br>in Java<br><br>Tested using SDK 1.4.1 under WinXP<br>************************************************/<br>import java.util.*;<br><br>public class Area01{<br>  public static void main(String[] args){<br>    double a;<br>    double r;<br>    final double pi = Math.PI;<br><br>    r = 1.0;<br>    a = pi * r * r;<br>    display(r,a);<br><br>    r = 1.5;<br>    a = pi * r * r;<br>    display(r,a);<br><br>    r = 2.0;<br>    a = pi * r * r;<br>    display(r,a);<br><br>  }//end main<br>  //-------------------------------------------//<br><br>  static void display(double r, double a){<br>    System.out.println("For radius = " + r +<br>                                ", area = " + a);<br>  }//end print<br>}//end Area01 class<br>//=============================================//<br><br><b><font
 face="Courier New,Courier">Listing 9</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                     
<p><br>
   </p>
               &nbsp;                
<table border="1" cols="1" width="400" bgcolor="#ffff00">
                  <tbody>
                    <tr>
                 <td>                                                   
                                                             
      <pre>/*File Basics01.java<br>Copyright 2003 R.G.Baldwin<br><br>Illustrates the basics of strings and<br>standard I/O.<br><br>For an input character of z, this program<br>produces the following output:<br><br>Enter a character<br>z<br>zzz<br>er a char<br><br>Tested using SDK 1.4.1 under WinXP<br>************************************************/<br>import java.util.*;<br>import java.io.*;<br><br>public class Basics01{<br>  public static void main(String[] args)<br>                              throws IOException{<br>    char aCharacter;<br>    String aString;<br>    String bString;<br><br>    //Create a String object<br>    aString = "Enter a character";<br><br>    //Display the String object<br>    System.out.println(aString);<br><br>    //Get and save a character from the keyboard<br>    aCharacter = (char)System.in.read();<br><br>    //Display the character three times<br>    // in succession<br>    System.out.print(aCharacter);<br>    System.out.print(aCharacter);<br>    System.out.println(aCharacter);<br><br>    //Get a substring from the string<br>    bString = aString.substring(3,12);<br><br>    //Display the substring<br>    System.out.println(bString);<br><br>  }//end main<br>}//end class Basics01<br><br><b><font
 face="Courier New,Courier">Listing 10</font></b></pre>
                 </td>
                 </tr>
                                                                 
  </tbody>                
</table>
                                     
<p></p>
   <br>
     
<hr width="100%" size="2">                 
<p>Copyright 2003, Richard G. Baldwin.&nbsp; Reproduction in whole or in part
in any form or medium without express written permission from Richard Baldwin
is prohibited. </p>
                               
<h4> <a name="About the author"></a>About the author</h4>
                 <b><a href="mailto:Baldwin@DickBaldwin.com">Richard Baldwin</a></b><i> 
       is a college professor (at Austin Community College in Austin, TX) 
and    private   consultant whose primary focus is a combination of Java, 
C#, and   XML. In  addition to the many platform and/or language independent 
benefits   of Java  and C# applications, he believes that a combination of 
Java, C#,   and XML will become the primary driving force in the delivery 
of structured   information  on the Web.</i>                 
<p><i>Richard has participated in numerous consulting projects, and he frequently
        provides onsite training at the high-tech companies located in and
 around       Austin, Texas.&nbsp; He is the author of Baldwin's Programming
 <a href="http://www.DickBaldwin.com">Tutorials</a>, which has gained a worldwide
        following among experienced and aspiring programmers. He has also
published        articles in JavaPro magazine.</i> </p>
                               
<p><i>Richard holds an MSEE degree from Southern Methodist University and 
        has many years of experience in the application of computer technology 
     to  real-world problems.</i> </p>
                               
<p><i><a href="mailto:Baldwin@DickBaldwin.com">Baldwin@DickBaldwin.com</a></i> 
        </p>
                               
<p>-end- <br>
                &nbsp; </p>
                <br>
                <br>
               <br>
                   <br>
          <br>
      <br>
   <br>
  <br>
 <br>
</body>
</html>
