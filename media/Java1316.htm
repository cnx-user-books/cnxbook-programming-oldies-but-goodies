<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (WinNT; I) [Netscape]">
   <title>... in Java by Richard G Baldwin</title>
</head>
<body link="#DD0000" vlink="#999999" alink="#FF0000" lang="EN-US">

<h2>
Enterprise JavaBeans(TM):&nbsp; Getting Started with EJB, Part 7</h2>
<i>Baldwin shows you how to write and run a client application that exercises
the Enterprise Bean that was deployed into the J2EE server in the previous
lessons.&nbsp; Along the way, he provides a very brief primer on JNDI.</i>
<p><b>Published</b>&nbsp; February 5, 2001
<br><b>By <a href="#BaldwinBio">Richard G. Baldwin</a></b>
<p>Java Programming, Lecture Notes # 1316
<ul >
<li>
<a href="#Preface">Preface</a></li>

<li>
<a href="#Preview">Preview</a></li>

<li>
<a href="#Introduction">Introduction</a></li>

<li>
<font color="#000000"><a href="#A Brief Look at JNDI">A Brief Look at JNDI</a></font></li>

<li>
<a href="#The Client Program">The Client Program</a></li>

<li>
<a href="#Interesting Code Fragments">Interesting Code Fragments</a></li>

<li>
<a href="#The Compilation Batch File">The Compilation Batch File</a></li>

<li>
<a href="#Starting the Server">Starting the Server</a></li>

<li>
<a href="#The Client jar File">The Client jar File</a></li>

<li>
<a href="#The Execution Batch File">The Execution Batch File</a></li>

<li>
<a href="#Stopping the Server">Stopping the Server</a></li>

<li>
<a href="#When Things Don't Work as Planned">When Things Don't Work as
Planned</a></li>

<li>
<a href="#Summary">Summary</a></li>

<li>
<a href="#Where To From Here">Where To From Here?</a></li>

<li>
<a href="#Complete Program Listings">Complete Program Listing</a></li>
</ul>

<hr size=3 width="100%" align=center>
<center>
<h2>
<a NAME="Preface"></a>Preface</h2></center>
This is one in a series of lessons designed to teach you about Sun's Enterprise
JavaBeans(TM) (EJB).
<p><b><font color="#FF0000">Seventh in a miniseries</font></b>
<p>This lesson is also the last lesson in a miniseries of seven lessons
intended to get you up and running with Sun's Enterprise JavaBeans(TM)
very quickly.
<center>
<h2>
<a NAME="Preview"></a>Preview</h2></center>
<font color="#000000">The lesson entitled <i>Enterprise JavaBeans(TM):
Getting Started with EJB, Part 1</i> listed the following steps that you
can follow to get your first Enterprise Bean up and running.&nbsp; I am
repeating them here for convenient viewing.</font>
<ol>
<li>
<font color="#000000">Download and install Java 2 Platform, Standard Edition
from Sun.&nbsp; As of the date of this writing, it can be found at the
following URL:&nbsp; <a href="http://java.sun.com/j2se/1.3/">http://java.sun.com/j2se/1.3/</a></font></li>

<li>
<font color="#000000">Download and install the Java 2 Platform, Enterprise
Edition.&nbsp; As of the date of this writing it can be found at the following
URL:&nbsp; <a href="http://java.sun.com/j2ee/download.html">http://java.sun.com/j2ee/download.html</a></font></li>

<li>
Write the bean class and any helper classes that the bean may need.</li>

<li>
Write two interfaces known as the <i>home</i> and <i>remote</i> interfaces.</li>

<li>
Write a batch file to control the compilation process for the bean and
the interface files.</li>

<li>
Use the batch file to compile the bean class, any helper classes, and the
two interfaces.</li>

<li>
Use Sun's J2EE <b>deploytool</b> program to deploy the bean into the server,
being careful to save the client jar file.&nbsp; The client jar file contains
some class files for stubs and skeletons that are required by the client.</li>

<li>
<b>Write the client program.</b></li>

<li>
<b>Write a batch file to control the compilation of the client program.</b></li>

<li>
<b>Use the batch file to compile the client program.</b></li>

<li>
<b>Copy the client jar file into the directory containing the client class
files.</b></li>

<li>
<b>Write a batch file to control execution of the client program.</b></li>

<li>
<b>Start the server running.</b></li>

<li>
<b>Use the batch file to execute the client file, which in turn will cause
the bean to be executed in the server.</b></li>
</ol>
<b><font color="#FF0000">Download and install Java tools</font></b>
<p><font color="#000000">At this point, you shouldn't need any help in
accomplishing the first two steps.&nbsp; Those steps simply involve downloading
and installing software from Sun.</font>
<p><b><font color="#FF0000">Write and deploy the bean</font></b>
<p><font color="#000000">The six previous lessons, beginning with the lesson
entitled <i>Enterprise JavaBeans(TM): Getting Started with EJB, Part 1</i>
showed you how to accomplish steps 3 through 7.</font>
<p><b><font color="#FF0000">Writing and running a client program</font></b>
<p><font color="#000000">This lesson will show you how to accomplish steps
8 through 14 <i>(highlighted in boldface above)</i>.&nbsp; This will entail
writing and running a client program for the purpose of exercising the
Enterprise Bean that you wrote and deployed in the previous six lessons.</font>
<p><font color="#000000">I will walk you through the operations necessary
to accomplish these steps without attempting to explain the purpose of
every operation in detail.&nbsp; Subsequent lessons will provide information
that bears on the purpose of the operations.</font>
<center>
<h2>
<a NAME="Introduction"></a><font color="#000000">Introduction</font></h2></center>
<b><font color="#FF0000">Writing, compiling, deploying and executing a
simple bean</font></b>
<p>The lessons in this miniseries show you the steps involved in writing,
compiling, deploying and executing a simple bean.&nbsp; The discussion
has been brief, and is intended primarily to get you to the point that
you can get something running very quickly.
<p><b><font color="#FF0000">More details in subsequent lessons</font></b>
<p>Subsequent lessons will come back and fill in the gaps to help you more-fully
understand each of the steps.
<p>Subsequent lessons will also teach you about the different kinds of
beans and how to use those beans in different situations.
<p><b><font color="#FF0000">Recommended supplementary reading</font></b>
<p>It is strongly recommended that you study the previous lesson entitled
<i>Enterprise
JavaBeans(TM), Getting Started with EJB, Part 6</i> before embarking on
this lesson.
<p>Additional supplementary material that I have written is available at
<a href="http://gamelan.earthweb.com/dlink.index-jhtml.72.1082.-.43.jhtml">Gamelan</a>.&nbsp;
As of the date of this writing, Gamelan does not maintain a consolidated
index to my Java tutorials.&nbsp; Therefore, they may be difficult to locate
on the Gamelan site.&nbsp; A consolidated index with links to the tutorials
on the Gamelan site is available at
<i>Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a></i><font color="#000000">.</font>
<p><b><font color="#FF0000">The required steps</font></b>
<p><font color="#000000">As mentioned above, our Enterprise Bean has now
been deployed in the J2EE server.&nbsp; We are down to the point where
we need to deal with the client program.&nbsp; This will involve carrying
out steps 8 through 14 in the above list.</font>
<p><b><font color="#FF0000">Viewing tip</font></b>
<p>You may find it useful to open another copy of this lesson in a separate
browser window.&nbsp; That will make it easier for you to scroll back and
forth and refer to earlier material without losing your place.
<p><b><font color="#FF0000">Beans versus beans</font></b>
<p><font color="#000000">Just in case you are reading this lesson without
having read the earlier lessons in this series, I will tell you that an
Enterprise Bean is not the same thing as a <i>JavaBean Component(TM)</i>,
as discussed in my series of <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">tutorial
lessons</a> beginning with lesson number 500.</font>
<center>
<h2>
<a NAME="A Brief Look at JNDI"></a><font color="#000000">A Brief Look at
JNDI</font></h2></center>
<font color="#000000">Client programs that access Enterprise Beans make
heavy use of the <i>Java Naming and Directory Interface (JNDI)</i>.&nbsp;
This discussion is intended as an introduction to the topic.&nbsp; It will
be very brief, and very informal.</font>
<p><b><font color="#FF0000">Naming systems</font></b>
<p><font color="#000000">If you browse the web, or use the file system
on your computer, you are familiar with naming systems.</font>
<p><font color="#000000">The file system on your computer is a naming system
that makes it possible for you to navigate the file system on the basis
of directory and file names.</font>
<p><font color="#000000">Whenever you type a URL into your browser in order
to navigate the web, you are using a naming system commonly known as the
<i>Domain
Name System,</i> or <i>DNS</i> for short.</font>
<p><b><font color="#FF0000">A standard interface to naming systems</font></b>
<p><font color="#000000">The purpose of JNDI is to provide a standard Java
interface to all naming systems, regardless of how they are constructed.</font>
<p><b><font color="#FF0000">Similar to JDBC in concept</font></b>
<p><font color="#000000">JNDI is very similar to JDBC in concept.&nbsp;
JDBC provides a standard Java interface to all SQL database systems for
which JDBC class libraries are available.</font>
<p><font color="#000000">In theory, the Java code that you write to manipulate
the data in one SQL database can be used to manipulate the data in any
SQL database for which you can obtain JDBC class libraries from the database
vendor.</font>
<p><b><font color="#FF0000">Uses interface definitions</font></b>
<p><font color="#000000">Sun provides the definition of the standard interface
through the publication of a set of Java <i>interface</i> definitions.&nbsp;
The database vendors provide the class libraries that implement those Java
<i>interfaces</i>.</font>
<p><font color="#000000">Once you install the vendor's class libraries
on your system, you can program to the standard interface, and the vendor's
class files will take care of the differences that exist from one brand
of database to the next.</font>
<p><b><font color="#FF0000">JNDI service providers</font></b>
<p><font color="#000000">Similarly, JNDI provides a standard interface
to a general <i>naming</i> or <i>directory</i> system.&nbsp; This also
consists primarily of a set of interface definitions.</font>
<p><font color="#000000">Again, Sun provides the standard interface definition.&nbsp;
The designers of the specific naming and directory systems provide class
libraries that implement the required Java <i>interfaces</i>.&nbsp; In
JNDI jargon, these class libraries are often referred to as <i>service
providers</i>.</font>
<p><b><font color="#FF0000">EJB clients use JNDI</font></b>
<p><font color="#000000">EJB servers expose their beans to clients by way
of a naming service, possibly of a proprietary design.</font>
<p><font color="#000000">EJB clients use JNDI <i>(along with the service
providers from the EJB server vendors)</i> to access the naming service.</font>
<p><font color="#000000">The naming service is accessed for the ultimate
purpose of gaining access to the <i>home</i> and <i>remote</i> interfaces
for the beans.&nbsp; Once the client programs have access to the <i>home</i>
and <i>remote</i> interfaces, they can manipulate the beans by way of those
interfaces.</font>
<p><b><font color="#FF0000">What is a context?</font></b>
<p><font color="#000000">If you read about JNDI, you will notice very heavy
use of the term context <i>(this will also show up in the client code)</i>.&nbsp;
According to <u>Java Enterprise in a Nutshell</u> by Flanagan, Farley,
Crawford, and Magnusson, <i>"A naming service associates names with objects.&nbsp;
An association between a name and an object is called a binding, and a
set of such bindings is called a context."</i></font>
<center>
<h2>
<a NAME="The Client Program"></a>The Client Program</h2></center>
A complete listing of the client program, named <b>HelloClient.java</b>
is provided in Listing 13 near the end of the lesson.&nbsp; <i>(A listing
of the bean program that will be executed by this client program was presented
in the previous lesson entitled Enterprise JavaBeans(TM), Getting Started
with EJB, Part 6.)</i>
<p><b><font color="#FF0000">A walk through the program</font></b>
<p>I am going to walk you through this program, skipping certain parts
involving JNDI that you don't necessarily need to understand at this point
in your learning process.&nbsp; <i>(I plan to come back and fill in those
gaps in subsequent lessons.&nbsp; In those lessons, I will attempt to help
you understand some of the complex details involved in the interface between
clients and EJB servers achieved through the use of JNDI.)</i>
<p><b><font color="#FF0000">Contents of my directory</font></b>
<p>Before getting into the details of the client program, however, I want
to show you the list of files that exist in a directory on my hard drive:
<ul>
<li>
After the deployment of the EJB is complete</li>

<li>
After deleting all class files associated with that deployment</li>

<li>
Prior to compiling the client program</li>
</ul>
This information may be useful to you in your efforts to duplicate my results.
<p><b><font color="#FF0000">Batch files</font></b>
<p>First, there are three batch files:
<ul>
<li>
<b>compileEJB.bat</b> - A batch file that was used to compile the Enterprise
Bean.&nbsp; This file was discussed in the lesson entitled <i>Enterprise
JavaBeans(TM): Getting Started with EJB, Part 2</i></li>

<li>
<b>compileClient.bat</b> - A batch file that will be used to compile the
client program.&nbsp; That file will be discussed in this lesson</li>

<li>
<b>testClient.bat</b> - A batch file that will be used to run the client
program and execute the Enterprise Bean.&nbsp; That file will also be discussed
in this lesson</li>
</ul>
<b><font color="#FF0000">Archive files</font></b>
<p>There are two archive files in the directory, both produced by the deployment
process discussed in the previous six lessons.
<ul>
<li>
<b>HelloApp.ear</b> - Archive file containing the J2EE application</li>

<li>
<b>HelloAppClient.jar</b> - Archive file required for execution of the
client file.</li>
</ul>
Here is what Sun has to say about the file named <b>HelloAppClient.jar</b>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td BGCOLOR="#CCFFFF"><i>"This jar file contains stub classes that allow
the client to communicate with the enterprise bean instance that is running
in the EJB container."</i></td>
</tr>
</table>

<p><b><font color="#FF0000">Contents of HelloAppClient.jar</font></b>
<p>The archive file named <b>HelloAppClient.jar</b> contains the following
files:
<ul>
<li>
HelloHome.class</li>

<li>
Hello.class</li>

<li>
HelloBean.class</li>

<li>
<b>_HelloHome_Stub.class</b></li>

<li>
<b>_Hello_Stub.class</b></li>

<li>
ejb-jar-ic.jar</li>

<li>
META-INF.application.xml</li>

<li>
META-INF.Manifest.mf</li>

<li>
META-INF.sun-j2ee-ri.xml</li>
</ul>
I plan to come back and discuss all of these files in a subsequent lesson.&nbsp;
For the moment, however, I simply want to show you a list of the files
contained in the jar file.&nbsp; This jar file will later be placed on
the classpath for execution of the client program.&nbsp; <i>(Interestingly,
it is easy to demonstrate through a process of elimination that the only
files required in the jar file for successful execution of this simple
client program are the two stub files highlighted in boldface in the above
list.)</i>
<p><b><font color="#FF0000">Java source code files</font></b>
<p>Finally, my directory contains four Java source files.
<ul>
<li>
<b>HelloBean.java</b> - The source code for the Enterprise Bean, first
discussed in the lesson entitled <i>Enterprise JavaBeans(TM): Getting Started
with EJB, Part 2</i></li>

<li>
<b>Hello.java</b> - The source code for the remote interface, first discussed
in the lesson entitled <i>Enterprise JavaBeans(TM): Getting Started with
EJB, Part 2</i></li>

<li>
<b>HelloHome.java</b> - The source code for the home interface, first discussed
in the lesson entitled <i>Enterprise JavaBeans(TM): Getting Started with
EJB, Part 2</i></li>

<li>
<b>HelloClient.java</b> - The source code for the client program, to be
discussed in this lesson</li>
</ul>

<center>
<h2>
<a NAME="Interesting Code Fragments"></a>Interesting Code Fragments</h2></center>
As is my normal style, I will break this program down and discuss it in
fragments.
<p>The first fragment, shown in Listing 1 below, shows the beginning of
the controlling class and the beginning of the <b>main()</b> method.&nbsp;
There is nothing remarkable about this fragment, and I show it here simply
for completeness.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">public class <b>HelloClient</b>{
&nbsp; public static void <b>main</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String[] args) throws Exception {

<b>Listing 1</b></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Get reference to the home interface</font></b>
<p>The next fragment, shown in Listing 2 below, contains some code that
I am not going to explain at this point, except in general terms.&nbsp;
This code uses the JNDI naming system to locate the Enterprise Bean on
the J2EE server, and to get a reference to the bean's <i>home</i> interface.&nbsp;
The reference is stored in the reference variable named <b>initial</b>.
<p>The JNDI name for the bean is <b>MyHello</b>.&nbsp; This was established
when the bean was deployed as discussed in an earlier lesson.&nbsp; <i>(I
briefly discussed the JNDI naming system in the lesson entitled Enterprise
JavaBeans(TM):&nbsp; Getting Started with EJB, Part 6.)</i>
<p>Note that the material shown in blue is likely to change from one EJB
server vendor to the next, depending on how those vendors have implemented
the standard interface.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp; try {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /********************************
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b> </b>//<b>#1 approach
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context <b>initial</b> =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new InitialContext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********************************/

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Disable everything between here
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and The End Point below when
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // approach #1 is enabled.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String url =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Enable only one of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // following three String&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // values
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //<b>#2 approach
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //"<font color="#3333FF">iiop://localhost:1050/</font>";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //<b>#3 approach
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //"<font color="#3333FF">iiop://Baldwinlaptop:1050/</font>";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //<b>#4 approach
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<font color="#3333FF">iiop://192.168.1.100:1050/</font>";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hashtable env = new Hashtable();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env.put(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context.INITIAL_CONTEXT_FACTORY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "<font color="#3333FF">com.sun.jndi.cosnaming." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "CNCtxFactory</font>");

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env.put(Context.PROVIDER_URL,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context <b>initial</b> =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new InitialContext(env);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The End Point

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The following code is common to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // all four approaches
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object objRef =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initial.lookup("<b>MyHello</b>");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelloHome <b>refToHome</b> =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (HelloHome)PortableRemoteObject.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; narrow(objRef,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelloHome.class);


<b><font face="Courier New,Courier">Listing 2</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Four different approaches</font></b>
<p>The code in listing 2 shows four different approaches to accomplishing
the same result:&nbsp; getting the reference to the <i>home</i> interface.&nbsp;
The first three approaches are disabled by comment indicators in Listing
2.
<p>Three of the four approaches are simply different ways to identify the
machine on which the J2EE server <i>(and the associated name server)</i>
is running.
<p>The fourth approach, which is enabled, uses the IP address of the machine
on which the name server is running.&nbsp; In this particular case, that
was the same machine on which the client program was running as well.
<p>No matter which approach is enabled, the end result is the same.&nbsp;
The above code ends with a reference to the <i>home</i> interface stored
in the reference variable named <b>refToHome</b>.&nbsp; That reference
will be used to create the bean and to get a reference to the <i>remote</i>
interface in Listing 4 further on.
<p><b><font color="#FF0000">The session context</font></b>
<p>As explained in the lesson entitled <i>Enterprise JavaBeans(TM): Getting
Started with EJB, Part 2,</i> execution of the above code causes the bean's
callback method named <b>setSessionContext()</b> to be invoked.&nbsp; This,
in turn, causes the text shown in Listing 3 below to appear on the screen
in the process window where the J2EE server is running <i>(note that a
line break was manually entered for this display)</i>:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td BGCOLOR="#CCFFFF"><b><tt>HelloBean got SessionContext</tt></b>
<br><b><tt>Sat Sep 16 08:13:41 CDT 2000</tt></b>
<p><b><font face="Courier New,Courier">Listing 3</font></b></td>
</tr>
</table>

<p><b><font color="#FF0000">Getting the remote interface</font></b>
<p>The next fragment, shown in Listing 4 below, uses the reference to the
home interface to create the bean object and to get a reference to the
remote interface.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hello refToRemote =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToHome.<b>create</b>();

<b>Listing 4</b></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">The create() method</font></b>
<p>I discussed the <b>create()</b> method of the home interface in the
lesson entitled <i>Enterprise JavaBeans(TM): Getting Started with EJB,
Part 2.</i>
<p>The execution of the <b>create()</b> method in Listing 4 above causes
the callback method named <b>ejbCreate()</b> to be invoked on the bean.&nbsp;
This, in turn, causes the text shown in Listing 5 below to appear on the
screen in the process window where the J2EE server is running <i>(again,
a line break was manually entered for this display)</i>:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td BGCOLOR="#CCFFFF"><b><tt>HelloBean Created&nbsp;</tt></b>
<br><b><tt>Sat Sep 16 08:13:41 CDT 2000</tt></b>
<p><b><font face="Courier New,Courier">Listing 5</font></b></td>
</tr>
</table>

<p>Note that the <b>create()</b> method is invoked on the reference to
the home interface <i>(not on a reference to the remote interface)</i>.
<p><b><font color="#FF0000">Invoking a business method</font></b>
<p>As explained in the lesson entitled <i>Enterprise JavaBeans(TM): Getting
Started with EJB, Part 2,</i> all business methods of a bean are exposed
to the client program through the remote interface.
<p>The code fragment shown in Listing 6 below uses the reference to the
remote interface to invoke a business method on the bean named <b>aBusinessMethod()</b>.
<i>(The
behavior of the business method was discussed in the lesson entitled Enterprise
JavaBeans(TM): Getting Started with EJB, Part 2.&nbsp; Basically, it receives
an incoming string parameter, concatenates a literal string onto it, and
returns the new string produced by the concatenation of the two.)</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">&nbsp;&nbsp;&nbsp;&nbsp; String returnValue =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToRemote.<b>aBusinessMethod</b>(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Dick Baldwin");&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Bean returned: "&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + returnValue);

<b>Listing 6</b></font></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Display the results</font></b>
<p>The code in Listing 6 above also displays the string returned by the
business method.
<p>Execution of code in Listing 6 above causes the output shown in Listing
7 below to appear on the screen in the process window where the client
program is running <i>(this output appears on the client screen and not
on the server screen as has been the case for output produced by the callback
methods of the bean)</i>:
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td BGCOLOR="#CCFFFF"><b><tt>Bean returned: Hello Dick Baldwin</tt></b>
<p><b><font face="Courier New,Courier">Listing 7</font></b></td>
</tr>
</table>

<p>Note that the <b>aBusinessMethod()</b> method is invoked on the reference
to the remote interface, not on the reference to the home interface.
<p><b><font color="#FF0000">Removing the bean</font></b>
<p>Finally, the code in Listing 8 below causes the bean to be <i>removed</i>.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /********************************
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Remove the bean using
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // refToRemote approach. Doesn't
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // always work properly.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>refToRemote.remove();
</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********************************/

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Remove the bean using
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // refToHome approach.&nbsp; This also
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // doesn't always work properly.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Handle handle =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToRemote.getHandle();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>refToHome.remove(handle);

<font face="Courier New,Courier">Listing 8</font></b></pre>
</td>
</tr>
</table>

<p>Execution of either version of the <b>remove()</b> method shown in Listing
8 causes the callback method named
<b>ejbRemove()</b> to be invoked on
the bean.&nbsp; This, in turn, causes the text in Listing 9 to appear on
the screen in the process window where the J2EE server is running <i>(again,
a line break was manually entered for this display format).</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td BGCOLOR="#CCFFFF"><b><tt>HelloBean Removed&nbsp;</tt></b>
<br><b><tt>Sat Sep 16 08:13:41 CDT 2000</tt></b>
<p><b><font face="Courier New,Courier">Listing 9</font></b></td>
</tr>
</table>

<p>Note that one version of the <b>remove()</b> method can be invoked on
the remote interface and the other version can be invoked on the home interface.&nbsp;
According to <u>Enterprise JavaBeans</u> by Richard Monson-Haefel, "For
session beans, <b>remove()</b> causes the session to be released and the
EJB object reference to become invalid.&nbsp; For entity beans, the actual
entity data is deleted from the database and the remote reference becomes
invalid."
<p><b><font color="#FF0000">A caution</font></b>
<p><i>I have observed some erratic behavior when invoking the <b>remove()</b>
method on either the home interface or the remote interface with J2EE version
1.2.1.&nbsp; Sometimes the invocation of the <b>remove() </b>method doesn't
cause the bean to be removed.&nbsp; In those cases, the <b>ejbRemove()</b>
method is not invoked on the bean, and it is subsequently possible to invoke
the business methods on the bean.&nbsp; The fact that the reference to
the bean doesn't become invalid in those cases confirms that the bean really
isn't being removed.</i>
<p><b><font color="#FF0000">The remaining code</font></b>
<p>The remaining code in the program is generally uninteresting.&nbsp;
You can view that code in the complete listing of the program shown near
the end of the lesson.
<p><b><font color="#FF0000">Writing, deploying, and executing a bean</font></b>
<p>So, there you have it, the writing and deployment of a simple Enterprise
Bean followed by the writing and execution of a simple client program that
invokes a business method on the Enterprise Bean.&nbsp; The client program
also performs other actions on the bean that cause certain callback methods
of the bean to be invoked.
<p>There are a few more details to be dealt with, involving the compilation
and execution of the client program.&nbsp; Those details will be dealt
with in the sections that follow.
<center>
<h2>
<a NAME="The Compilation Batch File"></a>The Compilation Batch File</h2></center>
Sometimes it is easiest to deal with classpath issues by using batch files
to run the compiler and virtual machine.
<p>Listing 10 below shows a batch file that I used to compile the client
program. <i>(Note that I had to manually insert a line break following
the word javac to make the material fit into this narrow publication format.&nbsp;
You will need to remove that line break before you use this batch file.)</i>
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><b><font face="Courier New,Courier">set J2EE_HOME=d:\progfile\j2sdkee1.2.1
set CPATH=.;%J2EE_HOME%\lib\j2ee.jar

javac&nbsp;
&nbsp;&nbsp;&nbsp; -classpath %CPATH% HelloClient.java

Listing 10</font></b></pre>
</td>
</tr>
</table>

<p><b><font color="#FF0000">Just some classpath manipulations</font></b>
<p>Hopefully, there is nothing in the batch file shown in Listing 10 that
will come as a surprise to you.&nbsp; The first line simply creates an
environment variable named <b>J2EE_HOME</b> that specifies the installation
location for the J2EE software on my system.
<p>The second line creates an environment variable named <b>CPATH</b> whose
value will later be used as a Java classpath.&nbsp; This environment variable
places the current directory on the classpath that it represents <i>(note
the single period followed by the semicolon)</i> and also specifies the
location of the jar file containing the class library files for J2EE.
<p><b><font color="#FF0000">Using the -classpath option</font></b>
<p>The third line uses the <b>-classpath</b> option of the <b>javac</b>
program to set the <i>user</i> classpath to the value of the <b>CPATH</b>
environment variable.&nbsp; This replaces any classpath variable that may
have been set earlier through other means such as the autoexec.bat file
in Win95/98, or the system dialog in WinNT.
<p>However, use of the option doesn't prevent the compiler from knowing
where to find the standard Java class libraries.&nbsp; Assuming that you
installed your Java tools as recommended by sun, the standard Java class
libraries are located by the compiler on a relative path basis and not
on the basis of a classpath variable.
<p><b><font color="#FF0000">Compiling the client program</font></b>
<p>The third line in the batch file also causes the client program named
<b>HelloClient.java</b>
to be compiled.
<p>Execute the batch file to compile your client program.&nbsp; Once you
have compiled your client program, it is ready to be used to access and
invoke business methods on the Enterprise Bean that was deployed into the
J2EE server in the earlier lessons.&nbsp; First, however, it is necessary
to start the J2EE server running.
<center>
<h2>
<a NAME="Starting the Server"></a>Starting the Server</h2></center>
To start the J2EE server running, open a command prompt window and enter
the following command at the prompt.&nbsp; <i>(For convenience, I have
a batch file containing the following command so that all I have to do
is double-click the name of the batch file in Windows Explorer.&nbsp; Actually,
I have a shortcut to the batch file on my desktop so all that I really
have to do is to double click on the shortcut icon on the desktop to start
the J2EE server running.&nbsp; I have a similar batch file and shortcut
for stopping the server.)</i>
<p><b>j2ee -verbose</b>
<p>A large amount of text will appear on the screen as the server starts
running.&nbsp; Make certain that the text on that screen ends with the
following text.&nbsp; Otherwise, the server hasn't been properly started.
<p><b><tt>J2EE server startup complete.</tt></b>
<center>
<h2>
<a NAME="The Client jar File"></a>The Client jar File</h2></center>
Make certain that the file named <b>HelloAppClient.jar</b> is in the same
directory where you have compiled, and where you intend to run your client
program.&nbsp; If it is not there, find it and copy it into that directory
<i>(it
was produced and placed somewhere on your disk by the deployment process
in an earlier lesson).</i>
<center>
<h2>
<a NAME="The Execution Batch File"></a>The Execution Batch File</h2></center>
The contents of a batch file that I use to execute the client program are
shown in Listing 11 below.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre><font face="Courier New,Courier">set J2EE_HOME=d:\progfile\j2sdkee1.2.1

set CPATH=.;%J2EE_HOME%\lib\j2ee.jar;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <b>HelloAppClient.jar


</b>java -classpath "%CPATH%" <b>HelloClient

</b>pause

<b>Listing 11</b></font></pre>
</td>
</tr>
</table>

<p>Note that this batch file places the jar file named <b>HelloAppClient.jar</b>
on the classpath so that the virtual machine can find the stub files, which
are contained in that jar file.&nbsp; These stub files were discussed earlier.
<i>(In
this case, I had to insert a manual line break in the second line.&nbsp;
You will need to remove it before attempting to use a copy of Listing 11
as a batch file.)</i>
<p>There shouldn't be anything in Listing 11 that you don't understand.
<i>(The
use of the pause at the end makes it possible to simply click on the name
of the batch file in Windows Explorer in order to execute the batch file.)</i>
<p><b><font color="#FF0000">Exercise the Enterprise Bean</font></b>
<p>Double-click on the name of the batch file shown in Listing 11 above
to run the client program.&nbsp; This will cause:
<ul>
<li>
The bean to be created</li>

<li>
Several of its callback methods to be executed</li>

<li>
A business method to be invoked on the bean</li>

<li>
The bean to be removed</li>
</ul>
Running the batch file should cause a new process window to appear.&nbsp;
After a pause, the text shown in Listing 12 below should appear in that
process window.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td BGCOLOR="#CCFFFF">
<pre><font face="Courier New,Courier"><b>Bean returned: Hello Dick Baldwin

</b>D:\... pause (path removed for brevity)
Press any key to continue . . .

<b>Listing 12</b></font></pre>
</td>
</tr>
</table>

<p>Also, while the bean is running, you should see three lines of output
produced by the bean's callback methods appear on the server screen.
<center>
<h2>
<a NAME="Stopping the Server"></a>Stopping the Server</h2></center>
Don't forget to shut down the J2EE server properly by entering the following
in a separate command prompt window <i>(as mentioned earlier, I also have
a little batch file set up to do this as well).</i>
<p><b>j2ee -stop</b>
<center>
<h2>
<a NAME="When Things Don't Work as Planned"></a>When Things Don't Work
as Planned</h2></center>
<b><font color="#FF0000">May need to modify and redeploy your bean</font></b>
<p>One of the things that makes EJB programming difficult is the fact that
you really can't test your bean until you have deployed it and have written
a client program to test it.
<p>Hopefully, everything will work as planned.&nbsp; However, sometimes
when you get to the stage of testing your bean using a client program,
you will discover that the behavior of your bean is not exactly what you
wanted it to be.&nbsp; In that case, you will need to modify and redeploy
your bean.
<p><b><font color="#FF0000">Edit and recompile source code</font></b>
<p>If you can correct your problem by making changes in the source code
for your existing bean classes, redeployment is straightforward.&nbsp;
Just edit your source code and recompile it.&nbsp; Then start the server
and the deployment tool as described in the previous lessons.
<p><b><font color="#FF0000">Update and redeploy application</font></b>
<p>One of the buttons on the toolbar of the deployment tool has a tool
tip that reads <i>Update and Redeploy Application</i>.&nbsp; This selection
also appears on the <b>Tools</b> menu.
<p>Click the button, or make the selection from the <b>Tools </b>menu.&nbsp;
You should see the Deployment Progress Screen shown in Figure 7 of the
lesson entitled <i>Enterprise JavaBeans(TM):&nbsp; Getting Started with
EJB, Part 6</i>.
<p>If the green and blue bars on the progress screen make it all the way
to the top and the text indicates that the deployment is complete, you
should be able to test the modified version of your bean using your client
program.
<center>
<h2>
<a NAME="Summary"></a>Summary</h2></center>
<font color="#000000">This, and the six previous lessons have walked you
step-by-step through the process of</font>
<ul>
<li>
<font color="#000000">Writing a simple Enterprise Bean</font></li>

<li>
<font color="#000000">Deploying the bean in the J2EE server</font></li>

<li>
<font color="#000000">Writing a client program to exercise the bean</font></li>

<li>
<font color="#000000">Running the client program</font></li>
</ul>
<font color="#000000">Hopefully, you have been able to follow along and
duplicate the results shown above.</font>
<center>
<h2>
<a NAME="Where To From Here"></a>Where To From Here?</h2></center>
Although these seven lessons have shown you how to write, deploy, and exercise
a simple Enterprise Bean, they have not explained many of the details involved
in that process.&nbsp; These lessons were intended as an introduction to
get you up and running with your own bean on your own system very quickly.
<p>Future lessons in this series on EJB will fill in the details for this
simple bean.&nbsp; Future lessons will also show you how to write and use
more complex beans, taking advantage of many of the powerful features that
EJB has to offer.
<center>
<h2>
<a NAME="Complete Program Listings"></a>Complete Program Listings</h2></center>
A complete listing of the client program is shown in Listing 13 below.&nbsp;
Listings of the batch files used to compile and execute the client program
are shown in Listings 10 and 11 earlier in the lesson.
<br>&nbsp;
<table BORDER COLS=1 WIDTH="400" BGCOLOR="#FFFF00" >
<tr>
<td>
<pre>/* File HelloClient.java
Copyright 2000 R.G.Baldwin
Rev 9/15/00

This client program was tested with the
bean named HelloBean.&nbsp; That is a simple
session bean that receives and returns&nbsp;
a String object.

The following output was produced in&nbsp;
the windowwhere the client program was
running:
&nbsp;&nbsp;
Bean returned: Hello Dick Baldwin

The following output was produced in&nbsp;
the window where the j2ee server was&nbsp;
running with the HelloBean installed on
the server (line breaks were manually
inserted in this display):
&nbsp;&nbsp;
HelloBean got SessionContext&nbsp;
Sat Sep 16 08:13:41 CDT 2000
HelloBean Created&nbsp;
Sat Sep 16 08:13:41 CDT 2000
HelloBean Removed&nbsp;
Sat Sep 16 08:13:41 CDT 2000
**************************************/
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.rmi.PortableRemoteObject;
import java.util.Hashtable;

public class HelloClient{
&nbsp; public static void main(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String[] args) throws Exception {
&nbsp;&nbsp;&nbsp; //Get a reference to the bean's&nbsp;
&nbsp;&nbsp;&nbsp; // home interface.&nbsp; Here are four
&nbsp;&nbsp;&nbsp; // different ways to do it. MyHello
&nbsp;&nbsp;&nbsp; // is the JNDI name for the bean.
&nbsp;&nbsp;&nbsp; //The information required to
&nbsp;&nbsp;&nbsp; // construct the last three was
&nbsp;&nbsp;&nbsp; // obtained from a code sample at&nbsp;
&nbsp;&nbsp;&nbsp; // the following URL:
&nbsp;&nbsp;&nbsp; // http://developer.java.sun.
&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; com/developer/codesamples/
&nbsp;&nbsp;&nbsp; //&nbsp;&nbsp; javax.naming/283.html
&nbsp;&nbsp;&nbsp; try {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /********************************
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //#1
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context initial =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new InitialContext();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********************************/

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Disable everything between here
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // and The End Point below when
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // #1 is enabled.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String url =
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Enable only one of the&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // following three String&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // values
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //#2&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //"iiop://localhost:1050/";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //#3
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //"iiop://Baldwinlaptop:1050/";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //#4
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "iiop://192.168.1.100:1050/";
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hashtable env = new Hashtable();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env.put(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context.INITIAL_CONTEXT_FACTORY,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "com.sun.jndi.cosnaming." +
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "CNCtxFactory");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; env.put(Context.PROVIDER_URL,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; url);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Context initial =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new InitialContext(env);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The End Point

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //The following code is common to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // all four approaches
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Object objRef =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initial.lookup("MyHello");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelloHome refToHome =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (HelloHome)PortableRemoteObject.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; narrow(objRef,&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HelloHome.class);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Use the home reference to
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // create the bean object and
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // get a remote reference.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Hello refToRemote =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToHome.create();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Invoke a business method on the
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // remote reference to the bean
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; String returnValue =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToRemote.aBusinessMethod(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Dick Baldwin");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.out.println(
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "Bean returned: "

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; + returnValue);

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /********************************
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Remove the bean using
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // refToRemote approach. Doesn't
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // always work properly.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToRemote.remove();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ********************************/

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //Remove the bean using
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // refToHome approach.&nbsp; This also
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // doesn't always work properly.
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Handle handle =&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToRemote.getHandle();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; refToHome.remove(handle);

&nbsp;&nbsp;&nbsp; }catch (Exception ex) {
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; System.err.println("Exception!");
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ex.printStackTrace();
&nbsp;&nbsp;&nbsp; }//end catch
&nbsp; }//end main
}//end class

<b><font face="Courier New,Courier">Listing 13</font></b></pre>
</td>
</tr>
</table>

<p>
<hr size=3 width="100%" align=center>
<p>Copyright 2000, Richard G. Baldwin.&nbsp; Reproduction in whole or in
part in any form or medium without express written permission from Richard
Baldwin is prohibited.
<h4>
<a NAME="BaldwinBio"></a>About the author</h4>
<b><a href="mailto:baldwin.richard@iname.com">Richard Baldwin</a></b><i>
is a college professor and private consultant whose primary focus is a
combination of Java and XML. In addition to the many platform-independent
benefits of Java applications, he believes that a combination of Java and
XML will become the primary driving force in the delivery of structured
information on the Web.</i>
<p><i>Richard has participated in numerous consulting projects involving
Java, XML, or a combination of the two.&nbsp; He frequently provides onsite
Java and/or XML training at the high-tech companies located in and around
Austin, Texas.&nbsp; He is the author of Baldwin's Java Programming <a href="http://www.geocities.com/Athens/7077/scoop/onjava.html">Tutorials</a>,
which has gained a worldwide following among experienced and aspiring Java
programmers. He has also published articles on Java Programming in Java
Pro magazine.</i>
<p><i>Richard holds an MSEE degree from Southern Methodist University and
has many years of experience in the application of computer technology
to real-world problems.</i>
<p><i><a href="mailto:baldwin.richard@iname.com">baldwin.richard@iname.com</a></i>
<p>-end-
<br>&nbsp;
<br>&nbsp;
<br>&nbsp;
</body>
</html>
